---
http_interactions:
- request:
    method: get
    uri: https://www.aristimmo.com/vente-75/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:27 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=s6pfc4l57aaoppedolc509nulm; path=/
      - SRV=c22; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '10954'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>Ventes 75 - Aristimmo</title>
        <meta name="description" content="">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/vente-75/1" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
                
        
        
                                                        
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_b48cf1eb73cfffea1a08b02eaaefc8c1.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageListing" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/vente-75/1">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/vente-75/1">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class="active  ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    <div id="containerListing">
        <div class="themTitle">
            
                <h1>
                                            Nos annonces de ventes 75.
                                    </h1>
            
             
            
                                    <script type='application/ld+json'>
                                            {
                        "@context":"https://schema.org",
                        "@type":"BreadcrumbList",
                        "itemListElement":
                        [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                "item": {
                                "@id":"/",
                                "name":"Accueil"
                                }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                "item": {
                                "@id":"/vente-75/1",
                                "name":"Nos annonces de ventes 75."
                                }
                                }
                                                                                                        ]
                        }
                                        </script>
                    <ol class="breadcrumb">
                                                                                                                        <li><a href="/" >Accueil</a></li>
                                                                                                                                <li>Nos annonces de ventes 75.</li>
                                                                                                        </ol>  
                            
        </div>
        <div class="contentlst">
            
                                    <div class="row lstAlert">
                        <div class="col-md-12">
                            <ul class="nav nav-pills pull-left">
                                <li class="col-md-3 col-xs-4 p0">
                                    <a href="/alerte-email.html" class="col-md-8" >créer votre propre<br><span class="upper">Alerte E-mail</span></a>
                                    <div class="col-md-4 backBadge">
                                        <span class="triangle"></span>
                                        <img src="/images/lstAlert.png" />
                                    </div>
                                </li>
                                <li class="txtAlert col-md-9 col-xs-8">
                                    <span class="col-md-6 p0"> et recevez les biens correspondants à votre recherche dans votre boîte mail !</span>
                                    <form method="post" action="/alerte-email.html" class="col-md-6 p0">
                                        <div class="form-group col-md-7 p0">
                                            <input type="text" class="form-control" name="data[AlerteFromListing][email]" id="mail" placeholder="Votre adresse mail" name="">  
                                        </div>
                                        <button class="envoi col-md-5 p0" type="submit">
                                            Envoyer
                                            <span class="badge"> <span class="icon-fleche"></span> </span>
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </div>
                    </div>
                            
            
             
            
                        
                <div class="row utilListing lstTop">
                    <div class="col-md-12">
                        
                            <ul class="pagination">
                                                                                                            <li class="active"><a href="#" class="btn btn-default">1</a></li>
                                                                                                </ul>
                            <span class="trait"> </span>
                        
                        
                            <ul class="pull-right list-inline sort">
                                <li class="sortTxt">Trier par : </li> 
                                
                                                                            <li>
                                            <form method="post" name="triprix" action="/vente-75/1">
                                            <input type="hidden" name="Sort[field]" value="prix">
                                            <input type="hidden" name="Sort[order]" value="ASC">
                                            <button onclick="document.forms['triprix'].submit();" class=" active  btn btn-default">Prix</button>
                                            </form>
                                        </li>
                                                                            <li>
                                            <form method="post" name="tridateenr" action="/vente-75/1">
                                            <input type="hidden" name="Sort[field]" value="dateenr">
                                            <input type="hidden" name="Sort[order]" value="ASC">
                                            <button onclick="document.forms['tridateenr'].submit();" class=" btn btn-default">Date</button>
                                            </form>
                                        </li>
                                                                    
                            </ul>
                        
                    </div>
                </div>
            
            
            
    <section class="row listing2">
                                            <ul class="listingUL">
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1992-6-pieces-178-64m2-Paris-9e.html'">
                                                                                                                                                    
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="2390000">2 390 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                    
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1992-6-pieces-178-64m2-Paris-9e.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" itemprop="image" alt="Offres de vente Appartement Paris (75009)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1992-6-pieces-178-64m2-Paris-9e.html">
                                    
                                        6 pièces - 178,64m2 - Paris 9e
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Appartement
                                    
                                    
                                         178.64 m&sup2; - 
                                    
                                    
                                         6 pièces -                                    
                                    
                                        Paris (75009)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 562</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement familial entièrement rénové par architecte. Il se compose d'une triple espace de réception...
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1992"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1992-6-pieces-178-64m2-Paris-9e.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1722-Maison-187m2-Paris-13e.html'">
                                                                                                                                                    
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="1850000">1 850 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1722-Maison-187m2-Paris-13e.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" itemprop="image" alt="Offres de vente Maison Paris (75013)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1722-Maison-187m2-Paris-13e.html">
                                    
                                        Maison - 187m2 - Paris 13e
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Maison
                                    
                                    
                                         186.64 m&sup2; - 
                                    
                                    
                                         5 pièces -                                    
                                    
                                        Paris (75013)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 531</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison contemportaine revisitée par architecte. Elevée sur trois niveaux, elle se compose au...
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1722"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1722-Maison-187m2-Paris-13e.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1676-Maison-183m2-Paris-19e.html'">
                                                                                                                                                    
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="1490000">1 490 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1676-Maison-183m2-Paris-19e.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" itemprop="image" alt="Offres de vente Maison Paris (75019)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1676-Maison-183m2-Paris-19e.html">
                                    
                                        Maison - 183m2 - Paris 19e
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Maison
                                    
                                    
                                         184.26 m&sup2; - 
                                    
                                    
                                         7 pièces -                                    
                                    
                                        Paris (75019)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 479</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confection transform&eacute; en maison. Il est compos&eacute; d'un espace de r&eacute;ception cath&eacute;drale avec s&eacute;jour, salle &agrave;...
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1676"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1676-Maison-183m2-Paris-19e.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1214-5-pieces-121m2-Paris-13e.html'">
                                                                                                                                                    
                                                          
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="1300000">1 300 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1214-5-pieces-121m2-Paris-13e.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/original/8787db43bcc2bd8875704d31652c548a.jpg" itemprop="image" alt="Offres de vente Appartement Paris (75013)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1214-5-pieces-121m2-Paris-13e.html">
                                    
                                        5 pièces - 121m2 - Paris 13e
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Appartement
                                    
                                    
                                         121 m&sup2; - 
                                    
                                    
                                         5 pièces -                                    
                                    
                                        Paris (75013)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 435.</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    PORT-ROYAL. En bordure du 5&egrave;me arrondissement, et surplombant une succession de jardins, venez d&eacute;couvrir cet appartement familial de 5 pi&egrave;ces au 6&egrave;me &eacute;tage d'une copropri&eacute;t&eacute; de standing. Il est...
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1214"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1214-5-pieces-121m2-Paris-13e.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html'">
                                                                                                            <span class="StatutBien exclusif">Exclusivité</span>                                        
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="1130000">1 130 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" itemprop="image" alt="Offres de vente Appartement Paris (75005)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">
                                    
                                        4 pièces avec terrasse - 85 m2 - Paris 5e
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Appartement
                                    
                                    
                                         90 m&sup2; - 
                                    
                                    
                                         4 pièces -                                    
                                    
                                        Paris (75005)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 470</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3 pi&egrave;ces atypique avec terrasse. En effet, ce bien se divise en deux parties reli&eacute;es par un...
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1507"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html'">
                                                                                                                                                    
                                                          
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="967000">967 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                    
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/original/f28026e5c83d92f4a6c760955947d322.jpg" itemprop="image" alt="Offres de vente Appartement Paris (75009)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html">
                                    
                                        4 pièces avec terrasse - 80,21m2 - Paris 9e
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Appartement
                                    
                                    
                                         80.21 m&sup2; - 
                                    
                                    
                                         4 pièces -                                    
                                    
                                        Paris (75009)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 502</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    SAINT-GEORGES-BLANCHE. Dans un tr&egrave;s bel immeuble ancien en Pierre de Taille datant de la fin du 19&egrave;me si&egrave;cle, venez visiter cet appartement lumineux avec le charme de l'ancien. Situ&eacute; au 2&egrave;me &eacute;tage...
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1674"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html'">
                                                                                                                                                    
                                                          
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="698000">698 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/d0c23c0a2d17723732e9279475708781/original/7964d5bb139cf96813adfcd4d69b0ead.jpg" itemprop="image" alt="Offres de vente Appartement Paris (75017)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html">
                                    
                                        3 pièce avec balcon - 60,53m2 - Paris 17e
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Appartement
                                    
                                    
                                         60.77 m&sup2; - 
                                    
                                    
                                         3 pièces -                                    
                                    
                                        Paris (75017)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 431</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    Coeur Batignolles - rue Lemercier&nbsp;Dans un immeuble ancien typique du quartier des Batignolles, venez visiter ce bel appartement d'angle situ&eacute; au 5&egrave;me &eacute;tage tr&egrave;s lumineux avec vue d&eacute;gag&eacute;e dans...
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1269"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1797-2-pieces-48m2-Paris-16e.html'">
                                                                                                                                                    
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="598000">598 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1797-2-pieces-48m2-Paris-16e.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" itemprop="image" alt="Offres de vente Appartement Paris (75116)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1797-2-pieces-48m2-Paris-16e.html">
                                    
                                        2 pièces - 48m2 - Paris 16e
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Appartement
                                    
                                    
                                         48 m&sup2; - 
                                    
                                    
                                         2 pièces -                                    
                                    
                                        Paris (75116)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 550</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, découvrez cet appartement de deux pièces au 5ème et dernier étage par ascenseur d'une...
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1797"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1797-2-pieces-48m2-Paris-16e.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1693-2-pieces-28m2-Paris-10e.html'">
                                                                                                            <span class="StatutBien exclusif">Exclusivité</span>                                        
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="299000">299 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1693-2-pieces-28m2-Paris-10e.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" itemprop="image" alt="Offres de vente Appartement Paris (75010)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1693-2-pieces-28m2-Paris-10e.html">
                                    
                                        2 pièces - 28m2 - Paris 10e
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Appartement
                                    
                                    
                                         28.39 m&sup2; - 
                                    
                                    
                                         2 pièces -                                    
                                    
                                        Paris (75010)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 485</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien entretenu, venez visiter ce deux pièces refait à neuf par architecte situé au 2ème étage....
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1693"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1693-2-pieces-28m2-Paris-10e.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
                    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
            <li class="col-xs-12 panelBien p0">
            <article itemscope itemtype="https://schema.org/Product">
                <div class="panel panel-default">
                    <div class="col-xs-12 col-sm-5 panel-heading" onclick="location.href='/1880-Place-de-parking-75019-Paris-Crimee.html'">
                                                                                                                                                    
                                                          
                        
        
                        
                                    
                    
    
                        
                        
                            <ul class="list-inline">
                                
                                    <li>
                                                                                    Prix
                                                                            </li>
                                
                                
                                    <li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                                                        <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="16500">16 500</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                 
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                                                        </li>
                                
                            </ul>
                        
                        <meta itemprop="url" content="/1880-Place-de-parking-75019-Paris-Crimee.html"/>
                        <img src="//aristimmo.staticlbi.com/680x680/images/biens/1/838a9ffa718de2ac810d65143a5b1a18/original/photo_fba1090c4b5876557100dde436d848dc.jpg" itemprop="image" alt="Offres de vente Parking Paris (75019)" width="680" />
                    </div>
                    <div class="col-xs-12 col-sm-7 panel-body">
                        <div class="bienTitle">
                        
                            <h1 itemprop="name">
                                <a href="/1880-Place-de-parking-75019-Paris-Crimee.html">
                                    
                                        Place de parking - 75019 Paris - Crimée
                                    
                                </a>
                            </h1>
                            <h2>
                                
                                    
                                        Parking
                                    
                                    
                                         
                                    
                                    
                                                                            
                                    
                                        Paris (75019)
                                    
                                
                            </h2>
                            <span itemprop="productID" class="ref">Ref 570</span>
                        
                        </div>
                        
                        <div class="panel-footer pull-left">
                                                            <p itemprop="description">
                                    Paris 19ème - A 100 mètres du métro Crimée (ligne 7) et à 5 min de le Porte de la Villette
Une place de stationnement située au 2ème sous-sol d'une résidence sécurisée (caméra) avec ascenseur....
                                </p>
                                                        <div class="backBtn">
                                                                    <button class="btn btn-select">
                                        <span class="pull-left">Sélectionner</span> 
                                        <span class="icon-selection icons fs-24 pull-right p0"></span>
                                        <input type="hidden" value="1880"/>
                                    </button>
                                                                <a class="btn btn-listing pull-right" href="/1880-Place-de-parking-75019-Paris-Crimee.html">
                                    <span class="pull-left">Voir le bien</span> 
                                    <span class="icon-voirplus fs-24 pull-right"></span>
                                </a>
                            </div>
                        </div>
                        

                    </div>
                </div>
            </article>
            </li>
            </ul>
    </section>

            
            
                <div class="row utilListing lstBottom">
                    <div class="col-md-12">
                        <span class="trait ml0"> </span>
                            <ul class="pagination">
                                                                                                            <li class="active"><a href="#" class="btn btn-default">1</a></li>
                                                                                                </ul>
                        <span class="trait mr0"> </span>
                    </div>
                </div>
            
        </div>
                
        
                                                <p class="small asterix mt10">* Honoraires d'Agences Inclus</p>
                        
        
    </div>
    

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
        

    

        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
         
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:27 GMT
- request:
    method: get
    uri: https://www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:27 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=gho771fbst0l48u2ev1c4f3dop; path=/
      - SRV=c25; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w5
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '16580'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>vente 6 pièces - 178,64m2 - Paris 9e</title>
        <meta name="description" content="vente appartement 6 pièces Paris : 6 pièces - 178,64m2 - Paris 9e">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
    
        <meta property="og:title" content="6 pi&egrave;ces - 178,64m2 - Paris 9e" />
        <meta property="og:type" content="Website" />
        <meta property="og:url" content="https://www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html" />
        <meta property="og:image" content="https://www.aristimmo.com/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" />
    

        
                
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_ae4c1e4013717f3258e6bc12c3208432.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageDetail" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class=" ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="23" >
            Commerce
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    
    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
    
            
                        <div id="Calculette" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                  <div class="row modal-content">
                    <form class="form-horizontal" role="form" action="" onsubmit="return calculateCredit(this);">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title themTitle">Calculette</h4>
                        </div>
                        <div class="modal-body">
                            
                                <div class="form-group">
                                    <label for="montant" class="col-md-4 control-label">Montant *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="montant" id="montant" value="2390000">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="taux" class="col-md-4 control-label">Taux (%) * </label>
                                    <div class="col-md-8">
                                        <input type="number" step="0.01" min="0" class="form-control" name="taux" id="taux" required="">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="apport" class="col-md-4 control-label">Apport </label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control numericInput" name="apport" id="apport">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label">Durée (Années) * </label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="duree" id="duree" required="">
                                    </div>
                                </div>
                            
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label text-left">Mensualités </label>
                                    <div class="col-md-8 text-left">
                                      <span class="result"> </span>
                                    </div>
                                </div>
                            
                        </div>
                        <div class="modal-footer">
                            <label class="small obligChamp pull-left">*Champs obligatoires</label>
                            <button type="submit" class="btn btn-default right">Calculer</button>
                        </div>
                    </form>
                  </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
                     
    
    
            
            <div id="sendFriend" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1992-6-pieces-178-64m2-Paris-9e.html">
                            <input type="hidden" name="action" value="sendFriend">
                            <input type="hidden" name="data[Contact][url]" value="https://www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Partager</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="data[Contact][nom]" class="col-md-4 control-label">Votre nom *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="data[Contact][nom]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][from]" class="col-md-4 control-label">Votre adresse mail *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][from]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][to]" class="col-md-4 control-label">Mail de votre ami *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][to]" required="">
                                    </div>
                                </div>
                                <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                
                                <div class="form-group">
                                    <label for="data[Contact][message]" class="col-md-4 control-label">Votre message</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" id="message" name="data[Contact][message]">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
    
    
        
        
                                                                    <div id="Contact" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1992-6-pieces-178-64m2-Paris-9e.html">
                            <input type="hidden" value="www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html" name="data[Contact][originemail]">
                            <input type="hidden" value="contact@aristimmo.com"  name="data[Contact][to]">
                            
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Contacter</h4>
                            </div>
                            <div class="modal-body">
                                
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre nom  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][nom]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre adresse mail  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="email"   placeholder=""  name="data[Contact][email]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre Téléphone  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][tel]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre ville  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][ville]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre message </label>
                                            <div class="col-xs-12 col-sm-8">
                                                <textarea name="data[Contact][message]" class="form-control" placeholder="" ></textarea>
                                            </div>
                                        </div>
                                                                        <div class="form-group">
                                        <div class="col-xs-12 col-sm-8 col-sm-push-4 control-label">
                                            Référence: 562
                                        </div>
                                    </div>
                                
                                <input type="hidden" name="data[idbien][]" value="1992" />
                            </div>
                            <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                             
                            <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreementmodal" />
    <label for="rgpd-agreementmodal">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreementmodal');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                        <div class="legals">
                            <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
      
    
    
        <div id="Visite" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="row modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title themTitle">Visite Virtuelle</h4>
                    </div>
                    <div class="modal-body text-center">
                                                    <iframe src="" width="800" height="500" frameborder="0" allowfullscreen></iframe>
                                            </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
    
    
    <div itemscope itemtype="https://schema.org/Product" class="containerDetail">
        
            <div class="themTitle">
                <h1 itemprop="name">6 pièces - 178,64m2 - Paris 9e</h1>
                <script type='application/ld+json'>
                {
                    "@context":"https://schema.org",
                    "@type":"BreadcrumbList",
                    "itemListElement":
                    [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                    "item": {
                                        "@id":"/",
                                        "name":"Accueil"
                                    }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                  "item": {
                                        "@id":"/1992-6-pieces-178-64m2-Paris-9e.html",
                                        "name":"6 pièces - 178,64m2 - Paris 9e"
                                    }
                                }
                                                                                                    ]
                }
                </script>
                <ol class="breadcrumb">
                                            <li><a href="/" >Accueil</a></li>
                                            <li><a href="/i/annonces/listing?ville=39911" >Paris</a></li>
                                            <li>6 pièces - 178,64m2 - Paris 9e</li>
                </ol>
            </div>
        
        <div class="containerDt">
            
                <div class="row">
                    <div class="col-md-12 backlist">
                        <div class="btn btn-default back pull-left"> < Retour</div>
                        
                                
                    
    
                    </div>
                </div>
            
            
            
    <div class="dt1 sliderV2">
        <div class="topContent">
            
                <div class="posTitle">
                    <div class="bienTitle">
                       
                            <h2>
                                Appartement
                                 178.64 m&sup2; - 
                                 6 pièces - 
                                Paris (75009)
                            </h2>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mainImg">
                            
                                <ul class="list-inline">
                                    
                                        <li>
                                                                                            Prix
                                                                                    </li><li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="2390000">2 390 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                
                                                                                    
                                                
                                                                                    </li>
                                        <li class="ref" itemprop="productID">
                                            Ref 562
                                        </li>
                                </ul>
                            
                            
                                                                                                                                                            
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                            
                        </div>
                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12 diapoDetail">
                            
        <div class="loader">
            <img src="images/loading.gif" alt="gallery loader"/>
        </div>
        <ul class="imageGallery  loading">
                                                            <li data-iterator="0"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_2ad9290447516c4379242bd280e0db15.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_2ad9290447516c4379242bd280e0db15.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_2ad9290447516c4379242bd280e0db15.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_2ad9290447516c4379242bd280e0db15.jpg" alt="" />
                    </li>
                                    <li data-iterator="1"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_305f0bcd44a636f48bb1aa7ff0f50f0f.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_305f0bcd44a636f48bb1aa7ff0f50f0f.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_305f0bcd44a636f48bb1aa7ff0f50f0f.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_305f0bcd44a636f48bb1aa7ff0f50f0f.jpg" alt="" />
                    </li>
                                    <li data-iterator="2"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_53964124c9e86f3b71474f6d33a8dad6.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_53964124c9e86f3b71474f6d33a8dad6.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_53964124c9e86f3b71474f6d33a8dad6.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_53964124c9e86f3b71474f6d33a8dad6.jpg" alt="" />
                    </li>
                                    <li data-iterator="3"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_1285f8b963b0e474a5a89045ea93b0b1.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_1285f8b963b0e474a5a89045ea93b0b1.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_1285f8b963b0e474a5a89045ea93b0b1.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_1285f8b963b0e474a5a89045ea93b0b1.jpg" alt="" />
                    </li>
                                    <li data-iterator="4"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_be6a07fc3c3805855871350060c418eb.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_be6a07fc3c3805855871350060c418eb.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_be6a07fc3c3805855871350060c418eb.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_be6a07fc3c3805855871350060c418eb.jpg" alt="" />
                    </li>
                                    <li data-iterator="5"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_d4c378a9a440fe8004b4acbadecf4510.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_d4c378a9a440fe8004b4acbadecf4510.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_d4c378a9a440fe8004b4acbadecf4510.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_d4c378a9a440fe8004b4acbadecf4510.jpg" alt="" />
                    </li>
                                    <li data-iterator="6"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_70ca266eccb63558d2b5542f3e2726bc.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_70ca266eccb63558d2b5542f3e2726bc.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_70ca266eccb63558d2b5542f3e2726bc.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_70ca266eccb63558d2b5542f3e2726bc.jpg" alt="" />
                    </li>
                                    <li data-iterator="7"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_052bdabb8afbdcaa63c40d0e3d4be96c.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_052bdabb8afbdcaa63c40d0e3d4be96c.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_052bdabb8afbdcaa63c40d0e3d4be96c.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_052bdabb8afbdcaa63c40d0e3d4be96c.jpg" alt="" />
                    </li>
                                    <li data-iterator="8"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_89bc1dde69d9033903f0708e84cace8a.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_89bc1dde69d9033903f0708e84cace8a.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_89bc1dde69d9033903f0708e84cace8a.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_89bc1dde69d9033903f0708e84cace8a.jpg" alt="" />
                    </li>
                                    <li data-iterator="9"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_929de3cfa87f1794448ffd7de4e11a65.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_929de3cfa87f1794448ffd7de4e11a65.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_929de3cfa87f1794448ffd7de4e11a65.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_929de3cfa87f1794448ffd7de4e11a65.jpg" alt="" />
                    </li>
                                    <li data-iterator="10"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_2e9fe08b1528be0af936666b203072a4.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_2e9fe08b1528be0af936666b203072a4.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_2e9fe08b1528be0af936666b203072a4.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_2e9fe08b1528be0af936666b203072a4.jpg" alt="" />
                    </li>
                                    <li data-iterator="11"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_0edff7bf2df5fcf9455030385869d127.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_0edff7bf2df5fcf9455030385869d127.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_0edff7bf2df5fcf9455030385869d127.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_0edff7bf2df5fcf9455030385869d127.jpg" alt="" />
                    </li>
                                    <li data-iterator="12"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_0edaf3b10d44c2dc78b78e5a9973ed86.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_0edaf3b10d44c2dc78b78e5a9973ed86.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_0edaf3b10d44c2dc78b78e5a9973ed86.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/45558163b8b37284bbcedf45b93384bc/photo_0edaf3b10d44c2dc78b78e5a9973ed86.jpg" alt="" />
                    </li>
                                    </ul>
    

                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12">
                        <div class="actionDt">
                            


                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#Contact">
                                    <span class="pull-left txtBtn">Contacter</span> 
                                    <span class="icon-contactmail icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#sendFriend">
                                    <span class="pull-left txtBtn">Envoyer l'offre</span> 
                                    <span class="icon-partager icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" onclick="window.open('/admin/pdf.php?lang=fr&idann=1992&fiche_type=visite&pdf_orientation=P&pdf_template=1'); return false;">
                                    <span class="pull-left txtBtn">Imprimer</span> 
                                    <span class="icon-imprimer icons pull-right"></span>
                                </button>
                            
                            
                                                                    <button class="btn btn-dt" data-toggle="modal" data-target="#Calculette">
                                        <span class="pull-left txtBtn">Calculatrice</span> 
                                        <span class="icon-calculette icons pull-right"></span>
                                    </button>
                                                            
                        </div>
                    </div>
                </div>
            
        </div>
        <div class="mainContent">
            
                <div class="row">
                    <div class="col-md-12 elementDt">
                        <div class="themTitle pull-left mr30">Partager cette offre</div>
                        <div class="partage pull-left ml5" data-url="https://www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html">
                            <div id="facebook" class="rsvDt" data-url="https://www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html?lang=fr" data-title=" "></div>
                            <div id="twitter" class="rsvDt">
                                <div class="box">
                                    <span class="share icons-dt">
                                        <a href="https://twitter.com/intent/tweet?original_referer=https://www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html&ref_src=twsrc^tfw&text=vente 6 pièces - 178,64m2 - Paris 9e&tw_p=tweetbutton&url=https://www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html"></a>
                                    </span>
                                    <span class="count">+1</span>
                                </div>
                            </div>
                            <div id="googleplus" class="rsvDt" class="mr0" data-url="https://www.aristimmo.com/1992-6-pieces-178-64m2-Paris-9e.html" data-title=" "></div>
                        </div>
                    </div>
                </div>
            
            <div class="row">
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Description de l'offre</div>
                        <p itemprop="description">NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement familial entièrement rénové par architecte. Il se compose d'une triple espace de réception avec cuisine intégrée, de trois chambres dont deux avec salle de bains, de deux WC indépendants et d'une cave. L'appartement bénéficie de prestations de grande qualité : Parquet point de Hongrie, moulures, cheminées, beaux volumes (hauteur sous plafond de 3m), quatre expositions (réception sud et ouest avec vue sur monument historique), nombreux rangements, et rénovation soignée avec matériaux nobles. Proximité immédiate des transports en commun et des commerces. Possibilité d'exercer une profession libérale. Coup de coeur assuré !
Obligations loi ALUR: honoraires à la charge du vendeur inclus de le prix de présentation. La copropriété inclut 22 lots pour un montant annuel de la quote-part du budget prévisionnel des dépenses courantes de 3 232 euros.. Le syndicat de copropriété ne fait pas l'objet d'une procédure relative aux copropriétés. L'agence immobilière Aristimmo ne doit recevoir ni détenir d'autres fonds, effets ou valeurs que ceux représentatifs de sa rémunération ou de sa commission</p>
                    </div>
                
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle mb10">Descriptif du bien</div>
                        <div class="dataBien">
                            <ul id="dataTitle" class="nav nav-tabs" role="tablist">
                                                                    <li class="active"><a href="#infos">Général</a></li>
                                                                    <li class=""><a href="#details">Détails +</a></li>
                                                                    <li class=""><a href="#copro">Copropriété</a></li>
                                                                    <li class=""><a href="#infosfi">Financier</a></li>
                                                            </ul>
                                    <div id="dataContent" class="tab-content">
            
            
                                    <div class="tab-pane fade  active in" id="infos">
                                                    <p class="data">
                                <span class="termInfos">Code postal</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            75009                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface habitable (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            178,64 m²                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface loi Carrez (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            171.03                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de chambre(s)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de pièces</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            6                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Etage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="details">
                                                    <p class="data">
                                <span class="termInfos">Nb de salle de bains</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nb de salle d'eau</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            AMERICAINE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            EQUIPEE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Mode de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            GAZ                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de chauffage </span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            AUTRE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Format de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            INDIVIDUEL                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cave</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Exposition</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            SUD-OUEST                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Année de construction</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1830                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="copro">
                                                    <p class="data">
                                <span class="termInfos">copropriété</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Lot n°</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            16                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">nombre de lots</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            22                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Quote Part annuelle des charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3 232 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">plan de sauvegarde</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">statut du syndic</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            pas de procédure en cours                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="infosfi">
                                                    <p class="data">
                                <span class="termInfos">Prix de vente</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2 390 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos"><span class=""smallinfos"">Les honoraires d'agence seront intégralement à la charge du vendeur</span></span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            &nbsp;                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            270 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Taxe foncière annuelle</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 400 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                    
            
        </div>
    
                        </div>
                    </div>
                
            </div>
            
                            
            <div class="row">
                
                                                                                
                        <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Diagnostics de performance énergétique</div>
                        <div class="energy row text-center">
                            
                                <div class="col-sm-6 dpe mb10">
                                    <img src="/admin/dpe.php?lang=fr&amp;idann=1992" alt="DPE">
                                </div>
                            

                            
                                <div class="col-sm-6 ges">
                                    <img src="/admin/dpe.php?type=GES&amp;lang=fr&amp;idann=1992" alt="DPE">
                                </div>
                            
                        </div>
                    </div>
                                    
                                    <div class="col-md-6 elementDt">
                        
                            <div class="themTitle">Cette annonce vous intéresse ?</div>
                        
                        
                            <div class="row form-group">
                                
                                    <form name="myForm" class="form-horizontal" id="myForm" method="post" action="/1992-6-pieces-178-64m2-Paris-9e.html">
                                        
                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][nom]" class="form-control clearfix w100 center" placeholder="Votre nom *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="email" name="data[Contact][email]" class="form-control clearfix w100 center" placeholder="Votre adresse mail *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][tel]" class="form-control clearfix w100 center" placeholder="Votre Téléphone *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][ville]" class="form-control clearfix w100 center" placeholder="Votre ville *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-12">
                                                        <textarea name="data[Contact][message]" placeholder="Votre message " class="form-control" ></textarea>
                                                    </div>
                                                                                                                                        <input type="hidden" name="data[idbien][]" value="1992"/>
                                        
                                        <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                        
                                        <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreement" />
    <label for="rgpd-agreement">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreement');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                                        
                                            <div class="col-xs-12">
                                                <span class="oblig">* Champs obligatoires</span>
                                                <button type="submit" class="btn btn-default">Envoyer</button>
                                            </div>
                                        
                                    </form>
                                    <div class="legals">
                                        <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                                    </div>
                                
                            </div>
                        
                    </div>
                            </div>
            
                
                    <div class="row bigData">
                        <div class="col-sm-12">
                                                                        <section class="map-infos-city elementDt">
        <div class="title themTitle elementDtTitle">
            <h1>La ville de Paris (75009)</h1>
        </div>
        <div class="content">
            
                <div class="col-sm-12 map">
                    <div id="mapInfosCity" style="width:100%;height:300px;"></div>
                    <div class="map-buttons"></div>
                </div>
            
            
                <div class="col-sm-12 stat">
                    <div id="statsInfosCity"></div>
                </div>
            
        </div>
    </section>
    
    <style type="text/css">
        #statsInfosCity {
        }
        #statsInfosCity ul{
            margin:0; padding:0; list-style: inside none;
        }
        #statsInfosCity li{
            font-size: 0.85em;
            padding:1px;
            margin-bottom: 2px;
        }
        #statsInfosCity .title{
            font-weight: bold;
            margin-bottom:5px;
        }
        #statsInfosCity li.odd{
            background:#efefef;
        }
        #statsInfosCity li span{
            display:inline-block;
        }
        #statsInfosCity li .value{
            text-align:right;
            float:right;
            padding-right: 5px;
        }
        #mapInfosCity img {
            max-width: none;
        }
        .map-buttons{
            height:30px;
        }
        .map-buttons a{
            display: block;
            float: left;
            background: #e0e0e0;
            position: relative;
            width:30px; height:30px;
            margin:0 0.5px;
            text-align: center;
            font-size:8px;
        }
    </style>
    
                                                    </div>
                    </div>
                
            
        </div>
    </div>

         
                        
            
                            
            
                            
            
        </div>
    </div>

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
         
        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
    <script type="text/javascript">
        $(document).ready(function(){
            $( ".back" ).click(function() {
                var url = "//www.aristimmo.com";
                $(location).attr('href',url);
            });
        });
    </script>

        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
        
                <script>
        
         /*********** bien config option geoloc *********** /
          *
          * @type Array|Array
          */
                                       var markers = {};
        var map;
        var isMapDragging;
        var idleSkipped;
        var visible;
        var translates = {};
        var geocoder;

        var colorMarkers;
         


        function getMap(Map){

            var map = Map.map;
            optionsCircle = {
                map: map,
                center: { lat : 48.878373889979 , lng:  2.3303590970541 },
                radius: 1500,
                strokeColor: '#B3D100',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#B3D100',
                fillOpacity: 0.35
            };

                                                //map.setCenter(new google.maps.LatLng(48.860000610, 2.344449997));
                    Map.setCenter(map, { lat: 48.878373889979, lng: 2.3303590970541 });
                                      addListeners(Map);
        }

        function addListeners(Map){
          Map.setMinZoom(Map.map, 12);
          callMarkers(Map);
          Map.addMapListener(Map.map, 'idle', function() {
            if (isMapDragging) {
              idleSkipped = true;
              return;
            }
            idleSkipped = false;
            callMarkers(Map);
          });
          Map.addMapListener(Map.map, 'dragstart', function () {
            isMapDragging = true;
          });
          Map.addMapListener(Map.map, 'dragend', function() {
            isMapDragging = false;
            if (idleSkipped === true) {
              callMarkers(Map);
              idleSkipped = false;
            }
          });
        }


        function callMarkers(Map){
            var bounds = Map.getBounds(Map.map);
            var boundsCoords = Map.getLatLngMinMax(bounds);
            var mxLt = boundsCoords.lat.max;
            var mnLt = boundsCoords.lat.min;
            var mxLg = boundsCoords.lng.max;
            var mnLg = boundsCoords.lng.min;
            $.get("/i/poi/getPoiBetween?minLat="+mnLt+"&maxLat="+mxLt+"&minLng="+mnLg+"&maxLng="+mxLg).done(function(jsonMarkers){
                if(jsonMarkers === null){
                    jsonMarkers = [];
                }
                cleanMarkers();
                addMarkers(jsonMarkers, Map);
            });
        }

        function cleanMarkers(){
            visible = [];
            for(key in markers){
                if(markers.hasOwnProperty(key)){
                    $.each(markers[key], function(k, marker){
                      var Map = marker.dataContainer.Map;
                        if(marker.dataContainer.map !== null && visible.indexOf(key)<0){
                            visible.push(key);
                        }
                        Map.removeMarker(Map.map, marker);
                        marker.dataContainer.map = null;
                    });
                    markers[key] = [];
                }
            }
        }
        
        function addMarkers(jsonMarkers, Map){
            $.each(jsonMarkers, function(){
              var markerData = this;
                if(!markers.hasOwnProperty(this.nom)){
                    markers[this.nom] = [];
                }
                var position = { lat: markerData.y, lng: markerData.x};
                var mapMarker = visible.indexOf(this.nom)>=0 ? Map.map : null;
                translates[this.nom] = this.translate;
              var markerOptions = {
                title: this.translate,
                icon: Map.createIcon('/i/poi/getIconMap?type='+this.nom, [32,54])
              };
              var marker = Map.createMapMarker(position, markerOptions, {
                map: mapMarker,
                Map: Map
              });
              if (visible.indexOf(this.nom)>=0) {
                Map.addMarker(Map.map, marker);
              }
                markers[this.nom].push(marker);
            });

                        addButtons();
        }
        

        function addButtons(){
            $(".map-buttons").empty();
            $.each(markers, function(k, mks){
                if(mks.length > 0){
                    var isVisible = (visible.indexOf(k) > -1);
                    addTypeButton(k, isVisible);
                }
            });
        }
        
            function showHideMarkers(type){
                if(markers.hasOwnProperty(type)){
                    for(var i = 0; i < markers[type].length; i++){
                       if(markers[type][i].dataContainer.map === null ){
                            markers[type][i].dataContainer.map = markers[type][i].dataContainer.Map.map;
                            markers[type][i].dataContainer.Map.addMarker(markers[type][i].dataContainer.map, markers[type][i]);
                           colorType(type, true);
                       } else {
                         markers[type][i].dataContainer.Map.removeMarker(markers[type][i].dataContainer.map, markers[type][i]);
                         markers[type][i].dataContainer.map = null;
                           colorType(type, false);
                       }
                    }
                }
            }
        
        
            function addTypeButton(type, isVisible){
                var bar = $(".map-buttons");
                var a = $("<a/>");
                var translate = translates[type];
                a.attr("class","map-button");
                a.attr("rel", type);
                a.attr("href","#");
                var img = $("<img/>");
                img.attr('src', '/i/poi/getIconBar?type='+type);
                img.attr('title', translate);
                img.attr('alt', type);
                if(isVisible){
                    img.css('background-color', '#'+colorMarkers[type]);
                }
                a.append(img);
                
    a.append('<span class="typeLink">'+translate+'</span>');

                bar.append(a);
            }
        
        
            function colorType(type, show){
                var color;
                if(show){
                    color = '#'+colorMarkers[type];
                } else {
                    color = 'transparent';
                }
                $('img[alt="'+type+'"]').css('background-color', color);
            }
        
        function app (){
            
            
                $.getScript('/i/json/getLbimapsLib', function () {
                    $.ajax('/i/json/getApiKeys?type=detail').done(function (apiKeys) {
                      var provider = 'jawg';
                    
                        var mapOptions = {
                                                zoom : 14 ,                                                 minZoom : 12 ,                                                 panControl : 1 ,                                                 scaleControl : 1 ,                                                 zoomControl : 1                                                 };
                    
                      var options = Object.assign({ }, mapOptions, {
                        mapContainer: '#mapInfosCity',
                        token: apiKeys[provider],
                        callback: window.getMap
                      });
                      lbimaps.callback(lbimaps.providers[provider])(options)
                    })
                });
            

            
                $(document).on("click",".map-button", function(){
                    var type = $(this).attr("rel");
                    showHideMarkers(type);
                    return false;
                });
                
                    $.get('/i/poi/getIconColors').done(function(result) {
                        colorMarkers = result;
                    });
                    $.get("/i/poi/getStats?idlocalite=10693",{},'json').done(function(stats){
                        
    var i = 0;
    var ul = $("<ul class='leftStat'/>");
    var ul2 = $("<ul class='rightStat'/>");
    $('#statsInfosCity').append('<div class="themTitle">Statistiques</div>');            
    $.each(stats, function(k, stat){
        var li = $("<li/>");
        if(i%2 === 0){
            li.addClass('even');
        } else {
            li.addClass('odd');
        }
        var unite = "%";
        if ((stat.translate).includes("Nombre")||stat.provider == 'api'){
           unite = "";
        }
        li.html('<span class="name">'+stat.translate+'</span><span class="value">'+stat.stat+' '+unite+'</span>');
        if (i < 7){
            ul.append(li);
        }
        else if (i > 6 && i < 14){
            $("#statsInfosCity").append(ul);
            ul2.append(li);
        }
        i++;
    });            
    $("#statsInfosCity").append(ul2);

                    });
                
            
        }
        
            app();
        

        
    </script>
    
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
    
            
<script>
jQuery(document).ready(function(){
            jQuery(document).on('submit', 'form', function(){                
                var myform = jQuery(this);
                var as = jQuery('.asbryw', myform);                
                if(as.length){                    
                    var dynamic = jQuery('.2', as);
                    var currentvalue = dynamic.val();
                    var origvalue = dynamic.attr('data-orig');
                    if(currentvalue === origvalue) {
                        var waitedvalue = dynamic.attr('data-wait');
                        dynamic.val(waitedvalue);
                    }
                }
                return true;
            });
        });
</script>


         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:27 GMT
- request:
    method: get
    uri: https://www.aristimmo.com/1722-Maison-187m2-Paris-13e.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:27 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=6qok877upfcgkdvc66t1kv0s4a; path=/
      - SRV=c23; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '16487'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>vente Maison - 187m2 - Paris 13e</title>
        <meta name="description" content="vente maison 5 pièces Paris : Maison - 187m2 - Paris 13e">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/1722-Maison-187m2-Paris-13e.html" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
    
        <meta property="og:title" content="Maison - 187m2 - Paris 13e" />
        <meta property="og:type" content="Website" />
        <meta property="og:url" content="https://www.aristimmo.com/1722-Maison-187m2-Paris-13e.html" />
        <meta property="og:image" content="https://www.aristimmo.com/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" />
    

        
                
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_ae4c1e4013717f3258e6bc12c3208432.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageDetail" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/1722-Maison-187m2-Paris-13e.html">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/1722-Maison-187m2-Paris-13e.html">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class=" ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="23" >
            Commerce
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    
    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
    
            
                        <div id="Calculette" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                  <div class="row modal-content">
                    <form class="form-horizontal" role="form" action="" onsubmit="return calculateCredit(this);">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title themTitle">Calculette</h4>
                        </div>
                        <div class="modal-body">
                            
                                <div class="form-group">
                                    <label for="montant" class="col-md-4 control-label">Montant *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="montant" id="montant" value="1850000">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="taux" class="col-md-4 control-label">Taux (%) * </label>
                                    <div class="col-md-8">
                                        <input type="number" step="0.01" min="0" class="form-control" name="taux" id="taux" required="">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="apport" class="col-md-4 control-label">Apport </label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control numericInput" name="apport" id="apport">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label">Durée (Années) * </label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="duree" id="duree" required="">
                                    </div>
                                </div>
                            
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label text-left">Mensualités </label>
                                    <div class="col-md-8 text-left">
                                      <span class="result"> </span>
                                    </div>
                                </div>
                            
                        </div>
                        <div class="modal-footer">
                            <label class="small obligChamp pull-left">*Champs obligatoires</label>
                            <button type="submit" class="btn btn-default right">Calculer</button>
                        </div>
                    </form>
                  </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
                     
    
    
            
            <div id="sendFriend" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1722-Maison-187m2-Paris-13e.html">
                            <input type="hidden" name="action" value="sendFriend">
                            <input type="hidden" name="data[Contact][url]" value="https://www.aristimmo.com/1722-Maison-187m2-Paris-13e.html">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Partager</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="data[Contact][nom]" class="col-md-4 control-label">Votre nom *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="data[Contact][nom]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][from]" class="col-md-4 control-label">Votre adresse mail *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][from]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][to]" class="col-md-4 control-label">Mail de votre ami *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][to]" required="">
                                    </div>
                                </div>
                                <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                
                                <div class="form-group">
                                    <label for="data[Contact][message]" class="col-md-4 control-label">Votre message</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" id="message" name="data[Contact][message]">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
    
    
        
        
                                                                    <div id="Contact" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1722-Maison-187m2-Paris-13e.html">
                            <input type="hidden" value="www.aristimmo.com/1722-Maison-187m2-Paris-13e.html" name="data[Contact][originemail]">
                            <input type="hidden" value="contact@aristimmo.com"  name="data[Contact][to]">
                            
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Contacter</h4>
                            </div>
                            <div class="modal-body">
                                
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre nom  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][nom]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre adresse mail  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="email"   placeholder=""  name="data[Contact][email]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre Téléphone  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][tel]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre ville  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][ville]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre message </label>
                                            <div class="col-xs-12 col-sm-8">
                                                <textarea name="data[Contact][message]" class="form-control" placeholder="" ></textarea>
                                            </div>
                                        </div>
                                                                        <div class="form-group">
                                        <div class="col-xs-12 col-sm-8 col-sm-push-4 control-label">
                                            Référence: 531
                                        </div>
                                    </div>
                                
                                <input type="hidden" name="data[idbien][]" value="1722" />
                            </div>
                            <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                             
                            <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreementmodal" />
    <label for="rgpd-agreementmodal">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreementmodal');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                        <div class="legals">
                            <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
      
    
    
        <div id="Visite" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="row modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title themTitle">Visite Virtuelle</h4>
                    </div>
                    <div class="modal-body text-center">
                                                    <iframe src="" width="800" height="500" frameborder="0" allowfullscreen></iframe>
                                            </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
    
    
    <div itemscope itemtype="https://schema.org/Product" class="containerDetail">
        
            <div class="themTitle">
                <h1 itemprop="name">Maison - 187m2 - Paris 13e</h1>
                <script type='application/ld+json'>
                {
                    "@context":"https://schema.org",
                    "@type":"BreadcrumbList",
                    "itemListElement":
                    [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                    "item": {
                                        "@id":"/",
                                        "name":"Accueil"
                                    }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                  "item": {
                                        "@id":"/1722-Maison-187m2-Paris-13e.html",
                                        "name":"Maison - 187m2 - Paris 13e"
                                    }
                                }
                                                                                                    ]
                }
                </script>
                <ol class="breadcrumb">
                                            <li><a href="/" >Accueil</a></li>
                                            <li><a href="/i/annonces/listing?ville=39923" >Paris</a></li>
                                            <li>Maison - 187m2 - Paris 13e</li>
                </ol>
            </div>
        
        <div class="containerDt">
            
                <div class="row">
                    <div class="col-md-12 backlist">
                        <div class="btn btn-default back pull-left"> < Retour</div>
                        
                                
                    
    
                    </div>
                </div>
            
            
            
    <div class="dt1 sliderV2">
        <div class="topContent">
            
                <div class="posTitle">
                    <div class="bienTitle">
                       
                            <h2>
                                Maison
                                 186.64 m&sup2; - 
                                 5 pièces - 
                                Paris (75013)
                            </h2>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mainImg">
                            
                                <ul class="list-inline">
                                    
                                        <li>
                                                                                            Prix
                                                                                    </li><li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="1850000">1 850 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                    </li>
                                        <li class="ref" itemprop="productID">
                                            Ref 531
                                        </li>
                                </ul>
                            
                            
                                                                                                                                                            
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                            
                        </div>
                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12 diapoDetail">
                            
        <div class="loader">
            <img src="images/loading.gif" alt="gallery loader"/>
        </div>
        <ul class="imageGallery  loading">
                                                            <li data-iterator="0"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_2df87513372a1fe76c4d200ada8ef672.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_2df87513372a1fe76c4d200ada8ef672.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_2df87513372a1fe76c4d200ada8ef672.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_2df87513372a1fe76c4d200ada8ef672.jpg" alt="" />
                    </li>
                                    <li data-iterator="1"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_c4377952e7bd0822fc16869a48497f60.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_c4377952e7bd0822fc16869a48497f60.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_c4377952e7bd0822fc16869a48497f60.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_c4377952e7bd0822fc16869a48497f60.jpg" alt="" />
                    </li>
                                    <li data-iterator="2"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_d13190be344d30b04d17fa6452389fbb.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_d13190be344d30b04d17fa6452389fbb.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_d13190be344d30b04d17fa6452389fbb.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_d13190be344d30b04d17fa6452389fbb.jpg" alt="" />
                    </li>
                                    <li data-iterator="3"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_30f1ae8ab66cdac2e9651844b2be08d9.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_30f1ae8ab66cdac2e9651844b2be08d9.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_30f1ae8ab66cdac2e9651844b2be08d9.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_30f1ae8ab66cdac2e9651844b2be08d9.jpg" alt="" />
                    </li>
                                    <li data-iterator="4"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_e02332a2acaf276d68da8b9d9e29cd49.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_e02332a2acaf276d68da8b9d9e29cd49.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_e02332a2acaf276d68da8b9d9e29cd49.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_e02332a2acaf276d68da8b9d9e29cd49.jpg" alt="" />
                    </li>
                                    <li data-iterator="5"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_02b2d26685c993ffd6a0f9d1ff520240.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_02b2d26685c993ffd6a0f9d1ff520240.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_02b2d26685c993ffd6a0f9d1ff520240.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_02b2d26685c993ffd6a0f9d1ff520240.jpg" alt="" />
                    </li>
                                    <li data-iterator="6"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_355f9e55d2327c7a05b3838e22ffb543.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_355f9e55d2327c7a05b3838e22ffb543.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_355f9e55d2327c7a05b3838e22ffb543.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_355f9e55d2327c7a05b3838e22ffb543.jpg" alt="" />
                    </li>
                                    <li data-iterator="7"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_346a0398cad1846081649763f7b8beeb.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_346a0398cad1846081649763f7b8beeb.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_346a0398cad1846081649763f7b8beeb.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_346a0398cad1846081649763f7b8beeb.jpg" alt="" />
                    </li>
                                    <li data-iterator="8"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_9cdac8b8a46cd0f04d29f0ecee6952a2.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_9cdac8b8a46cd0f04d29f0ecee6952a2.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_9cdac8b8a46cd0f04d29f0ecee6952a2.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_9cdac8b8a46cd0f04d29f0ecee6952a2.jpg" alt="" />
                    </li>
                                    <li data-iterator="9"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_cdcf44b0c131ffc7d4fd944d7af15cb5.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_cdcf44b0c131ffc7d4fd944d7af15cb5.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_cdcf44b0c131ffc7d4fd944d7af15cb5.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_cdcf44b0c131ffc7d4fd944d7af15cb5.jpg" alt="" />
                    </li>
                                    <li data-iterator="10"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_af6c0ba67384bd14cc5dbabcacc9e99f.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_af6c0ba67384bd14cc5dbabcacc9e99f.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_af6c0ba67384bd14cc5dbabcacc9e99f.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_af6c0ba67384bd14cc5dbabcacc9e99f.jpg" alt="" />
                    </li>
                                    <li data-iterator="11"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_aff12717d9c1631d645a2b7d0f031eea.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_aff12717d9c1631d645a2b7d0f031eea.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_aff12717d9c1631d645a2b7d0f031eea.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/photo_aff12717d9c1631d645a2b7d0f031eea.jpg" alt="" />
                    </li>
                                    </ul>
    

                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12">
                        <div class="actionDt">
                            


                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#Contact">
                                    <span class="pull-left txtBtn">Contacter</span> 
                                    <span class="icon-contactmail icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#sendFriend">
                                    <span class="pull-left txtBtn">Envoyer l'offre</span> 
                                    <span class="icon-partager icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" onclick="window.open('/admin/pdf.php?lang=fr&idann=1722&fiche_type=visite&pdf_orientation=P&pdf_template=1'); return false;">
                                    <span class="pull-left txtBtn">Imprimer</span> 
                                    <span class="icon-imprimer icons pull-right"></span>
                                </button>
                            
                            
                                                                    <button class="btn btn-dt" data-toggle="modal" data-target="#Calculette">
                                        <span class="pull-left txtBtn">Calculatrice</span> 
                                        <span class="icon-calculette icons pull-right"></span>
                                    </button>
                                                            
                        </div>
                    </div>
                </div>
            
        </div>
        <div class="mainContent">
            
                <div class="row">
                    <div class="col-md-12 elementDt">
                        <div class="themTitle pull-left mr30">Partager cette offre</div>
                        <div class="partage pull-left ml5" data-url="https://www.aristimmo.com/1722-Maison-187m2-Paris-13e.html">
                            <div id="facebook" class="rsvDt" data-url="https://www.aristimmo.com/1722-Maison-187m2-Paris-13e.html?lang=fr" data-title=" "></div>
                            <div id="twitter" class="rsvDt">
                                <div class="box">
                                    <span class="share icons-dt">
                                        <a href="https://twitter.com/intent/tweet?original_referer=https://www.aristimmo.com/1722-Maison-187m2-Paris-13e.html&ref_src=twsrc^tfw&text=vente Maison - 187m2 - Paris 13e&tw_p=tweetbutton&url=https://www.aristimmo.com/1722-Maison-187m2-Paris-13e.html"></a>
                                    </span>
                                    <span class="count">+1</span>
                                </div>
                            </div>
                            <div id="googleplus" class="rsvDt" class="mr0" data-url="https://www.aristimmo.com/1722-Maison-187m2-Paris-13e.html" data-title=" "></div>
                        </div>
                    </div>
                </div>
            
            <div class="row">
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Description de l'offre</div>
                        <p itemprop="description">BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison contemportaine revisitée par architecte. Elevée sur trois niveaux, elle se compose au rez-de-chaussée, d'une entrée avec WC, d'une grande réception comprenant cuisine, espace dînatoire, double séjour ouvert sur un jardin de 90m2 exposé sud-ouest et d'une mezzanine avec salle de bains. Le premier étage est composé de deux chambres d'enfant, d'un dressing, d'une salle de bains et d'un WC, et le dernier niveau dessert une vaste suite avec balcon. Vous serez séduits par les prestations de qualité : hauteur sous plafond de 6m dans le salon d'été, velux et volets automatiques, cave à vin en sous-sol, et calme absolu. Deux parkings en sus complètent ce bien d'exception.
Obligations loi ALUR: honoraires : 54 000 € à la charge de l'acquéreur inclus de le prix de présentation. Bien non soumis à la copropriété. L'agence immobilière Aristimmo ne doit recevoir ni détenir d'autres fonds, effets ou valeurs que ceux représentatifs de sa rémunération ou de sa commission</p>
                    </div>
                
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle mb10">Descriptif du bien</div>
                        <div class="dataBien">
                            <ul id="dataTitle" class="nav nav-tabs" role="tablist">
                                                                    <li class="active"><a href="#infos">Général</a></li>
                                                                    <li class=""><a href="#details">Détails +</a></li>
                                                                    <li class=""><a href="#copro">Copropriété</a></li>
                                                                    <li class=""><a href="#infosfi">Financier</a></li>
                                                            </ul>
                                    <div id="dataContent" class="tab-content">
            
            
                                    <div class="tab-pane fade  active in" id="infos">
                                                    <p class="data">
                                <span class="termInfos">Code postal</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            75013                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface habitable (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            186,64 m²                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface loi Carrez (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            169.22                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de chambre(s)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            4                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de pièces</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            5                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de niveaux</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Vue</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            jardin                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="details">
                                                    <p class="data">
                                <span class="termInfos">Nb de salle de bains</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nb de salle d'eau</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            AMERICAINE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            EQUIPEE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Mode de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            GAZ                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de chauffage </span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            AUTRE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Format de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            INDIVIDUEL                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Terrasse</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos"> Murs mitoyens</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de garage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Exposition</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            EST-OUEST                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Année de construction</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1995                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="copro">
                                                    <p class="data">
                                <span class="termInfos">copropriété</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="infosfi">
                                                    <p class="data">
                                <span class="termInfos">Prix de vente honoraires TTC inclus</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 850 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos"><span class="smallinfos">Prix de vente honoraires TTC exclus</span></span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 796 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Honoraires TTC à la charge acquéreur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3,01 %                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Taxe foncière annuelle</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 800 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                    
            
        </div>
    
                        </div>
                    </div>
                
            </div>
            
                            
            <div class="row">
                
                                                                                
                        <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Diagnostics de performance énergétique</div>
                        <div class="energy row text-center">
                            
                                <div class="col-sm-6 dpe mb10">
                                    <img src="/admin/dpe.php?lang=fr&amp;idann=1722" alt="DPE">
                                </div>
                            

                            
                                <div class="col-sm-6 ges">
                                    <img src="/admin/dpe.php?type=GES&amp;lang=fr&amp;idann=1722" alt="DPE">
                                </div>
                            
                        </div>
                    </div>
                                    
                                    <div class="col-md-6 elementDt">
                        
                            <div class="themTitle">Cette annonce vous intéresse ?</div>
                        
                        
                            <div class="row form-group">
                                
                                    <form name="myForm" class="form-horizontal" id="myForm" method="post" action="/1722-Maison-187m2-Paris-13e.html">
                                        
                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][nom]" class="form-control clearfix w100 center" placeholder="Votre nom *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="email" name="data[Contact][email]" class="form-control clearfix w100 center" placeholder="Votre adresse mail *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][tel]" class="form-control clearfix w100 center" placeholder="Votre Téléphone *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][ville]" class="form-control clearfix w100 center" placeholder="Votre ville *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-12">
                                                        <textarea name="data[Contact][message]" placeholder="Votre message " class="form-control" ></textarea>
                                                    </div>
                                                                                                                                        <input type="hidden" name="data[idbien][]" value="1722"/>
                                        
                                        <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                        
                                        <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreement" />
    <label for="rgpd-agreement">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreement');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                                        
                                            <div class="col-xs-12">
                                                <span class="oblig">* Champs obligatoires</span>
                                                <button type="submit" class="btn btn-default">Envoyer</button>
                                            </div>
                                        
                                    </form>
                                    <div class="legals">
                                        <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                                    </div>
                                
                            </div>
                        
                    </div>
                            </div>
            
                
                    <div class="row bigData">
                        <div class="col-sm-12">
                                                                        <section class="map-infos-city elementDt">
        <div class="title themTitle elementDtTitle">
            <h1>La ville de Paris (75013)</h1>
        </div>
        <div class="content">
            
                <div class="col-sm-12 map">
                    <div id="mapInfosCity" style="width:100%;height:300px;"></div>
                    <div class="map-buttons"></div>
                </div>
            
            
                <div class="col-sm-12 stat">
                    <div id="statsInfosCity"></div>
                </div>
            
        </div>
    </section>
    
    <style type="text/css">
        #statsInfosCity {
        }
        #statsInfosCity ul{
            margin:0; padding:0; list-style: inside none;
        }
        #statsInfosCity li{
            font-size: 0.85em;
            padding:1px;
            margin-bottom: 2px;
        }
        #statsInfosCity .title{
            font-weight: bold;
            margin-bottom:5px;
        }
        #statsInfosCity li.odd{
            background:#efefef;
        }
        #statsInfosCity li span{
            display:inline-block;
        }
        #statsInfosCity li .value{
            text-align:right;
            float:right;
            padding-right: 5px;
        }
        #mapInfosCity img {
            max-width: none;
        }
        .map-buttons{
            height:30px;
        }
        .map-buttons a{
            display: block;
            float: left;
            background: #e0e0e0;
            position: relative;
            width:30px; height:30px;
            margin:0 0.5px;
            text-align: center;
            font-size:8px;
        }
    </style>
    
                                                    </div>
                    </div>
                
            
        </div>
    </div>

         
                        
            
                            
            
                                                     <p class="small asterix mt10">* Honoraires d'Agences Inclus</p>
                        
            
        </div>
    </div>

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
         
        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
    <script type="text/javascript">
        $(document).ready(function(){
            $( ".back" ).click(function() {
                var url = "//www.aristimmo.com";
                $(location).attr('href',url);
            });
        });
    </script>

        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
        
                <script>
        
         /*********** bien config option geoloc *********** /
          *
          * @type Array|Array
          */
                                       var markers = {};
        var map;
        var isMapDragging;
        var idleSkipped;
        var visible;
        var translates = {};
        var geocoder;

        var colorMarkers;
         


        function getMap(Map){

            var map = Map.map;
            optionsCircle = {
                map: map,
                center: { lat : 48.83109087629 , lng:  2.3785202492414 },
                radius: 1500,
                strokeColor: '#B3D100',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#B3D100',
                fillOpacity: 0.35
            };

                                                //map.setCenter(new google.maps.LatLng(48.860000610, 2.344449997));
                    Map.setCenter(map, { lat: 48.83109087629, lng: 2.3785202492414 });
                                      addListeners(Map);
        }

        function addListeners(Map){
          Map.setMinZoom(Map.map, 12);
          callMarkers(Map);
          Map.addMapListener(Map.map, 'idle', function() {
            if (isMapDragging) {
              idleSkipped = true;
              return;
            }
            idleSkipped = false;
            callMarkers(Map);
          });
          Map.addMapListener(Map.map, 'dragstart', function () {
            isMapDragging = true;
          });
          Map.addMapListener(Map.map, 'dragend', function() {
            isMapDragging = false;
            if (idleSkipped === true) {
              callMarkers(Map);
              idleSkipped = false;
            }
          });
        }


        function callMarkers(Map){
            var bounds = Map.getBounds(Map.map);
            var boundsCoords = Map.getLatLngMinMax(bounds);
            var mxLt = boundsCoords.lat.max;
            var mnLt = boundsCoords.lat.min;
            var mxLg = boundsCoords.lng.max;
            var mnLg = boundsCoords.lng.min;
            $.get("/i/poi/getPoiBetween?minLat="+mnLt+"&maxLat="+mxLt+"&minLng="+mnLg+"&maxLng="+mxLg).done(function(jsonMarkers){
                if(jsonMarkers === null){
                    jsonMarkers = [];
                }
                cleanMarkers();
                addMarkers(jsonMarkers, Map);
            });
        }

        function cleanMarkers(){
            visible = [];
            for(key in markers){
                if(markers.hasOwnProperty(key)){
                    $.each(markers[key], function(k, marker){
                      var Map = marker.dataContainer.Map;
                        if(marker.dataContainer.map !== null && visible.indexOf(key)<0){
                            visible.push(key);
                        }
                        Map.removeMarker(Map.map, marker);
                        marker.dataContainer.map = null;
                    });
                    markers[key] = [];
                }
            }
        }
        
        function addMarkers(jsonMarkers, Map){
            $.each(jsonMarkers, function(){
              var markerData = this;
                if(!markers.hasOwnProperty(this.nom)){
                    markers[this.nom] = [];
                }
                var position = { lat: markerData.y, lng: markerData.x};
                var mapMarker = visible.indexOf(this.nom)>=0 ? Map.map : null;
                translates[this.nom] = this.translate;
              var markerOptions = {
                title: this.translate,
                icon: Map.createIcon('/i/poi/getIconMap?type='+this.nom, [32,54])
              };
              var marker = Map.createMapMarker(position, markerOptions, {
                map: mapMarker,
                Map: Map
              });
              if (visible.indexOf(this.nom)>=0) {
                Map.addMarker(Map.map, marker);
              }
                markers[this.nom].push(marker);
            });

                        addButtons();
        }
        

        function addButtons(){
            $(".map-buttons").empty();
            $.each(markers, function(k, mks){
                if(mks.length > 0){
                    var isVisible = (visible.indexOf(k) > -1);
                    addTypeButton(k, isVisible);
                }
            });
        }
        
            function showHideMarkers(type){
                if(markers.hasOwnProperty(type)){
                    for(var i = 0; i < markers[type].length; i++){
                       if(markers[type][i].dataContainer.map === null ){
                            markers[type][i].dataContainer.map = markers[type][i].dataContainer.Map.map;
                            markers[type][i].dataContainer.Map.addMarker(markers[type][i].dataContainer.map, markers[type][i]);
                           colorType(type, true);
                       } else {
                         markers[type][i].dataContainer.Map.removeMarker(markers[type][i].dataContainer.map, markers[type][i]);
                         markers[type][i].dataContainer.map = null;
                           colorType(type, false);
                       }
                    }
                }
            }
        
        
            function addTypeButton(type, isVisible){
                var bar = $(".map-buttons");
                var a = $("<a/>");
                var translate = translates[type];
                a.attr("class","map-button");
                a.attr("rel", type);
                a.attr("href","#");
                var img = $("<img/>");
                img.attr('src', '/i/poi/getIconBar?type='+type);
                img.attr('title', translate);
                img.attr('alt', type);
                if(isVisible){
                    img.css('background-color', '#'+colorMarkers[type]);
                }
                a.append(img);
                
    a.append('<span class="typeLink">'+translate+'</span>');

                bar.append(a);
            }
        
        
            function colorType(type, show){
                var color;
                if(show){
                    color = '#'+colorMarkers[type];
                } else {
                    color = 'transparent';
                }
                $('img[alt="'+type+'"]').css('background-color', color);
            }
        
        function app (){
            
            
                $.getScript('/i/json/getLbimapsLib', function () {
                    $.ajax('/i/json/getApiKeys?type=detail').done(function (apiKeys) {
                      var provider = 'jawg';
                    
                        var mapOptions = {
                                                zoom : 14 ,                                                 minZoom : 12 ,                                                 panControl : 1 ,                                                 scaleControl : 1 ,                                                 zoomControl : 1                                                 };
                    
                      var options = Object.assign({ }, mapOptions, {
                        mapContainer: '#mapInfosCity',
                        token: apiKeys[provider],
                        callback: window.getMap
                      });
                      lbimaps.callback(lbimaps.providers[provider])(options)
                    })
                });
            

            
                $(document).on("click",".map-button", function(){
                    var type = $(this).attr("rel");
                    showHideMarkers(type);
                    return false;
                });
                
                    $.get('/i/poi/getIconColors').done(function(result) {
                        colorMarkers = result;
                    });
                    $.get("/i/poi/getStats?idlocalite=9104",{},'json').done(function(stats){
                        
    var i = 0;
    var ul = $("<ul class='leftStat'/>");
    var ul2 = $("<ul class='rightStat'/>");
    $('#statsInfosCity').append('<div class="themTitle">Statistiques</div>');            
    $.each(stats, function(k, stat){
        var li = $("<li/>");
        if(i%2 === 0){
            li.addClass('even');
        } else {
            li.addClass('odd');
        }
        var unite = "%";
        if ((stat.translate).includes("Nombre")||stat.provider == 'api'){
           unite = "";
        }
        li.html('<span class="name">'+stat.translate+'</span><span class="value">'+stat.stat+' '+unite+'</span>');
        if (i < 7){
            ul.append(li);
        }
        else if (i > 6 && i < 14){
            $("#statsInfosCity").append(ul);
            ul2.append(li);
        }
        i++;
    });            
    $("#statsInfosCity").append(ul2);

                    });
                
            
        }
        
            app();
        

        
    </script>
    
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
    
            
<script>
jQuery(document).ready(function(){
            jQuery(document).on('submit', 'form', function(){                
                var myform = jQuery(this);
                var as = jQuery('.asbryw', myform);                
                if(as.length){                    
                    var dynamic = jQuery('.2', as);
                    var currentvalue = dynamic.val();
                    var origvalue = dynamic.attr('data-orig');
                    if(currentvalue === origvalue) {
                        var waitedvalue = dynamic.attr('data-wait');
                        dynamic.val(waitedvalue);
                    }
                }
                return true;
            });
        });
</script>


         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:27 GMT
- request:
    method: get
    uri: https://www.aristimmo.com/1676-Maison-183m2-Paris-19e.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:28 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=ing83tflkek68avoqmhj8rthiq; path=/
      - SRV=c24; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '16469'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>vente Maison - 183m2 - Paris 19e</title>
        <meta name="description" content="vente maison 7 pièces Paris : Maison - 183m2 - Paris 19e">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/1676-Maison-183m2-Paris-19e.html" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
    
        <meta property="og:title" content="Maison - 183m2 - Paris 19e" />
        <meta property="og:type" content="Website" />
        <meta property="og:url" content="https://www.aristimmo.com/1676-Maison-183m2-Paris-19e.html" />
        <meta property="og:image" content="https://www.aristimmo.com/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" />
    

        
                
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_ae4c1e4013717f3258e6bc12c3208432.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageDetail" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/1676-Maison-183m2-Paris-19e.html">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/1676-Maison-183m2-Paris-19e.html">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class=" ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="23" >
            Commerce
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    
    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
    
            
                        <div id="Calculette" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                  <div class="row modal-content">
                    <form class="form-horizontal" role="form" action="" onsubmit="return calculateCredit(this);">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title themTitle">Calculette</h4>
                        </div>
                        <div class="modal-body">
                            
                                <div class="form-group">
                                    <label for="montant" class="col-md-4 control-label">Montant *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="montant" id="montant" value="1490000">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="taux" class="col-md-4 control-label">Taux (%) * </label>
                                    <div class="col-md-8">
                                        <input type="number" step="0.01" min="0" class="form-control" name="taux" id="taux" required="">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="apport" class="col-md-4 control-label">Apport </label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control numericInput" name="apport" id="apport">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label">Durée (Années) * </label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="duree" id="duree" required="">
                                    </div>
                                </div>
                            
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label text-left">Mensualités </label>
                                    <div class="col-md-8 text-left">
                                      <span class="result"> </span>
                                    </div>
                                </div>
                            
                        </div>
                        <div class="modal-footer">
                            <label class="small obligChamp pull-left">*Champs obligatoires</label>
                            <button type="submit" class="btn btn-default right">Calculer</button>
                        </div>
                    </form>
                  </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
                     
    
    
            
            <div id="sendFriend" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1676-Maison-183m2-Paris-19e.html">
                            <input type="hidden" name="action" value="sendFriend">
                            <input type="hidden" name="data[Contact][url]" value="https://www.aristimmo.com/1676-Maison-183m2-Paris-19e.html">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Partager</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="data[Contact][nom]" class="col-md-4 control-label">Votre nom *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="data[Contact][nom]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][from]" class="col-md-4 control-label">Votre adresse mail *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][from]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][to]" class="col-md-4 control-label">Mail de votre ami *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][to]" required="">
                                    </div>
                                </div>
                                <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                
                                <div class="form-group">
                                    <label for="data[Contact][message]" class="col-md-4 control-label">Votre message</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" id="message" name="data[Contact][message]">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
    
    
        
        
                                                                    <div id="Contact" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1676-Maison-183m2-Paris-19e.html">
                            <input type="hidden" value="www.aristimmo.com/1676-Maison-183m2-Paris-19e.html" name="data[Contact][originemail]">
                            <input type="hidden" value="contact@aristimmo.com"  name="data[Contact][to]">
                            
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Contacter</h4>
                            </div>
                            <div class="modal-body">
                                
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre nom  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][nom]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre adresse mail  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="email"   placeholder=""  name="data[Contact][email]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre Téléphone  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][tel]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre ville  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][ville]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre message </label>
                                            <div class="col-xs-12 col-sm-8">
                                                <textarea name="data[Contact][message]" class="form-control" placeholder="" ></textarea>
                                            </div>
                                        </div>
                                                                        <div class="form-group">
                                        <div class="col-xs-12 col-sm-8 col-sm-push-4 control-label">
                                            Référence: 479
                                        </div>
                                    </div>
                                
                                <input type="hidden" name="data[idbien][]" value="1676" />
                            </div>
                            <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                             
                            <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreementmodal" />
    <label for="rgpd-agreementmodal">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreementmodal');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                        <div class="legals">
                            <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
      
    
    
        <div id="Visite" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="row modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title themTitle">Visite Virtuelle</h4>
                    </div>
                    <div class="modal-body text-center">
                                                    <iframe src="" width="800" height="500" frameborder="0" allowfullscreen></iframe>
                                            </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
    
    
    <div itemscope itemtype="https://schema.org/Product" class="containerDetail">
        
            <div class="themTitle">
                <h1 itemprop="name">Maison - 183m2 - Paris 19e</h1>
                <script type='application/ld+json'>
                {
                    "@context":"https://schema.org",
                    "@type":"BreadcrumbList",
                    "itemListElement":
                    [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                    "item": {
                                        "@id":"/",
                                        "name":"Accueil"
                                    }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                  "item": {
                                        "@id":"/1676-Maison-183m2-Paris-19e.html",
                                        "name":"Maison - 183m2 - Paris 19e"
                                    }
                                }
                                                                                                    ]
                }
                </script>
                <ol class="breadcrumb">
                                            <li><a href="/" >Accueil</a></li>
                                            <li><a href="/i/annonces/listing?ville=39906" >Paris</a></li>
                                            <li>Maison - 183m2 - Paris 19e</li>
                </ol>
            </div>
        
        <div class="containerDt">
            
                <div class="row">
                    <div class="col-md-12 backlist">
                        <div class="btn btn-default back pull-left"> < Retour</div>
                        
                                
                    
    
                    </div>
                </div>
            
            
            
    <div class="dt1 sliderV2">
        <div class="topContent">
            
                <div class="posTitle">
                    <div class="bienTitle">
                       
                            <h2>
                                Maison
                                 184.26 m&sup2; - 
                                 7 pièces - 
                                Paris (75019)
                            </h2>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mainImg">
                            
                                <ul class="list-inline">
                                    
                                        <li>
                                                                                            Prix
                                                                                    </li><li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="1490000">1 490 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                    </li>
                                        <li class="ref" itemprop="productID">
                                            Ref 479
                                        </li>
                                </ul>
                            
                            
                                                                                                                                                            
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                            
                        </div>
                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12 diapoDetail">
                            
        <div class="loader">
            <img src="images/loading.gif" alt="gallery loader"/>
        </div>
        <ul class="imageGallery  loading">
                                                            <li data-iterator="0"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/d56dbaeff28a293b719d9ce4d24dbf13.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/d56dbaeff28a293b719d9ce4d24dbf13.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/d56dbaeff28a293b719d9ce4d24dbf13.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/d56dbaeff28a293b719d9ce4d24dbf13.jpg" alt="" />
                    </li>
                                    <li data-iterator="1"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/e8675f23b2c9bbf4fcff2772b37d5a59.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/e8675f23b2c9bbf4fcff2772b37d5a59.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/e8675f23b2c9bbf4fcff2772b37d5a59.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/e8675f23b2c9bbf4fcff2772b37d5a59.jpg" alt="" />
                    </li>
                                    <li data-iterator="2"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/8ba25995a4230decbce82b06eac0f72b.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/8ba25995a4230decbce82b06eac0f72b.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/8ba25995a4230decbce82b06eac0f72b.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/8ba25995a4230decbce82b06eac0f72b.jpg" alt="" />
                    </li>
                                    <li data-iterator="3"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/60b46523cc0de4d026113cfe8cdef403.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/60b46523cc0de4d026113cfe8cdef403.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/60b46523cc0de4d026113cfe8cdef403.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/60b46523cc0de4d026113cfe8cdef403.jpg" alt="" />
                    </li>
                                    <li data-iterator="4"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/04033cea53f74cbea8055b7cb75fc015.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/04033cea53f74cbea8055b7cb75fc015.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/04033cea53f74cbea8055b7cb75fc015.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/04033cea53f74cbea8055b7cb75fc015.jpg" alt="" />
                    </li>
                                    <li data-iterator="5"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/322e0b6f3aee530f36030bbd13a05d4c.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/322e0b6f3aee530f36030bbd13a05d4c.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/322e0b6f3aee530f36030bbd13a05d4c.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/322e0b6f3aee530f36030bbd13a05d4c.jpg" alt="" />
                    </li>
                                    <li data-iterator="6"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/280181de0798857d19cc21673b432399.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/280181de0798857d19cc21673b432399.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/280181de0798857d19cc21673b432399.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/280181de0798857d19cc21673b432399.jpg" alt="" />
                    </li>
                                    <li data-iterator="7"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/e29d021de8207b164fcaca998245f515.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/e29d021de8207b164fcaca998245f515.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/e29d021de8207b164fcaca998245f515.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/e29d021de8207b164fcaca998245f515.jpg" alt="" />
                    </li>
                                    <li data-iterator="8"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/f347d3997d98b4b56656a21693af3cb7.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/f347d3997d98b4b56656a21693af3cb7.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/f347d3997d98b4b56656a21693af3cb7.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/f347d3997d98b4b56656a21693af3cb7.jpg" alt="" />
                    </li>
                                    <li data-iterator="9"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/786be83ba6648179bc0ad257d9ef013a/6ccb8c61bac442cbaa9328619d5ff09b.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/6ccb8c61bac442cbaa9328619d5ff09b.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/6ccb8c61bac442cbaa9328619d5ff09b.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/786be83ba6648179bc0ad257d9ef013a/6ccb8c61bac442cbaa9328619d5ff09b.jpg" alt="" />
                    </li>
                                    </ul>
    

                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12">
                        <div class="actionDt">
                            


                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#Contact">
                                    <span class="pull-left txtBtn">Contacter</span> 
                                    <span class="icon-contactmail icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#sendFriend">
                                    <span class="pull-left txtBtn">Envoyer l'offre</span> 
                                    <span class="icon-partager icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" onclick="window.open('/admin/pdf.php?lang=fr&idann=1676&fiche_type=visite&pdf_orientation=P&pdf_template=1'); return false;">
                                    <span class="pull-left txtBtn">Imprimer</span> 
                                    <span class="icon-imprimer icons pull-right"></span>
                                </button>
                            
                            
                                                                    <button class="btn btn-dt" data-toggle="modal" data-target="#Calculette">
                                        <span class="pull-left txtBtn">Calculatrice</span> 
                                        <span class="icon-calculette icons pull-right"></span>
                                    </button>
                                                            
                        </div>
                    </div>
                </div>
            
        </div>
        <div class="mainContent">
            
                <div class="row">
                    <div class="col-md-12 elementDt">
                        <div class="themTitle pull-left mr30">Partager cette offre</div>
                        <div class="partage pull-left ml5" data-url="https://www.aristimmo.com/1676-Maison-183m2-Paris-19e.html">
                            <div id="facebook" class="rsvDt" data-url="https://www.aristimmo.com/1676-Maison-183m2-Paris-19e.html?lang=fr" data-title=" "></div>
                            <div id="twitter" class="rsvDt">
                                <div class="box">
                                    <span class="share icons-dt">
                                        <a href="https://twitter.com/intent/tweet?original_referer=https://www.aristimmo.com/1676-Maison-183m2-Paris-19e.html&ref_src=twsrc^tfw&text=vente Maison - 183m2 - Paris 19e&tw_p=tweetbutton&url=https://www.aristimmo.com/1676-Maison-183m2-Paris-19e.html"></a>
                                    </span>
                                    <span class="count">+1</span>
                                </div>
                            </div>
                            <div id="googleplus" class="rsvDt" class="mr0" data-url="https://www.aristimmo.com/1676-Maison-183m2-Paris-19e.html" data-title=" "></div>
                        </div>
                    </div>
                </div>
            
            <div class="row">
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Description de l'offre</div>
                        <p itemprop="description">A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confection transform&eacute; en maison. Il est compos&eacute; d'un espace de r&eacute;ception cath&eacute;drale avec s&eacute;jour, salle &agrave; manger, coin bureau et cuisine ouverte, de quatre chambres, d'une salle de bains, d'une buanderie et d'un WC ind&eacute;pendant. Attenant &agrave; l'atelier, un duplex de charme de 40m2 compos&eacute; d'une pi&egrave;ce principale avec cuisine, d'une salle d'eau/WC et d'une chambre avec dressing. Les deux parties ont &eacute;t&eacute; con&ccedil;ues pour pouvoir &ecirc;tre ais&eacute;ment r&eacute;unies. Parfait &eacute;tat. Prestations de qualit&eacute; : parquet, tomettes, et beaux volumes. Calme, clair. Coup de coeur assur&eacute; !&nbsp;
Charges mensuelles : 280 euros. Obligations loi ALUR: honoraires de 45 000 euros TTC &agrave; la charge de l'acqu&eacute;reur inclus de le prix de pr&eacute;sentation.
La copropri&eacute;t&eacute; inclut 77 lots pour un montant annuel de la quote-part du budget pr&eacute;visionnel des d&eacute;penses courantes de 3360 &euro;.
Le syndicat de copropri&eacute;t&eacute; ne fait pas l'objet d'une proc&eacute;dure relative aux copropri&eacute;t&eacute;s.
L'agence immobili&egrave;re Aristimmo ne doit recevoir ni d&eacute;tenir d'autres fonds, effets ou valeurs que ceux repr&eacute;sentatifs de sa r&eacute;mun&eacute;ration ou de sa commission&nbsp;</p>
                    </div>
                
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle mb10">Descriptif du bien</div>
                        <div class="dataBien">
                            <ul id="dataTitle" class="nav nav-tabs" role="tablist">
                                                                    <li class="active"><a href="#infos">Général</a></li>
                                                                    <li class=""><a href="#details">Détails +</a></li>
                                                                    <li class=""><a href="#copro">Copropriété</a></li>
                                                                    <li class=""><a href="#infosfi">Financier</a></li>
                                                            </ul>
                                    <div id="dataContent" class="tab-content">
            
            
                                    <div class="tab-pane fade  active in" id="infos">
                                                    <p class="data">
                                <span class="termInfos">Code postal</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            75019                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface habitable (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            184,26 m²                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface loi Carrez (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            181.25                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de chambre(s)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            5                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de pièces</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            7                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de niveaux</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="details">
                                                    <p class="data">
                                <span class="termInfos">Nb de salle de bains</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nb de salle d'eau</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            AMERICAINE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Mode de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            GAZ                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de chauffage </span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            CONVECTEUR                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Format de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            INDIVIDUEL                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Exposition</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            SUD-OUEST                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Année de construction</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1900                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="copro">
                                                    <p class="data">
                                <span class="termInfos">copropriété</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Lot n°</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            76                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">nombre de lots</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            77                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Quote Part annuelle des charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3 360 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">plan de sauvegarde</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">statut du syndic</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            pas de procédure en cours                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="infosfi">
                                                    <p class="data">
                                <span class="termInfos">Prix de vente honoraires TTC inclus</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 490 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos"><span class="smallinfos">Prix de vente honoraires TTC exclus</span></span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 445 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Honoraires TTC à la charge acquéreur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3,11 %                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            280 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Taxe foncière annuelle</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 577 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                    
            
        </div>
    
                        </div>
                    </div>
                
            </div>
            
                            
            <div class="row">
                
                                                                                
                        <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Diagnostics de performance énergétique</div>
                        <div class="energy row text-center">
                            
                                <div class="col-sm-6 dpe mb10">
                                    <img src="/admin/dpe.php?lang=fr&amp;idann=1676" alt="DPE">
                                </div>
                            

                            
                                <div class="col-sm-6 ges">
                                    <img src="/admin/dpe.php?type=GES&amp;lang=fr&amp;idann=1676" alt="DPE">
                                </div>
                            
                        </div>
                    </div>
                                    
                                    <div class="col-md-6 elementDt">
                        
                            <div class="themTitle">Cette annonce vous intéresse ?</div>
                        
                        
                            <div class="row form-group">
                                
                                    <form name="myForm" class="form-horizontal" id="myForm" method="post" action="/1676-Maison-183m2-Paris-19e.html">
                                        
                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][nom]" class="form-control clearfix w100 center" placeholder="Votre nom *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="email" name="data[Contact][email]" class="form-control clearfix w100 center" placeholder="Votre adresse mail *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][tel]" class="form-control clearfix w100 center" placeholder="Votre Téléphone *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][ville]" class="form-control clearfix w100 center" placeholder="Votre ville *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-12">
                                                        <textarea name="data[Contact][message]" placeholder="Votre message " class="form-control" ></textarea>
                                                    </div>
                                                                                                                                        <input type="hidden" name="data[idbien][]" value="1676"/>
                                        
                                        <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                        
                                        <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreement" />
    <label for="rgpd-agreement">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreement');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                                        
                                            <div class="col-xs-12">
                                                <span class="oblig">* Champs obligatoires</span>
                                                <button type="submit" class="btn btn-default">Envoyer</button>
                                            </div>
                                        
                                    </form>
                                    <div class="legals">
                                        <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                                    </div>
                                
                            </div>
                        
                    </div>
                            </div>
            
                
                    <div class="row bigData">
                        <div class="col-sm-12">
                                                                        <section class="map-infos-city elementDt">
        <div class="title themTitle elementDtTitle">
            <h1>La ville de Paris (75019)</h1>
        </div>
        <div class="content">
            
                <div class="col-sm-12 map">
                    <div id="mapInfosCity" style="width:100%;height:300px;"></div>
                    <div class="map-buttons"></div>
                </div>
            
            
                <div class="col-sm-12 stat">
                    <div id="statsInfosCity"></div>
                </div>
            
        </div>
    </section>
    
    <style type="text/css">
        #statsInfosCity {
        }
        #statsInfosCity ul{
            margin:0; padding:0; list-style: inside none;
        }
        #statsInfosCity li{
            font-size: 0.85em;
            padding:1px;
            margin-bottom: 2px;
        }
        #statsInfosCity .title{
            font-weight: bold;
            margin-bottom:5px;
        }
        #statsInfosCity li.odd{
            background:#efefef;
        }
        #statsInfosCity li span{
            display:inline-block;
        }
        #statsInfosCity li .value{
            text-align:right;
            float:right;
            padding-right: 5px;
        }
        #mapInfosCity img {
            max-width: none;
        }
        .map-buttons{
            height:30px;
        }
        .map-buttons a{
            display: block;
            float: left;
            background: #e0e0e0;
            position: relative;
            width:30px; height:30px;
            margin:0 0.5px;
            text-align: center;
            font-size:8px;
        }
    </style>
    
                                                    </div>
                    </div>
                
            
        </div>
    </div>

         
                        
            
                            
            
                                                     <p class="small asterix mt10">* Honoraires d'Agences Inclus</p>
                        
            
        </div>
    </div>

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
         
        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
    <script type="text/javascript">
        $(document).ready(function(){
            $( ".back" ).click(function() {
                var url = "//www.aristimmo.com";
                $(location).attr('href',url);
            });
        });
    </script>

        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
        
                <script>
        
         /*********** bien config option geoloc *********** /
          *
          * @type Array|Array
          */
                                       var markers = {};
        var map;
        var isMapDragging;
        var idleSkipped;
        var visible;
        var translates = {};
        var geocoder;

        var colorMarkers;
         


        function getMap(Map){

            var map = Map.map;
            optionsCircle = {
                map: map,
                center: { lat : 48.89675070975 , lng:  2.3754998049859 },
                radius: 1500,
                strokeColor: '#B3D100',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#B3D100',
                fillOpacity: 0.35
            };

                                                //map.setCenter(new google.maps.LatLng(48.860000610, 2.344449997));
                    Map.setCenter(map, { lat: 48.89675070975, lng: 2.3754998049859 });
                                      addListeners(Map);
        }

        function addListeners(Map){
          Map.setMinZoom(Map.map, 12);
          callMarkers(Map);
          Map.addMapListener(Map.map, 'idle', function() {
            if (isMapDragging) {
              idleSkipped = true;
              return;
            }
            idleSkipped = false;
            callMarkers(Map);
          });
          Map.addMapListener(Map.map, 'dragstart', function () {
            isMapDragging = true;
          });
          Map.addMapListener(Map.map, 'dragend', function() {
            isMapDragging = false;
            if (idleSkipped === true) {
              callMarkers(Map);
              idleSkipped = false;
            }
          });
        }


        function callMarkers(Map){
            var bounds = Map.getBounds(Map.map);
            var boundsCoords = Map.getLatLngMinMax(bounds);
            var mxLt = boundsCoords.lat.max;
            var mnLt = boundsCoords.lat.min;
            var mxLg = boundsCoords.lng.max;
            var mnLg = boundsCoords.lng.min;
            $.get("/i/poi/getPoiBetween?minLat="+mnLt+"&maxLat="+mxLt+"&minLng="+mnLg+"&maxLng="+mxLg).done(function(jsonMarkers){
                if(jsonMarkers === null){
                    jsonMarkers = [];
                }
                cleanMarkers();
                addMarkers(jsonMarkers, Map);
            });
        }

        function cleanMarkers(){
            visible = [];
            for(key in markers){
                if(markers.hasOwnProperty(key)){
                    $.each(markers[key], function(k, marker){
                      var Map = marker.dataContainer.Map;
                        if(marker.dataContainer.map !== null && visible.indexOf(key)<0){
                            visible.push(key);
                        }
                        Map.removeMarker(Map.map, marker);
                        marker.dataContainer.map = null;
                    });
                    markers[key] = [];
                }
            }
        }
        
        function addMarkers(jsonMarkers, Map){
            $.each(jsonMarkers, function(){
              var markerData = this;
                if(!markers.hasOwnProperty(this.nom)){
                    markers[this.nom] = [];
                }
                var position = { lat: markerData.y, lng: markerData.x};
                var mapMarker = visible.indexOf(this.nom)>=0 ? Map.map : null;
                translates[this.nom] = this.translate;
              var markerOptions = {
                title: this.translate,
                icon: Map.createIcon('/i/poi/getIconMap?type='+this.nom, [32,54])
              };
              var marker = Map.createMapMarker(position, markerOptions, {
                map: mapMarker,
                Map: Map
              });
              if (visible.indexOf(this.nom)>=0) {
                Map.addMarker(Map.map, marker);
              }
                markers[this.nom].push(marker);
            });

                        addButtons();
        }
        

        function addButtons(){
            $(".map-buttons").empty();
            $.each(markers, function(k, mks){
                if(mks.length > 0){
                    var isVisible = (visible.indexOf(k) > -1);
                    addTypeButton(k, isVisible);
                }
            });
        }
        
            function showHideMarkers(type){
                if(markers.hasOwnProperty(type)){
                    for(var i = 0; i < markers[type].length; i++){
                       if(markers[type][i].dataContainer.map === null ){
                            markers[type][i].dataContainer.map = markers[type][i].dataContainer.Map.map;
                            markers[type][i].dataContainer.Map.addMarker(markers[type][i].dataContainer.map, markers[type][i]);
                           colorType(type, true);
                       } else {
                         markers[type][i].dataContainer.Map.removeMarker(markers[type][i].dataContainer.map, markers[type][i]);
                         markers[type][i].dataContainer.map = null;
                           colorType(type, false);
                       }
                    }
                }
            }
        
        
            function addTypeButton(type, isVisible){
                var bar = $(".map-buttons");
                var a = $("<a/>");
                var translate = translates[type];
                a.attr("class","map-button");
                a.attr("rel", type);
                a.attr("href","#");
                var img = $("<img/>");
                img.attr('src', '/i/poi/getIconBar?type='+type);
                img.attr('title', translate);
                img.attr('alt', type);
                if(isVisible){
                    img.css('background-color', '#'+colorMarkers[type]);
                }
                a.append(img);
                
    a.append('<span class="typeLink">'+translate+'</span>');

                bar.append(a);
            }
        
        
            function colorType(type, show){
                var color;
                if(show){
                    color = '#'+colorMarkers[type];
                } else {
                    color = 'transparent';
                }
                $('img[alt="'+type+'"]').css('background-color', color);
            }
        
        function app (){
            
            
                $.getScript('/i/json/getLbimapsLib', function () {
                    $.ajax('/i/json/getApiKeys?type=detail').done(function (apiKeys) {
                      var provider = 'jawg';
                    
                        var mapOptions = {
                                                zoom : 14 ,                                                 minZoom : 12 ,                                                 panControl : 1 ,                                                 scaleControl : 1 ,                                                 zoomControl : 1                                                 };
                    
                      var options = Object.assign({ }, mapOptions, {
                        mapContainer: '#mapInfosCity',
                        token: apiKeys[provider],
                        callback: window.getMap
                      });
                      lbimaps.callback(lbimaps.providers[provider])(options)
                    })
                });
            

            
                $(document).on("click",".map-button", function(){
                    var type = $(this).attr("rel");
                    showHideMarkers(type);
                    return false;
                });
                
                    $.get('/i/poi/getIconColors').done(function(result) {
                        colorMarkers = result;
                    });
                    $.get("/i/poi/getStats?idlocalite=8930",{},'json').done(function(stats){
                        
    var i = 0;
    var ul = $("<ul class='leftStat'/>");
    var ul2 = $("<ul class='rightStat'/>");
    $('#statsInfosCity').append('<div class="themTitle">Statistiques</div>');            
    $.each(stats, function(k, stat){
        var li = $("<li/>");
        if(i%2 === 0){
            li.addClass('even');
        } else {
            li.addClass('odd');
        }
        var unite = "%";
        if ((stat.translate).includes("Nombre")||stat.provider == 'api'){
           unite = "";
        }
        li.html('<span class="name">'+stat.translate+'</span><span class="value">'+stat.stat+' '+unite+'</span>');
        if (i < 7){
            ul.append(li);
        }
        else if (i > 6 && i < 14){
            $("#statsInfosCity").append(ul);
            ul2.append(li);
        }
        i++;
    });            
    $("#statsInfosCity").append(ul2);

                    });
                
            
        }
        
            app();
        

        
    </script>
    
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
    
            
<script>
jQuery(document).ready(function(){
            jQuery(document).on('submit', 'form', function(){                
                var myform = jQuery(this);
                var as = jQuery('.asbryw', myform);                
                if(as.length){                    
                    var dynamic = jQuery('.2', as);
                    var currentvalue = dynamic.val();
                    var origvalue = dynamic.attr('data-orig');
                    if(currentvalue === origvalue) {
                        var waitedvalue = dynamic.attr('data-wait');
                        dynamic.val(waitedvalue);
                    }
                }
                return true;
            });
        });
</script>


         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:28 GMT
- request:
    method: get
    uri: https://www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:28 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=a81gt92bbsv35peno7gq4iu3bs; path=/
      - SRV=c25; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w5
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '16443'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>vente 5 pièces - 121m2 - Paris 13e</title>
        <meta name="description" content="vente appartement 5 pièces Paris : 5 pièces - 121m2 - Paris 13e">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
    
        <meta property="og:title" content="5 pi&egrave;ces - 121m2 - Paris 13e" />
        <meta property="og:type" content="Website" />
        <meta property="og:url" content="https://www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html" />
        <meta property="og:image" content="https://www.aristimmo.com/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/original/8787db43bcc2bd8875704d31652c548a.jpg" />
    

        
                
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_ae4c1e4013717f3258e6bc12c3208432.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageDetail" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class=" ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="23" >
            Commerce
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    
    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
    
            
                        <div id="Calculette" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                  <div class="row modal-content">
                    <form class="form-horizontal" role="form" action="" onsubmit="return calculateCredit(this);">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title themTitle">Calculette</h4>
                        </div>
                        <div class="modal-body">
                            
                                <div class="form-group">
                                    <label for="montant" class="col-md-4 control-label">Montant *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="montant" id="montant" value="1300000">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="taux" class="col-md-4 control-label">Taux (%) * </label>
                                    <div class="col-md-8">
                                        <input type="number" step="0.01" min="0" class="form-control" name="taux" id="taux" required="">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="apport" class="col-md-4 control-label">Apport </label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control numericInput" name="apport" id="apport">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label">Durée (Années) * </label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="duree" id="duree" required="">
                                    </div>
                                </div>
                            
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label text-left">Mensualités </label>
                                    <div class="col-md-8 text-left">
                                      <span class="result"> </span>
                                    </div>
                                </div>
                            
                        </div>
                        <div class="modal-footer">
                            <label class="small obligChamp pull-left">*Champs obligatoires</label>
                            <button type="submit" class="btn btn-default right">Calculer</button>
                        </div>
                    </form>
                  </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
                     
    
    
            
            <div id="sendFriend" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1214-5-pieces-121m2-Paris-13e.html">
                            <input type="hidden" name="action" value="sendFriend">
                            <input type="hidden" name="data[Contact][url]" value="https://www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Partager</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="data[Contact][nom]" class="col-md-4 control-label">Votre nom *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="data[Contact][nom]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][from]" class="col-md-4 control-label">Votre adresse mail *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][from]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][to]" class="col-md-4 control-label">Mail de votre ami *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][to]" required="">
                                    </div>
                                </div>
                                <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="0bac395b431247d5a0939a1596373d38" data-orig="e48c509b60a46465b47873f1716e92bb" class="as_field as_field-2 2" value="e48c509b60a46465b47873f1716e92bb"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                
                                <div class="form-group">
                                    <label for="data[Contact][message]" class="col-md-4 control-label">Votre message</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" id="message" name="data[Contact][message]">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
    
    
        
        
                                                                    <div id="Contact" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1214-5-pieces-121m2-Paris-13e.html">
                            <input type="hidden" value="www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html" name="data[Contact][originemail]">
                            <input type="hidden" value="contact@aristimmo.com"  name="data[Contact][to]">
                            
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Contacter</h4>
                            </div>
                            <div class="modal-body">
                                
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre nom  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][nom]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre adresse mail  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="email"   placeholder=""  name="data[Contact][email]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre Téléphone  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][tel]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre ville  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][ville]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre message </label>
                                            <div class="col-xs-12 col-sm-8">
                                                <textarea name="data[Contact][message]" class="form-control" placeholder="" ></textarea>
                                            </div>
                                        </div>
                                                                        <div class="form-group">
                                        <div class="col-xs-12 col-sm-8 col-sm-push-4 control-label">
                                            Référence: 435.
                                        </div>
                                    </div>
                                
                                <input type="hidden" name="data[idbien][]" value="1214" />
                            </div>
                            <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="0bac395b431247d5a0939a1596373d38" data-orig="e48c509b60a46465b47873f1716e92bb" class="as_field as_field-2 2" value="e48c509b60a46465b47873f1716e92bb"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                             
                            <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreementmodal" />
    <label for="rgpd-agreementmodal">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreementmodal');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                        <div class="legals">
                            <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
      
    
    
        <div id="Visite" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="row modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title themTitle">Visite Virtuelle</h4>
                    </div>
                    <div class="modal-body text-center">
                                                    <iframe src="" width="800" height="500" frameborder="0" allowfullscreen></iframe>
                                            </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
    
    
    <div itemscope itemtype="https://schema.org/Product" class="containerDetail">
        
            <div class="themTitle">
                <h1 itemprop="name">5 pièces - 121m2 - Paris 13e</h1>
                <script type='application/ld+json'>
                {
                    "@context":"https://schema.org",
                    "@type":"BreadcrumbList",
                    "itemListElement":
                    [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                    "item": {
                                        "@id":"/",
                                        "name":"Accueil"
                                    }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                  "item": {
                                        "@id":"/1214-5-pieces-121m2-Paris-13e.html",
                                        "name":"5 pièces - 121m2 - Paris 13e"
                                    }
                                }
                                                                                                    ]
                }
                </script>
                <ol class="breadcrumb">
                                            <li><a href="/" >Accueil</a></li>
                                            <li><a href="/i/annonces/listing?ville=39923" >Paris</a></li>
                                            <li>5 pièces - 121m2 - Paris 13e</li>
                </ol>
            </div>
        
        <div class="containerDt">
            
                <div class="row">
                    <div class="col-md-12 backlist">
                        <div class="btn btn-default back pull-left"> < Retour</div>
                        
                                
                    
    
                    </div>
                </div>
            
            
            
    <div class="dt1 sliderV2">
        <div class="topContent">
            
                <div class="posTitle">
                    <div class="bienTitle">
                       
                            <h2>
                                Appartement
                                 121 m&sup2; - 
                                 5 pièces - 
                                Paris (75013)
                            </h2>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mainImg">
                            
                                <ul class="list-inline">
                                    
                                        <li>
                                                                                            Prix
                                                                                    </li><li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="1300000">1 300 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                    </li>
                                        <li class="ref" itemprop="productID">
                                            Ref 435.
                                        </li>
                                </ul>
                            
                            
                                                                                                                                                            
                                                          
                        
        
                            
                        </div>
                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12 diapoDetail">
                            
        <div class="loader">
            <img src="images/loading.gif" alt="gallery loader"/>
        </div>
        <ul class="imageGallery  loading">
                                                            <li data-iterator="0"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/8787db43bcc2bd8875704d31652c548a.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/8787db43bcc2bd8875704d31652c548a.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/8787db43bcc2bd8875704d31652c548a.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/8787db43bcc2bd8875704d31652c548a.jpg" alt="" />
                    </li>
                                    <li data-iterator="1"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/797f80cec795147cbe7d3051fb6985b8.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/797f80cec795147cbe7d3051fb6985b8.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/797f80cec795147cbe7d3051fb6985b8.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/797f80cec795147cbe7d3051fb6985b8.jpg" alt="" />
                    </li>
                                    <li data-iterator="2"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/7cf682fda8d9594bf29a04c653fe8409.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/7cf682fda8d9594bf29a04c653fe8409.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/7cf682fda8d9594bf29a04c653fe8409.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/7cf682fda8d9594bf29a04c653fe8409.jpg" alt="" />
                    </li>
                                    <li data-iterator="3"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/a638feca843521d987c4f86ec189fa18.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/a638feca843521d987c4f86ec189fa18.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/a638feca843521d987c4f86ec189fa18.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/a638feca843521d987c4f86ec189fa18.jpg" alt="" />
                    </li>
                                    <li data-iterator="4"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/93b0a3a8b2995933d9e1b08a2f6bcd24.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/93b0a3a8b2995933d9e1b08a2f6bcd24.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/93b0a3a8b2995933d9e1b08a2f6bcd24.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/93b0a3a8b2995933d9e1b08a2f6bcd24.jpg" alt="" />
                    </li>
                                    <li data-iterator="5"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/b84b3a042d746a0e570228fbf67b79a2.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/b84b3a042d746a0e570228fbf67b79a2.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/b84b3a042d746a0e570228fbf67b79a2.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/b84b3a042d746a0e570228fbf67b79a2.jpg" alt="" />
                    </li>
                                    <li data-iterator="6"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/6e18df255ac5e46bb53ffc7ea9520fe7.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/6e18df255ac5e46bb53ffc7ea9520fe7.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/6e18df255ac5e46bb53ffc7ea9520fe7.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/6e18df255ac5e46bb53ffc7ea9520fe7.jpg" alt="" />
                    </li>
                                    <li data-iterator="7"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/934a49126d586245da17851d755aab09.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/934a49126d586245da17851d755aab09.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/934a49126d586245da17851d755aab09.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/934a49126d586245da17851d755aab09.jpg" alt="" />
                    </li>
                                    <li data-iterator="8"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/0ba03dd38d3531bdde0db3849fe8c7ee.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/0ba03dd38d3531bdde0db3849fe8c7ee.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/0ba03dd38d3531bdde0db3849fe8c7ee.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/0ba03dd38d3531bdde0db3849fe8c7ee.jpg" alt="" />
                    </li>
                                    <li data-iterator="9"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/ea9a5f96ba226dc069b4320ec6f5de9b.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/ea9a5f96ba226dc069b4320ec6f5de9b.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/ea9a5f96ba226dc069b4320ec6f5de9b.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/ea9a5f96ba226dc069b4320ec6f5de9b.jpg" alt="" />
                    </li>
                                    <li data-iterator="10"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/248510828faef1e76384b30ff7b7ce0b.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/248510828faef1e76384b30ff7b7ce0b.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/248510828faef1e76384b30ff7b7ce0b.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/248510828faef1e76384b30ff7b7ce0b.jpg" alt="" />
                    </li>
                                    <li data-iterator="11"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/945d57022279ec622c382dd0b6e47aa0.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/945d57022279ec622c382dd0b6e47aa0.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/945d57022279ec622c382dd0b6e47aa0.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/ed691cdd079fa6425306f3ccb951ac21/945d57022279ec622c382dd0b6e47aa0.jpg" alt="" />
                    </li>
                                    </ul>
    

                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12">
                        <div class="actionDt">
                            


                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#Contact">
                                    <span class="pull-left txtBtn">Contacter</span> 
                                    <span class="icon-contactmail icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#sendFriend">
                                    <span class="pull-left txtBtn">Envoyer l'offre</span> 
                                    <span class="icon-partager icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" onclick="window.open('/admin/pdf.php?lang=fr&idann=1214&fiche_type=visite&pdf_orientation=P&pdf_template=1'); return false;">
                                    <span class="pull-left txtBtn">Imprimer</span> 
                                    <span class="icon-imprimer icons pull-right"></span>
                                </button>
                            
                            
                                                                    <button class="btn btn-dt" data-toggle="modal" data-target="#Calculette">
                                        <span class="pull-left txtBtn">Calculatrice</span> 
                                        <span class="icon-calculette icons pull-right"></span>
                                    </button>
                                                            
                        </div>
                    </div>
                </div>
            
        </div>
        <div class="mainContent">
            
                <div class="row">
                    <div class="col-md-12 elementDt">
                        <div class="themTitle pull-left mr30">Partager cette offre</div>
                        <div class="partage pull-left ml5" data-url="https://www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html">
                            <div id="facebook" class="rsvDt" data-url="https://www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html?lang=fr" data-title=" "></div>
                            <div id="twitter" class="rsvDt">
                                <div class="box">
                                    <span class="share icons-dt">
                                        <a href="https://twitter.com/intent/tweet?original_referer=https://www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html&ref_src=twsrc^tfw&text=vente 5 pièces - 121m2 - Paris 13e&tw_p=tweetbutton&url=https://www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html"></a>
                                    </span>
                                    <span class="count">+1</span>
                                </div>
                            </div>
                            <div id="googleplus" class="rsvDt" class="mr0" data-url="https://www.aristimmo.com/1214-5-pieces-121m2-Paris-13e.html" data-title=" "></div>
                        </div>
                    </div>
                </div>
            
            <div class="row">
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Description de l'offre</div>
                        <p itemprop="description">PORT-ROYAL. En bordure du 5&egrave;me arrondissement, et surplombant une succession de jardins, venez d&eacute;couvrir cet appartement familial de 5 pi&egrave;ces au 6&egrave;me &eacute;tage d'une copropri&eacute;t&eacute; de standing. Il est compos&eacute; d'une entr&eacute;e, d'un vaste s&eacute;jour, d'une cuisine ind&eacute;pendante, de quatre chambres, d'une salle de bains et de deux salles d'eau avec WC. L'appartement b&eacute;n&eacute;ficie d'une double exposition sans vis &agrave; vis, d'un balcon de 12m2 plein sud, d'une cave et d'un emplacement de parking. Nombreuses possiblit&eacute;s de r&eacute;agencement. Aucune perte d'espace. Charges de copropri&eacute;t&eacute; 545euros/mois comprenant chauffage et eau chaude, service de gardiennage, et jardinier. Rare sur le secteur. &nbsp;Obligations loi ALUR: honoraires de 35.000euros TTC &agrave; la charge de l'acqu&eacute;reur. La copropri&eacute;t&eacute; inclut 66 lots pour un montant annuel de la quote-part du budget pr&eacute;visionnel des d&eacute;penses courantes de 6540&euro;. Le syndicat de copropri&eacute;t&eacute; ne fait pas l'objet d'une proc&eacute;dure relative aux copropri&eacute;t&eacute;s.</p>
                    </div>
                
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle mb10">Descriptif du bien</div>
                        <div class="dataBien">
                            <ul id="dataTitle" class="nav nav-tabs" role="tablist">
                                                                    <li class="active"><a href="#infos">Général</a></li>
                                                                    <li class=""><a href="#details">Détails +</a></li>
                                                                    <li class=""><a href="#copro">Copropriété</a></li>
                                                                    <li class=""><a href="#infosfi">Financier</a></li>
                                                            </ul>
                                    <div id="dataContent" class="tab-content">
            
            
                                    <div class="tab-pane fade  active in" id="infos">
                                                    <p class="data">
                                <span class="termInfos">Code postal</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            75013                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface habitable (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            121 m²                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface loi Carrez (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            120.06                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de chambre(s)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            4                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de pièces</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            5                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Etage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            6                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Ascenseur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Vue</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            Jardin                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="details">
                                                    <p class="data">
                                <span class="termInfos">Nb de salle de bains</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nb de salle d'eau</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            SEPAREE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Format de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            COLLECTIF                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Interphone</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Balcon</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cave</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Exposition</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            SUD                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Année de construction</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1970                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="copro">
                                                    <p class="data">
                                <span class="termInfos">copropriété</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Quote Part annuelle des charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            6 158 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">statut du syndic</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            pas de procédure en cours                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="infosfi">
                                                    <p class="data">
                                <span class="termInfos">Prix de vente honoraires TTC inclus</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 300 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos"><span class="smallinfos">Prix de vente honoraires TTC exclus</span></span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 265 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Honoraires TTC à la charge acquéreur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2,77 %                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            545 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Taxe foncière annuelle</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 448 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                    
            
        </div>
    
                        </div>
                    </div>
                
            </div>
            
                            
            <div class="row">
                
                                                                                
                        <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Diagnostics de performance énergétique</div>
                        <div class="energy row text-center">
                            
                                <div class="col-sm-6 dpe mb10">
                                    <img src="/admin/dpe.php?lang=fr&amp;idann=1214" alt="DPE">
                                </div>
                            

                            
                                <div class="col-sm-6 ges">
                                    <img src="/admin/dpe.php?type=GES&amp;lang=fr&amp;idann=1214" alt="DPE">
                                </div>
                            
                        </div>
                    </div>
                                    
                                    <div class="col-md-6 elementDt">
                        
                            <div class="themTitle">Cette annonce vous intéresse ?</div>
                        
                        
                            <div class="row form-group">
                                
                                    <form name="myForm" class="form-horizontal" id="myForm" method="post" action="/1214-5-pieces-121m2-Paris-13e.html">
                                        
                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][nom]" class="form-control clearfix w100 center" placeholder="Votre nom *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="email" name="data[Contact][email]" class="form-control clearfix w100 center" placeholder="Votre adresse mail *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][tel]" class="form-control clearfix w100 center" placeholder="Votre Téléphone *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][ville]" class="form-control clearfix w100 center" placeholder="Votre ville *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-12">
                                                        <textarea name="data[Contact][message]" placeholder="Votre message " class="form-control" ></textarea>
                                                    </div>
                                                                                                                                        <input type="hidden" name="data[idbien][]" value="1214"/>
                                        
                                        <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="0bac395b431247d5a0939a1596373d38" data-orig="e48c509b60a46465b47873f1716e92bb" class="as_field as_field-2 2" value="e48c509b60a46465b47873f1716e92bb"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                        
                                        <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreement" />
    <label for="rgpd-agreement">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreement');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                                        
                                            <div class="col-xs-12">
                                                <span class="oblig">* Champs obligatoires</span>
                                                <button type="submit" class="btn btn-default">Envoyer</button>
                                            </div>
                                        
                                    </form>
                                    <div class="legals">
                                        <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                                    </div>
                                
                            </div>
                        
                    </div>
                            </div>
            
                
                    <div class="row bigData">
                        <div class="col-sm-12">
                                                                        <section class="map-infos-city elementDt">
        <div class="title themTitle elementDtTitle">
            <h1>La ville de Paris (75013)</h1>
        </div>
        <div class="content">
            
                <div class="col-sm-12 map">
                    <div id="mapInfosCity" style="width:100%;height:300px;"></div>
                    <div class="map-buttons"></div>
                </div>
            
            
                <div class="col-sm-12 stat">
                    <div id="statsInfosCity"></div>
                </div>
            
        </div>
    </section>
    
    <style type="text/css">
        #statsInfosCity {
        }
        #statsInfosCity ul{
            margin:0; padding:0; list-style: inside none;
        }
        #statsInfosCity li{
            font-size: 0.85em;
            padding:1px;
            margin-bottom: 2px;
        }
        #statsInfosCity .title{
            font-weight: bold;
            margin-bottom:5px;
        }
        #statsInfosCity li.odd{
            background:#efefef;
        }
        #statsInfosCity li span{
            display:inline-block;
        }
        #statsInfosCity li .value{
            text-align:right;
            float:right;
            padding-right: 5px;
        }
        #mapInfosCity img {
            max-width: none;
        }
        .map-buttons{
            height:30px;
        }
        .map-buttons a{
            display: block;
            float: left;
            background: #e0e0e0;
            position: relative;
            width:30px; height:30px;
            margin:0 0.5px;
            text-align: center;
            font-size:8px;
        }
    </style>
    
                                                    </div>
                    </div>
                
            
        </div>
    </div>

         
                        
            
                            
            
                                                     <p class="small asterix mt10">* Honoraires d'Agences Inclus</p>
                        
            
        </div>
    </div>

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
         
        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
    <script type="text/javascript">
        $(document).ready(function(){
            $( ".back" ).click(function() {
                var url = "//www.aristimmo.com";
                $(location).attr('href',url);
            });
        });
    </script>

        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
        
                <script>
        
         /*********** bien config option geoloc *********** /
          *
          * @type Array|Array
          */
                                       var markers = {};
        var map;
        var isMapDragging;
        var idleSkipped;
        var visible;
        var translates = {};
        var geocoder;

        var colorMarkers;
         


        function getMap(Map){

            var map = Map.map;
            optionsCircle = {
                map: map,
                center: { lat : 48.839717087515 , lng:  2.3408676216788 },
                radius: 1500,
                strokeColor: '#B3D100',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#B3D100',
                fillOpacity: 0.35
            };

                                                //map.setCenter(new google.maps.LatLng(48.860000610, 2.344449997));
                    Map.setCenter(map, { lat: 48.839717087515, lng: 2.3408676216788 });
                                      addListeners(Map);
        }

        function addListeners(Map){
          Map.setMinZoom(Map.map, 12);
          callMarkers(Map);
          Map.addMapListener(Map.map, 'idle', function() {
            if (isMapDragging) {
              idleSkipped = true;
              return;
            }
            idleSkipped = false;
            callMarkers(Map);
          });
          Map.addMapListener(Map.map, 'dragstart', function () {
            isMapDragging = true;
          });
          Map.addMapListener(Map.map, 'dragend', function() {
            isMapDragging = false;
            if (idleSkipped === true) {
              callMarkers(Map);
              idleSkipped = false;
            }
          });
        }


        function callMarkers(Map){
            var bounds = Map.getBounds(Map.map);
            var boundsCoords = Map.getLatLngMinMax(bounds);
            var mxLt = boundsCoords.lat.max;
            var mnLt = boundsCoords.lat.min;
            var mxLg = boundsCoords.lng.max;
            var mnLg = boundsCoords.lng.min;
            $.get("/i/poi/getPoiBetween?minLat="+mnLt+"&maxLat="+mxLt+"&minLng="+mnLg+"&maxLng="+mxLg).done(function(jsonMarkers){
                if(jsonMarkers === null){
                    jsonMarkers = [];
                }
                cleanMarkers();
                addMarkers(jsonMarkers, Map);
            });
        }

        function cleanMarkers(){
            visible = [];
            for(key in markers){
                if(markers.hasOwnProperty(key)){
                    $.each(markers[key], function(k, marker){
                      var Map = marker.dataContainer.Map;
                        if(marker.dataContainer.map !== null && visible.indexOf(key)<0){
                            visible.push(key);
                        }
                        Map.removeMarker(Map.map, marker);
                        marker.dataContainer.map = null;
                    });
                    markers[key] = [];
                }
            }
        }
        
        function addMarkers(jsonMarkers, Map){
            $.each(jsonMarkers, function(){
              var markerData = this;
                if(!markers.hasOwnProperty(this.nom)){
                    markers[this.nom] = [];
                }
                var position = { lat: markerData.y, lng: markerData.x};
                var mapMarker = visible.indexOf(this.nom)>=0 ? Map.map : null;
                translates[this.nom] = this.translate;
              var markerOptions = {
                title: this.translate,
                icon: Map.createIcon('/i/poi/getIconMap?type='+this.nom, [32,54])
              };
              var marker = Map.createMapMarker(position, markerOptions, {
                map: mapMarker,
                Map: Map
              });
              if (visible.indexOf(this.nom)>=0) {
                Map.addMarker(Map.map, marker);
              }
                markers[this.nom].push(marker);
            });

                        addButtons();
        }
        

        function addButtons(){
            $(".map-buttons").empty();
            $.each(markers, function(k, mks){
                if(mks.length > 0){
                    var isVisible = (visible.indexOf(k) > -1);
                    addTypeButton(k, isVisible);
                }
            });
        }
        
            function showHideMarkers(type){
                if(markers.hasOwnProperty(type)){
                    for(var i = 0; i < markers[type].length; i++){
                       if(markers[type][i].dataContainer.map === null ){
                            markers[type][i].dataContainer.map = markers[type][i].dataContainer.Map.map;
                            markers[type][i].dataContainer.Map.addMarker(markers[type][i].dataContainer.map, markers[type][i]);
                           colorType(type, true);
                       } else {
                         markers[type][i].dataContainer.Map.removeMarker(markers[type][i].dataContainer.map, markers[type][i]);
                         markers[type][i].dataContainer.map = null;
                           colorType(type, false);
                       }
                    }
                }
            }
        
        
            function addTypeButton(type, isVisible){
                var bar = $(".map-buttons");
                var a = $("<a/>");
                var translate = translates[type];
                a.attr("class","map-button");
                a.attr("rel", type);
                a.attr("href","#");
                var img = $("<img/>");
                img.attr('src', '/i/poi/getIconBar?type='+type);
                img.attr('title', translate);
                img.attr('alt', type);
                if(isVisible){
                    img.css('background-color', '#'+colorMarkers[type]);
                }
                a.append(img);
                
    a.append('<span class="typeLink">'+translate+'</span>');

                bar.append(a);
            }
        
        
            function colorType(type, show){
                var color;
                if(show){
                    color = '#'+colorMarkers[type];
                } else {
                    color = 'transparent';
                }
                $('img[alt="'+type+'"]').css('background-color', color);
            }
        
        function app (){
            
            
                $.getScript('/i/json/getLbimapsLib', function () {
                    $.ajax('/i/json/getApiKeys?type=detail').done(function (apiKeys) {
                      var provider = 'jawg';
                    
                        var mapOptions = {
                                                zoom : 14 ,                                                 minZoom : 12 ,                                                 panControl : 1 ,                                                 scaleControl : 1 ,                                                 zoomControl : 1                                                 };
                    
                      var options = Object.assign({ }, mapOptions, {
                        mapContainer: '#mapInfosCity',
                        token: apiKeys[provider],
                        callback: window.getMap
                      });
                      lbimaps.callback(lbimaps.providers[provider])(options)
                    })
                });
            

            
                $(document).on("click",".map-button", function(){
                    var type = $(this).attr("rel");
                    showHideMarkers(type);
                    return false;
                });
                
                    $.get('/i/poi/getIconColors').done(function(result) {
                        colorMarkers = result;
                    });
                    $.get("/i/poi/getStats?idlocalite=6228",{},'json').done(function(stats){
                        
    var i = 0;
    var ul = $("<ul class='leftStat'/>");
    var ul2 = $("<ul class='rightStat'/>");
    $('#statsInfosCity').append('<div class="themTitle">Statistiques</div>');            
    $.each(stats, function(k, stat){
        var li = $("<li/>");
        if(i%2 === 0){
            li.addClass('even');
        } else {
            li.addClass('odd');
        }
        var unite = "%";
        if ((stat.translate).includes("Nombre")||stat.provider == 'api'){
           unite = "";
        }
        li.html('<span class="name">'+stat.translate+'</span><span class="value">'+stat.stat+' '+unite+'</span>');
        if (i < 7){
            ul.append(li);
        }
        else if (i > 6 && i < 14){
            $("#statsInfosCity").append(ul);
            ul2.append(li);
        }
        i++;
    });            
    $("#statsInfosCity").append(ul2);

                    });
                
            
        }
        
            app();
        

        
    </script>
    
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
    
            
<script>
jQuery(document).ready(function(){
            jQuery(document).on('submit', 'form', function(){                
                var myform = jQuery(this);
                var as = jQuery('.asbryw', myform);                
                if(as.length){                    
                    var dynamic = jQuery('.2', as);
                    var currentvalue = dynamic.val();
                    var origvalue = dynamic.attr('data-orig');
                    if(currentvalue === origvalue) {
                        var waitedvalue = dynamic.attr('data-wait');
                        dynamic.val(waitedvalue);
                    }
                }
                return true;
            });
        });
</script>


         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:28 GMT
- request:
    method: get
    uri: https://www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:28 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=io6vuq4i1cqpsulpvfbq9u7f59; path=/
      - SRV=c22; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '16225'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>vente 4 pièces avec terrasse - 85 m2 - Paris 5e</title>
        <meta name="description" content="vente appartement 4 pièces Paris : 4 pièces avec terrasse - 85 m2 - Paris 5e">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
    
        <meta property="og:title" content="4 pi&egrave;ces avec terrasse - 85 m2 - Paris 5e" />
        <meta property="og:type" content="Website" />
        <meta property="og:url" content="https://www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" />
        <meta property="og:image" content="https://www.aristimmo.com/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" />
    

        
                
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_ae4c1e4013717f3258e6bc12c3208432.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageDetail" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class=" ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="23" >
            Commerce
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    
    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
    
            
                        <div id="Calculette" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                  <div class="row modal-content">
                    <form class="form-horizontal" role="form" action="" onsubmit="return calculateCredit(this);">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title themTitle">Calculette</h4>
                        </div>
                        <div class="modal-body">
                            
                                <div class="form-group">
                                    <label for="montant" class="col-md-4 control-label">Montant *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="montant" id="montant" value="1130000">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="taux" class="col-md-4 control-label">Taux (%) * </label>
                                    <div class="col-md-8">
                                        <input type="number" step="0.01" min="0" class="form-control" name="taux" id="taux" required="">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="apport" class="col-md-4 control-label">Apport </label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control numericInput" name="apport" id="apport">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label">Durée (Années) * </label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="duree" id="duree" required="">
                                    </div>
                                </div>
                            
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label text-left">Mensualités </label>
                                    <div class="col-md-8 text-left">
                                      <span class="result"> </span>
                                    </div>
                                </div>
                            
                        </div>
                        <div class="modal-footer">
                            <label class="small obligChamp pull-left">*Champs obligatoires</label>
                            <button type="submit" class="btn btn-default right">Calculer</button>
                        </div>
                    </form>
                  </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
                     
    
    
            
            <div id="sendFriend" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">
                            <input type="hidden" name="action" value="sendFriend">
                            <input type="hidden" name="data[Contact][url]" value="https://www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Partager</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="data[Contact][nom]" class="col-md-4 control-label">Votre nom *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="data[Contact][nom]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][from]" class="col-md-4 control-label">Votre adresse mail *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][from]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][to]" class="col-md-4 control-label">Mail de votre ami *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][to]" required="">
                                    </div>
                                </div>
                                <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                
                                <div class="form-group">
                                    <label for="data[Contact][message]" class="col-md-4 control-label">Votre message</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" id="message" name="data[Contact][message]">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
    
    
        
        
                                                                    <div id="Contact" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">
                            <input type="hidden" value="www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" name="data[Contact][originemail]">
                            <input type="hidden" value="contact@aristimmo.com"  name="data[Contact][to]">
                            
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Contacter</h4>
                            </div>
                            <div class="modal-body">
                                
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre nom  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][nom]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre adresse mail  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="email"   placeholder=""  name="data[Contact][email]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre Téléphone  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][tel]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre ville  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][ville]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre message </label>
                                            <div class="col-xs-12 col-sm-8">
                                                <textarea name="data[Contact][message]" class="form-control" placeholder="" ></textarea>
                                            </div>
                                        </div>
                                                                        <div class="form-group">
                                        <div class="col-xs-12 col-sm-8 col-sm-push-4 control-label">
                                            Référence: 470
                                        </div>
                                    </div>
                                
                                <input type="hidden" name="data[idbien][]" value="1507" />
                            </div>
                            <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                             
                            <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreementmodal" />
    <label for="rgpd-agreementmodal">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreementmodal');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                        <div class="legals">
                            <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
      
    
    
        <div id="Visite" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="row modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title themTitle">Visite Virtuelle</h4>
                    </div>
                    <div class="modal-body text-center">
                                                    <iframe src="" width="800" height="500" frameborder="0" allowfullscreen></iframe>
                                            </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
    
    
    <div itemscope itemtype="https://schema.org/Product" class="containerDetail">
        
            <div class="themTitle">
                <h1 itemprop="name">4 pièces avec terrasse - 85 m2 - Paris 5e</h1>
                <script type='application/ld+json'>
                {
                    "@context":"https://schema.org",
                    "@type":"BreadcrumbList",
                    "itemListElement":
                    [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                    "item": {
                                        "@id":"/",
                                        "name":"Accueil"
                                    }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                  "item": {
                                        "@id":"/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html",
                                        "name":"4 pièces avec terrasse - 85 m2 - Paris 5e"
                                    }
                                }
                                                                                                    ]
                }
                </script>
                <ol class="breadcrumb">
                                            <li><a href="/" >Accueil</a></li>
                                            <li><a href="/i/annonces/listing?ville=39915" >Paris</a></li>
                                            <li>4 pièces avec terrasse - 85 m2 - Paris 5e</li>
                </ol>
            </div>
        
        <div class="containerDt">
            
                <div class="row">
                    <div class="col-md-12 backlist">
                        <div class="btn btn-default back pull-left"> < Retour</div>
                        
                                
                    
    
                    </div>
                </div>
            
            
            
    <div class="dt1 sliderV2">
        <div class="topContent">
            
                <div class="posTitle">
                    <div class="bienTitle">
                       
                            <h2>
                                Appartement
                                 90 m&sup2; - 
                                 4 pièces - 
                                Paris (75005)
                            </h2>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mainImg">
                            
                                <ul class="list-inline">
                                    
                                        <li>
                                                                                            Prix
                                                                                    </li><li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="1130000">1 130 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                    </li>
                                        <li class="ref" itemprop="productID">
                                            Ref 470
                                        </li>
                                </ul>
                            
                            
                                                                                                                    <span class="StatutBien exclusif">Exclusivité</span>                                        
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                            
                        </div>
                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12 diapoDetail">
                            
        <div class="loader">
            <img src="images/loading.gif" alt="gallery loader"/>
        </div>
        <ul class="imageGallery  loading">
                                                            <li data-iterator="0"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/9ec356def56bc36dd12291e74c97bc80.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/9ec356def56bc36dd12291e74c97bc80.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/9ec356def56bc36dd12291e74c97bc80.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/9ec356def56bc36dd12291e74c97bc80.jpg" alt="" />
                    </li>
                                    <li data-iterator="1"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/dbd817903f5a130d56d1a4b5331a7d2d.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/dbd817903f5a130d56d1a4b5331a7d2d.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/dbd817903f5a130d56d1a4b5331a7d2d.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/dbd817903f5a130d56d1a4b5331a7d2d.jpg" alt="" />
                    </li>
                                    <li data-iterator="2"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/10e0ce14c5890ff27a8bd319f3a74dd0.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/10e0ce14c5890ff27a8bd319f3a74dd0.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/10e0ce14c5890ff27a8bd319f3a74dd0.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/10e0ce14c5890ff27a8bd319f3a74dd0.jpg" alt="" />
                    </li>
                                    <li data-iterator="3"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/f9fc3742f60c6abbca6c79b215106e01.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/f9fc3742f60c6abbca6c79b215106e01.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/f9fc3742f60c6abbca6c79b215106e01.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/f9fc3742f60c6abbca6c79b215106e01.jpg" alt="" />
                    </li>
                                    <li data-iterator="4"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/4cd5fb363351c06244920bcbbed76ced.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/4cd5fb363351c06244920bcbbed76ced.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/4cd5fb363351c06244920bcbbed76ced.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/4cd5fb363351c06244920bcbbed76ced.jpg" alt="" />
                    </li>
                                    <li data-iterator="5"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/0f1c5cca9761742715f5b1c6b10ff8d7.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/0f1c5cca9761742715f5b1c6b10ff8d7.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/0f1c5cca9761742715f5b1c6b10ff8d7.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/0f1c5cca9761742715f5b1c6b10ff8d7.jpg" alt="" />
                    </li>
                                    <li data-iterator="6"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/aa51a6996aa79dfd9e54e6d0e24aa568.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/aa51a6996aa79dfd9e54e6d0e24aa568.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/aa51a6996aa79dfd9e54e6d0e24aa568.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/aa51a6996aa79dfd9e54e6d0e24aa568.jpg" alt="" />
                    </li>
                                    <li data-iterator="7"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/14ad4a188df610b1c5169ef2e8c32b5c.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/14ad4a188df610b1c5169ef2e8c32b5c.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/14ad4a188df610b1c5169ef2e8c32b5c.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/14ad4a188df610b1c5169ef2e8c32b5c.jpg" alt="" />
                    </li>
                                    <li data-iterator="8"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/9169e620989f2d7e026bc8b08a3ea433.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/9169e620989f2d7e026bc8b08a3ea433.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/9169e620989f2d7e026bc8b08a3ea433.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/9169e620989f2d7e026bc8b08a3ea433.jpg" alt="" />
                    </li>
                                    <li data-iterator="9"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/e592b5987fe804e9b8bcda3b14f55e2f.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/e592b5987fe804e9b8bcda3b14f55e2f.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/e592b5987fe804e9b8bcda3b14f55e2f.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/e592b5987fe804e9b8bcda3b14f55e2f.jpg" alt="" />
                    </li>
                                    <li data-iterator="10"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/d7347a1d80aae6fed19e7624d0f97730.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/d7347a1d80aae6fed19e7624d0f97730.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/d7347a1d80aae6fed19e7624d0f97730.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/d7347a1d80aae6fed19e7624d0f97730.jpg" alt="" />
                    </li>
                                    <li data-iterator="11"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/0a71246dcb9582f8f6da9a5516197661.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/0a71246dcb9582f8f6da9a5516197661.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/0a71246dcb9582f8f6da9a5516197661.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/0a71246dcb9582f8f6da9a5516197661.jpg" alt="" />
                    </li>
                                    <li data-iterator="12"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/50e86211cdc31c6b4c7a686da796dc55.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/50e86211cdc31c6b4c7a686da796dc55.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/50e86211cdc31c6b4c7a686da796dc55.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/50e86211cdc31c6b4c7a686da796dc55.jpg" alt="" />
                    </li>
                                    <li data-iterator="13"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/50d65f4ddee7c6e9885961a71df84bf9.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/50d65f4ddee7c6e9885961a71df84bf9.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/50d65f4ddee7c6e9885961a71df84bf9.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/50d65f4ddee7c6e9885961a71df84bf9.jpg" alt="" />
                    </li>
                                    <li data-iterator="14"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/3f789ac527006562ec60c2574c453320.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/3f789ac527006562ec60c2574c453320.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/3f789ac527006562ec60c2574c453320.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/3f789ac527006562ec60c2574c453320.jpg" alt="" />
                    </li>
                                    </ul>
    

                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12">
                        <div class="actionDt">
                            


                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#Contact">
                                    <span class="pull-left txtBtn">Contacter</span> 
                                    <span class="icon-contactmail icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#sendFriend">
                                    <span class="pull-left txtBtn">Envoyer l'offre</span> 
                                    <span class="icon-partager icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" onclick="window.open('/admin/pdf.php?lang=fr&idann=1507&fiche_type=visite&pdf_orientation=P&pdf_template=1'); return false;">
                                    <span class="pull-left txtBtn">Imprimer</span> 
                                    <span class="icon-imprimer icons pull-right"></span>
                                </button>
                            
                            
                                                                    <button class="btn btn-dt" data-toggle="modal" data-target="#Calculette">
                                        <span class="pull-left txtBtn">Calculatrice</span> 
                                        <span class="icon-calculette icons pull-right"></span>
                                    </button>
                                                            
                        </div>
                    </div>
                </div>
            
        </div>
        <div class="mainContent">
            
                <div class="row">
                    <div class="col-md-12 elementDt">
                        <div class="themTitle pull-left mr30">Partager cette offre</div>
                        <div class="partage pull-left ml5" data-url="https://www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">
                            <div id="facebook" class="rsvDt" data-url="https://www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html?lang=fr" data-title=" "></div>
                            <div id="twitter" class="rsvDt">
                                <div class="box">
                                    <span class="share icons-dt">
                                        <a href="https://twitter.com/intent/tweet?original_referer=https://www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html&ref_src=twsrc^tfw&text=vente 4 pièces avec terrasse - 85 m2 - Paris 5e&tw_p=tweetbutton&url=https://www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html"></a>
                                    </span>
                                    <span class="count">+1</span>
                                </div>
                            </div>
                            <div id="googleplus" class="rsvDt" class="mr0" data-url="https://www.aristimmo.com/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" data-title=" "></div>
                        </div>
                    </div>
                </div>
            
            <div class="row">
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Description de l'offre</div>
                        <p itemprop="description">Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3 pi&egrave;ces atypique avec terrasse. En effet, ce bien se divise en deux parties reli&eacute;es par un pont de verdure, petit jardin suspendu rarissime...L'appartement se compose c&ocirc;t&eacute; rue d'un s&eacute;jour, salle &agrave; manger et cuisine ouverte ainsi qu'une chambre, d'une salle d'eau et de WC ind&eacute;pendants. Sur cour, vous trouverez une terrasse privative menant &agrave; un studio ind&eacute;pendant compos&eacute; d'un s&eacute;jour, d'un coin nuit en mezzanine, d'une cuisine et d'une salle d'eau avec WC.</p>
                    </div>
                
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle mb10">Descriptif du bien</div>
                        <div class="dataBien">
                            <ul id="dataTitle" class="nav nav-tabs" role="tablist">
                                                                    <li class="active"><a href="#infos">Général</a></li>
                                                                    <li class=""><a href="#details">Détails +</a></li>
                                                                    <li class=""><a href="#copro">Copropriété</a></li>
                                                                    <li class=""><a href="#infosfi">Financier</a></li>
                                                            </ul>
                                    <div id="dataContent" class="tab-content">
            
            
                                    <div class="tab-pane fade  active in" id="infos">
                                                    <p class="data">
                                <span class="termInfos">Code postal</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            75005                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface habitable (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            90 m²                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface loi Carrez (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            85                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de chambre(s)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de pièces</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            4                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Etage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de niveaux</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="details">
                                                    <p class="data">
                                <span class="termInfos">Nb de salle d'eau</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            AMERICAINE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            EQUIPEE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Terrasse</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Année de construction</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1880                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="copro">
                                                    <p class="data">
                                <span class="termInfos">copropriété</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Lot n°</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            21                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">nombre de lots</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            40                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Quote Part annuelle des charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3 000 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="infosfi">
                                                    <p class="data">
                                <span class="termInfos">Prix de vente honoraires TTC inclus</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 130 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos"><span class="smallinfos">Prix de vente honoraires TTC exclus</span></span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 100 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Honoraires TTC à la charge acquéreur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2,73 %                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            250 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Taxe foncière annuelle</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            900 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                    
            
        </div>
    
                        </div>
                    </div>
                
            </div>
            
                            
            <div class="row">
                
                                                                                
                        <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Diagnostics de performance énergétique</div>
                        <div class="energy row text-center">
                            
                                <div class="col-sm-6 dpe mb10">
                                    <img src="/admin/dpe.php?lang=fr&amp;idann=1507" alt="DPE">
                                </div>
                            

                            
                                <div class="col-sm-6 ges">
                                    <img src="/admin/dpe.php?type=GES&amp;lang=fr&amp;idann=1507" alt="DPE">
                                </div>
                            
                        </div>
                    </div>
                                    
                                    <div class="col-md-6 elementDt">
                        
                            <div class="themTitle">Cette annonce vous intéresse ?</div>
                        
                        
                            <div class="row form-group">
                                
                                    <form name="myForm" class="form-horizontal" id="myForm" method="post" action="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">
                                        
                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][nom]" class="form-control clearfix w100 center" placeholder="Votre nom *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="email" name="data[Contact][email]" class="form-control clearfix w100 center" placeholder="Votre adresse mail *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][tel]" class="form-control clearfix w100 center" placeholder="Votre Téléphone *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][ville]" class="form-control clearfix w100 center" placeholder="Votre ville *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-12">
                                                        <textarea name="data[Contact][message]" placeholder="Votre message " class="form-control" ></textarea>
                                                    </div>
                                                                                                                                        <input type="hidden" name="data[idbien][]" value="1507"/>
                                        
                                        <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                        
                                        <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreement" />
    <label for="rgpd-agreement">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreement');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                                        
                                            <div class="col-xs-12">
                                                <span class="oblig">* Champs obligatoires</span>
                                                <button type="submit" class="btn btn-default">Envoyer</button>
                                            </div>
                                        
                                    </form>
                                    <div class="legals">
                                        <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                                    </div>
                                
                            </div>
                        
                    </div>
                            </div>
            
                
                    <div class="row bigData">
                        <div class="col-sm-12">
                                                                        <section class="map-infos-city elementDt">
        <div class="title themTitle elementDtTitle">
            <h1>La ville de Paris (75005)</h1>
        </div>
        <div class="content">
            
                <div class="col-sm-12 map">
                    <div id="mapInfosCity" style="width:100%;height:300px;"></div>
                    <div class="map-buttons"></div>
                </div>
            
            
                <div class="col-sm-12 stat">
                    <div id="statsInfosCity"></div>
                </div>
            
        </div>
    </section>
    
    <style type="text/css">
        #statsInfosCity {
        }
        #statsInfosCity ul{
            margin:0; padding:0; list-style: inside none;
        }
        #statsInfosCity li{
            font-size: 0.85em;
            padding:1px;
            margin-bottom: 2px;
        }
        #statsInfosCity .title{
            font-weight: bold;
            margin-bottom:5px;
        }
        #statsInfosCity li.odd{
            background:#efefef;
        }
        #statsInfosCity li span{
            display:inline-block;
        }
        #statsInfosCity li .value{
            text-align:right;
            float:right;
            padding-right: 5px;
        }
        #mapInfosCity img {
            max-width: none;
        }
        .map-buttons{
            height:30px;
        }
        .map-buttons a{
            display: block;
            float: left;
            background: #e0e0e0;
            position: relative;
            width:30px; height:30px;
            margin:0 0.5px;
            text-align: center;
            font-size:8px;
        }
    </style>
    
                                                    </div>
                    </div>
                
            
        </div>
    </div>

         
                        
            
                            
            
                                                     <p class="small asterix mt10">* Honoraires d'Agences Inclus</p>
                        
            
        </div>
    </div>

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
         
        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
    <script type="text/javascript">
        $(document).ready(function(){
            $( ".back" ).click(function() {
                var url = "//www.aristimmo.com";
                $(location).attr('href',url);
            });
        });
    </script>

        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
        
                <script>
        
         /*********** bien config option geoloc *********** /
          *
          * @type Array|Array
          */
                                       var markers = {};
        var map;
        var isMapDragging;
        var idleSkipped;
        var visible;
        var translates = {};
        var geocoder;

        var colorMarkers;
         


        function getMap(Map){

            var map = Map.map;
            optionsCircle = {
                map: map,
                center: { lat : 48.849688497371 , lng:  2.3420387819851 },
                radius: 1500,
                strokeColor: '#B3D100',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#B3D100',
                fillOpacity: 0.35
            };

                                                //map.setCenter(new google.maps.LatLng(48.860000610, 2.344449997));
                    Map.setCenter(map, { lat: 48.849688497371, lng: 2.3420387819851 });
                                      addListeners(Map);
        }

        function addListeners(Map){
          Map.setMinZoom(Map.map, 12);
          callMarkers(Map);
          Map.addMapListener(Map.map, 'idle', function() {
            if (isMapDragging) {
              idleSkipped = true;
              return;
            }
            idleSkipped = false;
            callMarkers(Map);
          });
          Map.addMapListener(Map.map, 'dragstart', function () {
            isMapDragging = true;
          });
          Map.addMapListener(Map.map, 'dragend', function() {
            isMapDragging = false;
            if (idleSkipped === true) {
              callMarkers(Map);
              idleSkipped = false;
            }
          });
        }


        function callMarkers(Map){
            var bounds = Map.getBounds(Map.map);
            var boundsCoords = Map.getLatLngMinMax(bounds);
            var mxLt = boundsCoords.lat.max;
            var mnLt = boundsCoords.lat.min;
            var mxLg = boundsCoords.lng.max;
            var mnLg = boundsCoords.lng.min;
            $.get("/i/poi/getPoiBetween?minLat="+mnLt+"&maxLat="+mxLt+"&minLng="+mnLg+"&maxLng="+mxLg).done(function(jsonMarkers){
                if(jsonMarkers === null){
                    jsonMarkers = [];
                }
                cleanMarkers();
                addMarkers(jsonMarkers, Map);
            });
        }

        function cleanMarkers(){
            visible = [];
            for(key in markers){
                if(markers.hasOwnProperty(key)){
                    $.each(markers[key], function(k, marker){
                      var Map = marker.dataContainer.Map;
                        if(marker.dataContainer.map !== null && visible.indexOf(key)<0){
                            visible.push(key);
                        }
                        Map.removeMarker(Map.map, marker);
                        marker.dataContainer.map = null;
                    });
                    markers[key] = [];
                }
            }
        }
        
        function addMarkers(jsonMarkers, Map){
            $.each(jsonMarkers, function(){
              var markerData = this;
                if(!markers.hasOwnProperty(this.nom)){
                    markers[this.nom] = [];
                }
                var position = { lat: markerData.y, lng: markerData.x};
                var mapMarker = visible.indexOf(this.nom)>=0 ? Map.map : null;
                translates[this.nom] = this.translate;
              var markerOptions = {
                title: this.translate,
                icon: Map.createIcon('/i/poi/getIconMap?type='+this.nom, [32,54])
              };
              var marker = Map.createMapMarker(position, markerOptions, {
                map: mapMarker,
                Map: Map
              });
              if (visible.indexOf(this.nom)>=0) {
                Map.addMarker(Map.map, marker);
              }
                markers[this.nom].push(marker);
            });

                        addButtons();
        }
        

        function addButtons(){
            $(".map-buttons").empty();
            $.each(markers, function(k, mks){
                if(mks.length > 0){
                    var isVisible = (visible.indexOf(k) > -1);
                    addTypeButton(k, isVisible);
                }
            });
        }
        
            function showHideMarkers(type){
                if(markers.hasOwnProperty(type)){
                    for(var i = 0; i < markers[type].length; i++){
                       if(markers[type][i].dataContainer.map === null ){
                            markers[type][i].dataContainer.map = markers[type][i].dataContainer.Map.map;
                            markers[type][i].dataContainer.Map.addMarker(markers[type][i].dataContainer.map, markers[type][i]);
                           colorType(type, true);
                       } else {
                         markers[type][i].dataContainer.Map.removeMarker(markers[type][i].dataContainer.map, markers[type][i]);
                         markers[type][i].dataContainer.map = null;
                           colorType(type, false);
                       }
                    }
                }
            }
        
        
            function addTypeButton(type, isVisible){
                var bar = $(".map-buttons");
                var a = $("<a/>");
                var translate = translates[type];
                a.attr("class","map-button");
                a.attr("rel", type);
                a.attr("href","#");
                var img = $("<img/>");
                img.attr('src', '/i/poi/getIconBar?type='+type);
                img.attr('title', translate);
                img.attr('alt', type);
                if(isVisible){
                    img.css('background-color', '#'+colorMarkers[type]);
                }
                a.append(img);
                
    a.append('<span class="typeLink">'+translate+'</span>');

                bar.append(a);
            }
        
        
            function colorType(type, show){
                var color;
                if(show){
                    color = '#'+colorMarkers[type];
                } else {
                    color = 'transparent';
                }
                $('img[alt="'+type+'"]').css('background-color', color);
            }
        
        function app (){
            
            
                $.getScript('/i/json/getLbimapsLib', function () {
                    $.ajax('/i/json/getApiKeys?type=detail').done(function (apiKeys) {
                      var provider = 'jawg';
                    
                        var mapOptions = {
                                                zoom : 14 ,                                                 minZoom : 12 ,                                                 panControl : 1 ,                                                 scaleControl : 1 ,                                                 zoomControl : 1                                                 };
                    
                      var options = Object.assign({ }, mapOptions, {
                        mapContainer: '#mapInfosCity',
                        token: apiKeys[provider],
                        callback: window.getMap
                      });
                      lbimaps.callback(lbimaps.providers[provider])(options)
                    })
                });
            

            
                $(document).on("click",".map-button", function(){
                    var type = $(this).attr("rel");
                    showHideMarkers(type);
                    return false;
                });
                
                    $.get('/i/poi/getIconColors').done(function(result) {
                        colorMarkers = result;
                    });
                    $.get("/i/poi/getStats?idlocalite=7656",{},'json').done(function(stats){
                        
    var i = 0;
    var ul = $("<ul class='leftStat'/>");
    var ul2 = $("<ul class='rightStat'/>");
    $('#statsInfosCity').append('<div class="themTitle">Statistiques</div>');            
    $.each(stats, function(k, stat){
        var li = $("<li/>");
        if(i%2 === 0){
            li.addClass('even');
        } else {
            li.addClass('odd');
        }
        var unite = "%";
        if ((stat.translate).includes("Nombre")||stat.provider == 'api'){
           unite = "";
        }
        li.html('<span class="name">'+stat.translate+'</span><span class="value">'+stat.stat+' '+unite+'</span>');
        if (i < 7){
            ul.append(li);
        }
        else if (i > 6 && i < 14){
            $("#statsInfosCity").append(ul);
            ul2.append(li);
        }
        i++;
    });            
    $("#statsInfosCity").append(ul2);

                    });
                
            
        }
        
            app();
        

        
    </script>
    
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
    
            
<script>
jQuery(document).ready(function(){
            jQuery(document).on('submit', 'form', function(){                
                var myform = jQuery(this);
                var as = jQuery('.asbryw', myform);                
                if(as.length){                    
                    var dynamic = jQuery('.2', as);
                    var currentvalue = dynamic.val();
                    var origvalue = dynamic.attr('data-orig');
                    if(currentvalue === origvalue) {
                        var waitedvalue = dynamic.attr('data-wait');
                        dynamic.val(waitedvalue);
                    }
                }
                return true;
            });
        });
</script>


         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:28 GMT
- request:
    method: get
    uri: https://www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:28 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=atftvi7mlui4ujbbi209p72i0a; path=/
      - SRV=c26; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '16204'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>vente 4 pièces avec terrasse - 80,21m2 - Paris 9e</title>
        <meta name="description" content="vente appartement 4 pièces Paris : 4 pièces avec terrasse - 80,21m2 - Paris 9e">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
    
        <meta property="og:title" content="4 pi&egrave;ces avec terrasse - 80,21m2 - Paris 9e" />
        <meta property="og:type" content="Website" />
        <meta property="og:url" content="https://www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html" />
        <meta property="og:image" content="https://www.aristimmo.com/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/original/f28026e5c83d92f4a6c760955947d322.jpg" />
    

        
                
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_ae4c1e4013717f3258e6bc12c3208432.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageDetail" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class=" ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="23" >
            Commerce
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    
    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
    
            
                        <div id="Calculette" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                  <div class="row modal-content">
                    <form class="form-horizontal" role="form" action="" onsubmit="return calculateCredit(this);">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title themTitle">Calculette</h4>
                        </div>
                        <div class="modal-body">
                            
                                <div class="form-group">
                                    <label for="montant" class="col-md-4 control-label">Montant *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="montant" id="montant" value="967000">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="taux" class="col-md-4 control-label">Taux (%) * </label>
                                    <div class="col-md-8">
                                        <input type="number" step="0.01" min="0" class="form-control" name="taux" id="taux" required="">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="apport" class="col-md-4 control-label">Apport </label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control numericInput" name="apport" id="apport">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label">Durée (Années) * </label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="duree" id="duree" required="">
                                    </div>
                                </div>
                            
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label text-left">Mensualités </label>
                                    <div class="col-md-8 text-left">
                                      <span class="result"> </span>
                                    </div>
                                </div>
                            
                        </div>
                        <div class="modal-footer">
                            <label class="small obligChamp pull-left">*Champs obligatoires</label>
                            <button type="submit" class="btn btn-default right">Calculer</button>
                        </div>
                    </form>
                  </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
                     
    
    
            
            <div id="sendFriend" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html">
                            <input type="hidden" name="action" value="sendFriend">
                            <input type="hidden" name="data[Contact][url]" value="https://www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Partager</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="data[Contact][nom]" class="col-md-4 control-label">Votre nom *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="data[Contact][nom]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][from]" class="col-md-4 control-label">Votre adresse mail *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][from]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][to]" class="col-md-4 control-label">Mail de votre ami *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][to]" required="">
                                    </div>
                                </div>
                                <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                
                                <div class="form-group">
                                    <label for="data[Contact][message]" class="col-md-4 control-label">Votre message</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" id="message" name="data[Contact][message]">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
    
    
        
        
                                                                    <div id="Contact" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html">
                            <input type="hidden" value="www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html" name="data[Contact][originemail]">
                            <input type="hidden" value="contact@aristimmo.com"  name="data[Contact][to]">
                            
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Contacter</h4>
                            </div>
                            <div class="modal-body">
                                
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre nom  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][nom]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre adresse mail  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="email"   placeholder=""  name="data[Contact][email]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre Téléphone  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][tel]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre ville  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][ville]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre message </label>
                                            <div class="col-xs-12 col-sm-8">
                                                <textarea name="data[Contact][message]" class="form-control" placeholder="" ></textarea>
                                            </div>
                                        </div>
                                                                        <div class="form-group">
                                        <div class="col-xs-12 col-sm-8 col-sm-push-4 control-label">
                                            Référence: 502
                                        </div>
                                    </div>
                                
                                <input type="hidden" name="data[idbien][]" value="1674" />
                            </div>
                            <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                             
                            <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreementmodal" />
    <label for="rgpd-agreementmodal">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreementmodal');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                        <div class="legals">
                            <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
      
    
    
        <div id="Visite" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="row modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title themTitle">Visite Virtuelle</h4>
                    </div>
                    <div class="modal-body text-center">
                                                    <iframe src="" width="800" height="500" frameborder="0" allowfullscreen></iframe>
                                            </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
    
    
    <div itemscope itemtype="https://schema.org/Product" class="containerDetail">
        
            <div class="themTitle">
                <h1 itemprop="name">4 pièces avec terrasse - 80,21m2 - Paris 9e</h1>
                <script type='application/ld+json'>
                {
                    "@context":"https://schema.org",
                    "@type":"BreadcrumbList",
                    "itemListElement":
                    [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                    "item": {
                                        "@id":"/",
                                        "name":"Accueil"
                                    }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                  "item": {
                                        "@id":"/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html",
                                        "name":"4 pièces avec terrasse - 80,21m2 - Paris 9e"
                                    }
                                }
                                                                                                    ]
                }
                </script>
                <ol class="breadcrumb">
                                            <li><a href="/" >Accueil</a></li>
                                            <li><a href="/i/annonces/listing?ville=39911" >Paris</a></li>
                                            <li>4 pièces avec terrasse - 80,21m2 - Paris 9e</li>
                </ol>
            </div>
        
        <div class="containerDt">
            
                <div class="row">
                    <div class="col-md-12 backlist">
                        <div class="btn btn-default back pull-left"> < Retour</div>
                        
                                
                    
    
                    </div>
                </div>
            
            
            
    <div class="dt1 sliderV2">
        <div class="topContent">
            
                <div class="posTitle">
                    <div class="bienTitle">
                       
                            <h2>
                                Appartement
                                 80.21 m&sup2; - 
                                 4 pièces - 
                                Paris (75009)
                            </h2>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mainImg">
                            
                                <ul class="list-inline">
                                    
                                        <li>
                                                                                            Prix
                                                                                    </li><li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="967000">967 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                
                                                                                    
                                                
                                                                                    </li>
                                        <li class="ref" itemprop="productID">
                                            Ref 502
                                        </li>
                                </ul>
                            
                            
                                                                                                                                                            
                                                          
                        
        
                            
                        </div>
                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12 diapoDetail">
                            
        <div class="loader">
            <img src="images/loading.gif" alt="gallery loader"/>
        </div>
        <ul class="imageGallery  loading">
                                                            <li data-iterator="0"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/f28026e5c83d92f4a6c760955947d322.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/f28026e5c83d92f4a6c760955947d322.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/f28026e5c83d92f4a6c760955947d322.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/f28026e5c83d92f4a6c760955947d322.jpg" alt="" />
                    </li>
                                    <li data-iterator="1"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/fcc4adb58293dbcb90beb29fafdd91c3.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/fcc4adb58293dbcb90beb29fafdd91c3.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/fcc4adb58293dbcb90beb29fafdd91c3.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/fcc4adb58293dbcb90beb29fafdd91c3.jpg" alt="" />
                    </li>
                                    <li data-iterator="2"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/5038efd3f4c38ea65bcf33eab9e86bce.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/5038efd3f4c38ea65bcf33eab9e86bce.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/5038efd3f4c38ea65bcf33eab9e86bce.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/5038efd3f4c38ea65bcf33eab9e86bce.jpg" alt="" />
                    </li>
                                    <li data-iterator="3"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/859bf91321c07cb88584b5ad684e91a3.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/859bf91321c07cb88584b5ad684e91a3.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/859bf91321c07cb88584b5ad684e91a3.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/859bf91321c07cb88584b5ad684e91a3.jpg" alt="" />
                    </li>
                                    <li data-iterator="4"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/373c4cc9b04c83cf332a5f315eed5aec.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/373c4cc9b04c83cf332a5f315eed5aec.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/373c4cc9b04c83cf332a5f315eed5aec.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/373c4cc9b04c83cf332a5f315eed5aec.jpg" alt="" />
                    </li>
                                    <li data-iterator="5"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/75229d92f5ef6973098b4b1a5ac0cdf2.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/75229d92f5ef6973098b4b1a5ac0cdf2.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/75229d92f5ef6973098b4b1a5ac0cdf2.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/75229d92f5ef6973098b4b1a5ac0cdf2.jpg" alt="" />
                    </li>
                                    <li data-iterator="6"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/ddb12215fca405671479b7a8bfa6b21a.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/ddb12215fca405671479b7a8bfa6b21a.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/ddb12215fca405671479b7a8bfa6b21a.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/ddb12215fca405671479b7a8bfa6b21a.jpg" alt="" />
                    </li>
                                    <li data-iterator="7"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/550ed55890602328e27b84e527ccc9e8.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/550ed55890602328e27b84e527ccc9e8.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/550ed55890602328e27b84e527ccc9e8.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/550ed55890602328e27b84e527ccc9e8.jpg" alt="" />
                    </li>
                                    <li data-iterator="8"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/b6fcd66072659cf0f92cebfda9020862.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/b6fcd66072659cf0f92cebfda9020862.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/b6fcd66072659cf0f92cebfda9020862.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/f8b8551fbdd0e148899a97d0145755ea/b6fcd66072659cf0f92cebfda9020862.jpg" alt="" />
                    </li>
                                    </ul>
    

                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12">
                        <div class="actionDt">
                            


                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#Contact">
                                    <span class="pull-left txtBtn">Contacter</span> 
                                    <span class="icon-contactmail icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#sendFriend">
                                    <span class="pull-left txtBtn">Envoyer l'offre</span> 
                                    <span class="icon-partager icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" onclick="window.open('/admin/pdf.php?lang=fr&idann=1674&fiche_type=visite&pdf_orientation=P&pdf_template=1'); return false;">
                                    <span class="pull-left txtBtn">Imprimer</span> 
                                    <span class="icon-imprimer icons pull-right"></span>
                                </button>
                            
                            
                                                                    <button class="btn btn-dt" data-toggle="modal" data-target="#Calculette">
                                        <span class="pull-left txtBtn">Calculatrice</span> 
                                        <span class="icon-calculette icons pull-right"></span>
                                    </button>
                                                            
                        </div>
                    </div>
                </div>
            
        </div>
        <div class="mainContent">
            
                <div class="row">
                    <div class="col-md-12 elementDt">
                        <div class="themTitle pull-left mr30">Partager cette offre</div>
                        <div class="partage pull-left ml5" data-url="https://www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html">
                            <div id="facebook" class="rsvDt" data-url="https://www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html?lang=fr" data-title=" "></div>
                            <div id="twitter" class="rsvDt">
                                <div class="box">
                                    <span class="share icons-dt">
                                        <a href="https://twitter.com/intent/tweet?original_referer=https://www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html&ref_src=twsrc^tfw&text=vente 4 pièces avec terrasse - 80,21m2 - Paris 9e&tw_p=tweetbutton&url=https://www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html"></a>
                                    </span>
                                    <span class="count">+1</span>
                                </div>
                            </div>
                            <div id="googleplus" class="rsvDt" class="mr0" data-url="https://www.aristimmo.com/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html" data-title=" "></div>
                        </div>
                    </div>
                </div>
            
            <div class="row">
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Description de l'offre</div>
                        <p itemprop="description">SAINT-GEORGES-BLANCHE. Dans un tr&egrave;s bel immeuble ancien en Pierre de Taille datant de la fin du 19&egrave;me si&egrave;cle, venez visiter cet appartement lumineux avec le charme de l'ancien. Situ&eacute; au 2&egrave;me &eacute;tage avec ascenseur, il est compos&eacute; d'un vaste double-s&eacute;jour de plus de 32m2 tr&egrave;s lumineux expos&eacute; Sud Ouest avec vue d&eacute;gag&eacute;e et balcon, d'une cuisine s&eacute;par&eacute;e, d'une grande terrasse, de deux chambres au calme sur cour, d'un dressing am&eacute;nag&eacute;, d'une salle de bains et de WC s&eacute;par&eacute;s. Travaux &agrave; pr&eacute;voir. Toutes les fen&ecirc;tres sont en double vitrage r&eacute;cent.Honoraires de 4% TTC inclus &agrave; la charge de l'acqu&eacute;reur. La copropri&eacute;t&eacute; inclut 53 lots pour un montant annuel de la quote-part du budget pr&eacute;visionnel des d&eacute;penses courantes de 2300,16&euro;. Le syndicat de copropri&eacute;t&eacute; ne fait pas l'objet d'une proc&eacute;dure relative aux copropri&eacute;t&eacute;s. Une grande cave compl&egrave;te ce bien rare. &nbsp;</p>
                    </div>
                
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle mb10">Descriptif du bien</div>
                        <div class="dataBien">
                            <ul id="dataTitle" class="nav nav-tabs" role="tablist">
                                                                    <li class="active"><a href="#infos">Général</a></li>
                                                                    <li class=""><a href="#details">Détails +</a></li>
                                                                    <li class=""><a href="#copro">Copropriété</a></li>
                                                                    <li class=""><a href="#infosfi">Financier</a></li>
                                                            </ul>
                                    <div id="dataContent" class="tab-content">
            
            
                                    <div class="tab-pane fade  active in" id="infos">
                                                    <p class="data">
                                <span class="termInfos">Code postal</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            75009                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface habitable (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            80,21 m²                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface loi Carrez (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            80.21                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de chambre(s)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de pièces</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            4                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Etage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de niveaux</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Ascenseur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Vue</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            Dégagée                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="details">
                                                    <p class="data">
                                <span class="termInfos">Nb de salle de bains</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            SEPAREE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            EQUIPEE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Balcon</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Terrasse</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cave</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface cave (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            7.3                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Exposition</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            SUD-OUEST                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Année de construction</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1900                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="copro">
                                                    <p class="data">
                                <span class="termInfos">copropriété</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Lot n°</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            28                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">nombre de lots</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            53                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Quote Part annuelle des charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2 300,16 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">plan de sauvegarde</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">statut du syndic</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            pas de procédure en cours                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="infosfi">
                                                    <p class="data">
                                <span class="termInfos">Prix de vente honoraires TTC inclus</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            967 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            192 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Taxe foncière annuelle</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            970 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                    
            
        </div>
    
                        </div>
                    </div>
                
            </div>
            
                            
            <div class="row">
                
                                                                                
                        <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Diagnostics de performance énergétique</div>
                        <div class="energy row text-center">
                            
                                <div class="col-sm-6 dpe mb10">
                                    <img src="/admin/dpe.php?lang=fr&amp;idann=1674" alt="DPE">
                                </div>
                            

                            
                                <div class="col-sm-6 ges">
                                    <img src="/admin/dpe.php?type=GES&amp;lang=fr&amp;idann=1674" alt="DPE">
                                </div>
                            
                        </div>
                    </div>
                                    
                                    <div class="col-md-6 elementDt">
                        
                            <div class="themTitle">Cette annonce vous intéresse ?</div>
                        
                        
                            <div class="row form-group">
                                
                                    <form name="myForm" class="form-horizontal" id="myForm" method="post" action="/1674-4-pieces-avec-terrasse-80-21m2-Paris-9e.html">
                                        
                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][nom]" class="form-control clearfix w100 center" placeholder="Votre nom *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="email" name="data[Contact][email]" class="form-control clearfix w100 center" placeholder="Votre adresse mail *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][tel]" class="form-control clearfix w100 center" placeholder="Votre Téléphone *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][ville]" class="form-control clearfix w100 center" placeholder="Votre ville *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-12">
                                                        <textarea name="data[Contact][message]" placeholder="Votre message " class="form-control" ></textarea>
                                                    </div>
                                                                                                                                        <input type="hidden" name="data[idbien][]" value="1674"/>
                                        
                                        <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                        
                                        <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreement" />
    <label for="rgpd-agreement">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreement');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                                        
                                            <div class="col-xs-12">
                                                <span class="oblig">* Champs obligatoires</span>
                                                <button type="submit" class="btn btn-default">Envoyer</button>
                                            </div>
                                        
                                    </form>
                                    <div class="legals">
                                        <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                                    </div>
                                
                            </div>
                        
                    </div>
                            </div>
            
                
                    <div class="row bigData">
                        <div class="col-sm-12">
                                                                        <section class="map-infos-city elementDt">
        <div class="title themTitle elementDtTitle">
            <h1>La ville de Paris (75009)</h1>
        </div>
        <div class="content">
            
                <div class="col-sm-12 map">
                    <div id="mapInfosCity" style="width:100%;height:300px;"></div>
                    <div class="map-buttons"></div>
                </div>
            
            
                <div class="col-sm-12 stat">
                    <div id="statsInfosCity"></div>
                </div>
            
        </div>
    </section>
    
    <style type="text/css">
        #statsInfosCity {
        }
        #statsInfosCity ul{
            margin:0; padding:0; list-style: inside none;
        }
        #statsInfosCity li{
            font-size: 0.85em;
            padding:1px;
            margin-bottom: 2px;
        }
        #statsInfosCity .title{
            font-weight: bold;
            margin-bottom:5px;
        }
        #statsInfosCity li.odd{
            background:#efefef;
        }
        #statsInfosCity li span{
            display:inline-block;
        }
        #statsInfosCity li .value{
            text-align:right;
            float:right;
            padding-right: 5px;
        }
        #mapInfosCity img {
            max-width: none;
        }
        .map-buttons{
            height:30px;
        }
        .map-buttons a{
            display: block;
            float: left;
            background: #e0e0e0;
            position: relative;
            width:30px; height:30px;
            margin:0 0.5px;
            text-align: center;
            font-size:8px;
        }
    </style>
    
                                                    </div>
                    </div>
                
            
        </div>
    </div>

         
                        
            
                            
            
                            
            
        </div>
    </div>

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
         
        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
    <script type="text/javascript">
        $(document).ready(function(){
            $( ".back" ).click(function() {
                var url = "//www.aristimmo.com";
                $(location).attr('href',url);
            });
        });
    </script>

        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
        
                <script>
        
         /*********** bien config option geoloc *********** /
          *
          * @type Array|Array
          */
                                       var markers = {};
        var map;
        var isMapDragging;
        var idleSkipped;
        var visible;
        var translates = {};
        var geocoder;

        var colorMarkers;
         


        function getMap(Map){

            var map = Map.map;
            optionsCircle = {
                map: map,
                center: { lat : 48.879714026803 , lng:  2.3320170774221 },
                radius: 1500,
                strokeColor: '#B3D100',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#B3D100',
                fillOpacity: 0.35
            };

                                                //map.setCenter(new google.maps.LatLng(48.860000610, 2.344449997));
                    Map.setCenter(map, { lat: 48.879714026803, lng: 2.3320170774221 });
                                      addListeners(Map);
        }

        function addListeners(Map){
          Map.setMinZoom(Map.map, 12);
          callMarkers(Map);
          Map.addMapListener(Map.map, 'idle', function() {
            if (isMapDragging) {
              idleSkipped = true;
              return;
            }
            idleSkipped = false;
            callMarkers(Map);
          });
          Map.addMapListener(Map.map, 'dragstart', function () {
            isMapDragging = true;
          });
          Map.addMapListener(Map.map, 'dragend', function() {
            isMapDragging = false;
            if (idleSkipped === true) {
              callMarkers(Map);
              idleSkipped = false;
            }
          });
        }


        function callMarkers(Map){
            var bounds = Map.getBounds(Map.map);
            var boundsCoords = Map.getLatLngMinMax(bounds);
            var mxLt = boundsCoords.lat.max;
            var mnLt = boundsCoords.lat.min;
            var mxLg = boundsCoords.lng.max;
            var mnLg = boundsCoords.lng.min;
            $.get("/i/poi/getPoiBetween?minLat="+mnLt+"&maxLat="+mxLt+"&minLng="+mnLg+"&maxLng="+mxLg).done(function(jsonMarkers){
                if(jsonMarkers === null){
                    jsonMarkers = [];
                }
                cleanMarkers();
                addMarkers(jsonMarkers, Map);
            });
        }

        function cleanMarkers(){
            visible = [];
            for(key in markers){
                if(markers.hasOwnProperty(key)){
                    $.each(markers[key], function(k, marker){
                      var Map = marker.dataContainer.Map;
                        if(marker.dataContainer.map !== null && visible.indexOf(key)<0){
                            visible.push(key);
                        }
                        Map.removeMarker(Map.map, marker);
                        marker.dataContainer.map = null;
                    });
                    markers[key] = [];
                }
            }
        }
        
        function addMarkers(jsonMarkers, Map){
            $.each(jsonMarkers, function(){
              var markerData = this;
                if(!markers.hasOwnProperty(this.nom)){
                    markers[this.nom] = [];
                }
                var position = { lat: markerData.y, lng: markerData.x};
                var mapMarker = visible.indexOf(this.nom)>=0 ? Map.map : null;
                translates[this.nom] = this.translate;
              var markerOptions = {
                title: this.translate,
                icon: Map.createIcon('/i/poi/getIconMap?type='+this.nom, [32,54])
              };
              var marker = Map.createMapMarker(position, markerOptions, {
                map: mapMarker,
                Map: Map
              });
              if (visible.indexOf(this.nom)>=0) {
                Map.addMarker(Map.map, marker);
              }
                markers[this.nom].push(marker);
            });

                        addButtons();
        }
        

        function addButtons(){
            $(".map-buttons").empty();
            $.each(markers, function(k, mks){
                if(mks.length > 0){
                    var isVisible = (visible.indexOf(k) > -1);
                    addTypeButton(k, isVisible);
                }
            });
        }
        
            function showHideMarkers(type){
                if(markers.hasOwnProperty(type)){
                    for(var i = 0; i < markers[type].length; i++){
                       if(markers[type][i].dataContainer.map === null ){
                            markers[type][i].dataContainer.map = markers[type][i].dataContainer.Map.map;
                            markers[type][i].dataContainer.Map.addMarker(markers[type][i].dataContainer.map, markers[type][i]);
                           colorType(type, true);
                       } else {
                         markers[type][i].dataContainer.Map.removeMarker(markers[type][i].dataContainer.map, markers[type][i]);
                         markers[type][i].dataContainer.map = null;
                           colorType(type, false);
                       }
                    }
                }
            }
        
        
            function addTypeButton(type, isVisible){
                var bar = $(".map-buttons");
                var a = $("<a/>");
                var translate = translates[type];
                a.attr("class","map-button");
                a.attr("rel", type);
                a.attr("href","#");
                var img = $("<img/>");
                img.attr('src', '/i/poi/getIconBar?type='+type);
                img.attr('title', translate);
                img.attr('alt', type);
                if(isVisible){
                    img.css('background-color', '#'+colorMarkers[type]);
                }
                a.append(img);
                
    a.append('<span class="typeLink">'+translate+'</span>');

                bar.append(a);
            }
        
        
            function colorType(type, show){
                var color;
                if(show){
                    color = '#'+colorMarkers[type];
                } else {
                    color = 'transparent';
                }
                $('img[alt="'+type+'"]').css('background-color', color);
            }
        
        function app (){
            
            
                $.getScript('/i/json/getLbimapsLib', function () {
                    $.ajax('/i/json/getApiKeys?type=detail').done(function (apiKeys) {
                      var provider = 'jawg';
                    
                        var mapOptions = {
                                                zoom : 14 ,                                                 minZoom : 12 ,                                                 panControl : 1 ,                                                 scaleControl : 1 ,                                                 zoomControl : 1                                                 };
                    
                      var options = Object.assign({ }, mapOptions, {
                        mapContainer: '#mapInfosCity',
                        token: apiKeys[provider],
                        callback: window.getMap
                      });
                      lbimaps.callback(lbimaps.providers[provider])(options)
                    })
                });
            

            
                $(document).on("click",".map-button", function(){
                    var type = $(this).attr("rel");
                    showHideMarkers(type);
                    return false;
                });
                
                    $.get('/i/poi/getIconColors').done(function(result) {
                        colorMarkers = result;
                    });
                    $.get("/i/poi/getStats?idlocalite=8922",{},'json').done(function(stats){
                        
    var i = 0;
    var ul = $("<ul class='leftStat'/>");
    var ul2 = $("<ul class='rightStat'/>");
    $('#statsInfosCity').append('<div class="themTitle">Statistiques</div>');            
    $.each(stats, function(k, stat){
        var li = $("<li/>");
        if(i%2 === 0){
            li.addClass('even');
        } else {
            li.addClass('odd');
        }
        var unite = "%";
        if ((stat.translate).includes("Nombre")||stat.provider == 'api'){
           unite = "";
        }
        li.html('<span class="name">'+stat.translate+'</span><span class="value">'+stat.stat+' '+unite+'</span>');
        if (i < 7){
            ul.append(li);
        }
        else if (i > 6 && i < 14){
            $("#statsInfosCity").append(ul);
            ul2.append(li);
        }
        i++;
    });            
    $("#statsInfosCity").append(ul2);

                    });
                
            
        }
        
            app();
        

        
    </script>
    
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
    
            
<script>
jQuery(document).ready(function(){
            jQuery(document).on('submit', 'form', function(){                
                var myform = jQuery(this);
                var as = jQuery('.asbryw', myform);                
                if(as.length){                    
                    var dynamic = jQuery('.2', as);
                    var currentvalue = dynamic.val();
                    var origvalue = dynamic.attr('data-orig');
                    if(currentvalue === origvalue) {
                        var waitedvalue = dynamic.attr('data-wait');
                        dynamic.val(waitedvalue);
                    }
                }
                return true;
            });
        });
</script>


         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:28 GMT
- request:
    method: get
    uri: https://www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:28 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=h8n37ro1vrh7q2nu9ukbenqsjr; path=/
      - SRV=c23; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '16623'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>vente 3 pièce avec balcon - 60,53m2 - Paris 17e</title>
        <meta name="description" content="vente appartement 3 pièces Paris : 3 pièce avec balcon - 60,53m2 - Paris 17e">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
    
        <meta property="og:title" content="3 pi&egrave;ce avec balcon - 60,53m2 - Paris 17e" />
        <meta property="og:type" content="Website" />
        <meta property="og:url" content="https://www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html" />
        <meta property="og:image" content="https://www.aristimmo.com/images/biens/1/d0c23c0a2d17723732e9279475708781/original/7964d5bb139cf96813adfcd4d69b0ead.jpg" />
    

        
                
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_ae4c1e4013717f3258e6bc12c3208432.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageDetail" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class=" ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="23" >
            Commerce
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    
    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
    
            
                        <div id="Calculette" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                  <div class="row modal-content">
                    <form class="form-horizontal" role="form" action="" onsubmit="return calculateCredit(this);">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title themTitle">Calculette</h4>
                        </div>
                        <div class="modal-body">
                            
                                <div class="form-group">
                                    <label for="montant" class="col-md-4 control-label">Montant *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="montant" id="montant" value="698000">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="taux" class="col-md-4 control-label">Taux (%) * </label>
                                    <div class="col-md-8">
                                        <input type="number" step="0.01" min="0" class="form-control" name="taux" id="taux" required="">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="apport" class="col-md-4 control-label">Apport </label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control numericInput" name="apport" id="apport">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label">Durée (Années) * </label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="duree" id="duree" required="">
                                    </div>
                                </div>
                            
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label text-left">Mensualités </label>
                                    <div class="col-md-8 text-left">
                                      <span class="result"> </span>
                                    </div>
                                </div>
                            
                        </div>
                        <div class="modal-footer">
                            <label class="small obligChamp pull-left">*Champs obligatoires</label>
                            <button type="submit" class="btn btn-default right">Calculer</button>
                        </div>
                    </form>
                  </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
                     
    
    
            
            <div id="sendFriend" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html">
                            <input type="hidden" name="action" value="sendFriend">
                            <input type="hidden" name="data[Contact][url]" value="https://www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Partager</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="data[Contact][nom]" class="col-md-4 control-label">Votre nom *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="data[Contact][nom]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][from]" class="col-md-4 control-label">Votre adresse mail *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][from]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][to]" class="col-md-4 control-label">Mail de votre ami *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][to]" required="">
                                    </div>
                                </div>
                                <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                
                                <div class="form-group">
                                    <label for="data[Contact][message]" class="col-md-4 control-label">Votre message</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" id="message" name="data[Contact][message]">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
    
    
        
        
                                                                    <div id="Contact" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html">
                            <input type="hidden" value="www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html" name="data[Contact][originemail]">
                            <input type="hidden" value="contact@aristimmo.com"  name="data[Contact][to]">
                            
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Contacter</h4>
                            </div>
                            <div class="modal-body">
                                
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre nom  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][nom]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre adresse mail  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="email"   placeholder=""  name="data[Contact][email]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre Téléphone  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][tel]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre ville  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][ville]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre message </label>
                                            <div class="col-xs-12 col-sm-8">
                                                <textarea name="data[Contact][message]" class="form-control" placeholder="" ></textarea>
                                            </div>
                                        </div>
                                                                        <div class="form-group">
                                        <div class="col-xs-12 col-sm-8 col-sm-push-4 control-label">
                                            Référence: 431
                                        </div>
                                    </div>
                                
                                <input type="hidden" name="data[idbien][]" value="1269" />
                            </div>
                            <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                             
                            <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreementmodal" />
    <label for="rgpd-agreementmodal">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreementmodal');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                        <div class="legals">
                            <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
      
    
    
        <div id="Visite" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="row modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title themTitle">Visite Virtuelle</h4>
                    </div>
                    <div class="modal-body text-center">
                                                    <iframe src="" width="800" height="500" frameborder="0" allowfullscreen></iframe>
                                            </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
    
    
    <div itemscope itemtype="https://schema.org/Product" class="containerDetail">
        
            <div class="themTitle">
                <h1 itemprop="name">3 pièce avec balcon - 60,53m2 - Paris 17e</h1>
                <script type='application/ld+json'>
                {
                    "@context":"https://schema.org",
                    "@type":"BreadcrumbList",
                    "itemListElement":
                    [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                    "item": {
                                        "@id":"/",
                                        "name":"Accueil"
                                    }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                  "item": {
                                        "@id":"/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html",
                                        "name":"3 pièce avec balcon - 60,53m2 - Paris 17e"
                                    }
                                }
                                                                                                    ]
                }
                </script>
                <ol class="breadcrumb">
                                            <li><a href="/" >Accueil</a></li>
                                            <li><a href="/i/annonces/listing?ville=39916" >Paris</a></li>
                                            <li>3 pièce avec balcon - 60,53m2 - Paris 17e</li>
                </ol>
            </div>
        
        <div class="containerDt">
            
                <div class="row">
                    <div class="col-md-12 backlist">
                        <div class="btn btn-default back pull-left"> < Retour</div>
                        
                                
                    
    
                    </div>
                </div>
            
            
            
    <div class="dt1 sliderV2">
        <div class="topContent">
            
                <div class="posTitle">
                    <div class="bienTitle">
                       
                            <h2>
                                Appartement
                                 60.77 m&sup2; - 
                                 3 pièces - 
                                Paris (75017)
                            </h2>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mainImg">
                            
                                <ul class="list-inline">
                                    
                                        <li>
                                                                                            Prix
                                                                                    </li><li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="698000">698 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                    </li>
                                        <li class="ref" itemprop="productID">
                                            Ref 431
                                        </li>
                                </ul>
                            
                            
                                                                                                                                                            
                                                          
                        
        
                            
                        </div>
                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12 diapoDetail">
                            
        <div class="loader">
            <img src="images/loading.gif" alt="gallery loader"/>
        </div>
        <ul class="imageGallery  loading">
                                                            <li data-iterator="0"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/7964d5bb139cf96813adfcd4d69b0ead.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/7964d5bb139cf96813adfcd4d69b0ead.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/7964d5bb139cf96813adfcd4d69b0ead.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/7964d5bb139cf96813adfcd4d69b0ead.jpg" alt="" />
                    </li>
                                    <li data-iterator="1"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/50e63a22aab9db6c18bd2b9424acf3f6.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/50e63a22aab9db6c18bd2b9424acf3f6.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/50e63a22aab9db6c18bd2b9424acf3f6.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/50e63a22aab9db6c18bd2b9424acf3f6.jpg" alt="" />
                    </li>
                                    <li data-iterator="2"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/ff9e6bf542d95f55b721f197a8654398.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/ff9e6bf542d95f55b721f197a8654398.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/ff9e6bf542d95f55b721f197a8654398.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/ff9e6bf542d95f55b721f197a8654398.jpg" alt="" />
                    </li>
                                    <li data-iterator="3"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/cb9df94f3294ed71ba7ab24fcd03907a.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/cb9df94f3294ed71ba7ab24fcd03907a.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/cb9df94f3294ed71ba7ab24fcd03907a.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/cb9df94f3294ed71ba7ab24fcd03907a.jpg" alt="" />
                    </li>
                                    <li data-iterator="4"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/43ab04739227d6a72f70b00c415cf2ce.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/43ab04739227d6a72f70b00c415cf2ce.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/43ab04739227d6a72f70b00c415cf2ce.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/43ab04739227d6a72f70b00c415cf2ce.jpg" alt="" />
                    </li>
                                    <li data-iterator="5"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/d57ea0a3c280ebb18157833c613f5432.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/d57ea0a3c280ebb18157833c613f5432.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/d57ea0a3c280ebb18157833c613f5432.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/d57ea0a3c280ebb18157833c613f5432.jpg" alt="" />
                    </li>
                                    <li data-iterator="6"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/e722ba9b6aeba615f15d7ae99d1e2fcc.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/e722ba9b6aeba615f15d7ae99d1e2fcc.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/e722ba9b6aeba615f15d7ae99d1e2fcc.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/e722ba9b6aeba615f15d7ae99d1e2fcc.jpg" alt="" />
                    </li>
                                    <li data-iterator="7"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/79f265c181b81b050ca5eeb0c95a1d97.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/79f265c181b81b050ca5eeb0c95a1d97.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/79f265c181b81b050ca5eeb0c95a1d97.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/79f265c181b81b050ca5eeb0c95a1d97.jpg" alt="" />
                    </li>
                                    <li data-iterator="8"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/111edf72ee9056236da6bd41a8e73f98.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/111edf72ee9056236da6bd41a8e73f98.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/111edf72ee9056236da6bd41a8e73f98.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/111edf72ee9056236da6bd41a8e73f98.jpg" alt="" />
                    </li>
                                    <li data-iterator="9"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/d0c23c0a2d17723732e9279475708781/7e9c468d8836d378ff4e739eebb698b6.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/7e9c468d8836d378ff4e739eebb698b6.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/7e9c468d8836d378ff4e739eebb698b6.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/d0c23c0a2d17723732e9279475708781/7e9c468d8836d378ff4e739eebb698b6.jpg" alt="" />
                    </li>
                                    </ul>
    

                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12">
                        <div class="actionDt">
                            


                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#Contact">
                                    <span class="pull-left txtBtn">Contacter</span> 
                                    <span class="icon-contactmail icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#sendFriend">
                                    <span class="pull-left txtBtn">Envoyer l'offre</span> 
                                    <span class="icon-partager icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" onclick="window.open('/admin/pdf.php?lang=fr&idann=1269&fiche_type=visite&pdf_orientation=P&pdf_template=1'); return false;">
                                    <span class="pull-left txtBtn">Imprimer</span> 
                                    <span class="icon-imprimer icons pull-right"></span>
                                </button>
                            
                            
                                                                    <button class="btn btn-dt" data-toggle="modal" data-target="#Calculette">
                                        <span class="pull-left txtBtn">Calculatrice</span> 
                                        <span class="icon-calculette icons pull-right"></span>
                                    </button>
                                                            
                        </div>
                    </div>
                </div>
            
        </div>
        <div class="mainContent">
            
                <div class="row">
                    <div class="col-md-12 elementDt">
                        <div class="themTitle pull-left mr30">Partager cette offre</div>
                        <div class="partage pull-left ml5" data-url="https://www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html">
                            <div id="facebook" class="rsvDt" data-url="https://www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html?lang=fr" data-title=" "></div>
                            <div id="twitter" class="rsvDt">
                                <div class="box">
                                    <span class="share icons-dt">
                                        <a href="https://twitter.com/intent/tweet?original_referer=https://www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html&ref_src=twsrc^tfw&text=vente 3 pièce avec balcon - 60,53m2 - Paris 17e&tw_p=tweetbutton&url=https://www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html"></a>
                                    </span>
                                    <span class="count">+1</span>
                                </div>
                            </div>
                            <div id="googleplus" class="rsvDt" class="mr0" data-url="https://www.aristimmo.com/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html" data-title=" "></div>
                        </div>
                    </div>
                </div>
            
            <div class="row">
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Description de l'offre</div>
                        <p itemprop="description">Coeur Batignolles - rue Lemercier&nbsp;Dans un immeuble ancien typique du quartier des Batignolles, venez visiter ce bel appartement d'angle situ&eacute; au 5&egrave;me &eacute;tage tr&egrave;s lumineux avec vue d&eacute;gag&eacute;e dans toutes les pi&egrave;ces et grand balcon filant. &nbsp;L'appartement se compose d'une entr&eacute;e, d'un s&eacute;jour avec biblioth&egrave;que d'architecte et chemin&eacute;e moderne, d'une grande chambre d'angle avec dressing, d'une seconde chambre (ouvrable sur le s&eacute;jour) , d'une cuisine s&eacute;par&eacute;e, d'une salle de bains et de WC s&eacute;par&eacute;s.&nbsp;Une cave compl&egrave;te le bien.&nbsp;Les travaux de ravalement des fa&ccedil;ades rue et cour et de r&eacute;fection du hall d'entr&eacute;e sont vot&eacute;s et pay&eacute;s.
Obligations loi ALLUR: honoraires de 20.000euros TTC &agrave; la charge de l'acqu&eacute;reur. La copropri&eacute;t&eacute; inclut 62 lots pour un montant annuel de la quote-part du budget pr&eacute;visionnel des d&eacute;penses courantes de 1500&euro;. Le syndicat de copropri&eacute;t&eacute; ne fait pas l'objet d'une proc&eacute;dure relative aux copropri&eacute;t&eacute;s.
L'agence immobili&egrave;re Aristimmo ne doit recevoir ni d&eacute;tenir d'autres fonds, effets ou valeurs que ceux repr&eacute;sentatifs de sa r&eacute;mun&eacute;ration ou de sa commission&nbsp;</p>
                    </div>
                
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle mb10">Descriptif du bien</div>
                        <div class="dataBien">
                            <ul id="dataTitle" class="nav nav-tabs" role="tablist">
                                                                    <li class="active"><a href="#infos">Général</a></li>
                                                                    <li class=""><a href="#details">Détails +</a></li>
                                                                    <li class=""><a href="#copro">Copropriété</a></li>
                                                                    <li class=""><a href="#infosfi">Financier</a></li>
                                                            </ul>
                                    <div id="dataContent" class="tab-content">
            
            
                                    <div class="tab-pane fade  active in" id="infos">
                                                    <p class="data">
                                <span class="termInfos">Code postal</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            75017                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface habitable (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            60,77 m²                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface loi Carrez (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            60.53                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de chambre(s)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de pièces</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Etage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            5                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de niveaux</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Ascenseur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Vue</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            Degagee                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="details">
                                                    <p class="data">
                                <span class="termInfos">Nb de salle de bains</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            SEPAREE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            EQUIPEE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Mode de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            GAZ                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de chauffage </span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            RADIATEUR                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Format de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            INDIVIDUEL                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Balcon</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Terrasse</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cave</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface cave (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Exposition</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            SUD-EST                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Année de construction</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1850                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="copro">
                                                    <p class="data">
                                <span class="termInfos">copropriété</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Lot n°</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            24                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">nombre de lots</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            30                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Quote Part annuelle des charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 505,20 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">plan de sauvegarde</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">statut du syndic</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            pas de procédure en cours                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="infosfi">
                                                    <p class="data">
                                <span class="termInfos">Prix de vente honoraires TTC inclus</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            698 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos"><span class="smallinfos">Prix de vente honoraires TTC exclus</span></span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            678 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Honoraires TTC à la charge acquéreur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2,95 %                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            125 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Taxe foncière annuelle</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            455 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                    
            
        </div>
    
                        </div>
                    </div>
                
            </div>
            
                            
            <div class="row">
                
                                                                                
                        <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Diagnostics de performance énergétique</div>
                        <div class="energy row text-center">
                            
                                <div class="col-sm-6 dpe mb10">
                                    <img src="/admin/dpe.php?lang=fr&amp;idann=1269" alt="DPE">
                                </div>
                            

                            
                                <div class="col-sm-6 ges">
                                    <img src="/admin/dpe.php?type=GES&amp;lang=fr&amp;idann=1269" alt="DPE">
                                </div>
                            
                        </div>
                    </div>
                                    
                                    <div class="col-md-6 elementDt">
                        
                            <div class="themTitle">Cette annonce vous intéresse ?</div>
                        
                        
                            <div class="row form-group">
                                
                                    <form name="myForm" class="form-horizontal" id="myForm" method="post" action="/1269-3-piece-avec-balcon-60-53m2-Paris-17e.html">
                                        
                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][nom]" class="form-control clearfix w100 center" placeholder="Votre nom *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="email" name="data[Contact][email]" class="form-control clearfix w100 center" placeholder="Votre adresse mail *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][tel]" class="form-control clearfix w100 center" placeholder="Votre Téléphone *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][ville]" class="form-control clearfix w100 center" placeholder="Votre ville *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-12">
                                                        <textarea name="data[Contact][message]" placeholder="Votre message " class="form-control" ></textarea>
                                                    </div>
                                                                                                                                        <input type="hidden" name="data[idbien][]" value="1269"/>
                                        
                                        <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                        
                                        <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreement" />
    <label for="rgpd-agreement">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreement');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                                        
                                            <div class="col-xs-12">
                                                <span class="oblig">* Champs obligatoires</span>
                                                <button type="submit" class="btn btn-default">Envoyer</button>
                                            </div>
                                        
                                    </form>
                                    <div class="legals">
                                        <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                                    </div>
                                
                            </div>
                        
                    </div>
                            </div>
            
                
                    <div class="row bigData">
                        <div class="col-sm-12">
                                                                        <section class="map-infos-city elementDt">
        <div class="title themTitle elementDtTitle">
            <h1>La ville de Paris (75017)</h1>
        </div>
        <div class="content">
            
                <div class="col-sm-12 map">
                    <div id="mapInfosCity" style="width:100%;height:300px;"></div>
                    <div class="map-buttons"></div>
                </div>
            
            
                <div class="col-sm-12 stat">
                    <div id="statsInfosCity"></div>
                </div>
            
        </div>
    </section>
    
    <style type="text/css">
        #statsInfosCity {
        }
        #statsInfosCity ul{
            margin:0; padding:0; list-style: inside none;
        }
        #statsInfosCity li{
            font-size: 0.85em;
            padding:1px;
            margin-bottom: 2px;
        }
        #statsInfosCity .title{
            font-weight: bold;
            margin-bottom:5px;
        }
        #statsInfosCity li.odd{
            background:#efefef;
        }
        #statsInfosCity li span{
            display:inline-block;
        }
        #statsInfosCity li .value{
            text-align:right;
            float:right;
            padding-right: 5px;
        }
        #mapInfosCity img {
            max-width: none;
        }
        .map-buttons{
            height:30px;
        }
        .map-buttons a{
            display: block;
            float: left;
            background: #e0e0e0;
            position: relative;
            width:30px; height:30px;
            margin:0 0.5px;
            text-align: center;
            font-size:8px;
        }
    </style>
    
                                                    </div>
                    </div>
                
            
        </div>
    </div>

         
                        
            
                            
            
                                                     <p class="small asterix mt10">* Honoraires d'Agences Inclus</p>
                        
            
        </div>
    </div>

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
         
        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
    <script type="text/javascript">
        $(document).ready(function(){
            $( ".back" ).click(function() {
                var url = "//www.aristimmo.com";
                $(location).attr('href',url);
            });
        });
    </script>

        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
        
                <script>
        
         /*********** bien config option geoloc *********** /
          *
          * @type Array|Array
          */
                                       var markers = {};
        var map;
        var isMapDragging;
        var idleSkipped;
        var visible;
        var translates = {};
        var geocoder;

        var colorMarkers;
         


        function getMap(Map){

            var map = Map.map;
            optionsCircle = {
                map: map,
                center: { lat : 48.891533278215 , lng:  2.3252013803388 },
                radius: 1500,
                strokeColor: '#B3D100',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#B3D100',
                fillOpacity: 0.35
            };

                                                //map.setCenter(new google.maps.LatLng(48.860000610, 2.344449997));
                    Map.setCenter(map, { lat: 48.891533278215, lng: 2.3252013803388 });
                                      addListeners(Map);
        }

        function addListeners(Map){
          Map.setMinZoom(Map.map, 12);
          callMarkers(Map);
          Map.addMapListener(Map.map, 'idle', function() {
            if (isMapDragging) {
              idleSkipped = true;
              return;
            }
            idleSkipped = false;
            callMarkers(Map);
          });
          Map.addMapListener(Map.map, 'dragstart', function () {
            isMapDragging = true;
          });
          Map.addMapListener(Map.map, 'dragend', function() {
            isMapDragging = false;
            if (idleSkipped === true) {
              callMarkers(Map);
              idleSkipped = false;
            }
          });
        }


        function callMarkers(Map){
            var bounds = Map.getBounds(Map.map);
            var boundsCoords = Map.getLatLngMinMax(bounds);
            var mxLt = boundsCoords.lat.max;
            var mnLt = boundsCoords.lat.min;
            var mxLg = boundsCoords.lng.max;
            var mnLg = boundsCoords.lng.min;
            $.get("/i/poi/getPoiBetween?minLat="+mnLt+"&maxLat="+mxLt+"&minLng="+mnLg+"&maxLng="+mxLg).done(function(jsonMarkers){
                if(jsonMarkers === null){
                    jsonMarkers = [];
                }
                cleanMarkers();
                addMarkers(jsonMarkers, Map);
            });
        }

        function cleanMarkers(){
            visible = [];
            for(key in markers){
                if(markers.hasOwnProperty(key)){
                    $.each(markers[key], function(k, marker){
                      var Map = marker.dataContainer.Map;
                        if(marker.dataContainer.map !== null && visible.indexOf(key)<0){
                            visible.push(key);
                        }
                        Map.removeMarker(Map.map, marker);
                        marker.dataContainer.map = null;
                    });
                    markers[key] = [];
                }
            }
        }
        
        function addMarkers(jsonMarkers, Map){
            $.each(jsonMarkers, function(){
              var markerData = this;
                if(!markers.hasOwnProperty(this.nom)){
                    markers[this.nom] = [];
                }
                var position = { lat: markerData.y, lng: markerData.x};
                var mapMarker = visible.indexOf(this.nom)>=0 ? Map.map : null;
                translates[this.nom] = this.translate;
              var markerOptions = {
                title: this.translate,
                icon: Map.createIcon('/i/poi/getIconMap?type='+this.nom, [32,54])
              };
              var marker = Map.createMapMarker(position, markerOptions, {
                map: mapMarker,
                Map: Map
              });
              if (visible.indexOf(this.nom)>=0) {
                Map.addMarker(Map.map, marker);
              }
                markers[this.nom].push(marker);
            });

                        addButtons();
        }
        

        function addButtons(){
            $(".map-buttons").empty();
            $.each(markers, function(k, mks){
                if(mks.length > 0){
                    var isVisible = (visible.indexOf(k) > -1);
                    addTypeButton(k, isVisible);
                }
            });
        }
        
            function showHideMarkers(type){
                if(markers.hasOwnProperty(type)){
                    for(var i = 0; i < markers[type].length; i++){
                       if(markers[type][i].dataContainer.map === null ){
                            markers[type][i].dataContainer.map = markers[type][i].dataContainer.Map.map;
                            markers[type][i].dataContainer.Map.addMarker(markers[type][i].dataContainer.map, markers[type][i]);
                           colorType(type, true);
                       } else {
                         markers[type][i].dataContainer.Map.removeMarker(markers[type][i].dataContainer.map, markers[type][i]);
                         markers[type][i].dataContainer.map = null;
                           colorType(type, false);
                       }
                    }
                }
            }
        
        
            function addTypeButton(type, isVisible){
                var bar = $(".map-buttons");
                var a = $("<a/>");
                var translate = translates[type];
                a.attr("class","map-button");
                a.attr("rel", type);
                a.attr("href","#");
                var img = $("<img/>");
                img.attr('src', '/i/poi/getIconBar?type='+type);
                img.attr('title', translate);
                img.attr('alt', type);
                if(isVisible){
                    img.css('background-color', '#'+colorMarkers[type]);
                }
                a.append(img);
                
    a.append('<span class="typeLink">'+translate+'</span>');

                bar.append(a);
            }
        
        
            function colorType(type, show){
                var color;
                if(show){
                    color = '#'+colorMarkers[type];
                } else {
                    color = 'transparent';
                }
                $('img[alt="'+type+'"]').css('background-color', color);
            }
        
        function app (){
            
            
                $.getScript('/i/json/getLbimapsLib', function () {
                    $.ajax('/i/json/getApiKeys?type=detail').done(function (apiKeys) {
                      var provider = 'jawg';
                    
                        var mapOptions = {
                                                zoom : 14 ,                                                 minZoom : 12 ,                                                 panControl : 1 ,                                                 scaleControl : 1 ,                                                 zoomControl : 1                                                 };
                    
                      var options = Object.assign({ }, mapOptions, {
                        mapContainer: '#mapInfosCity',
                        token: apiKeys[provider],
                        callback: window.getMap
                      });
                      lbimaps.callback(lbimaps.providers[provider])(options)
                    })
                });
            

            
                $(document).on("click",".map-button", function(){
                    var type = $(this).attr("rel");
                    showHideMarkers(type);
                    return false;
                });
                
                    $.get('/i/poi/getIconColors').done(function(result) {
                        colorMarkers = result;
                    });
                    $.get("/i/poi/getStats?idlocalite=6368",{},'json').done(function(stats){
                        
    var i = 0;
    var ul = $("<ul class='leftStat'/>");
    var ul2 = $("<ul class='rightStat'/>");
    $('#statsInfosCity').append('<div class="themTitle">Statistiques</div>');            
    $.each(stats, function(k, stat){
        var li = $("<li/>");
        if(i%2 === 0){
            li.addClass('even');
        } else {
            li.addClass('odd');
        }
        var unite = "%";
        if ((stat.translate).includes("Nombre")||stat.provider == 'api'){
           unite = "";
        }
        li.html('<span class="name">'+stat.translate+'</span><span class="value">'+stat.stat+' '+unite+'</span>');
        if (i < 7){
            ul.append(li);
        }
        else if (i > 6 && i < 14){
            $("#statsInfosCity").append(ul);
            ul2.append(li);
        }
        i++;
    });            
    $("#statsInfosCity").append(ul2);

                    });
                
            
        }
        
            app();
        

        
    </script>
    
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
    
            
<script>
jQuery(document).ready(function(){
            jQuery(document).on('submit', 'form', function(){                
                var myform = jQuery(this);
                var as = jQuery('.asbryw', myform);                
                if(as.length){                    
                    var dynamic = jQuery('.2', as);
                    var currentvalue = dynamic.val();
                    var origvalue = dynamic.attr('data-orig');
                    if(currentvalue === origvalue) {
                        var waitedvalue = dynamic.attr('data-wait');
                        dynamic.val(waitedvalue);
                    }
                }
                return true;
            });
        });
</script>


         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:28 GMT
- request:
    method: get
    uri: https://www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:28 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=8173u3hj1vs5l9hsdr5p1r7oi2; path=/
      - SRV=c24; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '16336'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>vente 2 pièces - 48m2 - Paris 16e</title>
        <meta name="description" content="vente appartement 2 pièces Paris : 2 pièces - 48m2 - Paris 16e">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
    
        <meta property="og:title" content="2 pi&egrave;ces - 48m2 - Paris 16e" />
        <meta property="og:type" content="Website" />
        <meta property="og:url" content="https://www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html" />
        <meta property="og:image" content="https://www.aristimmo.com/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" />
    

        
                
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_ae4c1e4013717f3258e6bc12c3208432.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageDetail" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class=" ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="23" >
            Commerce
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    
    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
    
            
                        <div id="Calculette" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                  <div class="row modal-content">
                    <form class="form-horizontal" role="form" action="" onsubmit="return calculateCredit(this);">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title themTitle">Calculette</h4>
                        </div>
                        <div class="modal-body">
                            
                                <div class="form-group">
                                    <label for="montant" class="col-md-4 control-label">Montant *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="montant" id="montant" value="598000">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="taux" class="col-md-4 control-label">Taux (%) * </label>
                                    <div class="col-md-8">
                                        <input type="number" step="0.01" min="0" class="form-control" name="taux" id="taux" required="">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="apport" class="col-md-4 control-label">Apport </label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control numericInput" name="apport" id="apport">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label">Durée (Années) * </label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="duree" id="duree" required="">
                                    </div>
                                </div>
                            
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label text-left">Mensualités </label>
                                    <div class="col-md-8 text-left">
                                      <span class="result"> </span>
                                    </div>
                                </div>
                            
                        </div>
                        <div class="modal-footer">
                            <label class="small obligChamp pull-left">*Champs obligatoires</label>
                            <button type="submit" class="btn btn-default right">Calculer</button>
                        </div>
                    </form>
                  </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
                     
    
    
            
            <div id="sendFriend" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1797-2-pieces-48m2-Paris-16e.html">
                            <input type="hidden" name="action" value="sendFriend">
                            <input type="hidden" name="data[Contact][url]" value="https://www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Partager</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="data[Contact][nom]" class="col-md-4 control-label">Votre nom *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="data[Contact][nom]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][from]" class="col-md-4 control-label">Votre adresse mail *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][from]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][to]" class="col-md-4 control-label">Mail de votre ami *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][to]" required="">
                                    </div>
                                </div>
                                <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                
                                <div class="form-group">
                                    <label for="data[Contact][message]" class="col-md-4 control-label">Votre message</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" id="message" name="data[Contact][message]">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
    
    
        
        
                                                                    <div id="Contact" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1797-2-pieces-48m2-Paris-16e.html">
                            <input type="hidden" value="www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html" name="data[Contact][originemail]">
                            <input type="hidden" value="contact@aristimmo.com"  name="data[Contact][to]">
                            
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Contacter</h4>
                            </div>
                            <div class="modal-body">
                                
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre nom  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][nom]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre adresse mail  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="email"   placeholder=""  name="data[Contact][email]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre Téléphone  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][tel]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre ville  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][ville]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre message </label>
                                            <div class="col-xs-12 col-sm-8">
                                                <textarea name="data[Contact][message]" class="form-control" placeholder="" ></textarea>
                                            </div>
                                        </div>
                                                                        <div class="form-group">
                                        <div class="col-xs-12 col-sm-8 col-sm-push-4 control-label">
                                            Référence: 550
                                        </div>
                                    </div>
                                
                                <input type="hidden" name="data[idbien][]" value="1797" />
                            </div>
                            <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                             
                            <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreementmodal" />
    <label for="rgpd-agreementmodal">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreementmodal');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                        <div class="legals">
                            <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
      
    
    
        <div id="Visite" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="row modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title themTitle">Visite Virtuelle</h4>
                    </div>
                    <div class="modal-body text-center">
                                                    <iframe src="" width="800" height="500" frameborder="0" allowfullscreen></iframe>
                                            </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
    
    
    <div itemscope itemtype="https://schema.org/Product" class="containerDetail">
        
            <div class="themTitle">
                <h1 itemprop="name">2 pièces - 48m2 - Paris 16e</h1>
                <script type='application/ld+json'>
                {
                    "@context":"https://schema.org",
                    "@type":"BreadcrumbList",
                    "itemListElement":
                    [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                    "item": {
                                        "@id":"/",
                                        "name":"Accueil"
                                    }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                  "item": {
                                        "@id":"/1797-2-pieces-48m2-Paris-16e.html",
                                        "name":"2 pièces - 48m2 - Paris 16e"
                                    }
                                }
                                                                                                    ]
                }
                </script>
                <ol class="breadcrumb">
                                            <li><a href="/" >Accueil</a></li>
                                            <li><a href="/i/annonces/listing?ville=39914" >Paris</a></li>
                                            <li>2 pièces - 48m2 - Paris 16e</li>
                </ol>
            </div>
        
        <div class="containerDt">
            
                <div class="row">
                    <div class="col-md-12 backlist">
                        <div class="btn btn-default back pull-left"> < Retour</div>
                        
                                
                    
    
                    </div>
                </div>
            
            
            
    <div class="dt1 sliderV2">
        <div class="topContent">
            
                <div class="posTitle">
                    <div class="bienTitle">
                       
                            <h2>
                                Appartement
                                 48 m&sup2; - 
                                 2 pièces - 
                                Paris (75116)
                            </h2>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mainImg">
                            
                                <ul class="list-inline">
                                    
                                        <li>
                                                                                            Prix
                                                                                    </li><li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="598000">598 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                    </li>
                                        <li class="ref" itemprop="productID">
                                            Ref 550
                                        </li>
                                </ul>
                            
                            
                                                                                                                                                            
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                            
                        </div>
                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12 diapoDetail">
                            
        <div class="loader">
            <img src="images/loading.gif" alt="gallery loader"/>
        </div>
        <ul class="imageGallery  loading">
                                                            <li data-iterator="0"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_a04800d3d7e4871410e68bd633fe77f7.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_a04800d3d7e4871410e68bd633fe77f7.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_a04800d3d7e4871410e68bd633fe77f7.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" alt="" />
                    </li>
                                    <li data-iterator="1"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_6761c4388883f1ac308a98ac6f630eb9.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_6761c4388883f1ac308a98ac6f630eb9.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_6761c4388883f1ac308a98ac6f630eb9.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_6761c4388883f1ac308a98ac6f630eb9.jpg" alt="" />
                    </li>
                                    <li data-iterator="2"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_4447bd0d1ddd5ce86ecba8c81dca72c8.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_4447bd0d1ddd5ce86ecba8c81dca72c8.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_4447bd0d1ddd5ce86ecba8c81dca72c8.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_4447bd0d1ddd5ce86ecba8c81dca72c8.jpg" alt="" />
                    </li>
                                    <li data-iterator="3"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_d5f6089bedd536dc5cb1dce86ff3a6b9.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_d5f6089bedd536dc5cb1dce86ff3a6b9.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_d5f6089bedd536dc5cb1dce86ff3a6b9.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_d5f6089bedd536dc5cb1dce86ff3a6b9.jpg" alt="" />
                    </li>
                                    <li data-iterator="4"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_896929c52e459b96657b2e3155ddd3ff.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_896929c52e459b96657b2e3155ddd3ff.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_896929c52e459b96657b2e3155ddd3ff.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_896929c52e459b96657b2e3155ddd3ff.jpg" alt="" />
                    </li>
                                    <li data-iterator="5"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_265568aa29cc87b2d1b788d5a29c82f0.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_265568aa29cc87b2d1b788d5a29c82f0.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_265568aa29cc87b2d1b788d5a29c82f0.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_265568aa29cc87b2d1b788d5a29c82f0.jpg" alt="" />
                    </li>
                                    <li data-iterator="6"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_a3440acfc20e9e9ef0a23f72fbca6987.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_a3440acfc20e9e9ef0a23f72fbca6987.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_a3440acfc20e9e9ef0a23f72fbca6987.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_a3440acfc20e9e9ef0a23f72fbca6987.jpg" alt="" />
                    </li>
                                    <li data-iterator="7"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_1a9cec2538b361787f30c07a4fc6307b.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_1a9cec2538b361787f30c07a4fc6307b.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_1a9cec2538b361787f30c07a4fc6307b.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_1a9cec2538b361787f30c07a4fc6307b.jpg" alt="" />
                    </li>
                                    <li data-iterator="8"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_9ddf10343dfdc5c6b85e45617e89eb00.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_9ddf10343dfdc5c6b85e45617e89eb00.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_9ddf10343dfdc5c6b85e45617e89eb00.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e633bd966f6d4ae495dc090820df871c/photo_9ddf10343dfdc5c6b85e45617e89eb00.jpg" alt="" />
                    </li>
                                    </ul>
    

                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12">
                        <div class="actionDt">
                            


                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#Contact">
                                    <span class="pull-left txtBtn">Contacter</span> 
                                    <span class="icon-contactmail icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#sendFriend">
                                    <span class="pull-left txtBtn">Envoyer l'offre</span> 
                                    <span class="icon-partager icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" onclick="window.open('/admin/pdf.php?lang=fr&idann=1797&fiche_type=visite&pdf_orientation=P&pdf_template=1'); return false;">
                                    <span class="pull-left txtBtn">Imprimer</span> 
                                    <span class="icon-imprimer icons pull-right"></span>
                                </button>
                            
                            
                                                                    <button class="btn btn-dt" data-toggle="modal" data-target="#Calculette">
                                        <span class="pull-left txtBtn">Calculatrice</span> 
                                        <span class="icon-calculette icons pull-right"></span>
                                    </button>
                                                            
                        </div>
                    </div>
                </div>
            
        </div>
        <div class="mainContent">
            
                <div class="row">
                    <div class="col-md-12 elementDt">
                        <div class="themTitle pull-left mr30">Partager cette offre</div>
                        <div class="partage pull-left ml5" data-url="https://www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html">
                            <div id="facebook" class="rsvDt" data-url="https://www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html?lang=fr" data-title=" "></div>
                            <div id="twitter" class="rsvDt">
                                <div class="box">
                                    <span class="share icons-dt">
                                        <a href="https://twitter.com/intent/tweet?original_referer=https://www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html&ref_src=twsrc^tfw&text=vente 2 pièces - 48m2 - Paris 16e&tw_p=tweetbutton&url=https://www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html"></a>
                                    </span>
                                    <span class="count">+1</span>
                                </div>
                            </div>
                            <div id="googleplus" class="rsvDt" class="mr0" data-url="https://www.aristimmo.com/1797-2-pieces-48m2-Paris-16e.html" data-title=" "></div>
                        </div>
                    </div>
                </div>
            
            <div class="row">
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Description de l'offre</div>
                        <p itemprop="description">TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, découvrez cet appartement de deux pièces au 5ème et dernier étage par ascenseur d'une copropriété art déco. Il est composé d'une entrée avec rangements, d'un séjour, d'une chambre, d'une cuisine indépendante et d'une salle de bains avec WC. Exposition ouest sur la réception. Travaux à prévoir : espaces modulables. Une cave complète ce bien. 
Obligations loi ALUR: honoraires de 23 000 euros TTC à la charge de l'acquéreur inclus de le prix de présentation. La copropriété inclut 15 lots pour un montant annuel de la quote-part du budget prévisionnel des dépenses courantes de 3 120,92 euros.. Le syndicat de copropriété ne fait pas l'objet d'une procédure relative aux copropriétés. L'agence immobilière Aristimmo ne doit recevoir ni détenir d'autres fonds, effets ou valeurs que ceux représentatifs de sa rémunération ou de sa commission</p>
                    </div>
                
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle mb10">Descriptif du bien</div>
                        <div class="dataBien">
                            <ul id="dataTitle" class="nav nav-tabs" role="tablist">
                                                                    <li class="active"><a href="#infos">Général</a></li>
                                                                    <li class=""><a href="#details">Détails +</a></li>
                                                                    <li class=""><a href="#copro">Copropriété</a></li>
                                                                    <li class=""><a href="#infosfi">Financier</a></li>
                                                            </ul>
                                    <div id="dataContent" class="tab-content">
            
            
                                    <div class="tab-pane fade  active in" id="infos">
                                                    <p class="data">
                                <span class="termInfos">Code postal</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            75116                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface habitable (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            48 m²                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface loi Carrez (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            47.79                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de chambre(s)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de pièces</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Etage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            5                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Ascenseur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="details">
                                                    <p class="data">
                                <span class="termInfos">Nb de salle de bains</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            SEPAREE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Mode de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            GAZ                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de chauffage </span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            RADIATEUR                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Format de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            COLLECTIF                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Interphone</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cave</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Exposition</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUEST                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Année de construction</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1937                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="copro">
                                                    <p class="data">
                                <span class="termInfos">copropriété</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Lot n°</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            15                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">nombre de lots</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            18                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Quote Part annuelle des charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3 132 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">plan de sauvegarde</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">statut du syndic</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            pas de procédure en cours                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="infosfi">
                                                    <p class="data">
                                <span class="termInfos">Prix de vente honoraires TTC inclus</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            598 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos"><span class="smallinfos">Prix de vente honoraires TTC exclus</span></span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            575 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Honoraires TTC à la charge acquéreur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            4 %                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            261 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Taxe foncière annuelle</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            800 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                    
            
        </div>
    
                        </div>
                    </div>
                
            </div>
            
                            
            <div class="row">
                
                                                                                
                        <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Diagnostics de performance énergétique</div>
                        <div class="energy row text-center">
                            
                                <div class="col-sm-6 dpe mb10">
                                    <img src="/admin/dpe.php?lang=fr&amp;idann=1797" alt="DPE">
                                </div>
                            

                            
                                <div class="col-sm-6 ges">
                                    <img src="/admin/dpe.php?type=GES&amp;lang=fr&amp;idann=1797" alt="DPE">
                                </div>
                            
                        </div>
                    </div>
                                    
                                    <div class="col-md-6 elementDt">
                        
                            <div class="themTitle">Cette annonce vous intéresse ?</div>
                        
                        
                            <div class="row form-group">
                                
                                    <form name="myForm" class="form-horizontal" id="myForm" method="post" action="/1797-2-pieces-48m2-Paris-16e.html">
                                        
                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][nom]" class="form-control clearfix w100 center" placeholder="Votre nom *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="email" name="data[Contact][email]" class="form-control clearfix w100 center" placeholder="Votre adresse mail *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][tel]" class="form-control clearfix w100 center" placeholder="Votre Téléphone *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][ville]" class="form-control clearfix w100 center" placeholder="Votre ville *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-12">
                                                        <textarea name="data[Contact][message]" placeholder="Votre message " class="form-control" ></textarea>
                                                    </div>
                                                                                                                                        <input type="hidden" name="data[idbien][]" value="1797"/>
                                        
                                        <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                        
                                        <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreement" />
    <label for="rgpd-agreement">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreement');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                                        
                                            <div class="col-xs-12">
                                                <span class="oblig">* Champs obligatoires</span>
                                                <button type="submit" class="btn btn-default">Envoyer</button>
                                            </div>
                                        
                                    </form>
                                    <div class="legals">
                                        <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                                    </div>
                                
                            </div>
                        
                    </div>
                            </div>
            
                
                    <div class="row bigData">
                        <div class="col-sm-12">
                                                                        <section class="map-infos-city elementDt">
        <div class="title themTitle elementDtTitle">
            <h1>La ville de Paris (75116)</h1>
        </div>
        <div class="content">
            
                <div class="col-sm-12 map">
                    <div id="mapInfosCity" style="width:100%;height:300px;"></div>
                    <div class="map-buttons"></div>
                </div>
            
            
                <div class="col-sm-12 stat">
                    <div id="statsInfosCity"></div>
                </div>
            
        </div>
    </section>
    
    <style type="text/css">
        #statsInfosCity {
        }
        #statsInfosCity ul{
            margin:0; padding:0; list-style: inside none;
        }
        #statsInfosCity li{
            font-size: 0.85em;
            padding:1px;
            margin-bottom: 2px;
        }
        #statsInfosCity .title{
            font-weight: bold;
            margin-bottom:5px;
        }
        #statsInfosCity li.odd{
            background:#efefef;
        }
        #statsInfosCity li span{
            display:inline-block;
        }
        #statsInfosCity li .value{
            text-align:right;
            float:right;
            padding-right: 5px;
        }
        #mapInfosCity img {
            max-width: none;
        }
        .map-buttons{
            height:30px;
        }
        .map-buttons a{
            display: block;
            float: left;
            background: #e0e0e0;
            position: relative;
            width:30px; height:30px;
            margin:0 0.5px;
            text-align: center;
            font-size:8px;
        }
    </style>
    
                                                    </div>
                    </div>
                
            
        </div>
    </div>

         
                        
            
                            
            
                                                     <p class="small asterix mt10">* Honoraires d'Agences Inclus</p>
                        
            
        </div>
    </div>

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
         
        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
    <script type="text/javascript">
        $(document).ready(function(){
            $( ".back" ).click(function() {
                var url = "//www.aristimmo.com";
                $(location).attr('href',url);
            });
        });
    </script>

        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
        
                <script>
        
         /*********** bien config option geoloc *********** /
          *
          * @type Array|Array
          */
                                       var markers = {};
        var map;
        var isMapDragging;
        var idleSkipped;
        var visible;
        var translates = {};
        var geocoder;

        var colorMarkers;
         


        function getMap(Map){

            var map = Map.map;
            optionsCircle = {
                map: map,
                center: { lat : 48.850543379121 , lng:  2.2805425460039 },
                radius: 1500,
                strokeColor: '#B3D100',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#B3D100',
                fillOpacity: 0.35
            };

                                                //map.setCenter(new google.maps.LatLng(48.860000610, 2.344449997));
                    Map.setCenter(map, { lat: 48.850543379121, lng: 2.2805425460039 });
                                      addListeners(Map);
        }

        function addListeners(Map){
          Map.setMinZoom(Map.map, 12);
          callMarkers(Map);
          Map.addMapListener(Map.map, 'idle', function() {
            if (isMapDragging) {
              idleSkipped = true;
              return;
            }
            idleSkipped = false;
            callMarkers(Map);
          });
          Map.addMapListener(Map.map, 'dragstart', function () {
            isMapDragging = true;
          });
          Map.addMapListener(Map.map, 'dragend', function() {
            isMapDragging = false;
            if (idleSkipped === true) {
              callMarkers(Map);
              idleSkipped = false;
            }
          });
        }


        function callMarkers(Map){
            var bounds = Map.getBounds(Map.map);
            var boundsCoords = Map.getLatLngMinMax(bounds);
            var mxLt = boundsCoords.lat.max;
            var mnLt = boundsCoords.lat.min;
            var mxLg = boundsCoords.lng.max;
            var mnLg = boundsCoords.lng.min;
            $.get("/i/poi/getPoiBetween?minLat="+mnLt+"&maxLat="+mxLt+"&minLng="+mnLg+"&maxLng="+mxLg).done(function(jsonMarkers){
                if(jsonMarkers === null){
                    jsonMarkers = [];
                }
                cleanMarkers();
                addMarkers(jsonMarkers, Map);
            });
        }

        function cleanMarkers(){
            visible = [];
            for(key in markers){
                if(markers.hasOwnProperty(key)){
                    $.each(markers[key], function(k, marker){
                      var Map = marker.dataContainer.Map;
                        if(marker.dataContainer.map !== null && visible.indexOf(key)<0){
                            visible.push(key);
                        }
                        Map.removeMarker(Map.map, marker);
                        marker.dataContainer.map = null;
                    });
                    markers[key] = [];
                }
            }
        }
        
        function addMarkers(jsonMarkers, Map){
            $.each(jsonMarkers, function(){
              var markerData = this;
                if(!markers.hasOwnProperty(this.nom)){
                    markers[this.nom] = [];
                }
                var position = { lat: markerData.y, lng: markerData.x};
                var mapMarker = visible.indexOf(this.nom)>=0 ? Map.map : null;
                translates[this.nom] = this.translate;
              var markerOptions = {
                title: this.translate,
                icon: Map.createIcon('/i/poi/getIconMap?type='+this.nom, [32,54])
              };
              var marker = Map.createMapMarker(position, markerOptions, {
                map: mapMarker,
                Map: Map
              });
              if (visible.indexOf(this.nom)>=0) {
                Map.addMarker(Map.map, marker);
              }
                markers[this.nom].push(marker);
            });

                        addButtons();
        }
        

        function addButtons(){
            $(".map-buttons").empty();
            $.each(markers, function(k, mks){
                if(mks.length > 0){
                    var isVisible = (visible.indexOf(k) > -1);
                    addTypeButton(k, isVisible);
                }
            });
        }
        
            function showHideMarkers(type){
                if(markers.hasOwnProperty(type)){
                    for(var i = 0; i < markers[type].length; i++){
                       if(markers[type][i].dataContainer.map === null ){
                            markers[type][i].dataContainer.map = markers[type][i].dataContainer.Map.map;
                            markers[type][i].dataContainer.Map.addMarker(markers[type][i].dataContainer.map, markers[type][i]);
                           colorType(type, true);
                       } else {
                         markers[type][i].dataContainer.Map.removeMarker(markers[type][i].dataContainer.map, markers[type][i]);
                         markers[type][i].dataContainer.map = null;
                           colorType(type, false);
                       }
                    }
                }
            }
        
        
            function addTypeButton(type, isVisible){
                var bar = $(".map-buttons");
                var a = $("<a/>");
                var translate = translates[type];
                a.attr("class","map-button");
                a.attr("rel", type);
                a.attr("href","#");
                var img = $("<img/>");
                img.attr('src', '/i/poi/getIconBar?type='+type);
                img.attr('title', translate);
                img.attr('alt', type);
                if(isVisible){
                    img.css('background-color', '#'+colorMarkers[type]);
                }
                a.append(img);
                
    a.append('<span class="typeLink">'+translate+'</span>');

                bar.append(a);
            }
        
        
            function colorType(type, show){
                var color;
                if(show){
                    color = '#'+colorMarkers[type];
                } else {
                    color = 'transparent';
                }
                $('img[alt="'+type+'"]').css('background-color', color);
            }
        
        function app (){
            
            
                $.getScript('/i/json/getLbimapsLib', function () {
                    $.ajax('/i/json/getApiKeys?type=detail').done(function (apiKeys) {
                      var provider = 'jawg';
                    
                        var mapOptions = {
                                                zoom : 14 ,                                                 minZoom : 12 ,                                                 panControl : 1 ,                                                 scaleControl : 1 ,                                                 zoomControl : 1                                                 };
                    
                      var options = Object.assign({ }, mapOptions, {
                        mapContainer: '#mapInfosCity',
                        token: apiKeys[provider],
                        callback: window.getMap
                      });
                      lbimaps.callback(lbimaps.providers[provider])(options)
                    })
                });
            

            
                $(document).on("click",".map-button", function(){
                    var type = $(this).attr("rel");
                    showHideMarkers(type);
                    return false;
                });
                
                    $.get('/i/poi/getIconColors').done(function(result) {
                        colorMarkers = result;
                    });
                    $.get("/i/poi/getStats?idlocalite=9697",{},'json').done(function(stats){
                        
    var i = 0;
    var ul = $("<ul class='leftStat'/>");
    var ul2 = $("<ul class='rightStat'/>");
    $('#statsInfosCity').append('<div class="themTitle">Statistiques</div>');            
    $.each(stats, function(k, stat){
        var li = $("<li/>");
        if(i%2 === 0){
            li.addClass('even');
        } else {
            li.addClass('odd');
        }
        var unite = "%";
        if ((stat.translate).includes("Nombre")||stat.provider == 'api'){
           unite = "";
        }
        li.html('<span class="name">'+stat.translate+'</span><span class="value">'+stat.stat+' '+unite+'</span>');
        if (i < 7){
            ul.append(li);
        }
        else if (i > 6 && i < 14){
            $("#statsInfosCity").append(ul);
            ul2.append(li);
        }
        i++;
    });            
    $("#statsInfosCity").append(ul2);

                    });
                
            
        }
        
            app();
        

        
    </script>
    
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
    
            
<script>
jQuery(document).ready(function(){
            jQuery(document).on('submit', 'form', function(){                
                var myform = jQuery(this);
                var as = jQuery('.asbryw', myform);                
                if(as.length){                    
                    var dynamic = jQuery('.2', as);
                    var currentvalue = dynamic.val();
                    var origvalue = dynamic.attr('data-orig');
                    if(currentvalue === origvalue) {
                        var waitedvalue = dynamic.attr('data-wait');
                        dynamic.val(waitedvalue);
                    }
                }
                return true;
            });
        });
</script>


         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:28 GMT
- request:
    method: get
    uri: https://www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Apr 2020 19:26:28 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=7quhjs925g17nem6ergs84ujen; path=/
      - SRV=c26; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster2-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '16079'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr" class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <title>vente 2 pièces - 28m2 - Paris 10e</title>
        <meta name="description" content="vente appartement 2 pièces Paris : 2 pièces - 28m2 - Paris 10e">
        <meta name="author" content="">
        
                                                <meta name="generator" content="tryptyk" >
                                    <link  rel="canonical" href="https://www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html" >
                                    <meta property="generator" content="bObcat" >
                                    
        
            <link rel="icon" href="images/favicon.png" type="image/png" />
            <link rel="shortcut icon" href="images/favicon.png" type="image/png" />
        
        <base href="https://www.aristimmo.com/">

        
                    

        
    
        <meta property="og:title" content="2 pi&egrave;ces - 28m2 - Paris 10e" />
        <meta property="og:type" content="Website" />
        <meta property="og:url" content="https://www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html" />
        <meta property="og:image" content="https://www.aristimmo.com/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" />
    

        
                
        
                    
        
        
            <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Raleway:400,300,500,600,200,700.css" />
        
        
        
            <link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css" />
            <link rel="stylesheet" type="text/css" href="/css/build_ae4c1e4013717f3258e6bc12c3208432.css" />
        
         
        <link rel="stylesheet" type="text/css" href="/css/fonts/style.css" />
        <link rel="stylesheet" type="text/css" href="/css/expre.css" />
         
        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        
        
            <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-60151653-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
        
        
                    
    </head>

    <body id="pageDetail" class="">

            
        
            
                            
        
        



    
    
            
        




    

    



    
    
            
    
        
        
        




    

 
        
        


    
    
            
        




    

    



    
    
            
    
        
        
        




    

         
            <div class="headerTop ">
                <div class="container">
                    
                                            
                    
    <div class="row actionsTop">
        <div class="col-xs-12  p0 ">
            <ul class="nav nav-pills  pull-right ml10 ">
                
                                            <li class="drop-down">
                            <div class="pull-left actionLink">
                                choisir la<br>
                                <span class="upper">Langue</span>
                            </div>
                            <div class="pull-right backBadge">
                                <span class="triangle"></span>
                                <span class="flag flag_fr activeLang dropdown-toggle" data-toggle="dropdown"></span>
                                <ul class="dropdown-menu">
                                                                            <li>
                                            <div class="flag flag_fr flag_fr_faded hide right">
                                                <form method="post" action="//www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html">
                                                    <input type="hidden" name="lang" value="fr">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                            <li>
                                            <div class="flag flag_en flag_en_faded  right">
                                                <form method="post" action="//www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html">
                                                    <input type="hidden" name="lang" value="en">
                                                    <input type="submit" value=" ">
                                                </form>
                                            </div>
                                        </li>
                                                                    </ul>
                            </div>
                        </li>
                                    
            </ul>
        </div>
    </div>

                    
    <div class="row pricipalHead ">
        
       <div class="col-md-4"></div>
        <div class="row col-md-4 headLeft text-center">
     
                <a href="/" id="logoSite" ><img src="/images/logoSite.png" /></a>
            </div>
<div class="col-md-4"></div>
            <div class="col-md-12">
                <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left"><span class="icon-telephone icons fs-30"></span><span class="element">05 59 02 52 73</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left "><span class="icon-email icons fs-30 ml5"></span><span class="element mail"><a href="mailto:jstaffe@aristimmo.com">jstaffe@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-left">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">33 Rue du Commerce - 64360 Monein</span>
                        </div>
                    </div>
                </div>
            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center "><span class="icon-telephone icons fs-30"></span><span class="element">05 56 86 73 50</span> </div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center"><span class="icon-email icons fs-30 ml5"></span><span class="element mail">
                        <a href="mailto:contact-bordeaux@aristimmo.com">contact-bordeaux@aristimmo.com</a> </span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-center">
                            <span class="icon-localisation icons fs-30"></span>
                            <span class="element">68 Rue de la benauge - 33100 Bordeaux</span>
                        </div>
                    </div>
                </div>
        
        
        
                            <div class="col-md-4 col-sm-4 headRight">
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element">01 73 75 75 44</span><span class="icon-telephone icons fs-30"></span> </div>
                    </div>
                    <div class="row top text-center">
                       <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right"><span class="element mail"><a href="mailto:contact@aristimmo.com">contact@aristimmo.com</a> </span><span class="icon-email icons fs-30 ml5"></span></div>
                    </div>
                    <div class="row top text-center">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p0 text-right">
                       
                            <span class="element">32 rue la Bruyère - 75009 Paris</span>
                             <span class="icon-localisation icons fs-30"></span>
                        </div>
                    </div>
                </div>
                    
        </div>
    </div>

                </div>
            </div>
        
        <div class="container">
            
                    
                        <div class="row main mt20 mb20">
                            
                                                                <div class="col-md-3 pl0">
                                    <div class="fixed">
                                        
                                            <header>
                                                <nav class="navbar navbar-default" role="navigation">
                                                    <div class="container-fluid p0">
                                                      <div class="navbar-header">
                                                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                          <span class="icon-bar"></span>
                                                        </button>
                                                      </div>
                                                      <div class="navbar-collapse p0 collapse ">
                                                        <ul class="nav navbar-nav pull-right">
                                                                                                                                    
    <li class=" ">
            <a href="/" target="" >Accueil</a>
    
    </li>                                                                                                                                    
    <li class="has-dropdown ">
            <a href="/a-vendre/1" target="" >Nos biens</a>
    
            <ul class="dropdown dropdown-menu">
                                    
    <li class=" ">
            <a href="/vente-75/1" target="" >Vente 75</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-64/1" target="" >Vente 64</a>
    
    </li>                                    
    <li class=" ">
            <a href="/vente-33/1" target="" >Vente 33</a>
    
    </li>                    </ul>
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/dernieres-ventes/1" target="" >Derni&egrave;res ventes</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/alerte-email.html" target="" >Alerte E-mail</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/estimation.html" target="" >Estimation</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/qui-sommes-nous.html" target="" >Qui sommes nous ?</a>
    
    </li>                                                                                                                                    
    <li class=" ">
            <a href="/contact.html" target="" >Contact</a>
    
    </li>                                                                                                                    </ul>
                                                      </div>
                                                    </div>
                                                </nav>
                                            </header>
                                        
                                        
                                            <aside>
                                                <div class="Search">
                                                    
                                                    <div class="themTitle">
                                                        Votre <span class='orange_gras'>recherche</span>
                                                    </div>
                                                    
                                                    
                                                        <form method="post" class="containerSearch" action="/recherche/" role="form">
    
        <div class="form-group">
                                                                                                                                        <div class="">
                            <select name="data[Search][offredem]" id="inputOffredem" class="form-control selectpicker"   data-style="btn-selectpicker">
                <option value="0" selected="selected">
            Vente
        </option>
            <option value="10" >
            Vente Immobilier Professionnel
        </option>
            <option value="11" >
            Location Immobilier Professionnel
        </option>
            <option value="2" >
            Location
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idtype]" id="inputTypeBien" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Type de bien</option>
                <option value="1" >
            Maison
        </option>
            <option value="2" >
            Appartement
        </option>
            <option value="4" >
            Studio
        </option>
            <option value="5" >
            Terrain
        </option>
            <option value="7" >
            Viager
        </option>
            <option value="16" >
            Parking
        </option>
            <option value="23" >
            Commerce
        </option>
            <option value="25" >
            Villa
        </option>
            <option value="30" >
            Ferme
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][surf]" id="inputSurface" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Surface</option>
                <option value="0-50" >
            < 50
        </option>
            <option value="50-100" >
            50 - 100
        </option>
            <option value="100-150" >
            100 - 150
        </option>
            <option value="150-0" >
            > 150
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][pieces]" id="inputPieces" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Nombre de pièces</option>
                <option value="0-2" >
            < 2
        </option>
            <option value="2-3" >
            2 - 3
        </option>
            <option value="3-4" >
            3 - 4
        </option>
            <option value="4-5" >
            4 - 5
        </option>
            <option value="5-0" >
            > 5
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][idvillecode]" id="inputLocalisation" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Localisation</option>
                <option value="ville-1282" >
            33100 - Bordeaux
        </option>
            <option value="ville-1478" >
            33600 - Pessac
        </option>
            <option value="code-520" >
            64150 - Toutes localités
        </option>
            <option value="ville-1039" >
            64150 - Mourenx
        </option>
            <option value="ville-1088" >
            64150 - Pardies
        </option>
            <option value="ville-1330" >
            64170 - Serres-Sainte-Marie
        </option>
            <option value="ville-1056" >
            64190 - Navarrenx
        </option>
            <option value="ville-927" >
            64230 - Arbus
        </option>
            <option value="code-517" >
            64360 - Toutes localités
        </option>
            <option value="ville-903" >
            64360 - Lucq-de-Béarn
        </option>
            <option value="ville-904" >
            64360 - Monein
        </option>
            <option value="ville-913" >
            64360 - Cuqueron
        </option>
            <option value="ville-925" >
            64360 - Cardesse
        </option>
            <option value="ville-938" >
            64360 - Tarsacq
        </option>
            <option value="ville-1089" >
            64370 - Arthez-de-Béarn
        </option>
            <option value="ville-1" >
            Toute la ville - Paris
        </option>
            <option value="code-5" >
            75005 - Paris
        </option>
            <option value="code-9" >
            75009 - Paris
        </option>
            <option value="code-10" >
            75010 - Paris
        </option>
            <option value="code-13" >
            75013 - Paris
        </option>
            <option value="code-17" >
            75017 - Paris
        </option>
            <option value="code-19" >
            75019 - Paris
        </option>
            <option value="code-21" >
            75116 - Paris
        </option>
            <option value="ville-44" >
            93100 - Montreuil
        </option>
            <option value="ville-416" >
            93340 - Le Raincy
        </option>
            <option value="ville-84" >
            94000 - Créteil
        </option>
            <option value="ville-441" >
            94130 - Nogent-sur-Marne
        </option>
            <option value="ville-101" >
            94200 - Ivry-sur-Seine
        </option>
            <option value="ville-444" >
            94370 - Sucy-en-Brie
        </option>
            <option value="ville-15" >
            94400 - Vitry-sur-Seine
        </option>
            <option value="ville-39" >
            94700 - Maisons-Alfort
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <select name="data[Search][prix]" id="inputPrix" class="form-control selectpicker"   data-style="btn-selectpicker">
            <option value="void">Budget</option>
                <option value="0-100000" >
            < 100000 €
        </option>
            <option value="100000-150000" >
            100000 - 150000 €
        </option>
            <option value="150000-200000" >
            150000 - 200000 €
        </option>
            <option value="200000-300000" >
            200000 - 300000 €
        </option>
            <option value="300000-0" >
            > 300000 €
        </option>
    </select>

                        </div>
                                                                                                                                                                            <div class="">
                            <input type="text" name="data[Search][NO_DOSSIER]" placeholder="Référence" id="inputRef" class="form-control">
                        </div>
                                                                                                                                                                            <div class="btnSearch ">
                            <button type="submit" class="btn btn-default">Rechercher</button>
                        </div>
                                                        </div>
    
</form>                                                    
                                                </div>
                                            </aside>
                                        
                                    </div>
                                </div>
                                                            
                            <section class="content  col-md-9 p0 "><!-- principal content  -->
                                
                                
                                    
                                        <div class="row"></div>
                                    
                                
                                
    
    

        
            
        
            
        
        
        
        
    
            
        
        
        
        
        
        

   
    
            
                        <div id="Calculette" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                  <div class="row modal-content">
                    <form class="form-horizontal" role="form" action="" onsubmit="return calculateCredit(this);">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title themTitle">Calculette</h4>
                        </div>
                        <div class="modal-body">
                            
                                <div class="form-group">
                                    <label for="montant" class="col-md-4 control-label">Montant *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="montant" id="montant" value="299000">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="taux" class="col-md-4 control-label">Taux (%) * </label>
                                    <div class="col-md-8">
                                        <input type="number" step="0.01" min="0" class="form-control" name="taux" id="taux" required="">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="apport" class="col-md-4 control-label">Apport </label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control numericInput" name="apport" id="apport">
                                    </div>
                                </div>
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label">Durée (Années) * </label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control numericInput" name="duree" id="duree" required="">
                                    </div>
                                </div>
                            
                            
                            
                                <div class="form-group">
                                    <label for="duree" class="col-md-4 control-label text-left">Mensualités </label>
                                    <div class="col-md-8 text-left">
                                      <span class="result"> </span>
                                    </div>
                                </div>
                            
                        </div>
                        <div class="modal-footer">
                            <label class="small obligChamp pull-left">*Champs obligatoires</label>
                            <button type="submit" class="btn btn-default right">Calculer</button>
                        </div>
                    </form>
                  </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
                     
    
    
            
            <div id="sendFriend" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1693-2-pieces-28m2-Paris-10e.html">
                            <input type="hidden" name="action" value="sendFriend">
                            <input type="hidden" name="data[Contact][url]" value="https://www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Partager</h4>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="data[Contact][nom]" class="col-md-4 control-label">Votre nom *</label>
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="data[Contact][nom]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][from]" class="col-md-4 control-label">Votre adresse mail *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][from]" required="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="data[Contact][to]" class="col-md-4 control-label">Mail de votre ami *</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" name="data[Contact][to]" required="">
                                    </div>
                                </div>
                                <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                
                                <div class="form-group">
                                    <label for="data[Contact][message]" class="col-md-4 control-label">Votre message</label>
                                    <div class="col-md-8">
                                      <input type="text" class="form-control" id="message" name="data[Contact][message]">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
    
    
        
        
                                                                    <div id="Contact" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="row modal-content">
                        <form class="form-horizontal" role="form" method="post" action="/1693-2-pieces-28m2-Paris-10e.html">
                            <input type="hidden" value="www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html" name="data[Contact][originemail]">
                            <input type="hidden" value="contact@aristimmo.com"  name="data[Contact][to]">
                            
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title themTitle">Contacter</h4>
                            </div>
                            <div class="modal-body">
                                
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre nom  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][nom]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre adresse mail  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="email"   placeholder=""  name="data[Contact][email]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre Téléphone  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][tel]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre ville  *</label>
                                            <div class="col-xs-12 col-sm-8">
                                                <input type="text"   placeholder=""  name="data[Contact][ville]" class="form-control" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                            </div>
                                        </div>
                                                                            <div class="form-group">
                                            <label  class="col-xs-12 col-sm-4 control-label">Votre message </label>
                                            <div class="col-xs-12 col-sm-8">
                                                <textarea name="data[Contact][message]" class="form-control" placeholder="" ></textarea>
                                            </div>
                                        </div>
                                                                        <div class="form-group">
                                        <div class="col-xs-12 col-sm-8 col-sm-push-4 control-label">
                                            Référence: 485
                                        </div>
                                    </div>
                                
                                <input type="hidden" name="data[idbien][]" value="1693" />
                            </div>
                            <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                             
                            <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreementmodal" />
    <label for="rgpd-agreementmodal">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreementmodal');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                            <div class="modal-footer">
                                <label class="small obligChamp pull-left">*Champs obligatoires</label>
                                <button type="submit" class="btn btn-default right">Envoyer</button>
                            </div>
                        </form>
                        <div class="legals">
                            <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                        </div>
                    </div><!-- /.modal-content -->
                </div><!-- /.modal-dialog -->
            </div>
        
      
    
    
        <div id="Visite" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="row modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title themTitle">Visite Virtuelle</h4>
                    </div>
                    <div class="modal-body text-center">
                                                    <iframe src="" width="800" height="500" frameborder="0" allowfullscreen></iframe>
                                            </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
    
    
    <div itemscope itemtype="https://schema.org/Product" class="containerDetail">
        
            <div class="themTitle">
                <h1 itemprop="name">2 pièces - 28m2 - Paris 10e</h1>
                <script type='application/ld+json'>
                {
                    "@context":"https://schema.org",
                    "@type":"BreadcrumbList",
                    "itemListElement":
                    [
                                                                                                                                    {
                                "@type":"ListItem",
                                "position":1,
                                    "item": {
                                        "@id":"/",
                                        "name":"Accueil"
                                    }
                                },
                                                                                                                                            {
                                "@type":"ListItem",
                                "position":2,
                                  "item": {
                                        "@id":"/1693-2-pieces-28m2-Paris-10e.html",
                                        "name":"2 pièces - 28m2 - Paris 10e"
                                    }
                                }
                                                                                                    ]
                }
                </script>
                <ol class="breadcrumb">
                                            <li><a href="/" >Accueil</a></li>
                                            <li><a href="/i/annonces/listing?ville=39910" >Paris</a></li>
                                            <li>2 pièces - 28m2 - Paris 10e</li>
                </ol>
            </div>
        
        <div class="containerDt">
            
                <div class="row">
                    <div class="col-md-12 backlist">
                        <div class="btn btn-default back pull-left"> < Retour</div>
                        
                                
                    
    
                    </div>
                </div>
            
            
            
    <div class="dt1 sliderV2">
        <div class="topContent">
            
                <div class="posTitle">
                    <div class="bienTitle">
                       
                            <h2>
                                Appartement
                                 28.39 m&sup2; - 
                                 2 pièces - 
                                Paris (75010)
                            </h2>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mainImg">
                            
                                <ul class="list-inline">
                                    
                                        <li>
                                                                                            Prix
                                                                                    </li><li><span class="triangle pull-left"></span> 
                                                                                                                                                                                                <span itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                                        <span itemprop="price" content="299000">299 000</span> <span itemprop="priceCurrency">€</span>
                                                    </span>
                                                                                                
                                                                                        
                    <span class="small"> HAI*</span>                
                        
                                                
                                                                                    </li>
                                        <li class="ref" itemprop="productID">
                                            Ref 485
                                        </li>
                                </ul>
                            
                            
                                                                                                                    <span class="StatutBien exclusif">Exclusivité</span>                                        
                                                            <span class="StatutBien baissePrix2">Coup de coeur</span>
                                              
                        
        
                            
                        </div>
                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12 diapoDetail">
                            
        <div class="loader">
            <img src="images/loading.gif" alt="gallery loader"/>
        </div>
        <ul class="imageGallery  loading">
                                                            <li data-iterator="0"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" alt="" />
                    </li>
                                    <li data-iterator="1"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_2989ee902805f037d159c123b3572cda.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_2989ee902805f037d159c123b3572cda.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_2989ee902805f037d159c123b3572cda.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_2989ee902805f037d159c123b3572cda.jpg" alt="" />
                    </li>
                                    <li data-iterator="2"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_aa2113f9bb23eee4d1f03bf6fb14b0f9.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_aa2113f9bb23eee4d1f03bf6fb14b0f9.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_aa2113f9bb23eee4d1f03bf6fb14b0f9.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_aa2113f9bb23eee4d1f03bf6fb14b0f9.jpg" alt="" />
                    </li>
                                    <li data-iterator="3"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_2f27f240cc5f101616234e1e83b4fd78.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_2f27f240cc5f101616234e1e83b4fd78.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_2f27f240cc5f101616234e1e83b4fd78.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_2f27f240cc5f101616234e1e83b4fd78.jpg" alt="" />
                    </li>
                                    <li data-iterator="4"
                        data-thumb="//aristimmo.staticlbi.com/200x200/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_a1d4e8ba1b54552a8f440af630749bf3.jpg"
                        data-src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_a1d4e8ba1b54552a8f440af630749bf3.jpg"
                        data-src-forthumb="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_a1d4e8ba1b54552a8f440af630749bf3.jpg">
                        <img src="//aristimmo.staticlbi.com/original/images/biens/1/e73bf34864ebec425acccbda74d49592/photo_a1d4e8ba1b54552a8f440af630749bf3.jpg" alt="" />
                    </li>
                                    </ul>
    

                    </div>
                </div>
            
            
                <div class="row">
                    <div class="col-md-12">
                        <div class="actionDt">
                            


                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#Contact">
                                    <span class="pull-left txtBtn">Contacter</span> 
                                    <span class="icon-contactmail icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" data-toggle="modal" data-target="#sendFriend">
                                    <span class="pull-left txtBtn">Envoyer l'offre</span> 
                                    <span class="icon-partager icons pull-right"></span>
                                </button>
                            
                            
                                <button class="btn btn-dt" onclick="window.open('/admin/pdf.php?lang=fr&idann=1693&fiche_type=visite&pdf_orientation=P&pdf_template=1'); return false;">
                                    <span class="pull-left txtBtn">Imprimer</span> 
                                    <span class="icon-imprimer icons pull-right"></span>
                                </button>
                            
                            
                                                                    <button class="btn btn-dt" data-toggle="modal" data-target="#Calculette">
                                        <span class="pull-left txtBtn">Calculatrice</span> 
                                        <span class="icon-calculette icons pull-right"></span>
                                    </button>
                                                            
                        </div>
                    </div>
                </div>
            
        </div>
        <div class="mainContent">
            
                <div class="row">
                    <div class="col-md-12 elementDt">
                        <div class="themTitle pull-left mr30">Partager cette offre</div>
                        <div class="partage pull-left ml5" data-url="https://www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html">
                            <div id="facebook" class="rsvDt" data-url="https://www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html?lang=fr" data-title=" "></div>
                            <div id="twitter" class="rsvDt">
                                <div class="box">
                                    <span class="share icons-dt">
                                        <a href="https://twitter.com/intent/tweet?original_referer=https://www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html&ref_src=twsrc^tfw&text=vente 2 pièces - 28m2 - Paris 10e&tw_p=tweetbutton&url=https://www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html"></a>
                                    </span>
                                    <span class="count">+1</span>
                                </div>
                            </div>
                            <div id="googleplus" class="rsvDt" class="mr0" data-url="https://www.aristimmo.com/1693-2-pieces-28m2-Paris-10e.html" data-title=" "></div>
                        </div>
                    </div>
                </div>
            
            <div class="row">
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Description de l'offre</div>
                        <p itemprop="description">Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien entretenu, venez visiter ce deux pièces refait à neuf par architecte situé au 2ème étage. Entièrement au calme sur une vaste cour, l'appartement se compose d'un séjour avec cuisine américaine, d'une chambre, d'une salle de douche et d'un WC indépendant. Obligations loi ALUR: honoraires de 10 000 euros TTC à la charge de l'acquéreur inclus de le prix de présentation. La copropriété inclut 41 lots pour un montant annuel de la quote-part du budget prévisionnel des dépenses courantes de 1 316 €. Le syndicat de copropriété ne fait pas l'objet d'une procédure relative aux copropriétés. L'agence immobilière Aristimmo ne doit recevoir ni détenir d'autres fonds, effets ou valeurs que ceux représentatifs de sa rémunération ou de sa commission </p>
                    </div>
                
                
                    
                    <div class="col-md-6 elementDt">
                    
                        <div class="themTitle mb10">Descriptif du bien</div>
                        <div class="dataBien">
                            <ul id="dataTitle" class="nav nav-tabs" role="tablist">
                                                                    <li class="active"><a href="#infos">Général</a></li>
                                                                    <li class=""><a href="#details">Détails +</a></li>
                                                                    <li class=""><a href="#copro">Copropriété</a></li>
                                                                    <li class=""><a href="#infosfi">Financier</a></li>
                                                            </ul>
                                    <div id="dataContent" class="tab-content">
            
            
                                    <div class="tab-pane fade  active in" id="infos">
                                                    <p class="data">
                                <span class="termInfos">Code postal</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            75010                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface habitable (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            28,39 m²                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Surface loi Carrez (m²)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            27.81                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de chambre(s)</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Nombre de pièces</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Etage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            2                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Ascenseur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Vue</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            cour                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="details">
                                                    <p class="data">
                                <span class="termInfos">Nb de salle d'eau</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cuisine</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            AMERICAINE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Mode de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            ELECTRIQUE                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Type de chauffage </span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            RADIATEUR                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Format de chauffage</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            INDIVIDUEL                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Interphone</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NON                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Cave</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Exposition</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            NORD-EST                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Année de construction</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1900                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="copro">
                                                    <p class="data">
                                <span class="termInfos">copropriété</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            OUI                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Lot n°</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            30                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">nombre de lots</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            41                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Quote Part annuelle des charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            1 316 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                                    <div class="tab-pane fade " id="infosfi">
                                                    <p class="data">
                                <span class="termInfos">Prix de vente honoraires TTC inclus</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            299 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos"><span class="smallinfos">Prix de vente honoraires TTC exclus</span></span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            289 000 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Honoraires TTC à la charge acquéreur</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            3,46 %                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Charges</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            110 €                                                                    </span>
                            </p>
                            <hr>
                                                    <p class="data">
                                <span class="termInfos">Taxe foncière annuelle</span>
                                                                                                                                                                        <span class="valueInfos "
                                    >
                                                                            380 €                                                                    </span>
                            </p>
                            <hr>
                                            </div>
                    
            
        </div>
    
                        </div>
                    </div>
                
            </div>
            
                            
            <div class="row">
                
                                                                                
                        <div class="col-md-6 elementDt">
                    
                        <div class="themTitle">Diagnostics de performance énergétique</div>
                        <div class="energy row text-center">
                            
                                <div class="col-sm-6 dpe mb10">
                                    <img src="/admin/dpe.php?lang=fr&amp;idann=1693" alt="DPE">
                                </div>
                            

                            
                                <div class="col-sm-6 ges">
                                    <img src="/admin/dpe.php?type=GES&amp;lang=fr&amp;idann=1693" alt="DPE">
                                </div>
                            
                        </div>
                    </div>
                                    
                                    <div class="col-md-6 elementDt">
                        
                            <div class="themTitle">Cette annonce vous intéresse ?</div>
                        
                        
                            <div class="row form-group">
                                
                                    <form name="myForm" class="form-horizontal" id="myForm" method="post" action="/1693-2-pieces-28m2-Paris-10e.html">
                                        
                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][nom]" class="form-control clearfix w100 center" placeholder="Votre nom *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="email" name="data[Contact][email]" class="form-control clearfix w100 center" placeholder="Votre adresse mail *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][tel]" class="form-control clearfix w100 center" placeholder="Votre Téléphone *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-6">
                                                        <input type="text" name="data[Contact][ville]" class="form-control clearfix w100 center" placeholder="Votre ville *" required oninvalid="setCustomValidity('Veuillez renseigner ce champs')" oninput="setCustomValidity('')">
                                                    </div>
                                                                                                                                                                                                <div class="col-sm-12">
                                                        <textarea name="data[Contact][message]" placeholder="Votre message " class="form-control" ></textarea>
                                                    </div>
                                                                                                                                        <input type="hidden" name="data[idbien][]" value="1693"/>
                                        
                                        <div class="asbryw" style="display:none">
<input type="text" name="as_dyna" data-wait="1fcc4381a413aa10dea21bbfc2b17dd3" data-orig="4bbae76a539221de3f33d21f182dd466" class="as_field as_field-2 2" value="4bbae76a539221de3f33d21f182dd466"/>
<input type="text" name="as_stat" class="as_field as_field-1 1" value=""/>
</div>

                                        
                                        <div class="rgpd-checkbox">
    <input type="checkbox" name="rgpd-agreement" id="rgpd-agreement" />
    <label for="rgpd-agreement">J'accepte les conditions d'utilisation des données (*)</label>
</div>
<script>
  'use strict';

  (function () {
    var agreement = document.getElementById('rgpd-agreement');
    var form = agreement.closest('form');
    form.addEventListener('submit', function (event) {
      if (!agreement.checked) {
        event.preventDefault();
        alert("Veuillez accepter l'utilisation de vos données pour continuer.");
        return false;
      } else {
        return true;
      }
    });
  })();
</script>                                        
                                            <div class="col-xs-12">
                                                <span class="oblig">* Champs obligatoires</span>
                                                <button type="submit" class="btn btn-default">Envoyer</button>
                                            </div>
                                        
                                    </form>
                                    <div class="legals">
                                        <p class="rgpd-legals">* : Les informations recueillies sur ce formulaire sont enregistrées dans un fichier informatisé par La Boite Immo pour la gestion de la clientèle/prospects de ADMIN.
Elles sont conservées jusqu'à demande de suppression et sont destinées à ADMIN.
Conformément à la loi « informatique et libertés », vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en contactant ADMIN.
Nous vous informons de l’existence de la liste d'opposition au démarchage téléphonique « Bloctel », sur laquelle vous pouvez vous inscrire ici : https://conso.bloctel.fr/</p>                                    </div>
                                
                            </div>
                        
                    </div>
                            </div>
            
                
                    <div class="row bigData">
                        <div class="col-sm-12">
                                                                        <section class="map-infos-city elementDt">
        <div class="title themTitle elementDtTitle">
            <h1>La ville de Paris (75010)</h1>
        </div>
        <div class="content">
            
                <div class="col-sm-12 map">
                    <div id="mapInfosCity" style="width:100%;height:300px;"></div>
                    <div class="map-buttons"></div>
                </div>
            
            
                <div class="col-sm-12 stat">
                    <div id="statsInfosCity"></div>
                </div>
            
        </div>
    </section>
    
    <style type="text/css">
        #statsInfosCity {
        }
        #statsInfosCity ul{
            margin:0; padding:0; list-style: inside none;
        }
        #statsInfosCity li{
            font-size: 0.85em;
            padding:1px;
            margin-bottom: 2px;
        }
        #statsInfosCity .title{
            font-weight: bold;
            margin-bottom:5px;
        }
        #statsInfosCity li.odd{
            background:#efefef;
        }
        #statsInfosCity li span{
            display:inline-block;
        }
        #statsInfosCity li .value{
            text-align:right;
            float:right;
            padding-right: 5px;
        }
        #mapInfosCity img {
            max-width: none;
        }
        .map-buttons{
            height:30px;
        }
        .map-buttons a{
            display: block;
            float: left;
            background: #e0e0e0;
            position: relative;
            width:30px; height:30px;
            margin:0 0.5px;
            text-align: center;
            font-size:8px;
        }
    </style>
    
                                                    </div>
                    </div>
                
            
        </div>
    </div>

         
                        
            
                            
            
                                                     <p class="small asterix mt10">* Honoraires d'Agences Inclus</p>
                        
            
        </div>
    </div>

                            </section><!-- Fin principal content  -->
                        </div>
                    
                                    </div><!-- Fin container  -->
        
         
        
        
            <section class="jumbotron bandeau">
                <div class="container">
                    <div class="row">
                        
                            
                        
                        
                            <div class="col-md-12 col-lg-12 innerColumns">
                                <div class="row">
                                    
                                            <!-- block par default carousel coup de coeur -->
    
        <section class="allCC">
            <h1>Notre s&eacute;lection de <span class='orange_gras'>coups de coeur</span></h1>
            <div class="controle-slideCC">
                <a class="left carousel-control" href="#carouselCC" data-slide="prev">
                    <span class="icon-flechegauche fs-19"></span>
                </a>
                <a class="right carousel-control" href="#carouselCC" data-slide="next">
                    <span class="icon-flechedroite fs-19"></span>
                </a>
            </div>
            <div id="carouselCC" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    <ul class="item active list-inline coupCoeur">
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1838-Maison-335m2-Le-Raincy.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/6b489986dccf4a8803fca83e424c2d98/original/photo_71a38c4eed3f1a5734dff180b3c783c8.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1838-Maison-335m2-Le-Raincy.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">920 000 €</span>
                                    </h3>
                                    <p>EXCLUSIVITÉ. Boulevard du Midi en plein coeur du RAINCY- Au coeur d'un quartier résidentiel à deux pas des ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1963-2-pieces-51m2-terrasse-IVRY.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/ce0a8359b408b7d86c74dc3da3649993/original/photo_67d23af33426726ae6cbf979b11793b2.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1963-2-pieces-51m2-terrasse-IVRY.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">335 000 €</span>
                                    </h3>
                                    <p>HAUT IVRY - A 5 minutes du métro Pierre et Marie Curie, et à 15 minutes à pieds de Paris, découvrez cet app...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1722-Maison-187m2-Paris-13e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/af6bee905ae1c9ce7c90a8a25690c06c/original/photo_2df87513372a1fe76c4d200ada8ef672.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1722-Maison-187m2-Paris-13e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 850 000 €</span>
                                    </h3>
                                    <p>BIBLIOTHÈQUE FRANÇOIS MITTÉRAND - A deux pas des transports et des commerces, venez découvrir cette maison ...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/3f08d40269305f2bce8497aea61f86bf/original/photo_2e96f07a2daa288053c8da60f8207fef.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1981-Maison-6-pieces-150m2-Terrain-1200m2.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 190 000 €</span>
                                    </h3>
                                    <p>Vitry sur Seine, au Centre-Ville, à proximité immédiate de tous commerces et commodités, à 1km/10min du RER...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1992-6-pieces-178-64m2-Paris-9e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/45558163b8b37284bbcedf45b93384bc/original/photo_2ad9290447516c4379242bd280e0db15.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1992-6-pieces-178-64m2-Paris-9e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">2 390 000 €</span>
                                    </h3>
                                    <p>NOTRE-DAME-DE-LORETTE. Dans une copropriété 1830 et au premier étage surelevé, découvrez cet appartement fa...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/a6d232c3da627b5870d5d3d5818ef817/original/9ec356def56bc36dd12291e74c97bc80.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1507-4-pieces-avec-terrasse-85-m2-Paris-5e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">1 130 000 €</span>
                                    </h3>
                                    <p>Boulevard Saint Germain - Pont de Sully&nbsp;Dans un bel immeuble ancien bien entretenu, venez visiter ce 3...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1693-2-pieces-28m2-Paris-10e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e73bf34864ebec425acccbda74d49592/original/photo_cf6dd7d6df9c85456d6a3f82ec46a4af.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1693-2-pieces-28m2-Paris-10e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">299 000 €</span>
                                    </h3>
                                    <p>Boulevard de La Villette - A deux pas de la station de métro Stalingrad et dans un immeuble ancien bien ent...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1797-2-pieces-48m2-Paris-16e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/e633bd966f6d4ae495dc090820df871c/original/photo_a04800d3d7e4871410e68bd633fe77f7.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1797-2-pieces-48m2-Paris-16e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">598 000 €</span>
                                    </h3>
                                    <p>TROCADÉRO - PASSY. A proximité immédiate des transports, des commerces, et au calme d'une rue préservée, dé...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1699-Loft-82m2-Montreuil.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/f36b677dbaab6acb95f6d5a7fbfbf2c4/original/photo_8c90f04fe61751aa256995bf4273a45a.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1699-Loft-82m2-Montreuil.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Appartement</span>
                                        <span class="pull-right">572 000 €</span>
                                    </h3>
                                    <p>ROBESPIERRE. A trois minutes du métro et à l'abri d'une cour arborée, découvrez ce duplex de charme entière...</p>
                                </div>
                            </li>
                         
                            <li class="col-md-4 col-sm-6 col-xs-12 blockCC">
                                
                                    <a href="/1676-Maison-183m2-Paris-19e.html" class="imgCC" ><img src="//aristimmo.staticlbi.com/300x300/images/biens/1/786be83ba6648179bc0ad257d9ef013a/original/d56dbaeff28a293b719d9ce4d24dbf13.jpg" width="300" /></a>
                                
                                
                                    <h2 class="well well-sm"><a href="/1676-Maison-183m2-Paris-19e.html">Voir +</a></h2>
                                
                                <div class="contentCC">
                                    <h3>
                                        <span class="pull-left">Maison</span>
                                        <span class="pull-right">1 490 000 €</span>
                                    </h3>
                                    <p>A deux pas du Canal et nich&eacute; au fond d'une vaste cour, d&eacute;couvrez cet ancien atelier de confec...</p>
                                </div>
                            </li>
                                            </ul>
                </div>
            </div>
        </section>
    
                                    
                                </div>
                            </div>
                        
                    </div>
                    
                        
                    
                </div>
            </section>
        
        
        
         
        
        
    <footer>
        
            <div class="jumbotron mainFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter1">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Nous sommes adhérents</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <img src="/images/SNPI.png" />
                                    </div>
                                
                            </div>
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter2">
								<iframe src="https://www.opinionsystem.fr/company_rating.php?company_id=5266&rating_key=b71c86eb38d2487f311f39aabe856420&language=fre&text_color=000000" scrolling="no" frameborder="0" style="border: none; overflow: hidden; width: 180px; height: 22px;" allowTransparency="true"></iframe>
							
							</div>
         
                        
                        
                            <div class="col-xs-12 col-md-4 elementFtr espaceFooter4">
                                
                                    <div class="titleFtr">
                                        <span class="border"> </span>
                                        <h3>Se connecter</h3>
                                        <span class="border"> </span>
                                    </div>
                                
                                
                                    <div class="contentFtr">
                                        <button class="espacePro" onclick="window.open('/admin/espace_proprietaire.php'); return false;">
                                            <span class="icon-espaceproprietaire pull-left mr5"></span>
                                            Espace propriétaire
                                        </button>
                                    </div>
                                
                            </div>
                        
                    </div>
                </div>
            </div>
        
        
            <div class="jumbotron lastFtr">
                <div class="container">
                    <div class="row">
                        
                            <div class="col-md-4 ">
                                <p>&copy; 2020 | Tous droits réservés | Traduction powered by Google <br/>
                                    <a href="/plan-du-site.html" >Plan du site</a>
                                    - <a href="/i/redac/legals" >Mentions légales</a>
                                                                            - <a href="/i/redac/honoraires" >Nos honoraires</a>
                                                                        - <a href="/nos-liens.html" >Liens</a>
                                    - <a href="/admin/" target="_blank" >Admin</a>

                                                                    </p>
                            </div>
                        
                        
                            <div class="col-md-4">
                                <div class="iconResp">
                                    <img src="/images/responsive.png" class="imgResp" alt="Compatible multi Support"><p class="contentResp">Site internet compatible multi-supports,<br/>un seul site adaptable à tous les types d'écrans.</p>
                                </div>
                            </div>
                        
                        
                            <div class="col-md-4 text-center">
                                <img src="/images/logoLBI.png" alt="La boite immo" />
                            </div>
                        
                    </div>
                </div>
            </div>
        
    </footer>

    
        
        
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" ></script>
            <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" ></script>
        
        
        
            <script src="/js/build_de4b0297bbe4c528d758e6f6fb5cddd5.js" ></script>
             
        
         
    <script type="text/javascript">
        $(document).ready(function(){
            $( ".back" ).click(function() {
                var url = "//www.aristimmo.com";
                $(location).attr('href',url);
            });
        });
    </script>

        
         
        
         
       <script type="text/javascript" src="/js/build_tryptik.theme.js" ></script> 
    
        
                <script>
        
         /*********** bien config option geoloc *********** /
          *
          * @type Array|Array
          */
                                       var markers = {};
        var map;
        var isMapDragging;
        var idleSkipped;
        var visible;
        var translates = {};
        var geocoder;

        var colorMarkers;
         


        function getMap(Map){

            var map = Map.map;
            optionsCircle = {
                map: map,
                center: { lat : 48.894544621771 , lng:  2.3642153293655 },
                radius: 1500,
                strokeColor: '#B3D100',
                strokeOpacity: 0.8,
                strokeWeight: 1,
                fillColor: '#B3D100',
                fillOpacity: 0.35
            };

                                                //map.setCenter(new google.maps.LatLng(48.860000610, 2.344449997));
                    Map.setCenter(map, { lat: 48.894544621771, lng: 2.3642153293655 });
                                      addListeners(Map);
        }

        function addListeners(Map){
          Map.setMinZoom(Map.map, 12);
          callMarkers(Map);
          Map.addMapListener(Map.map, 'idle', function() {
            if (isMapDragging) {
              idleSkipped = true;
              return;
            }
            idleSkipped = false;
            callMarkers(Map);
          });
          Map.addMapListener(Map.map, 'dragstart', function () {
            isMapDragging = true;
          });
          Map.addMapListener(Map.map, 'dragend', function() {
            isMapDragging = false;
            if (idleSkipped === true) {
              callMarkers(Map);
              idleSkipped = false;
            }
          });
        }


        function callMarkers(Map){
            var bounds = Map.getBounds(Map.map);
            var boundsCoords = Map.getLatLngMinMax(bounds);
            var mxLt = boundsCoords.lat.max;
            var mnLt = boundsCoords.lat.min;
            var mxLg = boundsCoords.lng.max;
            var mnLg = boundsCoords.lng.min;
            $.get("/i/poi/getPoiBetween?minLat="+mnLt+"&maxLat="+mxLt+"&minLng="+mnLg+"&maxLng="+mxLg).done(function(jsonMarkers){
                if(jsonMarkers === null){
                    jsonMarkers = [];
                }
                cleanMarkers();
                addMarkers(jsonMarkers, Map);
            });
        }

        function cleanMarkers(){
            visible = [];
            for(key in markers){
                if(markers.hasOwnProperty(key)){
                    $.each(markers[key], function(k, marker){
                      var Map = marker.dataContainer.Map;
                        if(marker.dataContainer.map !== null && visible.indexOf(key)<0){
                            visible.push(key);
                        }
                        Map.removeMarker(Map.map, marker);
                        marker.dataContainer.map = null;
                    });
                    markers[key] = [];
                }
            }
        }
        
        function addMarkers(jsonMarkers, Map){
            $.each(jsonMarkers, function(){
              var markerData = this;
                if(!markers.hasOwnProperty(this.nom)){
                    markers[this.nom] = [];
                }
                var position = { lat: markerData.y, lng: markerData.x};
                var mapMarker = visible.indexOf(this.nom)>=0 ? Map.map : null;
                translates[this.nom] = this.translate;
              var markerOptions = {
                title: this.translate,
                icon: Map.createIcon('/i/poi/getIconMap?type='+this.nom, [32,54])
              };
              var marker = Map.createMapMarker(position, markerOptions, {
                map: mapMarker,
                Map: Map
              });
              if (visible.indexOf(this.nom)>=0) {
                Map.addMarker(Map.map, marker);
              }
                markers[this.nom].push(marker);
            });

                        addButtons();
        }
        

        function addButtons(){
            $(".map-buttons").empty();
            $.each(markers, function(k, mks){
                if(mks.length > 0){
                    var isVisible = (visible.indexOf(k) > -1);
                    addTypeButton(k, isVisible);
                }
            });
        }
        
            function showHideMarkers(type){
                if(markers.hasOwnProperty(type)){
                    for(var i = 0; i < markers[type].length; i++){
                       if(markers[type][i].dataContainer.map === null ){
                            markers[type][i].dataContainer.map = markers[type][i].dataContainer.Map.map;
                            markers[type][i].dataContainer.Map.addMarker(markers[type][i].dataContainer.map, markers[type][i]);
                           colorType(type, true);
                       } else {
                         markers[type][i].dataContainer.Map.removeMarker(markers[type][i].dataContainer.map, markers[type][i]);
                         markers[type][i].dataContainer.map = null;
                           colorType(type, false);
                       }
                    }
                }
            }
        
        
            function addTypeButton(type, isVisible){
                var bar = $(".map-buttons");
                var a = $("<a/>");
                var translate = translates[type];
                a.attr("class","map-button");
                a.attr("rel", type);
                a.attr("href","#");
                var img = $("<img/>");
                img.attr('src', '/i/poi/getIconBar?type='+type);
                img.attr('title', translate);
                img.attr('alt', type);
                if(isVisible){
                    img.css('background-color', '#'+colorMarkers[type]);
                }
                a.append(img);
                
    a.append('<span class="typeLink">'+translate+'</span>');

                bar.append(a);
            }
        
        
            function colorType(type, show){
                var color;
                if(show){
                    color = '#'+colorMarkers[type];
                } else {
                    color = 'transparent';
                }
                $('img[alt="'+type+'"]').css('background-color', color);
            }
        
        function app (){
            
            
                $.getScript('/i/json/getLbimapsLib', function () {
                    $.ajax('/i/json/getApiKeys?type=detail').done(function (apiKeys) {
                      var provider = 'jawg';
                    
                        var mapOptions = {
                                                zoom : 14 ,                                                 minZoom : 12 ,                                                 panControl : 1 ,                                                 scaleControl : 1 ,                                                 zoomControl : 1                                                 };
                    
                      var options = Object.assign({ }, mapOptions, {
                        mapContainer: '#mapInfosCity',
                        token: apiKeys[provider],
                        callback: window.getMap
                      });
                      lbimaps.callback(lbimaps.providers[provider])(options)
                    })
                });
            

            
                $(document).on("click",".map-button", function(){
                    var type = $(this).attr("rel");
                    showHideMarkers(type);
                    return false;
                });
                
                    $.get('/i/poi/getIconColors').done(function(result) {
                        colorMarkers = result;
                    });
                    $.get("/i/poi/getStats?idlocalite=8991",{},'json').done(function(stats){
                        
    var i = 0;
    var ul = $("<ul class='leftStat'/>");
    var ul2 = $("<ul class='rightStat'/>");
    $('#statsInfosCity').append('<div class="themTitle">Statistiques</div>');            
    $.each(stats, function(k, stat){
        var li = $("<li/>");
        if(i%2 === 0){
            li.addClass('even');
        } else {
            li.addClass('odd');
        }
        var unite = "%";
        if ((stat.translate).includes("Nombre")||stat.provider == 'api'){
           unite = "";
        }
        li.html('<span class="name">'+stat.translate+'</span><span class="value">'+stat.stat+' '+unite+'</span>');
        if (i < 7){
            ul.append(li);
        }
        else if (i > 6 && i < 14){
            $("#statsInfosCity").append(ul);
            ul2.append(li);
        }
        i++;
    });            
    $("#statsInfosCity").append(ul2);

                    });
                
            
        }
        
            app();
        

        
    </script>
    
          <!-- à utiliser si on veut ajouter un fichier js spécifique au site -->    
        
    
            
<script>
jQuery(document).ready(function(){
            jQuery(document).on('submit', 'form', function(){                
                var myform = jQuery(this);
                var as = jQuery('.asbryw', myform);                
                if(as.length){                    
                    var dynamic = jQuery('.2', as);
                    var currentvalue = dynamic.val();
                    var origvalue = dynamic.attr('data-orig');
                    if(currentvalue === origvalue) {
                        var waitedvalue = dynamic.attr('data-wait');
                        dynamic.val(waitedvalue);
                    }
                }
                return true;
            });
        });
</script>


         
                    

        
        
    </body>
</html>
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:26:28 GMT
recorded_with: VCR 5.1.0
