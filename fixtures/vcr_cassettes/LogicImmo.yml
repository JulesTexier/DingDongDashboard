---
http_interactions:
- request:
    method: get
    uri: https://www.logic-immo.com/vente-immobilier-paris-75,100_1/options/groupprptypesids=1,2,6,7,12,15/order=update_date_desc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.241
      Loadtime:
      - D=349818 t=1585763433100101
      Server:
      - elb
      Cache-Control:
      - max-age=109
      Expires:
      - Wed, 01 Apr 2020 17:52:22 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:33 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:33 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-6ca3ffaf-1a45-3767-239b-e8bc82444aec.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Wed, 01 Apr 2020 15:26:15 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.245
      Loadtime:
      - D=246990 t=1585763433630987
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Wed, 01 Apr 2020 17:55:33 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:33 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:33 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-d6bd8025-d9d3-883b-54f3-9576f08dcc16.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Cache-Control:
      - public, max-age=300
      Last-Modified:
      - Wed, 01 Apr 2020 15:26:15 GMT
      Expires:
      - Wed, 01 Apr 2020 17:55:34 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.115
      Loadtime:
      - D=216842 t=1585763434084221
      Server:
      - elb
      Date:
      - Wed, 01 Apr 2020 17:50:34 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:34 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-31d0acaa-f2d3-1782-cd90-c7784e629d94.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Wed, 01 Apr 2020 15:26:15 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.88
      Loadtime:
      - D=256874 t=1585763434491540
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Wed, 01 Apr 2020 17:55:34 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:34 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:34 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-7dbe51b0-36de-9d9b-f56b-45d1ac6b0ccc.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Wed, 01 Apr 2020 15:26:08 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.134
      Loadtime:
      - D=239059 t=1585763435093571
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Wed, 01 Apr 2020 17:55:35 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:35 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+Cgo8aHRtbCBsYW5nPSJmciI+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlLGNocm9tZT0xIj4KICAgIDxtZXRhIGh0dHAtZXF1aXY9InJlZnJlc2giIGNvbnRlbnQ9IjIxMDAiLz4KICAgIDxtZXRhIG5hbWU9InNpdGUiIGNvbnRlbnQ9ImxvZ2ljLWltbW8uY29tIi8+CgoKICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9iYWJlbC1wb2x5ZmlsbC83LjIuNS9wb2x5ZmlsbC5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcmVhY3QvMTYuMTEuMC91bWQvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcmVhY3QtZG9tLzE2LjExLjAvdW1kL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2pzb24iIGNsYXNzPSJDb29raWVDb25zZW50UGFyYW0iPgogICAgewogICAgInVybCIgOiAiaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQvdmVuZG9yL2Nvb2tpZS1jb25zZW50LW1vZHVsZSIsCiAgICAicHVzaFRoZXNoaWVsZCI6IHRydWUsCiAgICAicHVzaFRob3IiOiB0cnVlCiAgICB9CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC92ZW5kb3IvY29va2llLWNvbnNlbnQtbW9kdWxlL2Rpc3QvZGlzdC5taW4uanMiCiAgICAgICAgICAgIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+CgogICAgPHRpdGxlPiBBcHBhcnRlbWVudCAyIHBpw6hjZXMgNjcgbcKyIMOgIHZlbmRyZSBQYXJpcyAxMWUgNzUwMTEsIDc3NSAwMDAg4oKsIC0gTG9naWMtaW1tby5jb208L3RpdGxlPjxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJMb2Z0IDIgcGkmYW1wO2VncmF2ZTtjZXMgZGUgNjYuODdtJmFtcDtzdXAyOyB8IFJ1ZSBkdSBDaGVtaW4gVmVydCB8IFBhcmlzIDExIExpYmVya2V5cyB2b3VzIHByb3Bvc2UgY2UgbG9mdCAuLi4gIEFwcGFydGVtZW50IDIgcGnDqGNlcyDDoCB2ZW5kcmUgw6AgUGFyaXMgMTFlIDc1MDExIj4KPG1ldGEgbmFtZT0idHdpdHRlcjp0aXRsZSIgY29udGVudD0iQW5ub25jZSB2ZW50ZSAgQXBwYXJ0ZW1lbnQgMiBwacOoY2VzIFBhcmlzIDExZSA3NTAxMSA3NzUgMDAwIOKCrCA2NyBtwrIgLSBMb2dpYy1pbW1vLmNvbSI+CjxtZXRhIG5hbWU9InR3aXR0ZXI6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkxvZnQgMiBwaSZhbXA7ZWdyYXZlO2NlcyBkZSA2Ni44N20mYW1wO3N1cDI7IHwgUnVlIGR1IENoZW1pbiBWZXJ0IHwgUGFyaXMgMTEgTGliZXJrZXlzIHZvdXMgcHJvcG9zZSBjZSBsb2Z0IC4uLiI+CjxtZXRhIG5hbWU9InR3aXR0ZXI6Y2FyZCIgY29udGVudD0ic3VtbWFyeV9sYXJnZV9pbWFnZSI+CjxtZXRhIG5hbWU9InR3aXR0ZXI6c2l0ZSIgY29udGVudD0iQExvZ2ljaW1tbyI+CjxtZXRhIG5hbWU9InR3aXR0ZXI6Y3JlYXRvciIgY29udGVudD0iQExvZ2ljaW1tbyI+CjxtZXRhIG5hbWU9InR3aXR0ZXI6aW1hZ2U6c3JjIiBjb250ZW50PSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtNDQweDMzMC83ZGIvYi9iNTRlZmFmMC05YzUxLTRmM2EtYWZmMi00MzNjOTEzMGJhZDMuanBnIj4KPG1ldGEgbmFtZT0icm9ib3RzIiBjb250ZW50PSJpbmRleCwgZm9sbG93LCBub3lkaXIsIG5vb2RwLCBhbGwiPgo8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ubyI+CjxtZXRhIG5hbWU9Imdvb2dsZSIgY29udGVudD0ibm9zaXRlbGlua3NzZWFyY2hib3giPgogICAgPG1ldGEgcHJvcGVydHk9ImZiOnBhZ2VfaWQiIGNvbnRlbnQ9IjM2ODA2NTQ2MzExMiIvPgogICAgPG1ldGEgcHJvcGVydHk9ImZiOmFwcF9pZCIgY29udGVudD0iMTk4NjIzNDMwNDQyIi8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1pdHVuZXMtYXBwIiBjb250ZW50PSJhcHAtaWQ9MzcyMzk2Mzg3Ij4KCgogICAgPGxpbmsgaHJlZj0iL2Fzc2V0L2Nzcy9wYWdlcy9saXN0aW5nL2RldGFpbC5jc3M/dGFnPTIwLjAuMSIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CjxsaW5rIGhyZWY9Ii9hc3NldC1jb3JhaWwvY3NzL3ZpZXcuY3NzP3RhZz0yMC4wLjEiIG1lZGlhPSJzY3JlZW4iIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgo8bGluayBocmVmPSIvYXNzZXQtY29yYWlsL2Nzcy9qcXVlcnktcGx1Z2lucy9zbGljay5jc3M/dGFnPTIwLjAuMSIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CjxsaW5rIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS03ZGJlNTFiMC0zNmRlLTlkOWItZjU2Yi00NWQxYWM2YjBjY2MuaHRtIiByZWw9ImNhbm9uaWNhbCI+CjxsaW5rIGhyZWY9Ii9hc3NldC1jb3JhaWwvaW1nL2Zhdmljb24ucG5nP3RhZz0yMC4wLjEiIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIj4KPGxpbmsgaHJlZj0iL2Fzc2V0LWNvcmFpbC9pbWcvZmF2aWNvbi5pY28/dGFnPTIwLjAuMSIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIHZhciBfZ2xvYmFsRW52ID0gJ3Byb2R1Y3Rpb24nOwo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kZXJuaXpyLmN1c3RvbS44Nzg1NC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGRlZmVyPSJkZWZlciIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9jb25zb2xlbG9nLm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LTEuMTIuNC5taW4uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1taWdyYXRlLTEuMi4xLm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvYm9vdHN0cmFwLm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LXBsYWNlaG9sZGVyLW1hc3Rlci9qcXVlcnkucGxhY2Vob2xkZXIubWluLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8IS0tW2lmIGx0IElFIDldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBtaW5pZnlfZGlzYWJsZWQ9IjEiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvcmVzcG9uZC5taW4uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CjwhLS1baWYgbHQgSUUgOV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIG1pbmlmeV9kaXNhYmxlZD0iMSIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9odG1sNXNoaXYuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL2NvbW1vbi9jb29raWUtbm90aWNlLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvbW9kdWxlcy9qcXVlcnktbGljb20tbG9jYWxpdGllcy1jb29raWUuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1saW5ramFtbWVyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvbW9kdWxlcy9uYXYuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBkZWZlcj0iZGVmZXIiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LWpjYXJvdXNlbGxpdGUtMS44LjEwLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9qcXVlcnktbGF6eWxvYWQuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1pbWdsaXF1aWQtbWluLTAuOS45NDQuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBkZWZlcj0iZGVmZXIiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItYmFyL1NlcnZpY2UvdXNlci1iYXIuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvU2VydmljZS9PZmZlclNlbGVjdGlvbkNvbGxlY3Rpb25TZXJ2aWNlLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL0ZhY3RvcnkvTWFwcGVyRmFjdG9yeS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9GYWN0b3J5L1N0b3JhZ2VBZGFwdGVyRmFjdG9yeS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9BZGFwdGVyL0Jyb3dzZXJTdG9yYWdlQWRhcHRlci5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9BZGFwdGVyL0xvY2FsU3RvcmFnZUFkYXB0ZXIuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvTWFwcGVyL1VzZXJQb3NpdGlvbk1hcHBlci5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9NYXBwZXIvTG9jYWxpdHlNYXBwZXIuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvTWFwcGVyL1NlbGVjdGlvbk1hcHBlci5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9NYXBwZXIvVXJsTWFwcGVyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL01hcHBlci9Vc2VyTWFwcGVyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL0NvbGxlY3Rpb24vT2ZmZXJTZWxlY3Rpb25Db2xsZWN0aW9uLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL0NvbGxlY3Rpb24vTG9jYWxpdHlDb2xsZWN0aW9uLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL01vZGVsL09mZmVyU2VsZWN0aW9uTW9kZWwuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvTW9kZWwvVXJsTW9kZWwuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvTW9kZWwvVXNlck1vZGVsLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL01vZGVsL1VzZXJQb3NpdGlvbk1vZGVsLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvU2VydmljZS9OdW1iZXJGb3JtYXR0ZXJTZXJ2aWNlLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvbW9kdWxlcy9qcXVlcnktYWxlcnQtbW9kYWwuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1oaWRlbWF4bGlzdGl0ZW0uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL3RvZ2dsZS1kaXNwbGF5LmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvLi4vYXNzZXQvdmVuZG9yL2Zvcm1hdHRlci5qcy9kaXN0L2pxdWVyeS5mb3JtYXR0ZXIubWluLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS8uLi9hc3NldC9qcy9sYXlvdXQvb2ZmZXIvcmVjb21tYW5kZWQtb2ZmZXJzLWNhcnJvdXNlbC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGRlZmVyPSJkZWZlciIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC92ZW5kb3IvbWFwLWNvbXBvbmVudC9kaXN0L21hcENtbS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9qcXVlcnktY3JlYXRlaHRtbC0xLjAuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL25hdmlnYXRpb24uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL29mZmVyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvbW9kdWxlcy9zaGFyZS1ib3guanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1jb2xvcmJveC0xLjQuMTUuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1iYXNlNjQuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL3BvcGluLXZpZXdlci1yaGlub3YuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL3ZpZXdlci1yaGlub3YuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC8uLi9hc3NldC92ZW5kb3IvaGFtbWVyanMvaGFtbWVyLm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL21vZHVsZXMvcGljdHVyZS1jYXJyb3VzZWwuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC8uLi9hc3NldC9qcy92ZW5kb3JzL2pxdWVyeS1hdXRvY2xlYXItMS4xLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvLi4vYXNzZXQvanMvbGliL2pxdWVyeS1qcXRyYW5zZm9ybS0xLjEuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2pzL3BhcnRpYWwvc2ltdWxhdGlvbi1jcmVkaXQvcG9waW4tc2ltdWxhdGlvbi1jcmVkaXQuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL3BvbHlmaWxscy1qc05hdGlmLm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LWVuaGFuY2VkLWNvb2tpZS0xLjAuMC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vanMvbGliL2pxdWVyeS12YWxpZGVhc3ktbGljb20uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS5tYXNrZWRpbnB1dC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LW1kNS0xLjQuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS5zaGEyNTYubWluLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9jb2xvcmJveC1tYXN0ZXIvanF1ZXJ5LmNvbG9yYm94LW1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvZGF2aWRqYnJhZHNoYXctaWZyYW1lLXJlc2l6ZXIvanMvaWZyYW1lUmVzaXplci5taW4uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL2Zvcm1Db250cm9sLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvT2JzZXJ2ZXIvUGhvbmVJbnB1dE9ic2VydmVyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvU3ViamVjdC9OdW1iZXJTdWJqZWN0LmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvbW9kdWxlcy9jb21wYW55X3JhdGluZ3MuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tYWluLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC92ZW5kb3IvbW9iaWxlLWRldGVjdC9tb2JpbGUtZGV0ZWN0Lm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQvdmVuZG9yL3Nhcy1tb2R1bGUvZGlzdC5lczUuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2pzL2xheW91dC9yZWRpcmVjdF9tb2JpbGUuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0L2pzL2xheW91dC9jb21tb24vc2FzLWZ1bmN0aW9ucy5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL21vZHVsZXMveGl0aS9zZWFyY2gtZW5naW5lLXRyYWNrZXIuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tLy9qcy9zcmMvYXBwbGljYXRpb24uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tLy9qcy9jb25maWcvc2FzL2NvbmZpZy5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vL2pzL3NyYy9jb250cm9sbGVycy9wYWdlLWNvbnRyb2xsZXIuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tLy9qcy9zcmMvZGlzcGF0Y2hlcnMvcGFnZS1kaXNwYXRjaGVyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0PiAgICA8c2NyaXB0PgogICAgICAgIGZ1bmN0aW9uIGNyZWF0RE9NRWxlbWVudCAob2JqKSB7CiAgICAgICAgICAgIGxldCBET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvYmpbJ25hbWUnXSk7CiAgICAgICAgICAgIGRlbGV0ZSBvYmpbJ25hbWUnXTsKICAgICAgICAgICAgZm9yKGNvbnN0IFtrZXksdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHsKICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdjaGlsZCcpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgRE9NRWxlbWVudC5hcHBlbmRDaGlsZChjcmVhdERPTUVsZW1lbnQodmFsdWUpKTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIERPTUVsZW1lbnRba2V5XSA9IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBET01FbGVtZW50OwogICAgICAgIH0KICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgQ29va2llQ29uc2VudC5oaXRPbkNvbnNlbnQoZnVuY3Rpb24gKCl7CiAgICAgICAgICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07CiAgICAgICAgICAgICAgICB2YXIgc2NyaXB0ID0gY3JlYXRET01FbGVtZW50KHsgJ25hbWUnOiAnc2NyaXB0JywgJ3R5cGUnOiAndGV4dC9qYXZhc2NyaXB0JywgJ3NyYyc6ICdodHRwczovL3N0YXRpYy5jcml0ZW8ubmV0L2pzL2xkL2xkLmpzJyB9KTsKICAgICAgICAgICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICAgICAgICAgICAgfSwgNCk7CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KICAgIAogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBoaXRSZW1haWxNZSgidmlldyIpOwogICAgICAgICAgICAKICAgICAgICB9KTsKICAgIDwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy90cnkuYWJ0YXN0eS5jb20vMWViOTA0YjlhYTRlMjBhMTMyMmM5ODJjNDlkOTE1MDMuanMiPjwvc2NyaXB0PgoKICAgIDwvaGVhZD4KPGJvZHkgY2xhc3M9ImNvbnRyb2xsZXItb2ZmZXIgYWN0aW9uLXZpZXcgbWFwcGVyLXNhbGUgcm91dGUtb2ZmZXItc2FsZSB0ZW1wbGF0ZS1vZmZlci12aWV3Ij4KCjxkaXYgaWQ9InFhX2ltYWlsX3N0YXR1cyIgaGlkZGVuPjwvZGl2Pgo8ZGl2IGlkPSJxYV9pbWFpbF9tZXNzYWdlIiBoaWRkZW4+PC9kaXY+Cgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0idW5pdmVyc2UiIHZhbHVlPSIxIi8+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJhY3Rpb24iIHZhbHVlPSJ2aWV3Ii8+CgoKPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImFwcGxpY2F0aW9uQmFzZVBhdGgiIG5hbWU9ImFwcGxpY2F0aW9uQmFzZVBhdGgiCiAgICAgICB2YWx1ZT0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vIi8+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJncmFwaGljc0Jhc2VQYXRoIiBuYW1lPSJncmFwaGljc0Jhc2VQYXRoIgogICAgICAgdmFsdWU9Ii9hc3NldC1jb3JhaWwiLz4KPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9Im15QWNjb3VudEJhc2VQYXRoIiBuYW1lPSJteUFjY291bnRCYXNlUGF0aCIKICAgICAgIHZhbHVlPSJodHRwOi8vbW9uY29tcHRlLmxvZ2ljLWltbW8uY29tIi8+Cgo8IS0tIGNmIGNvbW1lbnRhaXJlIHBsdXMgaGF1dCAtLT4KPGhlYWRlciBpZD0ianMtaGVhZGVyLXdyYXBwZXIiIGNsYXNzPSJoZWFkZXItd3JhcHBlciI+CjwhLS0gY2YgY29tbWVudGFpcmUgcGx1cyBoYXV0IC0tPgogICAgPGRpdiBpZD0ianMtaGVhZGVyLWNvbnRhaW5lciIgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPHNwYW4gaWQ9ImJ1dHRvbk1lbnUiIGNsYXNzPSJidXJnZXJNZW51IGpzLW9wZW5OYXZiYXIiPjwvc3Bhbj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgaGVhZGVyIj4KICAgICAgICAgICAgPGRpdiBpZD0ibG9nbyIgY2xhc3M9ImNvbC14cy00IGNvbC1sZy0zIGZpdmUgY29sdW1ucyBhbHBoYSI+CiAgICAgICAgICAgICAgICA8c3BhbiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5M2QzY3ViRzluYVdNdGFXMXRieTVqYjIwdiIgdGl0bGU9IkFubm9uY2VzIGltbW9iaWxpw6hyZXMgTG9naWMtSW1tbyIgY2xhc3M9ImxvZ28td2Vic2l0ZSBqYW1tZXIiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICczMycsICdIZWFkZXI6OkxpZW5fTG9nbycsICdOJyk7Ij48aW1nIHNyYz0iL2Fzc2V0LWNvcmFpbC9pbWcvbG9nb19saWNvbV9ibHVlLnBuZyIgYWx0PSJBbm5vbmNlcyBpbW1vYmlsacOocmVzIExvZ2ljLUltbW8iID48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9ImhlYWRlclBvbmRlcmluZyIgY2xhc3M9ImNvbC14cy0yIGNvbC1sZy01Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTYgY29sLWxnLTQgZWxldmVuIGNvbHVtbnMgb21lZ2EgaGVhZGVyUmlnaHQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVwb3RBbm5vbmNlIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGllbkRBIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMzMnLCAnSGVhZGVyOjpWZW5kcmVfTW9uX0JpZW4nLCAnTicpOyIgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUiIHRpdGxlPSJWZW5kcmUgbW9uIGJpZW4iPlZlbmRyZSBtb24gYmllbjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxpZ24tcmlnaHQiIGlkPSJsb2dpbl9iYXIiIAogICAgICAgICAgICAgICAgICAgIGRhdGEtdXNlcmJhci1hamF4dXJsPSIvYWpheC11c2VyLWJhciIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS11c2VyYmFyLWFqYXhsb2dpbnVybD0iL2FqYXhMb2dpbiIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS11c2VyYmFyLWFqYXhwcm9jZXNzbG9naW51cmw9Ii9hamF4UHJvY2Vzc0xvZ2luIiAKICAgICAgICAgICAgICAgICAgICBkYXRhLXVzZXJiYXItYWpheGZvcmdldHRlbnBhc3N3b3JkdXJsPSIvYWpheEZvcmdvdHRlblBhc3N3b3JkIiAKICAgICAgICAgICAgICAgICAgICBkYXRhLXVzZXJiYXItYWpheGFkZHRvc2VsZWN0aW9udXJsPSIvb2ZmZXIvYWRkLXRvLXNlbGVjdGlvbiIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS11c2VyYmFyLWFqYXhyZW1vdmVmcm9tc2VsZWN0aW9udXJsPSIvb2ZmZXIvcmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdXNlcmJhci1wb3BpbmFkZHRvc2VsZWN0aW9uY29uZmlybXVybD0iL3BvcGluYWNxdWVyZXVycGx1cyI+CiAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxuYXYgaWQ9Im1lbnUiPgogICAgPGRpdiBpZD0ianMtbWVudS1jb250YWluZXIiIGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBwcmltYXJ5LW5hdiI+CiAgICAgICAgICAgIDxkaXYgaWQ9ImpzLW1lbnUtY29sIiBjbGFzcz0iY29sLXhzLTEyIHByaW1hcnktbmF2LWNvbCI+CiAgICAgICAgICAgICAgICA8dWwgaWQ9Im1lbnVfY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im1lbnVfMSIgb25tb3VzZW92ZXI9InNob3dNZW51KDEpIiBvbm1vdXNlb3V0PSJoaWRlTWVudSgxKSIgY2xhc3M9ImNvbHVtbnMgIGN1cnJlbnQtbGkgICI+PGEgaWQ9Im92ZXJfaXRlbV8xIiBjbGFzcz0iY3VycmVudC1pdGVtIiBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS8iIGRhdGEtbnVtPSIxIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6TGllbl9BY2hldGVyJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkFjaGV0ZXI8L3NwYW4+PC9hPgo8L2xpPjxsaSBpZD0ibWVudV8yIiBvbm1vdXNlb3Zlcj0ic2hvd01lbnUoMikiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDIpIiBjbGFzcz0iY29sdW1ucyAgIj48YSBpZD0ib3Zlcl9pdGVtXzIiIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2xvY2F0aW9uLWltbW9iaWxpZXIucGhwIiBkYXRhLW51bT0iMiIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkxpZW5fTG91ZXImIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+TG91ZXI8L3NwYW4+PC9hPgo8dWwgaWQ9InN1Ym1lbnVfMiIgY2xhc3M9InN1Ym1lbnUgIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IC04M3B4Ij48bGkgY2xhc3M9ImNvbHVtbnMgIj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9sb2NhdGlvbi1pbW1vYmlsaWVyLnBocCIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkxpZW5fTG91ZXJfLV9Mb2NhdGlvbiYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5Mb2NhdGlvbjwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9ImNvbHVtbnMgIj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9yZWNoZXJjaGUtY29sb2NhdGlvbi5waHAiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpMaWVuX0xvdWVyXy1fQ29sb2NhdGlvbiYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5Db2xvY2F0aW9uPC9zcGFuPjwvYT48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxhIGhyZWY9Imh0dHA6Ly92YWNhbmNlcy5sb2dpYy1pbW1vLmNvbS8iIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpMaWVuX0xvdWVyXy1fTG9jYXRpb25fZGVfdmFjYW5jZXMmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+TG9jYXRpb24gZGUgdmFjYW5jZXM8L3NwYW4+PC9hPjwvbGk+PC91bD48L2xpPjxsaSBpZD0ibWVudV8zIiBvbm1vdXNlb3Zlcj0ic2hvd01lbnUoMykiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDMpIiBjbGFzcz0iY29sdW1ucyAgIj48YSBpZD0ib3Zlcl9pdGVtXzMiIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2VzdGltYXRpb24taW1tb2JpbGllcmUiIGRhdGEtbnVtPSIzIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6VmVuZHJlJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkVzdGltZXI8L3NwYW4+PC9hPgo8YSBpZD0ib3Zlcl9pdGVtXzMiIGhyZWY9Ii9lc3RpbWF0aW9uLWltbW9iaWxpZXJlIiBkYXRhLW51bT0iMyIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzMzJywgJ0hlYWRlcjo6VmVuZHJlJywgJ04nKTsiIGNsYXNzPSIiPjxkaXYgY2xhc3M9ImVzdGltZXJUb29sdGlwIj5HcmF0dWl0PC9kaXY+PC9hPjx1bCBpZD0ic3VibWVudV8zIiBjbGFzcz0ic3VibWVudSAiIHN0eWxlPSJtYXJnaW4tbGVmdDogLTEwNXB4Ij48bGkgY2xhc3M9ImNvbHVtbnMgIj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9lc3RpbWF0aW9uLWltbW9iaWxpZXJlIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6VmVuZHJlXy1fQ29uZmllel92b3RyZV9iaWVuJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkVzdGltZXIgdm90cmUgYmllbjwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9ImNvbHVtbnMgIj48YSBocmVmPSJodHRwczovL3d3dy5sYWNvdGVpbW1vLmNvbS9wcml4LWRlLWwtaW1tby92ZW50ZS9wYXlzL2ZyYW5jZS5odG0iIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6TGllbl9WZW5kcmVfLV9EZXBvdF9kX2Fubm9uY2VzJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPlByaXggZGUgbCYjMDM5O2ltbW9iaWxpZXI8L3NwYW4+PC9hPjwvbGk+PC91bD48L2xpPjxsaSBpZD0ibWVudV80IiBvbm1vdXNlb3Zlcj0ic2hvd01lbnUoNCkiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDQpIiBjbGFzcz0iY29sdW1ucyAgIj48YSBpZD0ib3Zlcl9pdGVtXzQiIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2V4Y2x1c2l2aXRlIiBkYXRhLW51bT0iNCIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkV4Y2x1c2l2aXRlcyYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5FeGNsdXNpdml0w6lzPC9zcGFuPjwvYT4KPC9saT48bGkgaWQ9Im1lbnVfNSIgb25tb3VzZW92ZXI9InNob3dNZW51KDUpIiBvbm1vdXNlb3V0PSJoaWRlTWVudSg1KSIgY2xhc3M9ImNvbHVtbnMgY29sb3ItZ3JleSAiPjxhIGlkPSJvdmVyX2l0ZW1fNSIgaHJlZj0iaHR0cDovL2NvbnN0cnVpcmUubG9naWMtaW1tby5jb20vIiBkYXRhLW51bT0iNSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkNvbnN0cnVpcmUmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+Q29uc3RydWlyZTwvc3Bhbj48L2E+Cjx1bCBpZD0ic3VibWVudV81IiBjbGFzcz0ic3VibWVudSAiIHN0eWxlPSJtYXJnaW4tbGVmdDogLTEzN3B4Ij48bGkgY2xhc3M9ImNvbHVtbnMgIj48YSBocmVmPSJodHRwOi8vY29uc3RydWlyZS5sb2dpYy1pbW1vLmNvbS8iIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpDb25zdHJ1aXJlXy1fTm9zX2Fubm9uY2VzJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPk5vcyBhbm5vbmNlczwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9ImNvbHVtbnMgIj48YSBocmVmPSJodHRwOi8vY29uc3RydWlyZS5sb2dpYy1pbW1vLmNvbS9jb25zdHJ1Y3RldXJzIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6Q29uc3RydWlyZV8tX1Ryb3V2ZXJfdW5fY29uc3RydWN0ZXVyJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPlRyb3V2ZXIgdW4gY29uc3RydWN0ZXVyPC9zcGFuPjwvYT48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxhIGhyZWY9Imh0dHA6Ly9jb25zdHJ1aXJlLmxvZ2ljLWltbW8uY29tL3JlYWxpc2F0aW9ucyIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkNvbnN0cnVpcmVfLV9Sw6lhbGlzYXRpb25zJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPlLDqWFsaXNhdGlvbnM8L3NwYW4+PC9hPjwvbGk+PC91bD48L2xpPjxsaSBpZD0ibWVudV82IiBvbm1vdXNlb3Zlcj0ic2hvd01lbnUoNikiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDYpIiBjbGFzcz0iY29sdW1ucyBjb2xvci1ncmV5ICI+PGEgaWQ9Im92ZXJfaXRlbV82IiBocmVmPSJodHRwczovL25ldWYubG9naWMtaW1tby5jb20vIiBkYXRhLW51bT0iNiIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkFjaGV0ZXJfZGFuc19sZV9uZXVmJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPk5ldWY8L3NwYW4+PC9hPgo8dWwgaWQ9InN1Ym1lbnVfNiIgY2xhc3M9InN1Ym1lbnUgIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IC0xMzVweCI+PGxpIGNsYXNzPSJjb2x1bW5zICI+PGEgaHJlZj0iaHR0cHM6Ly9uZXVmLmxvZ2ljLWltbW8uY29tLyIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkFjaGV0ZXJfZGFuc19sZV9uZXVmXy1fSGFiaXRlciYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5IYWJpdGVyPC9zcGFuPjwvYT48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxhIGhyZWY9Imh0dHBzOi8vbmV1Zi5sb2dpYy1pbW1vLmNvbS9pbnZlc3RpciIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkFjaGV0ZXJfZGFuc19sZV9uZXVmXy1fRXBhcmduZXImIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+SW52ZXN0aXI8L3NwYW4+PC9hPjwvbGk+PGxpIGNsYXNzPSJjb2x1bW5zICI+PGEgaHJlZj0iaHR0cHM6Ly9uZXVmLmxvZ2ljLWltbW8uY29tL3Byb21vdGV1cnMiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpBY2hldGVyX2RhbnNfbGVfbmV1Zl8tX1Ryb3V2ZXpfdW5fcHJvbW90ZXVyJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkFubnVhaXJlIGRlcyBwcm9tb3RldXJzPC9zcGFuPjwvYT48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxhIGhyZWY9Imh0dHBzOi8vbmV1Zi5sb2dpYy1pbW1vLmNvbS9lZGl0byIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkFjaGV0ZXJfZGFuc19sZV9uZXVmXy1fQWN0dXNfZXRfZG9zc2llcnMmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+QWN0dXMgZXQgZG9zc2llcnM8L3NwYW4+PC9hPjwvbGk+PC91bD48L2xpPjxsaSBpZD0ibWVudV83IiBvbm1vdXNlb3Zlcj0ic2hvd01lbnUoNykiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDcpIiBjbGFzcz0iY29sdW1ucyAgIHdpdGgtZGFzaCI+PGEgaWQ9Im92ZXJfaXRlbV83IiBocmVmPSJodHRwczovL3d3dy5sdXgtcmVzaWRlbmNlLmNvbS9mci92ZW50ZS5waHAiIHRhcmdldD0iX2JsYW5rIiBkYXRhLW51bT0iNyIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OlByZXN0aWdlJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPlByZXN0aWdlPC9zcGFuPjwvYT4KPHNwYW4gY2xhc3M9Imljb24tZGFzaCI+PC9zcGFuPjwvbGk+PGxpIGlkPSJtZW51XzgiIG9ubW91c2VvdmVyPSJzaG93TWVudSg4KSIgb25tb3VzZW91dD0iaGlkZU1lbnUoOCkiIGNsYXNzPSJjb2x1bW5zICAiPjxhIGlkPSJvdmVyX2l0ZW1fOCIgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYW5udWFpcmUtYWdlbmNlcy1pbW1vYmlsaWVyZXMucGhwIiBkYXRhLW51bT0iOCIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OlRyb3V2ZXJfdW5lX2FnZW5jZSYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5BZ2VuY2VzPC9zcGFuPjwvYT4KPC9saT48bGkgaWQ9Im1lbnVfOSIgb25tb3VzZW92ZXI9InNob3dNZW51KDkpIiBvbm1vdXNlb3V0PSJoaWRlTWVudSg5KSIgY2xhc3M9ImNvbHVtbnMgdmlzaWJsZS1sZy1ibG9jayAgIj48YSBpZD0ib3Zlcl9pdGVtXzkiIGhyZWY9Imh0dHBzOi8vbmV1Zi5sb2dpYy1pbW1vLmNvbS9pbnZlc3Rpci5waHAiIGRhdGEtbnVtPSI5IiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6SW52ZXN0aXImIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+SW52ZXN0aXI8L3NwYW4+PC9hPgo8L2xpPjxsaSBpZD0ibWVudV8xMCIgb25tb3VzZW92ZXI9InNob3dNZW51KDEwKSIgb25tb3VzZW91dD0iaGlkZU1lbnUoMTApIiBjbGFzcz0iY29sdW1ucyB2aXNpYmxlLWxnLWJsb2NrICAiPjxhIGlkPSJvdmVyX2l0ZW1fMTAiIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2FjdHUtbWFyY2hlLWltbW9iaWxpZXIucGhwIiBkYXRhLW51bT0iMTAiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpBY3R1YWxpdGVzJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkFjdHVhbGl0w6lzPC9zcGFuPjwvYT4KPHVsIGlkPSJzdWJtZW51XzEwIiBjbGFzcz0ic3VibWVudSAiIHN0eWxlPSJtYXJnaW4tbGVmdDogLTI4N3B4Ij48bGkgY2xhc3M9ImNvbHVtbnMgIj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hY3R1LW1hcmNoZS1pbW1vYmlsaWVyL2FjdHVzLWltbW9iaWxpZXIucGhwIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6QWN0dWFsaXRlc18tX05hdGlvbmFsZXMmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+TmF0aW9uYWxlczwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9ImNvbHVtbnMgIj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hY3R1cy1pbW1vYmlsaWVyLXJlZ2lvbnMucGhwIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6QWN0dWFsaXRlc18tX1JlZ2lvbmFsZXMmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+UsOpZ2lvbmFsZXM8L3NwYW4+PC9hPjwvbGk+PGxpIGNsYXNzPSJjb2x1bW5zICI+PGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZ3VpZGUtaW1tb2JpbGllci5waHAiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpBY3R1YWxpdGVzXy1fR3VpZGVfaW1tb2JpbGllciYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5HdWlkZSBpbW1vYmlsaWVyPC9zcGFuPjwvYT48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxhIGhyZWY9Imh0dHBzOi8vbmV3c3Jvb20ubG9naWMtaW1tby5jb20iIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpBY3R1YWxpdGVzXy1fRXNwYWNlX3ByZXNzZSYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5Fc3BhY2UgcHJlc3NlPC9zcGFuPjwvYT48L2xpPjwvdWw+PC9saT48bGkgaWQ9Im1lbnVfMTEiIG9ubW91c2VvdmVyPSJzaG93TWVudSgxMSkiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDExKSIgY2xhc3M9ImNvbHVtbnMgdmlzaWJsZS1sZy1ibG9jayAgbGFzdCBjb2xvci1ncmV5ICI+PGEgaWQ9Im92ZXJfaXRlbV8xMSIgaHJlZj0iaHR0cDovL2Jsb2cubG9naWMtaW1tby5jb20vIiBkYXRhLW51bT0iMTEiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpCbG9nJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkJsb2c8L3NwYW4+PC9hPgo8L2xpPiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L25hdj4KPGRpdiBpZD0ic3VibWVudWJnIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBpZD0ianMtb2FzLXN1Ym1lbnViZyIgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPGlucHV0IHR5cGU9ImhpZGRlbiIgdmFsdWU9IiIgaWQ9Im1lbnVfY3VycmVudF91bml2IiAvPgo8L2hlYWRlcj4KPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIG1hc3RoZWFkIgogICAgIGlkPSJzYXNfNzczMzIiPjwvZGl2PgoKPGRpdiBpZD0ianMtY29udGVudCIgY2xhc3M9ImNvbnRlbnRXcmFwcGVyIGxpLWNvbnRhaW5lciI+CiAgICA8c2NyaXB0PgogIHZhciBzYXMgPSBzYXMgfHwge307CgogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKAogICdET01Db250ZW50TG9hZGVkJywKICBmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBsb2FkU21hcnRBZE9uQ29uc2VudCgpIHsKICAgICAgdmFyIHNtYXJ0YWRTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgc21hcnRhZFNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7CiAgICAgIHNtYXJ0YWRTY3JpcHQuc3JjID0gJy8vY2VkLnNhc2Nkbi5jb20vdGFnLzI3NTEvc21hcnQuanMnOwoKICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdOwogICAgICBoZWFkLmFwcGVuZENoaWxkKHNtYXJ0YWRTY3JpcHQpOwoKICAgICAgZnVuY3Rpb24gcmVsb2FkU21hcnRBZCgpIHsKICAgICAgICBpZiAoc2FzICYmIHNhcy5jbWQpIHsKICAgICAgICAgIHNhcy5jbWQgPSBzYXMuY21kIHx8IFtdOwogICAgICAgICAgc2FzLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2FzLnNldHVwKHtuZXR3b3JraWQ6IDI3NTEsIGRvbWFpbjogIi8vd3d3MTQuc21hcnRhZHNlcnZlci5jb20iLCBhc3luYzogdHJ1ZX0pOwogICAgICAgICAgfSk7CiAgICAgICAgICBzYXMuY21kLnB1c2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzYXMuY2FsbCgib25lY2FsbCIsIHsKICAgICAgICAgICAgICBzaXRlSWQ6IDE2NjI5MSwKICAgICAgICAgICAgICBwYWdlSWQ6IDgzMjMwMywKICAgICAgICAgICAgICBmb3JtYXRJZDogJzU4MDY3LDU4MDQzLDU4MDQyLDU4MDY1LDU4MDY2JywKICAgICAgICAgICAgICB0YXJnZXQ6IGNyZWF0ZU9uZUxvY2FsaXR5VGFyZ2V0KCI3NTAxMSIpLAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZXRUaW1lb3V0KHJlbG9hZFNtYXJ0QWQsIDUwMCkKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJlbG9hZFNtYXJ0QWQoKTsKICAgIH0KCiAgICBDb29raWVDb25zZW50ICYmIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KGxvYWRTbWFydEFkT25Db25zZW50LCA0KTsKICB9KTsKPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIHZhciBpc01hbmRhdG9yeVBob25lID0gImZhbHNlIjsKPC9zY3JpcHQ+PHNjcmlwdD4KICAgIGZ1bmN0aW9uIGNyZWF0RE9NRWxlbWVudCAob2JqKSB7CiAgICAgICAgbGV0IERPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9ialsnbmFtZSddKTsKICAgICAgICBkZWxldGUgb2JqWyduYW1lJ107CiAgICAgICAgZm9yKGNvbnN0IFtrZXksdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHsKICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NoaWxkJykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgRE9NRWxlbWVudC5hcHBlbmRDaGlsZChjcmVhdERPTUVsZW1lbnQodmFsdWUpKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIERPTUVsZW1lbnRba2V5XSA9IHZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gRE9NRWxlbWVudDsKICAgIH0KICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgZnVuY3Rpb24gKCkgewogICAgICAgIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KGZ1bmN0aW9uICgpewogICAgICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07CiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBjcmVhdERPTUVsZW1lbnQoeyAnbmFtZSc6ICdzY3JpcHQnLCAndHlwZSc6ICd0ZXh0L2phdmFzY3JpcHQnLCAnc3JjJzogJ2h0dHBzOi8vc3RhdGljLmNyaXRlby5uZXQvanMvbGQvbGQuanMnIH0pOwogICAgICAgICAgICB2YXIgc2NyaXB0MiA9IGNyZWF0RE9NRWxlbWVudCh7ICduYW1lJzogJ3NjcmlwdCcsICd0eXBlJzogJ3RleHQvamF2YXNjcmlwdCcsICdzcmMnOiAnLy9zdGF0aWMuY3JpdGVvLm5ldC9qcy9sZC9wdWJsaXNoZXJ0YWcuanMnIH0pOwoKICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgICAgICAgICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdDIpOwogICAgICAgIH0sIDQpOwogICAgfSk7Cjwvc2NyaXB0Pgo8c2VjdGlvbiBjbGFzcz0ibWFpblByb3BlcnR5U2VjdGlvbiI+CgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIG9mZmVyLXZpZXctY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItbWFpbi1jcml0ZXJpYS13cmFwcGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBvZmZlci1icmVhZGNydW1iIj4KICAgICAgICAgICAgICAgICAgICAKPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9sZCtqc29uIj4KewogICAgIkBjb250ZXh0IjogImh0dHA6Ly9zY2hlbWEub3JnIiwKICAgICJAdHlwZSI6ICJCcmVhZGNydW1iTGlzdCIsCiAgICAiaXRlbUxpc3RFbGVtZW50IjogWwogICAgewogICAgICAgICJAdHlwZSI6ICJMaXN0SXRlbSIsCiAgICAgICAgInBvc2l0aW9uIjogMSwKICAgICAgICAiaXRlbSI6IHsKICAgICAgICAgICAgIkBpZCI6ICJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS8iLCAKICAgICAgICAgICAgIm5hbWUiOiAiVmVudGUiCiAgICAgICAgfQogICAgfSwKICAgIHsKICAgICAgICAiQHR5cGUiOiAiTGlzdEl0ZW0iLAogICAgICAgICJwb3NpdGlvbiI6IDIsCiAgICAgICAgIml0ZW0iOiB7CiAgICAgICAgICAgICJAaWQiOiAiaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vaW1tb2JpbGllci1pbGUtZGUtZnJhbmNlLmh0bWwiLCAKICAgICAgICAgICAgIm5hbWUiOiAiSWxlIGRlIEZyYW5jZSIKICAgICAgICB9CiAgICB9LAogICAgewogICAgICAgICJAdHlwZSI6ICJMaXN0SXRlbSIsCiAgICAgICAgInBvc2l0aW9uIjogMywKICAgICAgICAiaXRlbSI6IHsKICAgICAgICAgICAgIkBpZCI6ICJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hbm5vbmNlcy1pbW1vYmlsaWVyLXBhcmlzLTc1LTEwMF8xLmh0bWwiLCAKICAgICAgICAgICAgIm5hbWUiOiAiUGFyaXMgKDc1KSIKICAgICAgICB9CiAgICB9LAogICAgewogICAgICAgICJAdHlwZSI6ICJMaXN0SXRlbSIsCiAgICAgICAgInBvc2l0aW9uIjogNCwKICAgICAgICAiaXRlbSI6IHsKICAgICAgICAgICAgIkBpZCI6ICJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hbm5vbmNlcy1pbW1vYmlsaWVyLXBhcmlzLTExZS03NTAxMS0yMzU5MF8yLmh0bWwiLCAKICAgICAgICAgICAgIm5hbWUiOiAiUGFyaXMgMTFlIgogICAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICAgIkB0eXBlIjogIkxpc3RJdGVtIiwKICAgICAgICAicG9zaXRpb24iOiA1LAogICAgICAgICJpdGVtIjogewogICAgICAgICAgICAiQGlkIjogImh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2FwcGFydGVtZW50LXBhcmlzLTExZS92ZW50ZS1hcHBhcnRlbWVudC1wYXJpcy0xMWUtNzUwMTEtMjM1OTBfMi5odG1sIiwgCiAgICAgICAgICAgICJuYW1lIjogIkFwcGFydGVtZW50IgogICAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICAgIkB0eXBlIjogIkxpc3RJdGVtIiwKICAgICAgICAicG9zaXRpb24iOiA2LAogICAgICAgICJpdGVtIjogewogICAgICAgICAgICAiQGlkIjogImh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2FwcGFydGVtZW50LXBhcmlzLTExZS92ZW50ZS1hcHBhcnRlbWVudC1wYXJpcy0xMWUvYXBwYXJ0ZW1lbnQtMi1waWVjZXMtcGFyaXMtMTFlLTc1MDExLTIzNTkwXzIuaHRtbCIsIAogICAgICAgICAgICAibmFtZSI6ICIyIHBpw6hjZXMiCiAgICAgICAgfQogICAgfSwKICAgIHsKICAgICAgICAiQHR5cGUiOiAiTGlzdEl0ZW0iLAogICAgICAgICJwb3NpdGlvbiI6IDcsCiAgICAgICAgIml0ZW0iOiB7CiAgICAgICAgICAgICAKICAgICAgICAgICAgIm5hbWUiOiAiQXBwYXJ0ZW1lbnQgNjdtwrIgNzc1IDAwMOKCrCIKICAgICAgICB9CiAgICB9CiAgICBdCn0KPC9zY3JpcHQ+Cgo8dGFibGUgY2xhc3M9ImxpY29tLWJyZWFkY3J1bWIiPgogICAgPHRyPgogICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vIiB0aXRsZT0iVmVudGUiIGNsYXNzPSJzaXplXzExIGJsYWNrIGJvbGQiPlZlbnRlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzaXplXzExIGJsYWNrIGJvbGQiPiAmbmJzcDsmIzEyNDsmbmJzcDsgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9pbW1vYmlsaWVyLWlsZS1kZS1mcmFuY2UuaHRtbCIgdGl0bGU9IklsZSBkZSBGcmFuY2UiIGNsYXNzPSJzaXplXzExIGJsYWNrIGJvbGQiPklsZSBkZSBGcmFuY2U8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNpemVfMTEgYmxhY2sgYm9sZCI+ICZuYnNwOyYjMTI0OyZuYnNwOyA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fubm9uY2VzLWltbW9iaWxpZXItcGFyaXMtNzUtMTAwXzEuaHRtbCIgdGl0bGU9IlBhcmlzICg3NSkiIGNsYXNzPSJzaXplXzExIGJsYWNrIGJvbGQiPlBhcmlzICg3NSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNpemVfMTEgYmxhY2sgYm9sZCI+ICZuYnNwOyYjMTI0OyZuYnNwOyA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fubm9uY2VzLWltbW9iaWxpZXItcGFyaXMtMTFlLTc1MDExLTIzNTkwXzIuaHRtbCIgdGl0bGU9IlBhcmlzIDExZSIgY2xhc3M9InNpemVfMTEgYmxhY2sgYm9sZCI+UGFyaXMgMTFlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzaXplXzExIGJsYWNrIGJvbGQiPiAmbmJzcDsmIzEyNDsmbmJzcDsgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hcHBhcnRlbWVudC1wYXJpcy0xMWUvdmVudGUtYXBwYXJ0ZW1lbnQtcGFyaXMtMTFlLTc1MDExLTIzNTkwXzIuaHRtbCIgdGl0bGU9IkFwcGFydGVtZW50IiBjbGFzcz0ic2l6ZV8xMSBibGFjayBib2xkIj5BcHBhcnRlbWVudDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2l6ZV8xMSBibGFjayBib2xkIj4gJm5ic3A7JiMxMjQ7Jm5ic3A7IDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXBwYXJ0ZW1lbnQtcGFyaXMtMTFlL3ZlbnRlLWFwcGFydGVtZW50LXBhcmlzLTExZS9hcHBhcnRlbWVudC0yLXBpZWNlcy1wYXJpcy0xMWUtNzUwMTEtMjM1OTBfMi5odG1sIiB0aXRsZT0iMiBwacOoY2VzIiBjbGFzcz0ic2l6ZV8xMSBibGFjayBib2xkIj4yIHBpw6hjZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNpemVfMTEgYmxhY2sgYm9sZCI+ICZuYnNwOyYjMTI0OyZuYnNwOyA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ib2ZmZXJUaXRsZUJyZWFkY3J1bWJzIj5BcHBhcnRlbWVudCA2N23CsiA3NzUgMDAw4oKsPC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgPC90cj4KPC90YWJsZT4gICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItY29udHJvbHMgY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAKCTxzZWN0aW9uIGNsYXNzPSJuYXZQcmV2UHJleHQiIGlkPSJvZmZlcl9uYXZpZ2F0aW9uX3RvcCIgZGF0YS1vZmZlci1pZD0iN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIiBkYXRhLW1hcHBlcj0ic2FsZSI+Cgk8L3NlY3Rpb24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXZpZXctY29udGVudF9fd3JhcHBlciBjbGVhcmZpeCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXZpZXctY29udGVudF9fbGVmdC1jb2x1bW4iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLW1haW4tY3JpdGVyaWEiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b2FzdGVyIiBpZD0ianMtZmFUb2FzdGVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyB0b2FzdGVyLWNvbnRlbnQiPgogICAgCiAgICAJPGRpdiBjbGFzcz0ibGVmdFpvbmUgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjZWxsIHR5cGUiPgogICAgICAgICAgICAgICAgPHA+QXBwYXJ0ZW1lbnQ8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjZWxsIGFyZWEiPgogICAgCQkJPHNwYW4gY2xhc3M9Im9mZmVyLWFyZWEtbnVtYmVyIj42Nzwvc3Bhbj4gbcKyCiAgICAJCTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjZWxsIHJvb21zIj4KICAgIAkJCTxzcGFuIGNsYXNzPSJvZmZlci1yb29tcyI+PHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Mjwvc3Bhbj4gcGnDqGNlczwvc3Bhbj4KICAgIAkJPC9kaXY+CiAgICAJCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNlbGwgbG9jYWxpdHkiPgogICAgICAgICAgICAgICAgPHNwYW4+UGFyaXMgMTEgKDc1MDExKTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCTxkaXYgY2xhc3M9ImNlbGwgcHJpY2UiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJtYWluLXByaWNlIj43NzUgMDAwIOKCrDwvaDI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCTwvZGl2PgogICAgCiAgICAJPGRpdiBjbGFzcz0icmlnaHRab25lIGNsZWFyZml4Ij4KICAgIAkJPGRpdiBjbGFzcz0iY2VsbCBjb250YWN0Ij4KICAgIAkJCTxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBsb2dpYy1idG4tcmVkIGxvZ2ljLWJ0bi1sYXJnZSBqcy1wb3BpblBob25lTnVtYmVyIiAgICAgCQkJCQoJCQkJCWRhdGEtd2lkdGg9IjYzNCIKCQkJCQlkYXRhLWhlaWdodD0iNjcwIgoJCQkJCWRhdGEtY29udGFjdC10eXBlPSJtYWlsIgkJCQkgICAgCgkJCQkJZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICBkYXRhLXNob3dudW1iZXI9IjAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgZGF0YS14dHBhZ2U9IkZpY2hlX0Fubm9uY2VfVG9hc3RlciIKCQkJCQlkYXRhLWFkU2hvd0Nhc2VMb2NhbGl0eT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1GQS1XSU4tVE9BU1RFUi1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iRmljaGVfQW5ub25jZV9Ub2FzdGVyIiBkYXRhLW9mZmVyaWQ9IjdEQkU1MUIwLTM2REUtOUQ5Qi1GNTZCLTQ1RDFBQzZCMENDQyIgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiIGRhdGEtYWVpc291cmNlPSIiIGRhdGEtaXNOZXVmPSJmYWxzZSIgICAgIAkJCQk+Q29udGFjdGVyIGwnYWdlbmNlPC9idXR0b24+CiAgICAJCTwvZGl2PgogICAgCQk8ZGl2IGNsYXNzPSJjZWxsIHNlbGVjdGlvbiI+CiAgICAgICAgCSAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICAgCSAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iRmljaGVfQW5ub25jZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci03REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1vZGU9IiIKICAgICAgICAgICAgICAgID4gPGkgY2xhc3M9Imljb24taGVhcnQtYm9yZGVyIj48L2k+PC9hPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iRmljaGVfQW5ub25jZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4gPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT48L2E+CiAgICAJCTwvZGl2PgogICAgCQk8ZGl2IGNsYXNzPSJjZWxsIHNlcGFyYXRvciI+PC9kaXY+CiAgICAJCTxkaXYgY2xhc3M9ImNlbGwgc2hhcmUiPgogICAgCQkJIAoKPGRpdiBjbGFzcz0icm93Ij4KICA8ZGl2IGNsYXNzPSJjb2wteHMtNiI+CiAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIj4KICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItc2hhcmUiPjxpIGNsYXNzPSJpY29uLXNoYXJlIj48L2k+PC9zcGFuPiAgICAKICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICA8dWwgIGNsYXNzPSJkcm9wZG93bi1tZW51IHRleHQtbGVmdCBzaGFyZS1ib3ggIiByb2xlPSJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGF5ZXIiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIHJlbD0iaGlkZUxpbms6SXc9PSIgdGl0bGU9IkVudm95ZXIgw6AgdW4gYW1pIiBjbGFzcz0ic2VuZC1mcmllbmQgamFtbWVyIiBkYXRhLXNlbmRmcmllbmQtb2ZmZXJpZD0iN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIiBkYXRhLXNlbmRmcmllbmQtbW9kZT0iIiBkYXRhLXNoYXJlLXdpZHRoPSI0MzAiIGRhdGEtc2hhcmUtaGVpZ2h0PSI1NzMiPjxpIGNsYXNzPSJpY29uLW1haWwiPjwvaT4gUGFydGFnZXIgYXZlYyB1biBhbWk8L3NwYW4+ICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRpdmlkZXIiPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImxheWVyIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiByZWw9ImhpZGVMaW5rOmFtRjJZWE5qY21sd2REcDJiMmxrS0RBcCIgdGl0bGU9IlBhcnRhZ2VyIHN1ciBGYWNlYm9vayIgY2xhc3M9InNvY2lhbC1zaGFyZSBzaGFyZS1mYWNlYm9vayBqYW1tZXIiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICcxJywgJ1BhcnRhZ2VfQW5ub25jZTo6UGFydGFnZV9SZXNlYXV4X3NvY2lhdXg6OlBhcnRhZ2VfQW5ub25jZV9GYWNlYm9vaycsICdBJyk7IiBkYXRhLXNoYXJlLXVybD0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci5waHA/dT0iIGRhdGEtc2hhcmUtd2lkdGg9IjYwMCIgZGF0YS1zaGFyZS1oZWlnaHQ9IjM1MCI+PGkgY2xhc3M9Imljb24tZmFjZWJvb2siPjwvaT4gUGFydGFnZXIgc3VyIEZhY2Vib29rPC9zcGFuPiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkaXZpZGVyIj48L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsYXllciI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gcmVsPSJoaWRlTGluazphbUYyWVhOamNtbHdkRHAyYjJsa0tEQXAiIHRpdGxlPSJQYXJ0YWdlciBzdXIgTGlua2VkSW4iIGNsYXNzPSJzb2NpYWwtc2hhcmUgc2hhcmUtbGlua2VkaW4gamFtbWVyIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdQYXJ0YWdlX0Fubm9uY2U6OlBhcnRhZ2VfUmVzZWF1eF9zb2NpYXV4OjpQYXJ0YWdlX0Fubm9uY2VfTGlua2VkSW4nLCAnQScpOyIgZGF0YS1zaGFyZS11cmw9Imh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9zaGFyZUFydGljbGU/bWluaT10cnVlJnVybD0iIGRhdGEtc2hhcmUtd2lkdGg9IjYwMCIgZGF0YS1zaGFyZS1oZWlnaHQ9IjQwMCI+PGkgY2xhc3M9Imljb24tbGlua2VkaW4iPjwvaT4gUGFydGFnZXIgc3VyIExpbmtlZEluPC9zcGFuPiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkaXZpZGVyIj48L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsYXllciI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gcmVsPSJoaWRlTGluazphbUYyWVhOamNtbHdkRHAyYjJsa0tEQXAiIHRpdGxlPSJQYXJ0YWdlciBzdXIgVHdpdHRlciIgY2xhc3M9InNvY2lhbC1zaGFyZSBzaGFyZS10d2l0dGVyIGphbW1lciIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnUGFydGFnZV9Bbm5vbmNlOjpQYXJ0YWdlX1Jlc2VhdXhfc29jaWF1eDo6UGFydGFnZV9Bbm5vbmNlX1R3aXR0ZXInLCAnQScpOyIgZGF0YS1zaGFyZS11cmw9Imh0dHBzOi8vdHdpdHRlci5jb20vc2hhcmU/dXJsPSZ2aWE9bG9naWNpbW1vJnRleHQ9SiUyN2FpK3Ryb3V2JUMzJUE5K3N1citMb2dpYy1JbW1vLmNvbSslM0ErQXBwYXJ0ZW1lbnQrLStQQVJJUysxMSUyODc1MDExJTI5Ky0rJTNDc3BhbitjbGFzcyUzRCUyN29mZmVyLXJvb21zLW51bWJlciUyNyUzRTIlM0MlMkZzcGFuJTNFK3BpJUMzJUE4Y2VzKy0rJTNDc3BhbitjbGFzcyUzRCUyN29mZmVyLWFyZWEtbnVtYmVyJTI3JTNFNjclM0MlMkZzcGFuJTNFK20lQzIlQjIrZW52aXJvbistKyIgZGF0YS1zaGFyZS13aWR0aD0iNjUwIiBkYXRhLXNoYXJlLWhlaWdodD0iNDYwIj48aSBjbGFzcz0iaWNvbi10d2l0dGVyIj48L2k+IFBhcnRhZ2VyIHN1ciBUd2l0dGVyPC9zcGFuPiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkaXZpZGVyIj48L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsYXllciI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gcmVsPSJoaWRlTGluazphbUYyWVhOamNtbHdkRHAyYjJsa0tEQXAiIHRpdGxlPSJQYXJ0YWdlciBzdXIgR29vZ2xlKyIgY2xhc3M9InNvY2lhbC1zaGFyZSBzaGFyZS10d2l0dGVyIGphbW1lciIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnUGFydGFnZV9Bbm5vbmNlOjpQYXJ0YWdlX1Jlc2VhdXhfc29jaWF1eDo6UGFydGFnZV9Bbm5vbmNlX0dvb2dsZVBsdXMnLCAnQScpOyIgZGF0YS1zaGFyZS11cmw9Imh0dHBzOi8vcGx1cy5nb29nbGUuY29tL3NoYXJlP3VybD0iIGRhdGEtc2hhcmUtd2lkdGg9IjYwMCIgZGF0YS1zaGFyZS1oZWlnaHQ9IjYwMCI+PGkgY2xhc3M9Imljb24tZ29vZ2xlcGx1cyI+PC9pPiBQYXJ0YWdlciBzdXIgR29vZ2xlKzwvc3Bhbj4gICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGl2aWRlciI+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGF5ZXIiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIHJlbD0iaGlkZUxpbms6YW1GMllYTmpjbWx3ZERwMmIybGtLREFwIiB0aXRsZT0iUGFydGFnZXIgc3VyIFBpbnRlcmVzdCIgY2xhc3M9InNvY2lhbC1zaGFyZSBzaGFyZS1waW50ZXJlc3QgamFtbWVyIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdQYXJ0YWdlX0Fubm9uY2U6OlBhcnRhZ2VfUmVzZWF1eF9zb2NpYXV4OjpQYXJ0YWdlX0Fubm9uY2VfUGludGVyZXN0JywgJ0EnKTsiIGRhdGEtc2hhcmUtdXJsPSJodHRwczovL3BpbnRlcmVzdC5jb20vcGluL2NyZWF0ZS9idXR0b24vP3VybD0mbWVkaWE9aHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2Fkcy9waG90by1wcm9wLTQ0MHgzMzAvN2RiL2IvYjU0ZWZhZjAtOWM1MS00ZjNhLWFmZjItNDMzYzkxMzBiYWQzLmpwZyIgZGF0YS1zaGFyZS13aWR0aD0iNjAwIiBkYXRhLXNoYXJlLWhlaWdodD0iNDAwIj48aSBjbGFzcz0iaWNvbi1waW50ZXJlc3QiPjwvaT4gUGFydGFnZXIgc3VyIFBpbnRlcmVzdDwvc3Bhbj4gICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgPC9kaXY+CjwvZGl2PgogICAgCQk8L2Rpdj4KICAgICAgIDwvZGl2PgoJPC9kaXY+CjwvZGl2PgoKPGFydGljbGUgY2xhc3M9Im9mZmVyLWJsb2NrIG9mZmVyLWJsb2NrLXZpZXcgYm94IGJveC1wYWRkaW5nICI+CiAgICA8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvQXBhcnRtZW50Q29tcGxleCIgPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoZWFkZXIgY2xhc3M9Im9mZmVyVmlld1N1bW1hcnkiIGlkPSJoZWFkZXItb2ZmZXItN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdFNpZGUiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJvZmZlck1haW5GZWF0dXJlcyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj5BcHBhcnRlbWVudDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmZWF0dXJlIj42N23Csjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmZWF0dXJlIj4yIHBpw6hjZXM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQgJmJ1bGw7IDY3IG3CsiBlbnZpcm9uICZidWxsOyAyIHBpw6hjZXMiLz4KICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImFkZHJlc3MiPiAgICAgICAgICAgICAgICAgICAgICAgIFBBUklTIDExRSAoNzUwMTEpICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGFyaXMgMTEmRWdyYXZlO01lICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodFNpZGUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJpY2UiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9InByaWNlIj4gICAgICAgICAgICAgICAgICAgICAgICA3NzUgMDAwIOKCrDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZS1pbW1vYmlsaWVyLmNyZWRpdC1hZ3JpY29sZS5mci9zaW11bGNhLz9PUkk9c2Vsb2dlcmNhbXBhZ25lJnh0b3I9QUwtMi1bcGFydGVuYXJpYXRdLVtMb2dpYy1pbW1vXS1bbGllbl9zZXJ2aWNlc10tW3BkZF0tW2Rlc2t0b3BdIiB0aXRsZT0iUXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID8iIGNsYXNzPSJtb250aFByaWNpbmciIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmU6OkxpZW5fUGFydGVuYWlyZV9CYW5jYWlyZV9GaWNoZV9Bbm5vbmNlJywgJ04nKTsiIHJlbD0ibm9mb2xsb3ciPm91IDMgMTI4IOKCrCAvIG1vaXMqIDxici8+UXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID88L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvaGVhZGVyPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1jYXJvdXNlbCI+CiAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD0nZ2FsbGVyeScgY2xhc3M9Im9mZmVyLXBpY3R1cmVzLWNhcnJvdXNzZWwiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdvZmZlci1waWN0dXJlcy1tYWluIGJveC1ub21hcmdpbiBjbGVhcmZpeCc+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjdEQkU1MUIwLTM2REUtOUQ5Qi1GNTZCLTQ1RDFBQzZCMENDQyIKICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9IkZpY2hlX0Fubm9uY2UiCiAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1lbGVtZW50dG9tb3ZlPSIjaGVhZGVyLW9mZmVyLTdEQkU1MUIwLTM2REUtOUQ5Qi1GNTZCLTQ1RDFBQzZCMENDQyIKICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJyZW1vdmUtZnJvbS1zZWxlY3Rpb24iCiAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiCiAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJGaWNoZV9Bbm5vbmNlIgogICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LXNlbGVjdGVkIj48L2k+CiAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InByZXYtcGhvdG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHJldlBob3RvIHBpY3RvLXByZXYgaWNvbi1hcnJvdzNsZWZ0IGljb25TcXVhcmUgaWNvbi1zcXVhcmUtYmx1ZSBpY29uLXdoaXRlIHNpemVfMzIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJuZXh0LXBob3RvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im5leHRQaG90byBwaWN0by1uZXh0IGljb24tYXJyb3czcmlnaHQgaWNvblNxdWFyZSBpY29uLXNxdWFyZS1ibHVlIGljb24td2hpdGUgc2l6ZV8zMiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icGhvdG8iIGNsYXNzPSJ0aHVtYi1saW5rIHBob3RvLXJoaW5vdiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXhpdGk9InRvcC54dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9GaWNoZV9Bbm5vbmNlOjpQaG90b3M6OkFmZmljaGVyX1Bob3RvX1BvcC1pbicsICdBJyk7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaW1nTGlxdWlkLWZpbGw9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1waG90by11cmw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC04MDB4NjAwLzdkYi9iL2I1NGVmYWYwLTljNTEtNGYzYS1hZmYyLTQzM2M5MTMwYmFkMy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmVzLWNvdW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXJQaWN0dXJlc0NvdW50TGFiZWwiPjxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icGljdHVyZXNDb3VudCI+MTA8L3NwYW4+PHNwYW4+cGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyVmlydHVhbExhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi0zNjAiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4xPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC04MDB4NjAwLzdkYi9iL2I1NGVmYWYwLTljNTEtNGYzYS1hZmYyLTQzM2M5MTMwYmFkMy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGh1bWItbGluayAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ib2ZmZXJfcGljdHVyZXNfbWFpbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXItbWFwcGVyPSJzYWxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlci1pZD0iN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlci1jdXJyZW50LXBvc2l0aW9uPSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlci1mbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZFNob3dDYXNlTG9jYWxpdHk9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSIvPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjb2wteHMtMTIgb2ZmZXItc2xpZGUtc2hvdy1ibG9jayc+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZXMtc2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC13cmFwcGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWNvbnRlbnQgbm9TbGlkZXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWluVGh1bWJzIHdpdGhNYXJnaW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGh1bWJzQ29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aHVtYkl0ZW0iIGRhdGEtb2ZmZXItaW1hZ2UtcG9zaXRpb249IjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGh1bWItbGluayB0aHVtYiIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0ZpY2hlX0Fubm9uY2U6OlBob3Rvczo6QWZmaWNoZXJfUGhvdG8nLCAnQScpOyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0xODJ4MTM2LzdkYi9iL2I1NGVmYWYwLTljNTEtNGYzYS1hZmYyLTQzM2M5MTMwYmFkMy5qcGciIGFsdD0iQXBwYXJ0ZW1lbnQgUGFyaXMgMTEgJmJ1bGw7IDY3IG3CsiBlbnZpcm9uICZidWxsOyAyIHBpw6hjZXMiID48L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGh1bWJJdGVtIiBkYXRhLW9mZmVyLWltYWdlLXBvc2l0aW9uPSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9InRodW1iLWxpbmsgdGh1bWIiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9GaWNoZV9Bbm5vbmNlOjpQaG90b3M6OkFmZmljaGVyX1Bob3RvJywgJ0EnKTsiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMTgyeDEzNi83ZGIvYS9hOGQ2YjZkNS0wMzdjLTQ4YjktOWEyNS1kNTU5YmQxZTdkY2YuanBnIiBhbHQ9IkFwcGFydGVtZW50IFBhcmlzIDExICZidWxsOyA2NyBtwrIgZW52aXJvbiAmYnVsbDsgMiBwacOoY2VzIiA+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRodW1iSXRlbSIgZGF0YS1vZmZlci1pbWFnZS1wb3NpdGlvbj0iMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJ0aHVtYi1saW5rIHRodW1iIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdBY3Rpb25fRmljaGVfQW5ub25jZTo6UGhvdG9zOjpBZmZpY2hlcl9QaG90bycsICdBJyk7IiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2Fkcy9waG90by1wcm9wLTE4MngxMzYvN2RiLzYvNjlhNzI1NjMtNDI5Yy00YmI3LWIzOWItYTRmMThkZDBkMmZiLmpwZyIgYWx0PSJBcHBhcnRlbWVudCBQYXJpcyAxMSAmYnVsbDsgNjcgbcKyIGVudmlyb24gJmJ1bGw7IDIgcGnDqGNlcyIgPjwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aHVtYkl0ZW0iIGRhdGEtb2ZmZXItaW1hZ2UtcG9zaXRpb249IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGh1bWItbGluayB0aHVtYiIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0ZpY2hlX0Fubm9uY2U6OlBob3Rvczo6QWZmaWNoZXJfUGhvdG8nLCAnQScpOyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0xODJ4MTM2LzdkYi83Lzc4NjRhZmUxLTY2MWQtNGQ0YS04NjE2LWNmYjdmZDNmODJjOS5qcGciIGFsdD0iQXBwYXJ0ZW1lbnQgUGFyaXMgMTEgJmJ1bGw7IDY3IG3CsiBlbnZpcm9uICZidWxsOyAyIHBpw6hjZXMiID48L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3JlVGh1bWJzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGh1bWJzQ29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtb2ZmZXItaW1hZ2UtcG9zaXRpb249IjQiIGNsYXNzPSJ0aHVtYkl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGh1bWItbGluayB0aHVtYiIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0ZpY2hlX0Fubm9uY2U6OlBob3Rvczo6QWZmaWNoZXJfUGhvdG8nLCAnQScpOyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0xODJ4MTM2LzdkYi82LzY4ZmJiZDZlLThmNGMtNGQyYy1hNzJiLWFkYjJhYWNiNWE4Zi5qcGciIGFsdD0iQXBwYXJ0ZW1lbnQgUGFyaXMgMTEgJmJ1bGw7IDY3IG3CsiBlbnZpcm9uICZidWxsOyAyIHBpw6hjZXMiID48L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW9mZmVyLWltYWdlLXBvc2l0aW9uPSI1IiBjbGFzcz0idGh1bWJJdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9InRodW1iLWxpbmsgdGh1bWIiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9GaWNoZV9Bbm5vbmNlOjpQaG90b3M6OkFmZmljaGVyX1Bob3RvJywgJ0EnKTsiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMTgyeDEzNi83ZGIvOS85YTI0MTUyNi00ZDc5LTRkMGMtOTA5MC03ZmMwOWIyZDhhZWYuanBnIiBhbHQ9IkFwcGFydGVtZW50IFBhcmlzIDExICZidWxsOyA2NyBtwrIgZW52aXJvbiAmYnVsbDsgMiBwacOoY2VzIiA+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1vZmZlci1pbWFnZS1wb3NpdGlvbj0iNiIgY2xhc3M9InRodW1iSXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJ0aHVtYi1saW5rIHRodW1iIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdBY3Rpb25fRmljaGVfQW5ub25jZTo6UGhvdG9zOjpBZmZpY2hlcl9QaG90bycsICdBJyk7IiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2Fkcy9waG90by1wcm9wLTE4MngxMzYvN2RiLzMvMzg1NjkxNjgtZWRjNy00MTVlLTg5MjEtY2U0NDdhNmFhOTU4LmpwZyIgYWx0PSJBcHBhcnRlbWVudCBQYXJpcyAxMSAmYnVsbDsgNjcgbcKyIGVudmlyb24gJmJ1bGw7IDIgcGnDqGNlcyIgPjwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtb2ZmZXItaW1hZ2UtcG9zaXRpb249IjciIGNsYXNzPSJ0aHVtYkl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0idGh1bWItbGluayB0aHVtYiIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0ZpY2hlX0Fubm9uY2U6OlBob3Rvczo6QWZmaWNoZXJfUGhvdG8nLCAnQScpOyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0xODJ4MTM2LzdkYi80LzQ1Y2UyOGUyLWEzZjQtNDFlOS1iNGRiLTYyNTVmODBjOTczNC5qcGciIGFsdD0iQXBwYXJ0ZW1lbnQgUGFyaXMgMTEgJmJ1bGw7IDY3IG3CsiBlbnZpcm9uICZidWxsOyAyIHBpw6hjZXMiID48L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLW9mZmVyLWltYWdlLXBvc2l0aW9uPSI4IiBjbGFzcz0idGh1bWJJdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9InRodW1iLWxpbmsgdGh1bWIiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9GaWNoZV9Bbm5vbmNlOjpQaG90b3M6OkFmZmljaGVyX1Bob3RvJywgJ0EnKTsiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMTgyeDEzNi83ZGIvNy83OGNjOTE3ZC1jZjdjLTQ3OGItYTJhNS1kZWEzZDdiYjk4MmUuanBnIiBhbHQ9IkFwcGFydGVtZW50IFBhcmlzIDExICZidWxsOyA2NyBtwrIgZW52aXJvbiAmYnVsbDsgMiBwacOoY2VzIiA+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1vZmZlci1pbWFnZS1wb3NpdGlvbj0iOSIgY2xhc3M9InRodW1iSXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJ0aHVtYi1saW5rIHRodW1iIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdBY3Rpb25fRmljaGVfQW5ub25jZTo6UGhvdG9zOjpBZmZpY2hlcl9QaG90bycsICdBJyk7IiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2Fkcy9waG90by1wcm9wLTE4MngxMzYvN2RiLzQvNGEzNjU1NTAtNTFkOC00NmY4LTk5M2QtOGMxYTAxNWQ1OGI2LmpwZyIgYWx0PSJBcHBhcnRlbWVudCBQYXJpcyAxMSAmYnVsbDsgNjcgbcKyIGVudmlyb24gJmJ1bGw7IDIgcGnDqGNlcyIgPjwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ2aXJ0dWFsIHRodW1iSXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iamFtbWVyIiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5dGVTNXRZWFIwWlhKd2IzSjBMbU52YlM5emFHOTNMejl0UFhJNWJWWktXbWM0U25oTyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvZnIvc3RhdGljL2NvbW1vbi9kZWZhdWx0X21tZl80LmdpZiIgYWx0PSJBcHBhcnRlbWVudCBQYXJpcyAxMSAmYnVsbDsgNjcgbcKyIGVudmlyb24gJmJ1bGw7IDIgcGnDqGNlcyIgPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJ0aHVtYi1tb3JlLXBpY3R1cmVzIiBjbGFzcz0ibW9yZS1waWN0dXJlcyB0aHVtYkl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0ianMtYnRuUG9waW4gYnltYWlsIGJ0bl9jb250YWN0X3BpY3R1cmUgcGljdHVyZUxpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJidG5fY29udGFjdF9waWN0dXJlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tZXNzYWdlcGhvdG89IjIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29yYWlsPSIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaGVpZ2h0PSI2NzAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdC10eXBlPSJwaG90b3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWRTaG93Q2FzZUxvY2FsaXR5PSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1GQS1NQUlOLVBIT1RPXzctQlRDT05UQUNULVBPUElOQ09OVEFDVCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXB1c2hjb250YWN0PSIxIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFwcGVyPSJzYWxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXh0cGFnZT0iRmljaGVfQW5ub25jZV9WaWduZXR0ZV9QbHVzX2RlX1Bob3RvIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlzTmV1Zj0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbD0ibm9mb2xsb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tY2FtZXJhIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbHVzIGRlIHBob3RvcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3JlVGh1bWJzQnV0dG9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGh1bWJzQ29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvZ2dsZVRodW1icyBtb3JlIHRodW1iSXRlbSI+QWZmaWNoZXIgcGx1cyBkZSBwaG90b3M8aW1nIGNsYXNzPSJhcnJvdyIgc3JjPSIuLi8uLi8uLi9hc3NldC1jb3JhaWwvaW1nL2ljb25zL2ljb24tMjQtYXJyb3cuc3ZnIi8+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvZ2dsZVRodW1icyBsZXNzIHRodW1iSXRlbSI+QWZmaWNoZXIgbW9pbnMgZGUgcGhvdG9zPGltZyBjbGFzcz0iYXJyb3ciIHNyYz0iLi4vLi4vLi4vYXNzZXQtY29yYWlsL2ltZy9pY29ucy9pY29uLTI0LWFycm93LnN2ZyIvPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+Cgo8L3NlY3Rpb24+ICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2Pgo8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRlc2NyaXB0aW9uLXJvdyI+CiAgICAgICAgICAgICAgICAgICAgCjxzZWN0aW9uIGNsYXNzPSJvZmZlci1kZXNjcmlwdGlvbiBvZmZlci1kZXNjcmlwdGlvbi1jb250ZW50Ij4KCiAgICA8aGVhZGVyIGNsYXNzPSJyb3ciPgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTAgY29sLXhzLTkiPgogICAgICAgICAgICA8aDMgY2xhc3M9Im1haW5CbG9ja1RpdGxlIj5EZXNjcmlwdGlmIGR1IGJpZW48L2gzPgogICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMSBjb2wteHMtMSBvZmZlci1kZXNjcmlwdGlvbi1hY3Rpb25zIG9mZmVyLWRlc2NyaXB0aW9uLXByaW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2hhcmUtYm94Ij4KICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgdGl0bGU9IkltcHJpbWVyIiBjbGFzcz0icHJpbnQiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnRicsICcxOScsICdQYXJ0YWdlX0Fubm9uY2U6OlBhcnRhZ2VfSW1wcmVzc2lvbjo6SW1wcmVzc2lvbl9GaWNoZV9kZV92aXNpdGUnKTsiIGRhdGEtcHJpbnQtbGluaz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZmljaGVfdmlzaXRlLnBocD9pZD03REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MmbW9kZT0iPjxpIGNsYXNzPSJpY29uLXByaW50Ij48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgCgogICAgPC9oZWFkZXI+CgogICAgICAgIAogICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyQ3JpdGVyaWEiPgogICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QiID4KICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFiZWwiPlJlZiBkZSBsJ2Fubm9uY2U8L3NwYW4+PHNwYW4gY2xhc3M9InZhbHVlIj48c3BhbiBjbGFzcz0nc2VwYXJhdG9yJz46PC9zcGFuPkxLTTE4Mzc2PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpIGNsYXNzPSJsaXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFiZWwiPkV0YWdlIGR1IGJpZW48L3NwYW4+PHNwYW4gY2xhc3M9InZhbHVlIj48c3BhbiBjbGFzcz0nc2VwYXJhdG9yJz46PC9zcGFuPjJlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpIGNsYXNzPSJsaXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFiZWwiPk5vbWJyZSBkJ8OpdGFnZXMgZHUgYsOidGltZW50PC9zcGFuPjxzcGFuIGNsYXNzPSJ2YWx1ZSI+PHNwYW4gY2xhc3M9J3NlcGFyYXRvcic+Ojwvc3Bhbj4zPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpIGNsYXNzPSJsaXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFiZWwiPk5vbWJyZSBkZSBzYWxsZSBkZSBiYWluPC9zcGFuPjxzcGFuIGNsYXNzPSJ2YWx1ZSI+PHNwYW4gY2xhc3M9J3NlcGFyYXRvcic+Ojwvc3Bhbj4xPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgPC91bD4KICAgICAgICAgPC9kaXY+CiAgICAKICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDwvZGl2PgoKICAgIDwhLS0KICAgICoqKiBFbmQgOiBMZXMgKyBkdSBiaWVuICoqKgogICAgLS0+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXNjcmlwdGlvbi10ZXh0Ij4KICAgICAgICAgICAgICAgIDxtZXRhIGNvbnRlbnQ9IkxvZnQgMiBwaSZlZ3JhdmU7Y2VzIGRlIDY2Ljg3bSZzdXAyOyB8IFJ1ZSBkdSBDaGVtaW4gVmVydCB8IFBhcmlzIDExIExpYmVya2V5cyB2b3VzIHByb3Bvc2UgY2UgbG9mdCBUMiBkZSA2Ny43Mm0mc3VwMjsgKDY2LDg3bSZzdXAyOyBsb2kgQ2FycmV6KS4gU3VyIGxlIGJpZW46IExvZnQgZGUgMiBwaSZlZ3JhdmU7Y2VzIHNpdHUmZWFjdXRlOyBhdSAyJmVncmF2ZTttZSAmZWFjdXRlO3RhZ2UgZCd1biBiJmFjaXJjO3RpbWVudCBlbiBmb25kIGRlIGNvdXIuIExlIGJpZW4gZXN0IGNvbXBvcyZlYWN1dGU7IGQndW5lIGVudHImZWFjdXRlO2Ugb3V2ZXJ0ZSwgZCd1biBzYWxvbiBkb25uYW50IHN1ciB1bmUgY291ciBldCBvcmllbnQmZWFjdXRlOyBTdWQtRXN0IGRlIDM4bSZzdXAyOywgZCd1bmUgY2hhbWJyZSBkZSA5LDg1bSZzdXAyOywgZCd1bmUgY3Vpc2luZSBhbSZlYWN1dGU7cmljYWluZSwgZCd1bmUgc2FsbGUgZGUgYmFpbiBhdmVjIGJhaWdub2lyZSBldCBkJ3VuIFdDIHMmZWFjdXRlO3BhciZlYWN1dGU7LiBMJ2FwcGFydGVtZW50IGVzdCBjYWxtZSBldCBsdW1pbmV1eC4gUmFmcmEmaWNpcmM7Y2hpc3NlbWVudCAmYWdyYXZlOyBwciZlYWN1dGU7dm9pci4gRGFucyBkJ2FuY2llbnMgYiZhY2lyYzt0aW1lbnRzIGQnYXRlbGllciBlbiBjb3VycyBkZSByJmVhY3V0ZTtub3ZhdGlvbiAoY29uc29saWRhdGlvbiwgciZlYWN1dGU7bm92YXRpb24gZGVzIGZhJmNjZWRpbDthZGVzKSB2b3QmZWFjdXRlO3MgZXQgciZlYWN1dGU7Z2wmZWFjdXRlO3MgcGFyIGxlIHZlbmRldXIuIExlcyBwbHVzOiAtIEF0eXBpcXVlIC0gU3R5bGUgbG9mdCAtIFRyYXZlcnNhbnQgLSBCZWF1IHZvbHVtZSAtIExvY2FsaXNhdGlvbiBUYXhlIGZvbmNpJmVncmF2ZTtyZTogNjA0IGV1cm9zIENoYXJnZXM6IDQ1MCBldXJvcyBwYXIgdHJpbWVzdHJlIGNvbXByZW5hbnQgZWF1IGV0IGVzcGFjZXMgY29tbXVucy4gQ2hhdWZmYWdlIGF1IGdheiBpbmRpdmlkdWVsLiBEb3VibGUgdml0cmFnZS4gVG9pdHVyZSBldCBmYSZjY2VkaWw7YWRlIGVuIGNvdXJzIGRlIHImZWFjdXRlO25vdmF0aW9uIFN1ciBsYSBsb2NhbGlzYXRpb246IElkJmVhY3V0ZTthbGVtZW50IGxvY2FsaXMmZWFjdXRlOyBkYW5zIGxlIDExJmVncmF2ZTttZSBhcnJvbmRpc3NlbWVudCAmYWdyYXZlOyBtb2lucyBkZSAzMDAgbSZlZ3JhdmU7dHJlcyBkZXMgYXJyJmVjaXJjO3RzIGRlIG0mZWFjdXRlO3RybyBSaWNoYXJkIExlbm9pciAobGlnbmUgNSkgZXQgU2FpbnQtQW1icm9pc2UgKGxpZ25lIDkpLiBUb3V0ZXMgY29tbW9kaXQmZWFjdXRlO3MgJmFncmF2ZTsgcHJveGltaXQmZWFjdXRlO3MgTGlicmUgaW1tJmVhY3V0ZTtkaWF0ZW1lbnQuIiBpdGVtcHJvcD0iZGVzY3JpcHRpb24iLz4KICAgICAgICA8aDI+TG9mdCAyIHBpJmVncmF2ZTtjZXMgZGUgNjYuODdtJnN1cDI7IHwgUnVlIGR1IENoZW1pbiBWZXJ0IHwgUGFyaXMgMTEgTGliZXJrZXlzIHZvdXMgcHJvcG9zZSBjZSBsb2Z0PC9oMj4KICAgICAgICA8cD4gVDIgZGUgNjcuNzJtJnN1cDI7ICg2Niw4N20mc3VwMjsgbG9pIENhcnJleikuIFN1ciBsZSBiaWVuOiBMb2Z0IGRlIDIgcGkmZWdyYXZlO2NlcyBzaXR1JmVhY3V0ZTsgYXUgMiZlZ3JhdmU7bWUgJmVhY3V0ZTt0YWdlIGQndW4gYiZhY2lyYzt0aW1lbnQgZW4gZm9uZCBkZSBjb3VyLiBMZSBiaWVuIGVzdCBjb21wb3MmZWFjdXRlOyBkJ3VuZSBlbnRyJmVhY3V0ZTtlIG91dmVydGUsIGQndW4gc2Fsb24gZG9ubmFudCBzdXIgdW5lIGNvdXIgZXQgb3JpZW50JmVhY3V0ZTsgU3VkLUVzdCBkZSAzOG0mc3VwMjssIGQndW5lIGNoYW1icmUgZGUgOSw4NW0mc3VwMjssIGQndW5lIGN1aXNpbmUgYW0mZWFjdXRlO3JpY2FpbmUsIGQndW5lIHNhbGxlIGRlIGJhaW4gYXZlYyBiYWlnbm9pcmUgZXQgZCd1biBXQyBzJmVhY3V0ZTtwYXImZWFjdXRlOy4gTCdhcHBhcnRlbWVudCBlc3QgY2FsbWUgZXQgbHVtaW5ldXguIFJhZnJhJmljaXJjO2NoaXNzZW1lbnQgJmFncmF2ZTsgcHImZWFjdXRlO3ZvaXIuIERhbnMgZCdhbmNpZW5zIGImYWNpcmM7dGltZW50cyBkJ2F0ZWxpZXIgZW4gY291cnMgZGUgciZlYWN1dGU7bm92YXRpb24gKGNvbnNvbGlkYXRpb24sIHImZWFjdXRlO25vdmF0aW9uIGRlcyBmYSZjY2VkaWw7YWRlcykgdm90JmVhY3V0ZTtzIGV0IHImZWFjdXRlO2dsJmVhY3V0ZTtzIHBhciBsZSB2ZW5kZXVyLiBMZXMgcGx1czogLSBBdHlwaXF1ZSAtIFN0eWxlIGxvZnQgLSBUcmF2ZXJzYW50IC0gQmVhdSB2b2x1bWUgLSBMb2NhbGlzYXRpb24gVGF4ZSBmb25jaSZlZ3JhdmU7cmU6IDYwNCBldXJvcyBDaGFyZ2VzOiA0NTAgZXVyb3MgcGFyIHRyaW1lc3RyZSBjb21wcmVuYW50IGVhdSBldCBlc3BhY2VzIGNvbW11bnMuIENoYXVmZmFnZSBhdSBnYXogaW5kaXZpZHVlbC4gRG91YmxlIHZpdHJhZ2UuIFRvaXR1cmUgZXQgZmEmY2NlZGlsO2FkZSBlbiBjb3VycyBkZSByJmVhY3V0ZTtub3ZhdGlvbiBTdXIgbGEgbG9jYWxpc2F0aW9uOiBJZCZlYWN1dGU7YWxlbWVudCBsb2NhbGlzJmVhY3V0ZTsgZGFucyBsZSAxMSZlZ3JhdmU7bWUgYXJyb25kaXNzZW1lbnQgJmFncmF2ZTsgbW9pbnMgZGUgMzAwIG0mZWdyYXZlO3RyZXMgZGVzIGFyciZlY2lyYzt0cyBkZSBtJmVhY3V0ZTt0cm8gUmljaGFyZCBMZW5vaXIgKGxpZ25lIDUpIGV0IFNhaW50LUFtYnJvaXNlIChsaWduZSA5KS4gVG91dGVzIGNvbW1vZGl0JmVhY3V0ZTtzICZhZ3JhdmU7IHByb3hpbWl0JmVhY3V0ZTtzIExpYnJlIGltbSZlYWN1dGU7ZGlhdGVtZW50LjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdGFNb25ldGlzYXRpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWN0c0FnZW5jeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIGxvZ2ljLWJ0bi13aGl0ZSBsb2dpYy1idG4tbGFyZ2Ugb2ZmZXItY29udGFjdC12ZXJ0aWNhbC1waG9uZSBqcy1tYWlsIGJ0bkFkZHJlc3MiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3QtdHlwZT0icGhvbmUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULUZBLU1BSU4tQU5OT05DRS1CVEFEUkVTU0UtUE9QSU5DT05UQUNUIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULUZBLU1BSU4tQU5OT05DRS1CVEFEUkVTU0UtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYXBwZXI9InNhbGUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS14dHBhZ2U9IkZpY2hlX0Fubm9uY2VfQ1RBX09idGVuaXJfbF9hZHJlc3NlIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zaG93bnVtYmVyPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wdXNoY29udGFjdD0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wb3BpbnRpdGxlPSJPYnRlbmlyIGwnYWRyZXNzZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1waW4iPjwvaT4gT2J0ZW5pciBsJ2FkcmVzc2UKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIGxvZ2ljLWJ0bi13aGl0ZSBsb2dpYy1idG4tbGFyZ2Ugb2ZmZXItY29udGFjdC12ZXJ0aWNhbC1waG9uZSBqcy1jYWxsIGJ0bkNhbGwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3QtdHlwZT0icGhvbmUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULUZBLU1BSU4tQU5OT05DRS1CVFJBUFBFTEVSLVBPUElOQ09OVEFDVCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1GQS1NQUlOLUFOTk9OQ0UtQlRSQVBQRUxFUi1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hcHBlcj0ic2FsZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXh0cGFnZT0iRmljaGVfQW5ub25jZV9DVEFfRXRyZV9yYXBwZWxlIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zaG93bnVtYmVyPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wdXNoY29udGFjdD0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wb3BpbnRpdGxlPSLDinRyZSByYXBwZWzDqSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1waG9uZSI+PC9pPiDDinRyZSByYXBwZWzDqQogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gbG9naWMtYnRuLXdoaXRlIGxvZ2ljLWJ0bi1sYXJnZSBvZmZlci1jb250YWN0LXZlcnRpY2FsLXBob25lIGpzLXBob25lIGJ0blZpc2l0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdC10eXBlPSJwaG9uZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtRkEtTUFJTi1BTk5PTkNFLUJUVklTSVRFLVBPUElOQ09OVEFDVCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1GQS1NQUlOLUFOTk9OQ0UtQlRWSVNJVEUtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYXBwZXI9InNhbGUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS14dHBhZ2U9IkZpY2hlX0Fubm9uY2VfQ1RBX0RlbWFuZGVyX3VuZV92aXNpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNob3dudW1iZXI9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXB1c2hjb250YWN0PSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBvcGludGl0bGU9IkRlbWFuZGVyIHVuZSB2aXNpdGUiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tcHJvZmlsIj48L2k+IERlbWFuZGVyIHVuZSB2aXNpdGUKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXNjcmlwdGlvbi1sZWdhbCI+CiAgICAgICAgICAgIDxwPkJpZW4gdmVuZHUgZW4gY29wcm9wcmnDqXTDqTwvcD4KCiAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIDxsaT5OwrAgZHUgbG90IHByw6lzZW50w6kgOiBOQzwvbGk+CiAgICAgICAgICAgICAgICA8bGk+Tm9tYnJlIGRlIGxvdHMgOiAzMDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+Q2hhcmdlcyBwcsOpdmlzaW9ubmVsbGVzIDogMSA4MDAg4oKsIC8gYW48L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJvZmZlci1wcm9jZWR1cmUiPgogICAgICAgICAgICAgICAgICAgIFByb2PDqWR1cmUgZW4gY291cnMgOiBub24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPk1lc3VyZShzKSBlbiBjb3VycyA6IE5DPC9saT4KCiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVuZXJneS1ncmVlbmhvdXNlLXdyYXBwZXIiPgogICAgICAgICAgICA8cCBjbGFzcz0idGl0bGUiPkNvbnNvbW1hdGlvbiDDqW5lcmfDqXRpcXVlPC9wPgogICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGRpdiBjbGFzcz0ib2ZmZXItZW5lcmd5LWdyZWVuaG91c2VlZmZlY3Qtc3VtbWFyeSIgZGF0YS1lbmVyZ3ktZG9zaG93cmVhZG1vcmVsaW5rPSIxIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy02IGVuZXJneS1zdW1tYXJ5Ij4KCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzZWN0aW9uLWxhYmVsIj48aSBjbGFzcz0iaWNvbi1idWxiIj48L2k+IERQRTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEIgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJlbmVyZ3ktcmFuZ2UiPiA9IDUxIMOgIDkwPC9zcGFuPgogICAgICAgICAgICAgICAgCQkJCQkJCQkJPGRpdiBjbGFzcz0iYXJyb3cgIgoJCQkJCQlzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvZnIvc3RhdGljL2RwZS1nZXMvZmxlY2hlLWRwZS1iLnBuZycpIj4KCQkJCQkJQ2F0LiBCICA9IDc2CQkJCQk8L2Rpdj4KCQkJCSAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy02IGdyZWVuaG91c2Utc3VtbWFyeSI+CgkJCTxzcGFuIGNsYXNzPSJzZWN0aW9uLWxhYmVsIj48aSBjbGFzcz0iaWNvbi1jbG91ZCI+PC9pPiBHRVM8L3NwYW4+CgkJCQkJCQlDCQkJCTxzcGFuIGNsYXNzPSJlbmVyZ3ktcmFuZ2UiPiA9IDExIMOgIDIwPC9zcGFuPgoJCQkJCQkJCQkJCQkJPGRpdiBjbGFzcz0iYXJyb3cgIgoJCQkJCQlzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvZnIvc3RhdGljL2RwZS1nZXMvZmxlY2hlLWdlcy1jLnBuZycpIj4KCQkJCQkJQ2F0LiBDICA9IDE4CQkJCQk8L2Rpdj4KCQkJCQkJCSAgICAgICAgPC9kaXY+CgoJPC9kaXY+CjwvZGl2Pgo8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgk8ZGl2IGNsYXNzPSJvZmZlci1lbmVyZ3ktZ3JlZW5ob3VzZWVmZmVjdC1weXJhbWlkIHJvdyI+CgoJCQkJPGRpdiBjbGFzcz0iY29sLXhzLTYgZW5lcnktcHlyYW1pZCI+CgkJCTxkaXYgY2xhc3M9InNlY3Rpb24tbGFiZWwiPkRQRSAoRGlhZ25vc3RpYyBkZSBQZXJmb3JtYW5jZSBFbmVyZ8OpdGlxdWUpPC9kaXY+CgoJCQk8ZGl2IGNsYXNzPSJweXJhbWlkLWxlZ2VuZCI+TG9nZW1lbnQgw6ljb25vbWU8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icm93Ij4KCQkJCTxkaXYgY2xhc3M9ImNvbC14cy05Ij4KCQkJCQk8aW1nIHNyYz0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2ZyL3N0YXRpYy9kcGUtZ2VzL2hhYml0YXRpb24vZXRpcXVldHRlLWRwZS5wbmciIGJvcmRlcj0iMCIgLz4KCQkJCTwvZGl2PgoJCQkJPGRpdiBjbGFzcz0iY29sLXhzLTMiPgoJCQkJCTxkaXYgY2xhc3M9ImFycm93IiBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvZnIvc3RhdGljL2RwZS1nZXMvaGFiaXRhdGlvbi9mbGVjaGUtZ3Jpc2UtYi5wbmcnKTsgaGVpZ2h0OiAxNTNweDsgcGFkZGluZy10b3A6IDI0cHg7ICI+CgkJCQkJCTc2CQkJCQk8L2Rpdj4KCQkJCTwvZGl2PgoJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icHlyYW1pZC1sZWdlbmQiPkxvZ2VtZW50IMOpbmVyZ2l2b3JlPGJyLz5lbiBrV2hFUCAvIG3Csi5hbjwvZGl2PgoKCQk8L2Rpdj4KCQkKCQkJCQk8ZGl2IGNsYXNzPSJjb2wteHMtNiBncmVlbmhvdXNlLXB5cmFtaWQiPgoJCQkJPGRpdiBjbGFzcz0ic2VjdGlvbi1sYWJlbCI+R0VTIChHYXogw6AgRWZmZXQgZGUgU2VycmUpPC9kaXY+CgoJCQkJPGRpdiBjbGFzcz0icHlyYW1pZC1sZWdlbmQiPkZhaWJsZSDDqW1pc3Npb24gZGUgR0VTPC9kaXY+CgkJCQk8ZGl2IGNsYXNzPSJyb3ciPgoJCQkJCTxkaXYgY2xhc3M9ImNvbC14cy05Ij4KCQkJCQkJPGltZyBzcmM9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9mci9zdGF0aWMvZHBlLWdlcy9oYWJpdGF0aW9uL2V0aXF1ZXR0ZS1nZXMucG5nIiBib3JkZXI9IjAiIC8+CgkJCQkJPC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iY29sLXhzLTMiPgoJCQkJCQk8ZGl2IGNsYXNzPSJhcnJvdyIgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybCgnaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2ZyL3N0YXRpYy9kcGUtZ2VzL2hhYml0YXRpb24vZmxlY2hlLWdyaXNlLWMucG5nJyk7IGhlaWdodDogMTUzcHg7IHBhZGRpbmctdG9wOiA0NnB4OyAiPgoJCQkJCQkJMTgJCQkJCQk8L2Rpdj4KCQkJCQk8L2Rpdj4KCQkJCTwvZGl2PgoJCQkJPGRpdiBjbGFzcz0icHlyYW1pZC1sZWdlbmQiPkZvcnRlIMOpbWlzc2lvbiBkZSBHRVM8YnIvPmVuIGtnIGVxIENPMjwvZGl2PgoKCQkJPC9kaXY+CgkJCgk8L2Rpdj4KPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAKICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRlc2NyaXB0aW9uLWxlZ2FsIiBpZD0icHJpY2VBYm91dCI+CiAgICA8cCBpZD0ibGFiZWxQcmljZUFib3V0Ij5BIHByb3BvcyBkdSBwcml4PC9wPgogICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgUHJpeCBkdSBiaWVuIDoKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJibGQiCiAgICAgICAgICAgICAgICAgICAgICBpZD0idmFsdWVQcmljZSI+Nzc1IDAwMCDigqw8L3NwYW4+PGJyLz4KICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJsYWJlbFByaWNlRmVlc091dCI+aG9ycyBmcmFpcyBub3RhcmnDqXMsIGQnZW5yZWdpc3RyZW1lbnQgZXQgZGUgcHVibGljaXTDqSBmb25jacOocmU8L3NwYW4+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8c3BhbiBpZD0ibGFiZWxQcmljZXNGZWVzU2VsbGVyIj5Ib25vcmFpcmVzIMOgIGxhIGNoYXJnZSBkdSB2ZW5kZXVyPC9zcGFuPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CjwvZGl2PgoKICAgICAgICAKICAgIDxwIGNsYXNzPSJvZmZlci1kZXNjcmlwdGlvbi1ub3RlcyI+CiAgICAgICAgICAgICAgICAgICAgTWlzIGVuIGxpZ25lIDogMDEvMDQvMjAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsgfCAmbmJzcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pcyDDoCBqb3VyIDogMDEvMDQvMjAyMCAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgIFLDqWbDqXJlbmNlIDogTEtNMTgzNzY8YnIvPiAgICAgICAgPGJyLz4KICAgICAgICAgICAgPC9wPgo8L3NlY3Rpb24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXZpZXctY29udGVudF9fcmlnaHQtY29sdW1uIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWNvbnRhY3QtdmVydGljYWwiPgogICAgPGgzPkNvbnRhY3RlcjwvaDM+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJhZ2VuY3lJbmZvcyAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2dvV3JhcHBlciI+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxvZ28iIHNyYz0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2FnYy8zNmUvMzZlYmRhMzktZjE4Ni00NWVhLTgyMTItYzcxMThlY2RmNWQ4L2xvZ28vMjYweDE2MF84OTE1YmVmNS0yMmNmLTRhNDItOWQ0ZC05YjYwOTdkMjJjOTIuanBnIi8+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlscyI+CiAgICAgICAgPGRpdiBjbGFzcz0iYWdlbmN5TmFtZSI+TElCRVJLRVlTPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9zX2FyZWEgIG9zX2FnZW5jeV9jYXJkIgogICAgIGRhdGEtb2ZmZXItdW5pdmVyc2U9IjEiCiAgICAgZGF0YS14aXRpLWFjdGlvbi1sYWJlbD0iRmljaGVfQW5ub25jZSI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBkYXRhLWFnZW5jeWlkPSIzNkVCREEzOS1GMTg2LTQ1RUEtODIxMi1DNzExOEVDREY1RDgiCiAgICAgICAgICAgZGF0YS1vZmZlcmlkPSIiICAgICAgICAgICAgZGF0YS1zaG93bGF5ZXI9IjAiCiAgICAgICAgICAgZGF0YS1vcy1zb3VyY2U9IiIgICAgICAgICAgICB2YWx1ZT0iNjQ1MyIgY2xhc3M9Im9zX2lkIj4KICAgIAo8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhZ2VuY3lJbmZvc0J1dHRvbnMgd2l0aExvZ28iPgogICAgICAgIDxidXR0b24gY2xhc3M9InN0YW5kYXJkLWJ0biBzdGFuZGFyZC1idG4tY29yYWwgc3RhbmRhcmQtYnRuLWxhY2VkIGpzLXBvcGluUGhvbmVOdW1iZXIiCiAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzQiCiAgICAgICAgICAgICAgICBkYXRhLWhlaWdodD0iNjcwIgogICAgICAgICAgICAgICAgZGF0YS1jb250YWN0LXR5cGU9InBob25lIgogICAgICAgICAgICAgICAgZGF0YS1zaG93bnVtYmVyPSJ0cnVlIgogICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiCiAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICBkYXRhLWFkU2hvd0Nhc2VMb2NhbGl0eT0iIgogICAgICAgICAgICAgICAgZGF0YS1wb3BpbnRpdGxlPSJDb250YWN0ZXIgbCdhZ2VuY2UiCiAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtRkEtU0lERS1DT05UQUNULUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9IkFmZmljaGFnZV9UZWxlcGhvbmUiIGRhdGEtb2ZmZXJpZD0iN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIiBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIgZGF0YS1hZWlzb3VyY2U9IiIgZGF0YS1pc05ldWY9ImZhbHNlIiAgICAgICAgID4KICAgICAgICAgICAgQWZmaWNoZXIgbGUgbnVtw6lybwogICAgICAgIDwvYnV0dG9uPgoKICAgIDwvZGl2PgogICAgPGZvcm0gYWN0aW9uPSJodHRwcyYjeDNBOyYjeDJGOyYjeDJGO3d3dy5sb2dpYy1pbW1vLmNvbSYjeDJGO0NvbnRhY3RhZ2VuY3kiIG1ldGhvZD0iZ2V0IiBpZD0iY29udGFjdF9tYWlsX2Zvcm0iIG5hbWU9ImNvbnRhY3RfbWFpbF9mb3JtIiBjbGFzcz0iY29udGFjdF9tYWlsX2Zvcm0mI3gyMDtmb3JtLWhvcml6b250YWwmI3gyMDtvZmZlci1jb250YWN0LXZlcnRpY2FsLWZvcm0iIGRhdGEtcG9zaXRpb249IiIgbm92YWxpZGF0ZT0iIj4KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJsYXN0bmFtZSIgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9Ik5vbSIKICAgICAgICAgICAgICAgICAgIGlkPSJ1c2VyX2xhc3RfbmFtZSIKICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtbWQgcmVxdWlyZWQgbGFzdG5hbWUgY2hlY2stZ2RwciIKICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItbWVzc2FnZS1yZXF1aXJlZD0iTm9tIG9ibGlnYXRvaXJlIj4KICAgICAgICAgICAgPGltZyBzcmM9Ii9hc3NldC1jb3JhaWwvaW1nL2ljb25zL2ljb24tMjQtYXZhdGFyLnN2ZyIgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICA8cCBpZD0idXNlcl9sYXN0X25hbWVfZXJyb3JzIiBjbGFzcz0iZXJyb3Itd3JhcHBlciBoZWxwLWJsb2NrIj48L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEgaGVscC1pY29uIHZlcnRpY2FsIj4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tZXhjbGFtYXRpb24iPjwvaT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICAgICAgPGlucHV0IG5hbWU9ImVtYWlsIiB0eXBlPSJlbWFpbCIgcGxhY2Vob2xkZXI9IkVtYWlsIgogICAgICAgICAgICAgICAgICAgaWQ9InVzZXJfZW1haWwiCiAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LW1kIHJlcXVpcmVkIGVtYWlsIGNoZWNrLWdkcHIiCiAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLW1lc3NhZ2UtcmVxdWlyZWQ9IkUtbWFpbCBvYmxpZ2F0b2lyZSIKICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItbWVzc2FnZS1lbWFpbD0iRS1tYWlsIGludmFsaWRlIj4KICAgICAgICAgICAgPGltZyBzcmM9Ii9hc3NldC1jb3JhaWwvaW1nL2ljb25zL2ljb24tMjQtbWFpbC5zdmciIC8+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICAgICAgPHAgaWQ9InVzZXJfZW1haWxfZXJyb3JzIiBjbGFzcz0iZXJyb3Itd3JhcHBlciBoZWxwLWJsb2NrIj48L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEgaGVscC1pY29uIHZlcnRpY2FsIj4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tZXhjbGFtYXRpb24iPjwvaT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtbmFtZT0icGhvbmVfcmlnaHQiIHR5cGU9InRleHQiIHBsYWNlaG9sZGVyPSJUw6lsw6lwaG9uZSIKICAgICAgICAgICAgICAgICAgIGlkPSJ1c2VyX3Bob25lIgogICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1tZCByZXF1aXJlZCBwaG9uZSBjaGVjay1nZHByIgogICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1tZXNzYWdlLXJlcXVpcmVkPSJOwrAgZGUgdMOpbMOpcGhvbmUgb2JsaWdhdG9pcmUiCiAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLW1lc3NhZ2UtcGhvbmU9Ik7CsCBkZSB0w6lsw6lwaG9uZSBpbnZhbGlkZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0LWNvcmFpbC9pbWcvaWNvbnMvaWNvbi0yNC1waG9uZS5zdmciIC8+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICAgICAgPHAgaWQ9InVzZXJfcGhvbmVfZXJyb3JzIiBjbGFzcz0iZXJyb3Itd3JhcHBlciBoZWxwLWJsb2NrIj48L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEgaGVscC1pY29uIHZlcnRpY2FsIj4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tZXhjbGFtYXRpb24iPjwvaT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBtZXNzYWdlIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgbWVzc2FnZVR4dCB1c2VyX21lc3NhZ2UgY2hlY2stZ2RwciIgbmFtZT0ibWVzc2FnZSIgaWQ9InVzZXJfbWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQm9uam91ciwgamUgc3VpcyB2aXZlbWVudCBpbnTDqXJlc3PDqSBwYXIgY2UgYmllbiwgbWVyY2kgZGUgbWUgcmVjb250YWN0ZXIgcG91ciBwbHVzIGQnaW5mb3JtYXRpb25zLiBCaWVuIGNvcmRpYWxlbWVudC4iCiAgICAgICAgICAgICAgICAgICAgZGF0YS10aXRsZT0iQm9uam91ciwgamUgc3VpcyB2aXZlbWVudCBpbnTDqXJlc3PDqSBwYXIgY2UgYmllbiwgbWVyY2kgZGUgbWUgcmVjb250YWN0ZXIgcG91ciBwbHVzIGQnaW5mb3JtYXRpb25zLiBCaWVuIGNvcmRpYWxlbWVudC4iCiAgICAgICAgICAgICAgICAgICAgZGF0YS1hZ2VuY3ktbXNnPSJCb25qb3VyLCBqZSBzdWlzIHZpdmVtZW50IGludMOpcmVzc8OpIHBhciBjZSBiaWVuLCBtZXJjaSBkZSBtZSByZWNvbnRhY3RlciBwb3VyIHBsdXMgZCdpbmZvcm1hdGlvbnMuIEJpZW4gY29yZGlhbGVtZW50LiIKICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3QtbXNnPSJCb25qb3VyLCBqZSBzdWlzIHZpdmVtZW50IGludMOpcmVzc8OpIHBhciBjZSBiaWVuLCBtZXJjaSBkZSBtZSByZWNvbnRhY3RlciBwb3VyIHBsdXMgZCdpbmZvcm1hdGlvbnMuIEJpZW4gY29yZGlhbGVtZW50LiIKICAgICAgICAgICAgICAgID48L3RleHRhcmVhPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNoZWNrYm94ZXMiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCBmb3JtVmVydGljYWwiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJoYXNfcHJvcGVydHlfZm9yX3NhbGUiIGlkPSJvZmZlci1jb250YWN0LXZlcnRpY2FsLWhhc3Byb3BlcnR5IgogICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJoYXNfcHJvcGVydHlfZm9yX3NhbGUiIHZhbHVlPSIxIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibGFiZWxUZXh0IiBmb3I9Im9mZmVyLWNvbnRhY3QtdmVydGljYWwtaGFzcHJvcGVydHkiPkonYWkgw6lnYWxlbWVudCB1biBiaWVuIMOgIGPDqWRlcjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNoZWNrYm94ZXMiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCBmb3JtVmVydGljYWwiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJ3YW50X3NpbWlsYXJfb2ZmZXIiIGlkPSJvZmZlci1jb250YWN0LXZlcnRpY2FsLXNpbWlsYXIiCiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IndhbnRfc2ltaWxhcl9vZmZlciIgdmFsdWU9IjEiPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJsYWJlbFRleHQiIGZvcj0ib2ZmZXItY29udGFjdC12ZXJ0aWNhbC1zaW1pbGFyIiBjbGFzcz0iYWNjZXB0TGFiZWxUZXh0Ij5KJ2FpbWVyYWlzIMOqdHJlIGNvbnRhY3TDqShlKSBwYXIgZGVzCiAgICAgICAgICAgICAgICAgICAgcHJvZmVzc2lvbmVscyBkZSBsJ2ltbW9iaWxpZXIgcGFydGVuYWlyZXMgZGUgTG9naWMtSW1tby5jb20gcG91ciBkZXMgYmllbnMgc2ltaWxhaXJlczwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNoZWNrYm94ZXMiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCBmb3JtVmVydGljYWwiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJ3YW50X25ld19ob3VzaW5nIiBpZD0id2FudF9uZXdfaG91c2luZ18xIgogICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3YW50X25ld19ob3VzaW5nIiB2YWx1ZT0iMSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImxhYmVsVGV4dCIgZm9yPSJ3YW50X25ld19ob3VzaW5nXzEiPgogICAgICAgICAgICAgICAgICAgIEplIG5lIHNvdWhhaXRlIHBhcyByZWNldm9pciBsZXMgYW5ub25jZXMgc2ltaWxhaXJlcyBldCBsZXMgc3VnZ2VzdGlvbnMgcGVyc29ubmFsaXPDqWVzIGRlCiAgICAgICAgICAgICAgICAgICAgTG9naWMtSW1tby5jb20KICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJibG9jay1tb3JlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2Rwci1tb3JlLXZlcnRpY2FsIj5FbiBzYXZvaXIgcGx1czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYmxvY2stb3Blbi12ZXJ0aWNhbCBoaWRkZW4iPlBvdXIgdm91cyBhY2NvbXBhZ25lciBkYW5zIHZvdHJlIHJlY2hlcmNoZSwgdm91cyBwb3VycmV6IMOpZ2FsZW1lbnQgcmVjZXZvaXIgcGFyIGVtYWlsIG91IG5vdGlmaWNhdGlvbiBkYW5zIHZvdHJlIGFwcGxpY2F0aW9uIG1vYmlsZSBMb2dpYy1JbW1vLmNvbSwKICAgICAgICAgICAgICAgICAgICAgICAgbGVzIGFubm9uY2VzIGltbW9iaWxpw6hyZXMgc2ltaWxhaXJlcyBjb3JyZXNwb25kYW50IMOgIHZvcyBjcml0w6hyZXMgZGUgcmVjaGVyY2hlIGFpbnNpIHF1ZSBub3MgcHJvcG9zaXRpb25zIGRlIHNlcnZpY2VzIGF1dG91ciBkZSB2b3RyZSBwcm9qZXQgaW1tb2JpbGllci4KICAgICAgICAgICAgICAgICAgICAgICAgRGFucyBjZSBjYWRyZSwgdm9zIGNvb3Jkb25uw6llcyBuZSBzb250IHBhcyBjb21tdW5pcXXDqWVzIMOgIGRlcyB0aWVycy48L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgb2ZmZXItY29udGFjdC12ZXJ0aWNhbC1zZW5kLWJsb2NrIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICA8YnV0dG9uIGlkPSJjb250YWN0X2J0biIKICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI5MzUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1oZWlnaHQ9Ijc3MCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibG9naWMtYnRuIGxvZ2ljLWJ0bi1yZWQgbG9naWMtYnRuLW1lZGl1bSBvZmZlci1jb250YWN0LXZlcnRpY2FsLXNlbmQiPkVudm95ZXIKICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ3YW50X21zZ19jb3B5X3JpZ2h0IiBpZD0id2FudF9tc2dfY29weV9yaWdodCIgY2xhc3M9IndhbnQtbXNnLWNvcHkiIGRhdGEtY29weS1jb250YWN0LWNhbXBhaWduPSJDT1BZQ09OVEFHV0VCQUQxIiB2YWx1ZT0idHJ1ZSI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY29udGFjdF91cmxfbW9kYWxfcmlnaHQiIGlkPSJjb250YWN0X3VybF9tb2RhbF9yaWdodCIgY2xhc3M9ImNvbnRhY3QtdXJsLW1vZGFsIiB2YWx1ZT0iIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjb250YWN0X3NvdXJjZV9yaWdodCIgaWQ9ImNvbnRhY3Rfc291cmNlX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7Y29udGFjdC1zb3VyY2UiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iY29udGFjdF9zb3VyY2UiIHZhbHVlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtRkEtU0lERS1DT05UQUNULUZPUk1DT05UQUNULVNJVEUiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFlaV9zb3VyY2VfcmlnaHQiIGlkPSJhZWlfc291cmNlX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7YWVpLXNvdXJjZSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZWlfc291cmNlIiB2YWx1ZT0iIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjb250YWN0X3B1c2hjb250YWN0X3JpZ2h0IiBpZD0iY29udGFjdF9wdXNoY29udGFjdF9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO2NvbnRhY3QtcHVzaGNvbnRhY3QiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iY29udGFjdF9wdXNoY29udGFjdCIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY29udGFjdF9zaXRlX3JpZ2h0IiBpZD0iY29udGFjdF9zaXRlX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7Y29udGFjdC1zaXRlIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImNvbnRhY3Rfc2l0ZSIgdmFsdWU9IkxJRlIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RfbGFuZ3VhZ2VfcmlnaHQiIGlkPSJjb250YWN0X2xhbmd1YWdlX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7Y29udGFjdC1sYW5ndWFnZSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJjb250YWN0X2xhbmd1YWdlIiB2YWx1ZT0iZnIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RfcG9zaXRpb25fcmlnaHQiIGlkPSJjb250YWN0X3Bvc2l0aW9uX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7Y29udGFjdC1wb3NpdGlvbiIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJjb250YWN0X3Bvc2l0aW9uIiB2YWx1ZT0iIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjb250YWN0X2NvdW50cnlfcmlnaHQiIGlkPSJjb250YWN0X2NvdW50cnlfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtjb250YWN0LWNvdW50cnkiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iY29udGFjdF9jb3VudHJ5IiB2YWx1ZT0iRlIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RfY2FtcGFpZ25fcmlnaHQiIGlkPSJjb250YWN0X2NhbXBhaWduX3JpZ2h0IiBjbGFzcz0iY29udGFjdC1jYW1wYWlnbiIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJjb250YWN0X2NhbXBhaWduIiB2YWx1ZT0iQ09OVEFHV0VCQUQxIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjb250YWN0X3VuaXZlcnNlX3JpZ2h0IiBpZD0iY29udGFjdF91bml2ZXJzZV9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO2NvbnRhY3QtdW5pdmVyc2UiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iY29udGFjdF91bml2ZXJzZSIgdmFsdWU9IjEiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX3Byb3BlcnR5X3R5cGVfbGFiZWxfcmlnaHQiIGlkPSJvZmZlcl9wcm9wZXJ0eV90eXBlX2xhYmVsX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItcHJvcGVydHktdHlwZS1sYWJlbCIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9wcm9wZXJ0eV90eXBlX2xhYmVsIiB2YWx1ZT0iQXBwYXJ0ZW1lbnQiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX25iX3Jvb21zX3JpZ2h0IiBpZD0ib2ZmZXJfbmJfcm9vbXNfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1uYi1yb29tcyIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9uYl9yb29tcyIgdmFsdWU9IjImI3gyMDtwaSYjeEU4O2NlcyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfdHJhbnNhY3Rpb25fdHlwZV9yaWdodCIgaWQ9Im9mZmVyX3RyYW5zYWN0aW9uX3R5cGVfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfdHJhbnNhY3Rpb25fdHlwZSIgdmFsdWU9IjEiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX29ubGluZV9kYXRlX3JpZ2h0IiBpZD0ib2ZmZXJfb25saW5lX2RhdGVfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfb25saW5lX2RhdGUiIHZhbHVlPSIyMDIwMDQwMSI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfZGlzdHJpY3RzX3JpZ2h0IiBpZD0ib2ZmZXJfZGlzdHJpY3RzX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2Rpc3RyaWN0cyIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfaGVhdGluZ19yaWdodCIgaWQ9Im9mZmVyX2hlYXRpbmdfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfaGVhdGluZyIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfZGVwZW5kZW5jeV9yaWdodCIgaWQ9Im9mZmVyX2RlcGVuZGVuY3lfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfZGVwZW5kZW5jeSIgdmFsdWU9IiYjeDI1OzVCU2FsbGVfc19fZGVfYmFpbiYjeDI1OzVEIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9hcnJhbmdlbWVudF9yaWdodCIgaWQ9Im9mZmVyX2FycmFuZ2VtZW50X3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2FycmFuZ2VtZW50IiB2YWx1ZT0iIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9hcmVhX3JpZ2h0IiBpZD0ib2ZmZXJfYXJlYV9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9hcmVhIiB2YWx1ZT0iNjcmI3gyMDttJiN4QjI7JiN4MjA7ZW52aXJvbiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfZGVmYXVsdF9zZWN0b3JfcmlnaHQiIGlkPSJvZmZlcl9kZWZhdWx0X3NlY3Rvcl9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLWRlZmF1bHQtc2VjdG9yIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2RlZmF1bHRfc2VjdG9yIiB2YWx1ZT0iUEFSSVMmI3gyMDsxMSI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfcG9zdF9jb2RlX3JpZ2h0IiBpZD0ib2ZmZXJfcG9zdF9jb2RlX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItcG9zdC1jb2RlIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX3Bvc3RfY29kZSIgdmFsdWU9Ijc1MDExIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9wcmljZV9yaWdodCIgaWQ9Im9mZmVyX3ByaWNlX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItcHJpY2UiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfcHJpY2UiIHZhbHVlPSI3NzUmI3gyMDswMDAmI3gyMDsmI3gyMEFDOyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfbnVtX21hbmRhdF9yaWdodCIgaWQ9Im9mZmVyX251bV9tYW5kYXRfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1udW0tbWFuZGF0IiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX251bV9tYW5kYXQiIHZhbHVlPSIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX3RleHRfcmlnaHQiIGlkPSJvZmZlcl90ZXh0X3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItdGV4dCIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl90ZXh0IiB2YWx1ZT0iTG9mdCYjeDIwOzImI3gyMDtwaSZhbXA7ZWdyYXZlJiN4M0I7Y2VzJiN4MjA7ZGUmI3gyMDs2Ni44N20mYW1wO3N1cDImI3gzQjsmI3gyMDsmI3g3QzsmI3gyMDtSdWUmI3gyMDtkdSYjeDIwO0NoZW1pbiYjeDIwO1ZlcnQmI3gyMDsmI3g3QzsmI3gyMDtQYXJpcyYjeDIwOzExJiN4MjA7TGliZXJrZXlzJiN4MjA7dm91cyYjeDIwO3Byb3Bvc2UmI3gyMDtjZSYjeDIwO2xvZnQmI3gyMDtUMiYjeDIwO2RlJiN4MjA7NjcuNzJtJmFtcDtzdXAyJiN4M0I7JiN4MjA7JiN4Mjg7NjYsODdtJmFtcDtzdXAyJiN4M0I7JiN4MjA7bG9pJiN4MjA7Q2FycmV6JiN4Mjk7LiYjeDIwO1N1ciYjeDIwO2xlJiN4MjA7YmllbiYjeDNBOyYjeDIwO0xvZnQmI3gyMDtkZSYjeDIwOzImI3gyMDtwaSZhbXA7ZWdyYXZlJiN4M0I7Y2VzJiN4MjA7c2l0dSZhbXA7ZWFjdXRlJiN4M0I7JiN4MjA7YXUmI3gyMDsyJmFtcDtlZ3JhdmUmI3gzQjttZSYjeDIwOyZhbXA7ZWFjdXRlJiN4M0I7dGFnZSYjeDIwO2QmI3gyNzt1biYjeDIwO2ImYW1wO2FjaXJjJiN4M0I7dGltZW50JiN4MjA7ZW4mI3gyMDtmb25kJiN4MjA7ZGUmI3gyMDtjb3VyLiYjeDIwO0xlJiN4MjA7YmllbiYjeDIwO2VzdCYjeDIwO2NvbXBvcyZhbXA7ZWFjdXRlJiN4M0I7JiN4MjA7ZCYjeDI3O3VuZSYjeDIwO2VudHImYW1wO2VhY3V0ZSYjeDNCO2UmI3gyMDtvdXZlcnRlLCYjeDIwO2QmI3gyNzt1biYjeDIwO3NhbG9uJiN4MjA7ZG9ubmFudCYjeDIwO3N1ciYjeDIwO3VuZSYjeDIwO2NvdXImI3gyMDtldCYjeDIwO29yaWVudCZhbXA7ZWFjdXRlJiN4M0I7JiN4MjA7U3VkLUVzdCYjeDIwO2RlJiN4MjA7MzhtJmFtcDtzdXAyJiN4M0I7LCYjeDIwO2QmI3gyNzt1bmUmI3gyMDtjaGFtYnJlJiN4MjA7ZGUmI3gyMDs5LDg1bSZhbXA7c3VwMiYjeDNCOywmI3gyMDtkJiN4Mjc7dW5lJiN4MjA7Y3Vpc2luZSYjeDIwO2FtJmFtcDtlYWN1dGUmI3gzQjtyaWNhaW5lLCYjeDIwO2QmI3gyNzt1bmUmI3gyMDtzYWxsZSYjeDIwO2RlJiN4MjA7YmFpbiYjeDIwO2F2ZWMmI3gyMDtiYWlnbm9pcmUmI3gyMDtldCYjeDIwO2QmI3gyNzt1biYjeDIwO1dDJiN4MjA7cyZhbXA7ZWFjdXRlJiN4M0I7cGFyJmFtcDtlYWN1dGUmI3gzQjsuJiN4MjA7TCYjeDI3O2FwcGFydGVtZW50JiN4MjA7ZXN0JiN4MjA7Y2FsbWUmI3gyMDtldCYjeDIwO2x1bWluZXV4LiYjeDIwO1JhZnJhJmFtcDtpY2lyYyYjeDNCO2NoaXNzZW1lbnQmI3gyMDsmYW1wO2FncmF2ZSYjeDNCOyYjeDIwO3ByJmFtcDtlYWN1dGUmI3gzQjt2b2lyLiYjeDIwO0RhbnMmI3gyMDtkJiN4Mjc7YW5jaWVucyYjeDIwO2ImYW1wO2FjaXJjJiN4M0I7dGltZW50cyYjeDIwO2QmI3gyNzthdGVsaWVyJiN4MjA7ZW4mI3gyMDtjb3VycyYjeDIwO2RlJiN4MjA7ciZhbXA7ZWFjdXRlJiN4M0I7bm92YXRpb24mI3gyMDsmI3gyODtjb25zb2xpZGF0aW9uLCYjeDIwO3ImYW1wO2VhY3V0ZSYjeDNCO25vdmF0aW9uJiN4MjA7ZGVzJiN4MjA7ZmEmYW1wO2NjZWRpbCYjeDNCO2FkZXMmI3gyOTsmI3gyMDt2b3QmYW1wO2VhY3V0ZSYjeDNCO3MmI3gyMDtldCYjeDIwO3ImYW1wO2VhY3V0ZSYjeDNCO2dsJmFtcDtlYWN1dGUmI3gzQjtzJiN4MjA7cGFyJiN4MjA7bGUmI3gyMDt2ZW5kZXVyLiYjeDIwO0xlcyYjeDIwO3BsdXMmI3gzQTsmI3gyMDstJiN4MjA7QXR5cGlxdWUmI3gyMDstJiN4MjA7U3R5bGUmI3gyMDtsb2Z0JiN4MjA7LSYjeDIwO1RyYXZlcnNhbnQmI3gyMDstJiN4MjA7QmVhdSYjeDIwO3ZvbHVtZSYjeDIwOy0mI3gyMDtMb2NhbGlzYXRpb24mI3gyMDtUYXhlJiN4MjA7Zm9uY2kmYW1wO2VncmF2ZSYjeDNCO3JlJiN4M0E7JiN4MjA7NjA0JiN4MjA7ZXVyb3MmI3gyMDtDaGFyZ2VzJiN4M0E7JiN4MjA7NDUwJiN4MjA7ZXVyb3MmI3gyMDtwYXImI3gyMDt0cmltZXN0cmUmI3gyMDtjb21wcmVuYW50JiN4MjA7ZWF1JiN4MjA7ZXQmI3gyMDtlc3BhY2VzJiN4MjA7Y29tbXVucy4mI3gyMDtDaGF1ZmZhZ2UmI3gyMDthdSYjeDIwO2dheiYjeDIwO2luZGl2aWR1ZWwuJiN4MjA7RG91YmxlJiN4MjA7dml0cmFnZS4mI3gyMDtUb2l0dXJlJiN4MjA7ZXQmI3gyMDtmYSZhbXA7Y2NlZGlsJiN4M0I7YWRlJiN4MjA7ZW4mI3gyMDtjb3VycyYjeDIwO2RlJiN4MjA7ciZhbXA7ZWFjdXRlJiN4M0I7bm92YXRpb24mI3gyMDtTdXImI3gyMDtsYSYjeDIwO2xvY2FsaXNhdGlvbiYjeDNBOyYjeDIwO0lkJmFtcDtlYWN1dGUmI3gzQjthbGVtZW50JiN4MjA7bG9jYWxpcyZhbXA7ZWFjdXRlJiN4M0I7JiN4MjA7ZGFucyYjeDIwO2xlJiN4MjA7MTEmYW1wO2VncmF2ZSYjeDNCO21lJiN4MjA7YXJyb25kaXNzZW1lbnQmI3gyMDsmYW1wO2FncmF2ZSYjeDNCOyYjeDIwO21vaW5zJiN4MjA7ZGUmI3gyMDszMDAmI3gyMDttJmFtcDtlZ3JhdmUmI3gzQjt0cmVzJiN4MjA7ZGVzJiN4MjA7YXJyJmFtcDtlY2lyYyYjeDNCO3RzJiN4MjA7ZGUmI3gyMDttJmFtcDtlYWN1dGUmI3gzQjt0cm8mI3gyMDtSaWNoYXJkJiN4MjA7TGVub2lyJiN4MjA7JiN4Mjg7bGlnbmUmI3gyMDs1JiN4Mjk7JiN4MjA7ZXQmI3gyMDtTYWludC1BbWJyb2lzZSYjeDIwOyYjeDI4O2xpZ25lJiN4MjA7OSYjeDI5Oy4mI3gyMDtUb3V0ZXMmI3gyMDtjb21tb2RpdCZhbXA7ZWFjdXRlJiN4M0I7cyYjeDIwOyZhbXA7YWdyYXZlJiN4M0I7JiN4MjA7cHJveGltaXQmYW1wO2VhY3V0ZSYjeDNCO3MmI3gyMDtMaWJyZSYjeDIwO2ltbSZhbXA7ZWFjdXRlJiN4M0I7ZGlhdGVtZW50LiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfZmxhZ19yaWdodCIgaWQ9Im9mZmVyX2ZsYWdfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlcl9mbGFnIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2ZsYWciIHZhbHVlPSJpc1N0YW5kYXJkIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY3lfZW1haWxfcmlnaHQiIGlkPSJhZ2VuY3lfZW1haWxfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDthZ2VuY3ktZW1haWwiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iYWdlbmN5X2VtYWlsIiB2YWx1ZT0iWVdjM05USTJORGRBZFdKcFpteHZkeTV1WlhRJiN4M0Q7Ij48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9yZWZlcmVuY2VfcmlnaHQiIGlkPSJvZmZlcl9yZWZlcmVuY2VfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1yZWZlcmVuY2UiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfcmVmZXJlbmNlIiB2YWx1ZT0iTEtNMTgzNzYiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX2lkX3JpZ2h0IiBpZD0ib2ZmZXJfaWRfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1pZCIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9pZCIgdmFsdWU9IjdEQkU1MUIwLTM2REUtOUQ5Qi1GNTZCLTQ1RDFBQzZCMENDQyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfbG9jX2lkX3JpZ2h0IiBpZD0ib2ZmZXJfbG9jX2lkX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItbG9jLWlkIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2xvY19pZCIgdmFsdWU9IjIzNTkwIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY3lfaWRfcmlnaHQiIGlkPSJhZ2VuY3lfaWRfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDthZ2VuY3ktaWQiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iYWdlbmN5X2lkIiB2YWx1ZT0iMzZFQkRBMzktRjE4Ni00NUVBLTgyMTItQzcxMThFQ0RGNUQ4Ij48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY3lfaWRfcHJlc3RvX3JpZ2h0IiBpZD0iYWdlbmN5X2lkX3ByZXN0b19yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO2FnZW5jeS1pZC1wcmVzdG8iIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iYWdlbmN5X2lkX3ByZXN0byIgdmFsdWU9IjE0ODg4NDMiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jeV9pZF9yY3VfcmlnaHQiIGlkPSJhZ2VuY3lfaWRfcmN1X3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImFnZW5jeV9pZF9yY3UiIHZhbHVlPSJSQy0wODcwMjYiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jeV9tdWx0aV9jb250YWN0X3JpZ2h0IiBpZD0iYWdlbmN5X211bHRpX2NvbnRhY3RfcmlnaHQiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iYWdlbmN5X211bHRpX2NvbnRhY3QiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIHZhbHVlPSJleUpqYjI1MFlXTjBjeUk2VzNzaWJtOXRJam9pVEVsQ1JWSkxSVmxUSWl3aWRHVnNJam9pTURZME5EWTBORGN3TnlJc0ltWmhlQ0k2SWlJc0ltMWhhV3dpT2lKaFp6YzFNalkwTjBCMVltbG1iRzkzTG01bGRDSXNJbk5wZEdVaU9pSWlMQ0owZVhCbFEyOXVkR0ZqZENJNklpSXNJbVJsYm05dGFXNWhkR2x2YmlJNklpSXNJbkJvYjNSdklqb2lJaXdpYVhOUWNtbHVZMmx3WVd3aU9pSXhJbjFkZlEmI3gzRDsmI3gzRDsiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX3ByZ19yZWZlcmVuY2VfcmlnaHQiIGlkPSJvZmZlcl9wcmdfcmVmZXJlbmNlX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItcHJnLXJlZmVyZW5jZSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9wcmdfcmVmZXJlbmNlIiB2YWx1ZT0iIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9wcmdfdGl0bGVfcmlnaHQiIGlkPSJvZmZlcl9wcmdfdGl0bGVfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1wcmctdGl0bGUiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfcHJnX3RpdGxlIiB2YWx1ZT0iIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl91cmxfcmlnaHQiIGlkPSJvZmZlcl91cmxfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci11cmwiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfdXJsIiB2YWx1ZT0iaHR0cHMmI3gzQTsmI3gyRjsmI3gyRjt3d3cubG9naWMtaW1tby5jb20mI3gyRjtkZXRhaWwtdmVudGUtN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDLmh0bSI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfaW1nX3VybF9yaWdodCIgaWQ9Im9mZmVyX2ltZ191cmxfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1pbWctdXJsIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2ltZ191cmwiIHZhbHVlPSJodHRwcyYjeDNBOyYjeDJGOyYjeDJGO21tZi5sb2dpYy1pbW1vLmNvbSYjeDJGO21tZiYjeDJGO2FkcyYjeDJGO3Bob3RvLXByb3AtMjYweDIwNSYjeDJGOzdkYiYjeDJGO2ImI3gyRjtiNTRlZmFmMC05YzUxLTRmM2EtYWZmMi00MzNjOTEzMGJhZDMuanBnIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9pbWdfc21hbGxfdXJsX3JpZ2h0IiBpZD0ib2ZmZXJfaW1nX3NtYWxsX3VybF9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLWltZy1zbWFsbC11cmwiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfaW1nX3NtYWxsX3VybCIgdmFsdWU9Imh0dHBzJiN4M0E7JiN4MkY7JiN4MkY7bW1mLmxvZ2ljLWltbW8uY29tJiN4MkY7bW1mJiN4MkY7YWRzJiN4MkY7cGhvdG8tcHJvcC0xMjN4OTAmI3gyRjs3ZGImI3gyRjtiJiN4MkY7YjU0ZWZhZjAtOWM1MS00ZjNhLWFmZjItNDMzYzkxMzBiYWQzLmpwZyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfaWRfYmllbl9yaWdodCIgaWQ9Im9mZmVyX2lkX2JpZW5fcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1pZC1iaWVuIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2lkX2JpZW4iIHZhbHVlPSI3NDE1MTE5MyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfaWRfYmllbl9wcm9ncmFtX3JpZ2h0IiBpZD0ib2ZmZXJfaWRfYmllbl9wcm9ncmFtX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItaWQtYmllbi1wcm9ncmFtIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2lkX2JpZW5fcHJvZ3JhbSIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfaXNfZXhjbHVzaXZlX3JpZ2h0IiBpZD0ib2ZmZXJfaXNfZXhjbHVzaXZlX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXJfaXNfZXhjbHVzaXZlIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2lzX2V4Y2x1c2l2ZSIgdmFsdWU9IjAiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlZ2lvbl9yaWdodCIgaWQ9InJlZ2lvbl9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJyZWdpb24iIHZhbHVlPSIxIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkZXB0X3JpZ2h0IiBpZD0iZGVwdF9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJkZXB0IiB2YWx1ZT0iMTAwIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwb3N0Q29kZV9yaWdodCIgaWQ9InBvc3RDb2RlX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9InBvc3RDb2RlIiB2YWx1ZT0iNzUwMTEiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jeV9mcmFuY2hpc2luZ19yaWdodCIgaWQ9ImFnZW5jeV9mcmFuY2hpc2luZ19yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZ2VuY3lfZnJhbmNoaXNpbmciIHZhbHVlPSIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNlYXJjaF90cmFuc2FjdGlvbl9yaWdodCIgaWQ9InNlYXJjaF90cmFuc2FjdGlvbl9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO3NlYXJjaC10cmFuc2FjdGlvbiIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJzZWFyY2hfdHJhbnNhY3Rpb24iIHZhbHVlPSIxIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvcmlnaW5faW1wb3J0X2lkX3JpZ2h0IiBpZD0ib3JpZ2luX2ltcG9ydF9pZF9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29yaWdpbi1pbXBvcnQtaWQiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib3JpZ2luX2ltcG9ydF9pZCIgdmFsdWU9IjExNzQ4MDAzMyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZW1haWxfc3ViamVjdF9yaWdodCIgaWQ9ImVtYWlsX3N1YmplY3RfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iZW1haWxfc3ViamVjdCIgdmFsdWU9IlVuJiN4MjA7aW50ZXJuYXV0ZSYjeDIwO2VzdCYjeDIwO2ludCYjeEU5O3Jlc3MmI3hFOTsmI3gyMDtwYXImI3gyMDt2b3RyZSYjeDIwO2Fubm9uY2UmI3gyMDtMS00xODM3NiYjeDIwO3N1ciYjeDIwO0xvZ2ljLUltbW8uY29tIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJlbWFpbF9zdWJqZWN0X2NvcHlfcmlnaHQiIGlkPSJlbWFpbF9zdWJqZWN0X2NvcHlfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iZW1haWxfc3ViamVjdF9jb3B5IiB2YWx1ZT0iVm91cyYjeDIwO2F2ZXomI3gyMDtjb250YWN0JiN4RTk7JiN4MjA7dW5lJiN4MjA7YWdlbmNlJiN4MjA7c3VyJiN4MjA7bGUmI3gyMDtzaXRlJiN4MjA7TG9naWMtSW1tby5jb20iPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRhdGVfb2ZfZGF5X3JpZ2h0IiBpZD0iZGF0ZV9vZl9kYXlfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtkYXRlLW9mLWRheSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJkYXRlX29mX2RheSIgdmFsdWU9IjIwMjAwNDAxIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwb25kZXJpbmdfdG90YWxfcmlnaHQiIGlkPSJwb25kZXJpbmdfdG90YWxfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0icG9uZGVyaW5nX3RvdGFsIiB2YWx1ZT0iMSYjeDIwOzAxMCYjeDIwOzE1NiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmN5X25hbWVfcmlnaHQiIGlkPSJhZ2VuY3lfbmFtZV9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZ2VuY3lfbmFtZSIgdmFsdWU9IkxJQkVSS0VZUyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmN5X3Rvd25fcmlnaHQiIGlkPSJhZ2VuY3lfdG93bl9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZ2VuY3lfdG93biIgdmFsdWU9IlBBUklTIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY3lfcG9zdF9jb2RlX3JpZ2h0IiBpZD0iYWdlbmN5X3Bvc3RfY29kZV9yaWdodCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZ2VuY3lfcG9zdF9jb2RlIiB2YWx1ZT0iNzUwMDgiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jeV9lbWFpbF9tZDVfcmlnaHQiIGlkPSJhZ2VuY3lfZW1haWxfbWQ1X3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImFnZW5jeV9lbWFpbF9tZDUiIHZhbHVlPSI4MTFlOTgyZjBiNjg3ODY2NzAyNGUwZTMyOGZiNGQ5ZCI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmN5X3Bob25lX2I2NF9yaWdodCIgaWQ9ImFnZW5jeV9waG9uZV9iNjRfcmlnaHQiIHZhbHVlPSJNRFkwTkRZME5EY3dOdyYjeDNEOyYjeDNEOyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmN5X2lzX2R1b19yaWdodCIgaWQ9ImFnZW5jeV9pc19kdW9fcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iYWdlbmN5X2lzX2R1byIgdmFsdWU9IkRVTyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfaWRfcGFzc2VyZWxsZV9yaWdodCIgaWQ9Im9mZmVyX2lkX3Bhc3NlcmVsbGVfcmlnaHQiIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfaWRfcGFzc2VyZWxsZSIgdmFsdWU9IjE1ODExMzIyMSI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icGhvbmVfcmlnaHQiIGlkPSJwaG9uZV9yaWdodCIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icGxhbmJvb3N0X3JpZ2h0IiBpZD0icGxhbmJvb3N0X3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9InBsYW5ib29zdCIgdmFsdWU9IjEiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1vZGVfcmlnaHQiIGlkPSJtb2RlX3JpZ2h0IiBjbGFzcz0ibW9kZSIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWRfc2hvd19jYXNlX2xvY2FsaXR5X3JpZ2h0IiBpZD0iYWRfc2hvd19jYXNlX2xvY2FsaXR5X3JpZ2h0IiBjbGFzcz0iYWRfc2hvd19jYXNlX2xvY2FsaXR5IiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImFkX3Nob3dfY2FzZV9sb2NhbGl0eSIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfY29tbWVyY2lhbF9uYW1lX3JpZ2h0IiBpZD0ib2ZmZXJfY29tbWVyY2lhbF9uYW1lX3JpZ2h0IiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2NvbW1lcmNpYWxfbmFtZSIgdmFsdWU9IkR1bzMiPiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJnZHByLWNvbnRhaW5lciI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJnZHByLXdvcmRpbmcgZ2Rwci13b3JkaW5nLTEgZ2Rwci1oaWRkZW4iPgogICAgICAgICAgICBWb3MgaW5mb3JtYXRpb25zIHNvbnQgdHJhaXTDqWVzIHBhciBEaWdpdGFsIENsYXNzaWZpZWRzIEZyYW5jZSBldCB0cmFuc21pc2VzIGF1IHByb2Zlc3Npb25uZWwgZGUgbOKAmWltbW9iaWxpZXIgcXVlIHZvdXMgc291aGFpdGV6IGNvbnRhY3RlcgphZmluIGRlIGfDqXJlciB2b3RyZSBkZW1hbmRlIGFpbnNpIHF14oCZw6Agbm90cmUgcHJlc3RhdGFpcmUgZGUgZ2VzdGlvbiBxdWkgcG91cnJhIHZvdXMgY29udGFjdGVyIHBhciB0w6lsw6lwaG9uZSBwb3VyIHN1aXZyZSB2b3RyZSBkZW1hbmRlLgpQb3VyIGV4ZXJjZXIgdm9zIGRyb2l0cyBjb25mb3Jtw6ltZW50IMOgIGxhIGxvaSBJbmZvcm1hdGlxdWUgZXQgTGliZXJ0w6lzIMK7LCA8c3BhbiBjbGFzcz0iZ2Rwci1saW5rLW1vcmUiPmNsaXF1ZXogaWNpPC9zcGFuPi4gICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZ2Rwci13b3JkaW5nIGdkcHItd29yZGluZy0yIGdkcHItaGlkZGVuIj4KICAgICAgICBWb3VzIHBvdXZleiBhY2PDqWRlciBhdXggZG9ubsOpZXMgdm91cyBjb25jZXJuYW50LCBsZXMgZmFpcmUgcmVjdGlmaWVyIG91IGRlbWFuZGVyIGxldXIgZWZmYWNlbWVudC4KVm91cyBkaXNwb3NleiDDqWdhbGVtZW50IGQndW4gZHJvaXQgZOKAmW9wcG9zaXRpb24sIGTigJl1biBkcm9pdCDDoCBsYSBwb3J0YWJpbGl0w6kgZXQgZOKAmXVuIGRyb2l0IMOgIGxhIGxpbWl0YXRpb24gZHUgdHJhaXRlbWVudCBkZXMgZG9ubsOpZXMgcXVpIHZvdXMgY29uY2VybmVudCBxdWUgdm91cyBwb3V2ZXogZXhlcmNlciBlbiB2b3VzIGFkcmVzc2FudCDDoCA6CkxvZ2ljLUltbW8uY29tIC8gRGlnaXRhbCBDbGFzc2lmaWVkcyBGcmFuY2UgLSA2NSBSdWUgT3JkZW5lciwgNzU4ODAgUGFyaXMgQ2VkZXggMTggb3UgZW4KPGEgY2xhc3M9ImdkcHItbGluay1jZ3UiCiAgICBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9jb250YWN0ZXotbm91cyIgICB0YXJnZXQ9Il9ibGFuayI+Y2xpcXVhbnQgaWNpPC9hPi4gUG91ciBwbHVzIGTigJlpbmZvcm1hdGlvbnMsIHZvdXMgcG91dmV6IMOpZ2FsZW1lbnQgY29uc3VsdGVyIG5vcwo8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9jb25kaXRpb25zLWdlbmVyYWxlcy1kLXV0aWxpc2F0aW9uLmh0bWwiIHRpdGxlPSJDR1UgJiBQb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqSIgY2xhc3M9ImdkcHItbGluay1jZ3UiIHRhcmdldD0iX2JsYW5rIj5DR1UgJiBQb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT4uICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwvZm9ybT48L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHRCbG9jayI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIHNtYXJ0QWRTZXJ2ZXJCbG9jayIKICAgICBpZD0ic2FzXzU4MDQyIj48L2Rpdj4KPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIHNtYXJ0QWRTZXJ2ZXJCbG9jayIKICAgICBpZD0ic2FzXzU4MDY1Ij48L2Rpdj4KPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIHNtYXJ0QWRTZXJ2ZXJCbG9jayIKICAgICBpZD0ic2FzXzU4MDY2Ij48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+CgoKPHNlY3Rpb24gaWQ9ImNvbnRhY3QtYmxvY2stdmVydGljYWwiIGNsYXNzPSJjb250YWluZXIgYWdlbmN5LXNlY3Rpb24iPgogICAgPGEgaWQ9ImFnZW5jZUNvbnRhY3RGb3JtIiBjbGFzcz0iYWdlbmNlQ29udGFjdEZvcm0iIG5hbWU9ImFnZW5jZUNvbnRhY3RGb3JtIj48L2E+CiAgICA8ZGl2IGNsYXNzPSJjb250YWN0QWdlbmN5QmxvY2siPgogICAgPGgzIGNsYXNzPSJibG9ja1RpdGxlIj5Db250YWN0ZXIgY2UgcHJvZmVzc2lvbm5lbDwvaDM+CiAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWdlbmN5Q2FyZCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZ2VuY3lJbmZvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZ2VuY3lDYXJkIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGl0ZW1zY29wZT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZExvZ28iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZ2VuY3lMb2dvIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxpYmVya2V5cy5jb20vIiB0aXRsZT0iTElCRVJLRVlTIiBjbGFzcz0iaW1nLWxpcXVpZCBjYXJkTG9nb0xpbmsiIHRhcmdldD0iMSIgb25jbGljaz0idG9wLnh0X2FkYyh0aGlzLCAnUFVCLTEtNzQxNTExOTMtLVtEdW8zXS1bTEldLVswNDAxMDJdLVsxNDg4ODQzXScpOyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Ii9pbWFnZXMvY29tbW9uL2dyZXkuZ2lmIiBhbHQ9IkxJQkVSS0VZUyIgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2FnYy8zNmUvMzZlYmRhMzktZjE4Ni00NWVhLTgyMTItYzcxMThlY2RmNWQ4L2xvZ28vMjYweDE2MF84OTE1YmVmNS0yMmNmLTRhNDItOWQ0ZC05YjYwOTdkMjJjOTIuanBnIiBjbGFzcz0ibGF6eSI+PC9hPiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNhcmRUb3BJbmZvcyI+CiAgICAgICAgPHAgY2xhc3M9ImNhcmROYW1lIj4KICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InNlbGxlciI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2FnZW5jZS1pbW1vYmlsaWVyZS9wYXJpcy04ZS9hbm5vbmNlcy1pbW1vYmlsaWVyLXBhcmlzLThlXzc1MDA4LTM2RUJEQTM5LUYxODYtNDVFQS04MjEyLUM3MTE4RUNERjVEOC5odG1sIiB0aXRsZT0iTElCRVJLRVlTIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdBY3Rpb25fRmljaGVfQW5ub25jZTo6Q29uc3VsdGVyX0ZpY2hlX0FnZW5jZTo6Q29uc3VsdGVyX0ZpY2hlX0FnZW5jZScsICdOJyk7Ij5MSUJFUktFWVM8L2E+ICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvcD4KICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgIDxkaXY+NzUwMDgmbmJzcDtQQVJJUyA4RU1FPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9zX2FyZWEgIG9zX2FnZW5jeV9jYXJkIgogICAgIGRhdGEtb2ZmZXItdW5pdmVyc2U9IjEiCiAgICAgZGF0YS14aXRpLWFjdGlvbi1sYWJlbD0iRmljaGVfQW5ub25jZSI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBkYXRhLWFnZW5jeWlkPSIzNkVCREEzOS1GMTg2LTQ1RUEtODIxMi1DNzExOEVDREY1RDgiCiAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiICAgICAgICAgICAgZGF0YS1zaG93bGF5ZXI9IjEiCiAgICAgICAgICAgZGF0YS1vcy1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1GQS1NQUlOLUNPTlRBQ1QtQlRPUFNZUy1QT1BJTk9QU1lTIiBkYXRhLW9zLW9yaWdpbj0ib2ZmZXJWaWV3IiAgICAgICAgICAgdmFsdWU9IjY0NTMiIGNsYXNzPSJvc19pZCI+CiAgICAKPC9kaXY+ICAgICAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhZ2VuY3lCdXR0b25zIj4KICAgIDxidXR0b24gY2xhc3M9InN0YW5kYXJkLWJ0biBzdGFuZGFyZC1idG4tY29yYWwgc3RhbmRhcmQtYnRuLWxhY2VkIGpzLXBvcGluUGhvbmVOdW1iZXIiCiAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNCIKICAgICAgICAgICAgZGF0YS1oZWlnaHQ9IjY5NSIKICAgICAgICAgICAgZGF0YS1jb250YWN0LXR5cGU9InBob25lIgogICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiCiAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgIGRhdGEtbWFwcGVyPSJzYWxlIgogICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgZGF0YS1zaG93bnVtYmVyPSJ0cnVlIgogICAgICAgICAgICBkYXRhLWFkU2hvd0Nhc2VMb2NhbGl0eT0iIgogICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtRkEtTUFJTi1DT05UQUNULUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9IkFmZmljaGFnZV9UZWxlcGhvbmUiIGRhdGEtb2ZmZXJpZD0iN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIiBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIgZGF0YS1hZWlzb3VyY2U9IiIgZGF0YS1pc05ldWY9ImZhbHNlIiA+CiAgICAgICAgQWZmaWNoZXIgbGUgbnVtw6lybwogICAgPC9idXR0b24+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0iYWdlbmN5SW5mb3MiPgogICAgPGRpdiBjbGFzcz0iaW5mb3NJbm5lciI+CgogICAgICAgIAo8ZGl2IGNsYXNzPSJvZmZlcnNUb3RhbCI+CiAgICBDb25zdWx0ZXogICAgIGxlcyA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hZ2VuY2UtaW1tb2JpbGllcmUvcGFyaXMtOGUvYW5ub25jZXMtaW1tb2JpbGllci1wYXJpcy04ZV83NTAwOC0zNkVCREEzOS1GMTg2LTQ1RUEtODIxMi1DNzExOEVDREY1RDguaHRtbCIgdGl0bGU9IjEwOCBhbm5vbmNlcyIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0ZpY2hlX0Fubm9uY2U6OkNvbnN1bHRlcl9GaWNoZV9BZ2VuY2U6OkNvbnN1bHRlcl9GaWNoZV9BZ2VuY2UnLCAnTicpOyI+PHNwYW4+MTA4IGFubm9uY2VzPC9zcGFuPjwvYT4gICAgZGUgY2UgcHJvZmVzc2lvbm5lbCBkZSBsJ2ltbW9iaWxpZXI8L2Rpdj4KCiAgICAgICAgPHVsIGNsYXNzPSJpbmZvc0xpbmtzIGFkZGl0aW9uYWxJbmZvcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYnNpdGVMaW5rIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5saWJlcmtleXMuY29tLyIgdGl0bGU9IkxJQkVSS0VZUyIgY2xhc3M9ImxpbmsiIHRhcmdldD0iMSIgb25jbGljaz0idG9wLnh0X2FkYyh0aGlzLCAnUFVCLTEtNzQxNTExOTMtLVtEdW8zXS1bTEldLVswNDAxMDJdLVsxNDg4ODQzXScpOyIgcmVsPSJub2ZvbGxvdyI+Vm9pciBsZSBzaXRlIGRlIGNlIHByb2Zlc3Npb25uZWw8L2E+ICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJzaXRlUHJpY2UiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaW5rIiBocmVmPSJodHRwczovL2xpYmVya2V5cy5jb20iIGlkPSJsYWJlbFByaWNlRmVlU2NoZWR1bGVQcm8iCiAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9mb2xsb3ciPgogICAgICAgICAgICAgICAgICAgICAgICBUw6lsw6ljaGFyZ2VyIGxlIGJhcsOobWUgZGVzIGhvbm9yYWlyZXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYnNpdGVMZWdhbCI+ICAgIDxkaXYgY2xhc3M9ImFnZW5jeUFkZGl0aW9uSW5mbyI+CiAgICAgICAgPHVsIGNsYXNzPSJsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIFNJUkVOIDogODMwNjA5MjQ0ICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgIDwvZGl2Pgo8L2xpPgogICAgICAgIDwvdWw+CiAgICAgICAgPC91bD4KICAgIDwvZGl2Pgo8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImJsb2NrRm9ybSI+CiAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iaHR0cHMmI3gzQTsmI3gyRjsmI3gyRjt3d3cubG9naWMtaW1tby5jb20mI3gyRjtDb250YWN0YWdlbmN5IiBtZXRob2Q9ImdldCIgaWQ9ImNvbnRhY3RfbWFpbF9mb3JtIiBuYW1lPSJjb250YWN0X21haWxfZm9ybSIgY2xhc3M9ImNvbnRhY3RfbWFpbF9mb3JtJiN4MjA7Zm9ybS1ob3Jpem9udGFsJiN4MjA7b2ZmZXItY29udGFjdC1ob3Jpem9udGFsLWZvcm0iIGRhdGEtcG9zaXRpb249IiIgbm92YWxpZGF0ZT0iIj4gICAgPGRpdiBjbGFzcz0iaG9yaXpvbnRhbC1jb250YWN0LWZvcm0iPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0idXNlcl9sYXN0X25hbWVfYm90dG9tIiB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iTm9tIgogICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0idXNlcl9sYXN0X25hbWVfYm90dG9tIgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LW1kIHJlcXVpcmVkIGxhc3RuYW1lIGNoZWNrLWdkcHIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItbWVzc2FnZS1yZXF1aXJlZD0iTm9tIG9ibGlnYXRvaXJlIj4KICAgICAgICAgICAgICAgICAgICA8cCBpZD0idXNlcl9sYXN0X25hbWVfYm90dG9tX2Vycm9ycyIgY2xhc3M9ImVycm9yLXdyYXBwZXIgaGVscC1ibG9jayI+PC9wPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoZWxwLWJsb2NrIj5Ob20gb2JsaWdhdG9pcmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9hc3NldC1jb3JhaWwvaW1nL2ljb25zL2ljb24tMjQtYXZhdGFyLnN2ZyIgLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEgaGVscC1pY29uIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1leGNsYW1hdGlvbiI+PC9pPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9InVzZXJfZW1haWxfYm90dG9tIiB0eXBlPSJlbWFpbCIgcGxhY2Vob2xkZXI9IkVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgIGlkPSJ1c2VyX2VtYWlsX2JvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LW1kIHJlcXVpcmVkIGVtYWlsIGNoZWNrLWdkcHIiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1tZXNzYWdlLXJlcXVpcmVkPSJFbWFpbCBvYmxpZ2F0b2lyZSIKICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLW1lc3NhZ2UtZW1haWw9IkVtYWlsIGludmFsaWRlIj4KICAgICAgICAgICAgICAgIDxwIGlkPSJ1c2VyX2VtYWlsX2JvdHRvbV9lcnJvcnMiIGNsYXNzPSJlcnJvci13cmFwcGVyIGhlbHAtYmxvY2siPjwvcD4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoZWxwLWJsb2NrIj5FbWFpbCBvYmxpZ2F0b2lyZTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoZWxwLWJsb2NrIj5FbWFpbCBpbnZhbGlkZTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvYXNzZXQtY29yYWlsL2ltZy9pY29ucy9pY29uLTI0LW1haWwuc3ZnIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEgaGVscC1pY29uIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWV4Y2xhbWF0aW9uIj48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgZGF0YS1uYW1lPSJwaG9uZV9ib3R0b20iIHR5cGU9InRlbCIgcGxhY2Vob2xkZXI9IlZvdHJlIG51bcOpcm8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJ1c2VyX3Bob25lX2JvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1tZCByZXF1aXJlZCBwaG9uZSBjaGVjay1nZHByIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLW1lc3NhZ2UtcmVxdWlyZWQ9Ik7CsCBkZSB0w6lsw6lwaG9uZSBvYmxpZ2F0b2lyZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1tZXNzYWdlLXBob25lPSJOwrAgZGUgdMOpbMOpcGhvbmUgaW52YWxpZGUiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxwIGlkPSJ1c2VyX3Bob25lX2JvdHRvbV9lcnJvcnMiIGNsYXNzPSJlcnJvci13cmFwcGVyIGhlbHAtYmxvY2siPjwvcD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGVscC1ibG9jayI+VMOpbMOpcGhvbmUgb2JsaWdhdG9pcmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhlbHAtYmxvY2siPk51bcOpcm8gaW52YWxpZGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9hc3NldC1jb3JhaWwvaW1nL2ljb25zL2ljb24tMjQtcGhvbmUuc3ZnIiAvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMSBoZWxwLWljb24iPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWV4Y2xhbWF0aW9uIj48L2k+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgbWVzc2FnZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCB1c2VyX21lc3NhZ2UgY2hlY2stZ2RwciIKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJ1c2VyX21lc3NhZ2VfYm90dG9tIiBpZD0idXNlcl9tZXNzYWdlX2JvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQm9uam91ciwgamUgc3VpcyB2aXZlbWVudCBpbnTDqXJlc3PDqSBwYXIgY2UgYmllbiwgbWVyY2kgZGUgbWUgcmVjb250YWN0ZXIgcG91ciBwbHVzIGQnaW5mb3JtYXRpb25zLiBCaWVuIGNvcmRpYWxlbWVudC4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aXRsZT0iQm9uam91ciwgamUgc3VpcyB2aXZlbWVudCBpbnTDqXJlc3PDqSBwYXIgY2UgYmllbiwgbWVyY2kgZGUgbWUgcmVjb250YWN0ZXIgcG91ciBwbHVzIGQnaW5mb3JtYXRpb25zLiBCaWVuIGNvcmRpYWxlbWVudC4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0LW1zZz0iQm9uam91ciwgamUgc3VpcyB2aXZlbWVudCBpbnTDqXJlc3PDqSBwYXIgY2UgYmllbiwgbWVyY2kgZGUgbWUgcmVjb250YWN0ZXIgcG91ciBwbHVzIGQnaW5mb3JtYXRpb25zLiBCaWVuIGNvcmRpYWxlbWVudC4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZ2VuY3ktbXNnPSJCb25qb3VyLCBqZSBzdWlzIHZpdmVtZW50IGludMOpcmVzc8OpIHBhciBjZSBiaWVuLCBtZXJjaSBkZSBtZSByZWNvbnRhY3RlciBwb3VyIHBsdXMgZCdpbmZvcm1hdGlvbnMuIEJpZW4gY29yZGlhbGVtZW50LiIKICAgICAgICAgICAgICAgID48L3RleHRhcmVhPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNoZWNrYm94ZXMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9Imhhc19wcm9wZXJ0eV9mb3Jfc2FsZV9ib3R0b20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9Im9mZmVyLWNvbnRhY3QtaG9yaXpvbnRhbC1oYXNwcm9wZXJ0eV9ib3R0b20iIGNsYXNzPSJoYXNfcHJvcGVydHlfZm9yX3NhbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJvZmZlci1jb250YWN0LWhvcml6b250YWwtaGFzcHJvcGVydHlfYm90dG9tIj5KJ2FpIMOpZ2FsZW1lbnQgdW4gYmllbiDDoAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY8OpZGVyPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY2hlY2tib3hlcyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0id2FudF9zaW1pbGFyX29mZmVyX2JvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJvZmZlci1jb250YWN0LWhvcml6b250YWwtc2ltaWxhcl9ib3R0b20iIGNsYXNzPSJ3YW50X3NpbWlsYXJfb2ZmZXIiIHZhbHVlPSIxIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJvZmZlci1jb250YWN0LWhvcml6b250YWwtc2ltaWxhcl9ib3R0b20iPkonYWltZXJhaXMgw6p0cmUgY29udGFjdMOpKGUpIHBhciBkZXMgcHJvZmVzc2lvbm5lbHMgZGUgbCdpbW1vYmlsaWVyIHBhcnRlbmFpcmVzIGRlIExvZ2ljLUltbW8uY29tIHBvdXIgZGVzIGJpZW5zIHNpbWlsYWlyZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY2hlY2tib3hlcyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0id2FudF9uZXdfaG91c2luZyIgaWQ9IndhbnRfbmV3X2hvdXNpbmdfMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3YW50X25ld19ob3VzaW5nIiB2YWx1ZT0iMSI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0id2FudF9uZXdfaG91c2luZ18yIj4KICAgICAgICAgICAgICAgICAgICAgICAgSmUgbmUgc291aGFpdGUgcGFzIHJlY2V2b2lyIGxlcyBhbm5vbmNlcyBzaW1pbGFpcmVzIGV0IGxlcyBzdWdnZXN0aW9ucyBwZXJzb25uYWxpc8OpZXMgZGUKICAgICAgICAgICAgICAgICAgICAgICAgTG9naWMtSW1tby5jb20KICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJsb2NrLW1vcmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2Rwci1tb3JlLWhvcml6b250YWwiPkVuIHNhdm9pciBwbHVzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYmxvY2stb3Blbi1ob3Jpem9udGFsIGhpZGRlbiI+UG91ciB2b3VzIGFjY29tcGFnbmVyIGRhbnMgdm90cmUgcmVjaGVyY2hlLCB2b3VzIHBvdXJyZXogw6lnYWxlbWVudCByZWNldm9pciBwYXIgZW1haWwgb3Ugbm90aWZpY2F0aW9uIGRhbnMgdm90cmUgYXBwbGljYXRpb24gbW9iaWxlIExvZ2ljLUltbW8uY29tLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVzIGFubm9uY2VzIGltbW9iaWxpw6hyZXMgc2ltaWxhaXJlcyBjb3JyZXNwb25kYW50IMOgIHZvcyBjcml0w6hyZXMgZGUgcmVjaGVyY2hlIGFpbnNpIHF1ZSBub3MgcHJvcG9zaXRpb25zIGRlIHNlcnZpY2VzIGF1dG91ciBkZSB2b3RyZSBwcm9qZXQgaW1tb2JpbGllci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhbnMgY2UgY2FkcmUsIHZvcyBjb29yZG9ubsOpZXMgbmUgc29udCBwYXMgY29tbXVuaXF1w6llcyDDoCBkZXMgdGllcnMuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iY29udGFjdF9idG5fYm90dG9tIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibG9naWMtYnRuIGxvZ2ljLWJ0bi1yZWQgbG9naWMtYnRuLWxhcmdlIG9mZmVyLWNvbnRhY3QtaG9yaXpvbnRhbC1zZW5kIj5FbnZveWVyIGxlCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZQogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2Rwci1jb250YWluZXIiPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2Rwci13b3JkaW5nIGdkcHItd29yZGluZy0xIGdkcHItaGlkZGVuIj4KICAgICAgICAgICAgVm9zIGluZm9ybWF0aW9ucyBzb250IHRyYWl0w6llcyBwYXIgRGlnaXRhbCBDbGFzc2lmaWVkcyBGcmFuY2UgZXQgdHJhbnNtaXNlcyBhdSBwcm9mZXNzaW9ubmVsIGRlIGzigJlpbW1vYmlsaWVyIHF1ZSB2b3VzIHNvdWhhaXRleiBjb250YWN0ZXIKYWZpbiBkZSBnw6lyZXIgdm90cmUgZGVtYW5kZSBhaW5zaSBxdeKAmcOgIG5vdHJlIHByZXN0YXRhaXJlIGRlIGdlc3Rpb24gcXVpIHBvdXJyYSB2b3VzIGNvbnRhY3RlciBwYXIgdMOpbMOpcGhvbmUgcG91ciBzdWl2cmUgdm90cmUgZGVtYW5kZS4KUG91ciBleGVyY2VyIHZvcyBkcm9pdHMgY29uZm9ybcOpbWVudCDDoCBsYSBsb2kgSW5mb3JtYXRpcXVlIGV0IExpYmVydMOpcyDCuywgPHNwYW4gY2xhc3M9ImdkcHItbGluay1tb3JlIj5jbGlxdWV6IGljaTwvc3Bhbj4uICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImdkcHItd29yZGluZyBnZHByLXdvcmRpbmctMiBnZHByLWhpZGRlbiI+CiAgICAgICAgVm91cyBwb3V2ZXogYWNjw6lkZXIgYXV4IGRvbm7DqWVzIHZvdXMgY29uY2VybmFudCwgbGVzIGZhaXJlIHJlY3RpZmllciBvdSBkZW1hbmRlciBsZXVyIGVmZmFjZW1lbnQuClZvdXMgZGlzcG9zZXogw6lnYWxlbWVudCBkJ3VuIGRyb2l0IGTigJlvcHBvc2l0aW9uLCBk4oCZdW4gZHJvaXQgw6AgbGEgcG9ydGFiaWxpdMOpIGV0IGTigJl1biBkcm9pdCDDoCBsYSBsaW1pdGF0aW9uIGR1IHRyYWl0ZW1lbnQgZGVzIGRvbm7DqWVzIHF1aSB2b3VzIGNvbmNlcm5lbnQgcXVlIHZvdXMgcG91dmV6IGV4ZXJjZXIgZW4gdm91cyBhZHJlc3NhbnQgw6AgOgpMb2dpYy1JbW1vLmNvbSAvIERpZ2l0YWwgQ2xhc3NpZmllZHMgRnJhbmNlIC0gNjUgUnVlIE9yZGVuZXIsIDc1ODgwIFBhcmlzIENlZGV4IDE4IG91IGVuCjxhIGNsYXNzPSJnZHByLWxpbmstY2d1IgogICAgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vY29udGFjdGV6LW5vdXMiICAgdGFyZ2V0PSJfYmxhbmsiPmNsaXF1YW50IGljaTwvYT4uIFBvdXIgcGx1cyBk4oCZaW5mb3JtYXRpb25zLCB2b3VzIHBvdXZleiDDqWdhbGVtZW50IGNvbnN1bHRlciBub3MKPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vY29uZGl0aW9ucy1nZW5lcmFsZXMtZC11dGlsaXNhdGlvbi5odG1sIiB0aXRsZT0iQ0dVICYgUG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6kiIGNsYXNzPSJnZHByLWxpbmstY2d1IiB0YXJnZXQ9Il9ibGFuayI+Q0dVICYgUG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6k8L2E+LiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ3YW50X21zZ19jb3B5X2JvdHRvbSIgaWQ9IndhbnRfbXNnX2NvcHlfYm90dG9tIiBjbGFzcz0id2FudC1tc2ctY29weSIgZGF0YS1jb3B5LWNvbnRhY3QtY2FtcGFpZ249IkNPUFlDT05UQUdXRUJBRDEiIHZhbHVlPSJ0cnVlIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjb250YWN0X3VybF9tb2RhbF9ib3R0b20iIGlkPSJjb250YWN0X3VybF9tb2RhbF9ib3R0b20iIGNsYXNzPSJjb250YWN0LXVybC1tb2RhbCIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY29udGFjdF9zb3VyY2VfYm90dG9tIiBpZD0iY29udGFjdF9zb3VyY2VfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7Y29udGFjdC1zb3VyY2UiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iY29udGFjdF9zb3VyY2UiIHZhbHVlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtRkEtTUFJTi1DT05UQUNULUZPUk1DT05UQUNULVNJVEUiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFlaV9zb3VyY2VfYm90dG9tIiBpZD0iYWVpX3NvdXJjZV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDthZWktc291cmNlIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImFlaV9zb3VyY2UiIHZhbHVlPSIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RfcHVzaGNvbnRhY3RfYm90dG9tIiBpZD0iY29udGFjdF9wdXNoY29udGFjdF9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtjb250YWN0LXB1c2hjb250YWN0IiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImNvbnRhY3RfcHVzaGNvbnRhY3QiIHZhbHVlPSIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3Rfc2l0ZV9ib3R0b20iIGlkPSJjb250YWN0X3NpdGVfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7Y29udGFjdC1zaXRlIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImNvbnRhY3Rfc2l0ZSIgdmFsdWU9IkxJRlIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RfbGFuZ3VhZ2VfYm90dG9tIiBpZD0iY29udGFjdF9sYW5ndWFnZV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtjb250YWN0LWxhbmd1YWdlIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImNvbnRhY3RfbGFuZ3VhZ2UiIHZhbHVlPSJmciI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY29udGFjdF9wb3NpdGlvbl9ib3R0b20iIGlkPSJjb250YWN0X3Bvc2l0aW9uX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO2NvbnRhY3QtcG9zaXRpb24iIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iY29udGFjdF9wb3NpdGlvbiIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY29udGFjdF9jb3VudHJ5X2JvdHRvbSIgaWQ9ImNvbnRhY3RfY291bnRyeV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtjb250YWN0LWNvdW50cnkiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iY29udGFjdF9jb3VudHJ5IiB2YWx1ZT0iRlIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RfY2FtcGFpZ25fYm90dG9tIiBpZD0iY29udGFjdF9jYW1wYWlnbl9ib3R0b20iIGNsYXNzPSJjb250YWN0LWNhbXBhaWduIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImNvbnRhY3RfY2FtcGFpZ24iIHZhbHVlPSJDT05UQUdXRUJBRDEiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RfdW5pdmVyc2VfYm90dG9tIiBpZD0iY29udGFjdF91bml2ZXJzZV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtjb250YWN0LXVuaXZlcnNlIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImNvbnRhY3RfdW5pdmVyc2UiIHZhbHVlPSIxIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9wcm9wZXJ0eV90eXBlX2xhYmVsX2JvdHRvbSIgaWQ9Im9mZmVyX3Byb3BlcnR5X3R5cGVfbGFiZWxfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItcHJvcGVydHktdHlwZS1sYWJlbCIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9wcm9wZXJ0eV90eXBlX2xhYmVsIiB2YWx1ZT0iQXBwYXJ0ZW1lbnQiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX25iX3Jvb21zX2JvdHRvbSIgaWQ9Im9mZmVyX25iX3Jvb21zX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLW5iLXJvb21zIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX25iX3Jvb21zIiB2YWx1ZT0iMiYjeDIwO3BpJiN4RTg7Y2VzIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl90cmFuc2FjdGlvbl90eXBlX2JvdHRvbSIgaWQ9Im9mZmVyX3RyYW5zYWN0aW9uX3R5cGVfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX3RyYW5zYWN0aW9uX3R5cGUiIHZhbHVlPSIxIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9vbmxpbmVfZGF0ZV9ib3R0b20iIGlkPSJvZmZlcl9vbmxpbmVfZGF0ZV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfb25saW5lX2RhdGUiIHZhbHVlPSIyMDIwMDQwMSI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfZGlzdHJpY3RzX2JvdHRvbSIgaWQ9Im9mZmVyX2Rpc3RyaWN0c19ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfZGlzdHJpY3RzIiB2YWx1ZT0iIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9oZWF0aW5nX2JvdHRvbSIgaWQ9Im9mZmVyX2hlYXRpbmdfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2hlYXRpbmciIHZhbHVlPSIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX2RlcGVuZGVuY3lfYm90dG9tIiBpZD0ib2ZmZXJfZGVwZW5kZW5jeV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfZGVwZW5kZW5jeSIgdmFsdWU9IiYjeDI1OzVCU2FsbGVfc19fZGVfYmFpbiYjeDI1OzVEIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9hcnJhbmdlbWVudF9ib3R0b20iIGlkPSJvZmZlcl9hcnJhbmdlbWVudF9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfYXJyYW5nZW1lbnQiIHZhbHVlPSIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX2FyZWFfYm90dG9tIiBpZD0ib2ZmZXJfYXJlYV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfYXJlYSIgdmFsdWU9IjY3JiN4MjA7bSYjeEIyOyYjeDIwO2Vudmlyb24iPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX2RlZmF1bHRfc2VjdG9yX2JvdHRvbSIgaWQ9Im9mZmVyX2RlZmF1bHRfc2VjdG9yX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLWRlZmF1bHQtc2VjdG9yIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2RlZmF1bHRfc2VjdG9yIiB2YWx1ZT0iUEFSSVMmI3gyMDsxMSI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfcG9zdF9jb2RlX2JvdHRvbSIgaWQ9Im9mZmVyX3Bvc3RfY29kZV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1wb3N0LWNvZGUiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfcG9zdF9jb2RlIiB2YWx1ZT0iNzUwMTEiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX3ByaWNlX2JvdHRvbSIgaWQ9Im9mZmVyX3ByaWNlX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLXByaWNlIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX3ByaWNlIiB2YWx1ZT0iNzc1JiN4MjA7MDAwJiN4MjA7JiN4MjBBQzsiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX251bV9tYW5kYXRfYm90dG9tIiBpZD0ib2ZmZXJfbnVtX21hbmRhdF9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1udW0tbWFuZGF0IiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX251bV9tYW5kYXQiIHZhbHVlPSIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX3RleHRfYm90dG9tIiBpZD0ib2ZmZXJfdGV4dF9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci10ZXh0IiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX3RleHQiIHZhbHVlPSJMb2Z0JiN4MjA7MiYjeDIwO3BpJmFtcDtlZ3JhdmUmI3gzQjtjZXMmI3gyMDtkZSYjeDIwOzY2Ljg3bSZhbXA7c3VwMiYjeDNCOyYjeDIwOyYjeDdDOyYjeDIwO1J1ZSYjeDIwO2R1JiN4MjA7Q2hlbWluJiN4MjA7VmVydCYjeDIwOyYjeDdDOyYjeDIwO1BhcmlzJiN4MjA7MTEmI3gyMDtMaWJlcmtleXMmI3gyMDt2b3VzJiN4MjA7cHJvcG9zZSYjeDIwO2NlJiN4MjA7bG9mdCYjeDIwO1QyJiN4MjA7ZGUmI3gyMDs2Ny43Mm0mYW1wO3N1cDImI3gzQjsmI3gyMDsmI3gyODs2Niw4N20mYW1wO3N1cDImI3gzQjsmI3gyMDtsb2kmI3gyMDtDYXJyZXomI3gyOTsuJiN4MjA7U3VyJiN4MjA7bGUmI3gyMDtiaWVuJiN4M0E7JiN4MjA7TG9mdCYjeDIwO2RlJiN4MjA7MiYjeDIwO3BpJmFtcDtlZ3JhdmUmI3gzQjtjZXMmI3gyMDtzaXR1JmFtcDtlYWN1dGUmI3gzQjsmI3gyMDthdSYjeDIwOzImYW1wO2VncmF2ZSYjeDNCO21lJiN4MjA7JmFtcDtlYWN1dGUmI3gzQjt0YWdlJiN4MjA7ZCYjeDI3O3VuJiN4MjA7YiZhbXA7YWNpcmMmI3gzQjt0aW1lbnQmI3gyMDtlbiYjeDIwO2ZvbmQmI3gyMDtkZSYjeDIwO2NvdXIuJiN4MjA7TGUmI3gyMDtiaWVuJiN4MjA7ZXN0JiN4MjA7Y29tcG9zJmFtcDtlYWN1dGUmI3gzQjsmI3gyMDtkJiN4Mjc7dW5lJiN4MjA7ZW50ciZhbXA7ZWFjdXRlJiN4M0I7ZSYjeDIwO291dmVydGUsJiN4MjA7ZCYjeDI3O3VuJiN4MjA7c2Fsb24mI3gyMDtkb25uYW50JiN4MjA7c3VyJiN4MjA7dW5lJiN4MjA7Y291ciYjeDIwO2V0JiN4MjA7b3JpZW50JmFtcDtlYWN1dGUmI3gzQjsmI3gyMDtTdWQtRXN0JiN4MjA7ZGUmI3gyMDszOG0mYW1wO3N1cDImI3gzQjssJiN4MjA7ZCYjeDI3O3VuZSYjeDIwO2NoYW1icmUmI3gyMDtkZSYjeDIwOzksODVtJmFtcDtzdXAyJiN4M0I7LCYjeDIwO2QmI3gyNzt1bmUmI3gyMDtjdWlzaW5lJiN4MjA7YW0mYW1wO2VhY3V0ZSYjeDNCO3JpY2FpbmUsJiN4MjA7ZCYjeDI3O3VuZSYjeDIwO3NhbGxlJiN4MjA7ZGUmI3gyMDtiYWluJiN4MjA7YXZlYyYjeDIwO2JhaWdub2lyZSYjeDIwO2V0JiN4MjA7ZCYjeDI3O3VuJiN4MjA7V0MmI3gyMDtzJmFtcDtlYWN1dGUmI3gzQjtwYXImYW1wO2VhY3V0ZSYjeDNCOy4mI3gyMDtMJiN4Mjc7YXBwYXJ0ZW1lbnQmI3gyMDtlc3QmI3gyMDtjYWxtZSYjeDIwO2V0JiN4MjA7bHVtaW5ldXguJiN4MjA7UmFmcmEmYW1wO2ljaXJjJiN4M0I7Y2hpc3NlbWVudCYjeDIwOyZhbXA7YWdyYXZlJiN4M0I7JiN4MjA7cHImYW1wO2VhY3V0ZSYjeDNCO3ZvaXIuJiN4MjA7RGFucyYjeDIwO2QmI3gyNzthbmNpZW5zJiN4MjA7YiZhbXA7YWNpcmMmI3gzQjt0aW1lbnRzJiN4MjA7ZCYjeDI3O2F0ZWxpZXImI3gyMDtlbiYjeDIwO2NvdXJzJiN4MjA7ZGUmI3gyMDtyJmFtcDtlYWN1dGUmI3gzQjtub3ZhdGlvbiYjeDIwOyYjeDI4O2NvbnNvbGlkYXRpb24sJiN4MjA7ciZhbXA7ZWFjdXRlJiN4M0I7bm92YXRpb24mI3gyMDtkZXMmI3gyMDtmYSZhbXA7Y2NlZGlsJiN4M0I7YWRlcyYjeDI5OyYjeDIwO3ZvdCZhbXA7ZWFjdXRlJiN4M0I7cyYjeDIwO2V0JiN4MjA7ciZhbXA7ZWFjdXRlJiN4M0I7Z2wmYW1wO2VhY3V0ZSYjeDNCO3MmI3gyMDtwYXImI3gyMDtsZSYjeDIwO3ZlbmRldXIuJiN4MjA7TGVzJiN4MjA7cGx1cyYjeDNBOyYjeDIwOy0mI3gyMDtBdHlwaXF1ZSYjeDIwOy0mI3gyMDtTdHlsZSYjeDIwO2xvZnQmI3gyMDstJiN4MjA7VHJhdmVyc2FudCYjeDIwOy0mI3gyMDtCZWF1JiN4MjA7dm9sdW1lJiN4MjA7LSYjeDIwO0xvY2FsaXNhdGlvbiYjeDIwO1RheGUmI3gyMDtmb25jaSZhbXA7ZWdyYXZlJiN4M0I7cmUmI3gzQTsmI3gyMDs2MDQmI3gyMDtldXJvcyYjeDIwO0NoYXJnZXMmI3gzQTsmI3gyMDs0NTAmI3gyMDtldXJvcyYjeDIwO3BhciYjeDIwO3RyaW1lc3RyZSYjeDIwO2NvbXByZW5hbnQmI3gyMDtlYXUmI3gyMDtldCYjeDIwO2VzcGFjZXMmI3gyMDtjb21tdW5zLiYjeDIwO0NoYXVmZmFnZSYjeDIwO2F1JiN4MjA7Z2F6JiN4MjA7aW5kaXZpZHVlbC4mI3gyMDtEb3VibGUmI3gyMDt2aXRyYWdlLiYjeDIwO1RvaXR1cmUmI3gyMDtldCYjeDIwO2ZhJmFtcDtjY2VkaWwmI3gzQjthZGUmI3gyMDtlbiYjeDIwO2NvdXJzJiN4MjA7ZGUmI3gyMDtyJmFtcDtlYWN1dGUmI3gzQjtub3ZhdGlvbiYjeDIwO1N1ciYjeDIwO2xhJiN4MjA7bG9jYWxpc2F0aW9uJiN4M0E7JiN4MjA7SWQmYW1wO2VhY3V0ZSYjeDNCO2FsZW1lbnQmI3gyMDtsb2NhbGlzJmFtcDtlYWN1dGUmI3gzQjsmI3gyMDtkYW5zJiN4MjA7bGUmI3gyMDsxMSZhbXA7ZWdyYXZlJiN4M0I7bWUmI3gyMDthcnJvbmRpc3NlbWVudCYjeDIwOyZhbXA7YWdyYXZlJiN4M0I7JiN4MjA7bW9pbnMmI3gyMDtkZSYjeDIwOzMwMCYjeDIwO20mYW1wO2VncmF2ZSYjeDNCO3RyZXMmI3gyMDtkZXMmI3gyMDthcnImYW1wO2VjaXJjJiN4M0I7dHMmI3gyMDtkZSYjeDIwO20mYW1wO2VhY3V0ZSYjeDNCO3RybyYjeDIwO1JpY2hhcmQmI3gyMDtMZW5vaXImI3gyMDsmI3gyODtsaWduZSYjeDIwOzUmI3gyOTsmI3gyMDtldCYjeDIwO1NhaW50LUFtYnJvaXNlJiN4MjA7JiN4Mjg7bGlnbmUmI3gyMDs5JiN4Mjk7LiYjeDIwO1RvdXRlcyYjeDIwO2NvbW1vZGl0JmFtcDtlYWN1dGUmI3gzQjtzJiN4MjA7JmFtcDthZ3JhdmUmI3gzQjsmI3gyMDtwcm94aW1pdCZhbXA7ZWFjdXRlJiN4M0I7cyYjeDIwO0xpYnJlJiN4MjA7aW1tJmFtcDtlYWN1dGUmI3gzQjtkaWF0ZW1lbnQuIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9mbGFnX2JvdHRvbSIgaWQ9Im9mZmVyX2ZsYWdfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXJfZmxhZyIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9mbGFnIiB2YWx1ZT0iaXNTdGFuZGFyZCI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmN5X2VtYWlsX2JvdHRvbSIgaWQ9ImFnZW5jeV9lbWFpbF9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDthZ2VuY3ktZW1haWwiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iYWdlbmN5X2VtYWlsIiB2YWx1ZT0iWVdjM05USTJORGRBZFdKcFpteHZkeTV1WlhRJiN4M0Q7Ij48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9yZWZlcmVuY2VfYm90dG9tIiBpZD0ib2ZmZXJfcmVmZXJlbmNlX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLXJlZmVyZW5jZSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9yZWZlcmVuY2UiIHZhbHVlPSJMS00xODM3NiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfaWRfYm90dG9tIiBpZD0ib2ZmZXJfaWRfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItaWQiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfaWQiIHZhbHVlPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX2xvY19pZF9ib3R0b20iIGlkPSJvZmZlcl9sb2NfaWRfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItbG9jLWlkIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2xvY19pZCIgdmFsdWU9IjIzNTkwIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY3lfaWRfYm90dG9tIiBpZD0iYWdlbmN5X2lkX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO2FnZW5jeS1pZCIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZ2VuY3lfaWQiIHZhbHVlPSIzNkVCREEzOS1GMTg2LTQ1RUEtODIxMi1DNzExOEVDREY1RDgiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jeV9pZF9wcmVzdG9fYm90dG9tIiBpZD0iYWdlbmN5X2lkX3ByZXN0b19ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDthZ2VuY3ktaWQtcHJlc3RvIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImFnZW5jeV9pZF9wcmVzdG8iIHZhbHVlPSIxNDg4ODQzIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY3lfaWRfcmN1X2JvdHRvbSIgaWQ9ImFnZW5jeV9pZF9yY3VfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImFnZW5jeV9pZF9yY3UiIHZhbHVlPSJSQy0wODcwMjYiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jeV9tdWx0aV9jb250YWN0X2JvdHRvbSIgaWQ9ImFnZW5jeV9tdWx0aV9jb250YWN0X2JvdHRvbSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZ2VuY3lfbXVsdGlfY29udGFjdCIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgdmFsdWU9ImV5SmpiMjUwWVdOMGN5STZXM3NpYm05dElqb2lURWxDUlZKTFJWbFRJaXdpZEdWc0lqb2lNRFkwTkRZME5EY3dOeUlzSW1aaGVDSTZJaUlzSW0xaGFXd2lPaUpoWnpjMU1qWTBOMEIxWW1sbWJHOTNMbTVsZENJc0luTnBkR1VpT2lJaUxDSjBlWEJsUTI5dWRHRmpkQ0k2SWlJc0ltUmxibTl0YVc1aGRHbHZiaUk2SWlJc0luQm9iM1J2SWpvaUlpd2lhWE5RY21sdVkybHdZV3dpT2lJeEluMWRmUSYjeDNEOyYjeDNEOyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfcHJnX3JlZmVyZW5jZV9ib3R0b20iIGlkPSJvZmZlcl9wcmdfcmVmZXJlbmNlX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLXByZy1yZWZlcmVuY2UiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfcHJnX3JlZmVyZW5jZSIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfcHJnX3RpdGxlX2JvdHRvbSIgaWQ9Im9mZmVyX3ByZ190aXRsZV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtvZmZlci1wcmctdGl0bGUiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfcHJnX3RpdGxlIiB2YWx1ZT0iIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl91cmxfYm90dG9tIiBpZD0ib2ZmZXJfdXJsX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLXVybCIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl91cmwiIHZhbHVlPSJodHRwcyYjeDNBOyYjeDJGOyYjeDJGO3d3dy5sb2dpYy1pbW1vLmNvbSYjeDJGO2RldGFpbC12ZW50ZS03REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MuaHRtIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9pbWdfdXJsX2JvdHRvbSIgaWQ9Im9mZmVyX2ltZ191cmxfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXItaW1nLXVybCIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9pbWdfdXJsIiB2YWx1ZT0iaHR0cHMmI3gzQTsmI3gyRjsmI3gyRjttbWYubG9naWMtaW1tby5jb20mI3gyRjttbWYmI3gyRjthZHMmI3gyRjtwaG90by1wcm9wLTI2MHgyMDUmI3gyRjs3ZGImI3gyRjtiJiN4MkY7YjU0ZWZhZjAtOWM1MS00ZjNhLWFmZjItNDMzYzkxMzBiYWQzLmpwZyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfaW1nX3NtYWxsX3VybF9ib3R0b20iIGlkPSJvZmZlcl9pbWdfc21hbGxfdXJsX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLWltZy1zbWFsbC11cmwiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfaW1nX3NtYWxsX3VybCIgdmFsdWU9Imh0dHBzJiN4M0E7JiN4MkY7JiN4MkY7bW1mLmxvZ2ljLWltbW8uY29tJiN4MkY7bW1mJiN4MkY7YWRzJiN4MkY7cGhvdG8tcHJvcC0xMjN4OTAmI3gyRjs3ZGImI3gyRjtiJiN4MkY7YjU0ZWZhZjAtOWM1MS00ZjNhLWFmZjItNDMzYzkxMzBiYWQzLmpwZyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfaWRfYmllbl9ib3R0b20iIGlkPSJvZmZlcl9pZF9iaWVuX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLWlkLWJpZW4iIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfaWRfYmllbiIgdmFsdWU9Ijc0MTUxMTkzIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9pZF9iaWVuX3Byb2dyYW1fYm90dG9tIiBpZD0ib2ZmZXJfaWRfYmllbl9wcm9ncmFtX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29mZmVyLWlkLWJpZW4tcHJvZ3JhbSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJvZmZlcl9pZF9iaWVuX3Byb2dyYW0iIHZhbHVlPSIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9mZmVyX2lzX2V4Y2x1c2l2ZV9ib3R0b20iIGlkPSJvZmZlcl9pc19leGNsdXNpdmVfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhJiN4MjA7b2ZmZXJfaXNfZXhjbHVzaXZlIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2lzX2V4Y2x1c2l2ZSIgdmFsdWU9IjAiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlZ2lvbl9ib3R0b20iIGlkPSJyZWdpb25fYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9InJlZ2lvbiIgdmFsdWU9IjEiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRlcHRfYm90dG9tIiBpZD0iZGVwdF9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iZGVwdCIgdmFsdWU9IjEwMCI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icG9zdENvZGVfYm90dG9tIiBpZD0icG9zdENvZGVfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9InBvc3RDb2RlIiB2YWx1ZT0iNzUwMTEiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jeV9mcmFuY2hpc2luZ19ib3R0b20iIGlkPSJhZ2VuY3lfZnJhbmNoaXNpbmdfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImFnZW5jeV9mcmFuY2hpc2luZyIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2VhcmNoX3RyYW5zYWN0aW9uX2JvdHRvbSIgaWQ9InNlYXJjaF90cmFuc2FjdGlvbl9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtzZWFyY2gtdHJhbnNhY3Rpb24iIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ic2VhcmNoX3RyYW5zYWN0aW9uIiB2YWx1ZT0iMSI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib3JpZ2luX2ltcG9ydF9pZF9ib3R0b20iIGlkPSJvcmlnaW5faW1wb3J0X2lkX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSYjeDIwO29yaWdpbi1pbXBvcnQtaWQiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib3JpZ2luX2ltcG9ydF9pZCIgdmFsdWU9IjExNzQ4MDAzMyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZW1haWxfc3ViamVjdF9ib3R0b20iIGlkPSJlbWFpbF9zdWJqZWN0X2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJlbWFpbF9zdWJqZWN0IiB2YWx1ZT0iVW4mI3gyMDtpbnRlcm5hdXRlJiN4MjA7ZXN0JiN4MjA7aW50JiN4RTk7cmVzcyYjeEU5OyYjeDIwO3BhciYjeDIwO3ZvdHJlJiN4MjA7YW5ub25jZSYjeDIwO0xLTTE4Mzc2JiN4MjA7c3VyJiN4MjA7TG9naWMtSW1tby5jb20iPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImVtYWlsX3N1YmplY3RfY29weV9ib3R0b20iIGlkPSJlbWFpbF9zdWJqZWN0X2NvcHlfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImVtYWlsX3N1YmplY3RfY29weSIgdmFsdWU9IlZvdXMmI3gyMDthdmV6JiN4MjA7Y29udGFjdCYjeEU5OyYjeDIwO3VuZSYjeDIwO2FnZW5jZSYjeDIwO3N1ciYjeDIwO2xlJiN4MjA7c2l0ZSYjeDIwO0xvZ2ljLUltbW8uY29tIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkYXRlX29mX2RheV9ib3R0b20iIGlkPSJkYXRlX29mX2RheV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEmI3gyMDtkYXRlLW9mLWRheSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJkYXRlX29mX2RheSIgdmFsdWU9IjIwMjAwNDAxIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwb25kZXJpbmdfdG90YWxfYm90dG9tIiBpZD0icG9uZGVyaW5nX3RvdGFsX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJwb25kZXJpbmdfdG90YWwiIHZhbHVlPSIxJiN4MjA7MDEwJiN4MjA7MTU2Ij48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY3lfbmFtZV9ib3R0b20iIGlkPSJhZ2VuY3lfbmFtZV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0iYWdlbmN5X25hbWUiIHZhbHVlPSJMSUJFUktFWVMiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jeV90b3duX2JvdHRvbSIgaWQ9ImFnZW5jeV90b3duX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZ2VuY3lfdG93biIgdmFsdWU9IlBBUklTIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY3lfcG9zdF9jb2RlX2JvdHRvbSIgaWQ9ImFnZW5jeV9wb3N0X2NvZGVfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImFnZW5jeV9wb3N0X2NvZGUiIHZhbHVlPSI3NTAwOCI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmN5X2VtYWlsX21kNV9ib3R0b20iIGlkPSJhZ2VuY3lfZW1haWxfbWQ1X2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZ2VuY3lfZW1haWxfbWQ1IiB2YWx1ZT0iODExZTk4MmYwYjY4Nzg2NjcwMjRlMGUzMjhmYjRkOWQiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jeV9waG9uZV9iNjRfYm90dG9tIiBpZD0iYWdlbmN5X3Bob25lX2I2NF9ib3R0b20iIHZhbHVlPSJNRFkwTkRZME5EY3dOdyYjeDNEOyYjeDNEOyI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmN5X2lzX2R1b19ib3R0b20iIGlkPSJhZ2VuY3lfaXNfZHVvX2JvdHRvbSIgY2xhc3M9ImNvbnRhY3Rfb2ZmZXJfZGF0YSIgZGF0YS1jb250YWN0LWRhdGFuYW1lPSJhZ2VuY3lfaXNfZHVvIiB2YWx1ZT0iRFVPIj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvZmZlcl9pZF9wYXNzZXJlbGxlX2JvdHRvbSIgaWQ9Im9mZmVyX2lkX3Bhc3NlcmVsbGVfYm90dG9tIiBjbGFzcz0iY29udGFjdF9vZmZlcl9kYXRhIiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9Im9mZmVyX2lkX3Bhc3NlcmVsbGUiIHZhbHVlPSIxNTgxMTMyMjEiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InBob25lX2JvdHRvbSIgaWQ9InBob25lX2JvdHRvbSIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icGxhbmJvb3N0X2JvdHRvbSIgaWQ9InBsYW5ib29zdF9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0icGxhbmJvb3N0IiB2YWx1ZT0iMSI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibW9kZV9ib3R0b20iIGlkPSJtb2RlX2JvdHRvbSIgY2xhc3M9Im1vZGUiIHZhbHVlPSIiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFkX3Nob3dfY2FzZV9sb2NhbGl0eV9ib3R0b20iIGlkPSJhZF9zaG93X2Nhc2VfbG9jYWxpdHlfYm90dG9tIiBjbGFzcz0iYWRfc2hvd19jYXNlX2xvY2FsaXR5IiBkYXRhLWNvbnRhY3QtZGF0YW5hbWU9ImFkX3Nob3dfY2FzZV9sb2NhbGl0eSIgdmFsdWU9IiI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2ZmZXJfY29tbWVyY2lhbF9uYW1lX2JvdHRvbSIgaWQ9Im9mZmVyX2NvbW1lcmNpYWxfbmFtZV9ib3R0b20iIGNsYXNzPSJjb250YWN0X29mZmVyX2RhdGEiIGRhdGEtY29udGFjdC1kYXRhbmFtZT0ib2ZmZXJfY29tbWVyY2lhbF9uYW1lIiB2YWx1ZT0iRHVvMyI+PC9mb3JtPiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzYXNfYmxvY2siCiAgICAgaWQ9InNhc181ODA0MyI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cjwvc2VjdGlvbj4KCjxzZWN0aW9uIGNsYXNzPSJzaW1pbGFyLXByb3BlcnR5LXNlY3Rpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KCiAgICAgICAgICAgIDwvZGl2Pgo8L3NlY3Rpb24+Cgo8c2VjdGlvbiBjbGFzcz0iZnVuZGluZ01lbnRpb25TZWN0aW9uV3JhcHBlciI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZnVuZGluZ01lbnRpb24iPgogICAgPGIgY2xhc3M9ImZ1bmRpbmdNZW50aW9uU3RhciI+KjwvYj4gQ2V0dGUgc2ltdWxhdGlvbiBlc3QgY29tbXVuaXF1w6llIMOgIHRpdHJlIGluZm9ybWF0aWYsICBlbiBzZSBiYXNhbnQgc3VyIGxlcyB0YXV4IG1veWVucyBkdSBtYXJjaMOpLgo8L3A+ICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9zZWN0aW9uPgoKPHNlY3Rpb24gY2xhc3M9ImhpZGRlbi14cyI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiIgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgZG9jdW1lbnQud3JpdGUoJzxkaXYgaWQ9ImNydC0zNTI3NTEiIHN0eWxlPSJ3aWR0aDo3MjhweDsgaGVpZ2h0OjkwcHg7Ij48L2Rpdj4nKTsKICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gQWNjZXB0YWJsZUFkQ3JpdGVvKCkgewogICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgQ3JpdGVvLkRpc3BsYXlBY2NlcHRhYmxlQWRJZkFkYmxvY2tlZCh7CiAgICAgICAgICAgICAgICAgICAgJ3pvbmVpZCc6IDM1Mjc1MSwKICAgICAgICAgICAgICAgICAgICAnY29udGFpbmVyaWQnOiAnY3J0LTM1Mjc1MScsCiAgICAgICAgICAgICAgICAgICAgJ292ZXJyaWRlWm9uZUZsb29yJzogZmFsc2UKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSwgMTAwMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgQ29va2llQ29uc2VudC5oaXRPbkNvbnNlbnQoQWNjZXB0YWJsZUFkQ3JpdGVvLCA0KTsKICAgICAgICB9KTsKICAgIDwvc2NyaXB0PgogICAgCjxkaXYgY2xhc3M9InNhc19ibG9jayBvYXMtbWFyZ2luLWJvdHRvbSBvYXMtbWFyZ2luLXRvcCIKICAgICBpZD0ic2FzXzU4MDY3Ij48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9zZWN0aW9uPgoKPHNlY3Rpb24gY2xhc3M9InJlY29tbWVuZGVkT2ZmZXJzU2VjdGlvbldyYXBwZXIiPgogICAgPGRpdiBjbGFzcz0icmVjb21tZW5kZWRPZmZlckNvbnRhaW5lciBjb250YWluZXIiIHN0eWxlPSJkaXNwbGF5OiBub25lIj4KICAgIDxoMyBjbGFzcz0icmVjb21tZW5kZWRPZmZlclRpdGxlIj4KICAgICAgICAgICAgICAgICAgICBBdXRyZXMgYmllbnMgYXV4IGFsZW50b3VycwogICAgICAgICAgICA8L2gzPgogICAgPGRpdiBjbGFzcz0icmVjb21tZW5kZWRPZmZlckl0ZW0gb2ZmZXItbGlzdC1pdGVtIG5vU2xpZGVyICI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItYmxvY2siIGRhdGEteHRhdGktdmFsdWU9IlBVQi0xLTczNjExMjUzLS1EdW8yLVtMSV0tWzAxMDEyMF0tW1JDLTI0NTY0NF0iIGRhdGEteHRhdGktc2VudD0iZmFsc2UiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItYmxvY2stY29udGVudCBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBpY3R1cmUtd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ibGF6eSIgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBQYXJpcyAxMSAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz42MDwvc3Bhbj4gbcKyIGVudmlyb24gJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjI8L3NwYW4+IHBpw6hjZXMiIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0zMzV4MjUzL2YxZC9mL2Y1NTY1MTgzLWE1NTQtNGM5MC1hYjQzLWJjNWZhZWE3NmE3Ni5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFkZC10by1zZWxlY3Rpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSJGMURCQzE0RC0zOTVDLTgwQTktREVBNi1DOEE2Mzg5NjdDNjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJGaWNoZV9Bbm5vbmNlX09mZnJlX1JlY29tbWFuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci1GMURCQzE0RC0zOTVDLTgwQTktREVBNi1DOEE2Mzg5NjdDNjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LWJvcmRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IkYxREJDMTRELTM5NUMtODBBOS1ERUE2LUM4QTYzODk2N0M2NCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9IkZpY2hlX0Fubm9uY2VfT2ZmcmVfUmVjb21tYW5kYXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZS1tb3JlIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItcGljdHVyZS1jb3VudCI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxpLWljb24tLWltYWdlIj48L2k+IDEvMTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtZjFkYmMxNGQtMzk1Yy04MGE5LWRlYTYtYzhhNjM4OTY3YzY0Lmh0bSIgY2xhc3M9InJlY29tbWVuZGVkT2ZmZXJMaW5rIj48L2E+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy13cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtdHlwZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj43MjAgMDAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3RpayI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWFyZWEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tbWVhc3VyaW5nLXRhcGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+NjA8L3NwYW4+IG3CsiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLXJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXBpZWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4yPC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWJlZHJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWJlZHJvb20iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjE8L3NwYW4+IGNoLiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJpcyAxMSAoNzUwMTEpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItYmxvY2siIGRhdGEteHRhdGktdmFsdWU9IlBVQi0xLTcyNzk5MDM5LS1EdW8zLS1QTG9jYWwtW0xJXS1bMDEwMTIwXS1bNTI0NzQxXSIgZGF0YS14dGF0aS1zZW50PSJmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1ibG9jay1jb250ZW50IGNsZWFyZml4Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLWxlZnQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYi1saW5rIG9mZmVyLWxpbmsgZGVmYXVsdC1waWN0dXJlIGltZ0xpcXVpZEZpbGwgaW1nTGlxdWlkIiBkYXRhLXRyaWdnZXItaW1nbGlxdWlkPSIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWltZ0xpcXVpZC1maWxsPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IFBhcmlzIDA0ICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjYwPC9zcGFuPiBtwrIgZW52aXJvbiAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Mjwvc3Bhbj4gcGnDqGNlcyIgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2Fkcy9waG90by1wcm9wLTMzNXgyNTMvYmU4LzUvNTE5MDFmYzMtZDA4MC00ZDFjLTgxZWEtNzUyYTA4MGRkMjQ5LmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IkJFOEIyQ0VGLTg4QTgtQjRDOC03NjQ3LTlGQzdCMEZEQTE1OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9IkZpY2hlX0Fubm9uY2VfT2ZmcmVfUmVjb21tYW5kYXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1lbGVtZW50dG9tb3ZlPSIjaGVhZGVyLW9mZmVyLUJFOEIyQ0VGLTg4QTgtQjRDOC03NjQ3LTlGQzdCMEZEQTE1OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtYm9yZGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0icmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iQkU4QjJDRUYtODhBOC1CNEM4LTc2NDctOUZDN0IwRkRBMTU5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iRmljaGVfQW5ub25jZV9PZmZyZV9SZWNvbW1hbmRhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1zZWxlY3RlZCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlLW1vcmUiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1waWN0dXJlLWNvdW50Ij48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGktaWNvbi0taW1hZ2UiPjwvaT4gMS85PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS1iZThiMmNlZi04OGE4LWI0YzgtNzY0Ny05ZmM3YjBmZGExNTkuaHRtIiBjbGFzcz0icmVjb21tZW5kZWRPZmZlckxpbmsiPjwvYT4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXdyYXBwZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjc5OSAwMDAg4oKsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1tZWFzdXJpbmctdGFwZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz42MDwvc3Bhbj4gbcKyICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tcGllY2UiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjI8L3NwYW4+IHAuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYmVkcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tYmVkcm9vbSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+MTwvc3Bhbj4gY2guICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmlzIDA0ICg3NTAwNCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPSJTYWludC1HZXJ2YWlzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU2FpbnQtR2VydmFpcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWJsb2NrIiBkYXRhLXh0YXRpLXZhbHVlPSJQVUItMS03Mjc5OTg2Ny0tRHVvMy1bTEldLVswMTAxMjBdLVs1MjQ3NDFdIiBkYXRhLXh0YXRpLXNlbnQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWJsb2NrLWNvbnRlbnQgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwaWN0dXJlLXdyYXBwZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tcmlnaHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRodW1iLWxpbmsgb2ZmZXItbGluayBkZWZhdWx0LXBpY3R1cmUgaW1nTGlxdWlkRmlsbCBpbWdMaXF1aWQiIGRhdGEtdHJpZ2dlci1pbWdsaXF1aWQ9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaW1nTGlxdWlkLWZpbGw9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxhenkiIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgUGFyaXMgMDQgJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+NjA8L3NwYW4+IG3CsiBlbnZpcm9uICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4yPC9zcGFuPiBwacOoY2VzIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My9lZWIvMS8xZTkyNzc2MS0wYTk4LTRlYTctYmVjOC02ODg4ZGMyYWNjNmYuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZGQtdG8tc2VsZWN0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iRUVCMkZEMDgtQUQ5Ri05ODAyLTUxOTktMUI2RjA5NTg3Q0JEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iRmljaGVfQW5ub25jZV9PZmZyZV9SZWNvbW1hbmRhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWVsZW1lbnR0b21vdmU9IiNoZWFkZXItb2ZmZXItRUVCMkZEMDgtQUQ5Ri05ODAyLTUxOTktMUI2RjA5NTg3Q0JEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJyZW1vdmUtZnJvbS1zZWxlY3Rpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSJFRUIyRkQwOC1BRDlGLTk4MDItNTE5OS0xQjZGMDk1ODdDQkQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJGaWNoZV9Bbm5vbmNlX09mZnJlX1JlY29tbWFuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LXNlbGVjdGVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUtbW9yZSI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLXBpY3R1cmUtY291bnQiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsaS1pY29uLS1pbWFnZSI+PC9pPiAxLzk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLWVlYjJmZDA4LWFkOWYtOTgwMi01MTk5LTFiNmYwOTU4N2NiZC5odG0iIGNsYXNzPSJyZWNvbW1lbmRlZE9mZmVyTGluayI+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXR5cGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLXByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Nzk5IDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWsiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLW1lYXN1cmluZy10YXBlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjYwPC9zcGFuPiBtwrIgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1yb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Mjwvc3Bhbj4gcC4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1iZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1iZWRyb29tIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4xPC9zcGFuPiBjaC4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMgMDQgKDc1MDA0KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+PC9zZWN0aW9uPgoKPGRpdiBjbGFzcz0ib2ZmZXItY29udHJvbHMgY29udGFpbmVyIj4KICAgIAoJPHNlY3Rpb24gY2xhc3M9Im5hdlByZXZQcmV4dCIgaWQ9Im9mZmVyX25hdmlnYXRpb25fYm90dG9tIiBkYXRhLW9mZmVyLWlkPSI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiIGRhdGEtbWFwcGVyPSJzYWxlIj4KCTwvc2VjdGlvbj4KPC9kaXY+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAvLzwhLS0KICAgICAgICAgICAgeHRfcGFnZXR5cGUgPSAiIjsKICAgICAgICAvL2RvIG5vdCBtb2RpZnkgYmVsb3cKICAgICAgICBpZiAod2luZG93Lnh0cGFyYW0gIT0gbnVsbCkgewogICAgICAgICAgICB3aW5kb3cueHRwYXJhbSArPSAiJnB0eXBlPSIgKyB4dF9wYWdldHlwZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHh0cGFyYW0gPSAiJnB0eXBlPSIgKyB4dF9wYWdldHlwZTsKICAgICAgICB9CgogICAgICAgIHZhciB4dEN1c3RvbSA9IHt9OwogICAgICAgIGlmICh0eXBlb2YgTW9iaWxlRGV0ZWN0ICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICB2YXIgZGV2aWNlID0gbmV3IE1vYmlsZURldGVjdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSl7CiAgICAgICAgICAgICAgICBjYXNlIChkZXZpY2UucGhvbmUoKSAhPT0gbnVsbCk6CiAgICAgICAgICAgICAgICAgICAgeHRDdXN0b20uZGV2aWNlID0gJ3NtYXJ0cGhvbmUnOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAoZGV2aWNlLnRhYmxldCgpICE9PSBudWxsKToKICAgICAgICAgICAgICAgICAgICB4dEN1c3RvbS5kZXZpY2UgPSAndGFibGV0JzsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgeHRDdXN0b20uZGV2aWNlID0gJ2Rlc2t0b3AnOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB4dG52ID0gImRvY3VtZW50IjsKICAgICAgICB4dHNkID0gImh0dHBzOi8vbG9nczEyNDEiOwogICAgICAgIHh0c2l0ZSA9IDQ5MDgwNDsKICAgICAgICB4dGN1c3RvbSA9IHh0Q3VzdG9tOwogICAgICAgIHh0bjIgPSAiMSI7CiAgICAgICAgeHRwYWdlID0gIkZpY2hlX0Fubm9uY2VfQWNoYXQ6OkFubm9uY2VfN2RiZTUxYjAtMzZkZS05ZDliLWY1NmItNDVkMWFjNmIwY2NjIjsKICAgICAgICB4dGRpID0gIiI7CiAgICAgICAgeHRfbXVsdGMgPSAiJngxPTImeDI9MSZ4Mz03REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MmeDQ9NzUwMDgmeDY9MSZ4Nz0xMDAmeDg9NzUwMTEmeDk9QXBwYXJ0ZW1lbnQmeDEwPTE1JngxMT00JngxMj0yJngxMz0lNUJNZXVibCVDMyVBOSU1RCUyQyU1QkJhbGNvbiU1RCUyQyU1QlRlcnJhc3NlJTVEJTJDJTVCUiVDMyVBOW5vdiVDMyVBOSU1RCUyQyU1QkJlc29pbitkZSt0cmF2YXV4JTVEJTJDJTVCU2FsbGUlMjhzJTI5K2RlK2JhaW4lNUQmeDE0PUxJQkVSS0VZUyZ4MTU9MjAyMDA0MDEmeDE3PTEiOwogICAgICAgIHh0X2FuID0gIiI7CiAgICAgICAgeHRfYWMgPSAiIjsKICAgICAgICB4dGVyZ28gPSAiMSI7CiAgICAgICAgeHRfYXRpID0gIiZhdGk9UFVCLTEtNzQxNTExOTMtLVtEdW8zXS1bTEldLVswMTAxMDJdLVsxNDg4ODQzXSI7CiAgICAgICAgeHRfYXQgPSBnZXRVc2VyRGF0YUZvcm1Db29raWUoKTsKCiAgICAgICAgLy9kbyBub3QgbW9kaWZ5IGJlbG93CiAgICAgICAgaWYgKHdpbmRvdy54dHBhcmFtICE9IG51bGwpIHsKICAgICAgICAgICAgd2luZG93Lnh0cGFyYW0gKz0gIiZhYz0iICsgeHRfYWMgKyAiJmF0PSIgKyB4dF9hdCArIHh0X211bHRjICsgeHRfYXRpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgd2luZG93Lnh0cGFyYW0gPSAiJmFjPSIgKyB4dF9hYyArICImYXQ9IiArIHh0X2F0ICsgeHRfbXVsdGMgKyB4dF9hdGk7CiAgICAgICAgfQoKICAgICAgICAvLy0tPgoKPC9zY3JpcHQ+Cjxub3NjcmlwdD4KICAgIDxpbWcgd2lkdGg9IjEiIGhlaWdodD0iMSIgYWx0PSIiCiAgICAgICAgIHNyYz0iaHR0cHM6Ly9sb2dzMTI0MS54aXRpLmNvbS9oaXQueGl0aT9zPTQ5MDgwNCZzMj0xJnA9RmljaGVfQW5ub25jZV9BY2hhdDo6QW5ub25jZV83ZGJlNTFiMC0zNmRlLTlkOWItZjU2Yi00NWQxYWM2YjBjY2MmeDE9MiZ4Mj0xJngzPTdEQkU1MUIwLTM2REUtOUQ5Qi1GNTZCLTQ1RDFBQzZCMENDQyZ4ND03NTAwOCZ4Nj0xJng3PTEwMCZ4OD03NTAxMSZ4OT1BcHBhcnRlbWVudCZ4MTA9MTUmeDExPTQmeDEyPTImeDEzPSU1Qk1ldWJsJUMzJUE5JTVEJTJDJTVCQmFsY29uJTVEJTJDJTVCVGVycmFzc2UlNUQlMkMlNUJSJUMzJUE5bm92JUMzJUE5JTVEJTJDJTVCQmVzb2luK2RlK3RyYXZhdXglNUQlMkMlNUJTYWxsZSUyOHMlMjkrZGUrYmFpbiU1RCZ4MTQ9TElCRVJLRVlTJngxNT0yMDIwMDQwMSZ4MTc9MSZkaT0mYXQ9JmFjPSI+Cjwvbm9zY3JpcHQ+CjwvZGl2PgoKPGZvb3Rlcj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgCjxkaXYgY2xhc3M9ImNyb3NzbGlua2luZ3MgIGNsZWFyZml4IHZpc2libGUtbGctYmxvY2sgIj4KICAgIDwvZGl2PgoKPGRpdiBpZD0iZm9vdGVyIgogICAgIGNsYXNzPSJtYWluLWxpbmtzICAiPgoKICAgIDxkaXYgaWQ9ImZvb3Rlcl9saW5rcyIgY2xhc3M9ImNsZWFyZml4IGJvdHRvbS1mb290ZXIiPgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaW5rcy1ibG9jayBmb290ZXItY29scyBjb2xzLTAiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0b3AiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb290ZXItc3VidGl0bGVzIj5Mb2dpYy1pbW1vLmNvbTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXZTaXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9jaGFydGUtZWRpdG9yaWFsZS5odG1sIiB0aXRsZT0iQ2hhcnRlIMOpZGl0b3JpYWxlIiByZWw9Im5vZm9sbG93Ij5DaGFydGUgw6lkaXRldXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwOi8vcHVibGllci11bmUtYW5ub25jZS5sb2dpYy1pbW1vLmNvbSIgdGl0bGU9IlB1YmxpZXIgdW5lIGFubm9uY2UiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICdMaWVuX0Zvb3Rlcjo6TWVudV9Mb2dpYy1JbW1vX2NvbTo6TGllbl9EZXBvdF9kX2Fubm9uY2VzJywgJzE3JywgJ04nKTsiPlB1YmxpZXIgdW5lIGFubm9uY2U8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9jb250YWN0ZXotbm91cyIgdGl0bGU9IkNvbnRhY3Rlei1ub3VzIiByZWw9Im5vZm9sbG93Ij5Db250YWN0ZXotbm91czwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdlNpdGVFbHQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2FsZXJ0ZS1pbW1vLmh0bWwiIHRpdGxlPSJSZWNldm9pciBsZXMgYW5ub25jZXMgZCd1bmUgcmVjaGVyY2hlIj5BbGVydGUgRW1haWw8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwczovL3d3dy53ZWxjb21ldG90aGVqdW5nbGUuY28vZnIvY29tcGFuaWVzL2dyb3VwZS1zZWxvZ2VyL2xvZ2ljLWltbW8iIHRpdGxlPSJOb3VzIHJlY3J1dG9ucyI+Tm91cyByZWNydXRvbnM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwczovL25ld3Nyb29tLmxvZ2ljLWltbW8uY29tIiB0aXRsZT0iRXNwYWNlIHByZXNzZSI+RXNwYWNlIHByZXNzZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItYXBwcyI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS9mci9hcHAvbG9naWMtaW1tby5jb20vaWQzMDgwMjU2MTc/bXQ9OCI+PGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9hc3NldC1jb3JhaWwvaW1nL2Zvb3Rlci1hcHBzdG9yZS1idG4ucG5nIiBjbGFzcz0iYXBwc3RvcmUiPjwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5zbWFydG5zb2Z0LmxvZ2ljaW1tbyZobD1mciI+PGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9hc3NldC1jb3JhaWwvaW1nL2Zvb3Rlci1nb29nbGVwbGF5LWJ0bi5wbmciPjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWRpdGlvbmFsLWxpbmsiPgogICAgICAgICAgICA8YSBocmVmPSIiIHRhcmdldD0iX2JsYW5rIj48L2E+ICAgICAgICA8L2Rpdj4KICAgIAo8L2Rpdj4KICAgIDwvZGl2Pgo8L2Zvb3Rlcj4KCjxzZWN0aW9uIGNsYXNzPSJmb290ZXItc29jaWFsLXNlY3Rpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGlkPSJsaWNvbS1wcmVmZXJlbmNlLWNlbnRlciI+PC9kaXY+CjxkaXYgY2xhc3M9InJvdyB0ZXh0LWNlbnRlciI+Cgk8ZGl2IGNsYXNzPSJjb2wteHMtNCBzb2NpYWwtZm9vdGVyLWxvZ28gdGV4dC1sZWZ0Ij4KICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0LWNvcmFpbC9pbWcvbG9nb19saWNvbV9ibHVlLnBuZyI+Cgk8L2Rpdj4KCTxkaXYgY2xhc3M9ImNvbC14cy0zIGNvbC1sZy00IHNvY2lhbC1mb290ZXItYnV0dG9ucyI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2xvZ2ljaW1tbyIgdGFyZ2V0PSJfYmxhbmsiPjxpIGNsYXNzPSJpY29uLWZhY2Vib29rIGljb24tY2lyY2xlIj48L2k+PC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vbG9naWNpbW1vIiB0YXJnZXQ9Il9ibGFuayI+PGkgY2xhc3M9Imljb24tdHdpdHRlciBpY29uLWNpcmNsZSI+PC9pPjwvYT4KCTwvZGl2PgoJPGRpdiBjbGFzcz0iY29sLXhzLTUgdmlzaWJsZS14cy1ibG9jayB2aXNpYmxlLXNtLWJsb2NrIHZpc2libGUtbWQtYmxvY2sgc29jaWFsLWZvb3Rlci10b29scyI+CgkgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vbW9iaWxlLnBocCI+PGkgY2xhc3M9Imljb24tbW9iaWxlIj48L2k+Jm5ic3A7PHA+QXBwbGljYXRpb248L3A+PC9hPgoJPC9kaXY+Cgk8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLWxnLTQgc29jaWFsLWZvb3Rlci1jb3B5cmlnaHQiPgogICAgICAgIDxwPkNvcHlyaWdodCDCqSAyMDAzLTIwMjAgQ29uY2VwdCBNdWx0aW3DqWRpYTwvcD4KICAgICAgICA8cD48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9jZ3UtZXQtcG9saXRpcXVlLWRlLWNvbmZpZGVudGlhbGl0ZS5odG1sIiB0aXRsZT0iQ0dVICYgUG9saXRpcXVlIGRlIENvbmZpZGVudGlhbGl0w6kiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iY2d1Ij5DR1UgJiBQb2xpdGlxdWUgZGUgQ29uZmlkZW50aWFsaXTDqTwvYT48L3A+CiAgICAgICAgPHA+PGEgaHJlZj0iamF2YXNjcmlwdDp3aW5kb3cudGhlU2hpZWxkLnNob3dBZHZhbmNlZFNldHRpbmdzKCk7IiAgY2xhc3M9ImNndSI+UGFyYW3DqXRyZXIgbWVzIGNvb2tpZXM8L2E+PC9wPgoJPC9kaXY+Cgo8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+CgoKIDwhLS0gQ3JpdGVvVHJhY2sgLS0+IAo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBmdW5jdGlvbiBjcmVhdERPTUVsZW1lbnQgKG9iaikgewogICAgICAgIGxldCBET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvYmpbJ25hbWUnXSk7CiAgICAgICAgZGVsZXRlIG9ialsnbmFtZSddOwogICAgICAgIGZvcihjb25zdCBba2V5LHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7CiAgICAgICAgICAgIGlmIChrZXkgPT09ICdjaGlsZCcpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIERPTUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3JlYXRET01FbGVtZW50KHZhbHVlKSk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBET01FbGVtZW50W2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIERPTUVsZW1lbnQ7CiAgICB9CiAgICBmdW5jdGlvbiBjcml0ZW9UcmFja0hpdEhhbmRsZXIoKSB7CiAgICAgICAgZnVuY3Rpb24gY3JpdGVvVHJhY2tIaXRFeGVjKCkgewogICAgICAgICAgICB2YXIgZGV2aWNlID0gbmV3IE1vYmlsZURldGVjdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgICAgICAgIGRldmljZVR5cGUgPSBkZXZpY2UubW9iaWxlKCkgIT09IG51bGwgPyAndCcgOiAnZCc7IC8vIGlzIHRhYmxldCBvciBkZXNrdG9wCgogICAgICAgICAgICB3aW5kb3cuY3JpdGVvX3EgPSB3aW5kb3cuY3JpdGVvX3EgfHwgW107CgogICAgICAgICAgICB3aW5kb3cuY3JpdGVvX3EucHVzaCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICJ2aWV3SXRlbSIsIGl0ZW06IFsiN0RCRTUxQjAtMzZERS05RDlCLUY1NkItNDVEMUFDNkIwQ0NDIl0sIGFjY291bnQ6IDg4NiwgdWlfc2VjdGlvbjogImFjaGV0ZXIiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBldmVudDogInZpZXdJdGVtIiwgaXRlbTogWyI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiXSwgYWNjb3VudDogMTQyOTYsIHVpX3NlY3Rpb246ICJhY2hldGVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2V2ZW50OiAic2V0U2l0ZVR5cGUiLCB0eXBlOiBkZXZpY2VUeXBlfQogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAod2luZG93Lmhhc093blByb3BlcnR5KCdfX2NyaXRlb1RyYWNrTG9hZCcpKSB7CiAgICAgICAgICAgIGNyaXRlb1RyYWNrSGl0RXhlYygpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdpbmRvdy5fX2NyaXRlb1RyYWNrTG9hZCA9IHRydWU7CiAgICAgICAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTsKICAgICAgICAgICAgdmFyIGNyaXRlb1RyYWNrU2NyaXB0ID0gY3JlYXRET01FbGVtZW50KHsKICAgICAgICAgICAgICAgICduYW1lJzogJ3NjcmlwdCcsCiAgICAgICAgICAgICAgICAndHlwZSc6ICd0ZXh0L2phdmFzY3JpcHQnLAogICAgICAgICAgICAgICAgJ3NyYyc6ICdodHRwczovL3N0YXRpYy5jcml0ZW8ubmV0L2pzL2xkL2xkLmpzJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChjcml0ZW9UcmFja1NjcmlwdCk7CiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNyaXRlb1RyYWNrSGl0RXhlYywxMDAwKTsKICAgICAgICB9CiAgICB9CgogICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgQ29va2llQ29uc2VudC5oaXRPbkNvbnNlbnQoY3JpdGVvVHJhY2tIaXRIYW5kbGVyLCA0KTsKICAgIH0pOwo8L3NjcmlwdD4KCiA8IS0tIENyaXRlb0NsaWNrIC0tPiAKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgZnVuY3Rpb24gY3JlYXRET01FbGVtZW50IChvYmopIHsKICAgICAgICBsZXQgRE9NRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQob2JqWyduYW1lJ10pOwogICAgICAgIGRlbGV0ZSBvYmpbJ25hbWUnXTsKICAgICAgICBmb3IoY29uc3QgW2tleSx2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqKSkgewogICAgICAgICAgICBpZiAoa2V5ID09PSAnY2hpbGQnKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBET01FbGVtZW50LmFwcGVuZENoaWxkKGNyZWF0RE9NRWxlbWVudCh2YWx1ZSkpOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgRE9NRWxlbWVudFtrZXldID0gdmFsdWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBET01FbGVtZW50OwogICAgfQogICAgZnVuY3Rpb24gY3JpdGVvSGl0SGFuZGxlcigpIHsKICAgICAgICBmdW5jdGlvbiBjcml0ZW9IaXRDbGlja0V4ZWMoKSB7CiAgICAgICAgICAgIHZhciBkZXZpY2UgPSBuZXcgTW9iaWxlRGV0ZWN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgICAgICAgZGV2aWNlVHlwZSA9IGRldmljZS5tb2JpbGUoKSAhPT0gbnVsbCA/ICd0JyA6ICdkJzsgLy8gaXMgdGFibGV0IG9yIGRlc2t0b3AKCiAgICAgICAgICAgIHdpbmRvdy5jcml0ZW9fcSA9IHdpbmRvdy5jcml0ZW9fcSB8fCBbXTsKICAgICAgICAgICAgd2luZG93LmNyaXRlb19xLnB1c2goCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGV2ZW50OiAidHJhY2tUcmFuc2FjdGlvbiIsIGlkOiAiMTU4NTc2MzQzNSIsIGl0ZW06IFt7aWQ6ICI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiLCBwcmljZTogMCwgcXVhbnRpdHk6IDF9XSwgYWNjb3VudDogODg2LCB1aV9zZWN0aW9uOiAiYWNoZXRlciIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGV2ZW50OiAidHJhY2tUcmFuc2FjdGlvbiIsIGlkOiAiMTU4NTc2MzQzNSIsIGl0ZW06IFt7aWQ6ICI3REJFNTFCMC0zNkRFLTlEOUItRjU2Qi00NUQxQUM2QjBDQ0MiLCBwcmljZTogMCwgcXVhbnRpdHk6IDF9XSwgYWNjb3VudDogMTQyOTYsIHVpX3NlY3Rpb246ICJhY2hldGVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2V2ZW50OiAic2V0U2l0ZVR5cGUiLCB0eXBlOiBkZXZpY2VUeXBlfQogICAgICAgICAgICApOwoKICAgICAgICB9CgogICAgICAgIGlmICh3aW5kb3cuaGFzT3duUHJvcGVydHkoJ19fY3JpdGVvQ2xpY2tMb2FkJykpIHsKICAgICAgICAgICAgY3JpdGVvSGl0Q2xpY2tFeGVjKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgd2luZG93Ll9fY3JpdGVvQ2xpY2tMb2FkID0gdHJ1ZTsKICAgICAgICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdOwogICAgICAgICAgICB2YXIgY3JpdGVvVHJhY2tTY3JpcHQgPSBjcmVhdERPTUVsZW1lbnQoewogICAgICAgICAgICAgICAgJ25hbWUnOiAnc2NyaXB0JywKICAgICAgICAgICAgICAgICd0eXBlJzogJ3RleHQvamF2YXNjcmlwdCcsCiAgICAgICAgICAgICAgICAnc3JjJzogJ2h0dHBzOi8vc3RhdGljLmNyaXRlby5uZXQvanMvbGQvbGQuanMnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBoZWFkLmFwcGVuZENoaWxkKGNyaXRlb1RyYWNrU2NyaXB0KTsKICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY3JpdGVvSGl0Q2xpY2tFeGVjLDEwMDApOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjcml0ZW9DbGlja0hpdCgpIHsKICAgICAgICAgICAgQ29va2llQ29uc2VudC5oaXRPbkNvbnNlbnQoY3JpdGVvSGl0SGFuZGxlciwgNCk7CiAgICB9Cjwvc2NyaXB0PgoKIDwhLS0gR29vZ2xlUmVtYXJrZXRpbmcgLS0+IAoKICAgIDxkaXYgaWQgPSJHb29nbGVBZFNlcnZpY2VJbWciIHN0eWxlPSJkaXNwbGF5OmlubGluZTsiPgogICAgPC9kaXY+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgdmFyIGlzR29vZ2xlQWRTZXJ2aWNlSW5pdGlhdGVkID0gZmFsc2U7CiAgZnVuY3Rpb24gY3JlYXRET01FbGVtZW50IChvYmopIHsKICAgICAgbGV0IERPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9ialsnbmFtZSddKTsKICAgICAgZGVsZXRlIG9ialsnbmFtZSddOwogICAgICBmb3IoY29uc3QgW2tleSx2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqKSkgewogICAgICAgICAgaWYgKGtleSA9PT0gJ2NoaWxkJykKICAgICAgICAgIHsKICAgICAgICAgICAgICBET01FbGVtZW50LmFwcGVuZENoaWxkKGNyZWF0RE9NRWxlbWVudCh2YWx1ZSkpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgRE9NRWxlbWVudFtrZXldID0gdmFsdWU7CiAgICAgIH0KICAgICAgcmV0dXJuIERPTUVsZW1lbnQ7CiAgfQoKICBmdW5jdGlvbiBpbml0R29vZ2xlQWRTZXJ2aWNlKCkgewogICAgICB2YXIgcGFyZW50SW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIkdvb2dsZUFkU2VydmljZUltZyIpOwogICAgICB2YXIgR29vZ2xlQWRTZXJ2aWNlSW1nID0gY3JlYXRET01FbGVtZW50KHsnbmFtZSc6J2ltZycsJ2hlaWdodCc6JzEnLCAnd2lkdGgnOicxJywgJ3N0eWxlJzonYm9yZGVyLXN0eWxlOm5vbmU7JywgJ2FsdCc6JycsJ3NyYyc6Jy8vZ29vZ2xlYWRzLmcuZG91YmxlY2xpY2submV0L3BhZ2VhZC92aWV3dGhyb3VnaGNvbnZlcnNpb24vMTA3MTQzMDM1NS8/dmFsdWU9MCZndWlkPU9OJnNjcmlwdD0wJ30pOwogICAgICBwYXJlbnRJbWcuYXBwZW5kQ2hpbGQoR29vZ2xlQWRTZXJ2aWNlSW1nKTsKCgogICAgaWYgKGlzR29vZ2xlQWRTZXJ2aWNlSW5pdGlhdGVkID09PSBmYWxzZSkgewogICAgICBpc0dvb2dsZUFkU2VydmljZUluaXRpYXRlZCA9IHRydWU7CiAgICAgIHZhciBnb29nbGVfdGFnX3BhcmFtcyA9IHsKICAgICAgICBsaXN0aW5nX2lkOiAiI0dvb2dsZVJlbWFya2V0aW5nSWQjIiwKICAgICAgICBsaXN0aW5nX3BhZ2V0eXBlOiAiI0dvb2dsZVJlbWFya2V0aW5nUGFnZVR5cGUjIiwKICAgICAgICBsaXN0aW5nX3RvdGFsdmFsdWU6ICIjR29vZ2xlUmVtYXJrZXRpbmdUb3RhbFZhbHVlIyIsCiAgICAgICAgbGlzdGluZ190cmFuc2FjdGlvbjogIiNHb29nbGVSZW1hcmtldGluZ1RyYW5zYWN0aW9uIyIsCiAgICAgICAgbGlzdGluZ19sb2NhbGl0eTogIiNHb29nbGVSZW1hcmtldGluZ0xvY2FsaXR5IyIsCiAgICAgICAgbGlzdGluZ19uYlJvb21zOiAiI0dvb2dsZVJlbWFya2V0aW5nTmJSb29tcyMiCiAgICAgIH07CgogICAgICB2YXIgZ29vZ2xlX2NvbnZlcnNpb25faWQgPSAxMDcxNDMwMzU1OwogICAgICB2YXIgZ29vZ2xlX2N1c3RvbV9wYXJhbXMgPSB3aW5kb3cuZ29vZ2xlX3RhZ19wYXJhbXM7CiAgICAgIHZhciBnb29nbGVfcmVtYXJrZXRpbmdfb25seSA9IHRydWU7CgogICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7CiAgICAgIHNjcmlwdC5zcmMgPSAiaHR0cHM6Ly93d3cuZ29vZ2xlYWRzZXJ2aWNlcy5jb20vcGFnZWFkL2NvbnZlcnNpb25fYXN5bmMuanMiOwogICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaGVhZCIpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICB9CiAgfQogIC8qIDwhW0NEQVRBWyAqLwogIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KGluaXRHb29nbGVBZFNlcnZpY2UsIDQpOwogIC8qIF1dPiAqLwo8L3NjcmlwdD4KCiA8IS0tIE1pbGxlTWVyY2lzIC0tPiAKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAvKioKICAgICAgICAgKiBBY3RpdmVyIC8gZMOpc2FjdGl2ZXIgbGVzIHRhZ3MgTWlsbGUgTWVyY2lzCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gYWJsZURpc2FibGVNaWxsZU1lcmNpcygpIHsKCiAgICAgICAgICAgIHdpbmRvdy5fdHJvcSA9IHdpbmRvdy5fdHJvcSB8fCBbXTsKICAgICAgICAgICAgX3Ryb3EucHVzaCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyd0YWdpZCcsICc2NTU5MDA2LTc0Y2RkMzU1YzkxN2QyZjUxMjI2NjM4ZjM1YTk5ODg1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnX3J0Z3BnJywgJ3Byb2R1Y3QnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydfcnRnaWRjYXQnLCAndmVudGUnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydfcnRnaWRzdWJjYXQnLCAnJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnX3J0Z2lkcHJvZHVpdCcsICc3ZGJlNTFiMC0zNmRlLTlkOWItZjU2Yi00NWQxYWM2YjBjY2MnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydfcnRnaWRwdXNobGlzdGUnLCAnN2RiZTUxYjAtMzZkZS05ZDliLWY1NmItNDVkMWFjNmIwY2NjJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnX3J0Z2lkYWdlbmNlJywgJzE0ODg4NDMnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydfcnRnZGVwYXJ0ZW1lbnQnLCAnNzUnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydfcnRnY29kZXBvc3RhbCcsICc3NTAxMSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ19tNWUnLCAkLk1hcHBlckZhY3RvcnkoKS5nZXRVc2VyTWFwcGVyKCkuZ2V0KCkuZ2V0TWQ1RW1haWwoKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICBpZiAod2luZG93Ll90cm9xY2sgIT09IDEpIHsKICAgICAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgICAgICAgICAgICBhLnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsKICAgICAgICAgICAgICAgIGEuYXN5bmMgPSAhMDsKICAgICAgICAgICAgICAgIGEuc3JjID0gIi8vbW10cm8uY29tL3Ryby5qcyI7CiAgICAgICAgICAgICAgICB2YXIgYiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTsKICAgICAgICAgICAgICAgIGIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgYik7CiAgICAgICAgICAgIH0KCgogICAgICAgIH0KICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgQ29va2llQ29uc2VudC5oaXRPbkNvbnNlbnQoYWJsZURpc2FibGVNaWxsZU1lcmNpcywgNCk7CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KCiA8IS0tIEdvb2dsZVRhZ01hbmFnZXIgLS0+IAo8c2NyaXB0PgogICAgZGF0YUxheWVyID0gW107Cjwvc2NyaXB0PgoKPG5vc2NyaXB0PgogICAgPGlmcmFtZSBzcmM9Ii8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLU5HUUtTTiIgaGVpZ2h0PSIwIiB3aWR0aD0iMCIKICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+PC9pZnJhbWU+Cjwvbm9zY3JpcHQ+Cgo8c2NyaXB0PgogICAgKGZ1bmN0aW9uICh3LCBkLCBzLCBsLCBpKSB7CiAgICAgICAgd1tsXSA9IHdbbF0gfHwgW107CiAgICAgICAgd1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzogbmV3IERhdGUoKS5nZXRUaW1lKCksIGV2ZW50OiAnZ3RtLmpzJ30pOwogICAgICAgIHZhciBmID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSwgaiA9IGQuY3JlYXRlRWxlbWVudChzKSwgZGwgPSBsICE9ICdkYXRhTGF5ZXInID8gJyZsPScgKyBsIDogJyc7CiAgICAgICAgai5hc3luYyA9IHRydWU7CiAgICAgICAgai5zcmMgPSAnLy93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScgKyBpICsgZGw7CiAgICAgICAgZi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLCBmKTsKICAgIH0pKHdpbmRvdywgZG9jdW1lbnQsICdzY3JpcHQnLCAnZGF0YUxheWVyJywgJ0dUTS1OR1FLU04nKTsKPC9zY3JpcHQ+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgZ29vZ2xlVGFnTWFuYWdlclRhZyA9IHsKICAgICAgICAKICAgICAgICBnZXRDb250YWN0UGFnZTogZnVuY3Rpb24gKGNvbnRhY3RTb3VyY2UpIHsKICAgICAgICAgICAgcGFnZU5hbWUgPSBudWxsOwoKICAgICAgICAgICAgICAgICAgICAgICAgWydQUicsICdGQScsICdQUkEnLCAnUERBJ10uZm9yRWFjaChmdW5jdGlvbiAocGFnZUtleSkgewogICAgICAgICAgICAgICAgcmVnZXhTdHIgPSAnKD8hJyArIHBhZ2VLZXkgKyAnKS0oJyArIHBhZ2VLZXkgKyAnKS0oPyEnICsgcGFnZUtleSArICcpJzsKICAgICAgICAgICAgICAgIHJlZ2V4UGFnZSA9IG5ldyBSZWdFeHAocmVnZXhTdHIsICdnJyk7CgogICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGNvbnRhY3RTb3VyY2UubWF0Y2gocmVnZXhQYWdlKSkgewogICAgICAgICAgICAgICAgICAgIHBhZ2VOYW1lID0gcGFnZUtleTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gcGFnZU5hbWU7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIChudWxsICE9PSBwYWdlTmFtZSkgPyAnaW1haWxfY29udGFjdF8nICsgcGFnZU5hbWUgOiBudWxsOwogICAgICAgIH0sCgogICAgICAgIGdldENhbXBhaWduTmFtZTogZnVuY3Rpb24gKGNvbnRhY3RTaXRlLCBjb250YWN0Q291bnRyeSwgY2FtcGFpZ25OYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBjb250YWN0U2l0ZSArICdbJyArIGNvbnRhY3RDb3VudHJ5ICsgJ11bJyArIGNhbXBhaWduTmFtZSArICddJzsKICAgICAgICB9LAoKICAgICAgICBnZXRUcmFuc2FjdGlvblR5cGU6IGZ1bmN0aW9uIChjb250YWN0VHJhbnNhY3Rpb25UeXBlKSB7CiAgICAgICAgICAgIHRyYW5zYWN0aW9uVHlwZSA9IG51bGw7CgogICAgICAgICAgICBpZiAoY29udGFjdFRyYW5zYWN0aW9uVHlwZSkgewogICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25UeXBlID0gJ2F1dHJlJzsKICAgICAgICAgICAgICAgIGlmIChjb250YWN0VHJhbnNhY3Rpb25UeXBlID09PSAnMScpIHsKICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvblR5cGUgPSAnYWNoYXQnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGNvbnRhY3RUcmFuc2FjdGlvblR5cGUgPT09ICcyJykgewogICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uVHlwZSA9ICdsb2NhdGlvbic7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvblR5cGU7CiAgICAgICAgfSwKCiAgICAgICAgdHJhbnNmb3JtRGF0YTogZnVuY3Rpb24gKGluaURhdGEpIHsKICAgICAgICAgICAgY29udGFjdFBhZ2UgPSB0aGlzLmdldENvbnRhY3RQYWdlKGluaURhdGEuY29udGFjdFNvdXJjZSk7CiAgICAgICAgICAgIGNhbXBhaWduTmFtZSA9IHRoaXMuZ2V0Q2FtcGFpZ25OYW1lKGluaURhdGEuY29udGFjdFNpdGUsIGluaURhdGEuY29udGFjdENvdW50cnksIGluaURhdGEuY2FtcGFpZ25OYW1lKTsKICAgICAgICAgICAgdHJhbnNhY3Rpb25UeXBlID0gdGhpcy5nZXRUcmFuc2FjdGlvblR5cGUoaW5pRGF0YS5jb250YWN0VHJhbnNhY3Rpb25UeXBlKTsKCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBldmVudE5hbWU6IGNvbnRhY3RQYWdlIHx8ICcnLAogICAgICAgICAgICAgICAgZXZlbnRDYW1wYWlnbjogY2FtcGFpZ25OYW1lIHx8ICcnLAogICAgICAgICAgICAgICAgZXZlbnRUeXBlVHJhbnNhY3Rpb246IHRyYW5zYWN0aW9uVHlwZSB8fCAnJywKICAgICAgICAgICAgICAgIGV2ZW50U3RhdHVzOiBpbmlEYXRhLmltYWlsU3RhdHVzIHx8ICcnLAogICAgICAgICAgICAgICAgZXZlbnRSZXF1ZXN0SWQ6IGluaURhdGEuaW1haWxSZXF1ZXN0SWQgfHwgJycKICAgICAgICAgICAgfTsKICAgICAgICB9LAoKICAgICAgICB0cmFuc2Zvcm1EYXRhVGVsOiBmdW5jdGlvbihsb2NhdGlvblF1ZXJ5KSB7CgogICAgICAgICAgICB2YXIgY29udGFjdFRyYW5zYWN0aW9uVHlwZSA9ICdhdXRyZSc7CgogICAgICAgICAgICAvLyAgUFIgLyBGQSA6CiAgICAgICAgICAgIGlmIChsb2NhdGlvblF1ZXJ5Lm1hdGNoKC9bPyZdKG9mZmVyKT90cmFuc2FjdGlvbnR5cGU9MSgmfCQpLykgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGNvbnRhY3RUcmFuc2FjdGlvblR5cGUgPSAnYWNoYXQnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChsb2NhdGlvblF1ZXJ5Lm1hdGNoKC9bPyZdKG9mZmVyKT90cmFuc2FjdGlvbnR5cGU9MigmfCQpLykgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGNvbnRhY3RUcmFuc2FjdGlvblR5cGUgPSAnbG9jYXRpb24nOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyAgUGFnZSBEw6l0YWlsIEFnZW5jZSAoYmxvYyBhbm5vbmNlKSA6CiAgICAgICAgICAgIGlmIChsb2NhdGlvblF1ZXJ5Lm1hdGNoKC9bPyZdb2ZmZXJfdHJhbnNhY3Rpb25fdHlwZT0xKCZ8JCkvKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgY29udGFjdFRyYW5zYWN0aW9uVHlwZSA9ICdhY2hhdCc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGxvY2F0aW9uUXVlcnkubWF0Y2goL1s/Jl1vZmZlcl90cmFuc2FjdGlvbl90eXBlPTIoJnwkKS8pICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBjb250YWN0VHJhbnNhY3Rpb25UeXBlID0gJ2xvY2F0aW9uJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGV2ZW50UGFnZSA9IG51bGw7CgogICAgICAgICAgICAvLyAgUFIgLyBGQSA6CiAgICAgICAgICAgIGlmIChsb2NhdGlvblF1ZXJ5Lm1hdGNoKC9bPyZdc291cmNlPVteJl0qLVBSLVteJl0qKCZ8JCkvKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgZXZlbnRQYWdlID0gJ1BSJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobG9jYXRpb25RdWVyeS5tYXRjaCgvWz8mXXNvdXJjZT1bXiZdKi1GQS1bXiZdKigmfCQpLykgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGV2ZW50UGFnZSA9ICdGQSc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vICBQYWdlcyBBZ2VuY2UgOgogICAgICAgICAgICBpZiAobG9jYXRpb25RdWVyeS5tYXRjaCgvWz8mXXNvdXJjZT1bXiZdKi1QUkEtW14mXSooJnwkKS8pICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBldmVudFBhZ2UgPSAnUFJBJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobG9jYXRpb25RdWVyeS5tYXRjaCgvWz8mXXNvdXJjZT1bXiZdKi1QREEtW14mXSooJnwkKS8pICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBldmVudFBhZ2UgPSAnUERBJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGV2ZW50UGFnZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBldmVudE5hbWU6ICcnCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgZXZlbnROYW1lOiAoJ2ltYWlsX2NvbnRhY3RfdGVsXycgKyBldmVudFBhZ2UpLAogICAgICAgICAgICAgICAgZXZlbnRUeXBlVHJhbnNhY3Rpb246IGNvbnRhY3RUcmFuc2FjdGlvblR5cGUKICAgICAgICAgICAgfTsKCiAgICAgICAgfSwKCiAgICAgICAgdGhyb3dIaXQ6IGZ1bmN0aW9uIChoaXREYXRhKSB7CiAgICAgICAgICAgIGlmICghaGl0RGF0YS5ldmVudE5hbWUpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGRhdGFPYmogPSB7CiAgICAgICAgICAgICAgICAnZXZlbnQnOiBoaXREYXRhLmV2ZW50TmFtZSwKICAgICAgICAgICAgICAgICdldmVudFR5cGVUcmFuc2FjdGlvbic6IGhpdERhdGEuZXZlbnRUeXBlVHJhbnNhY3Rpb24KICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKGhpdERhdGEuZXZlbnRDYW1wYWlnbikgewogICAgICAgICAgICAgICAgZGF0YU9iai5ldmVudENhbXBhaWduID0gaGl0RGF0YS5ldmVudENhbXBhaWduOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChoaXREYXRhLmV2ZW50U3RhdHVzKSB7CiAgICAgICAgICAgICAgICBkYXRhT2JqLmV2ZW50U3RhdHVzID0gaGl0RGF0YS5ldmVudFN0YXR1czsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaGl0RGF0YS5ldmVudFJlcXVlc3RJZCkgewogICAgICAgICAgICAgICAgZGF0YU9iai5ldmVudFJlcXVlc3RJZCA9IGhpdERhdGEuZXZlbnRSZXF1ZXN0SWQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGF0YUxheWVyLnB1c2goZGF0YU9iaik7CiAgICAgICAgfQogICAgfQo8L3NjcmlwdD4KCjwhLS0gQ2VkZXhpcyAtLT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgooZnVuY3Rpb24odywgZCkgeyB2YXIgYSA9IGZ1bmN0aW9uKCkgeyB2YXIgYiA9IGQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CmIudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwppZiAodW5kZWZpbmVkICE9PSBiLnNldEF0dHJpYnV0ZSkgeyBiLnNldEF0dHJpYnV0ZSgnYXN5bmMnLCAnYXN5bmMnKTsgfQpiLnNyYyA9ICcvLycgKyAoKHcubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonKSA/ICdzMy5hbWF6b25hd3MuY29tL2NkeC1yYWRhci8nIDogJ3JhZGFyLmNlZGV4aXMuY29tLycpICsgJzAxLTEwMjUyLXJhZGFyMTAubWluLmpzJzsgZC5ib2R5LmFwcGVuZENoaWxkKGIpOyB9OwppZiAody5hZGRFdmVudExpc3RlbmVyKSB7IHcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGEsIGZhbHNlKTsgfQplbHNlIGlmICh3LmF0dGFjaEV2ZW50KSB7IHcuYXR0YWNoRXZlbnQoJ29ubG9hZCcsIGEpOyB9Cn0od2luZG93LCBkb2N1bWVudCkpOwo8L3NjcmlwdD4KCiA8IS0tIEJvdXJzb3JhbWEgLS0+IAo8ZGl2IGlkPSJpbWdCb3Vyc29yYW1hIj4KPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIGZ1bmN0aW9uIGNyZWF0RE9NRWxlbWVudCAob2JqKSB7CiAgICAgICAgbGV0IERPTUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9ialsnbmFtZSddKTsKICAgICAgICBkZWxldGUgb2JqWyduYW1lJ107CiAgICAgICAgZm9yKGNvbnN0IFtrZXksdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHsKICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NoaWxkJykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgRE9NRWxlbWVudC5hcHBlbmRDaGlsZChjcmVhdERPTUVsZW1lbnQodmFsdWUpKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIERPTUVsZW1lbnRba2V5XSA9IHZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gRE9NRWxlbWVudDsKICAgIH0KICAgIGZ1bmN0aW9uIGhpdEJvdXJzb3JhbWEoKXsKICAgICAgICB2YXIgcGFyZW50SW1nID0gd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJpbWdCb3Vyc29yYW1hIik7CiAgICAgICAgdmFyIEJvdXJzb3JhbWFJbWcgPSBjcmVhdERPTUVsZW1lbnQoeyduYW1lJzonaW1nJywnc3JjJzonaHR0cHM6Ly93d3cuc21hcnRhZHNlcnZlci5jb20vaW1wP2ltZ2lkPTE4Njk5NDAyJnRtc3RwPVt0aW1lc3RhbXBdJnRndD1bdGFyZ2V0aW5nXSd9KTsKICAgICAgICBwYXJlbnRJbWcuYXBwZW5kQ2hpbGQoQm91cnNvcmFtYUltZyk7CiAgICB9CiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICBDb29raWVDb25zZW50LmhpdE9uQ29uc2VudChoaXRCb3Vyc29yYW1hLCA0KTsKICAgIH0pOwo8L3NjcmlwdD4KCiA8IS0tIFJlbWFpbE1lIC0tPiAKPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0Ij4KICAgIHZhciByZW1haWxNZUFjdGlvbiA9ewogICAgICAgICJob21lIjpSZW1haWxNZUhvbWUsCiAgICAgICAgImxpc3QiOlJlbWFpbE1lUFIsCiAgICAgICAgInZpZXciOlJlbWFpbE1lRkEsCiAgICAgICAgImNvbnRhY3QiOlJlbWFpbE1lQ29udGFjdAogICAgfTsKCgogICAgZnVuY3Rpb24gaGl0UmVtYWlsTWUoYWN0aW9uKSB7CiAgICAgICAgbGV0IHJlbWFpbG1lRnVuY3Rpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIChmdW5jdGlvbiAoY21fcCwgY21faWQsIGVwLCBxcywgYikgewogICAgICAgICAgICAgICAgY21fcCA9IFtdOwogICAgICAgICAgICAgICAgY21faWQgPSAiNTQwYmRjYWUtZjgwNC00MzUxLTgwYTQtZTMwNzVmODFkNzY0IjsKICAgICAgICAgICAgICAgIGNtX3AucHVzaChbImgiLCB3aW5kb3cueHRfYXRdKTsKICAgICAgICAgICAgICAgIGNtX3AgPSByZW1haWxNZUFjdGlvblthY3Rpb25dKGNtX3ApOwogICAgICAgICAgICAgICAgY21fcC5wdXNoKFsidyIsIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZV0pLCBlcCA9ICIvL3RyLmNsb3VkLW1lZGlhLmZyL3QvIiArIGNtX2lkLCBxcyA9IGNtX3AubWFwKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhWzBdICsgIj0iICsgZW5jb2RlVVJJKGFbMV0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKS5qb2luKCImIiksIGIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdLCBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIiksIGUuc3JjID0gZXAgKyAiPyIgKyBxcywgYi5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGUsIGIpOwogICAgICAgICAgICB9KSgpOwogICAgICAgIH07CiAgICAgICAgICAgIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KHJlbWFpbG1lRnVuY3Rpb24sIDQpOwogICAgfQoKCiAgICBmdW5jdGlvbiBSZW1haWxNZUhvbWUgKGNtX3ApIHsKICAgICAgICAgICAgICAgY21fcC5wdXNoKFsiYWN0aW9uIiwgImhvbWUiXSk7CiAgICAgICAgICAgICAgIHJldHVybiBjbV9wOwogICAgfQoKICAgIGZ1bmN0aW9uIFJlbWFpbE1lUFIgKGNtX3ApIHsKICAgICAgICAgICAgdmFyIG9mZmVyID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpZF49ImhlYWRlci1vZmZlci0iXScpOwogICAgICAgICAgICB2YXIgb2ZmZXJJZCA9IDA7CgogICAgICAgICAgICBjbV9wLnB1c2goWyJhY3Rpb24iLCAic2VhcmNoIl0pOwogICAgICAgICAgICBjbV9wLnB1c2goWyJxdWVyeSIsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZV0pOwogICAgICAgICAgICB3aGlsZShvZmZlcklkIDwgb2ZmZXIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBjbV9wLnB1c2goWyJwcm9kdWN0c1siICsgb2ZmZXJJZCArICJdW2lkXSIsIG9mZmVyW29mZmVySWRdLmlkLnJlcGxhY2UoJ2hlYWRlci1vZmZlci0nLCAnJyldKTsKICAgICAgICAgICAgICAgIG9mZmVySWQrKzsKICAgICAgICAgICAgfQogICAgICAgIHJldHVybiBjbV9wOwogICAgfQoKICAgIGZ1bmN0aW9uIFJlbWFpbE1lRkEgKGNtX3ApIHsKICAgICAgICAgICAgY21fcC5wdXNoKFsiYWN0aW9uIiwgInByb2R1Y3QiXSk7CiAgICAgICAgICAgIGNtX3AucHVzaChbInByb2R1Y3QiLCB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2lkXj0iaGVhZGVyLW9mZmVyLSJdJylbMF0uaWRdKTsKICAgICAgICByZXR1cm4gY21fcDsKICAgIH0KICAgIGZ1bmN0aW9uIFJlbWFpbE1lQ29udGFjdCAoY21fcCkgewogICAgICAgIHZhciBvZmZlciA9IHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2lkXj0iaGVhZGVyLW9mZmVyLSJdJylbMF07CiAgICAgICAgaWYgKG9mZmVyKSB7CiAgICAgICAgICAgIHZhciBwcmljZSA9IG9mZmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tjbGFzcz0ibWFpbi1wcmljZSJdJylbMF07CgogICAgICAgICAgICBjbV9wLnB1c2goWyJhY3Rpb24iLCAic2FsZSJdKTsKICAgICAgICAgICAgY21fcC5wdXNoKFsib3JkZXJfaWQiLCAiIl0pOwogICAgICAgICAgICBjbV9wLnB1c2goWyJwcm9kdWN0c1swXVtpZF0iLCBvZmZlci5pZF0pOwogICAgICAgICAgICBjbV9wLnB1c2goWyJwcm9kdWN0c1swXVtwcmljZV0iLCAocHJpY2UgIT09IHVuZGVmaW5lZCA/IHByaWNlLmlubmVyVGV4dCA6ICcnKV0pOwogICAgICAgICAgICBjbV9wLnB1c2goWyJwcm9kdWN0c1swXVtxdWFudGl0eV0iLCAiMSJdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNtX3A7CiAgICB9Cjwvc2NyaXB0PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2xheW91dC9mb3JtL2dkcHIuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvbGliL3h0Y29yZS5qcyI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0Ij4KICAgIG1kID0gbmV3IE1vYmlsZURldGVjdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICBkZXZpY2VUeXBlID0gbWQubW9iaWxlKCkgPyAnbW9iaWxlJyA6IChtZC50YWJsZXQoKSA/ICd0YWJsZXQnIDogJ2Rlc2t0b3AnKTsKCiAgICB2YXIgc2VhcmNoRW5naW5lVHJhY2tlciA9IG5ldyBUcmFja2luZy5TZWFyY2hFbmdpbmVUcmFja2VyKHsKICAgICAgICBkZXZpY2VUeXBlOiBkZXZpY2VUeXBlLAogICAgICAgIHRyYWNrZXI6IHsKICAgICAgICAgICAgaGl0OiB3aW5kb3cueHRfY2xpY2sKICAgICAgICB9CiAgICB9KTsKCiAgICBzZWFyY2hFbmdpbmVUcmFja2VyLmluaXQoKTsKPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKAogICAgJ0RPTUNvbnRlbnRMb2FkZWQnLAogICAgZnVuY3Rpb24gKCkgewoKICAgIGZ1bmN0aW9uIHNtYXJ0QWRQdXNoICgpIHsKICAgICAgaWYgKHR5cGVvZiBzYXMgIT09ICd1bmRlZmluZWQnICYmIHNhcyAmJiBzYXMuY21kICYmIHNhcy5jbWQucHVzaCkgewogICAgICAgIHNhcy5jbWQucHVzaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgcHJlZml4ID0gJ3Nhc18nOwogICAgICAgICAgdmFyIGJsb2NrcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Nhc19ibG9jaycpOwoKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBibG9ja3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGJsb2NrID0gYmxvY2tzLml0ZW0oaSk7CiAgICAgICAgICAgIHZhciBibG9ja0lkID0gKGJsb2NrLmlkKS5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCk7CgogICAgICAgICAgICB2YXIgcmVuZGVySWQgPSBibG9jay5kYXRhc2V0LnJlbmRlcjsKICAgICAgICAgICAgaWYgKHJlbmRlcklkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAvLyBza2lwIGJsb2NrcyBhbHJlYWR5IHJlbmRlcmVkCiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNhcy5jbWQucHVzaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgc2FzLnJlbmRlcihibG9ja0lkKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2V0VGltZW91dChzbWFydEFkUHVzaCwgNTAwKTsKICAgICAgfQogICAgfQoKICAgIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KHNtYXJ0QWRQdXNoLCA0KTsKICB9KTsKPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IgogICAgICAgIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vc2VhcmNoLW1lYS9jYW5vbmljYWwuanMiPjwvc2NyaXB0PgoKPC9ib2R5Pgo8L2h0bWw+Cg==
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:35 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-c0590797-62e3-28a6-537e-2f285d638a5e.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Cache-Control:
      - public, max-age=300
      Last-Modified:
      - Wed, 01 Apr 2020 15:26:07 GMT
      Expires:
      - Wed, 01 Apr 2020 17:55:35 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.59
      Loadtime:
      - D=261677 t=1585763435443111
      Server:
      - elb
      Date:
      - Wed, 01 Apr 2020 17:50:35 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:35 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-950d9702-f642-d266-a217-6b216a36b398.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Mon, 30 Mar 2020 14:27:48 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.106
      Loadtime:
      - D=231279 t=1585752021866653
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Wed, 01 Apr 2020 17:55:35 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:35 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:35 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-5a4b5fb8-ad20-1f9a-119a-dbc4d0d5338f.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Wed, 01 Apr 2020 15:07:07 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.59
      Loadtime:
      - D=255871 t=1585763436052153
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Wed, 01 Apr 2020 17:55:36 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:36 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:36 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-8740a6f7-3e12-d3a9-9326-79b4aff601c3.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Wed, 01 Apr 2020 12:26:01 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.241
      Loadtime:
      - D=232410 t=1585753336874556
      Server:
      - elb
      Cache-Control:
      - public, max-age=110
      Expires:
      - Wed, 01 Apr 2020 17:52:26 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:36 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:36 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-c81a967d-ae53-4b1b-edd0-d3c187bd3f11.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Cache-Control:
      - public, max-age=300
      Last-Modified:
      - Wed, 01 Apr 2020 14:45:59 GMT
      Expires:
      - Wed, 01 Apr 2020 17:55:36 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.59
      Loadtime:
      - D=239679 t=1585763436537216
      Server:
      - elb
      Date:
      - Wed, 01 Apr 2020 17:50:36 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:36 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-8b4821ba-1883-0054-918d-a01d0b99ce90.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Wed, 01 Apr 2020 14:46:42 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.115
      Loadtime:
      - D=246573 t=1585763436926579
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Wed, 01 Apr 2020 17:55:37 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:37 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:37 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-27b1f5fa-e011-eee6-b3d2-7d58189aba7c.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Wed, 01 Apr 2020 14:46:40 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.88
      Loadtime:
      - D=226144 t=1585763437371098
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Wed, 01 Apr 2020 17:55:37 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:37 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:37 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-c5207675-061b-b9e3-7e73-d342ef38cce9.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Cache-Control:
      - public, max-age=300
      Last-Modified:
      - Wed, 01 Apr 2020 14:46:40 GMT
      Expires:
      - Wed, 01 Apr 2020 17:55:37 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.70
      Loadtime:
      - D=219580 t=1585763437706087
      Server:
      - elb
      Date:
      - Wed, 01 Apr 2020 17:50:37 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:37 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-17597fef-fdf5-dc18-4f6b-fb7e9b336aed.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Wed, 01 Apr 2020 13:46:06 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.70
      Loadtime:
      - D=193704 t=1585757278310767
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Wed, 01 Apr 2020 17:55:38 GMT
      Date:
      - Wed, 01 Apr 2020 17:50:38 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:38 GMT
recorded_with: VCR 5.1.0
