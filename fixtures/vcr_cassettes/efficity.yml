---
http_interactions:
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/results/?inputed_location=8075056&max_price=&min_nb_of_rooms=1&property_type=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Tue, 31 Mar 2020 16:38:39 GMT
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '43895'
      Cache-Control:
      - max-age=
      X-Varnish:
      - '12879629'
      - '15088876'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:39 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_94-m2_paris_75013_10248850/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Tue, 31 Mar 2020 16:38:39 GMT
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Origin
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '10456339'
      - '30610187'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CgoKPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0ieC1kbnMtcHJlZmV0Y2gtY29udHJvbCIgY29udGVudD0ib24iPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KICAgIDwhLS0gVGhlIGFib3ZlIG1ldGEgdGFncyAqbXVzdCogY29tZSBmaXJzdCBpbiB0aGUgaGVhZDsgYW55IG90aGVyIGhlYWQgY29udGVudCBtdXN0IGNvbWUgKmFmdGVyKiB0aGVzZSB0YWdzIC0tPgogICAgCiAgICAKICAgIDxsaW5rIHJlbD0iZG5zLXByZWZldGNoIiBocmVmPSIvL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQiIC8+CiAgICA8bGluayByZWw9ImRucy1wcmVmZXRjaCIgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldCIgLz4KICAgIDxsaW5rIHJlbD0iZG5zLXByZWZldGNoIiBocmVmPSIvL2FrYXRyYWNraW5nLmVzZWFyY2h2aXNpb24uY29tIiAvPgogICAgPGxpbmsgcmVsPSJkbnMtcHJlZmV0Y2giIGhyZWY9Ii8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tIiAvPgogICAgPGxpbmsgcmVsPSJkbnMtcHJlZmV0Y2giIGhyZWY9Ii8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tIiAvPgogICAgPGxpbmsgcmVsPSJkbnMtcHJlZmV0Y2giIGhyZWY9Ii8vc3RhdHMuZy5kb3VibGVjbGljay5uZXQiIC8+CiAgICAKICAgIDxsaW5rIHJlbD0iZG5zLXByZWZldGNoIiBocmVmPSJodHRwczovL2UxaXNpNmZzMGdra2NyLmNsb3VkZnJvbnQubmV0IiAvPgogICAgPGxpbmsgcmVsPSJkbnMtcHJlZmV0Y2giIGhyZWY9Imh0dHBzOi8vZTFzZmF4ZWtmazc5emguY2xvdWRmcm9udC5uZXQiIC8+CiAgICA8bGluayByZWw9ImRucy1wcmVmZXRjaCIgaHJlZj0iaHR0cHM6Ly9lYXZnZ2E4d2NnZXN1LmNsb3VkZnJvbnQubmV0IiAvPgoKCiAgICAKICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+dmFyIGRhdGFMYXllciA9IFt7J2V0YXR1c2VyJzogJ05vbiBMb2d1ZScsICdpZHVzZXInOiAnJywgJ29wdGlHcm91cCc6ICdDbGFzc2lmaWVkRGV0YWlsMScgfV08L3NjcmlwdD4KICAgICAgICAKICAgICAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KPG5vc2NyaXB0PjxpZnJhbWUgc3JjPSIvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS01NUw0V1YiCmhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KKGZ1bmN0aW9uKHcsZCxzLGwsaSl7d1tsXT13W2xdfHxbXTt3W2xdLnB1c2goeydndG0uc3RhcnQnOgpuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCmo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQonLy93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7Cn0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnZGF0YUxheWVyJywnR1RNLTU1TDRXVicpOwo8L3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgoKICAgIAoKICAgIDwhLS0gQW50aS1mbGlja2VyIHNuaXBwZXQgKHJlY29tbWVuZGVkKSAgLS0+CiAgICA8c3R5bGU+LmFzeW5jLWhpZGUgeyBvcGFjaXR5OiAwICFpbXBvcnRhbnR9IDwvc3R5bGU+CiAgICA8c2NyaXB0PihmdW5jdGlvbihhLHMseSxuLGMsaCxpLGQsZSl7cy5jbGFzc05hbWUrPScgJyt5O2guc3RhcnQ9MSpuZXcgRGF0ZTsKICAgIGguZW5kPWk9ZnVuY3Rpb24oKXtzLmNsYXNzTmFtZT1zLmNsYXNzTmFtZS5yZXBsYWNlKFJlZ0V4cCgnID8nK3kpLCcnKX07CiAgICAoYVtuXT1hW25dfHxbXSkuaGlkZT1oO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpKCk7aC5lbmQ9bnVsbH0sYyk7aC50aW1lb3V0PWM7CiAgICB9KSh3aW5kb3csZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCdhc3luYy1oaWRlJywnZGF0YUxheWVyJyw0MDAwLAogICAgeydHVE0tTlc3TU5ORyc6dHJ1ZX0pOzwvc2NyaXB0PgoKICAgIAogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgKGZ1bmN0aW9uKGkscyxvLGcscixhLG0pe2lbJ0dvb2dsZUFuYWx5dGljc09iamVjdCddPXI7aVtyXT1pW3JdfHxmdW5jdGlvbigpewogICAgICAgIChpW3JdLnE9aVtyXS5xfHxbXSkucHVzaChhcmd1bWVudHMpfSxpW3JdLmw9MSpuZXcgRGF0ZSgpO2E9cy5jcmVhdGVFbGVtZW50KG8pLAogICAgICAgIG09cy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTthLmFzeW5jPTE7YS5zcmM9ZzttLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbSkKICAgICAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2h0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsJ2dhJyk7CgogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtMjUwNTczMy0xJywgJ2F1dG8nKTsKICAgICAgICBnYSgncmVxdWlyZScsICdHVE0tTlc3TU5ORycpOwogICAgICAgIDwvc2NyaXB0PgogICAgCgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSIvL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvaW1nL2Zhdmljb24uaWNvIj4KICAgIDx0aXRsZT5BY2hhdCBhcHBhcnRlbWVudCA5NCBtMiBQYXJpcyAoNzUwMTMpLCA1IHBpw6hjZXM8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Imh0dHBzOi8vd3d3LmVmZmljaXR5LmNvbS9hY2hhdC1pbW1vYmlsaWVyL2FwcGFydGVtZW50Xzk0LW0yX3BhcmlzXzc1MDEzXzEwMjQ4ODUwLyI+CiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iNzUwMTMgUEFSSVMgLSBSVUUgREUgVE9MQklBQyAtIDUgUElFQ0VTIFRSQVZFUlNBTlQgLSBET1VCTEUgU0VKT1VSIEFWRUMgMyBDSEFNQlIiLz4KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSIiLz4KICAgIDxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0iaW5kZXgsIGZvbGxvdyIvPgogICAgCiAgICAKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9wbHVnaW5zL2Jvb3RzdHJhcC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvcGx1Z2lucy9mb250LWF3ZXNvbWUvY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzIj4KICAgIAogICAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L3BsdWdpbnMvY3ViZXBvcnRmb2xpby9jc3MvY3ViZXBvcnRmb2xpby5taW4uY3NzIj4KICAgIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9qcy9sZWFmbGV0L2xlYWZsZXQuY3NzIiAvPgogICAgCiAgICAgICAgPGxpbmsgaHJlZj0iLy9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2Nzcy9jbGFzc2lmaWVkX2RldGFpbC4yZWM0YTdhYS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiLz4KICAgIAoKPC9oZWFkPgo8Ym9keSByb2xlPSJkb2N1bWVudCI+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CmZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7CiAgICB2YXIgY29va2llVmFsdWUgPSBudWxsOwogICAgaWYgKGRvY3VtZW50LmNvb2tpZSAmJiBkb2N1bWVudC5jb29raWUgIT09ICcnKSB7CiAgICAgICAgdmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGNvb2tpZSA9IGNvb2tpZXNbaV0udG9TdHJpbmcoKS5yZXBsYWNlKC9eXHMrLywgIiIpLnJlcGxhY2UoL1xzKyQvLCAiIik7CiAgICAgICAgICAgIC8vIERvZXMgdGhpcyBjb29raWUgc3RyaW5nIGJlZ2luIHdpdGggdGhlIG5hbWUgd2Ugd2FudD8KICAgICAgICAgICAgaWYgKGNvb2tpZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggKyAxKSA9PT0gKG5hbWUgKyAnPScpKSB7CiAgICAgICAgICAgICAgICBjb29raWVWYWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKG5hbWUubGVuZ3RoICsgMSkpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gY29va2llVmFsdWU7Cn0KZnVuY3Rpb24gcmVwbGFjZUNTUkZUb2tlbihjc3JmdG9rZW4pIHsKICAgIHZhciBjc3JmSW5wdXRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbbmFtZT1jc3JmbWlkZGxld2FyZXRva2VuXScpOwogICAgZm9yIChpID0gMDsgaSA8IGNzcmZJbnB1dExpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICBjc3JmSW5wdXRMaXN0W2ldLnZhbHVlID0gY3NyZnRva2VuOwogICAgfQp9CmZ1bmN0aW9uIHJlc2V0Q1NSRlRva2VuKCkgewogICAgdmFyIGk7CiAgICB2YXIgY3NyZnRva2VuID0gZ2V0Q29va2llKCdjc3JmdG9rZW4nKTsKICAgIGlmIChjc3JmdG9rZW4gPT09IG51bGwpIHsKICAgICAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICB4aHIub3BlbignSEVBRCcsICcvY3NyZicpOwogICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgICAgICAgY3NyZnRva2VuID0gZ2V0Q29va2llKCdjc3JmdG9rZW4nKTsKICAgICAgICAgICAgICAgIHJlcGxhY2VDU1JGVG9rZW4oY3NyZnRva2VuKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgeGhyLnNlbmQoKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmVwbGFjZUNTUkZUb2tlbihjc3JmdG9rZW4pOwogICAgfQoKfQpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgcmVzZXRDU1JGVG9rZW4sIGZhbHNlKTsKPC9zY3JpcHQ+CgoKPGhlYWRlcj4KICAgIDxoMT5BY2hhdCBhcHBhcnRlbWVudCA5NCBtMiBQYXJpcyAoNzUwMTMpLCA1IHBpw6hjZXM8L2gxPgogICAgPGRpdiBjbGFzcz0ibWFpbl9oIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8YSBjbGFzcz0ibG9nbyIgaHJlZj0iLyI+PGltZyBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvbGF5b3V0L2xvZ29zL2xvZ28tZWZmaWNpdHkucG5nIiBhbHQ9IkVmZmljaXR5IiBjbGFzcz0iYy1kZXNrdG9wLWxvZ28iPjwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9iaWxlLXRvZ2dsZSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJ0b2dnbGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhhbWJ1cmdlciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxuYXY+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpID48YSBocmVmPSIvZXN0aW1hdGlvbi1pbW1vYmlsaWVyZS8iPkVzdGltYXRpb24gaW1tb2JpbGnDqHJlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpID48YSBocmVmPSIvcHJpeC1pbW1vYmlsaWVyLW0yLyI+UHJpeCBpbW1vYmlsaWVyIGF1IG0yPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpID48YSBocmVmPSIvdmVuZHJlLWFwcGFydGVtZW50LW1haXNvbi8iPlZlbmRyZSBhdmVjIGVmZmlDaXR5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpdGVtYWN0aXZlIj48YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci8iPkFjaGF0IGltbW9iaWxpZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL3d3dy5lZmZpY2l0eS1yZWNydXRlbWVudC5jb20vIj5EZXZlbmlyIGFnZW50IGltbW9iaWxpZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvbmF2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvaGVhZGVyPgoKCgoKICAgIDxzZWN0aW9uIGNsYXNzPSJicmVhZGNydW1iIGMtYm9yZGVyZWQgYy1ib3JkZXJlZC1ib3RoIj4KICAgIDx1bCBjbGFzcz0iYy1wYWdlLWJyZWFkY3J1bWJzIGMtdGhlbWUtbmF2IGMtcHVsbC1sZWZ0IGMtZm9udHMtcmVndWxhciI+CiAgICAgICAgPGxpICBjbGFzcz0iaGlkZGVuLXhzIiA+PGEgaHJlZj0iLyI+ZWZmaUNpdHk8L2E+PC9saT4KICAgICAgICA8bGkgIGNsYXNzPSJoaWRkZW4teHMiID4vPC9saT4KICAgICAgICAKICAgICAgICA8bGk+PGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXIvIj5BY2hhdCBpbW1vYmlsaWVyPC9hPjwvbGk+CiAgICAgICAgPGxpPi88L2xpPgogICAgICAgIAogICAgICAgIDxsaT48YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9yX2FwcGFydGVtZW50X2lsZS1kZS1mcmFuY2VfMTEvIj7DjmxlLWRlLUZyYW5jZTwvYT48L2xpPgogICAgICAgIDxsaT4vPC9saT4KICAgICAgICAKICAgICAgICA8bGk+PGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXIvYXBwYXJ0ZW1lbnRfcGFyaXNfNzUvIj5QYXJpczwvYT48L2xpPgogICAgICAgIDxsaT4vPC9saT4KICAgICAgICAKICAgICAgICA8bGk+PGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXIvYXBwYXJ0ZW1lbnRfcGFyaXNfNzUwMTMvIj5QYXJpcyAxM8OobWU8L2E+PC9saT4KICAgICAgICA8bGk+LzwvbGk+CiAgICAgICAgCiAgICAgICAgPGxpPkFwcGFydGVtZW50IDk0IG0yPC9saT4KICAgICAgICAKICAgICAgICAKICAgIDwvdWw+Cjwvc2VjdGlvbj4KCiAgICAKCgo8c2VjdGlvbj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGgyIGlkPSJub20tYmllbiI+QXBwYXJ0ZW1lbnQgfCBQYXJpcyAoNzUwMTMpIC0gNSBwacOoY2VzIC0gOTUgbSZzdXAyOyA8L2gyPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InByaXgtYmllbiI+ODUwwqAwMDAg4oKsPC9oMz4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjLWVmZmljaXR5LWZvbnQiPkguQS5JPC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXhjbHVzaXZpdHkiPkV4Y2x1c2l2aXTDqSBlZmZpQ2l0eTwvc3Bhbj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9zZWN0aW9uPgoKICAgIAoKCgo8c2VjdGlvbiBjbGFzcz0iYmdwaG90byBmaXJzdCI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgoJCTxkaXYgY2xhc3M9InJvdyI+CgkJCTxkaXYgY2xhc3M9ImJncGhvdG8iPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvc2Vqb3VyLmpwZyIgY2xhc3M9ImNicC1jYXB0aW9uIGNicC1saWdodGJveCIgZGF0YS10aXRsZT0iIj4KCQkJCSAgICA8ZGl2IGNsYXNzPSJjYnAtY2FwdGlvbi1kZWZhdWx0V3JhcCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwaWN0dXJlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyY3NldD0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL3h4bC9zZWpvdXIuanBnIiBtZWRpYT0iKG1pbi13aWR0aDogMTE3MHB4KSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3Jjc2V0PSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3MveGwvc2Vqb3VyLmpwZyIgbWVkaWE9IihtaW4td2lkdGg6IDk3MHB4KSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3Jjc2V0PSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3MvbC9zZWpvdXIuanBnIiBtZWRpYT0iKG1pbi13aWR0aDogNjAwcHgpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmNzZXQ9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzEwMjQ4ODUwL3Bob3Rvcy9tL3Nlam91ci5qcGciIG1lZGlhPSIobWluLXdpZHRoOiAyOTBweCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyY3NldD0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL3Mvc2Vqb3VyLmpwZyIgbWVkaWE9IihtYXgtd2lkdGg6IDI5MHB4KSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3Jjc2V0PSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3MveHhsL3Nlam91ci5qcGciPgoJCQkJCSAgICAgICA8aW1nIGNsYXNzPSJpbWctcmVzcG9uc2l2ZSBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzEwMjQ4ODUwL3Bob3Rvcy94eGwvc2Vqb3VyLmpwZyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9waWN0dXJlPgoJCQkJICAgIDwvZGl2PgoJCSAgICAgICAgPC9hPgoJCQk8L2Rpdj4KCQk8L2Rpdj4KICAgICAgICAKCQk8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAKCQkJPGRpdiBjbGFzcz0iY29sLW1kLTYgcm93LWZvdXItcGhvdG9zICI+CgkJCSAgICA8YSBocmVmPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3MvbC9zYW0uanBnIiBjbGFzcz0iY2JwLWNhcHRpb24gY2JwLWxpZ2h0Ym94IiBkYXRhLXRpdGxlPSJQaG90byI+CgkJCSAgICAgICAgPGRpdiBjbGFzcz0iY2JwLWNhcHRpb24tZGVmYXVsdFdyYXAiPgoJCQkJICAgICAgIDxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL20vc2FtLmpwZyIgYWx0PSIiPgoJCQkgICAgICAgIDwvZGl2PgoJCQkgICAgPC9hPgoJCQk8L2Rpdj4KICAgICAgICAgICAgCgkJCTxkaXYgY2xhc3M9ImNvbC1tZC02IHJvdy1mb3VyLXBob3RvcyBsYXN0cGhvdG8iPgoJCQkgICAgPGEgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvdnVlLXJ1ZS5qcGciIGNsYXNzPSJjYnAtY2FwdGlvbiBjYnAtbGlnaHRib3giIGRhdGEtdGl0bGU9IlBob3RvIj4KCQkJICAgICAgICA8ZGl2IGNsYXNzPSJjYnAtY2FwdGlvbi1kZWZhdWx0V3JhcCI+CgkJCQkgICAgICAgPGltZyBjbGFzcz0iaW1nLXJlc3BvbnNpdmUgbGF6eWxvYWQiIGRhdGEtc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3MvbS92dWUtcnVlLmpwZyIgYWx0PSIiPgoJCQkgICAgICAgIDwvZGl2PgoJCQkgICAgPC9hPgoJCQk8L2Rpdj4KICAgICAgICAgICAgCgkJPC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIHJvdy1mb3VyLXBob3RvcyAiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvY3Vpc2luZS5qcGciIGNsYXNzPSJjYnAtY2FwdGlvbiBjYnAtbGlnaHRib3giIGRhdGEtdGl0bGU9IlBob3RvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYnAtY2FwdGlvbi1kZWZhdWx0V3JhcCI+CiAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLXJlc3BvbnNpdmUgbGF6eWxvYWQiIGRhdGEtc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3Mvcy9jdWlzaW5lLmpwZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIHJvdy1mb3VyLXBob3RvcyAiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvZW50cmVlLTIuanBnIiBjbGFzcz0iY2JwLWNhcHRpb24gY2JwLWxpZ2h0Ym94IiBkYXRhLXRpdGxlPSJQaG90byI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2JwLWNhcHRpb24tZGVmYXVsdFdyYXAiPgogICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL3MvZW50cmVlLTIuanBnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgcm93LWZvdXItcGhvdG9zICI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3MvbC9jaC0zLWJpcy5qcGciIGNsYXNzPSJjYnAtY2FwdGlvbiBjYnAtbGlnaHRib3giIGRhdGEtdGl0bGU9IlBob3RvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYnAtY2FwdGlvbi1kZWZhdWx0V3JhcCI+CiAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLXJlc3BvbnNpdmUgbGF6eWxvYWQiIGRhdGEtc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3Mvcy9jaC0zLWJpcy5qcGciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyByb3ctZm91ci1waG90b3MgbGFzdHBob3RvIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzEwMjQ4ODUwL3Bob3Rvcy9sL2NoLTEuanBnIiBjbGFzcz0iY2JwLWNhcHRpb24gY2JwLWxpZ2h0Ym94IiBkYXRhLXRpdGxlPSJQaG90byI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2JwLWNhcHRpb24tZGVmYXVsdFdyYXAiPgogICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL3MvY2gtMS5qcGciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZXBob3RvcyBjb2wtbWQtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Vm9pciBsZXMgMTMgcGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgICAgICAKCgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtY29udGVudC1ib3ggYy1zaXplLW1kIGMtYmctZ3JleS0xIGMtb3ZlcmZsb3ctaGlkZSBoaWRkZW4iPgogICAgICAgICAgICAgICAgPGRpdiBpZD0iZ3JpZC1jb250YWluZXIiIGNsYXNzPSJjYnAiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2JwLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvY2gtMi5qcGciIGNsYXNzPSJjYnAtY2FwdGlvbiBjYnAtbGlnaHRib3giIGRhdGEtdGl0bGU9IlBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNicC1jYXB0aW9uLWRlZmF1bHRXcmFwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctcmVzcG9uc2l2ZSBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzEwMjQ4ODUwL3Bob3Rvcy9sL2NoLTIuanBnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYnAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3MvbC92dWUtY2gtcGFyZW50LTItODAwLTYwMC5qcGciIGNsYXNzPSJjYnAtY2FwdGlvbiBjYnAtbGlnaHRib3giIGRhdGEtdGl0bGU9IlBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNicC1jYXB0aW9uLWRlZmF1bHRXcmFwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctcmVzcG9uc2l2ZSBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzEwMjQ4ODUwL3Bob3Rvcy9sL3Z1ZS1jaC1wYXJlbnQtMi04MDAtNjAwLmpwZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2JwLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvc2RiLTgwMC14NjAwLmpwZyIgY2xhc3M9ImNicC1jYXB0aW9uIGNicC1saWdodGJveCIgZGF0YS10aXRsZT0iUGhvdG8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2JwLWNhcHRpb24tZGVmYXVsdFdyYXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvc2RiLTgwMC14NjAwLmpwZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2JwLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvcGFydGllcy1jb21tdWVzLXJkYy5qcGciIGNsYXNzPSJjYnAtY2FwdGlvbiBjYnAtbGlnaHRib3giIGRhdGEtdGl0bGU9IlBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNicC1jYXB0aW9uLWRlZmF1bHRXcmFwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctcmVzcG9uc2l2ZSBsYXp5bG9hZCIgZGF0YS1zcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzEwMjQ4ODUwL3Bob3Rvcy9sL3BhcnRpZXMtY29tbXVlcy1yZGMuanBnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYnAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3MvbC9wbGFuLTJkLTgwMC14LTYwMC5qcGciIGNsYXNzPSJjYnAtY2FwdGlvbiBjYnAtbGlnaHRib3giIGRhdGEtdGl0bGU9IlBsYW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2JwLWNhcHRpb24tZGVmYXVsdFdyYXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvcGxhbi0yZC04MDAteC02MDAuanBnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYnAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xMDI0ODg1MC9waG90b3MvbC9wbGFuLTNkLTgwMC14LTYwMC5qcGciIGNsYXNzPSJjYnAtY2FwdGlvbiBjYnAtbGlnaHRib3giIGRhdGEtdGl0bGU9IlBsYW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2JwLWNhcHRpb24tZGVmYXVsdFdyYXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIGxhenlsb2FkIiBkYXRhLXNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTAyNDg4NTAvcGhvdG9zL2wvcGxhbi0zZC04MDAteC02MDAuanBnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoJPC9kaXY+Cjwvc2VjdGlvbj4KCiAgICAKPHNlY3Rpb24gaWQ9InRvb2xiYXJfYWN0aXZhdGlvbiIgY2xhc3M9InRvb2xiYXJkZXRhaWwiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcm93Ym9yZGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEgcGhvdG8tY29udGFjdCI+CiAgICAgICAgICAgICAgICA8aW1nIHdpZHRoPTMwMCBzcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2NvbnN1bHRhbnQvbG1vbnRhcmlvbC9waG90b3Mvcy9jb25zdWx0YW50LnBuZyIvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUiPgogICAgICAgICAgICAgICAgPGgyPkFwcGFydGVtZW50IHByb3Bvc8OpIHBhciAgTGF1cmVuY2UgTW9udGFyaW9sPC9oMj4KICAgICAgICAgICAgICAgIDxoND48YSBocmVmPSIvbG1vbnRhcmlvbC8iIGNsYXNzPSJzaXRlIj5Db25zdWx0YW50IGltbW9iaWxpZXIgw6AgUGFyaXMgMTTDqG1lIDwvYT48L2g0PgogICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImltbW9kdmlzb3JfaW5mb3MiPjwvc3Bhbj48bGluayByZWw9ImltcG9ydCIgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vY29uc3VsdGFudC9sbW9udGFyaW9sL2ltbW9kdmlzb3IuaHRtbCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLWFjdGlvbnMgY29sLXNtLTYgbGFzdCI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjbm91cy1jb250YWN0ZXIiIGNsYXNzPSJidG4gYnRuLWxnIGMtYnRuLWdyZWVuRWZmaWNpdHkiPkRlbWFuZGVyIGRlcyBpbmZvcyBzdXIgY2UgYmllbjwvYT4KICAgICAgICAgICAgICAgIDxoMz5PdSBhcHBlbGVyIGxlIDxzcGFuIGNsYXNzPSJwaG9uZSI+KzMzNjI4MjM4MDU5PC9zcGFuPiA8YSBocmVmPSIjbm91cy1jb250YWN0ZXIiPmxtb250YXJpb2xAZWZmaWNpdHkuY29tPC9hPjwvaDM+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cjwvc2VjdGlvbj4KCiAgICAKCjxzZWN0aW9uIGlkPSJyZXN1bWUiPgogIDxkaXYgY2xhc3M9ImRldGFpbC1jb250YWluZXIgY29udGFpbmVyIj4KCTxkaXYgY2xhc3M9InJvdyByZXN1bWUtcGljdG8iPgogICAgICAgIAoJCTxkaXYgY2xhc3M9Iml0ZW1yaWJib24gY29sLXJlc3VtZSBjb2wtbWQtNCBjb2wtc20tNCI+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIiBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvbGF5b3V0L3BpY3Rvcy9jYXJyZXoucG5nIiAvPgogICAgICAgICAgICA8aDQ+OTIuODQgbTIgQ2FycmV6PC9oND4KCQk8L2Rpdj4KICAgICAgICAKCQk8ZGl2IGNsYXNzPSJpdGVtcmliYm9uIGNvbC1yZXN1bWUgY29sLW1kLTQgY29sLXNtLTQiPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctcmVzcG9uc2l2ZSIgc3JjPSIvL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvaW1nL2xheW91dC9waWN0b3MvY2hhbWJyZS5wbmciIC8+CiAgICAgICAgICAgIDxoND4zIGNoYW1icmVzPC9oND4KCQk8L2Rpdj4KICAgICAgICAKCQk8ZGl2IGNsYXNzPSJpdGVtcmliYm9uIGNvbC1yZXN1bWUgY29sLW1kLTQgY29sLXNtLTQiPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctcmVzcG9uc2l2ZSIgc3JjPSIvL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvaW1nL2xheW91dC9waWN0b3Mvc2FsbGUtZGUtYmFpbi5wbmciIC8+CiAgICAgICAgICAgIDxoND4xIHNhbGxlIGRlIGJhaW48L2g0PgoJCTwvZGl2PgogICAgICAgIAoJPC9kaXY+CiA8L2Rpdj4KPC9zZWN0aW9uPgoKCiAgICAKCgogICAgCgoKICAgIAoKCgo8c2VjdGlvbiBjbGFzcz0iZGV0YWlsLWRlc2MiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIAk8ZGl2IGNsYXNzPSJyb3ciPgogICAgCQk8ZGl2IGNsYXNzPSJjLWNvbnRlbnQtdGl0bGUiPgogICAgICAgICAgICAgICAgPGgyPlByw6lzZW50YXRpb24gZGUgY2V0IGFwcGFydGVtZW50IDwvaDI+CiAgICAJCQk8ZGl2IGNsYXNzPSJjLWxpbmUtY2VudGVyIGMtdGhlbWUtYmciPjwvZGl2PgogICAgCQk8L2Rpdj4KICAgICAgICAJPGRpdiBjbGFzcz0iZGV0YWlsLWRlc2MtdGV4dCBjb2wtbWQtMTIiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgNzUwMTMgUEFSSVMgLSBSVUUgREUgVE9MQklBQyAtIDUgUElFQ0VTIFRSQVZFUlNBTlQgLSBET1VCTEUgU0VKT1VSIEFWRUMgMyBDSEFNQlJFUyAtIE1PVUxVUkVTIEVUIFBBUlFVRVQuICBMYXVyZW5jZSBNb250YXJpb2wgZWZmaWNpdHkgdm91cyBwcm9wb3NlIGRhbnMgdW4gaW1tZXVibGUgYmllbiBlbnRyZXRlbnUgZW4gcGllcnJlIGV0IGJyaXF1ZXMgZGUgbGEgcnVlIGRlIFRvbGJpYWMoIGPDtHTDqSBIb3BpdGFsIFNhaW50ZSBBbm5lIC8gcGFyYyBNb250c291cmlzKSwgdW4gYmVsIGFwcGFydGVtZW50IGZhbWlsaWFsIHRyYXZlcnNhbnQgKHN1ZC1ub3JkKSBkJiMzOTtlbnZpcm9uIDk1IG3CsiAoIDkyLDg0IG3CsiBjYXJyZXopIGF2ZWMgZG91YmxlIHPDqWpvdXIgZXQgMyBjaGFtYnJlcyBlbiBwcmVtaWVyIMOpdGFnZSBzYW5zIGFzY2Vuc2V1ciAocsOpdW5pb24gZGUgZGV1eCBsb3RzIDogdW4gMyBwacOoY2VzIGV0IHVuIDIgcGnDqGNlcykuIFVuZSBncmFuZGUgZW50csOpZSBkZXNzZXJ0IHVuIGRvdWJsZSBzw6lqb3VyIGRlIDI2IG3CsiwgMyBjaGFtYnJlcywgdW5lIGN1aXNpbmUgYW3DqW5hZ8OpZSwgdW5lIHNhbGxlIGRlIGJhaW5zLCB1biBjYWdpYmkgKGV4IFdDKSwgdW4gV0MgaW5kw6lwZW5kYW50LCB1biBkcmVzc2luZy4gIE1vdWx1cmVzLCBwYXJxdWV0LCBiZWxsZSBoYXV0ZXVyIHNvdXMgcGxhZm9uZCwgY2hhdWZmYWdlIGluZGl2aWR1ZWwgZ2F6LCBmYWlibGVzIGNoYXJnZXMuIERldXggYmVsbGVzIGNhdmVzIGNvbXBsw6h0ZW50IGxlIGJpZW4uIE1ldHJvIEdsYWNpw6hyZSBMaWduZSA2LiBCdXMgNjIgZXQgMjEuIENvbnRhY3QgMDYgMjggMjMgODAgNTkKICAgICAgICAgICAgICAgIAogICAgICAgIAk8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KCiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBQcml4IGRlIHZlbnRlIDogODUwwqAwMDAg4oKsIChob25vcmFpcmVzIGNoYXJnZXMgdmVuZGV1cik8YnI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L3BkZi9CQVJFTUVfTkFUSU9OQUwucGRmIj5Ob3MgYmFyw6htZXM8L2E+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlscy1pbmZvIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgIDxoND5EaXN0cmlidXRpb248L2g0PgogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Tm9tYnJlIGRlIHBpw6hjZXM8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk5vbWJyZSBkZSBzYWxsZXMgZGUgYmFpbjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3VyZmFjZSBDYXJyZXo8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjkyLjg0bTI8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlscy1pbmZvIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgIDxoND5DYXJhY3TDqXJpc3RpcXVlcyB0ZWNobmlxdWVzPC9oND4KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk9yaWdpbmUgZHUgY2hhdWZmYWdlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5JbmRpdmlkdWVsPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5UeXBlIGRlIGNoYXVmZmFnZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmFkaWF0ZXVyPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Nb2RlIGRlIGRpZmZ1c2lvbiBkdSBjaGF1ZmZhZ2U8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkdhejwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+T3JpZ2luZSBkJiMzOTtlYXUgY2hhdWRlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5JbmRpdmlkdWVsPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5UeXBlIGQmIzM5O2VhdSBjaGF1ZGU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNoYXVkacOocmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk1vZGUgZGUgcHJvZHVjdGlvbiBkJiMzOTtlYXUgY2hhdWRlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5HYXo8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlscy1pbmZvIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgIDxoND5UYXhlIGZvbmNpw6hyZTwvaDQ+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWxpc3QiPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Nb250YW50PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4xMDE5LjAgZXVyb3M8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlscy1pbmZvIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgIDxoND5Db21tb2RpdMOpczwvaDQ+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWxpc3QiPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5DaGVtaW7DqWU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk5vbjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UGlzY2luZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Tm9uPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+CgogICAgCgo8c2VjdGlvbiBpZD0iZGlhZ25vc3RpY3MiPgogICAgPCEtLXRpdHJlLS0+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBjb250ZW50LXRvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250ZW50LXRpdGxlIj4KICAgICAgICAgICAgICAgIDxoMj5EaWFnbm9zdGljIERQRTwvaDI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1saW5lLWNlbnRlciI+IDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tZmluIHRpdHJlLS0+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0yIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtY29udGVudC1kaWFnbm9zdGljIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLWNvbnRlbnQtY29sb25uZWltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvaW1nL2NvbnRlbnQvZGlhZ25vc3RpY3MvZW5lcmdpZS9kaWFnX2NvbnMucG5nIi8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGlhZ25vc3RpYyI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctcmVzcG9uc2l2ZSIgc3JjPSIvL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvaW1nL2NvbnRlbnQvZGlhZ25vc3RpY3MvZW5lcmdpZS9CLnBuZyIvPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250ZW50LWRpYWdub3N0aWMiPgogICAgICAgICAgICAgICAgICAgIDxoMz5Db25zb21tYXRpb24gw6luZXJnw6l0aXF1ZTwvaDM+CiAgICAgICAgICAgICAgICAgICAgPHA+Q29uc29tbWF0aW9ucyDDqW5lcmfDqXRpcXVlcyAoZW4gw6luZXJnaWUgcHJpbWFpcmUpIHBvdXIgbGUgY2hhdWZmYWdlLCBsYSBwcm9kdWN0aW9uIGQnZWF1IGNoYXVkZSBzYW5pdGFpcmUgZXQgbGUgcmVmcm9pZGlzc2VtZW50IChJbmRpY2UgZGUgbWVzdXJlIDrCoGtXaEVQL20yLmFuKTwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250ZW50LWRpYWdub3N0aWMiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtY29udGVudC1jb2xvbm5laW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvY29udGVudC9kaWFnbm9zdGljcy9lbWlzc2lvbi9kaWFnX2dhei5wbmciLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaWFnbm9zdGljIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIiBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvY29udGVudC9kaWFnbm9zdGljcy9lbWlzc2lvbi9DLnBuZyIvPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250ZW50LWRpYWdub3N0aWMiPgogICAgICAgICAgICAgICAgICAgIDxoMz7DiW1pc3Npb25zIGRlIGdheiDDoCBlZmZldCBkZSBzZXJyZTwvaDM+CiAgICAgICAgICAgICAgICAgICAgPHA+w4ltaXNzaW9ucyBkZSBnYXogw6AgZWZmZXQgZGUgc2VycmUgKEdFUykgcG91ciBsZSBjaGF1ZmZhZ2UsIGxhIHByb2R1Y3Rpb24gZCdlYXUgY2hhdWRlIHNhbml0YWlyZSBldCBsZSByZWZyb2lkaXNzZW1lbnQgKEluZGljZSBkZSBtZXN1cmUgOsKga2dlcUNPMi9tMi5hbik8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9zZWN0aW9uPgogICAgCjxzZWN0aW9uIGNsYXNzPSJkZXRhaWwtZGVzYyI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtY29udGVudC10aXRsZSI+CiAgICAgICAgICAgICAgICA8aDI+SW5mb3JtYXRpb25zIHN1ciBsYSBjb3Byb3ByacOpdMOpPC9oMj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtbGluZS1jZW50ZXIgYy10aGVtZS1iZyI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlscy1pbmZvIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgIDxoND5DYXJhY3TDqXJpc3RpcXVlcyBnw6luw6lyYWxlczwvaDQ+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWxpc3QiPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Bbm7DqWUgZGUgY29uc3RydWN0aW9uPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4xODgwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5OYiBkJiMzOTtldGFnZXMgZGUgbCYjMzk7aW1tZXVibGU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk1hdMOpcmlhdSBkZSBjb25zdHJ1Y3Rpb248L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkJyaXF1ZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+VHlwZSBkZSB0b2l0PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5aaW5jPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5UeXBlIGRlIGxhIGZhw6dhZGU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBpZXJyZSBldCBicmlxdWU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlscy1pbmZvIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgIDxoND5QcmVzdGF0aW9uczwvaDQ+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWxpc3QiPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Bc2NlbnNldXI8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk5vbjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWNjw6lzIGhhbmRpLjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Tm9uPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5JbnRlcnBob25lPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5PdWk8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkdhcmRpZW48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk5vbjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXRhaWxzLWluZm8gY29sLW1kLTQiPgogICAgICAgICAgICAgICAgPGg0Pkp1cmlkaXF1ZSBldCBmaW5hbmNpZXI8L2g0PgogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q2hhcmdlcyBtZW5zdWVsbGVzPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMjguMCBldXJvczwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Tm9tYnJlIGRlIGxvdHMgZGUgbGEgY29wcm9wcmnDqXTDqTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MzQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cjwvc2VjdGlvbj4KCgogICAgCjxzZWN0aW9uIGlkPSJjYXJ0b2dyYXBoaWUgY29sLXhzLTEyIiBjbGFzcz0ibm8tcGFkZGluZy1ib3R0b20iPgogICAgPGRpdiBjbGFzcz0iYy1jb250ZW50LXRpdGxlIj4KICAgICAgICA8aDI+U2l0dWF0aW9uPC9oMj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLWxpbmUtY2VudGVyIGMtdGhlbWUtYmciPjwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtY29udGVudC1zb3VzdGl0bGUiPgogICAgICAgICAgICA8aDQ+NzUwMTMgLSBQYXJpczwvaDQ+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImMtdGFiLWNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9InRhYi1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSBpbiBhY3RpdmUiIGlkPSJjLXRhYjMtMSI+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjYXJ0by1hbm5vbmNlIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9zZWN0aW9uPgoKICAgIAoKPHNlY3Rpb24gY2xhc3M9ImxvZ29zLXBhcnRlbmFpcmVzIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPCEtLXRpdHJlLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icm93IGNvbnRlbnQtdG9wIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtY29udGVudC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJjLWZvbnQtMzIgYy1mb250LWNlbnRlciBjLW1hcmdpbi1iLTMwIj5SZXRyb3V2ZXogY2V0dGUgYW5ub25jZSBzdXIgLi4uPC9oMj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLWxpbmUtY2VudGVyIGMtdGhlbWUtYmciPiA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS1maW4gdGl0cmUtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgCSAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0yIGNvbC1tZC1vZmZzZXQtMSI+PGltZyBjbGFzcz0iaW1nLXJlc3BvbnNpdmUiIHNyYz0iLy9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2ltZy9jb250ZW50L2xvZ29zL0xlQm9uQ29pbi5wbmciLz48L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMiI+PGltZyBjbGFzcz0iaW1nLXJlc3BvbnNpdmUiIHNyYz0iLy9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2ltZy9jb250ZW50L2xvZ29zL1NlbG9nZXIucG5nIi8+PC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTIiPjxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIiBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvY29udGVudC9sb2dvcy9QYXJ1VmVuZHUucG5nIi8+PC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTIiPjxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIiBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvY29udGVudC9sb2dvcy9FeHBsb3JpbW1vLnBuZyIvPjwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbmRyZS1hcHBhcnRlbWVudC1tYWlzb24vIiBjbGFzcz0iYnRuIGJ0bi1sZyBjLWJ0bi1zcXVhcmUgYy1idG4tZ3JlZW5FZmZpY2l0eSI+VmVuZHJlIGF2ZWMgZWZmaUNpdHk8L2E+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+CgogICAgPHNlY3Rpb24gaWQ9Im5vdXMtY29udGFjdGVyIiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250ZW50LXRpdGxlIj4KICAgICAgICAgICAgICAgIDxoMj5EZW1hbmRlciBkZXMgaW5mb3Mgc3VyIGNlIGJpZW48L2gyPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1saW5lLWNlbnRlciBjLXRoZW1lLWJnIj4gPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLWNvbnRlbnQtc291c3RpdGxlIj4KICAgICAgICAgICAgICAgIDxwPlLDqXBvbnNlIHNvdXMgMjRoMDAgKGpvdXIgb3V2csOpKTwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250ZW50LXBhbmVsIj4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSJodHRwczovL3d3dy5lZmZpY2l0eS5jb20vbm91cy1jb250YWN0ZXIvIiBtZXRob2Q9J3Bvc3QnIGlkPSdjb250YWN0LXVzLWZvcm0nIG5vdmFsaWRhdGU9Im5vdmFsaWRhdGUiPjxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2NzcmZtaWRkbGV3YXJldG9rZW4nIHZhbHVlPSd3ODVobVFzTUs1SlZnWGgxZ3dLTU5WSDFFcXp2SzJNU1hQaHV6dEVabEk3ZHhsRFYzbEExWXcxTHpGOW4yelRlJyAvPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJ1cmxfZnJvbSIgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iaHR0cHM6Ly93d3cuZWZmaWNpdHkuY29tL2FjaGF0LWltbW9iaWxpZXIvYXBwYXJ0ZW1lbnRfOTQtbTJfcGFyaXNfNzUwMTNfMTAyNDg4NTAvIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0iZXhwZXJ0X2xvZ2luIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJsbW9udGFyaW9sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIiBmb3I9ImlkX2ZpcnN0bmFtZSI+Vm90cmUgcHLDqW5vbTxlbT4qPC9lbT48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iZmlyc3RuYW1lIiBjbGFzcz0iZm9ybS1jb250cm9sIiBtYXhsZW5ndGg9IjUwMCIgcmVxdWlyZWQgaWQ9ImlkX2ZpcnN0bmFtZSIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIiBmb3I9ImlkX25hbWUiPlZvdHJlIG5vbTxlbT4qPC9lbT48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ibmFtZSIgY2xhc3M9ImZvcm0tY29udHJvbCIgbWF4bGVuZ3RoPSI1MDAiIHJlcXVpcmVkIGlkPSJpZF9uYW1lIiAvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwiIGZvcj0iaWRfZW1haWwiPlZvdHJlIGVtYWlsPGVtPio8L2VtPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgbmFtZT0iZW1haWwiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlcXVpcmVkIGlkPSJpZF9lbWFpbCIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIiBmb3I9ImlkX3RlbCI+Vm90cmUgdMOpbMOpcGhvbmU8ZW0+KjwvZW0+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InRlbCIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVxdWlyZWQgaWQ9ImlkX3RlbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIiBmb3I9ImlkX3ppcGNvZGUiPlZvdHJlIGNvZGUgcG9zdGFsPGVtPio8L2VtPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIG5hbWU9InppcGNvZGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJpZF96aXBjb2RlIiAvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCIgZm9yPSJpZF9iZWhhdmlvciI+Vm91cyDDqnRlczxlbT4qPC9lbT48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImJlaGF2aW9yIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iaWRfYmVoYXZpb3IiPgogIDxvcHRpb24gdmFsdWU9IjEiPlByb3ByacOpdGFpcmUgVmVuZGV1cjwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSIyIiBzZWxlY3RlZD5BY2hldGV1cjwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSIzIj5BIGxhIHJlY2hlcmNoZSBkJiMzOTt1bmUgYWN0aXZpdMOpIGTigJlpbmTDqXBlbmRhbnQgZW4gaW1tb2JpbGllcjwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSI0Ij5Kb3VybmFsaXN0ZTwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSI1Ij5BdXRyZTwvb3B0aW9uPgoKPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCIgZm9yPSJpZF9tZXNzYWdlIj5Wb3RyZSBNZXNzYWdlPGVtPio8L2VtPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJtZXNzYWdlIiBjb2xzPSI0MCIgY2xhc3M9ImZvcm0tY29udHJvbCIgcm93cz0iMTAiIHJlcXVpcmVkIGlkPSJpZF9tZXNzYWdlIj4KQm9uam91ciwKSmUgc291aGFpdGUgcGx1cyBk4oCZaW5mb3JtYXRpb25zIGF1IHN1amV0IGRlIGNlIGJpZW4uCk1lcmNpIGRlIG1lIHJlY29udGFjdGVyLjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ic2VuZC1teS1yZXF1ZXN0IiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWxnIGMtYnRuLWdyZWVuRWZmaWNpdHkiPkVudm95ZXIgbWEgZGVtYW5kZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+ICAKICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiIHN0eWxlPSJtYXJnaW4tdG9wOiAxcmVtIj4KICAgICAgICA8cD4KICAgICAgICAgICAgQWZpbiBkZSB2b3VzIHLDqXBvbmRyZSwgbGVzIGluZm9ybWF0aW9ucyByZWN1ZWlsbGllcyBzb250IGFkcmVzc8OpZXMgYXV4IGNvbnN1bHRhbnRzIGltbW9iaWxpZXJzIGVmZmlDaXR5IG91CiAgICAgICAgICAgIEZvbmNpYSBleHBlcnRzIGRlIHZvdHJlIHZpbGxlLiBWb3VzIGLDqW7DqWZpY2lleiBk4oCZdW4gZHJvaXQgZOKAmWFjY8OocywgZGUgcmVjdGlmaWNhdGlvbiwgZOKAmWVmZmFjZW1lbnQgZGUgY2VzCiAgICAgICAgICAgIGluZm9ybWF0aW9ucyBtYWlzIMOpZ2FsZW1lbnQgZOKAmW9wcG9zaXRpb24gw6AgY2UgdHJhaXRlbWVudC4KICAgICAgICAgICAgPGEgaHJlZj0iL3Zvc2Rvbm5lZXMvIj48c3Ryb25nPkTDqWNvdXZyZXogbm9zIGVuZ2FnZW1lbnRzIGVuIHRlcm1lcyBkZSBwcm90ZWN0aW9uIGRlcyBkb25uw6llcy48L3N0cm9uZz48L2E+CiAgICAgICAgPC9wPgogICAgPC9kaXY+Cjwvc2VjdGlvbj4KIAogICAgCgo8c2VjdGlvbiBjbGFzcz0ibGlzdGUtbGllbnMgIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250ZW50LXRpdGxlIj4KICAgICAgICAgICAgICAgIDxoMj5QYXJpcyAxM8OobWUgOiBlc3RpbWF0aW9uIGV0IHByaXggaW1tb2JpbGllcjwvaDI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLWxpbmUtY2VudGVyIGMtdGhlbWUtYmciPiA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgkgICAgCiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250ZW50LXBhbmVsIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iY29sLW1kLTQgYy1jb250ZW50LWxpc3QgYy1zZXBhcmF0b3ItZG90IGMtc3F1YXJlIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9lc3RpbWF0aW9uLWltbW9iaWxpZXJlL2FwcGFydGVtZW50LyI+RXN0aW1lciB1biBhcHBhcnRlbWVudCAgUGFyaXMgMTNlIEFycm9uZGlzc2VtZW50PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iY29sLW1kLTQgYy1jb250ZW50LWxpc3QgYy1zZXBhcmF0b3ItZG90IGMtc3F1YXJlIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wcml4LWltbW9iaWxpZXItbTIvdl9wYXJpc183NTAxMy8iPlByaXggYXUgbTIgUGFyaXMgMTPDqG1lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iY29sLW1kLTQgYy1jb250ZW50LWxpc3QgYy1zZXBhcmF0b3ItZG90IGMtc3F1YXJlIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgIAo8L3NlY3Rpb24+CgoKICAgIAoKPHNlY3Rpb24gaWQ9InRvb2xiYXIiIGNsYXNzPSJ0b29sYmFyY29udGFjdCBoaWRlIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEgcGhvdG8tY29udGFjdCI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctcmVzcG9uc2l2ZSIgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9jb25zdWx0YW50L2xtb250YXJpb2wvcGhvdG9zL3MvY29uc3VsdGFudC5wbmciLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01Ij4KCiAgICAgICAgICAgICAgICA8aDI+QXBwYXJ0ZW1lbnQgcHJvcG9zw6kgcGFyIDxhIGhyZWY9Ii9sbW9udGFyaW9sLyIgY2xhc3M9InNpdGUiPkxhdXJlbmNlIE1vbnRhcmlvbDwvYT48L2gyPgogICAgICAgICAgICAgICAgPGg0PmVmZmlDaXR5IC0gUGFyaXMgMTQ8L2g0PgogICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImltbW9kdmlzb3JfaW5mb3MiPjwvc3Bhbj48bGluayByZWw9ImltcG9ydCIgaHJlZj0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vY29uc3VsdGFudC9sbW9udGFyaW9sL2ltbW9kdmlzb3IuaHRtbCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLWFjdGlvbnMgY29sLXNtLTYgbGFzdCI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjbm91cy1jb250YWN0ZXIiIGNsYXNzPSJidG4gYnRuLWxnIGMtYnRuLWdyZWVuRWZmaWNpdHkiPkRlbWFuZGVyIGRlcyBpbmZvcyBzdXIgY2UgYmllbjwvYT4KICAgICAgICAgICAgICAgIDxoMz5PdSBhcHBlbGVyIGxlIDxzcGFuPiszMzYyODIzODA1OTwvc3Bhbj4gPGEgaHJlZj0iI25vdXMtY29udGFjdGVyIj5sbW9udGFyaW9sQGVmZmljaXR5LmNvbTwvYT48L2gzPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+CgogICAgCjxkaXYgaWQ9InRvb2xiYXJtb2JpbGUiIGNsYXNzPSJ0b29sYmFybW9iaWxlIGNvbC1tZC0xMiI+Cgk8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgoJICAgIDxhIGlkPSJ0b29sYmFyLW1vYmlsZS1hY3Rpb24iIGhyZWY9IiNub3VzLWNvbnRhY3RlciIgY2xhc3M9ImJ0biBidG4tbGcgYy1idG4tZ3JlZW5FZmZpY2l0eSI+RGVtYW5kZXIgZGVzIGluZm9zIHN1ciBjZSBiaWVuPC9hPgogICAgPC9kaXY+CjwvZGl2PgoKCgoKCgo8Zm9vdGVyIGNsYXNzPSJjLWxheW91dC1mb290ZXIgZm9vdGVyLWVmZmljaXR5ICI+CjxkaXYgY2xhc3M9ImMtcHJlZm9vdGVyIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYgY29sLW1kLTQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250YWluZXIgYy1maXJzdCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1saW5lLWxlZnQgaGlkZSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWgzIj5RdWkgc29tbWVzIG5vdXMgPzwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLXRleHQiPmVmZmlDaXR5IGVzdCB1bmUgcGxhdGVmb3JtZSBkZSBzZXJ2aWNlcyBub3V2ZWxsZSBnw6luw6lyYXRpb24gcGVybWV0dGFudCDDoCBkZXMgaW5kw6lwZW5kYW50cyBkZSBjcsOpZXIgbGV1ciBhZ2VuY2UgaW1tb2JpbGnDqHJlLiA8YSBocmVmPSIvcXVpLXNvbW1lcy1ub3VzLyI+RW4gc2F2b2lyIHBsdXM8L2E+PC9wPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuZWZmaWNpdHktcmVjcnV0ZW1lbnQuY29tIiBjbGFzcz0iYnRuIGJ0bi1sZyBjLWJ0bi1ncmVlbkVmZmljaXR5Ij5EZXZlbmlyIGFnZW50IGltbW9iaWxpZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWgzIG10LTIiPk9uIHBhcmxlIGRlIG5vdXM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWRyYWRpby1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvb24tcGFybGUtZGUtbm91cy8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0idGltYnJlIGltZy1yZXNwb25zaXZlIiBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvY29udGVudC9mb290ZXIvc3VkcmFkaW8tZm9vdGVyLnBuZyIgYWx0PSJFbWlzc2lvbiBPbiBQYXJsZSBJbW1vIFN1ZHJhZGlvIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYgY29sLW1kLTQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1jb250YWluZXIgYy1sYXN0Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItaDMiPk5vcyBzZXJ2aWNlczwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtbGluZS1sZWZ0IGhpZGUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYy1saW5rcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZXN0aW1hdGlvbi1pbW1vYmlsaWVyZS9tYWlzb24vIj5Fc3RpbWF0aW9uIG1haXNvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUvYXBwYXJ0ZW1lbnQvIj5Fc3RpbWF0aW9uIGFwcGFydGVtZW50PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHJpeC1pbW1vYmlsaWVyLW0yLyI+UHJpeCBtMjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXIvIj5NYWlzb24gLSBhcHBhcnRlbWVudCDDoCB2ZW5kcmU8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii92ZW5kcmUtYXBwYXJ0ZW1lbnQtbWFpc29uLyI+VmVuZHJlIHNhIG1haXNvbiwgc29uIGFwcGFydGVtZW50PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY29uc3VsdGFudHMtaW1tb2JpbGllci8iPk5vcyBjb25zdWx0YW50cyBpbW1vYmlsaWVyczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2JpZW4tYWNoZXRlci8iPkJpZW4gYWNoZXRlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2JpZW4tdmVuZHJlLyI+QmllbiB2ZW5kcmU8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiBjb2wtbWQtNCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLWNvbnRhaW5lciBjLWxhc3QiPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItaDMiPlNlcnZpY2UgY2xpZW50cyBlZmZpQ2l0eTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLWxpbmUtbGVmdCBoaWRlIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwIDgxMSA4NSAxMyA4NSAoUHJpeCBhcHBlbCBsb2NhbCk8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEdSBsdW5kaSBhdSB2ZW5kcmVkaSBkZSA5aDMwIMOgIDE4aDMwLgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1oMyBtdC0yIj5SZXRyb3V2ZXotbm91cyBzdXI8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJjLXNvY2lhbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuZmFjZWJvb2suY29tL2VmZmljaXR5Ij48aSBjbGFzcz0iZmEgZmEtZmFjZWJvb2sgZmEtNHgiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cudHdpdHRlci5jb20vZWZmaWNpdHkiPjxpIGNsYXNzPSJmYSBmYS10d2l0dGVyIGZhLTR4Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItaW1tb2R2aXNvciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1tby1sb2dvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmltbW9kdmlzb3IuY29tL3Byby9lZmZpY2l0eS1wYXJpcy03NTAxNy05Lmh0bWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InRpbWJyZSBpbWctcmVzcG9uc2l2ZSIgc3JjPSIvL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvaW1nL2NvbnRlbnQvdGVzdGltb25pZXMvaW1tb2R2aXNvci5wbmciLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3Rhci1yYXRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmltbW9kdmlzb3IuY29tL3Byby9lZmZpY2l0eS1wYXJpcy03NTAxNy05Lmh0bWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxzcGFuIGNsYXNzPSJmYSBmYS1zdGFyIj48L3NwYW4+CgogICAgCgogICAgPHNwYW4gY2xhc3M9ImZhIGZhLXN0YXIiPjwvc3Bhbj4KCiAgICAKCiAgICA8c3BhbiBjbGFzcz0iZmEgZmEtc3RhciI+PC9zcGFuPgoKICAgIAoKICAgIDxzcGFuIGNsYXNzPSJmYSBmYS1zdGFyIj48L3NwYW4+CgogICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZhIGZhLXN0YXItaGFsZi1vIj48L3NwYW4+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2xvYmFsLXJhdGluZy1pbmZvcyB0ZXh0LWNlbnRlciIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vZGF0YS12b2NhYnVsYXJ5Lm9yZy9SZXZpZXctYWdncmVnYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0iaXRlbXJldmlld2VkIj5FZmZpY2l0eTwvc3Bhbj4gZXN0IG5vdMOpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InJhdGluZyIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vZGF0YS12b2NhYnVsYXJ5Lm9yZy9SYXRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9ImF2ZXJhZ2UiPjQuODwvc3Bhbj48c3Bhbj4vPC9zcGFuPjxzcGFuIGl0ZW1wcm9wPSJiZXN0Ij41PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vsb24gPHN0cm9uZz48c3BhbiBpdGVtcHJvcD0idm90ZXMiPjM0OTQ8L3NwYW4+PC9zdHJvbmc+IGF2aXMgc3VyIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJyZXZpZXdlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5pbW1vZHZpc29yLmNvbS9wcm8vZWZmaWNpdHktcGFyaXMtNzUwMTctOS5odG1sIj5JbW1vZHZpc29yPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIGMtY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1oMyBsZWdhbC1pbmZvcyAiPkluZm9ybWF0aW9ucyBqdXJpZGlxdWVzPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImMtbGlua3MgY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNvbC1tZC0zIj48YSBocmVmPSIvbWVudGlvbnMtbGVnYWxlcy8iPk1lbnRpb25zIGzDqWdhbGVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjb2wtbWQtMyI+PGEgaHJlZj0iaHR0cHM6Ly9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L3BkZi9CQVJFTUVfTkFUSU9OQUwucGRmIj5Ob3MgYmFyw6htZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNvbC1tZC0zIj48YSBocmVmPSIvdm9zZG9ubmVlcy8iPlBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+ZWZmaUNpdHkgU0EgUkNTIFBhcmlzIDQ5NyA2MTcgNzQ2ICAtIFRpdHVsYWlyZSBkZSBsYSBDYXJ0ZSBwcm9mZXNzaW9ubmVsbGUgQ1BJIDc1MDEgMjAxNSAwMDAgMDAyIDAyNSBDQ0kgUGFyaXMgSURGIC0gQ2Fpc3NlIGRlIEdhcmFudGllIEZpbmFuY2nDqHJlIGRlIDEgMTYwIDAwMCBldXJvcyBhc3N1csOpZSBwYXIgR0FMSUFOIEFzc3VyYW5jZXMgKDg5IHJ1ZSBkZSBsYSBCb8OpdGllIDc1MDA4IFBhcmlzKTxicj5lZmZpQ2l0eSBlc3QgdW5lIG1hcnF1ZSBkw6lwb3PDqWUuIGVmZmlDaXR5ICZjb3B5OyBDb3B5cmlnaHQgMjAwNi0yMDIwLCB0b3VzIGRyb2l0cyByw6lzZXJ2w6lzLjwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjwvZm9vdGVyPgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L3BsdWdpbnMvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAKCgogICAgCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9wbHVnaW5zL2Jvb3RzdHJhcC9qcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2pzL3dlYmNvbXBvbmVudHMvSFRNTEltcG9ydHMuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+IAooZnVuY3Rpb24gKCkgeyAKICAgIHZhciB1ID0gImh0dHAiICsgKCgiaHR0cHM6IiA9PSBkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCkgPyAicyIgOiAiIikgKyAiOi8vdHJhY2tpbmcuZXNlYXJjaHZpc2lvbi5jb20vMTAwNjkvdGFnXzEwMDY5XzQuanMiOyAKICAgIHZhciBkID0gZG9jdW1lbnQsIGcgPSBkLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBzID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07IAogICAgZy50eXBlICA9ICd0ZXh0L2phdmFzY3JpcHQnOyBnLmRlZmVyID0gdHJ1ZTsgZy5hc3luYyA9IHRydWU7IGcuc3JjID0gdTsgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLCBzKTsgCn0pKCk7IAo8L3NjcmlwdD4KCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvanMvbGVhZmxldC9sZWFmbGV0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9wbHVnaW5zL2N1YmVwb3J0Zm9saW8vanMvanF1ZXJ5LmN1YmVwb3J0Zm9saW8ubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9qcy9zY3JpcHRzL2Z1bGx3aWR0aC1nYWxsZXJ5LmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2pzL2xpYi9qcXVlcnkudmFsaWRhdGUubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICB2YXIgbWFwLCBwcm9wZXJ0eUljb247CiAgICAgICAgdmFyIGhvdXNlX3R5cGUgPSAnYXBwYXJ0ZW1lbnQnOwogICAgICAgIAogICAgICAgICAgICB2YXIgaXNfZXhjbHVzaXZlID0gdHJ1ZTsKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgdmFyIGxhdCA9IDQ4LjgyNjU2ODsKICAgICAgICAgICAgdmFyIGxvbiA9IDIuMzQyMTMxOwogICAgICAgIAogICAgICAgIAogICAgICAgICAgICB2YXIgc2hvd19tb2JpbGUgPSBmYWxzZTsKICAgICAgICAKICAgIDwvc2NyaXB0PgogICAgCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2pzL2NsYXNzaWZpZWRfZGV0YWlsLjYzOTNkNzdiLmpzIj48L3NjcmlwdD4KICAgIAoKPC9ib2R5Pgo8L2h0bWw+Cg==
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:39 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_93-m2_paris_75014_18434502/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Tue, 31 Mar 2020 16:38:39 GMT
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '10594683'
      - '31267274'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:40 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_23-m2_paris_75019_18425332/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Tue, 31 Mar 2020 16:38:40 GMT
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '10456342'
      - '30610219'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:40 GMT
recorded_with: VCR 5.1.0
