---
http_interactions:
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/advanced-search/?bathrooms=&bedrooms=&keyword=PARIS&max-area=&max-price=&min-area=&min-price=&status=vente&type=
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:16 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '25644'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=fsgi3364id4o3th3cuop3ucr85; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      Link:
      - "<https://paris-montmartre-immobilier.fr/?p=41>; rel=shortlink"
      - <https://paris-montmartre-immobilier.fr/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>Recherche avancée - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/advanced-search/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Recherche avancée - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/advanced-search/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:title" content="Recherche avancée - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="DC.date.issued" content="2016-01-21T19:40:09+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=41' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fadvanced-search%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fadvanced-search%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="page-template page-template-template page-template-template-search page-template-templatetemplate-search-php page page-id-41  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/advanced-search/?keyword=PARIS&amp;status=vente&amp;type=&amp;bedrooms=&amp;min-area=&amp;max-price=&amp;bathrooms=&amp;max-area=&amp;min-price=" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="PARIS" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente" selected="selected"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="PARIS" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente" selected="selected"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
			<div class="container">
	

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	

<div class="page-title breadcrumb-top">
    <div class="row">
        <div class="col-sm-12">
            <ol class="breadcrumb"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a itemprop="url" href="https://paris-montmartre-immobilier.fr/"><span itemprop="title">Accueil</span></a></li><li class="active">Recherche avancée</li></ol>            <div class="page-title-left">
                <h1 class="title-head">
                Recherche avancée                </h1>
                                <h5>
                  <span class="small">Total:</span>
                  <b id="total_results"></b>
                </h5>
                            </div>
            
                        <div class="page-title-right">
                <div class="view hidden-xs">
                    <div class="table-cell">
                        <span class="view-btn btn-list active"><i class="fa fa-th-list"></i></span>
                        <span class="view-btn btn-grid "><i class="fa fa-th-large"></i></span>
                                            </div>
                </div>
            </div>
            
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 list-grid-area container-contentbar">
        <div id="content-area">

            <!--start list tabs-->
            <div class="table-list full-width">
                                <div class="tabs table-cell v-align-top">
                    <p>Sauvegarder cette recherche?</p>
                </div>
                
                <div class="sort-tab table-cell text-right v-align-top">
                    <p>
                    Triez par:                    <select id="sort_properties" class="selectpicker bs-select-hidden" title="" data-live-search-style="begins" data-live-search="false">
                        <option value="">Défaut</option>
                        <option  value="a_price">Prix (croissant)</option>
                        <option  value="d_price">Prix (décroissant)</option>
                        <option  value="featured">Exclusivité</option>
                        <option  value="a_date">Date (croissant)</option>
                        <option selected value="d_date">Date (décroissant)</option>
                    </select>
                    </p>
                </div>
            </div>
            <!--end list tabs-->

            
<div class="list-search">
    <form method="post" action="" class="save_search_form">
        <div class="input-level-down input-icon">
            <input placeholder="Recherche Listing" class="form-control" readonly value="vente, PARIS, ">
            <input type="hidden" name="search_args" value='YTo3OntzOjk6InBvc3RfdHlwZSI7czo4OiJwcm9wZXJ0eSI7czoxNDoicG9zdHNfcGVyX3BhZ2UiO3M6MToiOSI7czo1OiJwYWdlZCI7aTowO3M6MTE6InBvc3Rfc3RhdHVzIjtzOjc6InB1Ymxpc2giO3M6OToidGF4X3F1ZXJ5IjthOjM6e2k6MDthOjQ6e3M6ODoicmVsYXRpb24iO3M6MjoiT1IiO2k6MDthOjQ6e3M6ODoidGF4b25vbXkiO3M6MTM6InByb3BlcnR5X2FyZWEiO3M6NToiZmllbGQiO3M6NDoic2x1ZyI7czo1OiJ0ZXJtcyI7YToxMjp7aTowO3M6MTA6ImltbW8tcGFyaXMiO2k6MTtzOjg6InBhcmlzLTE4IjtpOjI7czo4OiJwYXJpcy0wNSI7aTozO3M6NToicGFyaXMiO2k6NDtzOjg6InBhcmlzLTEyIjtpOjU7czo4OiJwYXJpcy0wNyI7aTo2O3M6ODoicGFyaXMtMjAiO2k6NztzOjg6InBhcmlzLTExIjtpOjg7czo4OiJwYXJpcy0xNyI7aTo5O3M6ODoicGFyaXMtMDIiO2k6MTA7czo4OiJwYXJpcy0xOSI7aToxMTtzOjg6InBhcmlzLTA0Ijt9czo4OiJvcGVyYXRvciI7czoyOiJJTiI7fWk6MTthOjQ6e3M6ODoidGF4b25vbXkiO3M6MTM6InByb3BlcnR5X2NpdHkiO3M6NToiZmllbGQiO3M6NDoic2x1ZyI7czo1OiJ0ZXJtcyI7YToxMjp7aTowO3M6MTA6ImltbW8tcGFyaXMiO2k6MTtzOjg6InBhcmlzLTE4IjtpOjI7czo4OiJwYXJpcy0wNSI7aTozO3M6NToicGFyaXMiO2k6NDtzOjg6InBhcmlzLTEyIjtpOjU7czo4OiJwYXJpcy0wNyI7aTo2O3M6ODoicGFyaXMtMjAiO2k6NztzOjg6InBhcmlzLTExIjtpOjg7czo4OiJwYXJpcy0xNyI7aTo5O3M6ODoicGFyaXMtMDIiO2k6MTA7czo4OiJwYXJpcy0xOSI7aToxMTtzOjg6InBhcmlzLTA0Ijt9czo4OiJvcGVyYXRvciI7czoyOiJJTiI7fWk6MjthOjQ6e3M6ODoidGF4b25vbXkiO3M6MTQ6InByb3BlcnR5X3N0YXRlIjtzOjU6ImZpZWxkIjtzOjQ6InNsdWciO3M6NToidGVybXMiO2E6MTI6e2k6MDtzOjEwOiJpbW1vLXBhcmlzIjtpOjE7czo4OiJwYXJpcy0xOCI7aToyO3M6ODoicGFyaXMtMDUiO2k6MztzOjU6InBhcmlzIjtpOjQ7czo4OiJwYXJpcy0xMiI7aTo1O3M6ODoicGFyaXMtMDciO2k6NjtzOjg6InBhcmlzLTIwIjtpOjc7czo4OiJwYXJpcy0xMSI7aTo4O3M6ODoicGFyaXMtMTciO2k6OTtzOjg6InBhcmlzLTAyIjtpOjEwO3M6ODoicGFyaXMtMTkiO2k6MTE7czo4OiJwYXJpcy0wNCI7fXM6ODoib3BlcmF0b3IiO3M6MjoiSU4iO319aToxO2E6Mzp7czo4OiJ0YXhvbm9teSI7czoxNToicHJvcGVydHlfc3RhdHVzIjtzOjU6ImZpZWxkIjtzOjQ6InNsdWciO3M6NToidGVybXMiO3M6NToidmVudGUiO31zOjg6InJlbGF0aW9uIjtzOjM6IkFORCI7fXM6Nzoib3JkZXJieSI7czo0OiJkYXRlIjtzOjU6Im9yZGVyIjtzOjQ6IkRFU0MiO30='>
            <input type="hidden" name="search_URI" value="/advanced-search/?keyword=PARIS&status=vente&type=&bedrooms=&min-area=&max-price=&bathrooms=&max-area=&min-price=">
            <input type="hidden" name="action" value='houzez_save_search'>
            <input type="hidden" name="houzez_save_search_ajax" value="c61a66bc55">
        </div>
        <span  id="save_search_click" class="save-btn">Enregistrer</span>
    </form>
</div>

            <!--start property items-->
            <div class="property-listing list-view">
                <div class="row">

                    <div id="total_results_hidden">16</div>
<div id="ID-89868" class="animated fadeIn item-wrap infobox_trigger VENTE item-au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                        <span class="animated slideInDown label-featured label label-success">Exclusivité</span>

                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">1.329.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="89868"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(10) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-89868" class="compare-property" data-propid="89868" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/">AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18</a></h2><div class="hide-on-list"><span class="item-price">1.329.000 €</span></div><address class="property-address">75018, PARIS 18, France</address>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 3</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 90 m²</span><span class="ascenseur">Ascenseur</span></p>                    <p>AU COEUR DES ABBESSES</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02114</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">1.329.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 3</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 90 m²</span><span class="ascenseur">Ascenseur</span></p>                        <p>AU COEUR DES ABBESSES</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02114</p>
                </div>
        </div>
    
</div>

<div id="ID-89343" class="animated fadeIn item-wrap infobox_trigger VENTE item-triplex-somptueux-6-pices-22721-m%c2%b2-paris-18">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                    
                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">2.280.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="89343"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(8) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-89343" class="compare-property" data-propid="89343" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/">TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18</a></h2><div class="hide-on-list"><span class="item-price">2.280.000 €</span></div>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 4</span><span class="bath">Salle(s) de bain(s): 3</span><span class="size">Surface: 227 m²</span></p>                    <p>TRIPLEX SOMPTUEUX</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02110</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">2.280.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 4</span><span class="bath">Salle(s) de bain(s): 3</span><span class="size">Surface: 227 m²</span></p>                        <p>TRIPLEX SOMPTUEUX</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02110</p>
                </div>
        </div>
    
</div>

<div id="ID-88750" class="animated fadeIn item-wrap infobox_trigger VENTE item-magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                        <span class="animated slideInDown label-featured label label-success">Exclusivité</span>

                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">449.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="88750"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(8) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-88750" class="compare-property" data-propid="88750" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/">MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18</a></h2><div class="hide-on-list"><span class="item-price">449.000 €</span></div><address class="property-address">75018, PARIS 18, France</address>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 1</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 35 m²</span></p>                    <p>MAGNIFIQUE 2 PIECES</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02113</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">449.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 1</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 35 m²</span></p>                        <p>MAGNIFIQUE 2 PIECES</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02113</p>
                </div>
        </div>
    
</div>

<div id="ID-88239" class="animated fadeIn item-wrap infobox_trigger VENTE item-rue-damremont-2-pices-43-m%c2%b2-paris-18">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                    
                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">449.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="88239"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(10) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-88239" class="compare-property" data-propid="88239" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/">RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18</a></h2><div class="hide-on-list"><span class="item-price">449.000 €</span></div>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="size">Surface: 43 m²</span><span class="ascenseur">Ascenseur</span></p>                    <p>RUE DAMREMONT .</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02109</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">449.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="size">Surface: 43 m²</span><span class="ascenseur">Ascenseur</span></p>                        <p>RUE DAMREMONT .</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02109</p>
                </div>
        </div>
    
</div>

<div id="ID-87791" class="animated fadeIn item-wrap infobox_trigger VENTE item-beau-2-pieces-2-pices-43-m%c2%b2-paris-17">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                    
                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">525.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-385x258.jpg" alt="VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="87791"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(10) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-87791" class="compare-property" data-propid="87791" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/">Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17</a></h2><div class="hide-on-list"><span class="item-price">525.000 €</span></div>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 1</span><span class="size">Surface: 43 m²</span></p>                    <p>Beau 2 pieces</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02104</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">525.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 1</span><span class="size">Surface: 43 m²</span></p>                        <p>Beau 2 pieces</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02104</p>
                </div>
        </div>
    
</div>

<div id="ID-86617" class="animated fadeIn item-wrap infobox_trigger VENTE item-succession-5-pices-10717-m%c2%b2-paris-04">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                        <span class="animated slideInDown label-featured label label-success">Exclusivité</span>

                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">1.195.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="86617"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(10) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-86617" class="compare-property" data-propid="86617" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/">SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04</a></h2><div class="hide-on-list"><span class="item-price">1.195.000 €</span></div><address class="property-address">75004, PARIS 04, France</address>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 2</span><span class="size">Surface: 107 m²</span><span class="ascenseur">Ascenseur</span></p>                    <p>SUCCESSION</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02097</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">1.195.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 2</span><span class="size">Surface: 107 m²</span><span class="ascenseur">Ascenseur</span></p>                        <p>SUCCESSION</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02097</p>
                </div>
        </div>
    
</div>

<div id="ID-86506" class="animated fadeIn item-wrap infobox_trigger VENTE item-appartement-bourgeois-3-pices-68-m%c2%b2-paris-18">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                        <span class="animated slideInDown label-featured label label-success">Exclusivité</span>

                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">750.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="86506"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(9) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-86506" class="compare-property" data-propid="86506" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18</a></h2><div class="hide-on-list"><span class="item-price">750.000 €</span></div><address class="property-address">75018, PARIS 18, France</address>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 68 m²</span></p>                    <p>APPARTEMENT BOURGEOIS</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02099</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">750.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 68 m²</span></p>                        <p>APPARTEMENT BOURGEOIS</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02099</p>
                </div>
        </div>
    
</div>

<div id="ID-86437" class="animated fadeIn item-wrap infobox_trigger VENTE item-atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                    
                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">975.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="86437"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(14) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-86437" class="compare-property" data-propid="86437" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/">ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18</a></h2><div class="hide-on-list"><span class="item-price">975.000 €</span></div>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 1</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 80 m²</span><span class="ascenseur">Ascenseur</span></p>                    <p>ATELIER ARTISTE + JARDIN</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02102</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">975.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 1</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 80 m²</span><span class="ascenseur">Ascenseur</span></p>                        <p>ATELIER ARTISTE + JARDIN</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02102</p>
                </div>
        </div>
    
</div>

<div id="ID-86382" class="animated fadeIn item-wrap infobox_trigger VENTE item-appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                        <span class="animated slideInDown label-featured label label-success">Exclusivité</span>

                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">1.420.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="86382"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(12) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-86382" class="compare-property" data-propid="86382" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18</a></h2><div class="hide-on-list"><span class="item-price">1.420.000 €</span></div><address class="property-address">75018, PARIS 18, France</address>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 104 m²</span><span class="ascenseur">Ascenseur</span></p>                    <p>APPARTEMENT BOURGEOIS</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02100</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">1.420.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 104 m²</span><span class="ascenseur">Ascenseur</span></p>                        <p>APPARTEMENT BOURGEOIS</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02100</p>
                </div>
        </div>
    
</div>

                </div>
            </div>
            <!--end property items-->

            <hr>

            <!--start Pagination-->
            <div class="pagination-main "><ul class="pagination"><li class="disabled"><a aria-label="Previous"><span aria-hidden="true"><i class="fa fa-angle-left"></i></span></a></li><li class="active"><a data-houzepagi="1" href="https://paris-montmartre-immobilier.fr/advanced-search/?keyword=PARIS&#038;status=vente&#038;type&#038;bedrooms&#038;min-area&#038;max-price&#038;bathrooms&#038;max-area&#038;min-price">1 <span class="sr-only"></span></a></li><li><a data-houzepagi="2" href="https://paris-montmartre-immobilier.fr/advanced-search/page/2/?keyword=PARIS&#038;status=vente&#038;type&#038;bedrooms&#038;min-area&#038;max-price&#038;bathrooms&#038;max-area&#038;min-price">2</a></li><li><a data-houzepagi="2" rel="Next" href="https://paris-montmartre-immobilier.fr/advanced-search/page/2/?keyword=PARIS&#038;status=vente&#038;type&#038;bedrooms&#038;min-area&#038;max-price&#038;bathrooms&#038;max-area&#038;min-price"><span aria-hidden="true"><i class="fa fa-angle-right"></i></span></a></li></ul></div>            <!--start Pagination-->

        </div>
    </div><!-- end container-content -->

        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
        <aside id="sidebar" class="sidebar-white">
            <div id="houzez_mortgage_calculator-3" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_featured_properties-3" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div>                    </aside>
    </div> <!-- end container-sidebar -->
    
</div>




        </div> <!--.container Start in header-->
    </div> <!--Start in header end #section-body-->

<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                                                <div class="footer-col foot-social">
                                                    </div>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>
						</div>

                    </div>
                </div>
                <div class="col-md-3 col-sm-3">
                        <div class="row">
                           
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://www.instagram.com/aivoni_/" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>

        <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>                        </div>
                </div>
            </div>
        </div>
    </div><!-- End footer bottom -->
</footer>
<!--end footer section-->

<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js,wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"","property_lng":"","property_map":"","property_map_street":"","is_singular_property":"","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"template-search.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"","paged":"0","search_result_page":"normal_page","search_keyword":"PARIS","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"vente","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"template\/template-search.php","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar --> 
</body>
</html>

<!-- Dynamic page generated in 0.365 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:51:16 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:16 GMT
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m2-paris-18/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:17 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '29985'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Vary:
      - Accept-Encoding, Cookie
      Cache-Control:
      - max-age=3, must-revalidate
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>AU COEUR DES ABBESSES 4 pi&#xE8;ce(s) - 90 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="AU COEUR DES ABBESSES 4 pi&#xE8;ce(s) - 90 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:description" content="EXCLUSIVITE PARIS XVIII &#xE8;me EN PLEIN COEUR DES ABBESSES Dans immeuble r&#xE9;cent de Standing , au 4 &#xE8;me &#xE9;tage AVEC ASCENSEUR , Tr&#xE8;s beau 4 Pi&#xE8;ces enti&#xE8;rement refait &#xE0; neuf avec de tr&#xE8;s beaux mat&#xE9;riaux . Pi&#xE8;ces de vie de 40 m2 EXPOSEE PLEIN SUD, 3 GRANDES CHAMBRES, Vue SANS AUCUN VIS A VIS SACRE &hellip;" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="og:image:width" content="800" />
<meta property="og:image:height" content="533" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:description" content="EXCLUSIVITE PARIS XVIII &#xE8;me EN PLEIN COEUR DES ABBESSES Dans immeuble r&#xE9;cent de Standing , au 4 &#xE8;me &#xE9;tage AVEC ASCENSEUR , Tr&#xE8;s beau 4 Pi&#xE8;ces enti&#xE8;rement refait &#xE0; neuf avec de tr&#xE8;s beaux mat&#xE9;riaux . Pi&#xE8;ces de vie de 40 m2 EXPOSEE PLEIN SUD, 3 GRANDES CHAMBRES, Vue SANS AUCUN VIS A VIS SACRE [&hellip;]" />
<meta name="twitter:title" content="AU COEUR DES ABBESSES 4 pi&#xE8;ce(s) - 90 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="DC.date.issued" content="2020-03-04T11:10:23+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//maps-api-ssl.google.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18 Flux des commentaires" href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://maps-api-ssl.google.com/maps/api/js?libraries=places&#038;language=fr_FR&#038;key=AIzaSyDA7qptk-MGcja7CHZyQwf6xGQCat4osnM'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=89868' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fau-coeur-des-abbesses-4-pices-90-m%25c2%25b2-paris-18%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fau-coeur-des-abbesses-4-pices-90-m%25c2%25b2-paris-18%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="property-template-default single single-property postid-89868  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
		

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	
    <!--start detail top-->
     

<section class="detail-top detail-top-full v6 ">
    

        <div class="go-back">
            <div class="col-md-12">
                <a href="#" id="go-back-button" class="previous"><i class="fa fa-angle-left"></i>
<span> Retour à la liste de biens </span></a>    
	</div>
        </div>

        <div id="slider-property-v3" class="slider-pro">
        <div class="sp-slides" >
       

                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121327/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121327/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121327/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121327/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121327/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121327/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121328/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121328/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121328/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121328/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121328/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121328/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121330/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121330/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121330/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121330/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121330/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121330/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"/>

            </div>
                
    </div>

    </div>
    </section>

    <!--end detail top-->

    
    <!--start detail content-->
    <section class="section-detail-content ">
                        <div class="container">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 container-contentbar">
                            <div id="top-info-bar" class="detail-address detail-block">
    <div class="detail-address-inner">
            <span class="topbar">
                <i class="fa fa-map-marker" style="font-size:20px;margin-right:5px;"></i>
                <span>Lieu : </span> <span>PARIS 18</span></span>                        <span class="topbar"><i class="fa fa-hotel" style="font-size:20px;margin-right:5px;"></i><span>Chambres : </span><span>3</span></span>            <span class="topbar"><i class="fa fa-arrows-h" style="font-size:20px;margin-right:5px;"></i><span>Surface : </span><span>90 m²</span></span>            <span class="topbar"><i class="fa fa-key" style="font-size:20px;margin-right:5px;"></i><span>Référence : </span><span>02114</span></span>                        <span class="topbar"><span class="item-price">1.329.000 €</span></span>    </div>
</div>
                            <div class="detail-bar">

                                <div id="description" class="property-description detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Description </h2>
        <div class="title-right">
                <span class="animated slideInDown label-featured label label-success">Exclusivité</span>
        </div>
    </div>

    
    <p><span style="font-size: 13px; font-family: arial,sans,sans-serif; text-align: center;" data-sheets-value="&quot;}" data-sheets-userformat="" data-sheets-ischild=""></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;">EXCLUSIVITE PARIS XVIII &#xE8;me EN PLEIN COEUR DES ABBESSES<br />
Dans immeuble r&#xE9;cent de Standing , au 4 &#xE8;me &#xE9;tage AVEC ASCENSEUR ,<br />
Tr&#xE8;s beau  4 Pi&#xE8;ces enti&#xE8;rement refait &#xE0; neuf avec de tr&#xE8;s beaux mat&#xE9;riaux .<br />
Pi&#xE8;ces de vie de 40 m2 EXPOSEE PLEIN SUD, 3 GRANDES CHAMBRES, Vue SANS AUCUN VIS A VIS SACRE COEUR et MONUMENT HISTORIQUE .<br />
Produit Tr&#xE8;s rare dans le secteur .<br />
PARKING EN LOCATION dans limmeuble 150&#x20AC;/ mois.<br />
CONTACT DIRECT ET VISITES AVEC BORIS GARNODIER au 0624406519</span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span></p>

    </div>
<div id="address" class="detail-address detail-block target-block">
    <div class="detail-title">
      <h2 class="title-left">Localisation :</h2>
            <div class="title-right">
        <a target="_blank" href="http://maps.google.com/?q=75018,%20PARIS%2018,%20France">Ouvrir avec Google Maps <i class="fa fa-map-marker"></i></a>
      </div>
          </div>
    
    <div><address class="property-address">75018, PARIS 18, France</address></div>    <div class="alert alert-info">
      <ul class="list-three-col">
          <li class="detail-city"><strong>Ville:</strong> PARIS 18</li><li class="detail-zip"><strong>Code Postal:</strong> 75018</li><li class="detail-country"><strong>Pays:</strong> France</li>      </ul>
    </div>
</div><div id="detail" class="detail-list detail-block target-block">
      <div class="detail-title">
        <h2 class="title-left">Informations Financières</h2>
              <div class="title-extra-info">Honoraires charge vendeur</div>
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Prix : </strong> <label>1.329.000 €</label></div></li><li><div class="aivoni-details"><label>Honoraires charge vendeur</label></div></li><li><div class="aivoni-details"><strong>&#xC0; propos de la copropri&#xE9;t&#xE9; : </strong> <label>La copropri&#xE9;t&#xE9; inclut 27 lots pour un montant moyen annuel de la quote part du budget pr&#xE9;visionnel des d&#xE9;penses courantes de 3484,56 &#x20AC;</label></div></li><li><div class="aivoni-details"><strong>Proc&#xE9;dure syndicat : </strong> <label>Non</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Surfaces</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Surface : </strong> <label>90 m²</label></div></li><li><div class="aivoni-details"><strong>Surface S&#xE9;jour : </strong> <label>40 m²</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Récapitulatif</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Référence : </strong> <label>02114</label></div></li><li><div class="aivoni-details"><strong>Chambres : </strong> <label>3</label></div></li><li><div class="aivoni-details"><strong>Salle(s) de Bain(s) : </strong> <label>1</label></div></li><li><div class="aivoni-details"><strong>Année de construction : </strong> <label>1963</label></div></li><li><div class="aivoni-details"><strong>Cuisine : </strong> <label>AMENAGEE</label></div></li><li><div class="aivoni-details"><strong>Chauffage : </strong> <label>COLLECTIF - GAZ -</label></div></li><li><div class="aivoni-details"><strong>Pi&#xE8;ces : </strong> <label>4 pi&#xE8;ce(s)</label></div></li><li><div class="aivoni-details"><strong>Nombre d&#039;&#xE9;tages : </strong> <label>6</label></div></li><li><div class="aivoni-details"><strong>Etage : </strong> <label>4</label></div></li>        </ul>
      </div>
  </div>
 <div id="features" class="detail-features detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Les Plus</h2>
    </div>
    <ul class="list-three-col list-features">
        <li><a href="https://paris-montmartre-immobilier.fr/feature/ascenseur/"><i class="fa fa-check"></i>Ascenseur</a></li><li><i class="fa fa-check"></i>Cave(s)</li>    </ul>
</div>

<div id="graphic" class="detail-features detail-block target-block">
<div class="row">
    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Consommation Énergétique</h2>
        </div>
                    <h5>DPE : D (225 kWh/m² an)</h5>
                <div class="DPE DPE-D"><span>225</span>
        </div>
    </div>


    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Émission de GES</h2>
        </div>
                    <h5>GES : E (52 kg/m² an)</h5>
                <div class="DPE GES GES-E"><span>52</span>
        </div>
    </div>

</div>
</div>



    <div id="agent_bottom" class="detail-contact detail-block target-block  ">
        <div class="detail-title">
            <h2 class="title-left">Informations de contact</h2>
                            <div class="title-right"><strong><a href="">Voir nos annonces</a></strong></div>
                    </div>

                <form method="post" action="#">
        
            <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="80" height="80"></a></div><div class="media-body"><dl><dt>Contact</dt><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><span><i class="fa fa-phone"></i>01 42 62 04 04</span></dd><dd></dd></dl></div></div>            <div class="detail-title-inner">
                                <h4 class="title-inner">Renseignez-vous sur cette propriété</h4>
                            </div>
                                        <input type="hidden" name="target_email" value="&#112;mtransa&#99;tio&#110;s&#50;&#64;&#103;&#109;a&#105;l.c&#111;m">
                        <input type="hidden" name="agent_contact_form_ajax"
                   value="2f5c66d2c4"/>
            <input type="hidden" name="property_permalink"
                   value="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/"/>
            <input type="hidden" name="property_title"
                   value="AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18"/>
            <input type="hidden" name="action" value="houzez_agent_send_message">

            <div class="row">
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="name"
                               placeholder="Nom" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="phone"
                               placeholder="Téléphone" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="email"
                               placeholder="E-mail " type="email">
                    </div>
                </div>
                <div class="col-sm-12 col-xs-12">
                    <div class="form-group">
                        <textarea class="form-control" name="message" rows="5" placeholder="Méssage">Bonjour, Je suis intéressé par [AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18]</textarea>
                    </div>
                    <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                    <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>
                            J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        
                    </div>
                </div>
            </div>
            <button class="agent_contact_form btn btn-secondary">Envoyer</button>
                                    <div class="form_messages"></div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </form>
    </div>

                                 
                                    <div id="bareme_prix" class="detail-features detail-block target-block">
                                        <a target="_blank" href="http://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/BaremedesPrestationsParisMontmartreTransactions.pdf">Nos barèmes de prix</a>
                                    </div>
                                

                                
                                
<div class="property-reviews detail-block">
    <div class="detail-title" data-score="0" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
        <h2 class="title-left">
            Aucun Commentaire            <span class="rating-wrap">
                <input class="rating-display-only" name="rating" value="0" type="number" min="0" max="5" step=1 data-size="md" class="rating" >
                <span class="star-text star-text-right">
                    (
                    <span itemprop="ratingValue">0</span> en dehors de                    <span itemprop="bestRating">5</span>
                    )
                </span>
            </span>
        </h2>
        <div class="title-right"><strong><a href="#writ-review-block"> Ecrire un commentaire </a></strong></div>
    </div>
    <ul class="reviews-list">
            </ul>
    <div id="writ-review-block" class="add-review-block">
        <h4 class="review-title"> Ecrire un commentaire </h4>
        <a href="#" data-toggle="modal" data-target="#pop-login">Connectez-vous pour commenter</a>    </div>
</div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
                            <aside id="sidebar" class="sidebar-white">
    
        <div class="widget widget-contact-agent  ">
            <div class="widget-body">
                <div class="form-small">
                        <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                       </div>
            </div>
        </div>

        
        <div id="houzez_properties-2" class="widget widget_houzez_properties"><div class="widget-top"><h3 class="widget-title">Dernières annonces</h3></div>
		

		<div class="widget-body">

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031030/VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-150x110.jpg" alt="VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">MAISON CONTEMPORAINE 11 pi&#xE8;ce(s) &#8211; 270,39 m² &#8211; MEUDON</a></h3>
						<h4><span class="item-price item-price-text">-</span></h4>
						<div class="amenities">
							<p>5 Ch • 1 Salle(s) de bain(s) • 270 m²</p>
							<p>MAISON CONTEMPORAINE</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 65 m² &#8211; PARIS 18</a></h3>
						<h4>2.185 €&#47;mois cc</h4>
						<div class="amenities">
							<p>1 Chambre • 65 m²</p>
							<p>APPARTEMENT BOURGEOIS</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">
								<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">ANGLE CAULAINCOURT / LAMARCK</a></h3>
						<h4>1.260.000 €</h4>
						<div class="amenities">
							<p></p>
							<p></p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">
								<img width="150" height="110" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg 150w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">RUE SAINT VINCENT</a></h3>
						<h4>1.420.000 €</h4>
						<div class="amenities">
							<p>104 </p>
							<p></p>
						</div>
					</div>
				</div>

						
		</div>


		</div><div id="houzez_featured_properties-5" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.195.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="9 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">750.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.420.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="14 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/duplex-jardin-privatif-5-pices-119-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150202/VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.990.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-3-pices-58-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150035/VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">665.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div><div id="houzez_mortgage_calculator-2" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez Vos Mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_property_taxonomies-3" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/status/biens-vendus/">BIENS VENDUS</a><span class="cat-count">(26)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/location/">LOCATION</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vendu/">VENDU</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vente/">VENTE</a><span class="cat-count">(17)</span></li></ul></div></div><div id="houzez_property_taxonomies-4" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type de bien</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div><div id="houzez_property_taxonomies-10" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Nos villes</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/city/meudon/">MEUDON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-04/">PARIS 04</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-05/">PARIS 05</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-17/">PARIS 17</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-18/">PARIS 18</a><span class="cat-count">(24)</span></li></ul></div></div></aside>                        </div>
                    </div>
                </div>
                    </section>
    <!--end detail content-->

    </div> <!--Start in header, end #section-body-->

    <!--start lightbox-->
    <div id="lightbox-popup-main" class="fade">
    <div class="lightbox-popup">
        <div class="popup-inner">
            <div class="lightbox-left">

                <div class="lightbox-header">
                    <div class="header-title">
                        <p>
                                                        <span>
                                <img src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/logo_7_0.png" alt="AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18" width="86" height="13">
                            </span>
                                                        <span class="hidden-xs">
                            AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                            </span>
                        </p>
                    </div>
                    <div class="header-actions">
                        <ul class="actions">
                            <li class="share-btn">
                                
<div class="share_tooltip tooltip_left fade">
    <a href="http://www.facebook.com/sharer.php?u=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fau-coeur-des-abbesses-4-pices-90-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-facebook"></i></a>
                  <a href="https://twitter.com/intent/tweet?text=AU+COEUR++DES+ABBESSES+4+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+90+m%C2%B2+%26%238211%3B+PARIS+18&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fau-coeur-des-abbesses-4-pices-90-m%25c2%25b2-paris-18%2F&via=PARIS+MONTMARTRE+TRANSACTIONS" onclick="if(!document.getElementById('td_social_networks_buttons')){window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;}"><i class="fa fa-twitter"></i></a>

                  <a href="http://pinterest.com/pin/create/button/?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fau-coeur-des-abbesses-4-pices-90-m%25c2%25b2-paris-18%2F&amp;media=https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-pinterest"></i></a>

                  <a href="http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fau-coeur-des-abbesses-4-pices-90-m%25c2%25b2-paris-18%2F&title=AU+COEUR++DES+ABBESSES+4+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+90+m%C2%B2+%26%238211%3B+PARIS+18&source=https%3A%2F%2Fparis-montmartre-immobilier.fr%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-linkedin"></i></a>

                  <a href="http://plus.google.com/share?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fau-coeur-des-abbesses-4-pices-90-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-google-plus"></i></a>
                  <a href="mailto:example.com?subject=J'ai trouvé une propriété intéressante pour vous&body=Bonjour, voici un coup de coeur, sur le site de l'agence PARIS MONTMARTRE TRANSACTIONSqui  pourrait vous intéresser: https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/"><i class="fa fa-envelope"></i></a>
</div>
<span title="" data-placement="right" data-toggle="tooltip" data-original-title="partager"><i class="fa fa-share-alt"></i></span>                            </li>
                                                        <li>
                                <span><span class="add_fav" data-placement="right" data-toggle="tooltip" data-original-title="Favoris" data-propid="89868"><i class="fa fa-heart-o"></i></span></span>
                            </li>
                                                                                                                <li class="lightbox-expand visible-xs compress">
                                <span><i class="fa fa-envelope"></i></span>
                            </li>
                                                                                        <li class="lightbox-close">
                                <span><i class="fa fa-close"></i></span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="gallery-area">
                    <div class="slider-placeholder">
                        <div class="loader-inner">

                            <span class="fa fa-spin fa-spinner"></span> Chargement Curseur ...
                        </div>
                    </div>
                                                            <div class="expand-icon lightbox-expand hidden-xs"></div>
                                                                <div class="gallery-inner">
                        <div class="lightbox-slide slide-animated">
                                                                                                <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                    <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                    <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121326/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                    <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121327/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121327/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121327/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                    <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121328/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121328/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121328/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                    <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                    <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121329/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                    <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121330/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121330/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121330/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                    <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                    <div> <img width="800" height="533" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg 800w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121331/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9-385x258.jpg 385w" sizes="(max-width: 800px) 100vw, 800px" /> </div>
                                                                                    </div>
                    </div>
                    <div class="lightbox-slide-nav visible-xs">
                        <button class="lightbox-arrow-left lightbox-arrow"><i class="fa fa-angle-left"></i></button>
                        <p class="lightbox-nav-title">
                            AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                        </p>
                        <button class="lightbox-arrow-right lightbox-arrow"><i class="fa fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
                                                <div class="lightbox-right fade in">
                        <div class="lightbox-header hidden-xs">
                            <div class="header-title">
                                <p>1.329.000 €</p>
                            </div>
                            <div class="header-actions">
                                <ul class="actions">
                                    <li class="lightbox-close">
                                        <span><i class="fa fa-close"></i></span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="agent-area">
                            <div class="form-small">
                                    <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [AU COEUR  DES ABBESSES 4 pi&#xE8;ce(s) &#8211; 90 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                                   </div>
                        </div>
                    </div>
                                    </div>
    </div>
</div>    <!-- End Lightbox-->



<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>						</div>

                    </div>
                </div>
                
                <div class="col-md-3 col-sm-3">
                    <div class="row">
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://aivoni.com" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>
                        </div>
                    </div>
            </div>
        </div>

    </div><!-- End footer bottom -->

</footer>
<!--end footer section-->

<link rel='stylesheet' id='slider-pro.min-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/css/slider-pro.min.css,wp-content/themes/houzez/houzez/slider/css/slider-property-v3.css&#038;ver=1585558881' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-content/themes/houzez/houzez/js/infobox.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"48.891305","property_lng":"2.3529867","property_map":"false","property_map_street":"","is_singular_property":"yes","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"page.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"yes","paged":"0","search_result_page":"normal_page","search_keyword":"","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js,wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/js/jquery.sliderPro.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar -->
</body>
</html>

<!-- Dynamic page generated in 0.326 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:29:38 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:17 GMT
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m2-paris-18/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:17 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '29729'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=9mimfo5l03h2o62n03r9933911; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://paris-montmartre-immobilier.fr/xmlrpc.php
      Link:
      - "<https://paris-montmartre-immobilier.fr/?p=89343>; rel=shortlink"
      - <https://paris-montmartre-immobilier.fr/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) - 227,21 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) - 227,21 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:description" content="PARIS MAIRIE JULES JOFFRIN DERNIER ETAGE , Somptueux triplex ( entr&#xE9;e par le 1 er &#xE9;tage jusquau 3 &#xE8;me et dernier &#xE9;tage de limmeuble )COMME UNE MAISON Superficie de 227 m2 habitable (190,27m2 loi carrez) ENTIEREMENT REFAIT A NEUF avec des mat&#xE9;riaux de grandes qualit&#xE9;s. DE TRES BEAUX volumes pour ce bien dException. CONTACT DIRECT &hellip;" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="801" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:description" content="PARIS MAIRIE JULES JOFFRIN DERNIER ETAGE , Somptueux triplex ( entr&#xE9;e par le 1 er &#xE9;tage jusquau 3 &#xE8;me et dernier &#xE9;tage de limmeuble )COMME UNE MAISON Superficie de 227 m2 habitable (190,27m2 loi carrez) ENTIEREMENT REFAIT A NEUF avec des mat&#xE9;riaux de grandes qualit&#xE9;s. DE TRES BEAUX volumes pour ce bien dException. CONTACT DIRECT [&hellip;]" />
<meta name="twitter:title" content="TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) - 227,21 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="DC.date.issued" content="2020-02-18T11:00:14+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//maps-api-ssl.google.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18 Flux des commentaires" href="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://maps-api-ssl.google.com/maps/api/js?libraries=places&#038;language=fr_FR&#038;key=AIzaSyCD95fZ9xxtKzUX3tZNxy7rtwRrX3c_dJw'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=89343' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Ftriplex-somptueux-6-pices-22721-m%25c2%25b2-paris-18%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Ftriplex-somptueux-6-pices-22721-m%25c2%25b2-paris-18%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="property-template-default single single-property postid-89343  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
		

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	
    <!--start detail top-->
     

<section class="detail-top detail-top-full v6 ">
    

        <div class="go-back">
            <div class="col-md-12">
                <a href="#" id="go-back-button" class="previous"><i class="fa fa-angle-left"></i>
<span> Retour à la liste de biens </span></a>    
	</div>
        </div>

        <div id="slider-property-v3" class="slider-pro">
        <div class="sp-slides" >
       

                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150109/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150109/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150109/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150109/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150109/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150109/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150110/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150110/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150110/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150110/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150110/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150110/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150111/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150111/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150111/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150111/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150111/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150111/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150112/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150112/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150112/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150112/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150112/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150112/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150114/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150114/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150114/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150114/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150114/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150114/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"/>

            </div>
                
    </div>

    </div>
    </section>

    <!--end detail top-->

    
    <!--start detail content-->
    <section class="section-detail-content ">
                        <div class="container">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 container-contentbar">
                            <div id="top-info-bar" class="detail-address detail-block">
    <div class="detail-address-inner">
            <span class="topbar">
                <i class="fa fa-map-marker" style="font-size:20px;margin-right:5px;"></i>
                <span>Lieu : </span> <span>PARIS 18</span></span>                        <span class="topbar"><i class="fa fa-hotel" style="font-size:20px;margin-right:5px;"></i><span>Chambres : </span><span>4</span></span>            <span class="topbar"><i class="fa fa-arrows-h" style="font-size:20px;margin-right:5px;"></i><span>Surface : </span><span>227 m²</span></span>            <span class="topbar"><i class="fa fa-key" style="font-size:20px;margin-right:5px;"></i><span>Référence : </span><span>02110</span></span>                        <span class="topbar"><span class="item-price">2.280.000 €</span></span>    </div>
</div>
                            <div class="detail-bar">

                                <div id="description" class="property-description detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Description </h2>
        <div class="title-right">
                    </div>
    </div>

    
    <p><span style="font-size: 13px; font-family: arial,sans,sans-serif; text-align: center;" data-sheets-value="&quot;}" data-sheets-userformat="" data-sheets-ischild=""></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;">PARIS MAIRIE JULES JOFFRIN<br />
DERNIER ETAGE , Somptueux triplex ( entr&#xE9;e par le 1 er &#xE9;tage jusquau 3 &#xE8;me et dernier &#xE9;tage de limmeuble )COMME UNE MAISON<br />
Superficie de 227 m2 habitable (190,27m2 loi carrez) ENTIEREMENT REFAIT A NEUF avec des mat&#xE9;riaux de grandes qualit&#xE9;s.<br />
DE TRES BEAUX volumes pour ce bien dException.<br />
CONTACT DIRECT ET VISITES AVEC BORIS GARNODIER au 0624406519</span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span></p>

    </div>
<div id="address" class="detail-address detail-block target-block">
    <div class="detail-title">
      <h2 class="title-left">Localisation :</h2>
          </div>
    
        <div class="alert alert-info">
      <ul class="list-three-col">
          <li class="detail-city"><strong>Ville:</strong> PARIS 18</li><li class="detail-zip"><strong>Code Postal:</strong> 75018</li><li class="detail-country"><strong>Pays:</strong> France</li>      </ul>
    </div>
</div><div id="detail" class="detail-list detail-block target-block">
      <div class="detail-title">
        <h2 class="title-left">Informations Financières</h2>
              <div class="title-extra-info">Honoraires charge vendeur</div>
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Prix : </strong> <label>2.280.000 €</label></div></li><li><div class="aivoni-details"><label>Honoraires charge vendeur</label></div></li><li><div class="aivoni-details"><strong>&#xC0; propos de la copropri&#xE9;t&#xE9; : </strong> <label>La copropri&#xE9;t&#xE9; inclut 4 lots pour un montant moyen annuel de la quote part du budget pr&#xE9;visionnel des d&#xE9;penses courantes de 4398 &#x20AC;</label></div></li><li><div class="aivoni-details"><strong>Proc&#xE9;dure syndicat : </strong> <label>Non</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Surfaces</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Surface : </strong> <label>227 m²</label></div></li><li><div class="aivoni-details"><strong>Surface S&#xE9;jour : </strong> <label>49 m²</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Récapitulatif</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Référence : </strong> <label>02110</label></div></li><li><div class="aivoni-details"><strong>Chambres : </strong> <label>4</label></div></li><li><div class="aivoni-details"><strong>Salle(s) de Bain(s) : </strong> <label>3</label></div></li><li><div class="aivoni-details"><strong>Année de construction : </strong> <label>1900</label></div></li><li><div class="aivoni-details"><strong>Cuisine : </strong> <label>AMENAGEE</label></div></li><li><div class="aivoni-details"><strong>Chauffage : </strong> <label>INDIVIDUEL - GAZ -</label></div></li><li><div class="aivoni-details"><strong>Pi&#xE8;ces : </strong> <label>6 pi&#xE8;ce(s)</label></div></li><li><div class="aivoni-details"><strong>Nombre d&#039;&#xE9;tages : </strong> <label>3</label></div></li><li><div class="aivoni-details"><strong>Etage : </strong> <label>1</label></div></li>        </ul>
      </div>
  </div>
 <div id="features" class="detail-features detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Les Plus</h2>
    </div>
    <ul class="list-three-col list-features">
        <li><i class="fa fa-check"></i>Cave(s)</li>    </ul>
</div>

<div id="graphic" class="detail-features detail-block target-block">
<div class="row">
    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Consommation Énergétique</h2>
        </div>
                    <h5>DPE : C (126 kWh/m² an)</h5>
                <div class="DPE DPE-C"><span>126</span>
        </div>
    </div>


    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Émission de GES</h2>
        </div>
                    <h5>GES : D (29 kg/m² an)</h5>
                <div class="DPE GES GES-D"><span>29</span>
        </div>
    </div>

</div>
</div>



    <div id="agent_bottom" class="detail-contact detail-block target-block  ">
        <div class="detail-title">
            <h2 class="title-left">Informations de contact</h2>
                            <div class="title-right"><strong><a href="">Voir nos annonces</a></strong></div>
                    </div>

                <form method="post" action="#">
        
            <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="80" height="80"></a></div><div class="media-body"><dl><dt>Contact</dt><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><span><i class="fa fa-phone"></i>01 42 62 04 04</span></dd><dd></dd></dl></div></div>            <div class="detail-title-inner">
                                <h4 class="title-inner">Renseignez-vous sur cette propriété</h4>
                            </div>
                                        <input type="hidden" name="target_email" value="&#112;&#109;&#116;&#114;ansa&#99;&#116;&#105;&#111;ns&#50;&#64;&#103;m&#97;&#105;l&#46;&#99;&#111;&#109;">
                        <input type="hidden" name="agent_contact_form_ajax"
                   value="2f5c66d2c4"/>
            <input type="hidden" name="property_permalink"
                   value="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/"/>
            <input type="hidden" name="property_title"
                   value="TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18"/>
            <input type="hidden" name="action" value="houzez_agent_send_message">

            <div class="row">
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="name"
                               placeholder="Nom" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="phone"
                               placeholder="Téléphone" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="email"
                               placeholder="E-mail " type="email">
                    </div>
                </div>
                <div class="col-sm-12 col-xs-12">
                    <div class="form-group">
                        <textarea class="form-control" name="message" rows="5" placeholder="Méssage">Bonjour, Je suis intéressé par [TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18]</textarea>
                    </div>
                    <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                    <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>
                            J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        
                    </div>
                </div>
            </div>
            <button class="agent_contact_form btn btn-secondary">Envoyer</button>
                                    <div class="form_messages"></div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </form>
    </div>

                                 
                                    <div id="bareme_prix" class="detail-features detail-block target-block">
                                        <a target="_blank" href="http://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/BaremedesPrestationsParisMontmartreTransactions.pdf">Nos barèmes de prix</a>
                                    </div>
                                

                                
                                
<div class="property-reviews detail-block">
    <div class="detail-title" data-score="0" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
        <h2 class="title-left">
            Aucun Commentaire            <span class="rating-wrap">
                <input class="rating-display-only" name="rating" value="0" type="number" min="0" max="5" step=1 data-size="md" class="rating" >
                <span class="star-text star-text-right">
                    (
                    <span itemprop="ratingValue">0</span> en dehors de                    <span itemprop="bestRating">5</span>
                    )
                </span>
            </span>
        </h2>
        <div class="title-right"><strong><a href="#writ-review-block"> Ecrire un commentaire </a></strong></div>
    </div>
    <ul class="reviews-list">
            </ul>
    <div id="writ-review-block" class="add-review-block">
        <h4 class="review-title"> Ecrire un commentaire </h4>
        <a href="#" data-toggle="modal" data-target="#pop-login">Connectez-vous pour commenter</a>    </div>
</div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
                            <aside id="sidebar" class="sidebar-white">
    
        <div class="widget widget-contact-agent  ">
            <div class="widget-body">
                <div class="form-small">
                        <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                       </div>
            </div>
        </div>

        
        <div id="houzez_properties-2" class="widget widget_houzez_properties"><div class="widget-top"><h3 class="widget-title">Dernières annonces</h3></div>
		

		<div class="widget-body">

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031030/VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-150x110.jpg" alt="VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">MAISON CONTEMPORAINE 11 pi&#xE8;ce(s) &#8211; 270,39 m² &#8211; MEUDON</a></h3>
						<h4><span class="item-price item-price-text">-</span></h4>
						<div class="amenities">
							<p>5 Ch • 1 Salle(s) de bain(s) • 270 m²</p>
							<p>MAISON CONTEMPORAINE</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 65 m² &#8211; PARIS 18</a></h3>
						<h4>2.185 €&#47;mois cc</h4>
						<div class="amenities">
							<p>1 Chambre • 65 m²</p>
							<p>APPARTEMENT BOURGEOIS</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">
								<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">ANGLE CAULAINCOURT / LAMARCK</a></h3>
						<h4>1.260.000 €</h4>
						<div class="amenities">
							<p></p>
							<p></p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">
								<img width="150" height="110" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg 150w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">RUE SAINT VINCENT</a></h3>
						<h4>1.420.000 €</h4>
						<div class="amenities">
							<p>104 </p>
							<p></p>
						</div>
					</div>
				</div>

						
		</div>


		</div><div id="houzez_featured_properties-5" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.195.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="9 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">750.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.420.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="14 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/duplex-jardin-privatif-5-pices-119-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150202/VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.990.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-3-pices-58-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150035/VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">665.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div><div id="houzez_mortgage_calculator-2" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez Vos Mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_property_taxonomies-3" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/status/biens-vendus/">BIENS VENDUS</a><span class="cat-count">(26)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/location/">LOCATION</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vendu/">VENDU</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vente/">VENTE</a><span class="cat-count">(17)</span></li></ul></div></div><div id="houzez_property_taxonomies-4" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type de bien</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div><div id="houzez_property_taxonomies-10" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Nos villes</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/city/meudon/">MEUDON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-04/">PARIS 04</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-05/">PARIS 05</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-17/">PARIS 17</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-18/">PARIS 18</a><span class="cat-count">(24)</span></li></ul></div></div></aside>                        </div>
                    </div>
                </div>
                    </section>
    <!--end detail content-->

    </div> <!--Start in header, end #section-body-->

    <!--start lightbox-->
    <div id="lightbox-popup-main" class="fade">
    <div class="lightbox-popup">
        <div class="popup-inner">
            <div class="lightbox-left">

                <div class="lightbox-header">
                    <div class="header-title">
                        <p>
                                                        <span>
                                <img src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/logo_7_0.png" alt="TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18" width="86" height="13">
                            </span>
                                                        <span class="hidden-xs">
                            TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                            </span>
                        </p>
                    </div>
                    <div class="header-actions">
                        <ul class="actions">
                            <li class="share-btn">
                                
<div class="share_tooltip tooltip_left fade">
    <a href="http://www.facebook.com/sharer.php?u=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Ftriplex-somptueux-6-pices-22721-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-facebook"></i></a>
                  <a href="https://twitter.com/intent/tweet?text=TRIPLEX+SOMPTUEUX+6+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+227%2C21+m%C2%B2+%26%238211%3B+PARIS+18&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Ftriplex-somptueux-6-pices-22721-m%25c2%25b2-paris-18%2F&via=PARIS+MONTMARTRE+TRANSACTIONS" onclick="if(!document.getElementById('td_social_networks_buttons')){window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;}"><i class="fa fa-twitter"></i></a>

                  <a href="http://pinterest.com/pin/create/button/?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Ftriplex-somptueux-6-pices-22721-m%25c2%25b2-paris-18%2F&amp;media=https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-pinterest"></i></a>

                  <a href="http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Ftriplex-somptueux-6-pices-22721-m%25c2%25b2-paris-18%2F&title=TRIPLEX+SOMPTUEUX+6+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+227%2C21+m%C2%B2+%26%238211%3B+PARIS+18&source=https%3A%2F%2Fparis-montmartre-immobilier.fr%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-linkedin"></i></a>

                  <a href="http://plus.google.com/share?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Ftriplex-somptueux-6-pices-22721-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-google-plus"></i></a>
                  <a href="mailto:example.com?subject=J'ai trouvé une propriété intéressante pour vous&body=Bonjour, voici un coup de coeur, sur le site de l'agence PARIS MONTMARTRE TRANSACTIONSqui  pourrait vous intéresser: https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/"><i class="fa fa-envelope"></i></a>
</div>
<span title="" data-placement="right" data-toggle="tooltip" data-original-title="partager"><i class="fa fa-share-alt"></i></span>                            </li>
                                                        <li>
                                <span><span class="add_fav" data-placement="right" data-toggle="tooltip" data-original-title="Favoris" data-propid="89343"><i class="fa fa-heart-o"></i></span></span>
                            </li>
                                                                                                                <li class="lightbox-expand visible-xs compress">
                                <span><i class="fa fa-envelope"></i></span>
                            </li>
                                                                                        <li class="lightbox-close">
                                <span><i class="fa fa-close"></i></span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="gallery-area">
                    <div class="slider-placeholder">
                        <div class="loader-inner">

                            <span class="fa fa-spin fa-spinner"></span> Chargement Curseur ...
                        </div>
                    </div>
                                                            <div class="expand-icon lightbox-expand hidden-xs"></div>
                                                                <div class="gallery-inner">
                        <div class="lightbox-slide slide-animated">
                                                                                                <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150108/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150109/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150109/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150109/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150110/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150110/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150110/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150111/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150111/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150111/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150112/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150112/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150112/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150113/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150114/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150114/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150114/VENTE-02110-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                                    </div>
                    </div>
                    <div class="lightbox-slide-nav visible-xs">
                        <button class="lightbox-arrow-left lightbox-arrow"><i class="fa fa-angle-left"></i></button>
                        <p class="lightbox-nav-title">
                            TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                        </p>
                        <button class="lightbox-arrow-right lightbox-arrow"><i class="fa fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
                                                <div class="lightbox-right fade in">
                        <div class="lightbox-header hidden-xs">
                            <div class="header-title">
                                <p>2.280.000 €</p>
                            </div>
                            <div class="header-actions">
                                <ul class="actions">
                                    <li class="lightbox-close">
                                        <span><i class="fa fa-close"></i></span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="agent-area">
                            <div class="form-small">
                                    <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/triplex-somptueux-6-pices-22721-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [TRIPLEX SOMPTUEUX 6 pi&#xE8;ce(s) &#8211; 227,21 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                                   </div>
                        </div>
                    </div>
                                    </div>
    </div>
</div>    <!-- End Lightbox-->



<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>						</div>

                    </div>
                </div>
                
                <div class="col-md-3 col-sm-3">
                    <div class="row">
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://aivoni.com" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>
                        </div>
                    </div>
            </div>
        </div>

    </div><!-- End footer bottom -->

</footer>
<!--end footer section-->

<link rel='stylesheet' id='slider-pro.min-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/css/slider-pro.min.css,wp-content/themes/houzez/houzez/slider/css/slider-property-v3.css&#038;ver=1585558881' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-content/themes/houzez/houzez/js/infobox.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"48.891305","property_lng":"2.3529867","property_map":"false","property_map_street":"","is_singular_property":"yes","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"page.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"yes","paged":"0","search_result_page":"normal_page","search_keyword":"","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js,wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/js/jquery.sliderPro.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar -->
</body>
</html>

<!-- Dynamic page generated in 0.343 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:51:17 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:18 GMT
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m2-paris-18/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:18 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '29574'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=tiuveju8blt5q8r7q9mimnjka0; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://paris-montmartre-immobilier.fr/xmlrpc.php
      Link:
      - "<https://paris-montmartre-immobilier.fr/?p=88750>; rel=shortlink"
      - <https://paris-montmartre-immobilier.fr/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) - 35,27 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) - 35,27 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:description" content="EXCLUSIVITE , PARIS XVIII &#xE8;me RUE RAMEY Au 4 &#xE8;me &#xE9;tage (sans ascenseur) MAGNIFIQUE 2 P enti&#xE8;remement refait &#xE0; neuf , TRES ENSOLEILLE , Magnifique S&#xE9;jour avec cuisine Am&#xE9;ricaine enti&#xE8;rement am&#xE9;nag&#xE9;e TRES CALME , Top emplacement. Une cave vient compl&#xE9;ter ce bien" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="800" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:description" content="EXCLUSIVITE , PARIS XVIII &#xE8;me RUE RAMEY Au 4 &#xE8;me &#xE9;tage (sans ascenseur) MAGNIFIQUE 2 P enti&#xE8;remement refait &#xE0; neuf , TRES ENSOLEILLE , Magnifique S&#xE9;jour avec cuisine Am&#xE9;ricaine enti&#xE8;rement am&#xE9;nag&#xE9;e TRES CALME , Top emplacement. Une cave vient compl&#xE9;ter ce bien" />
<meta name="twitter:title" content="MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) - 35,27 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="DC.date.issued" content="2020-02-11T15:00:35+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//maps-api-ssl.google.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18 Flux des commentaires" href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://maps-api-ssl.google.com/maps/api/js?libraries=places&#038;language=fr_FR&#038;key=AIzaSyCD95fZ9xxtKzUX3tZNxy7rtwRrX3c_dJw'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=88750' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fmagnifique-2-pieces-2-pices-3527-m%25c2%25b2-paris-18%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fmagnifique-2-pieces-2-pices-3527-m%25c2%25b2-paris-18%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="property-template-default single single-property postid-88750  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
		

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	
    <!--start detail top-->
     

<section class="detail-top detail-top-full v6 ">
    

        <div class="go-back">
            <div class="col-md-12">
                <a href="#" id="go-back-button" class="previous"><i class="fa fa-angle-left"></i>
<span> Retour à la liste de biens </span></a>    
	</div>
        </div>

        <div id="slider-property-v3" class="slider-pro">
        <div class="sp-slides" >
       

                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150224/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150224/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150224/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150224/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150224/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150224/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150225/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150225/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150225/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150225/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150225/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150225/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150226/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150226/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150226/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150226/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150226/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150226/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150228/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150228/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150228/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150228/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150228/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150228/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"/>

            </div>
                
    </div>

    </div>
    </section>

    <!--end detail top-->

    
    <!--start detail content-->
    <section class="section-detail-content ">
                        <div class="container">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 container-contentbar">
                            <div id="top-info-bar" class="detail-address detail-block">
    <div class="detail-address-inner">
            <span class="topbar">
                <i class="fa fa-map-marker" style="font-size:20px;margin-right:5px;"></i>
                <span>Lieu : </span> <span>PARIS 18</span></span>                        <span class="topbar"><i class="fa fa-hotel" style="font-size:20px;margin-right:5px;"></i><span>Chambres : </span><span>1</span></span>            <span class="topbar"><i class="fa fa-arrows-h" style="font-size:20px;margin-right:5px;"></i><span>Surface : </span><span>35 m²</span></span>            <span class="topbar"><i class="fa fa-key" style="font-size:20px;margin-right:5px;"></i><span>Référence : </span><span>02113</span></span>                        <span class="topbar"><span class="item-price">449.000 €</span></span>    </div>
</div>
                            <div class="detail-bar">

                                <div id="description" class="property-description detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Description </h2>
        <div class="title-right">
                <span class="animated slideInDown label-featured label label-success">Exclusivité</span>
        </div>
    </div>

    
    <p><span style="font-size: 13px; font-family: arial,sans,sans-serif; text-align: center;" data-sheets-value="&quot;}" data-sheets-userformat="" data-sheets-ischild=""></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;">EXCLUSIVITE , PARIS XVIII &#xE8;me RUE RAMEY<br />
Au 4 &#xE8;me &#xE9;tage (sans ascenseur) MAGNIFIQUE 2 P enti&#xE8;remement refait &#xE0; neuf , TRES ENSOLEILLE , Magnifique S&#xE9;jour avec cuisine Am&#xE9;ricaine enti&#xE8;rement am&#xE9;nag&#xE9;e<br />
TRES CALME , Top emplacement.<br />
Une cave vient compl&#xE9;ter ce bien</span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span></p>

    </div>
<div id="address" class="detail-address detail-block target-block">
    <div class="detail-title">
      <h2 class="title-left">Localisation :</h2>
            <div class="title-right">
        <a target="_blank" href="http://maps.google.com/?q=75018,%20PARIS%2018,%20France">Ouvrir avec Google Maps <i class="fa fa-map-marker"></i></a>
      </div>
          </div>
    
    <div><address class="property-address">75018, PARIS 18, France</address></div>    <div class="alert alert-info">
      <ul class="list-three-col">
          <li class="detail-city"><strong>Ville:</strong> PARIS 18</li><li class="detail-zip"><strong>Code Postal:</strong> 75018</li><li class="detail-country"><strong>Pays:</strong> France</li>      </ul>
    </div>
</div><div id="detail" class="detail-list detail-block target-block">
      <div class="detail-title">
        <h2 class="title-left">Informations Financières</h2>
              <div class="title-extra-info">Honoraires charge vendeur</div>
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Prix : </strong> <label>449.000 €</label></div></li><li><div class="aivoni-details"><label>Honoraires charge vendeur</label></div></li><li><div class="aivoni-details"><strong>&#xC0; propos de la copropri&#xE9;t&#xE9; : </strong> <label>La copropri&#xE9;t&#xE9; inclut 35 lots pour un montant moyen annuel de la quote part du budget pr&#xE9;visionnel des d&#xE9;penses courantes de 988 &#x20AC;</label></div></li><li><div class="aivoni-details"><strong>Proc&#xE9;dure syndicat : </strong> <label>Non</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Surfaces</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Surface : </strong> <label>35 m²</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Récapitulatif</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Référence : </strong> <label>02113</label></div></li><li><div class="aivoni-details"><strong>Chambres : </strong> <label>1</label></div></li><li><div class="aivoni-details"><strong>Salle(s) de Bain(s) : </strong> <label>1</label></div></li><li><div class="aivoni-details"><strong>Cuisine : </strong> <label>AMENAGEE</label></div></li><li><div class="aivoni-details"><strong>Chauffage : </strong> <label>INDIVIDUEL - ELECTRICITE -</label></div></li><li><div class="aivoni-details"><strong>Pi&#xE8;ces : </strong> <label>2 pi&#xE8;ce(s)</label></div></li><li><div class="aivoni-details"><strong>Etage : </strong> <label>4</label></div></li>        </ul>
      </div>
  </div>
 <div id="features" class="detail-features detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Les Plus</h2>
    </div>
    <ul class="list-three-col list-features">
        <li><i class="fa fa-check"></i>Cave(s)</li>    </ul>
</div>

<div id="graphic" class="detail-features detail-block target-block">
<div class="row">
    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Consommation Énergétique</h2>
        </div>
                    <h5>DPE : G (523 kWh/m² an)</h5>
                <div class="DPE DPE-G"><span>523</span>
        </div>
    </div>


    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Émission de GES</h2>
        </div>
                    <h5>GES : C (17 kg/m² an)</h5>
                <div class="DPE GES GES-C"><span>17</span>
        </div>
    </div>

</div>
</div>



    <div id="agent_bottom" class="detail-contact detail-block target-block  ">
        <div class="detail-title">
            <h2 class="title-left">Informations de contact</h2>
                            <div class="title-right"><strong><a href="">Voir nos annonces</a></strong></div>
                    </div>

                <form method="post" action="#">
        
            <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="80" height="80"></a></div><div class="media-body"><dl><dt>Contact</dt><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><span><i class="fa fa-phone"></i>01 42 62 04 04</span></dd><dd></dd></dl></div></div>            <div class="detail-title-inner">
                                <h4 class="title-inner">Renseignez-vous sur cette propriété</h4>
                            </div>
                                        <input type="hidden" name="target_email" value="&#112;&#109;&#116;&#114;a&#110;&#115;action&#115;2&#64;&#103;&#109;&#97;il&#46;&#99;&#111;m">
                        <input type="hidden" name="agent_contact_form_ajax"
                   value="2f5c66d2c4"/>
            <input type="hidden" name="property_permalink"
                   value="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/"/>
            <input type="hidden" name="property_title"
                   value="MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18"/>
            <input type="hidden" name="action" value="houzez_agent_send_message">

            <div class="row">
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="name"
                               placeholder="Nom" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="phone"
                               placeholder="Téléphone" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="email"
                               placeholder="E-mail " type="email">
                    </div>
                </div>
                <div class="col-sm-12 col-xs-12">
                    <div class="form-group">
                        <textarea class="form-control" name="message" rows="5" placeholder="Méssage">Bonjour, Je suis intéressé par [MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18]</textarea>
                    </div>
                    <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                    <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>
                            J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        
                    </div>
                </div>
            </div>
            <button class="agent_contact_form btn btn-secondary">Envoyer</button>
                                    <div class="form_messages"></div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </form>
    </div>

                                 
                                    <div id="bareme_prix" class="detail-features detail-block target-block">
                                        <a target="_blank" href="http://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/BaremedesPrestationsParisMontmartreTransactions.pdf">Nos barèmes de prix</a>
                                    </div>
                                

                                
                                
<div class="property-reviews detail-block">
    <div class="detail-title" data-score="0" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
        <h2 class="title-left">
            Aucun Commentaire            <span class="rating-wrap">
                <input class="rating-display-only" name="rating" value="0" type="number" min="0" max="5" step=1 data-size="md" class="rating" >
                <span class="star-text star-text-right">
                    (
                    <span itemprop="ratingValue">0</span> en dehors de                    <span itemprop="bestRating">5</span>
                    )
                </span>
            </span>
        </h2>
        <div class="title-right"><strong><a href="#writ-review-block"> Ecrire un commentaire </a></strong></div>
    </div>
    <ul class="reviews-list">
            </ul>
    <div id="writ-review-block" class="add-review-block">
        <h4 class="review-title"> Ecrire un commentaire </h4>
        <a href="#" data-toggle="modal" data-target="#pop-login">Connectez-vous pour commenter</a>    </div>
</div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
                            <aside id="sidebar" class="sidebar-white">
    
        <div class="widget widget-contact-agent  ">
            <div class="widget-body">
                <div class="form-small">
                        <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                       </div>
            </div>
        </div>

        
        <div id="houzez_properties-2" class="widget widget_houzez_properties"><div class="widget-top"><h3 class="widget-title">Dernières annonces</h3></div>
		

		<div class="widget-body">

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031030/VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-150x110.jpg" alt="VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">MAISON CONTEMPORAINE 11 pi&#xE8;ce(s) &#8211; 270,39 m² &#8211; MEUDON</a></h3>
						<h4><span class="item-price item-price-text">-</span></h4>
						<div class="amenities">
							<p>5 Ch • 1 Salle(s) de bain(s) • 270 m²</p>
							<p>MAISON CONTEMPORAINE</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 65 m² &#8211; PARIS 18</a></h3>
						<h4>2.185 €&#47;mois cc</h4>
						<div class="amenities">
							<p>1 Chambre • 65 m²</p>
							<p>APPARTEMENT BOURGEOIS</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">
								<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">ANGLE CAULAINCOURT / LAMARCK</a></h3>
						<h4>1.260.000 €</h4>
						<div class="amenities">
							<p></p>
							<p></p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">
								<img width="150" height="110" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg 150w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">RUE SAINT VINCENT</a></h3>
						<h4>1.420.000 €</h4>
						<div class="amenities">
							<p>104 </p>
							<p></p>
						</div>
					</div>
				</div>

						
		</div>


		</div><div id="houzez_featured_properties-5" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.195.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="9 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">750.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.420.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="14 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/duplex-jardin-privatif-5-pices-119-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150202/VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.990.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-3-pices-58-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150035/VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">665.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div><div id="houzez_mortgage_calculator-2" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez Vos Mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_property_taxonomies-3" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/status/biens-vendus/">BIENS VENDUS</a><span class="cat-count">(26)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/location/">LOCATION</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vendu/">VENDU</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vente/">VENTE</a><span class="cat-count">(17)</span></li></ul></div></div><div id="houzez_property_taxonomies-4" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type de bien</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div><div id="houzez_property_taxonomies-10" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Nos villes</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/city/meudon/">MEUDON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-04/">PARIS 04</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-05/">PARIS 05</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-17/">PARIS 17</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-18/">PARIS 18</a><span class="cat-count">(24)</span></li></ul></div></div></aside>                        </div>
                    </div>
                </div>
                    </section>
    <!--end detail content-->

    </div> <!--Start in header, end #section-body-->

    <!--start lightbox-->
    <div id="lightbox-popup-main" class="fade">
    <div class="lightbox-popup">
        <div class="popup-inner">
            <div class="lightbox-left">

                <div class="lightbox-header">
                    <div class="header-title">
                        <p>
                                                        <span>
                                <img src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/logo_7_0.png" alt="MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18" width="86" height="13">
                            </span>
                                                        <span class="hidden-xs">
                            MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                            </span>
                        </p>
                    </div>
                    <div class="header-actions">
                        <ul class="actions">
                            <li class="share-btn">
                                
<div class="share_tooltip tooltip_left fade">
    <a href="http://www.facebook.com/sharer.php?u=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fmagnifique-2-pieces-2-pices-3527-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-facebook"></i></a>
                  <a href="https://twitter.com/intent/tweet?text=MAGNIFIQUE+2+PIECES+2+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+35%2C27+m%C2%B2+%26%238211%3B+PARIS+18&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fmagnifique-2-pieces-2-pices-3527-m%25c2%25b2-paris-18%2F&via=PARIS+MONTMARTRE+TRANSACTIONS" onclick="if(!document.getElementById('td_social_networks_buttons')){window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;}"><i class="fa fa-twitter"></i></a>

                  <a href="http://pinterest.com/pin/create/button/?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fmagnifique-2-pieces-2-pices-3527-m%25c2%25b2-paris-18%2F&amp;media=https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-pinterest"></i></a>

                  <a href="http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fmagnifique-2-pieces-2-pices-3527-m%25c2%25b2-paris-18%2F&title=MAGNIFIQUE+2+PIECES+2+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+35%2C27+m%C2%B2+%26%238211%3B+PARIS+18&source=https%3A%2F%2Fparis-montmartre-immobilier.fr%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-linkedin"></i></a>

                  <a href="http://plus.google.com/share?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fmagnifique-2-pieces-2-pices-3527-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-google-plus"></i></a>
                  <a href="mailto:example.com?subject=J'ai trouvé une propriété intéressante pour vous&body=Bonjour, voici un coup de coeur, sur le site de l'agence PARIS MONTMARTRE TRANSACTIONSqui  pourrait vous intéresser: https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/"><i class="fa fa-envelope"></i></a>
</div>
<span title="" data-placement="right" data-toggle="tooltip" data-original-title="partager"><i class="fa fa-share-alt"></i></span>                            </li>
                                                        <li>
                                <span><span class="add_fav" data-placement="right" data-toggle="tooltip" data-original-title="Favoris" data-propid="88750"><i class="fa fa-heart-o"></i></span></span>
                            </li>
                                                                                                                <li class="lightbox-expand visible-xs compress">
                                <span><i class="fa fa-envelope"></i></span>
                            </li>
                                                                                        <li class="lightbox-close">
                                <span><i class="fa fa-close"></i></span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="gallery-area">
                    <div class="slider-placeholder">
                        <div class="loader-inner">

                            <span class="fa fa-spin fa-spinner"></span> Chargement Curseur ...
                        </div>
                    </div>
                                                            <div class="expand-icon lightbox-expand hidden-xs"></div>
                                                                <div class="gallery-inner">
                        <div class="lightbox-slide slide-animated">
                                                                                                <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150224/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150224/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150224/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150225/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150225/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150225/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150226/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150226/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150226/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150227/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150228/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150228/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150228/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                                    </div>
                    </div>
                    <div class="lightbox-slide-nav visible-xs">
                        <button class="lightbox-arrow-left lightbox-arrow"><i class="fa fa-angle-left"></i></button>
                        <p class="lightbox-nav-title">
                            MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                        </p>
                        <button class="lightbox-arrow-right lightbox-arrow"><i class="fa fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
                                                <div class="lightbox-right fade in">
                        <div class="lightbox-header hidden-xs">
                            <div class="header-title">
                                <p>449.000 €</p>
                            </div>
                            <div class="header-actions">
                                <ul class="actions">
                                    <li class="lightbox-close">
                                        <span><i class="fa fa-close"></i></span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="agent-area">
                            <div class="form-small">
                                    <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [MAGNIFIQUE 2 PIECES 2 pi&#xE8;ce(s) &#8211; 35,27 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                                   </div>
                        </div>
                    </div>
                                    </div>
    </div>
</div>    <!-- End Lightbox-->



<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>						</div>

                    </div>
                </div>
                
                <div class="col-md-3 col-sm-3">
                    <div class="row">
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://aivoni.com" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>
                        </div>
                    </div>
            </div>
        </div>

    </div><!-- End footer bottom -->

</footer>
<!--end footer section-->

<link rel='stylesheet' id='slider-pro.min-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/css/slider-pro.min.css,wp-content/themes/houzez/houzez/slider/css/slider-property-v3.css&#038;ver=1585558881' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-content/themes/houzez/houzez/js/infobox.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"48.891305","property_lng":"2.3529867","property_map":"false","property_map_street":"","is_singular_property":"yes","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"page.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"yes","paged":"0","search_result_page":"normal_page","search_keyword":"","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js,wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/js/jquery.sliderPro.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar -->
</body>
</html>

<!-- Dynamic page generated in 0.330 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:51:18 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:18 GMT
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m2-paris-18/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:19 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '29815'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=1ecfq4spubunct387jrfojo770; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://paris-montmartre-immobilier.fr/xmlrpc.php
      Link:
      - "<https://paris-montmartre-immobilier.fr/?p=88239>; rel=shortlink"
      - <https://paris-montmartre-immobilier.fr/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>RUE DAMREMONT . 2 pi&#xE8;ce(s) - 43 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="RUE DAMREMONT . 2 pi&#xE8;ce(s) - 43 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:description" content="EXCLUSIVITE PARIS 18 eme . RUE DAMREMONT &#xE0; 200 m&#xE8;tres METRO LAMARCK . Dans un tres bel immeuble HAUSSMANNIEN raval&#xE9; sur rue et cour. Au 2 &#xE8;me &#xE9;tage avec ascenseur SUR COUR ARBOREE . Appartement de 2 pi&#xE8;ces , il se compose d une entr&#xE9;e , d un salon , une chambre avec sa salle &hellip;" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="801" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:description" content="EXCLUSIVITE PARIS 18 eme . RUE DAMREMONT &#xE0; 200 m&#xE8;tres METRO LAMARCK . Dans un tres bel immeuble HAUSSMANNIEN raval&#xE9; sur rue et cour. Au 2 &#xE8;me &#xE9;tage avec ascenseur SUR COUR ARBOREE . Appartement de 2 pi&#xE8;ces , il se compose d une entr&#xE9;e , d un salon , une chambre avec sa salle [&hellip;]" />
<meta name="twitter:title" content="RUE DAMREMONT . 2 pi&#xE8;ce(s) - 43 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="DC.date.issued" content="2020-02-05T19:50:27+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//maps-api-ssl.google.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18 Flux des commentaires" href="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://maps-api-ssl.google.com/maps/api/js?libraries=places&#038;language=fr_FR&#038;key=AIzaSyCD95fZ9xxtKzUX3tZNxy7rtwRrX3c_dJw'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=88239' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Frue-damremont-2-pices-43-m%25c2%25b2-paris-18%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Frue-damremont-2-pices-43-m%25c2%25b2-paris-18%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="property-template-default single single-property postid-88239  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
		

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	
    <!--start detail top-->
     

<section class="detail-top detail-top-full v6 ">
    

        <div class="go-back">
            <div class="col-md-12">
                <a href="#" id="go-back-button" class="previous"><i class="fa fa-angle-left"></i>
<span> Retour à la liste de biens </span></a>    
	</div>
        </div>

        <div id="slider-property-v3" class="slider-pro">
        <div class="sp-slides" >
       

                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150651/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150651/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150651/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150651/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150651/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150651/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150653/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150653/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150653/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150653/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150653/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150653/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150654/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150654/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150654/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150654/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150654/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150654/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150655/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150655/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150655/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150655/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150655/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150655/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150656/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150656/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150656/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150656/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150656/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150656/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150657/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150657/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150657/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150657/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150657/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150657/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150658/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150658/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150658/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150658/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150658/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150658/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"/>

            </div>
                
    </div>

    </div>
    </section>

    <!--end detail top-->

    
    <!--start detail content-->
    <section class="section-detail-content ">
                        <div class="container">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 container-contentbar">
                            <div id="top-info-bar" class="detail-address detail-block">
    <div class="detail-address-inner">
            <span class="topbar">
                <i class="fa fa-map-marker" style="font-size:20px;margin-right:5px;"></i>
                <span>Lieu : </span> <span>PARIS 18</span></span>                                    <span class="topbar"><i class="fa fa-arrows-h" style="font-size:20px;margin-right:5px;"></i><span>Surface : </span><span>43 m²</span></span>            <span class="topbar"><i class="fa fa-key" style="font-size:20px;margin-right:5px;"></i><span>Référence : </span><span>02109</span></span>                        <span class="topbar"><span class="item-price">449.000 €</span></span>    </div>
</div>
                            <div class="detail-bar">

                                <div id="description" class="property-description detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Description </h2>
        <div class="title-right">
                    </div>
    </div>

    
    <p><span style="font-size: 13px; font-family: arial,sans,sans-serif; text-align: center;" data-sheets-value="&quot;}" data-sheets-userformat="" data-sheets-ischild=""></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;">EXCLUSIVITE PARIS 18 eme . RUE DAMREMONT &#xE0; 200 m&#xE8;tres METRO LAMARCK .  Dans un tres bel immeuble HAUSSMANNIEN  raval&#xE9; sur rue et cour. Au 2 &#xE8;me &#xE9;tage avec ascenseur SUR COUR ARBOREE .  Appartement de 2 pi&#xE8;ces , il se compose d une entr&#xE9;e , d un salon , une chambre avec sa salle deau  ,  une cuisine &#xE0; am&#xE9;nager , un wc s&#xE9;par&#xE9;.  CLAIR ET TRES  CALME . Avec le cachet de lancien PARQUET CHENE , moulures , chemin&#xE9;es. METRO ET COMMERCES &#xE0; 100 m&#xE8;tres<br />
AUCUN TRAVAUX de copropri&#xE9;t&#xE9; &#xE0; pr&#xE9;voir . DIGICODE et VISIOPHONE<br />
CONTACT DIRECT ET VISITES AVEC BORIS GARNODIER au 0624406519</span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span></p>

    </div>
<div id="address" class="detail-address detail-block target-block">
    <div class="detail-title">
      <h2 class="title-left">Localisation :</h2>
          </div>
    
        <div class="alert alert-info">
      <ul class="list-three-col">
          <li class="detail-city"><strong>Ville:</strong> PARIS 18</li><li class="detail-zip"><strong>Code Postal:</strong> 75018</li><li class="detail-country"><strong>Pays:</strong> France</li>      </ul>
    </div>
</div><div id="detail" class="detail-list detail-block target-block">
      <div class="detail-title">
        <h2 class="title-left">Informations Financières</h2>
              <div class="title-extra-info">Honoraires charge vendeur</div>
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Prix : </strong> <label>449.000 €</label></div></li><li><div class="aivoni-details"><label>Honoraires charge vendeur</label></div></li><li><div class="aivoni-details"><strong>&#xC0; propos de la copropri&#xE9;t&#xE9; : </strong> <label>La copropri&#xE9;t&#xE9; inclut 35 lots pour un montant moyen annuel de la quote part du budget pr&#xE9;visionnel des d&#xE9;penses courantes de 1487 &#x20AC;</label></div></li><li><div class="aivoni-details"><strong>Proc&#xE9;dure syndicat : </strong> <label>Non</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Surfaces</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Surface : </strong> <label>43 m²</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Récapitulatif</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Référence : </strong> <label>02109</label></div></li><li><div class="aivoni-details"><strong>Chauffage : </strong> <label>INDIVIDUEL - GAZ -</label></div></li><li><div class="aivoni-details"><strong>Pi&#xE8;ces : </strong> <label>2 pi&#xE8;ce(s)</label></div></li><li><div class="aivoni-details"><strong>Nombre d&#039;&#xE9;tages : </strong> <label>6</label></div></li><li><div class="aivoni-details"><strong>Etage : </strong> <label>2</label></div></li>        </ul>
      </div>
  </div>
 <div id="features" class="detail-features detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Les Plus</h2>
    </div>
    <ul class="list-three-col list-features">
        <li><a href="https://paris-montmartre-immobilier.fr/feature/ascenseur/"><i class="fa fa-check"></i>Ascenseur</a></li>    </ul>
</div>

<div id="graphic" class="detail-features detail-block target-block">
<div class="row">
    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Consommation Énergétique</h2>
        </div>
                <div class="DPE DPE-A DPE-VI"><span>VIERGE</span>
        </div>
    </div>


    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Émission de GES</h2>
        </div>
                <div class="DPE GES GES-A GES-VI"><span>VIERGE</span>
        </div>
    </div>

</div>
</div>



    <div id="agent_bottom" class="detail-contact detail-block target-block  ">
        <div class="detail-title">
            <h2 class="title-left">Informations de contact</h2>
                            <div class="title-right"><strong><a href="">Voir nos annonces</a></strong></div>
                    </div>

                <form method="post" action="#">
        
            <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="80" height="80"></a></div><div class="media-body"><dl><dt>Contact</dt><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><span><i class="fa fa-phone"></i>01 42 62 04 04</span></dd><dd></dd></dl></div></div>            <div class="detail-title-inner">
                                <h4 class="title-inner">Renseignez-vous sur cette propriété</h4>
                            </div>
                                        <input type="hidden" name="target_email" value="&#112;&#109;&#116;r&#97;&#110;sacti&#111;n&#115;&#50;&#64;&#103;m&#97;&#105;&#108;.com">
                        <input type="hidden" name="agent_contact_form_ajax"
                   value="2f5c66d2c4"/>
            <input type="hidden" name="property_permalink"
                   value="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/"/>
            <input type="hidden" name="property_title"
                   value="RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18"/>
            <input type="hidden" name="action" value="houzez_agent_send_message">

            <div class="row">
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="name"
                               placeholder="Nom" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="phone"
                               placeholder="Téléphone" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="email"
                               placeholder="E-mail " type="email">
                    </div>
                </div>
                <div class="col-sm-12 col-xs-12">
                    <div class="form-group">
                        <textarea class="form-control" name="message" rows="5" placeholder="Méssage">Bonjour, Je suis intéressé par [RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18]</textarea>
                    </div>
                    <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                    <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>
                            J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        
                    </div>
                </div>
            </div>
            <button class="agent_contact_form btn btn-secondary">Envoyer</button>
                                    <div class="form_messages"></div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </form>
    </div>

                                 
                                    <div id="bareme_prix" class="detail-features detail-block target-block">
                                        <a target="_blank" href="http://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/BaremedesPrestationsParisMontmartreTransactions.pdf">Nos barèmes de prix</a>
                                    </div>
                                

                                
                                
<div class="property-reviews detail-block">
    <div class="detail-title" data-score="0" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
        <h2 class="title-left">
            Aucun Commentaire            <span class="rating-wrap">
                <input class="rating-display-only" name="rating" value="0" type="number" min="0" max="5" step=1 data-size="md" class="rating" >
                <span class="star-text star-text-right">
                    (
                    <span itemprop="ratingValue">0</span> en dehors de                    <span itemprop="bestRating">5</span>
                    )
                </span>
            </span>
        </h2>
        <div class="title-right"><strong><a href="#writ-review-block"> Ecrire un commentaire </a></strong></div>
    </div>
    <ul class="reviews-list">
            </ul>
    <div id="writ-review-block" class="add-review-block">
        <h4 class="review-title"> Ecrire un commentaire </h4>
        <a href="#" data-toggle="modal" data-target="#pop-login">Connectez-vous pour commenter</a>    </div>
</div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
                            <aside id="sidebar" class="sidebar-white">
    
        <div class="widget widget-contact-agent  ">
            <div class="widget-body">
                <div class="form-small">
                        <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                       </div>
            </div>
        </div>

        
        <div id="houzez_properties-2" class="widget widget_houzez_properties"><div class="widget-top"><h3 class="widget-title">Dernières annonces</h3></div>
		

		<div class="widget-body">

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031030/VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-150x110.jpg" alt="VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">MAISON CONTEMPORAINE 11 pi&#xE8;ce(s) &#8211; 270,39 m² &#8211; MEUDON</a></h3>
						<h4><span class="item-price item-price-text">-</span></h4>
						<div class="amenities">
							<p>5 Ch • 1 Salle(s) de bain(s) • 270 m²</p>
							<p>MAISON CONTEMPORAINE</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 65 m² &#8211; PARIS 18</a></h3>
						<h4>2.185 €&#47;mois cc</h4>
						<div class="amenities">
							<p>1 Chambre • 65 m²</p>
							<p>APPARTEMENT BOURGEOIS</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">
								<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">ANGLE CAULAINCOURT / LAMARCK</a></h3>
						<h4>1.260.000 €</h4>
						<div class="amenities">
							<p></p>
							<p></p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">
								<img width="150" height="110" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg 150w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">RUE SAINT VINCENT</a></h3>
						<h4>1.420.000 €</h4>
						<div class="amenities">
							<p>104 </p>
							<p></p>
						</div>
					</div>
				</div>

						
		</div>


		</div><div id="houzez_featured_properties-5" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.195.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="9 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">750.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.420.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="14 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/duplex-jardin-privatif-5-pices-119-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150202/VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.990.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-3-pices-58-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150035/VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">665.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div><div id="houzez_mortgage_calculator-2" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez Vos Mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_property_taxonomies-3" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/status/biens-vendus/">BIENS VENDUS</a><span class="cat-count">(26)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/location/">LOCATION</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vendu/">VENDU</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vente/">VENTE</a><span class="cat-count">(17)</span></li></ul></div></div><div id="houzez_property_taxonomies-4" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type de bien</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div><div id="houzez_property_taxonomies-10" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Nos villes</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/city/meudon/">MEUDON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-04/">PARIS 04</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-05/">PARIS 05</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-17/">PARIS 17</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-18/">PARIS 18</a><span class="cat-count">(24)</span></li></ul></div></div></aside>                        </div>
                    </div>
                </div>
                    </section>
    <!--end detail content-->

    </div> <!--Start in header, end #section-body-->

    <!--start lightbox-->
    <div id="lightbox-popup-main" class="fade">
    <div class="lightbox-popup">
        <div class="popup-inner">
            <div class="lightbox-left">

                <div class="lightbox-header">
                    <div class="header-title">
                        <p>
                                                        <span>
                                <img src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/logo_7_0.png" alt="RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18" width="86" height="13">
                            </span>
                                                        <span class="hidden-xs">
                            RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                            </span>
                        </p>
                    </div>
                    <div class="header-actions">
                        <ul class="actions">
                            <li class="share-btn">
                                
<div class="share_tooltip tooltip_left fade">
    <a href="http://www.facebook.com/sharer.php?u=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Frue-damremont-2-pices-43-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-facebook"></i></a>
                  <a href="https://twitter.com/intent/tweet?text=RUE+DAMREMONT+.+2+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+43+m%C2%B2+%26%238211%3B+PARIS+18&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Frue-damremont-2-pices-43-m%25c2%25b2-paris-18%2F&via=PARIS+MONTMARTRE+TRANSACTIONS" onclick="if(!document.getElementById('td_social_networks_buttons')){window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;}"><i class="fa fa-twitter"></i></a>

                  <a href="http://pinterest.com/pin/create/button/?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Frue-damremont-2-pices-43-m%25c2%25b2-paris-18%2F&amp;media=https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-pinterest"></i></a>

                  <a href="http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Frue-damremont-2-pices-43-m%25c2%25b2-paris-18%2F&title=RUE+DAMREMONT+.+2+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+43+m%C2%B2+%26%238211%3B+PARIS+18&source=https%3A%2F%2Fparis-montmartre-immobilier.fr%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-linkedin"></i></a>

                  <a href="http://plus.google.com/share?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Frue-damremont-2-pices-43-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-google-plus"></i></a>
                  <a href="mailto:example.com?subject=J'ai trouvé une propriété intéressante pour vous&body=Bonjour, voici un coup de coeur, sur le site de l'agence PARIS MONTMARTRE TRANSACTIONSqui  pourrait vous intéresser: https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/"><i class="fa fa-envelope"></i></a>
</div>
<span title="" data-placement="right" data-toggle="tooltip" data-original-title="partager"><i class="fa fa-share-alt"></i></span>                            </li>
                                                        <li>
                                <span><span class="add_fav" data-placement="right" data-toggle="tooltip" data-original-title="Favoris" data-propid="88239"><i class="fa fa-heart-o"></i></span></span>
                            </li>
                                                                                                                <li class="lightbox-expand visible-xs compress">
                                <span><i class="fa fa-envelope"></i></span>
                            </li>
                                                                                        <li class="lightbox-close">
                                <span><i class="fa fa-close"></i></span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="gallery-area">
                    <div class="slider-placeholder">
                        <div class="loader-inner">

                            <span class="fa fa-spin fa-spinner"></span> Chargement Curseur ...
                        </div>
                    </div>
                                                            <div class="expand-icon lightbox-expand hidden-xs"></div>
                                                                <div class="gallery-inner">
                        <div class="lightbox-slide slide-animated">
                                                                                                <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150650/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150651/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150651/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150651/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150652/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150653/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150653/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150653/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150654/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150654/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150654/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150655/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150655/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150655/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150656/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150656/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150656/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150657/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150657/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150657/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150658/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150658/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150658/VENTE-02109-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                                    </div>
                    </div>
                    <div class="lightbox-slide-nav visible-xs">
                        <button class="lightbox-arrow-left lightbox-arrow"><i class="fa fa-angle-left"></i></button>
                        <p class="lightbox-nav-title">
                            RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                        </p>
                        <button class="lightbox-arrow-right lightbox-arrow"><i class="fa fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
                                                <div class="lightbox-right fade in">
                        <div class="lightbox-header hidden-xs">
                            <div class="header-title">
                                <p>449.000 €</p>
                            </div>
                            <div class="header-actions">
                                <ul class="actions">
                                    <li class="lightbox-close">
                                        <span><i class="fa fa-close"></i></span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="agent-area">
                            <div class="form-small">
                                    <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/rue-damremont-2-pices-43-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [RUE DAMREMONT . 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                                   </div>
                        </div>
                    </div>
                                    </div>
    </div>
</div>    <!-- End Lightbox-->



<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>						</div>

                    </div>
                </div>
                
                <div class="col-md-3 col-sm-3">
                    <div class="row">
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://aivoni.com" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>
                        </div>
                    </div>
            </div>
        </div>

    </div><!-- End footer bottom -->

</footer>
<!--end footer section-->

<link rel='stylesheet' id='slider-pro.min-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/css/slider-pro.min.css,wp-content/themes/houzez/houzez/slider/css/slider-property-v3.css&#038;ver=1585558881' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-content/themes/houzez/houzez/js/infobox.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"48.891305","property_lng":"2.3529867","property_map":"false","property_map_street":"","is_singular_property":"yes","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"page.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"yes","paged":"0","search_result_page":"normal_page","search_keyword":"","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js,wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/js/jquery.sliderPro.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar -->
</body>
</html>

<!-- Dynamic page generated in 0.317 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:51:19 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:19 GMT
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m2-paris-17/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:20 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '29724'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=4d4n670plpc4s2g12bss6e25a4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://paris-montmartre-immobilier.fr/xmlrpc.php
      Link:
      - "<https://paris-montmartre-immobilier.fr/?p=87791>; rel=shortlink"
      - <https://paris-montmartre-immobilier.fr/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>Beau 2 pieces 2 pi&#xE8;ce(s) - 43 m² - PARIS 17 - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Beau 2 pieces 2 pi&#xE8;ce(s) - 43 m² - PARIS 17 - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:description" content="PARIS 17 eme . Bld Pereire . Metro PORTE MAILLOT &#xE0; 300 m&#xE8;tres . Dans un bel immeuble ancien , au 5 &#xE8;me &#xE9;tage sans ascenseur . Tr&#xE8;s calme et lumineux . SUR COUR , Beau 2 pi&#xE8;ces de 43 m&#xB2; . Il offre un beau sejour avec cuisine ouverte ( total 25 m&#xB2; ) &hellip;" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="801" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:description" content="PARIS 17 eme . Bld Pereire . Metro PORTE MAILLOT &#xE0; 300 m&#xE8;tres . Dans un bel immeuble ancien , au 5 &#xE8;me &#xE9;tage sans ascenseur . Tr&#xE8;s calme et lumineux . SUR COUR , Beau 2 pi&#xE8;ces de 43 m&#xB2; . Il offre un beau sejour avec cuisine ouverte ( total 25 m&#xB2; ) [&hellip;]" />
<meta name="twitter:title" content="Beau 2 pieces 2 pi&#xE8;ce(s) - 43 m² - PARIS 17 - PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg" />
<meta property="DC.date.issued" content="2020-02-02T13:51:23+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//maps-api-ssl.google.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17 Flux des commentaires" href="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://maps-api-ssl.google.com/maps/api/js?libraries=places&#038;language=fr_FR&#038;key=AIzaSyCD95fZ9xxtKzUX3tZNxy7rtwRrX3c_dJw'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=87791' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fbeau-2-pieces-2-pices-43-m%25c2%25b2-paris-17%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fbeau-2-pieces-2-pices-43-m%25c2%25b2-paris-17%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="property-template-default single single-property postid-87791  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
		

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	
    <!--start detail top-->
     

<section class="detail-top detail-top-full v6 ">
    

        <div class="go-back">
            <div class="col-md-12">
                <a href="#" id="go-back-button" class="previous"><i class="fa fa-angle-left"></i>
<span> Retour à la liste de biens </span></a>    
	</div>
        </div>

        <div id="slider-property-v3" class="slider-pro">
        <div class="sp-slides" >
       

                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150630/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-1.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150630/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-1.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150630/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-1.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150630/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-1.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150630/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-1.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150630/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-1.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-2.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-2.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-2.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-2.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-2.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-2.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-3.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-3.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-3.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-3.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-3.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-3.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150633/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-4.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150633/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-4.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150633/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-4.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150633/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-4.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150633/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-4.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150633/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-4.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150634/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-5.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150634/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-5.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150634/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-5.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150634/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-5.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150634/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-5.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150634/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-5.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150636/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-6.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150636/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-6.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150636/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-6.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150636/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-6.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150636/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-6.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150636/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-6.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-7.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-7.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-7.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-7.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-7.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-7.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-8.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-8.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-8.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-8.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-8.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-8.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150638/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-9.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150638/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-9.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150638/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-9.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150638/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-9.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150638/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-9.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150638/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-9.jpg"/>

            </div>
                
    </div>

    </div>
    </section>

    <!--end detail top-->

    
    <!--start detail content-->
    <section class="section-detail-content ">
                        <div class="container">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 container-contentbar">
                            <div id="top-info-bar" class="detail-address detail-block">
    <div class="detail-address-inner">
            <span class="topbar">
                <i class="fa fa-map-marker" style="font-size:20px;margin-right:5px;"></i>
                <span>Lieu : </span> <span>PARIS 17</span></span>                        <span class="topbar"><i class="fa fa-hotel" style="font-size:20px;margin-right:5px;"></i><span>Chambres : </span><span>1</span></span>            <span class="topbar"><i class="fa fa-arrows-h" style="font-size:20px;margin-right:5px;"></i><span>Surface : </span><span>43 m²</span></span>            <span class="topbar"><i class="fa fa-key" style="font-size:20px;margin-right:5px;"></i><span>Référence : </span><span>02104</span></span>                        <span class="topbar"><span class="item-price">525.000 €</span></span>    </div>
</div>
                            <div class="detail-bar">

                                <div id="description" class="property-description detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Description </h2>
        <div class="title-right">
                    </div>
    </div>

    
    <p><span style="font-size: 13px; font-family: arial,sans,sans-serif; text-align: center;" data-sheets-value="&quot;}" data-sheets-userformat="" data-sheets-ischild=""></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;">PARIS 17 eme .  Bld Pereire . Metro  PORTE MAILLOT &#xE0; 300 m&#xE8;tres . Dans un bel immeuble ancien , au 5 &#xE8;me &#xE9;tage sans ascenseur . Tr&#xE8;s calme et lumineux . SUR COUR , Beau 2 pi&#xE8;ces de 43 m&#xB2; . Il offre un beau sejour avec cuisine ouverte ( total 25 m&#xB2; )<br />
Wc  s&#xE9;pare. Une chambre avec sa salle deau . Tres bon &#xE9;tat .<br />
Une cave.<br />
CONTACT DIRECT ET VISITES AVEC BORIS GARNODIER au 0624406519</span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span></p>

    </div>
<div id="address" class="detail-address detail-block target-block">
    <div class="detail-title">
      <h2 class="title-left">Localisation :</h2>
          </div>
    
        <div class="alert alert-info">
      <ul class="list-three-col">
          <li class="detail-city"><strong>Ville:</strong> PARIS 17</li><li class="detail-zip"><strong>Code Postal:</strong> 75017</li><li class="detail-country"><strong>Pays:</strong> France</li>      </ul>
    </div>
</div><div id="detail" class="detail-list detail-block target-block">
      <div class="detail-title">
        <h2 class="title-left">Informations Financières</h2>
              <div class="title-extra-info">Honoraires TTC inclus &#xE0; la charge de l'acqu&#xE9;reur: 5% du prix du bien hors honoraires (Prix du bien hors honoraires: 500000&#x20AC; )</div>
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Prix : </strong> <label>525.000 €</label></div></li><li><div class="aivoni-details"><label>Honoraires TTC inclus &#xE0; la charge de l'acqu&#xE9;reur: 5% du prix du bien hors honoraires (Prix du bien hors honoraires: 500000&#x20AC; )</label></div></li><li><div class="aivoni-details"><strong>Proc&#xE9;dure syndicat : </strong> <label>Non</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Surfaces</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Surface : </strong> <label>43 m²</label></div></li><li><div class="aivoni-details"><strong>Surface S&#xE9;jour : </strong> <label>25 m²</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Récapitulatif</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Référence : </strong> <label>02104</label></div></li><li><div class="aivoni-details"><strong>Chambres : </strong> <label>1</label></div></li><li><div class="aivoni-details"><strong>Année de construction : </strong> <label>1902</label></div></li><li><div class="aivoni-details"><strong>Cuisine : </strong> <label>us equipee</label></div></li><li><div class="aivoni-details"><strong>Chauffage : </strong> <label>INDIVIDUEL - ELECTRICITE -</label></div></li><li><div class="aivoni-details"><strong>Pi&#xE8;ces : </strong> <label>2 pi&#xE8;ce(s)</label></div></li><li><div class="aivoni-details"><strong>Nombre d&#039;&#xE9;tages : </strong> <label>6</label></div></li><li><div class="aivoni-details"><strong>Etage : </strong> <label>5</label></div></li>        </ul>
      </div>
  </div>
 <div id="features" class="detail-features detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Les Plus</h2>
    </div>
    <ul class="list-three-col list-features">
        <li><i class="fa fa-check"></i>Cave(s)</li>    </ul>
</div>

<div id="graphic" class="detail-features detail-block target-block">
<div class="row">
    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Consommation Énergétique</h2>
        </div>
                <div class="DPE DPE-A DPE-VI"><span>VIERGE</span>
        </div>
    </div>


    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Émission de GES</h2>
        </div>
                <div class="DPE GES GES-A GES-VI"><span>VIERGE</span>
        </div>
    </div>

</div>
</div>



    <div id="agent_bottom" class="detail-contact detail-block target-block  ">
        <div class="detail-title">
            <h2 class="title-left">Informations de contact</h2>
                            <div class="title-right"><strong><a href="">Voir nos annonces</a></strong></div>
                    </div>

                <form method="post" action="#">
        
            <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="80" height="80"></a></div><div class="media-body"><dl><dt>Contact</dt><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><span><i class="fa fa-phone"></i>01 42 62 04 04</span></dd><dd></dd></dl></div></div>            <div class="detail-title-inner">
                                <h4 class="title-inner">Renseignez-vous sur cette propriété</h4>
                            </div>
                                        <input type="hidden" name="target_email" value="&#112;&#109;&#116;r&#97;&#110;&#115;ac&#116;i&#111;n&#115;&#50;&#64;&#103;&#109;ai&#108;&#46;&#99;o&#109;">
                        <input type="hidden" name="agent_contact_form_ajax"
                   value="2f5c66d2c4"/>
            <input type="hidden" name="property_permalink"
                   value="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/"/>
            <input type="hidden" name="property_title"
                   value="Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17"/>
            <input type="hidden" name="action" value="houzez_agent_send_message">

            <div class="row">
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="name"
                               placeholder="Nom" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="phone"
                               placeholder="Téléphone" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="email"
                               placeholder="E-mail " type="email">
                    </div>
                </div>
                <div class="col-sm-12 col-xs-12">
                    <div class="form-group">
                        <textarea class="form-control" name="message" rows="5" placeholder="Méssage">Bonjour, Je suis intéressé par [Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17]</textarea>
                    </div>
                    <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                    <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>
                            J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        
                    </div>
                </div>
            </div>
            <button class="agent_contact_form btn btn-secondary">Envoyer</button>
                                    <div class="form_messages"></div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </form>
    </div>

                                 
                                    <div id="bareme_prix" class="detail-features detail-block target-block">
                                        <a target="_blank" href="http://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/BaremedesPrestationsParisMontmartreTransactions.pdf">Nos barèmes de prix</a>
                                    </div>
                                

                                
                                
<div class="property-reviews detail-block">
    <div class="detail-title" data-score="0" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
        <h2 class="title-left">
            Aucun Commentaire            <span class="rating-wrap">
                <input class="rating-display-only" name="rating" value="0" type="number" min="0" max="5" step=1 data-size="md" class="rating" >
                <span class="star-text star-text-right">
                    (
                    <span itemprop="ratingValue">0</span> en dehors de                    <span itemprop="bestRating">5</span>
                    )
                </span>
            </span>
        </h2>
        <div class="title-right"><strong><a href="#writ-review-block"> Ecrire un commentaire </a></strong></div>
    </div>
    <ul class="reviews-list">
            </ul>
    <div id="writ-review-block" class="add-review-block">
        <h4 class="review-title"> Ecrire un commentaire </h4>
        <a href="#" data-toggle="modal" data-target="#pop-login">Connectez-vous pour commenter</a>    </div>
</div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
                            <aside id="sidebar" class="sidebar-white">
    
        <div class="widget widget-contact-agent  ">
            <div class="widget-body">
                <div class="form-small">
                        <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/"/>
                <input type="hidden" name="property_title" value="Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                       </div>
            </div>
        </div>

        
        <div id="houzez_properties-2" class="widget widget_houzez_properties"><div class="widget-top"><h3 class="widget-title">Dernières annonces</h3></div>
		

		<div class="widget-body">

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031030/VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-150x110.jpg" alt="VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">MAISON CONTEMPORAINE 11 pi&#xE8;ce(s) &#8211; 270,39 m² &#8211; MEUDON</a></h3>
						<h4><span class="item-price item-price-text">-</span></h4>
						<div class="amenities">
							<p>5 Ch • 1 Salle(s) de bain(s) • 270 m²</p>
							<p>MAISON CONTEMPORAINE</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 65 m² &#8211; PARIS 18</a></h3>
						<h4>2.185 €&#47;mois cc</h4>
						<div class="amenities">
							<p>1 Chambre • 65 m²</p>
							<p>APPARTEMENT BOURGEOIS</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">
								<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">ANGLE CAULAINCOURT / LAMARCK</a></h3>
						<h4>1.260.000 €</h4>
						<div class="amenities">
							<p></p>
							<p></p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">
								<img width="150" height="110" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg 150w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">RUE SAINT VINCENT</a></h3>
						<h4>1.420.000 €</h4>
						<div class="amenities">
							<p>104 </p>
							<p></p>
						</div>
					</div>
				</div>

						
		</div>


		</div><div id="houzez_featured_properties-5" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.195.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="9 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">750.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.420.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="14 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/duplex-jardin-privatif-5-pices-119-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150202/VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.990.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-3-pices-58-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150035/VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">665.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div><div id="houzez_mortgage_calculator-2" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez Vos Mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_property_taxonomies-3" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/status/biens-vendus/">BIENS VENDUS</a><span class="cat-count">(26)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/location/">LOCATION</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vendu/">VENDU</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vente/">VENTE</a><span class="cat-count">(17)</span></li></ul></div></div><div id="houzez_property_taxonomies-4" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type de bien</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div><div id="houzez_property_taxonomies-10" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Nos villes</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/city/meudon/">MEUDON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-04/">PARIS 04</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-05/">PARIS 05</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-17/">PARIS 17</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-18/">PARIS 18</a><span class="cat-count">(24)</span></li></ul></div></div></aside>                        </div>
                    </div>
                </div>
                    </section>
    <!--end detail content-->

    </div> <!--Start in header, end #section-body-->

    <!--start lightbox-->
    <div id="lightbox-popup-main" class="fade">
    <div class="lightbox-popup">
        <div class="popup-inner">
            <div class="lightbox-left">

                <div class="lightbox-header">
                    <div class="header-title">
                        <p>
                                                        <span>
                                <img src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/logo_7_0.png" alt="Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17" width="86" height="13">
                            </span>
                                                        <span class="hidden-xs">
                            Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17                            - 75017, PARIS 17, France                            </span>
                        </p>
                    </div>
                    <div class="header-actions">
                        <ul class="actions">
                            <li class="share-btn">
                                
<div class="share_tooltip tooltip_left fade">
    <a href="http://www.facebook.com/sharer.php?u=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fbeau-2-pieces-2-pices-43-m%25c2%25b2-paris-17%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-facebook"></i></a>
                  <a href="https://twitter.com/intent/tweet?text=Beau+2++pieces+2+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+43+m%C2%B2+%26%238211%3B+PARIS+17&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fbeau-2-pieces-2-pices-43-m%25c2%25b2-paris-17%2F&via=PARIS+MONTMARTRE+TRANSACTIONS" onclick="if(!document.getElementById('td_social_networks_buttons')){window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;}"><i class="fa fa-twitter"></i></a>

                  <a href="http://pinterest.com/pin/create/button/?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fbeau-2-pieces-2-pices-43-m%25c2%25b2-paris-17%2F&amp;media=https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-pinterest"></i></a>

                  <a href="http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fbeau-2-pieces-2-pices-43-m%25c2%25b2-paris-17%2F&title=Beau+2++pieces+2+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+43+m%C2%B2+%26%238211%3B+PARIS+17&source=https%3A%2F%2Fparis-montmartre-immobilier.fr%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-linkedin"></i></a>

                  <a href="http://plus.google.com/share?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fbeau-2-pieces-2-pices-43-m%25c2%25b2-paris-17%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-google-plus"></i></a>
                  <a href="mailto:example.com?subject=J'ai trouvé une propriété intéressante pour vous&body=Bonjour, voici un coup de coeur, sur le site de l'agence PARIS MONTMARTRE TRANSACTIONSqui  pourrait vous intéresser: https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/"><i class="fa fa-envelope"></i></a>
</div>
<span title="" data-placement="right" data-toggle="tooltip" data-original-title="partager"><i class="fa fa-share-alt"></i></span>                            </li>
                                                        <li>
                                <span><span class="add_fav" data-placement="right" data-toggle="tooltip" data-original-title="Favoris" data-propid="87791"><i class="fa fa-heart-o"></i></span></span>
                            </li>
                                                                                                                <li class="lightbox-expand visible-xs compress">
                                <span><i class="fa fa-envelope"></i></span>
                            </li>
                                                                                        <li class="lightbox-close">
                                <span><i class="fa fa-close"></i></span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="gallery-area">
                    <div class="slider-placeholder">
                        <div class="loader-inner">

                            <span class="fa fa-spin fa-spinner"></span> Chargement Curseur ...
                        </div>
                    </div>
                                                            <div class="expand-icon lightbox-expand hidden-xs"></div>
                                                                <div class="gallery-inner">
                        <div class="lightbox-slide slide-animated">
                                                                                                <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150629/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150630/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-1.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150630/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-1.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150630/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-1-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-2.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-2.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-2-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-3.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-3.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150632/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-3-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150633/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-4.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150633/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-4.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150633/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-4-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150634/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-5.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150634/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-5.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150634/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-5-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150636/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-6.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150636/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-6.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150636/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-6-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-7.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-7.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-7-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-8.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-8.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150637/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-8-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="801" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150638/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-9.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150638/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-9.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150638/VENTE-02104-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-17-photo-9-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                                    </div>
                    </div>
                    <div class="lightbox-slide-nav visible-xs">
                        <button class="lightbox-arrow-left lightbox-arrow"><i class="fa fa-angle-left"></i></button>
                        <p class="lightbox-nav-title">
                            Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17                            - 75017, PARIS 17, France                        </p>
                        <button class="lightbox-arrow-right lightbox-arrow"><i class="fa fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
                                                <div class="lightbox-right fade in">
                        <div class="lightbox-header hidden-xs">
                            <div class="header-title">
                                <p>525.000 €</p>
                            </div>
                            <div class="header-actions">
                                <ul class="actions">
                                    <li class="lightbox-close">
                                        <span><i class="fa fa-close"></i></span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="agent-area">
                            <div class="form-small">
                                    <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/beau-2-pieces-2-pices-43-m%c2%b2-paris-17/"/>
                <input type="hidden" name="property_title" value="Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [Beau 2  pieces 2 pi&#xE8;ce(s) &#8211; 43 m² &#8211; PARIS 17]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                                   </div>
                        </div>
                    </div>
                                    </div>
    </div>
</div>    <!-- End Lightbox-->



<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>						</div>

                    </div>
                </div>
                
                <div class="col-md-3 col-sm-3">
                    <div class="row">
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://aivoni.com" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>
                        </div>
                    </div>
            </div>
        </div>

    </div><!-- End footer bottom -->

</footer>
<!--end footer section-->

<link rel='stylesheet' id='slider-pro.min-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/css/slider-pro.min.css,wp-content/themes/houzez/houzez/slider/css/slider-property-v3.css&#038;ver=1585558881' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-content/themes/houzez/houzez/js/infobox.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"48.891986","property_lng":"2.319287","property_map":"false","property_map_street":"","is_singular_property":"yes","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"page.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"yes","paged":"0","search_result_page":"normal_page","search_keyword":"","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js,wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/js/jquery.sliderPro.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar -->
</body>
</html>

<!-- Dynamic page generated in 0.413 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:51:20 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:20 GMT
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m2-paris-04/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:21 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '29826'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=v7f57q36o96hagkvs6sd333c14; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://paris-montmartre-immobilier.fr/xmlrpc.php
      Link:
      - "<https://paris-montmartre-immobilier.fr/?p=86617>; rel=shortlink"
      - <https://paris-montmartre-immobilier.fr/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>SUCCESSION 5 pi&#xE8;ce(s) - 107,17 m² - PARIS 04 - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="SUCCESSION 5 pi&#xE8;ce(s) - 107,17 m² - PARIS 04 - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:description" content="SOUS OFFRE DACHAT EXCLUSIVITE SUCCESSION rue QUINCAMPOIX Dans bel immeuble pierre de taille au 2 &#xE8;me &#xE9;tage avec Ascenseur, tr&#xE8;s bel appartement familial de 107 m2 habitable ( 104 m2 carrez). Traversant, lumineux, belle distribution, possibilit&#xE9; 2 ou 3 chambres. Pr&#xE9;voir travaux de rafraichissement Emplacement rare Une cave vient compl&#xE9;ter ce bien CONTACT DIRECT ET &hellip;" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="798" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:description" content="SOUS OFFRE DACHAT EXCLUSIVITE SUCCESSION rue QUINCAMPOIX Dans bel immeuble pierre de taille au 2 &#xE8;me &#xE9;tage avec Ascenseur, tr&#xE8;s bel appartement familial de 107 m2 habitable ( 104 m2 carrez). Traversant, lumineux, belle distribution, possibilit&#xE9; 2 ou 3 chambres. Pr&#xE9;voir travaux de rafraichissement Emplacement rare Une cave vient compl&#xE9;ter ce bien CONTACT DIRECT ET [&hellip;]" />
<meta name="twitter:title" content="SUCCESSION 5 pi&#xE8;ce(s) - 107,17 m² - PARIS 04 - PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg" />
<meta property="DC.date.issued" content="2020-01-14T15:11:10+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//maps-api-ssl.google.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04 Flux des commentaires" href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://maps-api-ssl.google.com/maps/api/js?libraries=places&#038;language=fr_FR&#038;key=AIzaSyCD95fZ9xxtKzUX3tZNxy7rtwRrX3c_dJw'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=86617' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fsuccession-5-pices-10717-m%25c2%25b2-paris-04%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fsuccession-5-pices-10717-m%25c2%25b2-paris-04%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="property-template-default single single-property postid-86617  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/property/succession-5-pices-10717-m%c2%b2-paris-04/" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
		

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	
    <!--start detail top-->
     

<section class="detail-top detail-top-full v6 ">
    

        <div class="go-back">
            <div class="col-md-12">
                <a href="#" id="go-back-button" class="previous"><i class="fa fa-angle-left"></i>
<span> Retour à la liste de biens </span></a>    
	</div>
        </div>

        <div id="slider-property-v3" class="slider-pro">
        <div class="sp-slides" >
       

                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150642/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-1.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150642/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-1.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150642/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-1.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150642/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-1.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150642/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-1.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150642/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-1.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150643/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-2.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150643/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-2.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150643/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-2.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150643/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-2.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150643/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-2.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150643/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-2.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-3.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-3.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-3.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-3.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-3.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-3.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-4.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-4.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-4.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-4.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-4.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-4.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150645/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-5.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150645/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-5.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150645/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-5.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150645/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-5.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150645/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-5.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150645/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-5.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150646/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-6.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150646/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-6.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150646/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-6.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150646/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-6.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150646/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-6.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150646/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-6.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-7.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-7.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-7.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-7.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-7.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-7.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-8.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-8.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-8.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-8.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-8.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-8.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150648/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-9.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150648/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-9.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150648/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-9.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150648/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-9.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150648/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-9.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150648/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-9.jpg"/>

            </div>
                
    </div>

    </div>
    </section>

    <!--end detail top-->

    
    <!--start detail content-->
    <section class="section-detail-content ">
                        <div class="container">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 container-contentbar">
                            <div id="top-info-bar" class="detail-address detail-block">
    <div class="detail-address-inner">
            <span class="topbar">
                <i class="fa fa-map-marker" style="font-size:20px;margin-right:5px;"></i>
                <span>Lieu : </span> <span>PARIS 04</span></span>                        <span class="topbar"><i class="fa fa-hotel" style="font-size:20px;margin-right:5px;"></i><span>Chambres : </span><span>2</span></span>            <span class="topbar"><i class="fa fa-arrows-h" style="font-size:20px;margin-right:5px;"></i><span>Surface : </span><span>107 m²</span></span>            <span class="topbar"><i class="fa fa-key" style="font-size:20px;margin-right:5px;"></i><span>Référence : </span><span>02097</span></span>                        <span class="topbar"><span class="item-price">1.195.000 €</span></span>    </div>
</div>
                            <div class="detail-bar">

                                <div id="description" class="property-description detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Description </h2>
        <div class="title-right">
                <span class="animated slideInDown label-featured label label-success">Exclusivité</span>
        </div>
    </div>

    
    <p><span style="font-size: 13px; font-family: arial,sans,sans-serif; text-align: center;" data-sheets-value="&quot;}" data-sheets-userformat="" data-sheets-ischild=""></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;">SOUS OFFRE DACHAT<br />
EXCLUSIVITE SUCCESSION rue QUINCAMPOIX<br />
Dans bel immeuble pierre de taille au 2 &#xE8;me &#xE9;tage avec Ascenseur, tr&#xE8;s bel appartement familial de 107 m2 habitable ( 104 m2 carrez).<br />
Traversant, lumineux, belle distribution, possibilit&#xE9; 2 ou 3 chambres.<br />
Pr&#xE9;voir travaux de rafraichissement<br />
Emplacement rare<br />
Une cave vient compl&#xE9;ter ce bien<br />
CONTACT DIRECT ET VISITES AVEC BORIS GARNODIER AU 0624406519</span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span></p>

    </div>
<div id="address" class="detail-address detail-block target-block">
    <div class="detail-title">
      <h2 class="title-left">Localisation :</h2>
            <div class="title-right">
        <a target="_blank" href="http://maps.google.com/?q=75004,%20PARIS%2004,%20France">Ouvrir avec Google Maps <i class="fa fa-map-marker"></i></a>
      </div>
          </div>
    
    <div><address class="property-address">75004, PARIS 04, France</address></div>    <div class="alert alert-info">
      <ul class="list-three-col">
          <li class="detail-city"><strong>Ville:</strong> PARIS 04</li><li class="detail-zip"><strong>Code Postal:</strong> 75004</li><li class="detail-country"><strong>Pays:</strong> France</li>      </ul>
    </div>
</div><div id="detail" class="detail-list detail-block target-block">
      <div class="detail-title">
        <h2 class="title-left">Informations Financières</h2>
              <div class="title-extra-info">Honoraires charge vendeur</div>
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Prix : </strong> <label>1.195.000 €</label></div></li><li><div class="aivoni-details"><label>Honoraires charge vendeur</label></div></li><li><div class="aivoni-details"><strong>&#xC0; propos de la copropri&#xE9;t&#xE9; : </strong> <label>La copropri&#xE9;t&#xE9; inclut 22 lots pour un montant moyen annuel de la quote part du budget pr&#xE9;visionnel des d&#xE9;penses courantes de 2837 &#x20AC;</label></div></li><li><div class="aivoni-details"><strong>Proc&#xE9;dure syndicat : </strong> <label>Non</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Surfaces</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Surface : </strong> <label>107 m²</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Récapitulatif</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Référence : </strong> <label>02097</label></div></li><li><div class="aivoni-details"><strong>Chambres : </strong> <label>2</label></div></li><li><div class="aivoni-details"><strong>Salle(s) de Bain(s) : </strong> <label>2</label></div></li><li><div class="aivoni-details"><strong>Cuisine : </strong> <label>AMENAGEE</label></div></li><li><div class="aivoni-details"><strong>Chauffage : </strong> <label>INDIVIDUEL - ELECTRICITE -</label></div></li><li><div class="aivoni-details"><strong>Cave(s) : </strong> <label>2</label></div></li><li><div class="aivoni-details"><strong>Pi&#xE8;ces : </strong> <label>5 pi&#xE8;ce(s)</label></div></li><li><div class="aivoni-details"><strong>Etage : </strong> <label>2</label></div></li>        </ul>
      </div>
  </div>
 <div id="features" class="detail-features detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Les Plus</h2>
    </div>
    <ul class="list-three-col list-features">
        <li><a href="https://paris-montmartre-immobilier.fr/feature/ascenseur/"><i class="fa fa-check"></i>Ascenseur</a></li>    </ul>
</div>

<div id="graphic" class="detail-features detail-block target-block">
<div class="row">
    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Consommation Énergétique</h2>
        </div>
                    <h5>DPE : D (229 kWh/m² an)</h5>
                <div class="DPE DPE-D"><span>229</span>
        </div>
    </div>


    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Émission de GES</h2>
        </div>
                    <h5>GES : B (9 kg/m² an)</h5>
                <div class="DPE GES GES-B"><span>9</span>
        </div>
    </div>

</div>
</div>



    <div id="agent_bottom" class="detail-contact detail-block target-block  ">
        <div class="detail-title">
            <h2 class="title-left">Informations de contact</h2>
                            <div class="title-right"><strong><a href="">Voir nos annonces</a></strong></div>
                    </div>

                <form method="post" action="#">
        
            <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="80" height="80"></a></div><div class="media-body"><dl><dt>Contact</dt><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><span><i class="fa fa-phone"></i>01 42 62 04 04</span></dd><dd></dd></dl></div></div>            <div class="detail-title-inner">
                                <h4 class="title-inner">Renseignez-vous sur cette propriété</h4>
                            </div>
                                        <input type="hidden" name="target_email" value="pm&#116;&#114;&#97;&#110;&#115;&#97;&#99;&#116;&#105;ons2&#64;&#103;&#109;&#97;il&#46;&#99;om">
                        <input type="hidden" name="agent_contact_form_ajax"
                   value="2f5c66d2c4"/>
            <input type="hidden" name="property_permalink"
                   value="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/"/>
            <input type="hidden" name="property_title"
                   value="SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04"/>
            <input type="hidden" name="action" value="houzez_agent_send_message">

            <div class="row">
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="name"
                               placeholder="Nom" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="phone"
                               placeholder="Téléphone" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="email"
                               placeholder="E-mail " type="email">
                    </div>
                </div>
                <div class="col-sm-12 col-xs-12">
                    <div class="form-group">
                        <textarea class="form-control" name="message" rows="5" placeholder="Méssage">Bonjour, Je suis intéressé par [SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04]</textarea>
                    </div>
                    <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                    <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>
                            J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        
                    </div>
                </div>
            </div>
            <button class="agent_contact_form btn btn-secondary">Envoyer</button>
                                    <div class="form_messages"></div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </form>
    </div>

                                 
                                    <div id="bareme_prix" class="detail-features detail-block target-block">
                                        <a target="_blank" href="http://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/BaremedesPrestationsParisMontmartreTransactions.pdf">Nos barèmes de prix</a>
                                    </div>
                                

                                
                                
<div class="property-reviews detail-block">
    <div class="detail-title" data-score="0" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
        <h2 class="title-left">
            Aucun Commentaire            <span class="rating-wrap">
                <input class="rating-display-only" name="rating" value="0" type="number" min="0" max="5" step=1 data-size="md" class="rating" >
                <span class="star-text star-text-right">
                    (
                    <span itemprop="ratingValue">0</span> en dehors de                    <span itemprop="bestRating">5</span>
                    )
                </span>
            </span>
        </h2>
        <div class="title-right"><strong><a href="#writ-review-block"> Ecrire un commentaire </a></strong></div>
    </div>
    <ul class="reviews-list">
            </ul>
    <div id="writ-review-block" class="add-review-block">
        <h4 class="review-title"> Ecrire un commentaire </h4>
        <a href="#" data-toggle="modal" data-target="#pop-login">Connectez-vous pour commenter</a>    </div>
</div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
                            <aside id="sidebar" class="sidebar-white">
    
        <div class="widget widget-contact-agent  ">
            <div class="widget-body">
                <div class="form-small">
                        <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/"/>
                <input type="hidden" name="property_title" value="SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                       </div>
            </div>
        </div>

        
        <div id="houzez_properties-2" class="widget widget_houzez_properties"><div class="widget-top"><h3 class="widget-title">Dernières annonces</h3></div>
		

		<div class="widget-body">

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031030/VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-150x110.jpg" alt="VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">MAISON CONTEMPORAINE 11 pi&#xE8;ce(s) &#8211; 270,39 m² &#8211; MEUDON</a></h3>
						<h4><span class="item-price item-price-text">-</span></h4>
						<div class="amenities">
							<p>5 Ch • 1 Salle(s) de bain(s) • 270 m²</p>
							<p>MAISON CONTEMPORAINE</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 65 m² &#8211; PARIS 18</a></h3>
						<h4>2.185 €&#47;mois cc</h4>
						<div class="amenities">
							<p>1 Chambre • 65 m²</p>
							<p>APPARTEMENT BOURGEOIS</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">
								<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">ANGLE CAULAINCOURT / LAMARCK</a></h3>
						<h4>1.260.000 €</h4>
						<div class="amenities">
							<p></p>
							<p></p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">
								<img width="150" height="110" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg 150w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">RUE SAINT VINCENT</a></h3>
						<h4>1.420.000 €</h4>
						<div class="amenities">
							<p>104 </p>
							<p></p>
						</div>
					</div>
				</div>

						
		</div>


		</div><div id="houzez_featured_properties-5" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.195.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="9 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">750.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.420.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="14 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/duplex-jardin-privatif-5-pices-119-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150202/VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.990.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-3-pices-58-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150035/VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">665.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div><div id="houzez_mortgage_calculator-2" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez Vos Mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_property_taxonomies-3" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/status/biens-vendus/">BIENS VENDUS</a><span class="cat-count">(26)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/location/">LOCATION</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vendu/">VENDU</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vente/">VENTE</a><span class="cat-count">(17)</span></li></ul></div></div><div id="houzez_property_taxonomies-4" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type de bien</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div><div id="houzez_property_taxonomies-10" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Nos villes</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/city/meudon/">MEUDON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-04/">PARIS 04</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-05/">PARIS 05</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-17/">PARIS 17</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-18/">PARIS 18</a><span class="cat-count">(24)</span></li></ul></div></div></aside>                        </div>
                    </div>
                </div>
                    </section>
    <!--end detail content-->

    </div> <!--Start in header, end #section-body-->

    <!--start lightbox-->
    <div id="lightbox-popup-main" class="fade">
    <div class="lightbox-popup">
        <div class="popup-inner">
            <div class="lightbox-left">

                <div class="lightbox-header">
                    <div class="header-title">
                        <p>
                                                        <span>
                                <img src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/logo_7_0.png" alt="SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04" width="86" height="13">
                            </span>
                                                        <span class="hidden-xs">
                            SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04                            - 75004, PARIS 04, France                            </span>
                        </p>
                    </div>
                    <div class="header-actions">
                        <ul class="actions">
                            <li class="share-btn">
                                
<div class="share_tooltip tooltip_left fade">
    <a href="http://www.facebook.com/sharer.php?u=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fsuccession-5-pices-10717-m%25c2%25b2-paris-04%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-facebook"></i></a>
                  <a href="https://twitter.com/intent/tweet?text=SUCCESSION+5+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+107%2C17+m%C2%B2+%26%238211%3B+PARIS+04&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fsuccession-5-pices-10717-m%25c2%25b2-paris-04%2F&via=PARIS+MONTMARTRE+TRANSACTIONS" onclick="if(!document.getElementById('td_social_networks_buttons')){window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;}"><i class="fa fa-twitter"></i></a>

                  <a href="http://pinterest.com/pin/create/button/?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fsuccession-5-pices-10717-m%25c2%25b2-paris-04%2F&amp;media=https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-pinterest"></i></a>

                  <a href="http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fsuccession-5-pices-10717-m%25c2%25b2-paris-04%2F&title=SUCCESSION+5+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+107%2C17+m%C2%B2+%26%238211%3B+PARIS+04&source=https%3A%2F%2Fparis-montmartre-immobilier.fr%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-linkedin"></i></a>

                  <a href="http://plus.google.com/share?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fsuccession-5-pices-10717-m%25c2%25b2-paris-04%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-google-plus"></i></a>
                  <a href="mailto:example.com?subject=J'ai trouvé une propriété intéressante pour vous&body=Bonjour, voici un coup de coeur, sur le site de l'agence PARIS MONTMARTRE TRANSACTIONSqui  pourrait vous intéresser: https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/"><i class="fa fa-envelope"></i></a>
</div>
<span title="" data-placement="right" data-toggle="tooltip" data-original-title="partager"><i class="fa fa-share-alt"></i></span>                            </li>
                                                        <li>
                                <span><span class="add_fav" data-placement="right" data-toggle="tooltip" data-original-title="Favoris" data-propid="86617"><i class="fa fa-heart-o"></i></span></span>
                            </li>
                                                                                                                <li class="lightbox-expand visible-xs compress">
                                <span><i class="fa fa-envelope"></i></span>
                            </li>
                                                                                        <li class="lightbox-close">
                                <span><i class="fa fa-close"></i></span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="gallery-area">
                    <div class="slider-placeholder">
                        <div class="loader-inner">

                            <span class="fa fa-spin fa-spinner"></span> Chargement Curseur ...
                        </div>
                    </div>
                                                            <div class="expand-icon lightbox-expand hidden-xs"></div>
                                                                <div class="gallery-inner">
                        <div class="lightbox-slide slide-animated">
                                                                                                <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150642/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-1.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150643/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-2.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150643/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-2.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150643/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-2-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-3.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150644/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-4.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150645/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-5.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150646/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-6.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-7.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150647/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-8.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="849" height="1200" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150648/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-9.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                                    </div>
                    </div>
                    <div class="lightbox-slide-nav visible-xs">
                        <button class="lightbox-arrow-left lightbox-arrow"><i class="fa fa-angle-left"></i></button>
                        <p class="lightbox-nav-title">
                            SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04                            - 75004, PARIS 04, France                        </p>
                        <button class="lightbox-arrow-right lightbox-arrow"><i class="fa fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
                                                <div class="lightbox-right fade in">
                        <div class="lightbox-header hidden-xs">
                            <div class="header-title">
                                <p>1.195.000 €</p>
                            </div>
                            <div class="header-actions">
                                <ul class="actions">
                                    <li class="lightbox-close">
                                        <span><i class="fa fa-close"></i></span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="agent-area">
                            <div class="form-small">
                                    <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/"/>
                <input type="hidden" name="property_title" value="SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [SUCCESSION 5 pi&#xE8;ce(s) &#8211; 107,17 m² &#8211; PARIS 04]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                                   </div>
                        </div>
                    </div>
                                    </div>
    </div>
</div>    <!-- End Lightbox-->



<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>						</div>

                    </div>
                </div>
                
                <div class="col-md-3 col-sm-3">
                    <div class="row">
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://aivoni.com" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>
                        </div>
                    </div>
            </div>
        </div>

    </div><!-- End footer bottom -->

</footer>
<!--end footer section-->

<link rel='stylesheet' id='slider-pro.min-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/css/slider-pro.min.css,wp-content/themes/houzez/houzez/slider/css/slider-property-v3.css&#038;ver=1585558881' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-content/themes/houzez/houzez/js/infobox.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"48.857797","property_lng":"2.3500143","property_map":"false","property_map_street":"","is_singular_property":"yes","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"page.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"yes","paged":"0","search_result_page":"normal_page","search_keyword":"","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js,wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/js/jquery.sliderPro.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar -->
</body>
</html>

<!-- Dynamic page generated in 0.382 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:51:21 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:21 GMT
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m2-paris-18/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:22 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '30639'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=eldls5rthkjmc8feh9mrudf7n0; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://paris-montmartre-immobilier.fr/xmlrpc.php
      Link:
      - "<https://paris-montmartre-immobilier.fr/?p=86506>; rel=shortlink"
      - <https://paris-montmartre-immobilier.fr/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) - 68 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) - 68 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:description" content="SOUS PROMESSE DE VENTE PAR NOTRE AGENCE . EXCLUSIVITE AU PIED DE LA RUE CUSTINE , BD BARBES Au 3 &#xE8;me &#xE9;tage ,Somptueux 3 Pi&#xE8;ces de 68m2 (67,01 m2 loi carrez) comprenant un magnifique s&#xE9;jour , BALCON , 2 chambres , une cuisine ind&#xE9;pendante enti&#xE8;rement am&#xE9;nag&#xE9;e, une salle de bains, un WC s&#xE9;par&#xE9; ainsi quune &hellip;" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="800" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:description" content="SOUS PROMESSE DE VENTE PAR NOTRE AGENCE . EXCLUSIVITE AU PIED DE LA RUE CUSTINE , BD BARBES Au 3 &#xE8;me &#xE9;tage ,Somptueux 3 Pi&#xE8;ces de 68m2 (67,01 m2 loi carrez) comprenant un magnifique s&#xE9;jour , BALCON , 2 chambres , une cuisine ind&#xE9;pendante enti&#xE8;rement am&#xE9;nag&#xE9;e, une salle de bains, un WC s&#xE9;par&#xE9; ainsi quune [&hellip;]" />
<meta name="twitter:title" content="APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) - 68 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="DC.date.issued" content="2019-12-09T15:05:17+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//maps-api-ssl.google.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18 Flux des commentaires" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://maps-api-ssl.google.com/maps/api/js?libraries=places&#038;language=fr_FR&#038;key=AIzaSyCD95fZ9xxtKzUX3tZNxy7rtwRrX3c_dJw'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=86506' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-3-pices-68-m%25c2%25b2-paris-18%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-3-pices-68-m%25c2%25b2-paris-18%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="property-template-default single single-property postid-86506  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
		

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	
    <!--start detail top-->
     

<section class="detail-top detail-top-full v6 ">
    

        <div class="go-back">
            <div class="col-md-12">
                <a href="#" id="go-back-button" class="previous"><i class="fa fa-angle-left"></i>
<span> Retour à la liste de biens </span></a>    
	</div>
        </div>

        <div id="slider-property-v3" class="slider-pro">
        <div class="sp-slides" >
       

                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150535/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150535/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150535/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150535/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150535/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150535/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150536/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150536/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150536/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150536/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150536/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150536/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150537/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150537/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150537/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150537/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150537/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150537/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150538/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150538/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150538/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150538/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150538/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150538/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150539/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150539/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150539/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150539/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150539/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150539/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150540/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150540/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150540/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150540/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150540/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150540/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150541/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150541/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150541/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150541/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150541/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150541/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150542/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150542/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150542/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150542/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150542/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150542/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"/>

            </div>
                
    </div>

    </div>
    </section>

    <!--end detail top-->

    
    <!--start detail content-->
    <section class="section-detail-content ">
                        <div class="container">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 container-contentbar">
                            <div id="top-info-bar" class="detail-address detail-block">
    <div class="detail-address-inner">
            <span class="topbar">
                <i class="fa fa-map-marker" style="font-size:20px;margin-right:5px;"></i>
                <span>Lieu : </span> <span>PARIS 18</span></span>                        <span class="topbar"><i class="fa fa-hotel" style="font-size:20px;margin-right:5px;"></i><span>Chambres : </span><span>2</span></span>            <span class="topbar"><i class="fa fa-arrows-h" style="font-size:20px;margin-right:5px;"></i><span>Surface : </span><span>68 m²</span></span>            <span class="topbar"><i class="fa fa-key" style="font-size:20px;margin-right:5px;"></i><span>Référence : </span><span>02099</span></span>                        <span class="topbar"><span class="item-price">750.000 €</span></span>    </div>
</div>
                            <div class="detail-bar">

                                <div id="description" class="property-description detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Description </h2>
        <div class="title-right">
                <span class="animated slideInDown label-featured label label-success">Exclusivité</span>
        </div>
    </div>

    
    <p><span style="font-size: 13px; font-family: arial,sans,sans-serif; text-align: center;" data-sheets-value="&quot;}" data-sheets-userformat="" data-sheets-ischild=""></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;">SOUS PROMESSE DE VENTE PAR NOTRE AGENCE .<br />
EXCLUSIVITE AU PIED DE LA RUE CUSTINE , BD BARBES<br />
Au 3 &#xE8;me &#xE9;tage ,Somptueux 3 Pi&#xE8;ces de 68m2 (67,01 m2 loi carrez) comprenant un magnifique s&#xE9;jour , BALCON , 2 chambres , une cuisine ind&#xE9;pendante enti&#xE8;rement am&#xE9;nag&#xE9;e, une salle de bains, un WC s&#xE9;par&#xE9; ainsi quune tr&#xE8;s grande cave Am&#xE9;nag&#xE9;e<br />
ENTIEREMENT refait &#xE0; neuf ,<br />
CONTACT DIRECT ET VISITES AVEC BORIS GARNODIER au 0624406519</span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span></p>

    </div>
<div id="address" class="detail-address detail-block target-block">
    <div class="detail-title">
      <h2 class="title-left">Localisation :</h2>
            <div class="title-right">
        <a target="_blank" href="http://maps.google.com/?q=75018,%20PARIS%2018,%20France">Ouvrir avec Google Maps <i class="fa fa-map-marker"></i></a>
      </div>
          </div>
    
    <div><address class="property-address">75018, PARIS 18, France</address></div>    <div class="alert alert-info">
      <ul class="list-three-col">
          <li class="detail-city"><strong>Ville:</strong> PARIS 18</li><li class="detail-zip"><strong>Code Postal:</strong> 75018</li><li class="detail-country"><strong>Pays:</strong> France</li>      </ul>
    </div>
</div><div id="detail" class="detail-list detail-block target-block">
      <div class="detail-title">
        <h2 class="title-left">Informations Financières</h2>
              <div class="title-extra-info">Honoraires charge vendeur</div>
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Prix : </strong> <label>750.000 €</label></div></li><li><div class="aivoni-details"><label>Honoraires charge vendeur</label></div></li><li><div class="aivoni-details"><strong>&#xC0; propos de la copropri&#xE9;t&#xE9; : </strong> <label>La copropri&#xE9;t&#xE9; inclut 13 lots pour un montant moyen annuel de la quote part du budget pr&#xE9;visionnel des d&#xE9;penses courantes de 1917 &#x20AC;</label></div></li><li><div class="aivoni-details"><strong>Proc&#xE9;dure syndicat : </strong> <label>Non</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Surfaces</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Surface : </strong> <label>68 m²</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Récapitulatif</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Référence : </strong> <label>02099</label></div></li><li><div class="aivoni-details"><strong>Chambres : </strong> <label>2</label></div></li><li><div class="aivoni-details"><strong>Salle(s) de Bain(s) : </strong> <label>1</label></div></li><li><div class="aivoni-details"><strong>Cuisine : </strong> <label>EQUIPEE</label></div></li><li><div class="aivoni-details"><strong>Chauffage : </strong> <label>INDIVIDUEL - GAZ -</label></div></li><li><div class="aivoni-details"><strong>Pi&#xE8;ces : </strong> <label>3 pi&#xE8;ce(s)</label></div></li><li><div class="aivoni-details"><strong>Etage : </strong> <label>3</label></div></li>        </ul>
      </div>
  </div>
 <div id="features" class="detail-features detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Les Plus</h2>
    </div>
    <ul class="list-three-col list-features">
        <li><i class="fa fa-check"></i>Balcon(s)</li><li><i class="fa fa-check"></i>Cave(s)</li>    </ul>
</div>

<div id="graphic" class="detail-features detail-block target-block">
<div class="row">
    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Consommation Énergétique</h2>
        </div>
                    <h5>DPE : D (224 kWh/m² an)</h5>
                <div class="DPE DPE-D"><span>224</span>
        </div>
    </div>


    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Émission de GES</h2>
        </div>
                    <h5>GES : E (52 kg/m² an)</h5>
                <div class="DPE GES GES-E"><span>52</span>
        </div>
    </div>

</div>
</div>



    <div id="agent_bottom" class="detail-contact detail-block target-block  ">
        <div class="detail-title">
            <h2 class="title-left">Informations de contact</h2>
                            <div class="title-right"><strong><a href="">Voir nos annonces</a></strong></div>
                    </div>

                <form method="post" action="#">
        
            <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="80" height="80"></a></div><div class="media-body"><dl><dt>Contact</dt><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><span><i class="fa fa-phone"></i>01 42 62 04 04</span></dd><dd></dd></dl></div></div>            <div class="detail-title-inner">
                                <h4 class="title-inner">Renseignez-vous sur cette propriété</h4>
                            </div>
                                        <input type="hidden" name="target_email" value="pm&#116;&#114;&#97;&#110;&#115;&#97;cti&#111;&#110;&#115;2&#64;&#103;mai&#108;.&#99;&#111;&#109;">
                        <input type="hidden" name="agent_contact_form_ajax"
                   value="2f5c66d2c4"/>
            <input type="hidden" name="property_permalink"
                   value="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/"/>
            <input type="hidden" name="property_title"
                   value="APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18"/>
            <input type="hidden" name="action" value="houzez_agent_send_message">

            <div class="row">
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="name"
                               placeholder="Nom" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="phone"
                               placeholder="Téléphone" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="email"
                               placeholder="E-mail " type="email">
                    </div>
                </div>
                <div class="col-sm-12 col-xs-12">
                    <div class="form-group">
                        <textarea class="form-control" name="message" rows="5" placeholder="Méssage">Bonjour, Je suis intéressé par [APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18]</textarea>
                    </div>
                    <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                    <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>
                            J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        
                    </div>
                </div>
            </div>
            <button class="agent_contact_form btn btn-secondary">Envoyer</button>
                                    <div class="form_messages"></div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </form>
    </div>

                                 
                                    <div id="bareme_prix" class="detail-features detail-block target-block">
                                        <a target="_blank" href="http://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/BaremedesPrestationsParisMontmartreTransactions.pdf">Nos barèmes de prix</a>
                                    </div>
                                

                                
		<div class="property-similer">
			<div class="detail-title">
				<h2 class="title-left">Biens Similaires</h2>
			</div>

				<div class="property-listing list-view">
						<div class="row">
<div id="ID-86382" class="animated fadeIn item-wrap infobox_trigger VENTE item-appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                        <span class="animated slideInDown label-featured label label-success">Exclusivité</span>

                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">1.420.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="86382"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(12) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-86382" class="compare-property" data-propid="86382" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18</a></h2><div class="hide-on-list"><span class="item-price">1.420.000 €</span></div><address class="property-address">75018, PARIS 18, France</address>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 104 m²</span><span class="ascenseur">Ascenseur</span></p>                    <p>APPARTEMENT BOURGEOIS</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02100</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">1.420.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 104 m²</span><span class="ascenseur">Ascenseur</span></p>                        <p>APPARTEMENT BOURGEOIS</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02100</p>
                </div>
        </div>
    
</div>
					</div>
				</div>
			<hr>
		</div>
		
                                
<div class="property-reviews detail-block">
    <div class="detail-title" data-score="0" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
        <h2 class="title-left">
            Aucun Commentaire            <span class="rating-wrap">
                <input class="rating-display-only" name="rating" value="0" type="number" min="0" max="5" step=1 data-size="md" class="rating" >
                <span class="star-text star-text-right">
                    (
                    <span itemprop="ratingValue">0</span> en dehors de                    <span itemprop="bestRating">5</span>
                    )
                </span>
            </span>
        </h2>
        <div class="title-right"><strong><a href="#writ-review-block"> Ecrire un commentaire </a></strong></div>
    </div>
    <ul class="reviews-list">
            </ul>
    <div id="writ-review-block" class="add-review-block">
        <h4 class="review-title"> Ecrire un commentaire </h4>
        <a href="#" data-toggle="modal" data-target="#pop-login">Connectez-vous pour commenter</a>    </div>
</div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
                            <aside id="sidebar" class="sidebar-white">
    
        <div class="widget widget-contact-agent  ">
            <div class="widget-body">
                <div class="form-small">
                        <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                       </div>
            </div>
        </div>

        
        <div id="houzez_properties-2" class="widget widget_houzez_properties"><div class="widget-top"><h3 class="widget-title">Dernières annonces</h3></div>
		

		<div class="widget-body">

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031030/VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-150x110.jpg" alt="VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">MAISON CONTEMPORAINE 11 pi&#xE8;ce(s) &#8211; 270,39 m² &#8211; MEUDON</a></h3>
						<h4><span class="item-price item-price-text">-</span></h4>
						<div class="amenities">
							<p>5 Ch • 1 Salle(s) de bain(s) • 270 m²</p>
							<p>MAISON CONTEMPORAINE</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 65 m² &#8211; PARIS 18</a></h3>
						<h4>2.185 €&#47;mois cc</h4>
						<div class="amenities">
							<p>1 Chambre • 65 m²</p>
							<p>APPARTEMENT BOURGEOIS</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">
								<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">ANGLE CAULAINCOURT / LAMARCK</a></h3>
						<h4>1.260.000 €</h4>
						<div class="amenities">
							<p></p>
							<p></p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">
								<img width="150" height="110" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg 150w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">RUE SAINT VINCENT</a></h3>
						<h4>1.420.000 €</h4>
						<div class="amenities">
							<p>104 </p>
							<p></p>
						</div>
					</div>
				</div>

						
		</div>


		</div><div id="houzez_featured_properties-5" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.195.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="9 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">750.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.420.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="14 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/duplex-jardin-privatif-5-pices-119-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150202/VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.990.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-3-pices-58-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150035/VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">665.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div><div id="houzez_mortgage_calculator-2" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez Vos Mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_property_taxonomies-3" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/status/biens-vendus/">BIENS VENDUS</a><span class="cat-count">(26)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/location/">LOCATION</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vendu/">VENDU</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vente/">VENTE</a><span class="cat-count">(17)</span></li></ul></div></div><div id="houzez_property_taxonomies-4" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type de bien</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div><div id="houzez_property_taxonomies-10" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Nos villes</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/city/meudon/">MEUDON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-04/">PARIS 04</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-05/">PARIS 05</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-17/">PARIS 17</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-18/">PARIS 18</a><span class="cat-count">(24)</span></li></ul></div></div></aside>                        </div>
                    </div>
                </div>
                    </section>
    <!--end detail content-->

    </div> <!--Start in header, end #section-body-->

    <!--start lightbox-->
    <div id="lightbox-popup-main" class="fade">
    <div class="lightbox-popup">
        <div class="popup-inner">
            <div class="lightbox-left">

                <div class="lightbox-header">
                    <div class="header-title">
                        <p>
                                                        <span>
                                <img src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/logo_7_0.png" alt="APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18" width="86" height="13">
                            </span>
                                                        <span class="hidden-xs">
                            APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                            </span>
                        </p>
                    </div>
                    <div class="header-actions">
                        <ul class="actions">
                            <li class="share-btn">
                                
<div class="share_tooltip tooltip_left fade">
    <a href="http://www.facebook.com/sharer.php?u=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-3-pices-68-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-facebook"></i></a>
                  <a href="https://twitter.com/intent/tweet?text=APPARTEMENT+BOURGEOIS+3+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+68+m%C2%B2+%26%238211%3B+PARIS+18&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-3-pices-68-m%25c2%25b2-paris-18%2F&via=PARIS+MONTMARTRE+TRANSACTIONS" onclick="if(!document.getElementById('td_social_networks_buttons')){window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;}"><i class="fa fa-twitter"></i></a>

                  <a href="http://pinterest.com/pin/create/button/?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-3-pices-68-m%25c2%25b2-paris-18%2F&amp;media=https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-pinterest"></i></a>

                  <a href="http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-3-pices-68-m%25c2%25b2-paris-18%2F&title=APPARTEMENT+BOURGEOIS+3+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+68+m%C2%B2+%26%238211%3B+PARIS+18&source=https%3A%2F%2Fparis-montmartre-immobilier.fr%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-linkedin"></i></a>

                  <a href="http://plus.google.com/share?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-3-pices-68-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-google-plus"></i></a>
                  <a href="mailto:example.com?subject=J'ai trouvé une propriété intéressante pour vous&body=Bonjour, voici un coup de coeur, sur le site de l'agence PARIS MONTMARTRE TRANSACTIONSqui  pourrait vous intéresser: https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/"><i class="fa fa-envelope"></i></a>
</div>
<span title="" data-placement="right" data-toggle="tooltip" data-original-title="partager"><i class="fa fa-share-alt"></i></span>                            </li>
                                                        <li>
                                <span><span class="add_fav" data-placement="right" data-toggle="tooltip" data-original-title="Favoris" data-propid="86506"><i class="fa fa-heart-o"></i></span></span>
                            </li>
                                                                                                                <li class="lightbox-expand visible-xs compress">
                                <span><i class="fa fa-envelope"></i></span>
                            </li>
                                                                                        <li class="lightbox-close">
                                <span><i class="fa fa-close"></i></span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="gallery-area">
                    <div class="slider-placeholder">
                        <div class="loader-inner">

                            <span class="fa fa-spin fa-spinner"></span> Chargement Curseur ...
                        </div>
                    </div>
                                                            <div class="expand-icon lightbox-expand hidden-xs"></div>
                                                                <div class="gallery-inner">
                        <div class="lightbox-slide slide-animated">
                                                                                                <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150535/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150535/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150535/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150536/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150536/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150536/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150537/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150537/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150537/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150538/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150538/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150538/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150539/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150539/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150539/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150540/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150540/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150540/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150541/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150541/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150541/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                    <div> <img width="1200" height="800" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150542/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150542/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg 1200w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150542/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8-385x258.jpg 385w" sizes="(max-width: 1200px) 100vw, 1200px" /> </div>
                                                                                    </div>
                    </div>
                    <div class="lightbox-slide-nav visible-xs">
                        <button class="lightbox-arrow-left lightbox-arrow"><i class="fa fa-angle-left"></i></button>
                        <p class="lightbox-nav-title">
                            APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                        </p>
                        <button class="lightbox-arrow-right lightbox-arrow"><i class="fa fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
                                                <div class="lightbox-right fade in">
                        <div class="lightbox-header hidden-xs">
                            <div class="header-title">
                                <p>750.000 €</p>
                            </div>
                            <div class="header-actions">
                                <ul class="actions">
                                    <li class="lightbox-close">
                                        <span><i class="fa fa-close"></i></span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="agent-area">
                            <div class="form-small">
                                    <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                                   </div>
                        </div>
                    </div>
                                    </div>
    </div>
</div>    <!-- End Lightbox-->



<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>						</div>

                    </div>
                </div>
                
                <div class="col-md-3 col-sm-3">
                    <div class="row">
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://aivoni.com" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>
                        </div>
                    </div>
            </div>
        </div>

    </div><!-- End footer bottom -->

</footer>
<!--end footer section-->

<link rel='stylesheet' id='slider-pro.min-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/css/slider-pro.min.css,wp-content/themes/houzez/houzez/slider/css/slider-property-v3.css&#038;ver=1585558881' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-content/themes/houzez/houzez/js/infobox.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"48.891305","property_lng":"2.3529867","property_map":"false","property_map_street":"","is_singular_property":"yes","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"page.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"yes","paged":"0","search_result_page":"normal_page","search_keyword":"","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js,wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/js/jquery.sliderPro.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar -->
</body>
</html>

<!-- Dynamic page generated in 0.351 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:51:22 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:22 GMT
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m2-paris-18/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:23 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '30008'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=omkqko9gllhcls7cu0klk5kpk4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://paris-montmartre-immobilier.fr/xmlrpc.php
      Link:
      - "<https://paris-montmartre-immobilier.fr/?p=86437>; rel=shortlink"
      - <https://paris-montmartre-immobilier.fr/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) - 80 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) - 80 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:description" content="PARIS 18 eme . LAMARCK CAULAINCOURT. RARE CET ATELIER d ARTISTE de 80 m&#xB2; avec 65 m&#xB2; de TERRASSE JARDIN . BEAUX VOLUMES , 40 m&#xB2; de sejour avec 5.16 m de hauteur SOUS PLAFOND. En Duplex , il offre une chambre avec sa salle de bains &#xE0; l&#xE9;tage , WC s&#xE9;par&#xE9; , cuisine am&#xE9;nag&#xE9;e &hellip;" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="798" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:description" content="PARIS 18 eme . LAMARCK CAULAINCOURT. RARE CET ATELIER d ARTISTE de 80 m&#xB2; avec 65 m&#xB2; de TERRASSE JARDIN . BEAUX VOLUMES , 40 m&#xB2; de sejour avec 5.16 m de hauteur SOUS PLAFOND. En Duplex , il offre une chambre avec sa salle de bains &#xE0; l&#xE9;tage , WC s&#xE9;par&#xE9; , cuisine am&#xE9;nag&#xE9;e [&hellip;]" />
<meta name="twitter:title" content="ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) - 80 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="DC.date.issued" content="2019-11-21T15:05:15+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//maps-api-ssl.google.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18 Flux des commentaires" href="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://maps-api-ssl.google.com/maps/api/js?libraries=places&#038;language=fr_FR&#038;key=AIzaSyCD95fZ9xxtKzUX3tZNxy7rtwRrX3c_dJw'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=86437' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fatelier-artiste-jardin-2-pices-80-m%25c2%25b2-paris-18%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fatelier-artiste-jardin-2-pices-80-m%25c2%25b2-paris-18%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="property-template-default single single-property postid-86437  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
		

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	
    <!--start detail top-->
     

<section class="detail-top detail-top-full v6 ">
    

        <div class="go-back">
            <div class="col-md-12">
                <a href="#" id="go-back-button" class="previous"><i class="fa fa-angle-left"></i>
<span> Retour à la liste de biens </span></a>    
	</div>
        </div>

        <div id="slider-property-v3" class="slider-pro">
        <div class="sp-slides" >
       

                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150615/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150615/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150615/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150615/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150615/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150615/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150617/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150617/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150617/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150617/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150617/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150617/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150618/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150618/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150618/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150618/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150618/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150618/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150619/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150619/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150619/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150619/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150619/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150619/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150625/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-12.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150625/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-12.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150625/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-12.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150625/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-12.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150625/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-12.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150625/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-12.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150621/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150621/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150621/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150621/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150621/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150621/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150622/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150622/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150622/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150622/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150622/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150622/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150623/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150623/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150623/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150623/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150623/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150623/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150624/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150624/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150624/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150624/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150624/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150624/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150620/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150620/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150620/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150620/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150620/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150620/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150626/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-13.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150626/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-13.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150626/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-13.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150626/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-13.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150626/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-13.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150626/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-13.jpg"/>

            </div>
                
    </div>

    </div>
    </section>

    <!--end detail top-->

    
    <!--start detail content-->
    <section class="section-detail-content ">
                        <div class="container">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 container-contentbar">
                            <div id="top-info-bar" class="detail-address detail-block">
    <div class="detail-address-inner">
            <span class="topbar">
                <i class="fa fa-map-marker" style="font-size:20px;margin-right:5px;"></i>
                <span>Lieu : </span> <span>PARIS 18</span></span>                        <span class="topbar"><i class="fa fa-hotel" style="font-size:20px;margin-right:5px;"></i><span>Chambres : </span><span>1</span></span>            <span class="topbar"><i class="fa fa-arrows-h" style="font-size:20px;margin-right:5px;"></i><span>Surface : </span><span>80 m²</span></span>            <span class="topbar"><i class="fa fa-key" style="font-size:20px;margin-right:5px;"></i><span>Référence : </span><span>02102</span></span>                        <span class="topbar"><span class="item-price">975.000 €</span></span>    </div>
</div>
                            <div class="detail-bar">

                                <div id="description" class="property-description detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Description </h2>
        <div class="title-right">
                    </div>
    </div>

    
    <p><span style="font-size: 13px; font-family: arial,sans,sans-serif; text-align: center;" data-sheets-value="&quot;}" data-sheets-userformat="" data-sheets-ischild=""></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;">PARIS 18 eme . LAMARCK CAULAINCOURT.<br />
RARE CET ATELIER d  ARTISTE de 80 m&#xB2; avec 65 m&#xB2; de TERRASSE JARDIN .<br />
BEAUX VOLUMES , 40 m&#xB2; de sejour avec 5.16 m de hauteur SOUS PLAFOND.<br />
En Duplex , il offre une chambre avec sa salle de bains &#xE0; l&#xE9;tage , WC s&#xE9;par&#xE9; ,  cuisine am&#xE9;nag&#xE9;e .  TERRASSE de  30 m&#xB2; , suivi dun jardin de 35 m&#xB2; . Appartement atypique &#xE0; rafraichir. Tres belle copropri&#xE9;t&#xE9; de 1992 . RAVALEE sur rue et cour en 2019 .<br />
Possibilit&#xE9; dacqu&#xE9;rir un parking en sous sol en sus<br />
CONTACT DIRECT  ET VISITES AVEC BORIS GARNODIER 0624406519</span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span></p>

    </div>
<div id="address" class="detail-address detail-block target-block">
    <div class="detail-title">
      <h2 class="title-left">Localisation :</h2>
          </div>
    
        <div class="alert alert-info">
      <ul class="list-three-col">
          <li class="detail-city"><strong>Ville:</strong> PARIS 18</li><li class="detail-zip"><strong>Code Postal:</strong> 75018</li><li class="detail-country"><strong>Pays:</strong> France</li>      </ul>
    </div>
</div><div id="detail" class="detail-list detail-block target-block">
      <div class="detail-title">
        <h2 class="title-left">Informations Financières</h2>
              <div class="title-extra-info">Honoraires charge vendeur</div>
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Prix : </strong> <label>975.000 €</label></div></li><li><div class="aivoni-details"><label>Honoraires charge vendeur</label></div></li><li><div class="aivoni-details"><strong>&#xC0; propos de la copropri&#xE9;t&#xE9; : </strong> <label>La copropri&#xE9;t&#xE9; inclut 28 lots pour un montant moyen annuel de la quote part du budget pr&#xE9;visionnel des d&#xE9;penses courantes de 2032 &#x20AC;</label></div></li><li><div class="aivoni-details"><strong>Proc&#xE9;dure syndicat : </strong> <label>Non</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Surfaces</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Surface : </strong> <label>80 m²</label></div></li><li><div class="aivoni-details"><strong>Surface Jardin : </strong> <label>65 m²</label></div></li><li><div class="aivoni-details"><strong>Surface S&#xE9;jour : </strong> <label>40 m²</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Récapitulatif</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Référence : </strong> <label>02102</label></div></li><li><div class="aivoni-details"><strong>Chambres : </strong> <label>1</label></div></li><li><div class="aivoni-details"><strong>Salle(s) de Bain(s) : </strong> <label>1</label></div></li><li><div class="aivoni-details"><strong>Année de construction : </strong> <label>1991</label></div></li><li><div class="aivoni-details"><strong>Cuisine : </strong> <label>AMENAGEE</label></div></li><li><div class="aivoni-details"><strong>Chauffage : </strong> <label>INDIVIDUEL - ELECTRICITE -</label></div></li><li><div class="aivoni-details"><strong>Cave(s) : </strong> <label>2</label></div></li><li><div class="aivoni-details"><strong>Pi&#xE8;ces : </strong> <label>2 pi&#xE8;ce(s)</label></div></li>        </ul>
      </div>
  </div>
 <div id="features" class="detail-features detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Les Plus</h2>
    </div>
    <ul class="list-three-col list-features">
        <li><a href="https://paris-montmartre-immobilier.fr/feature/ascenseur/"><i class="fa fa-check"></i>Ascenseur</a></li><li><i class="fa fa-check"></i>Terrasse(s)</li>    </ul>
</div>

<div id="graphic" class="detail-features detail-block target-block">
<div class="row">
    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Consommation Énergétique</h2>
        </div>
                    <h5>DPE : E (260 kWh/m² an)</h5>
                <div class="DPE DPE-E"><span>260</span>
        </div>
    </div>


    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Émission de GES</h2>
        </div>
                    <h5>GES : C (13 kg/m² an)</h5>
                <div class="DPE GES GES-C"><span>13</span>
        </div>
    </div>

</div>
</div>



    <div id="agent_bottom" class="detail-contact detail-block target-block  ">
        <div class="detail-title">
            <h2 class="title-left">Informations de contact</h2>
                            <div class="title-right"><strong><a href="">Voir nos annonces</a></strong></div>
                    </div>

                <form method="post" action="#">
        
            <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="80" height="80"></a></div><div class="media-body"><dl><dt>Contact</dt><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><span><i class="fa fa-phone"></i>01 42 62 04 04</span></dd><dd></dd></dl></div></div>            <div class="detail-title-inner">
                                <h4 class="title-inner">Renseignez-vous sur cette propriété</h4>
                            </div>
                                        <input type="hidden" name="target_email" value="&#112;mt&#114;&#97;&#110;&#115;a&#99;&#116;i&#111;&#110;&#115;&#50;&#64;gm&#97;i&#108;&#46;&#99;o&#109;">
                        <input type="hidden" name="agent_contact_form_ajax"
                   value="2f5c66d2c4"/>
            <input type="hidden" name="property_permalink"
                   value="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/"/>
            <input type="hidden" name="property_title"
                   value="ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18"/>
            <input type="hidden" name="action" value="houzez_agent_send_message">

            <div class="row">
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="name"
                               placeholder="Nom" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="phone"
                               placeholder="Téléphone" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="email"
                               placeholder="E-mail " type="email">
                    </div>
                </div>
                <div class="col-sm-12 col-xs-12">
                    <div class="form-group">
                        <textarea class="form-control" name="message" rows="5" placeholder="Méssage">Bonjour, Je suis intéressé par [ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18]</textarea>
                    </div>
                    <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                    <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>
                            J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        
                    </div>
                </div>
            </div>
            <button class="agent_contact_form btn btn-secondary">Envoyer</button>
                                    <div class="form_messages"></div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </form>
    </div>

                                 
                                    <div id="bareme_prix" class="detail-features detail-block target-block">
                                        <a target="_blank" href="http://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/BaremedesPrestationsParisMontmartreTransactions.pdf">Nos barèmes de prix</a>
                                    </div>
                                

                                
                                
<div class="property-reviews detail-block">
    <div class="detail-title" data-score="0" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
        <h2 class="title-left">
            Aucun Commentaire            <span class="rating-wrap">
                <input class="rating-display-only" name="rating" value="0" type="number" min="0" max="5" step=1 data-size="md" class="rating" >
                <span class="star-text star-text-right">
                    (
                    <span itemprop="ratingValue">0</span> en dehors de                    <span itemprop="bestRating">5</span>
                    )
                </span>
            </span>
        </h2>
        <div class="title-right"><strong><a href="#writ-review-block"> Ecrire un commentaire </a></strong></div>
    </div>
    <ul class="reviews-list">
            </ul>
    <div id="writ-review-block" class="add-review-block">
        <h4 class="review-title"> Ecrire un commentaire </h4>
        <a href="#" data-toggle="modal" data-target="#pop-login">Connectez-vous pour commenter</a>    </div>
</div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
                            <aside id="sidebar" class="sidebar-white">
    
        <div class="widget widget-contact-agent  ">
            <div class="widget-body">
                <div class="form-small">
                        <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                       </div>
            </div>
        </div>

        
        <div id="houzez_properties-2" class="widget widget_houzez_properties"><div class="widget-top"><h3 class="widget-title">Dernières annonces</h3></div>
		

		<div class="widget-body">

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031030/VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-150x110.jpg" alt="VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">MAISON CONTEMPORAINE 11 pi&#xE8;ce(s) &#8211; 270,39 m² &#8211; MEUDON</a></h3>
						<h4><span class="item-price item-price-text">-</span></h4>
						<div class="amenities">
							<p>5 Ch • 1 Salle(s) de bain(s) • 270 m²</p>
							<p>MAISON CONTEMPORAINE</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 65 m² &#8211; PARIS 18</a></h3>
						<h4>2.185 €&#47;mois cc</h4>
						<div class="amenities">
							<p>1 Chambre • 65 m²</p>
							<p>APPARTEMENT BOURGEOIS</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">
								<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">ANGLE CAULAINCOURT / LAMARCK</a></h3>
						<h4>1.260.000 €</h4>
						<div class="amenities">
							<p></p>
							<p></p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">
								<img width="150" height="110" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg 150w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">RUE SAINT VINCENT</a></h3>
						<h4>1.420.000 €</h4>
						<div class="amenities">
							<p>104 </p>
							<p></p>
						</div>
					</div>
				</div>

						
		</div>


		</div><div id="houzez_featured_properties-5" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.195.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="9 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">750.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.420.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="14 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/duplex-jardin-privatif-5-pices-119-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150202/VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.990.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-3-pices-58-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150035/VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">665.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div><div id="houzez_mortgage_calculator-2" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez Vos Mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_property_taxonomies-3" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/status/biens-vendus/">BIENS VENDUS</a><span class="cat-count">(26)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/location/">LOCATION</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vendu/">VENDU</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vente/">VENTE</a><span class="cat-count">(17)</span></li></ul></div></div><div id="houzez_property_taxonomies-4" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type de bien</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div><div id="houzez_property_taxonomies-10" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Nos villes</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/city/meudon/">MEUDON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-04/">PARIS 04</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-05/">PARIS 05</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-17/">PARIS 17</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-18/">PARIS 18</a><span class="cat-count">(24)</span></li></ul></div></div></aside>                        </div>
                    </div>
                </div>
                    </section>
    <!--end detail content-->

    </div> <!--Start in header, end #section-body-->

    <!--start lightbox-->
    <div id="lightbox-popup-main" class="fade">
    <div class="lightbox-popup">
        <div class="popup-inner">
            <div class="lightbox-left">

                <div class="lightbox-header">
                    <div class="header-title">
                        <p>
                                                        <span>
                                <img src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/logo_7_0.png" alt="ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18" width="86" height="13">
                            </span>
                                                        <span class="hidden-xs">
                            ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                            </span>
                        </p>
                    </div>
                    <div class="header-actions">
                        <ul class="actions">
                            <li class="share-btn">
                                
<div class="share_tooltip tooltip_left fade">
    <a href="http://www.facebook.com/sharer.php?u=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fatelier-artiste-jardin-2-pices-80-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-facebook"></i></a>
                  <a href="https://twitter.com/intent/tweet?text=ATELIER+ARTISTE+%2B+JARDIN+2+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+80+m%C2%B2+%26%238211%3B+PARIS+18&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fatelier-artiste-jardin-2-pices-80-m%25c2%25b2-paris-18%2F&via=PARIS+MONTMARTRE+TRANSACTIONS" onclick="if(!document.getElementById('td_social_networks_buttons')){window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;}"><i class="fa fa-twitter"></i></a>

                  <a href="http://pinterest.com/pin/create/button/?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fatelier-artiste-jardin-2-pices-80-m%25c2%25b2-paris-18%2F&amp;media=https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-pinterest"></i></a>

                  <a href="http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fatelier-artiste-jardin-2-pices-80-m%25c2%25b2-paris-18%2F&title=ATELIER+ARTISTE+%2B+JARDIN+2+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+80+m%C2%B2+%26%238211%3B+PARIS+18&source=https%3A%2F%2Fparis-montmartre-immobilier.fr%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-linkedin"></i></a>

                  <a href="http://plus.google.com/share?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fatelier-artiste-jardin-2-pices-80-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-google-plus"></i></a>
                  <a href="mailto:example.com?subject=J'ai trouvé une propriété intéressante pour vous&body=Bonjour, voici un coup de coeur, sur le site de l'agence PARIS MONTMARTRE TRANSACTIONSqui  pourrait vous intéresser: https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/"><i class="fa fa-envelope"></i></a>
</div>
<span title="" data-placement="right" data-toggle="tooltip" data-original-title="partager"><i class="fa fa-share-alt"></i></span>                            </li>
                                                        <li>
                                <span><span class="add_fav" data-placement="right" data-toggle="tooltip" data-original-title="Favoris" data-propid="86437"><i class="fa fa-heart-o"></i></span></span>
                            </li>
                                                                                                                <li class="lightbox-expand visible-xs compress">
                                <span><i class="fa fa-envelope"></i></span>
                            </li>
                                                                                        <li class="lightbox-close">
                                <span><i class="fa fa-close"></i></span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="gallery-area">
                    <div class="slider-placeholder">
                        <div class="loader-inner">

                            <span class="fa fa-spin fa-spinner"></span> Chargement Curseur ...
                        </div>
                    </div>
                                                            <div class="expand-icon lightbox-expand hidden-xs"></div>
                                                                <div class="gallery-inner">
                        <div class="lightbox-slide slide-animated">
                                                                                                <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150613/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150615/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150616/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150617/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150618/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150619/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150625/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-12.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150621/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150622/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150623/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150624/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150620/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="798" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150626/VENTE-02102-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-13.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                                    </div>
                    </div>
                    <div class="lightbox-slide-nav visible-xs">
                        <button class="lightbox-arrow-left lightbox-arrow"><i class="fa fa-angle-left"></i></button>
                        <p class="lightbox-nav-title">
                            ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                        </p>
                        <button class="lightbox-arrow-right lightbox-arrow"><i class="fa fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
                                                <div class="lightbox-right fade in">
                        <div class="lightbox-header hidden-xs">
                            <div class="header-title">
                                <p>975.000 €</p>
                            </div>
                            <div class="header-actions">
                                <ul class="actions">
                                    <li class="lightbox-close">
                                        <span><i class="fa fa-close"></i></span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="agent-area">
                            <div class="form-small">
                                    <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/atelier-artiste-jardin-2-pices-80-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [ATELIER ARTISTE + JARDIN 2 pi&#xE8;ce(s) &#8211; 80 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                                   </div>
                        </div>
                    </div>
                                    </div>
    </div>
</div>    <!-- End Lightbox-->



<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>						</div>

                    </div>
                </div>
                
                <div class="col-md-3 col-sm-3">
                    <div class="row">
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://aivoni.com" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>
                        </div>
                    </div>
            </div>
        </div>

    </div><!-- End footer bottom -->

</footer>
<!--end footer section-->

<link rel='stylesheet' id='slider-pro.min-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/css/slider-pro.min.css,wp-content/themes/houzez/houzez/slider/css/slider-property-v3.css&#038;ver=1585558881' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-content/themes/houzez/houzez/js/infobox.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"48.891305","property_lng":"2.3529867","property_map":"false","property_map_street":"","is_singular_property":"yes","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"page.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"yes","paged":"0","search_result_page":"normal_page","search_keyword":"","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js,wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/js/jquery.sliderPro.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar -->
</body>
</html>

<!-- Dynamic page generated in 0.422 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:51:23 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:23 GMT
- request:
    method: get
    uri: https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m2-paris-18/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 01 Apr 2020 17:51:24 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '30683'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=kegjl5f4nlco12f2uqbp893774; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://paris-montmartre-immobilier.fr/xmlrpc.php
      Link:
      - "<https://paris-montmartre-immobilier.fr/?p=86382>; rel=shortlink"
      - <https://paris-montmartre-immobilier.fr/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="https://paris-montmartre-immobilier.fr/xmlrpc.php">

  	<title>APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) - 104,1 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS</title>
<style type='text/css'>#wp-admin-bar-wp-logo{display:none;}#wp-admin-bar-_legacyoptions{display:none;}</style>                        <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Roboto:400,500']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                                                <script>
                            /* You can add more configuration options to webfontloader by previously defining the WebFontConfig with your options */
                            if ( typeof WebFontConfig === "undefined" ) {
                                WebFontConfig = new Object();
                            }
                            WebFontConfig['google'] = {families: ['Montserrat:400,700&amp;subset=latin']};

                            (function() {
                                var wf = document.createElement( 'script' );
                                wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.5.3/webfont.js';
                                wf.type = 'text/javascript';
                                wf.async = 'true';
                                var s = document.getElementsByTagName( 'script' )[0];
                                s.parentNode.insertBefore( wf, s );
                            })();
                        </script>
                        

<link rel="canonical" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" />
<meta property="og:locale" content="fr_FR" />
<meta property="og:type" content="article" />
<meta property="og:title" content="APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) - 104,1 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:description" content="SOUS PROMESSE DE VENTE PAR NOTRE AGENCE . EXCLUSIVITE , Rue Saint Vincent au pied des Vignes. Magnifique appartement de 104,10 m2 loi carrez dans immeuble pierre de taille , 3 &#xE8;me &#xE9;tage avec ascenseur et gardien Entr&#xE9;e, double s&#xE9;jour, cuisine ind&#xE9;pendante am&#xE9;nag&#xE9;e, 2 chambres, 1 salle de bains &#xE0; rafraichir, 1 salle de douche, &hellip;" />
<meta property="og:url" content="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" />
<meta property="og:site_name" content="PARIS MONTMARTRE TRANSACTIONS" />
<meta property="og:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="799" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:description" content="SOUS PROMESSE DE VENTE PAR NOTRE AGENCE . EXCLUSIVITE , Rue Saint Vincent au pied des Vignes. Magnifique appartement de 104,10 m2 loi carrez dans immeuble pierre de taille , 3 &#xE8;me &#xE9;tage avec ascenseur et gardien Entr&#xE9;e, double s&#xE9;jour, cuisine ind&#xE9;pendante am&#xE9;nag&#xE9;e, 2 chambres, 1 salle de bains &#xE0; rafraichir, 1 salle de douche, [&hellip;]" />
<meta name="twitter:title" content="APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) - 104,1 m² - PARIS 18 - PARIS MONTMARTRE TRANSACTIONS" />
<meta name="twitter:image" content="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" />
<meta property="DC.date.issued" content="2019-11-15T15:05:39+00:00" />
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//paris-montmartre-immobilier.fr' />
<link rel='dns-prefetch' href='//maps-api-ssl.google.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux" href="https://paris-montmartre-immobilier.fr/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; Flux des commentaires" href="https://paris-montmartre-immobilier.fr/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="PARIS MONTMARTRE TRANSACTIONS &raquo; APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18 Flux des commentaires" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"wpemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/wp-emoji.js","twemoji":"https:\/\/paris-montmartre-immobilier.fr\/wp-includes\/js\/twemoji.js"}};
			( function( window, document, settings ) {
	var src, ready, ii, tests;

	/*
	 * Create a canvas element for testing native browser support
	 * of emoji.
	 */
	var canvas = document.createElement( 'canvas' );
	var context = canvas.getContext && canvas.getContext( '2d' );

	/**
	 * Check if two sets of Emoji characters render the same.
	 *
	 * @param set1 array Set of Emoji characters.
	 * @param set2 array Set of Emoji characters.
	 * @returns {boolean} True if the two sets render the same.
	 */
	function emojiSetsRenderIdentically( set1, set2 ) {
		var stringFromCharCode = String.fromCharCode;

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set1 ), 0, 0 );
		var rendered1 = canvas.toDataURL();

		// Cleanup from previous test.
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillText( stringFromCharCode.apply( this, set2 ), 0, 0 );
		var rendered2 = canvas.toDataURL();

		return rendered1 === rendered2;
	}

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "flag" or "emoji".
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var isIdentical;

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		switch ( type ) {
			case 'flag':
				/*
				 * Test for UN flag compatibility. This is the least supported of the letter locale flags,
				 * so gives us an easy test for full support.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly ([U] + [N]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 56826, 55356, 56819 ],
					[ 55356, 56826, 8203, 55356, 56819 ]
				);

				if ( isIdentical ) {
					return false;
				}

				/*
				 * Test for English flag compatibility. England is a country in the United Kingdom, it
				 * does not have a two letter locale code but rather an five letter sub-division code.
				 *
				 * To test for support, we try to render it, and compare the rendering to how it would look if
				 * the browser doesn't render it correctly (black flag emoji + [G] + [B] + [E] + [N] + [G]).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[ 55356, 57332, 56128, 56423, 56128, 56418, 56128, 56421, 56128, 56430, 56128, 56423, 56128, 56447 ],
					[ 55356, 57332, 8203, 56128, 56423, 8203, 56128, 56418, 8203, 56128, 56421, 8203, 56128, 56430, 8203, 56128, 56423, 8203, 56128, 56447 ]
				);

				return ! isIdentical;
			case 'emoji':
				/*
				 * She's the hero Emoji deserves, but not the one it needs right now.
				 *
				 * To test for support, try to render a new emoji (female superhero),
				 * then compare it to how it would look if the browser doesn't render it correctly
				 * (superhero + female sign).
				 */
				isIdentical = emojiSetsRenderIdentically(
					[55358, 56760, 9792, 65039],
					[55358, 56760, 8203, 9792, 65039]
				);
				return ! isIdentical;
		}

		return false;
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.defer = script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	tests = Array( 'flag', 'emoji' );

	settings.supports = {
		everything: true,
		everythingExceptFlag: true
	};

	for( ii = 0; ii < tests.length; ii++ ) {
		settings.supports[ tests[ ii ] ] = browserSupportsEmoji( tests[ ii ] );

		settings.supports.everything = settings.supports.everything && settings.supports[ tests[ ii ] ];

		if ( 'flag' !== tests[ ii ] ) {
			settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && settings.supports[ tests[ ii ] ];
		}
	}

	settings.supports.everythingExceptFlag = settings.supports.everythingExceptFlag && ! settings.supports.flag;

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.everything ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='leaflet.css-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.css,wp-content/themes/houzez/houzez/leaflet/MarkerCluster.Default.css,wp-content/plugins/revslider/public/assets/css/settings.css,wp-content/plugins/uk-cookie-consent/assets/css/style.css,wp-content/plugins/wp-job-manager/assets/css/chosen.css,wp-content/themes/houzez/houzez/css/bootstrap.min.css,wp-content/themes/houzez/houzez/css/font-awesome.min.css,wp-content/themes/houzez/houzez/css/all.min.css,wp-content/themes/houzez/houzez/css/main.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='rs-plugin-settings-inline-css' type='text/css'>
#rs-demo-id {}
</style>
<link rel='stylesheet' id='houzez-style-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/style.css,wp-content/agence96740-images/smile_fonts/Defaults/Defaults.css&#038;ver=1585558881' type='text/css' media='all' />
<style id='houzez-style-inline-css' type='text/css'>

        .advance-search-header, 
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search .form-control,
        .search-expandable .advanced-search {
            background-color: #d3d15e;
        }
        .search-expand-btn {
            background-color: #696e71;
        }
        .search-expand-btn {
            color: #ffffff
        }
        .advance-search-header .houzez-theme-button,
        .advanced-search-mobile .houzez-theme-button,
        .splash-search .btn-secondary,
        .advanced-search .btn-secondary {
            color: #ffffff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .advance-search-header .houzez-theme-button:focus,
        .advanced-search-mobile .houzez-theme-button:focus,
        .advanced-search .btn-secondary:focus,
        .splash-search .btn-secondary:focus {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:hover,
        .advanced-search .btn-secondary:hover,
        .advanced-search-mobile .houzez-theme-button:hover,
        .splash-search .btn-secondary:hover {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advance-search-header .houzez-theme-button:active,
        .advanced-search .btn-secondary:active,
        .advanced-search-mobile .houzez-theme-button:active,
        .splash-search .btn-secondary:active {
          color: #807f7f;
          background-color: #ffffff;
          border: 1px solid #ffffff;
        }
        .advanced-search .form-control,
        .advance-search-header .bootstrap-select .btn,
        .advance-search-header .bootstrap-select .fave-load-more a,
        .fave-load-more .advance-search-header .bootstrap-select a,
        .advance-fields .form-control{
            border: 1px solid #ffffff;
        }
        .advanced-search .input-group .form-control,        
        .search-long .search input,
        .advanced-search .search-long .search,
        .advanced-search .search-long .btn-group,
        .advanced-search .search-long .advance-btn,
        .input-group-addon {
            border-color: #ffffff !important;
        }
        .advanced-search-mobile .advance-fields {
            border-top: 1px solid #ffffff;
        }
        .advanced-search-mobile .single-search-wrap button {
            color: #ffffff;
        }

        .advanced-search-mobile .advance-fields::after {
            border-bottom-color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
            color: #ffffff;
        }
        .advance-btn.blue {
            color: #ffffff;
        }
        .advance-btn.blue:hover,
        .advance-btn.blue:focus {
            color: #ffffff;
        }
        .advanced-search .advance-btn {
            color: #d3d15e;
        }
        .advanced-search .advance-btn:hover {
            color:#807f7f;
        }
        .advanced-search .advance-btn:focus,
        .advanced-search .advance-btn.active {
            color:#807f7f;
        }
        .advanced-search .advance-fields,
        .advanced-search .features-list label.title,
        .advanced-search-mobile .advance-fields,
        .advanced-search-mobile .features-list label.title,
        .advanced-search-mobile .features-list .checkbox-inline,
        .range-title,
        .range-text,
        .range-text p,
        .min-price-range,
        .max-price-range,
        .advanced-search-mobile, 
        .advanced-search-mobile .single-search-inner .form-control {
            color: #ffffff;
        }
        .advanced-search-mobile .single-search-inner .form-control::-moz-placeholder {
          color: #ffffff !important;         
        }
        .advanced-search-mobile .single-search-inner .form-control:-ms-input-placeholder {
          color: #ffffff !important;
        }
        .advanced-search-mobile .single-search-inner .form-control::-webkit-input-placeholder {
          color: #ffffff !important;
        }
        .top-bar {
            background-color: #ffffff;
        }
        .top-bar .top-nav > ul > li > a:hover,
        .top-bar .top-nav > ul li.active > a,
        .top-bar .top-nav > ul ul a:hover,
        .top-contact a:hover,
        .top-bar .dropdown-menu > li:hover,
        .top-contact li .btn:hover {
            color: rgba(211,209,94,01);
        }
        .top-contact a,
        .top-contact li,
        .top-contact li .btn,
        .top-bar .top-nav > ul > li > a {
            color: #d3d15e;
        }
        .top-bar .mobile-nav .nav-trigger {
            color: #FFFFFF;
        }
        
        body {
            background-color: #f8f8f8;
        }
        a,
        a:focus,
        a:active,
        .blue,
        .text-primary,
        .btn-link,
        .item-body h2,
        .detail h3,
        .breadcrumb li a,
        .fave-load-more a,
        .sort-tab .btn,
        .sort-tab .fave-load-more a,
        .fave-load-more .sort-tab a,
        .pagination-main .pagination a,
        .team-caption-after .team-name a:hover,
        .team-caption-after .team-designation a:hover,
        .agent-media .view,
        .my-property-menu a.active,
        .my-property-menu a:hover,
        .search-panel .advance-trigger{        
            color: #696e71;
        }
        .property-item h2 a,
        .property-item .property-title a,
        .widget .media-heading a {
            color: #000000;
        }
        .property-item h2 a:hover,
        .property-item .property-title a:hover,
        .widget .media-heading a:hover {
            color: #696e71;
        }
        #sidebar .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active a,        
        .houzez-module .module-title-nav .module-nav .btn,
        .houzez-module .module-title-nav .module-nav .fave-load-more a,
        .fave-load-more .houzez-module .module-title-nav .module-nav a {
            color: #fff;
            background-color: #696e71;
            border: 1px solid #696e71;
        }
        .plan-tabs li.active {
            box-shadow: inset 0 4px 0 #696e71;
            border-top-color: #696e71;
            background-color: #fff;
            color: #696e71;
        }
        .btn-primary,        
        .label-primary,
        .scrolltop-btn {
            color: #fff;
            background-color: #696e71;
            border-color: #696e71;
        }
        .header-section-2 .header-top-call {
            color: #d3d15e;
            background-color: #ffffff;
        }
        .header-section-2 .avatar {
            color: #d3d15e;
        }
        @media (max-width: 991px) {
            .header-section-2 .header-top {
                background-color: #696e71;
            }
        }
        .modal-header,
        .ui-slider-horizontal .ui-slider-range,
        .ui-state-hover,
        .ui-widget-content .ui-state-hover,
        .ui-widget-header .ui-state-hover,
        .ui-state-focus,
        .ui-widget-content .ui-state-focus,
        .ui-widget-header .ui-state-focus,
        .list-loading-bar{
            background-color: #696e71;
            border-color: transparent;
        }
        .houzez-module .module-title-nav .module-nav .btn {
            color: #696e71;
            border: 1px solid #696e71;
            background-color: transparent;
        }
        .fave-load-more a,
        .fave-load-more a:hover {
            border: 1px solid #696e71;
        }
        #transportation,
        #supermarkets,
        #schools,
        #libraries,
        #pharmacies,
        #hospitals,
        .pay-step-block.active span,
        .loader-ripple div:nth-of-type(2){
            border-color: #696e71;
        }
        .loader-ripple div:nth-of-type(1){
            border-color: #d3d15e;
        }
        .detail-block .alert-info {
            color: rgba(0,0,0,.85);
            background-color: rgba(255,255,255,0.1);
            border: 1px solid #696e71;
        }
        .houzez-taber-wrap .houzez-tabs li.active::before,
        .houzez-taber-wrap .houzez-tabs li:hover::before,
        .houzez-taber-wrap .houzez-tabs li:active::before,
        .profile-tabs li:hover,
        .steps-nav, .steps-progress-main .steps-progress span {
            background-color: #696e71;
        }
        .btn-secondary,
        .agent_contact_form.btn-secondary,
         .form-media .wpcf7-submit,
         .wpcf7-submit,
         .dsidx-resp-area-submit input[type='submit']{
            color: #fff;
            background-color: #d3d15e;
            border-color: #d3d15e;
        }
        .item-thumb .label-featured, figure .label-featured, .carousel-module .carousel .item figure .label-featured {
            background-color: #e0003b;
            color: #ffffff;
        }
            a:hover,
            .blue:hover,
            .btn-link:hover,
            .breadcrumb li a:hover,
            .pagination-main .pagination a:hover,
            .vc_toggle_title h4:hover ,
            .footer a:hover,
            .impress-address:hover,
            .agent-media .view:hover{
                color: rgba(211,209,94,01);
                text-decoration: none;
            }
            .slideshow .slide .slick-prev,
            .slideshow .slideshow-nav .slick-prev,
            .slideshow .slide .slick-next,
            .slideshow .slideshow-nav .slick-next,
            .banner-slider .slick-prev,
            .banner-slider .slick-next,
            .banner-slider .slideshow .slide .slick-next,
            .slideshow .slide .banner-slider .slick-next,
            .banner-slider .slideshow .slideshow-nav .slick-next,
            .slideshow .slideshow-nav .banner-slider .slick-next,
            .detail-top .media-tabs a:hover span,
            .header-section.slpash-header .header-right a.btn:hover,
            .slpash-header.header-section-4 .header-right a.btn:hover,
            .houzez-module .module-title-nav .module-nav .btn:hover,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:hover,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:hover,
            .houzez-module .module-title-nav .module-nav .btn:focus,
            .houzez-module .module-title-nav .module-nav .fave-load-more a:focus,
            .fave-load-more .houzez-module .module-title-nav .module-nav a:focus{
                color: #fff;
                background-color: rgba(211,209,94,01);
                border: 1px solid rgba(211,209,94,01);
            }
            .fave-load-more a:hover,
            #sidebar .widget_tag_cloud .tagcloud a:hover,
            .other-features .btn.btn-secondary:hover,
            .my-actions .action-btn:hover,
            .my-actions .action-btn:focus,
            .my-actions .action-btn:active,
            .my-actions .open .action-btn,            
            .testimonial-carousel .slick-next:hover,
            .testimonial-carousel .slick-next:focus{
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }

            .btn-primary:hover,
            .btn-primary:focus,
            .btn-primary:active,
            .invoice-list .btn-invoice:hover,
            #houzez-gmap-main .map-btn:hover,
            .media-tabs-list li > a:hover,
            .media-tabs-list li.active a,
            .detail-bar .detail-tabs li:hover,
            .actions li > span:hover,
            .lightbox-arrow:hover,
            .scrolltop-btn:hover {
                background-color: rgba(211,209,94,01);
                border-color: rgba(211,209,94,01);
            }
            .btn-secondary:hover,
            .agent_contact_form.btn-secondary:hover,
             .form-media .wpcf7-submit:hover,
             .wpcf7-submit:hover,
             .wpcf7-submit:focus,
             .wpcf7-submit:active,
             .dsidx-resp-area-submit input[type='submit']:hover,
             .dsidx-resp-area-submit input[type='submit']:focus,
             .dsidx-resp-area-submit input[type='submit']:active{
                color: #fff;
                background-color: rgba(105,110,113,01);
                border: 1px solid rgba(105,110,113,01);
            }
        .header-section {
            background-color: #696e71;
        }
        .header-section .navi > ul > li > a {
            color: #ffffff;
            background-color: transparent;
        }
        .header-section .header-right .user a,
        .header-section .header-right span {
            color: #ffffff;
        }
            .header-section .navi > ul > li > a:hover {
                color: rgba(105,110,113,01);
                background-color: rgba(255,255,255,0);
            }
            .header-section .header-right .user a:hover,
            .header-section .header-right span:hover {
                color: rgba(105,110,113,01);
            }
        .header-section-3 .header-top {
            background-color: #696e71;
        }
        .header-section-3 .header-top-social a,
        .header-section-3 .header-contact .contact-block .fa,
        .header-section-3 .header-top .media-heading,
        .header-contact .contact-block p{
            color: #ffffff;
        }
        .header-contact .contact-block .fa {
            color: #ffffff;
        }
        .header-section-3 .header-bottom {
            background-color: #696e71;
        }
        .header-section-3 .navi > ul > li > a,
        .header-section-3 .header-right .user a,
        .header-section-3 .header-right span {
            color: #ffffff;
        }        
        .header-section-3 .header-right .user {
            line-height: 60px;
        }
            .header-section-3 .navi > ul > li > a:hover,
            .header-section-3 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(255,255,255,0.2);
            }
            .header-section-3 .header-right .user a:hover,
            .header-section-3 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
            .header-section-3 .navi > ul > li {
                border-right: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .header-bottom {
                border-top: 1px solid rgba(255,255,255,0.2);
            }
            .header-section-3 .navi ul {
                border-left: 1px solid rgba(255,255,255,0.2);
            }
        .header-section-2 .header-top {
            background-color: #696e71;
        }
        .header-section-2 .header-bottom {
            background-color: #696e71;
            border-top: 1px none #2a353d;
            border-bottom: 1px none #2a353d;
        }
        .header-section-2 .header-bottom .navi > ul > li {
            border-right: 1px none #2a353d;
        }
        .header-section-2 .header-right {
            border-left: 1px none #2a353d;
        }
        .header-section-2 .navi > ul > li > a,
        .header-section-2 .header-right .user a,
         .header-section-2 .header-right span {
            color: #ffffff;
        }
            .header-section-2 .navi > ul > li > a:hover,
             .header-section-2 .navi > ul > li.active > a{
                color: rgba(211,209,94,01);
                background-color: rgba(211,209,94,01);
            }
            .header-section-2 .header-right .user a:hover,
             .header-section-2 .header-right span:hover {
                color: rgba(211,209,94,01);
            }
        .header-section .header-right a.btn,
        .header-section-2 .header-right a.btn,
        .header-section-3 .header-right a.btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: rgba(255,255,255,0.2);
        }
        .header-section .header-right .user a.btn:hover,
        .header-section-2 .header-right .user a.btn:hover,
        .header-section-3 .header-right .user a.btn:hover {
            color: rgba(255,255,255,1);
            border-color: #ffffff;
            background-color: rgba(255,255,255,0.1);
        }
    
        .header-section-4,
        .header-section-4 .navi > ul ul {
            background-color: #696e71;
        }
        .sticky_nav.header-section-4.header-section-4,
        .sticky_nav.header-section-4 .header-section-4{
            background: rgba(,,,0.7);
        }
        .header-section-4 .navi > ul > li > a,
        .header-section-4 .navi > ul ul a,
        .header-section-4 .header-right .user a,
        .header-section-4 .header-right span {
            color: #ffffff;
        }
        .header-section-4 .header-right .btn {
            color: #ffffff;
            border: 1px solid #ffffff;
            background-color: #ffffff;
        }
            .header-section-4 .navi > ul > li > a:hover,
            .header-section-4 .navi > ul ul a:hover,
            .header-section-4 .navi > ul > li.active > a,
            .header-section-4 .header-right .user a:hover,
            .header-section-4 .header-right .user a:focus,
            .header-section-4 .header-right span:hover,
            .header-section-4 .header-right span:focus {
                color: rgba(211,209,94,01);
            }
            .header-section-4 .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
      .houzez-header-transparent {
       background-color: transparent; position: absolute; width: 100%;
       border-bottom: 1px none;
       border-color: rgba(255,255,255,0.3);
      }
      .header-section-4.houzez-header-transparent .navi > ul > li > a,

      .header-section-4.houzez-header-transparent .header-right .account-action span,
      .header-section-4.houzez-header-transparent .header-right .user span {
         color: #ffffff;
      }
    .header-section-4.houzez-header-transparent .navi > ul > li > a:hover,
        .header-section-4.houzez-header-transparent .navi > ul ul a:hover,
        .header-section-4.houzez-header-transparent .account-action li:hover,

        .header-section-4.houzez-header-transparent .header-right .user a:hover,
        .header-section-4.houzez-header-transparent .header-right .account-action span:hover,
        .header-section-4.houzez-header-transparent .header-right .user span:hover,
        .header-section-4.houzez-header-transparent .header-right .user a:focus {
            color: #ffffff;
        }
    .header-section-4.houzez-header-transparent .header-right .btn {
        color: #ffffff;
        border: 1px solid #ffffff;
        background-color: rgba(255,255,255,0.2);
    }
            .header-section-4.houzez-header-transparent .header-right .user .btn:hover {
                color: rgba(255,255,255,1);
                border-color: rgba(255,255,255,1);
                background-color: rgba(255,255,255,1);
            }
        #main_lateral_menu #menu ul li.menu-item-has-children >a:before{
            background: #696e71;
        }
        #main_lateral_menu #menu ul li a:hover,
        #main_lateral_menu #menu ul li a:active,
        #main_lateral_menu #menu ul li a:focus{
              color: #696e71;
        }
        #main_lateral_menu #menu > ul > li.menu-item-has-children>a:after{
          border-color: #696e71 transparent transparent transparent;
        }
        .trigger_menu span{
          border-top: 2px solid #696e71;
          border-bottom: 2px solid #696e71;
        }
        .trigger_menu span::before,
        #main_lateral_menu .close-menu span:before,
        #main_lateral_menu .close-menu span:after{
           background: #696e71;
        }
        .trigger_menu .circle-menu{
          border: 1px solid #696e71;
        }
      
        .navi.main-nav > ul ul {
            background-color: rgba(255,255,255,0.95);
        }
        .navi.main-nav > ul ul a {
            color: #696e71!important;
        }
        .navi.main-nav > ul ul a:hover {
            color: #d3d15e!important;
        }
        .navi.main-nav > ul ul li {
            border-color: #e6e6e6;
        }
     
        .header-section .header-right a,
        .header-section .header-right span,
        .header-section .header-right .btn-default,
        .header-section .navi ul li,
        .header-section .account-dropdown > ul > li > a,

        .header-section-3 .header-right a,
        .header-section-3 .header-right span,
        .header-section-3 .navi ul li,
        .header-section-3 .account-dropdown > ul > li > a,

        .header-section-2 .header-right a,
        .header-section-2 .header-right span,
        .header-section-2 .navi ul li,
        .header-section-2 .account-dropdown > ul > li > a,

        .header-section-4 .header-right a,
        .header-section-4 .header-right span,
        .header-section-4 .navi ul li,
        .header-section-4 .header-right .btn-default,
        .header-section-4 .account-dropdown > ul > li > a {
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 700;
            line-height: 18px;
            text-transform: capitalize;
            text-align: left;
        }
        .header-section.slpash-header .navi > ul > li > a:hover,
        .slpash-header.header-section-4 .navi > ul > li > a:hover,
        .header-section.slpash-header .header-right .user > a:hover,
        .slpash-header.header-section-4 .header-right .user > a:hover,
        .header-section.slpash-header .navi > ul > li > a:focus,
        .slpash-header.header-section-4 .navi > ul > li > a:focus,
        .header-section.slpash-header .header-right .user > a:focus,
        .slpash-header.header-section-4 .header-right .user > a:focus  {
            color: rgba(255,255,255,1);
        }
        .header-section.slpash-header .navi > ul > li.active > a{
            color: #696e71;
        }
        .header-mobile {
            background-color: #ffffff;
        }
        .header-mobile .nav-dropdown > ul {
            background-color: rgba(255,255,255,0.95);
        }
        .mobile-nav .nav-trigger,
        .header-mobile .user a,
        .header-mobile .user-icon {
            color: #696e71;
        }
        .nav-dropdown a,
        .nav-dropdown li .expand-me {
            color: #696e71;
        }
        .mobile-nav a {
            font-family: Montserrat;
            font-size: 14px;
            font-weight: ;
            line-height: 18px;
            text-transform: none;
            text-align: left;
        }
        .mobile-nav .nav-dropdown > ul ul a {
            color: #696e71;
            background-color: #ffffff;
        }
        .mobile-nav .nav-dropdown li {
            border-top: 1px solid #ffffff;            
        }
            .mobile-nav .nav-dropdown > ul > li:hover {
                background-color: rgba(105,110,113,01);
            }
            .mobile-nav .nav-dropdown li.active > a {
                color: rgba(211,209,94,01);
                background-color: rgba(105,110,113,01);
            }
        .account-dropdown > ul {
            background-color: #FFFFFF;
        }
        .account-dropdown > ul:before {
            border-bottom-color: #FFFFFF;
        }
        .account-dropdown > ul > li > a {
            color: #696e71 !important;
        }
        .account-dropdown > ul > li > a:hover, .account-dropdown > ul > li.active > a, .account-dropdown > ul > li.active > a:hover {
            color: #d3d15e !important;
            background-color: rgba(204,204,204,0.15);
        }
        .account-dropdown > ul > li {
            border-color: #e6e6e6;
        }
        .account-dropdown > ul .sub-menu {
            background-color: #ffffff;
        }
        .account-dropdown > ul .sub-menu > li,
        .account-dropdown > ul .sub-menu > li a {
            color: #FFFFFF;
        }
        .account-dropdown > ul .sub-menu > li a:hover, .account-dropdown > ul .sub-menu > li.active > a {
            background-color: rgba(255,255,255,0.2) !important;
            color: inherit;
        }
        .account-dropdown > ul .sub-menu > li {
            border-color: rgba(255,255,255,0.2) !important;
        }
        
        .footer {
            background-color: #696e71;
        }
        .footer-bottom {
            background-color: #d3d15e;
            border-top: 1px none #00243f;
        }
        .footer,
        .footer-widget h4,
        .footer-bottom p,
        .footer-widget.widget_calendar caption  {
            color: ;
        }
        .footer a,
        .footer-bottom .navi a,
        .footer-bottom .foot-social p a {
            color: ;
        }
        .footer-widget .widget-title,
        .footer p, .footer p.wp-caption-text,
         .footer li,
          .footer li i {
            color: ;
        }
            .footer a:hover,
            .footer-bottom .navi a:hover,
            .footer-bottom .foot-social p a:hover  {
                color: rgba(255,255,255,1);
            }
            .footer-widget.widget_tag_cloud .tagcloud a {
                color: rgba(255,255,255,1);
                background-color: ;
                border: 1px solid ;
            }
        body {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        input, button, select, textarea {
            font-family: Montserrat;
        }
        h1,
        .page-title .title-head,
        .article-detail h1,
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2,
        h3,
        .module-title h3,
        .article-detail h3,
        .detail h3,
        .caption-bottom .detail h3,
        .detail-bottom.detail h3,
        .add-title-tab h3,
        #sidebar .widget-title,
        .footer-widget .widget-title,
        .services-module .service-block h3,
        h4,
        .article-detail h4,
        h5,
        .article-detail h5,
        h6,
        .article-detail h6,
        .item-body h2,
        .item-body .property-title,
        .post-card-description h3,
        .post-card-description .post-card-title,
        .my-property .my-heading,
        .module-title h2,
        .houzez-module .module-title-nav h2 {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
        h1,
        .page-title .title-head,
        .article-detail h1 {
            font-size: 30px;
            line-height: 38px;
            margin: 0 0 28px 0;
        }
        h2,
        .article-detail h2,
        .houzez-module .module-title-nav h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
        }
        .houzez-module .module-title-nav h2 {
            margin: 0;
        }
        h3,
        .module-title h3,
        .article-detail h3,
        .services-module .service-block h3 {
            font-size: 20px;
            line-height: 28px;
        }
        h4,
        .article-detail h4 {
            font-size: 18px;
            line-height: 26px;
            margin: 0 0 24px 0;
        }
        h5,
        .article-detail h5 {
            font-size: 16px;
            line-height: 24px;
            margin: 0 0 24px 0;
        }
        h6,
        .article-detail h6 {
            font-size: 14px;
            line-height: 20px;
            margin: 0 0 24px 0;
        }
        .item-body h2,
        .post-card-description h3,
        .my-property .my-heading {
            font-size: 16px;
            line-height: 20px;
            margin: 0 0 8px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title h2 {
            font-size: 24px;
            line-height: 32px;
            margin: 0 0 10px 0;
            font-weight: 500;
            text-transform: inherit;
            text-align: inherit;
        }
        .module-title .sub-heading {
            font-size: 16px;
            line-height: 24px;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .houzez-module .module-title-nav .sub-title {
            font-size: 16px;
            line-height: 18px;
            margin: 8px 0 0 0;
            font-weight: 300;
            text-transform: inherit;
            text-align: inherit;
        }
        .item-thumb .hover-effect:before,
        figure .hover-effect:before,
        .carousel-module .carousel .item figure .hover-effect:before,
        .item-thumb .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb .slick-slide:before,
        figure .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure .slick-slide:before {
        background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 65%, rgba(0,0,0,.75) 100%);
        }
        .slideshow .slide .slick-prev:hover,
        .slideshow .slideshow-nav .slick-prev:hover,
        .slideshow .slide .slick-next:hover,
        .slideshow .slideshow-nav .slick-next:hover,
        .slideshow .slide .slick-prev:focus,
        .slideshow .slideshow-nav .slick-prev:focus,
        .slideshow .slide .slick-next:focus,
        .slideshow .slideshow-nav .slick-next:focus
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before,
        .item-thumb:hover .hover-effect:before,
        figure:hover .hover-effect:before,
        .carousel-module .carousel .item figure:hover .hover-effect:before,
        .item-thumb:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main .item-thumb:hover .slick-slide:before,
        figure:hover .slideshow .slideshow-nav-main .slick-slide:before,
        .slideshow .slideshow-nav-main figure:hover .slick-slide:before {
            
        }
        .figure-grid .detail h3,
        .detail-above.detail h3 {
            color: #fff;
        }
        .detail-bottom.detail h3 {
            color: #000;
        }
        .agent-contact a {
            font-weight: 700;
        }
        label {
            font-weight: 400;
            font-size: 14px;
        }
        .label-status {
            background-color: #333;
            font-weight: 700;
        }
        .read .fa {
            top: 1px;
            position: relative;
        }            
        .label-primary,
        .fave-load-more a,
        .widget_tag_cloud .tagcloud a,
        .pagination-main .pagination li.active a,
        .other-features .btn.btn-secondary,
        .my-menu .active am {
            font-weight: 500;
        }       
        
        /*.features-list {
            padding-bottom: 15px;
        }*/
        .advanced-search .advance-btn i {
            float: inherit;
            font-size: 14px;
            position: relative;
            top: 0px;
            margin-right: 6px;
        }
        @media (min-width: 992px) {
            .advanced-search .features-list .checkbox-inline {
                width: 14%;
            }
        }
        .header-detail.table-cell .header-right {
            margin-top: 27px;
        }
        .header-detail h1 .actions span, .header-detail h4 .actions span {
            font-size: 18px;
            display: inline-block;
            vertical-align: middle;
            margin: 0 3px;
        }        
        .header-detail .property-address {
            color: #707070;
            margin-top: 12px;
        }        
        .white-block {
            padding: 40px;
        }
        .wpb_text_column ul,
        .wpb_text_column ol {
            margin-top: 20px;
            margin-bottom: 20px;
            padding-left: 20px;
        }
        #sidebar .widget_houzez_latest_posts img {
            max-width: 90px;
            margin-top: 0;
        }
        #sidebar .widget_houzez_latest_posts .media-heading,
        #sidebar .widget_houzez_latest_posts .read {
            font-size: 14px;
            line-height: 18px;
            font-weight: 400;
        }        
        #sidebar .widget-range .dropdown-toggle,
        .bootstrap-select.btn-group,        
        .search-long .search input,
        .advanced-search .search-long .advance-btn,        
        .splash-search .dropdown-toggle,        
        .sort-tab {
            font-weight: 400;
            color: #959595 !important;
            font-size: 15px;
        }

        .advanced-search .input-group .form-control {
            border-left-width: 0;
        }        
        .location-select {
            max-width: 170px;
        }             
        
            .vegas-overlay {
               opacity: 1;
               background-image: url(https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/2016/03/bg-video-1.png);
           }
        .user-dashboard-left,
        .board-header-4{
            background-color:#696e71;
        }
        .board-panel-menu > li a,
        .board-header-4 .board-title,
        .board-header-4 .breadcrumb > .active,
        .board-header-4 .breadcrumb li:after,
        .board-header-4 .steps-progress-main{ 
            color:#ffffff; 
         }
        .board-panel-menu > li.active {
            color: #ffffff;
        }
        .board-panel-menu .sub-menu {
            background-color: #696e71;
        }
        .board-panel-menu .sub-menu > li.active > a, .board-panel-menu > li a:hover {
            color: #ffffff;
        }
     
        #ihf-main-container .btn-primary, 
        #ihf-main-container .ihf-map-search-refine-link,
        #ihf-main-container .ihf-map-search-refine-link {
            background-color: #d3d15e;
            border-color: #d3d15e;
            color: #fff;
        }
        #ihf-main-container .btn-primary:hover, 
        #ihf-main-container .btn-primary:focus, 
        #ihf-main-container .btn-primary:active, 
        #ihf-main-container .btn-primary.active {
            background-color: rgba(105,110,113,01);
        }
        #ihf-main-container a {
            color: #696e71;       
        }
        .ihf-grid-result-basic-info-container,
        #ihf-main-container {
            color: #000000;
            font-family: Montserrat;
            font-size: 16px;
            font-weight: 400;
            line-height: 24px;
            text-transform: none;
        }
        #ihf-main-container .fs-12,
        .ihf-tab-pane,
        #ihf-agent-sellers-rep,
        #ihf-board-detail-disclaimer,
        #ihf-board-detail-updatetext  {
            font-size: 16px;
        }
        #ihf-main-container .title-bar-1,
        .ihf-map-icon,
        .slick-prev,
        .slick-next,
        .owl-theme .owl-controls .owl-nav [class*=owl-]{
            background-color: #696e71;
        }
        .ihf-map-icon{
            border-color: #696e71;
        }
        .ihf-map-icon:after{
            border-top-color: #696e71;
        }
        #ihf-main-container h1, 
        #ihf-main-container h2, 
        #ihf-main-container h3, 
        #ihf-main-container h4, 
        #ihf-main-container h5, 
        #ihf-main-container h6, 
        #ihf-main-container .h1, 
        #ihf-main-container .h2, 
        #ihf-main-container .h3, 
        #ihf-main-container .h4, 
        #ihf-main-container .h5, 
        #ihf-main-container .h6,
        #ihf-main-container h4.ihf-address,
        #ihf-main-container h4.ihf-price  {
            font-family: Montserrat;
            font-weight: 400;
            text-transform: inherit;
            text-align: inherit;
        }
    .logo img {
    max-width: 200px !important;
/*min-width: 200px;*/
    max-height:100px;

}

.page-id-78312  .splash-header .logo {
    max-width: 130px;
}
.item-thumb .price .item-price, figure .price .item-price,
.price .item-price ,
.header-detail .item-price {
       background-color: rgba(0,0,0,0.5);
    padding: 10px;
    border-radius: 5px;
}
.justify .wpb_wrapper{
    text-align:justify;
}
#carousel-module-4.houzez-module {
    padding: 40px 0;
    overflow: hidden;
}
.header-section-4.houzez-header-transparent .navi > ul > li > a, .header-section-4.houzez-header-transparent .header-right .account-action span, .header-section-4.houzez-header-transparent .header-right .user span {
    color: #FFFFFF;
}
.houzez-header-transparent .navi > ul > li.active {
    top: -24px;
}
.detail-slider .item {
    background-size: auto;
    background-position: center;
    background-repeat: no-repeat;
    background-color: white;
}
.header-section-4 .logodemo {
    line-height: 85px;
}
.header-right .user{
    display:none;
}
.logo.logo-desktop img{
    max-height: 125px;
}
.header-mobile .header-logo img{
    max-height: 40px;
}
.item-price {
    color: #f1efef;
    display: block;
    font-weight: bold;
    background: #696e718a;
}
.gallery-area{
    background : #696e71; 
}
.property-listing.grid-view-2-col.grid-view .item-thumb a{
    height:400px;
}
@media(max-width:768px){
    .property-listing.grid-view-2-col.grid-view .item-thumb a{
        height:300px;
    }
}
.property-listing.grid-view-2-col.grid-view .item-thumb a img{
    height:100%;
    object-fit: cover;
}
.bath{
    display:none !important;
}
.single-property .slider-pro img.sp-image{
    border-right:5px solid #ffffff !important;
    border-left:5px solid #ffffff !important;
}
.single-property .sp-slide-over{
    background:transparent;
}

.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
    min-height: 165px;  
}


@media (min-width: 768px) and (max-width: 1429px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 200px;  
    }
}

@media (max-width: 500px) {
    .single-property #detail div:nth-child(2) .list-two-col li:nth-child(2){
        min-height: 265px;  
    }
}

@media (max-width: 375px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 361px;
}
}

@media (max-width: 320px){
.single-property #detail div:nth-child(2) .list-two-col li:nth-child(2) {
    min-height: 457px;
}
}
#auto_complete_ajax .address{ display:none; }

.item-price {
    display: block;
    font-weight: bold;
    background: transparent;
    color: black;
    font-size: 20px;
}

.item-body .item-price{
        text-align: right;

}
.price.hide-on-list {
    display: none;
}
@media(max-width:425px){
    .single-property .slider-pro img.sp-image {
        width: 100%!important;
        height: auto !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
    }
    .single-property .sp-slide{
        width:435px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:320px !important;
    }
    .single.single-property .sp-slide{
        border-bottom:0px;
    }
}
@media(max-width:375px){
    .single-property .sp-slide{
        width:425px!important;
    }
    .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:291px !important;
    }
}
@media(max-width:320px){
    .single-property .sp-slide{
        width:370px!important;
    }
     .single-property .sp-mask.sp-grab, .single-property .sp-slide, 
    .single-property .sp-image-container,.single-property .sp-slide.sp-selected{
        height:266px !important;
    }
  
}
@media(max-width:320px){
    .single-property .widget.widget-contact-agent .g-recaptcha,
    .single-property #agent_bottom .g-recaptcha{
        transform:scale(0.77);
        -webkit-transform:scale(0.77);
        transform-origin:0 0;
        -webkit-transform-origin:0 0;
    }
}
</style>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/wp-includes/js/jquery/jquery-migrate.js'></script>
<script type='text/javascript' src='https://maps-api-ssl.google.com/maps/api/js?libraries=places&#038;language=fr_FR&#038;key=AIzaSyCD95fZ9xxtKzUX3tZNxy7rtwRrX3c_dJw'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/leaflet/leaflet.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.tools.min.js,wp-content/plugins/revslider/public/assets/js/jquery.themepunch.revolution.min.js,wp-content/themes/houzez/houzez/js/jquery.number.min.js&#038;ver=1585558881'></script>
<link rel='https://api.w.org/' href='https://paris-montmartre-immobilier.fr/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://paris-montmartre-immobilier.fr/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://paris-montmartre-immobilier.fr/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.9.8" />
<link rel='shortlink' href='https://paris-montmartre-immobilier.fr/?p=86382' />
<link rel="alternate" type="application/json+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-5-pices-1041-m%25c2%25b2-paris-18%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://paris-montmartre-immobilier.fr/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-5-pices-1041-m%25c2%25b2-paris-18%2F&#038;format=xml" />
<style id="ctcc-css" type="text/css" media="screen">
				#catapult-cookie-bar {
					box-sizing: border-box;
					max-height: 0;
					opacity: 0;
					z-index: 99999;
					overflow: hidden;
					color: #ddd;
					position: fixed;
					left: 0;
					top: 0;
					width: 100%;
					background-color: #4f4f4f;
				}
				#catapult-cookie-bar a {
					color: #fff;
				}
				#catapult-cookie-bar .x_close span {
					background-color: #ffffff;
				}
				button#catapultCookie {
					background:;
					color: #ffffff;
					border: 0; padding: 6px 9px; border-radius: 3px;
				}
				#catapult-cookie-bar h3 {
					color: #ddd;
				}
				.has-cookie-bar #catapult-cookie-bar {
					opacity: 1;
					max-height: 999px;
					min-height: 30px;
				}</style>        <!-- AiVONi -->
      <!-- Global site tag (gtag.js) - Google Ads: 704976807 --> <script async src="https://www.googletagmanager.com/gtag/js?id=AW-704976807"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "AW-704976807"); </script>        <!-- AiVONi -->
      

<script type="text/javascript">
  
  
   jQuery(document).ready(function($){
   
       $( "#houzez_newsletter .status .dropdown-menu.inner span.text" ).each(function( index ) {
          if($(this).text().toLowerCase().indexOf("vendu") >= 0){
            $(this).parent().parent().hide();
          }
        });
        if($('.single-property #slider-property-v3').length>0){
            $('.single-property #slider-property-v3').sliderPro({
                width: 300,
                height: 550,
                arrows: true,
                buttons: false,
                fullScreen: true,
                shuffle: false,
                smallSize: 500,
                mediumSize: 1000,
                largeSize: 3000,
                thumbnailArrows: true,
                autoplay: false,
                visibleSize: '100%',
                forceSize: 'fullWidth',
                autoSlideSize: true,
                thumbnailWidth: 220,
                thumbnailHeight: 140,
                slideDistance: 0,
                breakpoints: {
                    425:{
                        height: 320
                    },
                    375: {
                       height: 291
                    },
                    320: {
                       height: 266
                    }
                }
            });
        }
    
    });
    
</script>    
<!-- Favicon --><link rel="shortcut icon" href="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/placeholder-6.png"><meta name="generator" content="Powered by WPBakery Page Builder - drag and drop page builder for WordPress."/>
<!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://paris-montmartre-immobilier.fr/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]--><meta name="generator" content="Powered by Slider Revolution 5.4.8 - responsive, Mobile-Friendly Slider Plugin for WordPress with comfortable drag and drop interface." />
<script type="text/javascript">function setREVStartSize(e){									
						try{ e.c=jQuery(e.c);var i=jQuery(window).width(),t=9999,r=0,n=0,l=0,f=0,s=0,h=0;
							if(e.responsiveLevels&&(jQuery.each(e.responsiveLevels,function(e,f){f>i&&(t=r=f,l=e),i>f&&f>r&&(r=f,n=e)}),t>r&&(l=n)),f=e.gridheight[l]||e.gridheight[0]||e.gridheight,s=e.gridwidth[l]||e.gridwidth[0]||e.gridwidth,h=i/s,h=h>1?1:h,f=Math.round(h*f),"fullscreen"==e.sliderLayout){var u=(e.c.width(),jQuery(window).height());if(void 0!=e.fullScreenOffsetContainer){var c=e.fullScreenOffsetContainer.split(",");if (c) jQuery.each(c,function(e,i){u=jQuery(i).length>0?u-jQuery(i).outerHeight(!0):u}),e.fullScreenOffset.split("%").length>1&&void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0?u-=jQuery(window).height()*parseInt(e.fullScreenOffset,0)/100:void 0!=e.fullScreenOffset&&e.fullScreenOffset.length>0&&(u-=parseInt(e.fullScreenOffset,0))}f=u}else void 0!=e.minHeight&&f<e.minHeight&&(f=e.minHeight);e.c.closest(".rev_slider_wrapper").css({height:f})					
						}catch(d){console.log("Failure at Presize of Slider:"+d)}						
					};</script>
<noscript><style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style></noscript>	
		<style type="text/css">
  .primary-color {
        background-color: #696e71 !important;
  }
  .secondary-color {
        background-color: #d3d15e !important;
  }
  </style>
</head>


<body class="property-template-default single single-property postid-86382  transparent- houzez-child wpb-js-composer js-comp-ver-5.6 vc_responsive" >

	
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-149134774-1', 'auto');
	  ga('send', 'pageview');

	</script>
<div id="fb-root"></div>



<div class="modal fade" id="pop-login" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                                            <li class="active">Identifiant </li>
                                        <!-- <li>Nouvel Utilisateur</li> -->
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block class-for-register-msg">
                <div class="tab-content">
            <div class="tab-pane fade ">
            </div>
        
</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="pop-reset-pass" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="login-tabs">
                    <li class="active">réinitialiser le mot de passe</li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-close"></i></button>

            </div>
            <div class="modal-body login-block">
                <p>S&#039;il vous plaît entrer votre nom d&#039;utilisateur ou adresse e-mail. Vous recevrez un lien pour créer un nouveau mot de passe par courriel.</p>
                <div id="houzez_msg_reset" class="message"></div>
                <form>
                    <div class="form-group">
                        <div class="input-user input-icon">
                            <input name="user_login_forgot" id="user_login_forgot" placeholder="Saisissez votre nom votre email." class="form-control">
                        </div>
                    </div>
                    <input type="hidden" id="fave_resetpassword_security" name="fave_resetpassword_security" value="a5bba6334e" /><input type="hidden" name="_wp_http_referer" value="/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" />                    <button type="button" id="houzez_forgetpass" class="btn btn-primary btn-block">Obtenez un Nouveau mot de passe</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--start section header-->
<header id="header-section" class=" houzez-header-main header-section-4 nav-right   houzez-disabled-create-listing" data-sticky="1">

    <div class="container-fluid">
        <div class="header-left">

            <div class="logo logo-desktop">
                


	<a href="https://paris-montmartre-immobilier.fr/">
					<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="logo">
			</a>
            </div>

            <nav class="navi main-nav">
                <ul id="main-nav" class=""><li id="menu-item-78848" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-78848"><a href="https://paris-montmartre-immobilier.fr/">Accueil</a></li>
<li id="menu-item-78873" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78873"><a href="https://paris-montmartre-immobilier.fr/ventes-2/">Ventes</a></li>
<li id="menu-item-78864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78864"><a href="https://paris-montmartre-immobilier.fr/biens-vendus/">Biens Vendus</a></li>
<li id="menu-item-75384" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75384"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-8917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8917"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-85453" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85453"><a href="https://paris-montmartre-immobilier.fr/alerte-email/">Alerte Email</a></li>
<li id="menu-item-8922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8922"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
</ul>            </nav>
        </div>

                                    <div class="header-right">
                    
    <div class="user">

            <a href="/wp-admin"><i class="fa fa-user hidden-md hidden-lg"></i> <span class="hidden-sm hidden-xs">Connexion</span></a>    </div>
                                    </div>
                            
            </div>

</header>
<!--end section header-->


<div class="header-mobile houzez-header-mobile "  data-sticky="1">
	<div class="container">
		<!--start mobile nav-->
		<div class="mobile-nav">
			<span class="nav-trigger"><i class="fa fa-navicon"></i></span>
			<div class="nav-dropdown main-nav-dropdown"></div>
		</div>
		<!--end mobile nav-->
		<div class="header-logo logo-mobile">
			<a href="https://paris-montmartre-immobilier.fr/">
           <img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="Mobile logo">
    </a>		</div>
									<div class="header-user">
					
    <ul class="account-action">
        <li>
            <span class="user-icon"><i class="fa fa-user"></i></span>
            <div class="account-dropdown">
                <ul>
                    <li> <a href="#" data-toggle="modal" data-target="#pop-login"> <i class="fa fa-user"></i>Connexion</a></li>                </ul>
            </div>
        </li>
    </ul>
				</div>
						</div>
</div>



<!--start advanced search section-->
<div class="advanced-search animated fadeInDown advance-search-header houzez-adv-price-range " data-sticky='0'>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <form method="get" autocomplete="off" action="https://paris-montmartre-immobilier.fr/advanced-search/">

                                        
                                            <div class="form-group search-long">
                        
                        <div class="search">
                            <div class="input-search input-icon">
                                <input class="form-control" type="text" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                                <div id="auto_complete_ajax" class="auto-complete"></div>
                            </div>
                            

                                                            <select class="selectpicker"  id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type d&#039;opération</option><option value="vente"> VENTE</option><option value="vendu"> VENDU</option><option value="location"> LOCATION</option><option value="biens-vendus"> BIENS VENDUS</option><option value="">Tous</option>                                </select>
                            
                            
                            
                                                            <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option><option value="">Tous</option>                                </select>
                            
                                                                <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                            
                            
                                
                                

                                                            <div class="btn-group bootstrap-select postfix-area">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="min-area" placeholder="Surface Min " data-live-search="false" data-live-search-style="begins">
                                </div>
                            
                            
                       
                                                            <div class="btn-group bootstrap-select postfix-price">
                                    <input type="text" style="border-left:0px;padding-left: 10px;" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                            

                                                        <div class="advance-btn-holder">
                                <button class="advance-btn btn" type="button"><i class="fa fa-gear"></i> Avancé</button>
                            </div>
                            
                        </div>
                        <div class="search-btn">
                            <button class="btn btn-secondary">Rechercher</button>
                        </div>
                    </div>
                    
                    
                    <div class="advance-fields">
                        <div class="row">

                            
                                                        
                                                        
                            
                            
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-3 col-xs-6">
                                <div class="form-group postfix-area">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max ">
                                </div>
                            </div>
                            
                            
                                                                    <div class="col-sm-3 col-xs-6">
                                        <div class="form-group postfix-price">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                
                            
                                                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="advanced-search-mobile houzez-adv-price-range" data-sticky='0'>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <form autocomplete="off" method="get" action="https://paris-montmartre-immobilier.fr/advanced-search/">
                    <div class="single-search-wrap">
                        <div class="single-search-inner advance-btn">
                            <button class="table-cell text-left" type="button"><i class="fa fa-gear"></i></button>
                        </div>
                        <div class="single-search-inner single-search">
                            <input type="text" class="form-control" value="" name="keyword" placeholder="Chercher une ville ou un code postal ">
                            <div id="auto_complete_ajax" class="auto-complete"></div>
                        </div>
                        <div class="single-search-inner single-seach-btn">
                            <button class="table-cell text-right" type="submit"><i class="fa fa-search"></i></button>
                        </div>
                    </div>

                    <div class="row">
                                                    <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" id="selected_status" name="status" data-live-search="false" data-live-search-style="begins">
                                    <option value="biens-vendus"> BIENS VENDUS</option><option value="location"> LOCATION</option><option value="vendu"> VENDU</option><option value="vente"> VENTE</option>                                </select>
                                </div>
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                <select class="selectpicker" name="type" data-live-search="false" data-live-search-style="begins">
                                    <option value="">Type de bien</option><option value="appartement"> Appartement</option><option value="appartement-a-renover"> APPARTEMENT A RENOVER</option><option value="appartement-avec-terrasse"> APPARTEMENT AVEC TERRASSE</option><option value="appartement-bourgeois"> APPARTEMENT BOURGEOIS</option><option value="appartement-dexception"> APPARTEMENT DEXCEPTION</option><option value="appt-avec-gde-terrasse"> APPT AVEC GDE TERRASSE</option><option value="atelier-artiste-jardin"> ATELIER ARTISTE + JARDIN</option><option value="au-coeur-des-abbesses"> AU COEUR DES ABBESSES</option><option value="beau-2-pieces"> Beau 2 pieces</option><option value="maison"> Bien Atypique</option><option value="duplex-jardin-privatif"> duplex jardin privatif</option><option value="loft"> LOFT</option><option value="magnifique-2-pieces"> MAGNIFIQUE 2 PIECES</option><option value="maison-2"> MAISON</option><option value="maison-contemporaine"> MAISON CONTEMPORAINE</option><option value="maison-darchitecte"> MAISON DARCHITECTE</option><option value="rue-caulaincourt"> RUE CAULAINCOURT</option><option value="rue-damremont"> RUE DAMREMONT .</option><option value="square-carpeaux"> SQUARE CARPEAUX</option><option value="succession"> SUCCESSION</option><option value="triplex-somptueux"> TRIPLEX SOMPTUEUX</option>                                </select>
                                </div>
                            
                                                        <div class="col-sm-12 col-xs-12 form-group">
                                    <select name="bedrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Chambres</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            
                            
                                
                                

                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="min-area" placeholder="Surface Min  (m²)" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                       
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-price" placeholder="Budget Max" data-live-search="false" data-live-search-style="begins">
                                </div>
                                </div>
                            

                                                </div>

                    <div class="advance-fields">
                        <div class="row">
                            

                            
                            
                            
                            
                            
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <select name="bathrooms" class="selectpicker" data-live-search="false" data-live-search-style="begins" title="">
                                        <option value="">Salle(s) de bain(s)</option>
                                        <option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="any">Tous</option>                                    </select>
                                </div>
                            </div>
                            
                            
                                                        <div class="col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <input type="text" class="form-control" value="" name="max-area" placeholder="Surface Max  (m²)">
                                </div>
                            </div>
                            
                            
                            
                            
                                                                <div class="col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <input type="text" class="form-control" value="" name="min-price" placeholder="Budget Min">
                                        </div>
                                    </div>
                                
                                                                
                            
                            

                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-secondary btn-block houzez-theme-button"><i class="fa fa-search pull-left"></i> Rechercher</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="section-body" class="">
		

<!--start compare panel-->
<div id="compare-controller" class="compare-panel">
    <div class="compare-panel-header">
        <h4 class="title"> Comparer les annonces <span class="panel-btn-close pull-right"><i class="fa fa-times"></i></span></h4>
    </div>
    
        <div id="compare-properties-basket">
                </div>
</div>
<!--end compare panel-->

	
    <!--start detail top-->
     

<section class="detail-top detail-top-full v6 ">
    

        <div class="go-back">
            <div class="col-md-12">
                <a href="#" id="go-back-button" class="previous"><i class="fa fa-angle-left"></i>
<span> Retour à la liste de biens </span></a>    
	</div>
        </div>

        <div id="slider-property-v3" class="slider-pro">
        <div class="sp-slides" >
       

                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150600/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150600/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150600/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150600/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150600/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150600/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150601/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150601/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150601/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150601/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150601/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150601/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150602/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150602/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150602/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150602/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150602/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150602/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150603/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150603/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150603/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150603/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150603/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150603/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150606/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150606/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150606/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150606/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150606/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150606/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150607/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150607/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150607/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150607/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150607/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150607/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150608/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150608/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150608/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150608/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150608/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150608/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150610/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150610/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150610/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150610/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150610/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150610/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg"/>

            </div>
                    <div class="sp-slide" >
                <span class="sp-slide-over"></span>
                <img class="sp-image" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150611/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150611/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-small="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150611/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-medium="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150611/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-large="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150611/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"
                    data-retina="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150611/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg"/>

            </div>
                
    </div>

    </div>
    </section>

    <!--end detail top-->

    
    <!--start detail content-->
    <section class="section-detail-content ">
                        <div class="container">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 container-contentbar">
                            <div id="top-info-bar" class="detail-address detail-block">
    <div class="detail-address-inner">
            <span class="topbar">
                <i class="fa fa-map-marker" style="font-size:20px;margin-right:5px;"></i>
                <span>Lieu : </span> <span>PARIS 18</span></span>                        <span class="topbar"><i class="fa fa-hotel" style="font-size:20px;margin-right:5px;"></i><span>Chambres : </span><span>2</span></span>            <span class="topbar"><i class="fa fa-arrows-h" style="font-size:20px;margin-right:5px;"></i><span>Surface : </span><span>104 m²</span></span>            <span class="topbar"><i class="fa fa-key" style="font-size:20px;margin-right:5px;"></i><span>Référence : </span><span>02100</span></span>                        <span class="topbar"><span class="item-price">1.420.000 €</span></span>    </div>
</div>
                            <div class="detail-bar">

                                <div id="description" class="property-description detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Description </h2>
        <div class="title-right">
                <span class="animated slideInDown label-featured label label-success">Exclusivité</span>
        </div>
    </div>

    
    <p><span style="font-size: 13px; font-family: arial,sans,sans-serif; text-align: center;" data-sheets-value="&quot;}" data-sheets-userformat="" data-sheets-ischild=""></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;">SOUS PROMESSE DE VENTE PAR NOTRE AGENCE .<br />
EXCLUSIVITE , Rue Saint Vincent au pied des Vignes.<br />
Magnifique appartement de 104,10 m2 loi carrez dans immeuble pierre de taille , 3 &#xE8;me &#xE9;tage avec ascenseur et gardien<br />
Entr&#xE9;e, double s&#xE9;jour, cuisine ind&#xE9;pendante am&#xE9;nag&#xE9;e, 2 chambres, 1 salle de bains &#xE0; rafraichir, 1 salle de douche, WC ind&#xE9;pendant, Une cave<br />
CONTACT DIRECT ET VISTES AVEC BORIS GARNODIER au 0624406519</span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span><span style="font-family: arial, sans, sans-serif; font-size: 13px; text-align: center;"></span></p>

    </div>
<div id="address" class="detail-address detail-block target-block">
    <div class="detail-title">
      <h2 class="title-left">Localisation :</h2>
            <div class="title-right">
        <a target="_blank" href="http://maps.google.com/?q=75018,%20PARIS%2018,%20France">Ouvrir avec Google Maps <i class="fa fa-map-marker"></i></a>
      </div>
          </div>
    
    <div><address class="property-address">75018, PARIS 18, France</address></div>    <div class="alert alert-info">
      <ul class="list-three-col">
          <li class="detail-city"><strong>Ville:</strong> PARIS 18</li><li class="detail-zip"><strong>Code Postal:</strong> 75018</li><li class="detail-country"><strong>Pays:</strong> France</li>      </ul>
    </div>
</div><div id="detail" class="detail-list detail-block target-block">
      <div class="detail-title">
        <h2 class="title-left">Informations Financières</h2>
              <div class="title-extra-info">Honoraires charge vendeur</div>
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Prix : </strong> <label>1.420.000 €</label></div></li><li><div class="aivoni-details"><label>Honoraires charge vendeur</label></div></li><li><div class="aivoni-details"><strong>&#xC0; propos de la copropri&#xE9;t&#xE9; : </strong> <label>La copropri&#xE9;t&#xE9; inclut 17 lots pour un montant moyen annuel de la quote part du budget pr&#xE9;visionnel des d&#xE9;penses courantes de 4796 &#x20AC;</label></div></li><li><div class="aivoni-details"><strong>Proc&#xE9;dure syndicat : </strong> <label>Non</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Surfaces</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Surface : </strong> <label>104 m²</label></div></li><li><div class="aivoni-details"><strong>Surface S&#xE9;jour : </strong> <label>37 m²</label></div></li>        </ul>
      </div>
        <div class="detail-title">
        <h2 class="title-left">Récapitulatif</h2>
              
	</div>
      <div class="alert alert-info">
        <ul class="list-two-col">
          <li><div class="aivoni-details"><strong>Référence : </strong> <label>02100</label></div></li><li><div class="aivoni-details"><strong>Chambres : </strong> <label>2</label></div></li><li><div class="aivoni-details"><strong>Salle(s) de Bain(s) : </strong> <label>1</label></div></li><li><div class="aivoni-details"><strong>Année de construction : </strong> <label>1914</label></div></li><li><div class="aivoni-details"><strong>Cuisine : </strong> <label>AMENAGEE</label></div></li><li><div class="aivoni-details"><strong>Chauffage : </strong> <label>COLLECTIF - GAZ -</label></div></li><li><div class="aivoni-details"><strong>Cave(s) : </strong> <label>2</label></div></li><li><div class="aivoni-details"><strong>Pi&#xE8;ces : </strong> <label>5 pi&#xE8;ce(s)</label></div></li><li><div class="aivoni-details"><strong>Etage : </strong> <label>3</label></div></li>        </ul>
      </div>
  </div>
 <div id="features" class="detail-features detail-block target-block">
    <div class="detail-title">
        <h2 class="title-left">Les Plus</h2>
    </div>
    <ul class="list-three-col list-features">
        <li><a href="https://paris-montmartre-immobilier.fr/feature/ascenseur/"><i class="fa fa-check"></i>Ascenseur</a></li>    </ul>
</div>

<div id="graphic" class="detail-features detail-block target-block">
<div class="row">
    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Consommation Énergétique</h2>
        </div>
                    <h5>DPE : F (372 kWh/m² an)</h5>
                <div class="DPE DPE-F"><span>372</span>
        </div>
    </div>


    <div class="col-md-6 DPEBOX">
        <div class="detail-title">
            <h2 class="title-left">Émission de GES</h2>
        </div>
                    <h5>GES : F (71 kg/m² an)</h5>
                <div class="DPE GES GES-F"><span>71</span>
        </div>
    </div>

</div>
</div>



    <div id="agent_bottom" class="detail-contact detail-block target-block  ">
        <div class="detail-title">
            <h2 class="title-left">Informations de contact</h2>
                            <div class="title-right"><strong><a href="">Voir nos annonces</a></strong></div>
                    </div>

                <form method="post" action="#">
        
            <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="80" height="80"></a></div><div class="media-body"><dl><dt>Contact</dt><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><span><i class="fa fa-phone"></i>01 42 62 04 04</span></dd><dd></dd></dl></div></div>            <div class="detail-title-inner">
                                <h4 class="title-inner">Renseignez-vous sur cette propriété</h4>
                            </div>
                                        <input type="hidden" name="target_email" value="&#112;&#109;&#116;ra&#110;s&#97;&#99;tions2&#64;&#103;&#109;&#97;i&#108;.&#99;o&#109;">
                        <input type="hidden" name="agent_contact_form_ajax"
                   value="2f5c66d2c4"/>
            <input type="hidden" name="property_permalink"
                   value="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/"/>
            <input type="hidden" name="property_title"
                   value="APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18"/>
            <input type="hidden" name="action" value="houzez_agent_send_message">

            <div class="row">
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="name"
                               placeholder="Nom" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="phone"
                               placeholder="Téléphone" type="text">
                    </div>
                </div>
                <div class="col-sm-4 col-xs-12">
                    <div class="form-group">
                        <input class="form-control" name="email"
                               placeholder="E-mail " type="email">
                    </div>
                </div>
                <div class="col-sm-12 col-xs-12">
                    <div class="form-group">
                        <textarea class="form-control" name="message" rows="5" placeholder="Méssage">Bonjour, Je suis intéressé par [APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18]</textarea>
                    </div>
                    <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                    <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>
                            J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        
                    </div>
                </div>
            </div>
            <button class="agent_contact_form btn btn-secondary">Envoyer</button>
                                    <div class="form_messages"></div>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </form>
    </div>

                                 
                                    <div id="bareme_prix" class="detail-features detail-block target-block">
                                        <a target="_blank" href="http://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/BaremedesPrestationsParisMontmartreTransactions.pdf">Nos barèmes de prix</a>
                                    </div>
                                

                                
		<div class="property-similer">
			<div class="detail-title">
				<h2 class="title-left">Biens Similaires</h2>
			</div>

				<div class="property-listing list-view">
						<div class="row">
<div id="ID-86506" class="animated fadeIn item-wrap infobox_trigger VENTE item-appartement-bourgeois-3-pices-68-m%c2%b2-paris-18">
    <div class="property-item table-list">
        <div class="table-cell">
            <div class="figure-block">
                <figure class="item-thumb">

                        <span class="animated slideInDown label-featured label label-success">Exclusivité</span>

                    <div class="label-wrap label-right hide-on-list">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>

                    <div class="price hide-on-list"><span class="item-price">750.000 €</span></div>
                    <a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/">
                        <img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />                    </a>
                    <ul class="actions">

        <li>

        <span class="add_fav" data-placement="top" data-toggle="tooltip" data-original-title="Favoris" data-propid="86506"><i class="fa fa-heart-o"></i></span>
    </li>
    
        
        <li>
        <span data-toggle="tooltip" data-placement="top" title="(9) Photos">
            <i class="fa fa-camera"></i>
        </span>
    </li>
    
        <li>
        <span id="compare-link-86506" class="compare-property" data-propid="86506" data-toggle="tooltip" data-placement="top" title="Comparer">
            <i class="fa fa-plus"></i>
        </span>
    </li>
        
    </ul>
                </figure>
            </div>
        </div>
        <div class="item-body table-cell">

            <div class="body-left table-cell">
                <div class="info-row">
                    <div class="label-wrap hide-on-grid">
                        <span  class="label-status label-status-213 label label-default">VENTE</span>

                    </div>
                    <h2 class="property-title"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 68 m² &#8211; PARIS 18</a></h2><div class="hide-on-list"><span class="item-price">750.000 €</span></div><address class="property-address">75018, PARIS 18, France</address>                </div>
                <div class="info-row amenities hide-on-grid">
                    <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 68 m²</span></p>                    <p>APPARTEMENT BOURGEOIS</p>
                </div>

                                <div class="info-row date hide-on-grid">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                                                                
                        <p class="prop-date"><i class="fa fa-slack"></i>R&#201;F: 02099</p>
                                        
                </div>
                
            </div>
            <div class="body-right table-cell hidden-gird-cell">

                <div class="info-row price"><span class="item-price">750.000 €</span></div>
                                <div class="info-row phone text-right">
                    <a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="btn btn-primary">Détails <i class="fa fa-angle-right fa-right"></i></a>
                </div>
            </div>

            <div class="table-list full-width hide-on-list">
                <div class="cell">
                    <div class="info-row amenities">
                        <p><span class="bed">Chambres: 2</span><span class="bath">Salle(s) de bain(s): 1</span><span class="size">Surface: 68 m²</span></p>                        <p>APPARTEMENT BOURGEOIS</p>

                    </div>
                </div>
                <div class="cell">
                    <div class="phone">
                        <a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="btn btn-primary"> Détails <i class="fa fa-angle-right fa-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>

            <div class="item-foot date hide-on-list">
                            <div class="item-foot-left">
                                            <p class="prop-user-agent"><i class="fa fa-user"></i> <a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/">PARIS MONTMARTRE TRANSACTIONS</a> </p>
                                    </div>
            
                                      <div class="item-foot-right">
                    <p class="prop-date"><i class="fa fa-slack"></i>02099</p>
                </div>
        </div>
    
</div>
					</div>
				</div>
			<hr>
		</div>
		
                                
<div class="property-reviews detail-block">
    <div class="detail-title" data-score="0" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
        <h2 class="title-left">
            Aucun Commentaire            <span class="rating-wrap">
                <input class="rating-display-only" name="rating" value="0" type="number" min="0" max="5" step=1 data-size="md" class="rating" >
                <span class="star-text star-text-right">
                    (
                    <span itemprop="ratingValue">0</span> en dehors de                    <span itemprop="bestRating">5</span>
                    )
                </span>
            </span>
        </h2>
        <div class="title-right"><strong><a href="#writ-review-block"> Ecrire un commentaire </a></strong></div>
    </div>
    <ul class="reviews-list">
            </ul>
    <div id="writ-review-block" class="add-review-block">
        <h4 class="review-title"> Ecrire un commentaire </h4>
        <a href="#" data-toggle="modal" data-target="#pop-login">Connectez-vous pour commenter</a>    </div>
</div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 col-md-offset-0 col-sm-offset-3 container-sidebar ">
                            <aside id="sidebar" class="sidebar-white">
    
        <div class="widget widget-contact-agent  ">
            <div class="widget-body">
                <div class="form-small">
                        <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                       </div>
            </div>
        </div>

        
        <div id="houzez_properties-2" class="widget widget_houzez_properties"><div class="widget-top"><h3 class="widget-title">Dernières annonces</h3></div>
		

		<div class="widget-body">

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031030/VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-150x110.jpg" alt="VENDU-02115-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/maison-contemporaine-11-pices-27039-m%c2%b2-meudon/">MAISON CONTEMPORAINE 11 pi&#xE8;ce(s) &#8211; 270,39 m² &#8211; MEUDON</a></h3>
						<h4><span class="item-price item-price-text">-</span></h4>
						<div class="amenities">
							<p>5 Ch • 1 Salle(s) de bain(s) • 270 m²</p>
							<p>MAISON CONTEMPORAINE</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">
								<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/">APPARTEMENT BOURGEOIS 3 pi&#xE8;ce(s) &#8211; 65 m² &#8211; PARIS 18</a></h3>
						<h4>2.185 €&#47;mois cc</h4>
						<div class="amenities">
							<p>1 Chambre • 65 m²</p>
							<p>APPARTEMENT BOURGEOIS</p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">
								<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/properties/7069-01-11195976-a-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/angle-caulaincourt-lamarck/">ANGLE CAULAINCOURT / LAMARCK</a></h3>
						<h4>1.260.000 €</h4>
						<div class="amenities">
							<p></p>
							<p></p>
						</div>
					</div>
				</div>

							
				<div class="media">
					<div class="media-left">
						<figure class="item-thumb">
							<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">
								<img width="150" height="110" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-150x110.jpg 150w, https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200305175455/MD_9412-HDR-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />							</a>
						</figure>
					</div>
					<div class="media-body">
						<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent-2/">RUE SAINT VINCENT</a></h3>
						<h4>1.420.000 €</h4>
						<div class="amenities">
							<p>104 </p>
							<p></p>
						</div>
					</div>
				</div>

						
		</div>


		</div><div id="houzez_featured_properties-5" class="widget widget_houzez_featured_properties"><div class="widget-top"><h3 class="widget-title">Exclusivités</h3></div>            
                        

			<div class="widget-body">

								<div class="property-widget-slider slide-animated">
				
																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-65-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200314031017/LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02116-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.185 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/au-coeur-des-abbesses-4-pices-90-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200313121325/VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02114-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.329.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-1721 label label-default">LOCATION</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-7722-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150044/LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="LOCATION-02101-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">2.230 €&#47;mois cc</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="8 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/magnifique-2-pieces-2-pices-3527-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150223/VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02113-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">449.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="13 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-5-pices-1115-m%c2%b2-meudon/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150124/VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo-385x258.jpg" alt="VENTE-02108-PARIS-MONTMARTRE-TRANSACTIONS-MEUDON-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">735.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/succession-5-pices-10717-m%c2%b2-paris-04/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150641/VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo-385x258.jpg" alt="VENTE-02097-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-04-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.195.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="9 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-3-pices-68-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150533/VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02099-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">750.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="12 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.420.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="14 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/duplex-jardin-privatif-5-pices-119-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150202/VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02081-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">1.990.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

																			
							<div>
								<div class="figure-block">
									<figure class="item-thumb">
                    
											<ul class="list-unstyled actions pull-right">
												<li>
													<span title="" data-placement="right" data-toggle="tooltip" data-original-title="10 Photos">
														<i class="fa fa-camera"></i>
													</span>
												</li>
											</ul>
																					<span class="label-featured label label-success">Exclusivité</span>
																				<div class="label-wrap label-right">
											<span  class="label-status label-status-213 label label-default">VENTE</span>

										</div>

										<a href="https://paris-montmartre-immobilier.fr/property/appartement-3-pices-58-m%c2%b2-paris-18/" class="hover-effect">
											<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150035/VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-385x258.jpg" alt="VENTE-02090-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />										</a>
										<figcaption class="thumb-caption">
											<div class="cap-price pull-left">665.000 €</div>
										</figcaption>
									</figure>
								</div>
							</div>

					

												</div>
												
			</div>


	    </div><div id="houzez_mortgage_calculator-2" class="widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez Vos Mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div><div id="houzez_property_taxonomies-3" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/status/biens-vendus/">BIENS VENDUS</a><span class="cat-count">(26)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/location/">LOCATION</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vendu/">VENDU</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/status/vente/">VENTE</a><span class="cat-count">(17)</span></li></ul></div></div><div id="houzez_property_taxonomies-4" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Type de bien</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div><div id="houzez_property_taxonomies-10" class="widget widget-categories"><div class="widget-top"><h3 class="widget-title">Nos villes</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/city/meudon/">MEUDON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-04/">PARIS 04</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-05/">PARIS 05</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-17/">PARIS 17</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/city/paris-18/">PARIS 18</a><span class="cat-count">(24)</span></li></ul></div></div></aside>                        </div>
                    </div>
                </div>
                    </section>
    <!--end detail content-->

    </div> <!--Start in header, end #section-body-->

    <!--start lightbox-->
    <div id="lightbox-popup-main" class="fade">
    <div class="lightbox-popup">
        <div class="popup-inner">
            <div class="lightbox-left">

                <div class="lightbox-header">
                    <div class="header-title">
                        <p>
                                                        <span>
                                <img src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/logo_7_0.png" alt="APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18" width="86" height="13">
                            </span>
                                                        <span class="hidden-xs">
                            APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                            </span>
                        </p>
                    </div>
                    <div class="header-actions">
                        <ul class="actions">
                            <li class="share-btn">
                                
<div class="share_tooltip tooltip_left fade">
    <a href="http://www.facebook.com/sharer.php?u=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-5-pices-1041-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-facebook"></i></a>
                  <a href="https://twitter.com/intent/tweet?text=APPARTEMENT+BOURGEOIS+5+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+104%2C1+m%C2%B2+%26%238211%3B+PARIS+18&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-5-pices-1041-m%25c2%25b2-paris-18%2F&via=PARIS+MONTMARTRE+TRANSACTIONS" onclick="if(!document.getElementById('td_social_networks_buttons')){window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;}"><i class="fa fa-twitter"></i></a>

                  <a href="http://pinterest.com/pin/create/button/?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-5-pices-1041-m%25c2%25b2-paris-18%2F&amp;media=https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-pinterest"></i></a>

                  <a href="http://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-5-pices-1041-m%25c2%25b2-paris-18%2F&title=APPARTEMENT+BOURGEOIS+5+pi%26%23xE8%3Bce%28s%29+%26%238211%3B+104%2C1+m%C2%B2+%26%238211%3B+PARIS+18&source=https%3A%2F%2Fparis-montmartre-immobilier.fr%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-linkedin"></i></a>

                  <a href="http://plus.google.com/share?url=https%3A%2F%2Fparis-montmartre-immobilier.fr%2Fproperty%2Fappartement-bourgeois-5-pices-1041-m%25c2%25b2-paris-18%2F" onclick="window.open(this.href, 'mywin','left=50,top=50,width=600,height=350,toolbar=0'); return false;"><i class="fa fa-google-plus"></i></a>
                  <a href="mailto:example.com?subject=J'ai trouvé une propriété intéressante pour vous&body=Bonjour, voici un coup de coeur, sur le site de l'agence PARIS MONTMARTRE TRANSACTIONSqui  pourrait vous intéresser: https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/"><i class="fa fa-envelope"></i></a>
</div>
<span title="" data-placement="right" data-toggle="tooltip" data-original-title="partager"><i class="fa fa-share-alt"></i></span>                            </li>
                                                        <li>
                                <span><span class="add_fav" data-placement="right" data-toggle="tooltip" data-original-title="Favoris" data-propid="86382"><i class="fa fa-heart-o"></i></span></span>
                            </li>
                                                                                                                <li class="lightbox-expand visible-xs compress">
                                <span><i class="fa fa-envelope"></i></span>
                            </li>
                                                                                        <li class="lightbox-close">
                                <span><i class="fa fa-close"></i></span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="gallery-area">
                    <div class="slider-placeholder">
                        <div class="loader-inner">

                            <span class="fa fa-spin fa-spinner"></span> Chargement Curseur ...
                        </div>
                    </div>
                                                            <div class="expand-icon lightbox-expand hidden-xs"></div>
                                                                <div class="gallery-inner">
                        <div class="lightbox-slide slide-animated">
                                                                                                <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150559/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150600/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-1.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150601/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-2.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150602/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-3.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150603/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-4.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-5.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150605/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-6.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150606/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-7.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150607/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-8.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150608/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-9.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="1200" height="799" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150610/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-10.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                    <div> <img width="849" height="1200" src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150611/VENTE-02100-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-11.jpg" class="attachment-houzez-imageSize1170_738 size-houzez-imageSize1170_738" alt="" /> </div>
                                                                                    </div>
                    </div>
                    <div class="lightbox-slide-nav visible-xs">
                        <button class="lightbox-arrow-left lightbox-arrow"><i class="fa fa-angle-left"></i></button>
                        <p class="lightbox-nav-title">
                            APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18                            - 75018, PARIS 18, France                        </p>
                        <button class="lightbox-arrow-right lightbox-arrow"><i class="fa fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
                                                <div class="lightbox-right fade in">
                        <div class="lightbox-header hidden-xs">
                            <div class="header-title">
                                <p>1.420.000 €</p>
                            </div>
                            <div class="header-actions">
                                <ul class="actions">
                                    <li class="lightbox-close">
                                        <span><i class="fa fa-close"></i></span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="agent-area">
                            <div class="form-small">
                                    <form method="post" action="#">
    <div class="media agent-media"><div class="media-left"><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/"><img src="http://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20191002123400/logo_paris_montmartre.png" alt="PARIS MONTMARTRE TRANSACTIONS" width="75" height="75"></a></div><div class="media-body"><dl><dd><i class="fa fa-user"></i> PARIS MONTMARTRE TRANSACTIONS</dd><dd><i class="fa fa-phone"></i>01 42 62 04 04</dd><dd><a href="https://paris-montmartre-immobilier.fr/agent/agence-fnaim/" class="view">Voir nos annonces</a></dd></dl></div></div>                                            <input type="hidden" name="target_email" value="nospam@aivoni.com">
                    <input type="hidden" name="agent" value="69820">
                                <input type="hidden" name="agent_contact_form_ajax" value="2f5c66d2c4"/>
                <input type="hidden" name="property_permalink" value="https://paris-montmartre-immobilier.fr/property/appartement-bourgeois-5-pices-1041-m%c2%b2-paris-18/"/>
                <input type="hidden" name="property_title" value="APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18"/>
                <input type="hidden" name="action" value="houzez_agent_send_message">

                <div class="form-group">
                    <input class="form-control" name="name" type="text"
                           placeholder="Nom">
                </div>
                <div class="form-group">
                    <input class="form-control" name="phone" type="text"
                           placeholder="Téléphone">
                </div>
                <div class="form-group">
                    <input class="form-control" name="email" type="email"
                           placeholder="E-mail ">
                </div>
                <div class="form-group">
                    <textarea class="form-control" name="message" rows="4" placeholder="Description ">Bonjour, Je suis intéressé par [APPARTEMENT BOURGEOIS 5 pi&#xE8;ce(s) &#8211; 104,1 m² &#8211; PARIS 18]</textarea>
                </div>
                <div class="form-group conditions">
                        <div class="scroll">
                        <p>
                            Nous vous informons de l’existence de la liste d’opposition au démarchage téléphonique « BLOCTEL » sur laquelle vous pouvez vous inscrire (conso.bloctel.fr).
                        </p>
                        <p>
                            Les informations recueillies sur ce formulaire avec votre consentement sont enregistrées dans un fichier informatisé par AIVONI SAS - 9 rue bartholdi, 92100 Boulogne-Billancourt. Vos données sont destinées à la Société PARIS MONTMARTRE TRANSACTIONS.
                        </p>
                        <p>
                            Elles sont nécessaires au traitement de votre demande et sont conservées pendant 1 an.
                        </p>
                        <p>
                            Vous disposez d’un droit d’accès, de modification, de rectification, d’opposition, de suppression et de portabilité des données vous concernant. Pour toute demande, adressez-vous à pmtransactions2@gmail.com. Vous pouvez introduire une réclamation auprès de la CNIL (www.cnil.fr).
                        </p>
                        </div>
                        <p>    J'accepte:
                        <span class="wpcf7-form-control-wrap radio-524"><span class="wpcf7-form-control wpcf7-radio"><span class="wpcf7-list-item first"><input type="radio" name="radio-524" value="Oui" checked="checked"><span class="wpcf7-list-item-label">Oui</span></span><span class="wpcf7-list-item last"><input type="radio" name="radio-524" value="Non"><span class="wpcf7-list-item-label">Non</span></span></span></span></p>
                        </p>
                </div>    
                <div class="wpcf7-form-control g-recaptcha wpcf7-recaptcha captcha" data-sitekey="6LdfCVoUAAAAALEWzh7FRhPzhxdayNxlSHtEB_QD" ></div>                
                <button class="agent_contact_form btn btn-secondary btn-block">Envoyer</button>
                                <div class="form_messages"></div>
                <script src="https://www.google.com/recaptcha/api.js" async defer></script>
            </form>
                                
                                                   </div>
                        </div>
                    </div>
                                    </div>
    </div>
</div>    <!-- End Lightbox-->



<button class="scrolltop-btn back-top"><i class="fa fa-angle-up"></i></button>

<!--start footer section-->
<footer id="footer-section">
    
    <div class="footer">
	<div class="container">
        <div class="row">

            <div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_contact-2" class="footer-widget widget-contact"><div class="widget-top"><h3 class="widget-title">MÉDIATEUR DE L&rsquo;AGENCE :</h3></div>           
            <div class="widget-body">
                <div class="contact_text">Médiateur : Jean-Philippe Duval</div>
                <ul class="list-unstyled">
                    
                    
                                        <li><i class="fa fa-envelope-o"></i> <a href="mailto:mediation@vivons-mieux-ensemble.fr">mediation@vivons-mieux-ensemble.fr</a></li>
                                    </ul>

                                <p class="read"><a href="http://www.mediation-vivons-mieux-ensemble.fr">Nous contacter <i class="fa fa-caret-right"></i></a></p>
                            </div>

	    </div><div id="houzez_property_taxonomies-8" class="footer-widget widget-categories"><div class="widget-top"><h3 class="widget-title">Types de biens</h3></div><div class="widget-body"><ul class="children"><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement/">Appartement</a><span class="cat-count">(13)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-a-renover/">APPARTEMENT A RENOVER</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-bourgeois/">APPARTEMENT BOURGEOIS</a><span class="cat-count">(8)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/appartement-dexception/">APPARTEMENT DEXCEPTION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/atelier-artiste-jardin/">ATELIER ARTISTE + JARDIN</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/au-coeur-des-abbesses/">AU COEUR DES ABBESSES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/beau-2-pieces/">Beau 2 pieces</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison/">Bien Atypique</a><span class="cat-count">(4)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/duplex-jardin-privatif/">duplex jardin privatif</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/magnifique-2-pieces/">MAGNIFIQUE 2 PIECES</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-2/">MAISON</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-contemporaine/">MAISON CONTEMPORAINE</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/maison-darchitecte/">MAISON DARCHITECTE</a><span class="cat-count">(2)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/rue-damremont/">RUE DAMREMONT .</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/succession/">SUCCESSION</a><span class="cat-count">(1)</span></li><li><a href="https://paris-montmartre-immobilier.fr/property-type/triplex-somptueux/">TRIPLEX SOMPTUEUX</a><span class="cat-count">(1)</span></li></ul></div></div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="search-4" class="footer-widget widget_search"><div class="widget-top"><h3 class="widget-title">Recherche</h3></div><form role="search" method="get" id="searchform" class="searchform" action="https://paris-montmartre-immobilier.fr/">
	<div>
		<input value="" name="s" id="s" type="text" placeholder="Rechercher">
		<button type="submit"></button>
	</div>
</form></div><div id="houzez_mortgage_calculator-5" class="footer-widget widget-calculate"><div class="widget-top"><h3 class="widget-title">Calculez vos mensualités</h3></div>
        <div class="widget-body">
            <form method="" action="#">
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_total_amount" placeholder="Montant du crédit" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_down_payment" placeholder="Apport" type="text">
                    <span class="field-icon">€</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_interest_rate" placeholder="Taux d&#039;intérêt" type="text">
                    <span class="field-icon">%</span>
                </div>
                <div class="form-group icon-holder">
                    <input class="form-control" id="mc_term_years" placeholder="Durée du prêt (années)" type="text">
                    <span class="field-icon"><i class="fa fa-calendar"></i></span>
                </div>
                <div class="form-group icon-holder">
                    <select class="selectpicker" id="mc_payment_period" data-live-search="false" data-live-search-style="begins">
                        <option value="12">Mensuel</option>
                        <option value="26">Bi-mensuel</option>
                        <option value="52">Hebdomadaire</option>
                    </select>
                </div>
                <button id="houzez_mortgage_calculate" class="btn btn-secondary btn-block">Calculer</button>
                <div class="morg-detail">
                    <div class="morg-result">
                        <div id="mortgage_mwbi"></div>
                        <img src="https://paris-montmartre-immobilier.fr/wp-content/themes/houzez/houzez/images/icon_inspector.png" alt="icon inspector" class="show-morg">
                    </div>
                    <div class="morg-summery">
                        <div class="result-title">
                            Montant Financé:                        </div>
                        <div id="amount_financed" class="result-value"></div>

                        <div class="result-title">
                            Paiement récurrent:                        </div>
                        <div id="mortgage_pay" class="result-value"></div>

                        <div class="result-title">
                            Coût annuel du prêt:                        </div>
                        <div id="annual_cost" class="result-value"></div>

                    </div>
                </div>
            </form>
        </div>
        </div></div><div class="col-md-4 col-sm-12 col-xs-12"><div id="houzez_properties_viewed-2" class="footer-widget widget_houzez_properties_viewed"><div class="widget-top"><h3 class="widget-title">Vu récemment</h3></div>            
                        

			<div class="widget-body">

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150700/VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo-150x110.jpg" alt="VENTE-02066-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-18-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/6-pices-149-m%c2%b2-paris-18/">6 pi&#xE8;ce(s) &#8211; 149 m² &#8211; PARIS 18</a></h3>
							<h4>1.290.000 €</h4>
							<div class="amenities">
								<p>3 Ch • 149 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">
									<img src="https://s3.amazonaws.com/aivoni/wp-content/agence96740-images/20200225150024/VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo-150x110.jpg" alt="VENTE-02061-PARIS-MONTMARTRE-TRANSACTIONS-PARIS-05-photo" class="" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/7-pices-17356-m%c2%b2-paris-05/">7 pi&#xE8;ce(s) &#8211; 173,56 m² &#8211; PARIS 05</a></h3>
							<h4>2.350.000 €</h4>
							<div class="amenities">
								<p>4 Ch • 1 Salle(s) de bain(s) • 173 m²</p>
								<p></p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/Meero-photo-00522872-001_watermarked-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-saint-vincent/">RUE SAINT VINCENT</a></h3>
							<h4>1.550.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

									
					<div class="media">
						<div class="media-left">
							<figure class="item-thumb">
								<a class="hover-effect" href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">
									<img width="150" height="110" src="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg" class="attachment-houzez-widget-prop size-houzez-widget-prop" alt="" srcset="https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-150x110.jpg 150w, https://paris-montmartre-immobilier.fr/wp-content/agence96740-images/images/logo-1-350x258.jpg 350w" sizes="(max-width: 150px) 100vw, 150px" />								</a>
							</figure>
						</div>
						<div class="media-body">
							<h3 class="media-heading"><a href="https://paris-montmartre-immobilier.fr/property/rue-des-martyrs/">RUE DES MARTYRS</a></h3>
							<h4>995.000 €</h4>
							<div class="amenities">
								<p></p>
								<p>Appartement</p>
							</div>
						</div>
					</div>

												
			</div>


	    </div></div>        </div>
    </div>
</div>
    <div class="footer-bottom">

    	<div class="container">
            <div class="row">
                                <div class="col-md-3 col-sm-3">
                    <div class="footer-col">
                        <p>PARIS MONTMARTRE TRANSACTIONS  - Tous droits réservés</p>
                    </div>
                </div>
                                <div class="col-md-6 col-sm-6">
                    <div class="footer-col">
                        <div class="navi">
	                        <ul id="footer-menu" class=""><li id="menu-item-75392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-75392"><a href="https://paris-montmartre-immobilier.fr/notre-agence/">Notre Agence</a></li>
<li id="menu-item-9043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9043"><a href="https://paris-montmartre-immobilier.fr/estimation-en-ligne/">Estimation en ligne</a></li>
<li id="menu-item-9046" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9046"><a href="https://paris-montmartre-immobilier.fr/contact/">Contact</a></li>
<li id="menu-item-9045" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9045"><a href="https://paris-montmartre-immobilier.fr/mentionslegales/">Mentions Légales</a></li>
<li id="menu-item-70724" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70724"><a href="https://paris-montmartre-immobilier.fr/acces-vos-donnees-personnelles/">Accès à vos données personnelles</a></li>
<li id="menu-item-70725" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-70725"><a href="https://paris-montmartre-immobilier.fr/cookies/">Cookies</a></li>
</ul>						</div>

                    </div>
                </div>
                
                <div class="col-md-3 col-sm-3">
                    <div class="row">
                            <div class="text-aivoni navi">
                                <p class="top">
                                Site réalisé par <a href="https://aivoni.com" target="_blank">AiVONi</a>.
                                </p>
                                <p class="bottom">
                                Sites / référencement / services informatiques
                                </p>
                                                            </div>
                        </div>
                    </div>
            </div>
        </div>

    </div><!-- End footer bottom -->

</footer>
<!--end footer section-->

<link rel='stylesheet' id='slider-pro.min-group-css' href='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/css/slider-pro.min.css,wp-content/themes/houzez/houzez/slider/css/slider-property-v3.css&#038;ver=1585558881' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Merci de confirmer que vous n\u2019\u00eates pas un robot."}},"cached":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var ctcc_vars = {"expiry":"30","method":"1","version":"1"};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var hz_plugin = {"rating_terrible":"Des situations terribles","rating_poor":"M\u00e9diocre","rating_average":"Moyen ","rating_vgood":"Tr\u00e8s Bon","rating_exceptional":"Exceptionnel"};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez-child/js/aivoni.js,wp-content/themes/houzez/houzez/leaflet/leaflet.markercluster.js,wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js,wp-content/plugins/contact-form-7/includes/js/scripts.js,wp-content/plugins/uk-cookie-consent/assets/js/uk-cookie-consent-js.js,wp-content/themes/houzez/houzez/js/bootstrap.min.js,wp-content/themes/houzez/houzez/js/plugins.js,wp-content/themes/houzez/houzez/js/infobox.js,wp-includes/js/jquery/ui/core.min.js,wp-includes/js/jquery/ui/datepicker.min.js&#038;ver=1585558881'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var uiAutocompleteL10n = {"noResults":"Aucun r\u00e9sultat.","oneResult":"Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir. ","manyResults":"%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.","itemSelected":"\u00c9l\u00e9ment s\u00e9lectionn\u00e9."};
/* ]]> */
</script>
<script type='text/javascript'>
/* <![CDATA[ */
var HOUZEZ_ajaxcalls_vars = {"admin_url":"https:\/\/paris-montmartre-immobilier.fr\/wp-admin\/","houzez_rtl":"no","redirect_type":"diff_page","login_redirect":"","login_loading":"Envoi d'informations de l'utilisateur en cours, patienter...","direct_pay_text":"Traitement, S'il vous pla\u00eet patienter ...","user_id":"0","transparent_menu":"","simple_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_mobile_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_splash":"http:\/\/s3.amazonaws.com\/aivoni\/wp-content\/agence96740-images\/20191002123400\/logo_paris_montmartre.png","retina_logo_height":"","retina_logo_width":"","property_lat":"48.891305","property_lng":"2.3529867","property_map":"false","property_map_street":"","is_singular_property":"yes","process_loader_refresh":"fa fa-spin fa-refresh","process_loader_spinner":"fa fa-spin fa-spinner","process_loader_circle":"fa fa-spin fa-circle-o-notch","process_loader_cog":"fa fa-spin fa-cog","success_icon":"fa fa-check","prop_featured":"Exclusivit\u00e9","featured_listings_none":"You have used all the \"Featured\" listings in your package.","prop_sent_for_approval":"Envoy\u00e9s pour validation","paypal_connecting":"Connexion \u00e0 Paypal ! S'il vous pla\u00eet, attendez... ","mollie_connecting":"Connexion \u00e0 mollie, S'il vous pla\u00eet patienter ... ","confirm":"\u00cates-vous s\u00fbr de vouloir supprimer ?","confirm_featured":"\u00cates-vous s\u00fbr de vouloir faire une liste en vedette?","confirm_featured_remove":"Etes-vous s\u00fbr que vous voulez supprimer de l'\u00e9num\u00e9ration en vedette?","confirm_relist":"Etes-vous s\u00fbr de vouloir remettre en vente cette propri\u00e9t\u00e9?","not_found":"Nous n'avons trouv\u00e9 aucun r\u00e9sultat","for_rent":"for-rent","for_rent_price_range":"for-rent","currency_symbol":"\u20ac","advanced_search_widget_min_price":"0","advanced_search_widget_max_price":"1000000","advanced_search_min_price_range_for_rent":"50","advanced_search_max_price_range_for_rent":"25000","advanced_search_widget_min_area":"100","advanced_search_widget_max_area":"600","advanced_search_price_slide":"0","fave_page_template":"page.php","google_map_style":"[\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 60\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.local\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 30\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ef8c25\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b6c54c\"\r\n            },\r\n            {\r\n                \"lightness\": 40\r\n            },\r\n            {\r\n                \"saturation\": -40\r\n            }\r\n        ]\r\n    },\r\n    {}\r\n]","googlemap_default_zoom":"10","googlemap_pin_cluster":"yes","googlemap_zoom_cluster":"20","map_icons_path":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/","infoboxClose":"https:\/\/paris-montmartre-immobilier.fr\/wp-content\/themes\/houzez\/houzez\/images\/map\/close.png","clusterIcon":"http:\/\/one.aivoni.com\/wp-content\/one-images\/2017\/05\/cursor-1.png","google_map_needed":"yes","paged":"0","search_result_page":"normal_page","search_keyword":"","search_country":"","search_state":"","search_city":"","search_feature":"","search_area":"","search_status":"","search_label":"","search_type":"","search_bedrooms":"","search_bathrooms":"","search_min_price":"","search_max_price":"","search_min_area":"","search_max_area":"","search_publish_date":"","search_no_posts":"10","search_location":"","use_radius":"on","search_lat":"","search_long":"","search_radius":"","transportation":"Transport","supermarket":"Supermarch\u00e9","schools":"\u00c9coles","libraries":"Collections","pharmacies":"Pharmacies","hospitals":"H\u00f4pitaux","sort_by":"","measurement_updating_msg":"En cours de Mise \u00e0 jour... Veuillez patienter.","currency_updating_msg":"Mise \u00e0 jour de la monnaie, S'il vous pla\u00eet patienter ...","currency_position":"after","submission_currency":"USD","wire_transfer_text":"\u00catre pay\u00e9","direct_pay_thanks":"Je vous remercie. S'il vous pla\u00eet v\u00e9rifier votre e-mail pour obtenir des instructions de paiement.","direct_payment_title":"Instructions de paiement direct","direct_payment_button":"ENVOYER MOI LA FACTURE","direct_payment_details":"","measurement_unit":"m\u00b2","header_map_selected_city":[],"thousands_separator":" ","current_tempalte":"","monthly_payment":"Mensualit\u00e9","weekly_payment":"Paiement hebdomadaire","bi_weekly_payment":"Paiement Bi-Hebdomadaire","compare_button_url":"https:\/\/paris-montmartre-immobilier.fr\/comparer-les-biens\/","template_thankyou":"https:\/\/paris-montmartre-immobilier.fr\/","compare_page_not_found":"S'il vous pla\u00eet cr\u00e9er une page \u00e0 l'aide de comparer les propri\u00e9t\u00e9s mod\u00e8le","property_detail_top":"v6","keyword_search_field":"prop_city_state_county","keyword_autocomplete":"1","houzez_date_language":"fr","houzez_default_radius":"50","enable_radius_search":"0","enable_radius_search_halfmap":"0","houzez_primary_color":"#696e71","geocomplete_country":"FR","houzez_logged_in":"no","ipinfo_location":"1","gallery_autoplay":"0","stripe_page":"https:\/\/paris-montmartre-immobilier.fr\/","twocheckout_page":"https:\/\/paris-montmartre-immobilier.fr\/","group_markers":null};
/* ]]> */
</script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/js/i18n/datepicker-fr.js,wp-includes/js/jquery/ui/widget.min.js,wp-includes/js/jquery/ui/position.min.js,wp-includes/js/jquery/ui/menu.min.js,wp-includes/js/wp-a11y.js,wp-includes/js/jquery/ui/autocomplete.min.js,wp-includes/js/jquery/ui/mouse.min.js,wp-includes/js/jquery/jquery.ui.touch-punch.js,wp-content/themes/houzez/houzez/js/aivoni_ajax_calls.js,wp-content/themes/houzez/houzez/js/custom.js&#038;ver=1585558881'></script>
<script type='text/javascript' src='https://paris-montmartre-immobilier.fr/aivoni-min/min/?f=wp-content/themes/houzez/houzez/slider/js/jquery.sliderPro.js&#038;ver=1585558881'></script>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NM7MSFM');</script>
<!-- End Google Tag Manager -->			
				<script type="text/javascript">
					jQuery(document).ready(function($){
												if(!catapultReadCookie("catAccCookies")){ // If the cookie has not been set then show the bar
							$("html").addClass("has-cookie-bar");
							$("html").addClass("cookie-bar-top-bar");
							$("html").addClass("cookie-bar-bar");
															// Wait for the animation on the html to end before recalculating the required top margin
								$("html").on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
									// code to execute after transition ends
									var barHeight = $('#catapult-cookie-bar').outerHeight();
									$("html").css("margin-top",barHeight);
									$("body.admin-bar").css("margin-top",barHeight-32); // Push the body down if the admin bar is active
								});
													}
																	});
				</script>
			
			<div id="catapult-cookie-bar" class=" use_x_close float-accept"><div class="ctcc-inner "><span class="ctcc-left-side">En poursuivant votre navigation, vous acceptez l’utilisation de cookies ou technologies similaires pour disposer de services et offres adaptées à vos centres d’intérêts. <a class="ctcc-more-info-link" tabindex=0 target="_blank" href="https://paris-montmartre-immobilier.fr/cookies/">En savoir plus.</a></span><span class="ctcc-right-side"></span><div class="x_close"><span></span><span></span></div></div><!-- custom wrapper class --></div><!-- #catapult-cookie-bar -->
</body>
</html>

<!-- Dynamic page generated in 0.356 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2020-04-01 17:51:24 -->

<!-- Compression = gzip -->
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:51:24 GMT
recorded_with: VCR 5.1.0
