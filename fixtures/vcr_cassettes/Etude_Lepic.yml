---
http_interactions:
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/tri=id&ordre=DESC
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:18 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=ohhiegi9sap7g93isl8igb7ho0; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:18 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-1099/vente-appartement-3-pieces-1-chambre-paris-75018/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:18 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=nl3fhqbe8aprbiqcvfb0m57v74; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:18 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-1120/vente-appartement-3-pieces-1-chambre-paris-75018/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:19 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=ttugmev226f4k1hsth63rqh6k7; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:19 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-1119/vente-appartement-2-pieces-1-chambre-paris-75018/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:19 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=dpjrfjhk79s68ath8amkh07pg2; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:19 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-1077/vente-appartement-2-pieces-1-chambre-paris-75020/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:19 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=p0kduc2ggtuknhi2mrs238ffs6; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:19 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-1076/vente-appartement-1-piece-paris-75018/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:19 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=4362k3r1dnihnmmk57p8ncob94; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:19 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-1106/vente-appartement-3-pieces-2-chambres-paris-75018/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:19 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=501ntar3q8jmm5cd82gkjg7a52; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:19 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-1102/vente-appartement-1-piece-paris-75002/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:19 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=073pml699odbn8rgd04cqgepp7; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:19 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-1103/vente-duplex-6-pieces-3-chambres-paris-75018/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:20 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=rsn7tjdq2n7hht6u6q36uk2jd2; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIiBsYW5nPSJmciI+CjxoZWFkPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ii8+CgogICAgPHRpdGxlPlZlbnRlIER1cGxleCBQYXJpcyAxOCAoNzUwMTgpIEFCQkVTU0VTIC0gRXR1ZGUgTGVwaWM8L3RpdGxlPgoKICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJEZXNjcmlwdGlmIGR1IGJpZW4gdmVudGUgZHVwbGV4IDYgcGnDqGNlcyBQQVJJUyA3NTAxOCAzIGNoYW1icmVzIDkxLjAyIG3CsiBQcml4IDEgMzAwIDAwMCDigqwgUsOpZsOpcmVuY2UgTkEyLTExMDMiLz4KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJhZ2VuY2UgaW1tb2JpbGnDqHJlIHBhcmlzIDE4w6htZSxhZ2VuY2UgaW1tb2JpbGnDqHJlIHBhcmlzLCA3NTAxOCwgNzUwMDksIDnDqG1lLGFjaGF0LHZlbnRlLGFjaGV0ZXIsdmVuZHJlLGFwcGFydGVtZW50LG1haXNvbixob3RlbCBwYXJ0aWN1bGllcixsb2Z0LGR1cGxleCxldHVkZSBsZXBpYyxwYXJpcyw3NTAxOCw3NTAwOSxpbW1vYmlsaWVyIGRlIGx1eGUgcGFyaXMiIC8+CiAgICA8bWV0YSBuYW1lPSJyZXZpc2l0LWFmdGVyIiBjb250ZW50PSIxMCBkYXlzIiAvPgogICAgPG1ldGEgbmFtZT0iZm9ybWF0LWRldGVjdGlvbiIgY29udGVudD0idGVsZXBob25lPW5vIiAvPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZSIgY29udGVudD0ieWVzIi8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZSIgY29udGVudD0iRXR1ZGUgTGVwaWMiLz4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgiLz4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSIgLz4KCgkKCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL1NjYWxlSW1hZ2UubWluLmpzPzIwMTYwMjEwPSI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL211bHRpcGxlLXNlbGVjdC5taW4uanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19kZWZhdWx0L3Jlc2V0Lm1pbi5jc3MiIC8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL21zZHJvcC5taW4uY3NzIiAvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9zdHlsZS5taW4uY3NzPzIwMjAwMzIzPSIvPgoKICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBocmVmPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2ltYWdlcy9mYXZpY29uLmljbyIgLz4KCiAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuZXR1ZGVsZXBpYy5mci92ZW50ZS1hcHBhcnRlbWVudC1wYXJpcy9yZWYtbmEyLTExMDMvdmVudGUtZHVwbGV4LTYtcGllY2VzLTMtY2hhbWJyZXMtcGFyaXMtNzUwMTgvIiAvPgoKICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1PcGVuK1NhbnM6MzAwLDMwMGksNDAwLDQwMGksNjAwLDYwMGksNzAwLDcwMGksODAwLDgwMGkiIHJlbD0ic3R5bGVzaGVldCI+CgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBocmVmPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjYwLnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSI3Nng3NiIgaHJlZj0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9pbWFnZXMvYXBwbGVUb3VjaEljb243Ni5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTIweDEyMCIgaHJlZj0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9pbWFnZXMvYXBwbGVUb3VjaEljb24xMjAucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvaW1hZ2VzL2FwcGxlVG91Y2hJY29uMTUyLnBuZyI+CgogICAgPGxpbmsgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJhbGV3YXk6ODAwJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4KICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1SYWxld2F5OjYwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+CiAgICA8bGluayBocmVmPSdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTo1MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPgogICAgPGxpbmsgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJhbGV3YXk6NDAwJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4KICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1SYWxld2F5OjMwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+CiAgICA8bGluayBocmVmPSdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheToyMDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPgoKICAgIDxtZXRhIG5hbWU9ImFwcGxpY2F0aW9uLW5hbWUiIGNvbnRlbnQ9IkV0dWRlIExlcGljIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiM4NDExMmMiIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTcweDcwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9pbWFnZXMvbXNUb3VjaC9zbWFsbHRpbGUtNzB4NzAucG5nIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1zcXVhcmUxNTB4MTUwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9pbWFnZXMvbXNUb3VjaC9tZWRpdW10aWxlLTE1MHgxNTAucG5nIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi13aWRlMzEweDE1MGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvaW1hZ2VzL21zVG91Y2gvd2lkZXRpbGUtMzEweDE1MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTMxMHgzMTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2ltYWdlcy9tc1RvdWNoL2xhcmdldGlsZS0zMTB4MzEwLnBuZyIgLz4KCiAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJWZW50ZSBEdXBsZXggUGFyaXMgMTggKDc1MDE4KSBBQkJFU1NFUyIgLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiBJZMOpYWxlbWVudCBzaXR1w6kgZGFucyB1bmUgcGV0aXRlIHJ1ZSBhdSBjYWxtZSBlbiBwbGVpbiBjb2V1ciBkZXMgQWJiZXNzZXMsIGFwcGFydGVtZW50IGVuIGR1cGxleCBkZSA5MSwwMm3CsiBsb2kgQ2FycmV6LHN1ciBkZXV4IG5pdmVhdXguIElsIGNvbXByZW5kLCBhdSA0ZSDDqXRhZ2UsIHVuZSBlbnRyw6llLCB1bmUgY3Vpc2luZSBhbcOpbmFnw6llIGV0IMOpcXVpcMOpZSx1bmUgYnVhbmRlcmllICwgdW5lIGRvdWNoZSwgdW4gZG91YmxlIiAvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmV0dWRlbGVwaWMuZnIvdmVudGUtYXBwYXJ0ZW1lbnQtcGFyaXMvcmVmLW5hMi0xMTAzL3ZlbnRlLWR1cGxleC02LXBpZWNlcy0zLWNoYW1icmVzLXBhcmlzLTc1MDE4LyIgLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmV0dWRlbGVwaWMuZnIvZGF0YXMvYmllbnMvaW1hZ2VzLzYyNy82MjdfMDAtMjAyMC0wMy0wMS0wMzQzLmpwZyIgLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0iYXJ0aWNsZSIgLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6bG9jYWxlIiBjb250ZW50PSJmcl9GUiIgLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6bG9jYWxlOmFsdGVybmF0ZSIgY29udGVudD0iZnJfRlIiIC8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOnNpdGVfbmFtZSIgY29udGVudD0iRXR1ZGUgTGVwaWMiIC8+CgoKCgogICAgPCEtLVtpZiBJRSBdPjxzY3JpcHQgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL21vZGVybml6ci5jdXN0b20uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdGUgSUUgOV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9qcy9wbGFjZWhvbGRlcnMubWluLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgKGd0ZSBJRSA2KSYobHRlIElFIDgpXT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL3NlbGVjdGl2aXpyLW1pbi5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIGx0IElFIDldPjxzY3JpcHQgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL2NzczMtbWVkaWFxdWVyaWVzLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KCgo8L2hlYWQ+CjwhLS1baWYgbHQgSUUgN10+IDxib2R5IGNsYXNzPSJpZSBpZTYgaWU3XyBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU3IGllN18gaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA4XT4gICAgPGJvZHkgY2xhc3M9ImllIGllOCBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDldPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU5IGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDldPiA8Ym9keT48IVtlbmRpZl0tLT4KPCEtLVtpZiAhSUVdPjwhLS0+PGJvZHk+PCEtLTwhW2VuZGlmXS0tPgoJPGRpdiBpZD0ibWFpbiIgY2xhc3M9ImFubm9uY2VzIGRlZmF1bHQiPgogICAgPGhlYWRlcj4KPGEgaHJlZj0iL3NlbGVjdGlvbi8iIHRpdGxlPSJTw6lsZWN0aW9ubmVyIGFubm9uY2UgaW1tb2JpbGnDqHJlIDogMCIgY2xhc3M9InNlbGVjdGlvbiI+CiAgICA8c3BhbiBjbGFzcz0ib3V0Ij48L3NwYW4+PCEtLQogICAgLS0+PHNwYW4gY2xhc3M9ImhvdmVyIj48L3NwYW4+CjwvYT4KPGEgaHJlZj0iI25hdiIgY2xhc3M9ImJ1cmdlckJ0biI+PC9hPgo8ZGl2IGNsYXNzPSJsb2dvIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5ldHVkZWxlcGljLmZyLyIgdGl0bGU9IkltbW9iaWxpZXIgUGFyaXMgRXR1ZGUgTGVwaWMiPgogICAgICAgICAgICA8aW1nIHNyYz0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9pbWFnZXMvbG9nb19hZ2VuY2UucG5nIiBhbHQ9IkV0dWRlIExlcGljIiAvPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgPC9hPgoKPC9kaXY+CjxuYXYgY2xhc3M9Im1lbnUiPgogICAgPHVsIGNsYXNzPSJ0b3AiPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL3NlbGVjdGlvbi8iIHRpdGxlPSIgMCIgY2xhc3M9InNlbGVjdGlvbiI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib3V0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaG92ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wTGFuZyI+PC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9IiNuYXYiIGNsYXNzPSJidG5DbG9zZSI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib3V0Ij48L3NwYW4+PCEtLQogICAgICAgICAgICAgICAgLS0+PHNwYW4gY2xhc3M9ImhvdmVyIj48L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgPC91bD48IS0tCiAgICAtLT48dWwgY2xhc3M9ImxpZW4iPgogICAgICAgIDxsaSBjbGFzcz0iYnVyZ2VyIj4KCTxhIGhyZWY9Imh0dHBzOi8vd3d3LmV0dWRlbGVwaWMuZnIvIiB0aXRsZT0iSW1tb2JpbGllciBQYXJpcyBFdHVkZSBMZXBpYyIgY2xhc3M9ImJ1cmdlciI+PHNwYW4+QWNjdWVpbDwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iY3VycmVudCI+Cgk8YSBocmVmPSIvdmVudGUtYXBwYXJ0ZW1lbnQtcGFyaXMvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iSW1tb2JpbGllciBlbiBWZW50ZSBFdHVkZSBMZXBpYyIgY2xhc3M9ImN1cnJlbnQiPjxzcGFuPk5vcyBiaWVuczwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iIj4KCTxhIGhyZWY9Ii9lc3RpbWF0aW9uLWFwcGFydGVtZW50LXBhcmlzLyIgdGl0bGU9IlZlbmRyZSB2b3RyZSBiaWVuIHN1ciBQYXJpcyIgY2xhc3M9IiI+PHNwYW4+RXN0aW1lci9WZW5kcmU8L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9IiI+Cgk8YSBocmVmPSIvYmllbnMtdmVuZHVzLWFwcGFydGVtZW50LXBhcmlzLyIgdGl0bGU9IkJpZW5zIHZlbmR1cyBwYXIgRXR1ZGUgTGVwaWMiIGNsYXNzPSIiPjxzcGFuPkJpZW5zIHZlbmR1czwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iIj4KCTxhIGhyZWY9Ii9hZ2VuY2VzLWltbW9iaWxpZXJlcy1wcmVzdGlnZS1wYXJpcy8iIHRpdGxlPSJBZ2VuY2VzIEltbW9iaWxpw6hyZXMgRXR1ZGUgTGVwaWMiIGNsYXNzPSIiPjxzcGFuPlF1aSBzb21tZXMtbm91cyA/PC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSJidXJnZXIiPgoJPGEgaHJlZj0iL2ltbW9iaWxpZXItcHJlc3RpZ2UtbW9udG1hcnRyZS8iIHRpdGxlPSJNb250bWFydHJlICBFdHVkZSBMZXBpYyIgY2xhc3M9ImJ1cmdlciI+PHNwYW4+Tm90cmUgcXVhcnRpZXIgOiBNb250bWFydHJlPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSIiPgoJPGEgaHJlZj0iL3RlbW9pZ25hZ2VzLyIgdGl0bGU9IlTDqW1vaWduYWdlcyBFdHVkZSBMZXBpYyIgY2xhc3M9IiI+PHNwYW4+VMOpbW9pZ25hZ2VzPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSJidXJnZXIiPgoJPGEgaHJlZj0iL2FjdHVhbGl0ZXMvIiB0aXRsZT0iTm91dmVhdXTDqXMgRXR1ZGUgTGVwaWMiIGNsYXNzPSJidXJnZXIiPjxzcGFuPkFjdHVhbGl0w6lzPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSJidXJnZXIiPgoJPGEgaHJlZj0iL2FxdWVyaXItYXBwYXJ0ZW1lbnQtcGFyaXMvIiB0aXRsZT0iUmVjaGVyY2hlIGltbW9iaWxpw6hyZSBQYXJpcyIgY2xhc3M9ImJ1cmdlciI+PHNwYW4+QWNxdcOpcmlyPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSIiPgoJPGEgaHJlZj0iL2NvbnRhY3QvIiB0aXRsZT0iQ29udGFjdGV6IGzigJlhZ2VuY2UgaW1tb2JpbGnDqHJlIEV0dWRlIExlcGljIiBjbGFzcz0iIj48c3Bhbj5Db250YWN0PC9zcGFuPjwvYT4KPC9saT4KCiAgICA8L3VsPgo8L25hdj4KPHNwYW4gY2xhc3M9Imljb19tZW51Ij48L3NwYW4+CjwvaGVhZGVyPgo8c2NyaXB0PgovLzwhW0NEQVRBWwooZnVuY3Rpb24oKXsKICAgIHZhciBpc01lbnVPcGVuID0gZmFsc2U7CgogICAgdmFyIHBsYWNlTWVudSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaWYoJCgnaGVhZGVyJykuaGFzQ2xhc3MoJ2J1cmdlcmVkJykpewogICAgICAgICAgICAkKCdoZWFkZXIgbmF2Lm1lbnUnKS5jc3MoewogICAgICAgICAgICAgICAgJ3JpZ2h0JyA6IC0kKHdpbmRvdykub3V0ZXJXaWR0aCh0cnVlKSwKICAgICAgICAgICAgICAgICdkaXNwbGF5JyA6ICdub25lJwogICAgICAgICAgICB9KTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJCgnaGVhZGVyIG5hdi5tZW51JykuY3NzKHsKICAgICAgICAgICAgICAgICdyaWdodCcgOiAnJywKICAgICAgICAgICAgICAgICdkaXNwbGF5JyA6ICcnCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KCiAgICB2YXIgb3Blbk1lbnUgPSBmdW5jdGlvbigpewogICAgICAgICQoJy5idXJnZXJCdG4nKS5jbGljayhmdW5jdGlvbigpewogICAgICAgICAgICBpZigkKCdoZWFkZXInKS5oYXNDbGFzcygnYnVyZ2VyZWQnKSl7CiAgICAgICAgICAgICAgICAkKCJodG1sLCBib2R5IikuYW5pbWF0ZSh7IHNjcm9sbFRvcDogMCB9LDIwMCxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAkKCdoZWFkZXIgbmF2Lm1lbnUnKS5mYWRlSW4oNTApOwogICAgICAgICAgICAgICAgICAgICAgICAkKCdoZWFkZXIgbmF2Lm1lbnUnKS5zdG9wKHRydWUsdHJ1ZSkuYW5pbWF0ZSh7J3JpZ2h0JzonMCd9LDIwMCxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnbmF2Lm1lbnUgLmxpZW4nKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOigkKHdpbmRvdykuaGVpZ2h0KCktJCgnbmF2Lm1lbnUgLnRvcCcpLm91dGVySGVpZ2h0KHRydWUpKSsncHgnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzonYXV0bycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnbWFpbicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6KCQod2luZG93KS5oZWlnaHQoKS0oJCgnaGVhZGVyJykub3V0ZXJIZWlnaHQodHJ1ZSkrJCgnZm9vdGVyJykub3V0ZXJIZWlnaHQodHJ1ZSkpKSsncHgnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICB2YXIgY2xvc2VNZW51ID0gZnVuY3Rpb24oKXsKICAgICAgICAkKCcuYnRuQ2xvc2UnKS5jbGljayhmdW5jdGlvbigpewogICAgICAgICAgICBpZigkKCdoZWFkZXInKS5oYXNDbGFzcygnYnVyZ2VyZWQnKSl7CiAgICAgICAgICAgICAgICAkKCdoZWFkZXIgbmF2Lm1lbnUnKS5mYWRlT3V0KDI1MCk7CiAgICAgICAgICAgICAgICAkKCdoZWFkZXIgbmF2Lm1lbnUnKS5zdG9wKHRydWUsdHJ1ZSkuYW5pbWF0ZSh7J3JpZ2h0JzonLTEwMCUnfSwyNTApOwogICAgICAgICAgICAgICAgJCgnbWFpbicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6JycsCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgJCgnbmF2Lm1lbnUgLmxpZW4nKS5jc3MoewogICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOicnLAogICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzonJywKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICB2YXIgbWVudVdpZHRoID0gKCgkKCd1bC5saWVuIGxpOm5vdCguYnVyZ2VyKSBhJykub3V0ZXJXaWR0aCh0cnVlKSs1NCkqJCgndWwubGllbiBsaTpub3QoLmJ1cmdlciknKS5sZW5ndGgpKzU1MDsKCiAgICB2YXIgZm5DaGVja0J1cmdlciA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaWYobWVudVdpZHRoPiQod2luZG93KS5vdXRlcldpZHRoKHRydWUpKXsKICAgICAgICAgICAgJCgnaGVhZGVyLGZvb3RlcicpLmFkZENsYXNzKCdidXJnZXJlZCcpOwogICAgICAgICAgICAkKCcuaWNvX21lbnUnKS5hZGRDbGFzcygndmlzaWJsZScpOwogICAgICAgICAgICAkKCdoZWFkZXIgbmF2Lm1lbnUnKS5mYWRlT3V0KDI1MCk7CiAgICAgICAgICAgICQoJ2hlYWRlciBuYXYubWVudScpLnN0b3AodHJ1ZSx0cnVlKS5hbmltYXRlKHsncmlnaHQnOictMTAwJSd9LDI1MCk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICQoJ2hlYWRlcixmb290ZXInKS5yZW1vdmVDbGFzcygnYnVyZ2VyZWQnKTsKICAgICAgICAgICAgJCgnLmljb19tZW51JykucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTsKICAgICAgICAgICAgJCgnaGVhZGVyIG5hdi5tZW51JykuY3NzKHsKICAgICAgICAgICAgICAgICdkaXNwbGF5JzonJywKICAgICAgICAgICAgICAgICdyaWdodCc6JycKICAgICAgICAgICAgfSkKICAgICAgICB9CiAgICB9CgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CiAgICAgICAgZm5DaGVja0J1cmdlcigpOwogICAgICAgIHBsYWNlTWVudSgpOwogICAgICAgIG9wZW5NZW51KCk7CiAgICAgICAgY2xvc2VNZW51KCk7CiAgICB9KTsKICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICBmbkNoZWNrQnVyZ2VyKCk7CiAgICB9KTsKfSkoKTsKLy9dXT4KPC9zY3JpcHQ+CgogICAgPG1haW4+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL21hal9zZWxlY3Rpb24ubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgdmFyIG1lc3NhZ2UgPSBuZXcgQXJyYXkoJ0NldHRlIGFubm9uY2UgYSDDqXTDqSBham91dMOpZSDDoCB2b3RyZSBzw6lsZWN0aW9uLicsJ0NldHRlIGFubm9uY2UgZXN0IGTDqWrDoCBkYW5zIHZvdHJlIHPDqWxlY3Rpb24uJyk7Cjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL2pxdWVyeS5jeWNsZTIubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9qcy9qcXVlcnkuY3ljbGUyLnN3aXBlLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvanMvanF1ZXJ5LnNoYXJycmUubWluLmpzIj48L3NjcmlwdD4KPHNlY3Rpb24gY2xhc3M9ImFubm9uY2UgZGV0YWlscyI+CiAgICA8YXJ0aWNsZSBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGU9IiIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICA8ZmlndXJlPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdG5EaWFwbyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sX2N0biI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImN5Y2xlLXByZXYiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXh0ZXJuLXBhZ2VyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImN5Y2xlLW5leHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBpZD0iZGlhcG9yYW1hUHJvZmlsIiBjbGFzcz0idHJpZ2dlckhEIiBkYXRhLWN5Y2xlLWxvZz0iZmFsc2UiIGRhdGEtY3ljbGUtcGFnZXI9Ii5leHRlcm4tcGFnZXIiIGRhdGEtY3ljbGUtcGFnZXItdGVtcGxhdGU9IjxzcGFuIGNsYXNzPSdwYWdlcic+PC9zcGFuPiIgZGF0YS1jeWNsZS1wcmV2PSIuY3ljbGUtcHJldiIgZGF0YS1jeWNsZS1uZXh0PSIuY3ljbGUtbmV4dCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ic3BhY2VyQmxvY2tlciIgc3JjPSIvdGhlbWUvX2RlZmF1bHQvaW1hZ2VzL3NwYWNlci5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJhdXRvU2NhbGUiIGl0ZW1wcm9wPSJpbWFnZSIgc3JjPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzYyNy82MjdfMDAtMjAyMC0wMy0wMS0wMzQzLmpwZyIgYWx0PSJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mb3NCaWVuUGhvdG8iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIiBpdGVtcHJvcD0iY2F0ZWdvcnkiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvU2luZ2xlRmFtaWx5UmVzaWRlbmNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgZHVwbGV4PG1ldGEgaXRlbXByb3A9Im51bWJlck9mUm9vbXMiIGNvbnRlbnQ9IjYiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJmbG9vclNpemUiIGNvbnRlbnQ9IjkxLjAyIG3CsiIgLz4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImFkZHJlc3MiIGl0ZW1zY29wZT0iIiBpdGVtcHJvcD0iYXZhaWxhYmxlQXRPckZyb20iIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9QbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1Bvc3RhbEFkZHJlc3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUEFSSVMgKDc1MDE4KTxtZXRhIGl0ZW1wcm9wPSJwb3N0YWxDb2RlIiBjb250ZW50PSI3NTAxOCIgLz48bWV0YSBpdGVtcHJvcD0iYWRkcmVzc0xvY2FsaXR5IiBjb250ZW50PSJQQVJJUyAxOCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9InF1YXJ0aWVyIj4gQUJCRVNTRVM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgMSAzMDAgMDAwICZldXJvOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InByaWNlIiBjb250ZW50PSIxMzAwMDAwLjAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icHJpY2VDdXJyZW5jeSIgY29udGVudD0iJmV1cm87IiAvPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGZpZ2NhcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVmIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlkZW8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRyaWdnZXJIRCBub0xpbmsiIHRpdGxlPSJPdXZyaXIgbGVzIGltYWdlcyBlbiBwbGVpbiDDqWNyYW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImljbyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5ub25jZV9yZWYiPlLDqWYuIDogTkEyLTExMDM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZmlnY2FwdGlvbj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaGFkb3ciPjwvZGl2PgogICAgICAgIDwvZmlndXJlPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbmV1ckRldGFpbCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJsb2NQaWN0b0xpbmtCYWNrIj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlua19iYWNrIj4KICAgICAgICAgICAgICAgIDwvdWw+PHVsIGNsYXNzPSJwaWN0byI+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdXJmYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3RuLWxpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0byI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR4dCI+OTEuMDI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwaWVjZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdG4tbGkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHh0Ij42PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY2hhbWJyZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdG4tbGkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHh0Ij4zPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2RiIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3RuLWxpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0byI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR4dCI+MTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNhbGxlc19lYXUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdG4tbGkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHh0Ij4xPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD48dWwgY2xhc3M9ImxpbmtfYmFjayI+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlsIj4KICAgICAgICAgICAgICAgIDxoMSBpdGVtcHJvcD0ibmFtZSI+VmVudGUgRHVwbGV4IFBhcmlzIDE4ICg3NTAxOCkgQUJCRVNTRVM8L2gxPgogICAgICAgICAgICAgICAgPGRpdiBpdGVtcHJvcD0iZGVzY3JpcHRpb24iIGNsYXNzPSJkZXNjcmlwdGlvbiI+IElkw6lhbGVtZW50IHNpdHXDqSBkYW5zIHVuZSBwZXRpdGUgcnVlIGF1IGNhbG1lIGVuIHBsZWluIGNvZXVyIGRlcyBBYmJlc3NlcywgYXBwYXJ0ZW1lbnQgZW4gZHVwbGV4IGRlIDkxLDAybcKyIGxvaSBDYXJyZXosc3VyIGRldXggbml2ZWF1eC4gSWwgY29tcHJlbmQsIGF1IDRlIMOpdGFnZSwgdW5lIGVudHLDqWUsIHVuZSBjdWlzaW5lIGFtw6luYWfDqWUgZXQgw6lxdWlww6llLHVuZSBidWFuZGVyaWUgLCB1bmUgZG91Y2hlLCB1biBkb3VibGUgc8Opam91ciBhdmVjIDMgZmVuw6p0cmVzIGRlIDI3IG3CsiBiw6luw6lmaWNpYW50IGQndW5lIHZ1ZSBtYWduaWZpcXVlIHN1ciBsZSBTQUNSRSBDT0VVUiAsdW5lIGNoYW1icmUgZXQgc2Egc2FsbGUgZGUgYmFpbi4gw4AgbCfDqXRhZ2Ugc3Vww6lyaWV1ciwgdW5lIGNoYW1icmUgZXQgdW4gYnVyZWF1IGF2ZWMgdnVlIG1hZ25pZmlxdWUgc3VyIFBhcmlzIE91ZXN0LiBDZXQgYXBwYXJ0ZW1lbnQgYXR5cGlxdWUgYXV4IHRyw6hzIGJlYXV4IHZvbHVtZXMgc2F1cmEgc8OpZHVpcmUgcGFyIHNhIHZ1ZSwgZXQgc29uIHBsYW4gc2FucyBwZXJ0ZSBkZSBwbGFjZS4gUmFyZSDDoCBNb250bWFydHJlISA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJwaWN0byI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1cmZhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0bi1saSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0byI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHh0Ij45MS4wMjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBpZWNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3RuLWxpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eHQiPjY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjaGFtYnJlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3RuLWxpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eHQiPjM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZGIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0bi1saSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0byI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHh0Ij4xPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2FsbGVzX2VhdSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3RuLWxpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eHQiPjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mb0ZpbmFuY2UiPgogICAgICAgICAgICAgICAgICAgIDxoMj5JbmZvcm1hdGlvbnMgZmluYW5jacOocmVzPC9oMj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMSAzMDAgMDAwICZldXJvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icHJpY2UiIGNvbnRlbnQ9IjEzMDAwMDAuMDAiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icHJpY2VDdXJyZW5jeSIgY29udGVudD0iJmV1cm87IiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcmljZV9sZWdlbmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSG9ub3JhaXJlcyBpbmNsdXMKICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2VfZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+MSAyNTAgMDAwICZldXJvOyBIb25vcmFpcmVzIGV4Y2x1czwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhvbm9yYWlyZXMgZGUgNCUgVFRDIMOgIGxhIGNoYXJnZSBkZSBsJ2FjcXXDqXJldXI8L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0idG9vbHMiPgogICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImFMaWtlIGFqb3V0X3NlbGVjdGlvbiIgZGF0YS1iaWVuaWQ9IjYyNyIgdGl0bGU9IkFqb3V0ZXIgw6AgbWEgc8OpbGVjdGlvbiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHNwYW4gY2xhc3M9ImFMaWtlIGVudm9pX2FtaSIgZGF0YS1iaWVuaWQ9IjYyNyIgdGl0bGU9IkVudm95ZXIgYW5ub25jZSBpbW1vYmlsacOocmUiPjwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHNwYW4gY2xhc3M9ImFMaWtlIHNoYXJlIiBkYXRhLWJpZW5pZD0iNjI3IiB0aXRsZT0iUGFydGFnZXIgY2V0dGUgYW5ub25jZSI+PC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0icHJpbnQiIHJlbD0ibm9mb2xsb3ciIGhyZWY9Ii9pbXByZXNzaW9uL2RldGFpbHMvNjI3LyZhbXA7bW9iaWxlPTAiIHRpdGxlPSJJbXByaW1lciBhbm5vbmNlIGltbW9iaWxpw6hyZSIgdGFyZ2V0PSJfYmxhbmsiPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9Im1lbnRpb24iIHJlbD0ibm9mb2xsb3ciIGhyZWY9Ii9tZW50aW9ucy1sZWdhbGVzLWJhcmVtZS8iIHRpdGxlPSJJbmZvcm1hdGlvbnMganVyaWRpcXVlcyBFdHVkZSBMZXBpYyI+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvbmF2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW50ZXJsb2N1dGV1ciIgaXRlbXByb3A9InNlbGxlciIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9SZWFsRXN0YXRlQWdlbnQiPgogICAgICAgICAgICAgICAgICAgIDxoMj5Wb3RyZSBpbnRlcmxvY3V0ZXVyPC9oMj4KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFnZW5jZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aDMgaXRlbXByb3A9Im5hbWUiPkV0dWRlIExlcGljPC9oMz48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFkZHJlc3MiIGl0ZW1wcm9wPSJhZGRyZXNzIiAgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9Qb3N0YWxBZGRyZXNzIj48c3Bhbj40NSBSdWUgTGVwaWMgLQogICAgICAgICAgICAgICAgICAgICAgICA3NSAwMTgmbmJzcDtQQVJJUzwvc3Bhbj48bWV0YSBpdGVtcHJvcD0ic3RyZWV0QWRkcmVzcyIgY29udGVudD0iNDUgUnVlIExlcGljIiAvPjxtZXRhIGl0ZW1wcm9wPSJhZGRyZXNzTG9jYWxpdHkiIGNvbnRlbnQ9IlBBUklTIiAvPjxtZXRhIGl0ZW1wcm9wPSJwb3N0YWxDb2RlIiBjb250ZW50PSI3NSAwMTgiIC8+PG1ldGEgaXRlbXByb3A9ImFkZHJlc3NMb2NhbGl0eSIgY29udGVudD0iUEFSSVMiIC8+PG1ldGEgaXRlbXByb3A9ImFkZHJlc3NDb3VudHJ5IiBjb250ZW50PSJGcmFuY2UiLz48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9InRlbGVwaG9uZSIgY2xhc3M9InRlbGVwaG9uZSI+PGEgaHJlZj0idGVsOjAxIDQyIDU4IDExIDExIj4wMSA0MiA1OCAxMSAxMTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbnRhY3RfYW5ub25jZSIgY2xhc3M9ImFubm9uY2VfZm9ybSI+CiAgICAgICAgICAgICAgICAgICAgPGgyPkRlbWFuZGUgZGUgcmVuc2VpZ25lbWVudHM8L2gyPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJjb250YWN0IHZhbGlkYXRlX2Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIjY29udGFjdF9hbm5vbmNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImhvbmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IndlYnNpdGUiPlZldWlsbGV6IGxhaXNzZXIgbGEgdmFsZXVyIGluaXRpYWxlIGRlIGNlIGNoYW1wPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ3ZWJzaXRlIiBpZD0id2Vic2l0ZSIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9InNlbGZfaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsYXN0X25hbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0ibGFzdF9uYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJsYXN0X25hbWUiIGNsYXNzPSJyZXF1aXJlZCBpY29fcHJvZmlsIiB2YWx1ZT0iIiBwbGFjZWhvbGRlcj0iTm9tKiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+PCEtLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9Imxhc3RfbmFtZSIgLz48IS0tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLT48bGFiZWwgZm9yPSJmaXJzdF9uYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImZpcnN0X25hbWUiIHR5cGU9InRleHQiIG5hbWU9ImZpcnN0X25hbWUiIGNsYXNzPSJpY29fcHJvZmlsIiB2YWx1ZT0iIiBwbGFjZWhvbGRlcj0iUHLDqW5vbSoiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPjwhLS0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJmaXJzdF9uYW1lIiAvPjwhLS0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsYWJlbCBmb3I9ImVtYWlsIiBjbGFzcz0icGFyX2VtYWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImVtYWlsIiB0eXBlPSJ0ZXh0IiBuYW1lPSJlbWFpbCIgdmFsdWU9IiIgY2xhc3M9InJlcXVpcmVkIGVtYWlsIGljb19tYWlsIiBwbGFjZWhvbGRlcj0iRW1haWwqIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD48IS0tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0iZW1haWwiIC8+PCEtLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+PGxhYmVsIGZvcj0icGhvbmUiIGNsYXNzPSJwX3RlbGVwaG9uZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJwaG9uZSIgdHlwZT0idGV4dCIgbmFtZT0icGhvbmUiIHZhbHVlPSIiIGNsYXNzPSJyZXF1aXJlZCBpY29fdGVsIiBwbGFjZWhvbGRlcj0iVMOpbMOpcGhvbmUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtZXNzYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0ibWVzc2FnZSIgbmFtZT0ibWVzc2FnZSIgY2xhc3M9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iTWVzc2FnZSI+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJob25leSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyc243dGpkcTJuN2hodDZ1NnEzNnVrMmpkMiI+VmV1aWxsZXogbGFpc3NlciBsYSB2YWxldXIgaW5pdGlhbGUgZGUgY2UgY2hhbXA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InJzbjd0amRxMm43aGh0NnU2cTM2dWsyamQyIiBpZD0icnNuN3RqZHEybjdoaHQ2dTZxMzZ1azJqZDIiIHZhbHVlPSJyc243dGpkcTJuN2hodDZ1NnEzNnVrMmpkMiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9ibGlnYXRvaXJlIj4qIGNoYW1wcyBvYmxpZ2F0b2lyZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlkIiBpZD0iaWQiIHZhbHVlPSI2MjciIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImJpZW5fcmVmIiBpZD0iYmllbl9yZWYiIHZhbHVlPSJOQTItMTEwMyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmNlX2lkIiBpZD0iYWdlbmNlX2lkIiB2YWx1ZT0iMSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3ViamVjdCIgaWQ9InN1YmplY3QiIHZhbHVlPSJDb250YWN0QW5ub25jZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiBuYW1lPSJzZW5kX2VtYWlsIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJFbnZveWVyIi8+CiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgIAo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkvLzwhW0NEQVRBWwoKCXZhciBhZ2VuY3kgPSBbXTsKCglmdW5jdGlvbiBhZmZpY2hhZ2VUeHQoYXJyYXlBZ2VuY3kpewogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VOYW1lJykuZWFjaChmdW5jdGlvbigpeyQodGhpcykudGV4dChhcnJheUFnZW5jeVswXS5uYW1lKTt9KTsKICAgICAgICAkKCdhcnRpY2xlLm1hbmRhdG9yeVR4dCAuYWdlbmNlQWRkcmVzcycpLnRleHQoYXJyYXlBZ2VuY3lbMF0uYWRkcmVzcyk7CiAgICAgICAgJCgnYXJ0aWNsZS5tYW5kYXRvcnlUeHQgLmFnZW5jZU1haWwnKS50ZXh0KGFycmF5QWdlbmN5WzBdLm1haWwpOwogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VNYWlsJykuYXR0cignaHJlZicsJ21haWx0bzonK2FycmF5QWdlbmN5WzBdLm1haWwpOwoKICAgICAgICBhZ2VuY3kgPSBbXTsgLy8gb24gdmlkZSBsZSB0YWJsZWF1Cgl9CgoJZnVuY3Rpb24gYWdlbmNlTWFueSgpewoJCWFnZW5jeS5wdXNoKHsKCQkJbmFtZTokKCdzZWxlY3QjYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbmFtZScpLCBhZGRyZXNzOiQoJ3NlbGVjdCNhZ2VuY2VfaWQgb3B0aW9uW3ZhbHVlPTFdJykuYXR0cignZGF0YS1sb2NhbGlzYXRpb24nKSwgbWFpbDokKCdzZWxlY3QjYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbWFpbCcpCgkJfSk7CgoJCWFmZmljaGFnZVR4dChhZ2VuY3kpOwoKCQkkKCdzZWxlY3QjYWdlbmNlX2lkJykub24oJ2NoYW5nZScsZnVuY3Rpb24oKXsKCQkJYWdlbmN5LnB1c2goewoJCQkJbmFtZTokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLW5hbWUnKSwgYWRkcmVzczokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLWxvY2FsaXNhdGlvbicpLCBtYWlsOiQodGhpcykuY2hpbGRyZW4oIjpzZWxlY3RlZCIpLmF0dHIoJ2RhdGEtbWFpbCcpCgkJCX0pOwoJCQlhZmZpY2hhZ2VUeHQoYWdlbmN5KTsKCQl9KTsKCX0KCgkvL11dPgo8L3NjcmlwdD4KCgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkJLy88IVtDREFUQVsKCgkJYWdlbmN5LnB1c2goewoJCQluYW1lOiJFdHVkZSBMZXBpYyAiLCBhZGRyZXNzOiI0NSBSdWUgTGVwaWMgNzUgMDE4IFBBUklTIiwgbWFpbDoiY29udGFjdEBldHVkZWxlcGljLmZyIgoJCX0pOwoKCQlhZmZpY2hhZ2VUeHQoYWdlbmN5KTsKCgkJLy9dXT4KCTwvc2NyaXB0PgoKCgoKCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2FydGljbGU+Cjwvc2VjdGlvbj4KPCEtLSBSb290IGVsZW1lbnQgb2YgUGhvdG9Td2lwZS4gTXVzdCBoYXZlIGNsYXNzIHBzd3AuIC0tPgo8ZGl2IGNsYXNzPSJwc3dwIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgPCEtLSBCYWNrZ3JvdW5kIG9mIFBob3RvU3dpcGUuCiAgICBJdCdzIGEgc2VwYXJhdGUgZWxlbWVudCwgYXMgYW5pbWF0aW5nIG9wYWNpdHkgaXMgZmFzdGVyIHRoYW4gcmdiYSgpLiAtLT4KICAgIDxkaXYgY2xhc3M9InBzd3BfX2JnIj48L2Rpdj4KICAgIDwhLS0gU2xpZGVzIHdyYXBwZXIgd2l0aCBvdmVyZmxvdzpoaWRkZW4uIC0tPgogICAgPGRpdiBjbGFzcz0icHN3cF9fc2Nyb2xsLXdyYXAiPgogICAgICAgIDwhLS0gQ29udGFpbmVyIHRoYXQgaG9sZHMgc2xpZGVzLgogICAgICAgICAgICBQaG90b1N3aXBlIGtlZXBzIG9ubHkgMyBvZiB0aGVtIGluIERPTSB0byBzYXZlIG1lbW9yeS4KICAgICAgICAgICAgRG9uJ3QgbW9kaWZ5IHRoZXNlIDMgcHN3cF9faXRlbSBlbGVtZW50cywgZGF0YSBpcyBhZGRlZCBsYXRlciBvbi4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY29udGFpbmVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIERlZmF1bHQgKFBob3RvU3dpcGVVSV9EZWZhdWx0KSBpbnRlcmZhY2Ugb24gdG9wIG9mIHNsaWRpbmcgYXJlYS4gQ2FuIGJlIGNoYW5nZWQuIC0tPgogICAgICAgIDxpbWcgY2xhc3M9InNwYWNlckJsb2NrZXIiIHNyYz0iL3RoZW1lL19kZWZhdWx0L2ltYWdlcy9zcGFjZXIucG5nIiBhbHQ9IiIgc3R5bGU9InotaW5kZXg6MDsiIC8+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fdWkgcHN3cF9fdWktLWhpZGRlbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3RvcC1iYXIiPgogICAgICAgICAgICAgICAgPCEtLSAgQ29udHJvbHMgYXJlIHNlbGYtZXhwbGFuYXRvcnkuIE9yZGVyIGNhbiBiZSBjaGFuZ2VkLiAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NvdW50ZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tY2xvc2UiIHRpdGxlPSJDbG9zZSAoRXNjKSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1zaGFyZSIgdGl0bGU9IlNoYXJlIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWZzIiB0aXRsZT0iVG9nZ2xlIGZ1bGxzY3JlZW4iPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tem9vbSIgdGl0bGU9Ilpvb20gaW4vb3V0Ij48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwhLS0gUHJlbG9hZGVyIGRlbW8gaHR0cDovL2NvZGVwZW4uaW8vZGltc2VtZW5vdi9wZW4veXlCV29SIC0tPgogICAgICAgICAgICAgICAgPCEtLSBlbGVtZW50IHdpbGwgZ2V0IGNsYXNzIHBzd3BfX3ByZWxvYWRlci0tYWN0aXZlIHdoZW4gcHJlbG9hZGVyIGlzIHJ1bm5pbmcgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19wcmVsb2FkZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9faWNuIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fY3V0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19kb251dCI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2hhcmUtbW9kYWwgcHN3cF9fc2hhcmUtbW9kYWwtLWhpZGRlbiBwc3dwX19zaW5nbGUtdGFwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3NoYXJlLXRvb2x0aXAiPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLWxlZnQiIHRpdGxlPSJQcmV2aW91cyAoYXJyb3cgbGVmdCkiPjwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1hcnJvdy0tcmlnaHQiIHRpdGxlPSJOZXh0IChhcnJvdyByaWdodCkiPjwvYnV0dG9uPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19jYXB0aW9uIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb25fX2NlbnRlciI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvRW1iZWRWaWRlb0FQSS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vPCFbQ0RBVEFbCiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAvLyAgQWRkTG9hZEV2ZW50CiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBmdW5jdGlvbiBBZGRMb2FkRXZlbnQoZnVuYykgewogICAgICAgIHZhciBvbGRvbmxvYWQgPSB3aW5kb3cub25sb2FkOwogICAgICAgIGlmICh0eXBlb2Ygd2luZG93Lm9ubG9hZCAhPSAnZnVuY3Rpb24nKQogICAgICAgIHsgd2luZG93Lm9ubG9hZCA9IGZ1bmM7IH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKG9sZG9ubG9hZCkKICAgICAgICAgICAgICAgIHsgb2xkb25sb2FkKCk7IH0KICAgICAgICAgICAgICAgIGZ1bmMoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgICAgIC8vIAogICAgICAgICQoJyNtYWluJykuYWRkQ2xhc3MoJ2Fubm9uY2VzLWRldGFpbCBEMicpOwoKICAgICAgICAvLyAKICAgICAgICB2YXIgbGliRmlsZXMgPSB7CiAgICAgICAgICAgICdqcyc6IFsKICAgICAgICAgICAgICAgICcvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL1Bob3RvU3dpcGUvcGhvdG9zd2lwZS5taW4uanMnLAogICAgICAgICAgICAgICAgJy90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvanMvUGhvdG9Td2lwZS9waG90b3N3aXBlLXVpLWRlZmF1bHQubWluLmpzJwogICAgICAgICAgICBdLAogICAgICAgICAgICAnY3NzJzogWwogICAgICAgICAgICAgICAgJy90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvanMvUGhvdG9Td2lwZS9waG90b3N3aXBlLmNzcycsCiAgICAgICAgICAgICAgICAnL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9qcy9QaG90b1N3aXBlL2RlZmF1bHQtc2tpbi9kZWZhdWx0LXNraW4uY3NzJwogICAgICAgICAgICBdCiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsaW09bGliRmlsZXNbJ2pzJ10ubGVuZ3RoOyBpIDwgbGltOyBpKyspewogICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgICAgICBub2RlLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKICAgICAgICAgICAgbm9kZS5zcmMgPSBsaWJGaWxlc1snanMnXVtpXTsKICAgICAgICAgICAgJCgnaGVhZCcpLmFwcGVuZChub2RlKTsKICAgICAgICB9CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpbT1saWJGaWxlc1snY3NzJ10ubGVuZ3RoOyBpIDwgbGltOyBpKyspewogICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTsKICAgICAgICAgICAgbm9kZS50eXBlID0gJ3RleHQvY3NzJzsKICAgICAgICAgICAgbm9kZS5yZWwgPSAnc3R5bGVzaGVldCc7CiAgICAgICAgICAgIG5vZGUuaHJlZiA9IGxpYkZpbGVzWydjc3MnXVtpXTsKICAgICAgICAgICAgaWYgKGk9PTApCiAgICAgICAgICAgICAgICAkKCdoZWFkJykucHJlcGVuZChub2RlKTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgJCgnaGVhZCBsaW5rJykuZXEoaS0xKS5hZnRlcihub2RlKTsKICAgICAgICB9CiAgICAgICAgKGZ1bmN0aW9uKCl7CgogICAgICAgICAgICB2YXIgc2xpZGVzID0gW107CgogICAgICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYyNy82MjdfMDAtMjAyMC0wMy0wMS0wMzQzLmpwZyIsIGFsdDoiZHVwbGV4IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE4KSIgfSk7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNjI3LzYyN18wMS0yMDIwLTAzLTAxLTAzNDMuanBnIiwgYWx0OiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIiB9KTsKICAgICAgICAgICAgICAgICAgICBzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzAyLTIwMjAtMDMtMDEtMDM0My5qcGciLCBhbHQ6ImR1cGxleCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxOCkiIH0pOwogICAgICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYyNy82MjdfMDMtMjAyMC0wMy0wMS0wMzQzLmpwZyIsIGFsdDoiZHVwbGV4IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE4KSIgfSk7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNjI3LzYyN18wNC0yMDIwLTAzLTAxLTAzNDMuanBnIiwgYWx0OiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIiB9KTsKICAgICAgICAgICAgICAgICAgICBzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzA1LTIwMjAtMDMtMDEtMDM0My5qcGciLCBhbHQ6ImR1cGxleCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxOCkiIH0pOwogICAgICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYyNy82MjdfMDYtMjAyMC0wMy0wMS0wMzQzLmpwZyIsIGFsdDoiZHVwbGV4IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE4KSIgfSk7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNjI3LzYyN18wNy0yMDIwLTAzLTAxLTAzNDMuanBnIiwgYWx0OiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIiB9KTsKICAgICAgICAgICAgICAgICAgICBzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzA4LTIwMjAtMDMtMDEtMDM0My5qcGciLCBhbHQ6ImR1cGxleCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxOCkiIH0pOwogICAgICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYyNy82MjdfMDktMjAyMC0wMy0wMS0wMzQzLmpwZyIsIGFsdDoiZHVwbGV4IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE4KSIgfSk7CgogICAgICAgICAgICBpZihzbGlkZXMubGVuZ3RoID4gMCl7CiAgICAgICAgICAgICAgICBzbGlkZXMuc2hpZnQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2xpZGVzLmxlbmd0aCA9PSAwKQogICAgICAgICAgICAgICAgJCgnI2RpYXBvcmFtYVByb2ZpbCAuY3ljbGUtcGFnZXInKS5oaWRlKCk7CgogICAgICAgICAgICBmdW5jdGlvbiBpbWdQcmVsb2FkKHNsaWRlcywgaWR4LCBjYWxsYmFjayl7CgogICAgICAgICAgICAgICAgdmFyIHRlbXBJbWcgPSBuZXcgSW1hZ2UoKTsKICAgICAgICAgICAgICAgIHZhciBPYmpTbGlkZSA9IHNsaWRlc1tpZHhdOwogICAgICAgICAgICAgICAgaWYoT2JqU2xpZGUgPT0gbnVsbCl7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICQodGVtcEltZykubG9hZChmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U2xpZGUgPSAnPGRpdiBkYXRhLWN5Y2xlLXBhZ2VyLXRlbXBsYXRlPSI8c3Bhbj48L3NwYW4+Ij48aW1nIGNsYXNzPSJzcGFjZXJCbG9ja2VyIiBzcmM9Ii90aGVtZS9fZGVmYXVsdC9pbWFnZXMvc3BhY2VyLnBuZyIgYWx0PSIiIC8+PGltZyBpdGVtcHJvcD0iaW1hZ2UiIGNsYXNzPSJhdXRvU2NhbGUiIHNyYz0iJytPYmpTbGlkZS5zcmMrJyIgYWx0PSInK09ialNsaWRlLmFsdCsnIi8+PHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPjwvZGl2Pic7CgogICAgICAgICAgICAgICAgICAgICQoJyNkaWFwb3JhbWFQcm9maWwnKS5jeWNsZSgnYWRkJywgbmV3U2xpZGUpOwoKICAgICAgICAgICAgICAgICAgICAvLyAgCgogICAgICAgICAgICAgICAgICAgIGlmIChpZHggKyAxIDwgc2xpZGVzLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGltZ1ByZWxvYWQoc2xpZGVzLCBpZHggKyAxLCBjYWxsYmFjayk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgdGVtcEltZy5zcmMgPSBPYmpTbGlkZS5zcmM7CgogICAgICAgICAgICB9CgogICAgICAgICAgICBBZGRMb2FkRXZlbnQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGltZ1ByZWxvYWQoc2xpZGVzLDAsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgdmFyIGggPSAoJCh3aW5kb3cpLmhlaWdodCgpKTsKICAgICAgICAgICAgICAgICAgICB2YXIgaGYgPSBNYXRoLnJvdW5kKGgpOwoKICAgICAgICAgICAgICAgICAgICAkKCcjZGlhcG9yYW1hUHJvZmlsJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6aGYrJ3B4JwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICQoJy5jb250ZW5ldXJEZXRhaWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnbWFyZ2luLXRvcCcgOiAkKHdpbmRvdykuaGVpZ2h0KCkKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcuYXV0b1NjYWxlJykpOwoKCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgIH0pKCk7CgogICAgICAgIC8vIAoKICAgICAgICAoZnVuY3Rpb24oKXsKCiAgICAgICAgICAgIHZhciBoID0gKCQod2luZG93KS5oZWlnaHQoKSk7CiAgICAgICAgICAgIHZhciBoZiA9IE1hdGgucm91bmQoaCk7CgogICAgICAgICAgICAkKCcjZGlhcG9yYW1hUHJvZmlsJykuY3NzKHsKICAgICAgICAgICAgICAgICdoZWlnaHQnOmhmKydweCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgJCgnLmNvbnRlbmV1ckRldGFpbCcpLmNzcyh7CiAgICAgICAgICAgICAgICAnbWFyZ2luLXRvcCcgOiAkKHdpbmRvdykuaGVpZ2h0KCkKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJy5hdXRvU2NhbGUnKSk7CiAgICAgICAgfSkoKTsKCiAgICAgICAgLy8gCgogICAgICAgIHZhciBkaWFwb0N5Y2xlID0gJCgnI2RpYXBvcmFtYVByb2ZpbCcpLmN5Y2xlKHsKICAgICAgICAgICAgc2xpZGVzOic+IGRpdicsCiAgICAgICAgICAgIGZ4OiAnZmFkZScsCiAgICAgICAgICAgIHNwZWVkOjEwMDAsCiAgICAgICAgICAgIHN3aXBlOnRydWUsCiAgICAgICAgICAgIHRpbWVvdXQ6NTAwMAogICAgICAgIH0pOwoKICAgICAgICAvLyAKCiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgaCA9ICgkKHdpbmRvdykuaGVpZ2h0KCkpOwogICAgICAgICAgICB2YXIgaGYgPSBNYXRoLnJvdW5kKGgpOwoKICAgICAgICAgICAgJCgnI2RpYXBvcmFtYVByb2ZpbCcpLmNzcyh7CiAgICAgICAgICAgICAgICAnaGVpZ2h0JzpoZisncHgnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkKCcuY29udGVuZXVyRGV0YWlsJykuY3NzKHsKICAgICAgICAgICAgICAgICdtYXJnaW4tdG9wJyA6ICQod2luZG93KS5oZWlnaHQoKQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnLmF1dG9TY2FsZScpKTsKICAgICAgICB9KTsKCiAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnaW1nLmF1dG9TY2FsZScpKTsKICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJ2ltZy5hdXRvU2NhbGUnKSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIAoKICAgICAgICB2YXIgbGlzdEltZ3MgPSBbXTsKCiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzAwLTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzAxLTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzAyLTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzAzLTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzA0LTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzA1LTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzA2LTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzA3LTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzA4LTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MjcvNjI3XzA5LTIwMjAtMDMtMDEtMDM0My5qcGciLHRpdGxlOiJkdXBsZXggNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTgpIix3OiIiLGg6IiIgfSk7CgogICAgICAgIGlmIChsaXN0SW1ncy5sZW5ndGggPiAwKXsKICAgICAgICAgICAgJCgnLnRyaWdnZXJIRCcpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBwc3dwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wc3dwJylbMF07CiAgICAgICAgICAgICAgICB2YXIgZ2FsbGVyeSA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSBbXTsKICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgICQoJy5sb2FkZXJfcGhvdG9zd2lwZScpLnNob3coKTsKICAgICAgICAgICAgICAgIHZhciBwcmVsb2FkSW1nID0gZnVuY3Rpb24oaWR4KXsKICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID49IGxpc3RJbWdzLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIHZhciBkZWZlciA9ICQuRGVmZXJyZWQoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgdG1wSW1nID0gbmV3IEltYWdlKCk7CiAgICAgICAgICAgICAgICAgICAgdG1wSW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RJbWdzW2lkeF0udyA9IHRoaXMubmF0dXJhbFdpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICBsaXN0SW1nc1tpZHhdLmggPSB0aGlzLm5hdHVyYWxIZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVyLnJlc29sdmUoaWR4KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdG1wSW1nLm9uZXJyb3IgPSBmdW5jdGlvbigpeyBkZWZlci5yZWplY3QoaWR4KTsgfQogICAgICAgICAgICAgICAgICAgIHRtcEltZy5zcmMgPSBsaXN0SW1nc1tpZHhdLnNyYzsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSBwcmVsb2FkSW1nKDApOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpbSA9IGxpc3RJbWdzLmxlbmd0aDsgaSA8IGxpbTsgaSsrKXsKICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGlkeCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2gobGlzdEltZ3NbaWR4XSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnYWxsZXJ5ID09IG51bGwpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1clNsaWRlSWR4ID0gZGlhcG9DeWNsZS5kYXRhKCJjeWNsZS5vcHRzIikuY3VyclNsaWRlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA+PSBjdXJTbGlkZUlkeCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeSA9IG5ldyBQaG90b1N3aXBlKHBzd3BFbGVtZW50LCBQaG90b1N3aXBlVUlfRGVmYXVsdCwgaXRlbXMsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGluY2hUb0Nsb3NlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VPblNjcm9sbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25WZXJ0aWNhbERyYWc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZ09wYWNpdHk6JzAuOTUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgVUkgT3B0aW9ucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZUVsOiBmYWxzZSwvLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlja1RvQ2xvc2VOb25ab29tYWJsZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcFRvQ2xvc2U6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5saXN0ZW4oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYXBvQ3ljbGUuY3ljbGUoJ3Jlc3VtZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5LmluaXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubG9hZGVyX3Bob3Rvc3dpcGUnKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbGxlcnkuZ29UbyhjdXJTbGlkZUlkeCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPj0gZ2FsbGVyeS5nZXRDdXJyZW50SW5kZXgoKSAtIDEgJiYgaWR4IDw9IGdhbGxlcnkuZ2V0Q3VycmVudEluZGV4KCkgKyAxKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5LmludmFsaWRhdGVDdXJySXRlbXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5LnVwZGF0ZVNpemUodHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbGxlcnkudWkudXBkYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZWxvYWRJbWcoaWR4KzEpOwogICAgICAgICAgICAgICAgICAgIH0sZnVuY3Rpb24oaWR4KXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZWxvYWRJbWcoaWR4KzEpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAgICAgZGlhcG9DeWNsZS5jeWNsZSgncGF1c2UnKTsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvLyAKICAgICAgICAkKCcuZGV0YWlscyAudG9vbHMgLnNoYXJlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICQoJzxkaXYgY2xhc3M9ImJveCBib3hfc2hhcmUiPjxkaXYgY2xhc3M9InNpemVyIj48aDE+UGFydGFnZXIgc3VyPC9oMT48ZGl2IGNsYXNzPSJjb250ZW50Ij48L2Rpdj48c3BhbiBjbGFzcz0iYUxpa2UgYnRuQ2xvc2UiPjwvc3Bhbj48L2Rpdj48L2Rpdj4nKS5hcHBlbmRUbygnYm9keScpLmZhZGVJbignZmFzdCcpOwogICAgICAgICAgICAkKCcuYm94X3NoYXJlIC5idG5DbG9zZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJCgnLmJveF9zaGFyZScpLmZhZGVPdXQoJ2Zhc3QnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAkKCdib2R5LGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJycpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgJCgnYm9keSxodG1sJykuY3NzKCdvdmVyZmxvdycsICdoaWRkZW4nKTsKICAgICAgICAgICAgJCgnLmJveF9zaGFyZSAuY29udGVudCcpLnNoYXJycmUoewogICAgICAgICAgICAgICAgc2hhcmU6IHsKICAgICAgICAgICAgICAgICAgICB0d2l0dGVyOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGZhY2Vib29rOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGxpbmtlZGluOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIHBpbnRlcmVzdDogdHJ1ZQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJ1dHRvbnM6IHsKICAgICAgICAgICAgICAgICAgICBwaW50ZXJlc3Q6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWE6ICdodHRwczovL3d3dy5ldHVkZWxlcGljLmZyLycucmVwbGFjZSgvXC8kLywgJycpICsgJy8nICsgJy9kYXRhcy9iaWVucy90aHVtYnMvNjI3LzYyN18wMC0yMDIwLTAzLTAxLTAzNDMuanBnJy5yZXBsYWNlKC9eXC8vLCAnJykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8dWw+XG5cCiAgICAgICAgICAgICAgICA8bGk+PHNwYW4gY2xhc3M9ImFMaWtlIGZhY2Vib29rIj5GYWNlYm9vazwvc3Bhbj48L2xpPlxuXAogICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJhTGlrZSB0d2l0dGVyIj5Ud2l0dGVyPC9zcGFuPjwvbGk+XG5cCiAgICAgICAgICAgICAgICA8bGk+PHNwYW4gY2xhc3M9ImFMaWtlIGxpbmtlZGluIj5MaW5rZWRpbjwvc3Bhbj48L2xpPlxuXAogICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJhTGlrZSBwaW50ZXJlc3QiPlBpbnRlcmVzdDwvc3Bhbj48L2xpPlxuXAogICAgICAgICAgICAgICAgPC91bD4nLAogICAgICAgICAgICAgICAgdXJsQ3VybDogJycsIC8vICBkaXNhYmxlIHNoYXJycmUucGhwCiAgICAgICAgICAgICAgICBlbmFibGVIb3ZlcjogZmFsc2UsCiAgICAgICAgICAgICAgICBlbmFibGVDb3VudGVyOiBmYWxzZSwKICAgICAgICAgICAgICAgIGVuYWJsZVRyYWNraW5nOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24oYXBpLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICAgICAgJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJ2xpID4gKicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc29jaWFsTmFtZXMgPSBbJ2ZhY2Vib29rJywgJ2xpbmtlZGluJywgJ3BpbnRlcmVzdCcsICd0d2l0dGVyJ10KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb2NpYWxOYW1lcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3Moc29jaWFsTmFtZXNbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLm9wZW5Qb3B1cChzb2NpYWxOYW1lc1tpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSk7CgogICAgICAgIC8vIAogICAgICAgICQoJy5lbnZvaV9hbWknKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICQoJzxmb3JtIG1ldGhvZD0iUE9TVCIgYWN0aW9uPSIvZW52b2llLWFubm9uY2UvZGV0YWlscy8nKyQodGhpcykuYXR0cignZGF0YS1iaWVuaWQnKSsnLyI+XG5cCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ1cmxfc2x1ZyIgdmFsdWU9InZlbnRlLWFwcGFydGVtZW50LXBhcmlzIiAvPlxuXAogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icmVkaXJlY3QiIHZhbHVlPSIxIiAvPlxuXAogICAgICAgICAgICA8L2Zvcm0+JykuYXBwZW5kVG8oJ2JvZHknKS5zdWJtaXQoKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0pOwoKICAgICAgICAvLyAKICAgICAgICAoZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIHZpZE9wZW4gPSBmYWxzZTsKICAgICAgICAgICAgdmFyIGVtYmVkVmlkZW8gPSBudWxsOwogICAgICAgICAgICAkKCcudHJpZ2dlclZpZCcpLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgIGlmKHZpZE9wZW4gPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICB2aWRPcGVuID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIEVtYmVkVmlkZW9BUEkuRW51bVR5cGVTZXR0aW5ncyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWRlb1R5cGVTZXR0aW5ncyA9IEVtYmVkVmlkZW9BUEkuRW51bVR5cGVTZXR0aW5nc1trZXldOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJCh0aGlzKS5hdHRyKCdkYXRhLXZpZHVybCcpOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodXJsLm1hdGNoKHZpZGVvVHlwZVNldHRpbmdzLmhyZWZQYXR0ZXJuKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnLmJveF92aWRlbycpLmxlbmd0aCA9PSAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPSJib3ggYm94X3ZpZGVvIj48c3BhbiBjbGFzcz0iYUxpa2UgYnRuQ2xvc2UiPjwvc3Bhbj48ZGl2IGNsYXNzPSJzaXplciI+PGRpdiBjbGFzcz0idmlld2VyIj48aWZyYW1lIGFsbG93ZnVsbHNjcmVlbj0iIiBmcmFtZWJvcmRlcj0iMCIgaGVpZ2h0PSIxMDAlIiBzcmM9IicrdXJsKyc/YXV0b3BsYXk9MSIgd2lkdGg9IjEwMCUiPjwvaWZyYW1lPjwvZGl2PjwvZGl2PjwvZGl2PicpLmFwcGVuZFRvKCdib2R5JykuZmFkZUluKCdmYXN0Jyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ2JvZHksaHRtbCcpLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlbWJlZFZpZGVvICE9IG51bGwpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkVmlkZW8ucGxheVZpZGVvKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkT3BlbiA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkKCcudmlld2VyJykuaGVpZ2h0KCQoJy52aWV3ZXInKS53aWR0aCgpLzEuODIyOTE2Nik7CiAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkucmVzaXplKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy52aWV3ZXInKS5oZWlnaHQoJCgnLnZpZXdlcicpLndpZHRoKCkvMS44MjI5MTY2KTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmJveF92aWRlbyAuYnRuQ2xvc2UnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmJveF92aWRlbycpLmZhZGVPdXQoJ2Zhc3QnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5LGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJycpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkoKTsKICAgICAgICAvLyAKCiAgICAgICAgJCgnLmFqb3V0X3NlbGVjdGlvbicpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKCiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTsKCiAgICAgICAgdmFyIGlkID0gJCh0aGlzKS5hdHRyKCdkYXRhLWJpZW5pZCcpOwoKICAgICAgICBtYXNlbGVjdGlvbignJyxpZCwnYWRkJyxmdW5jdGlvbihyZXRvdXIpewoKICAgICAgICAgICAgdmFyIGFuaW1fdGltZW91dDsKICAgICAgICAgICAgdmFyIGFuaW0yX3RpbWVvdXQ7CiAgICAgICAgICAgIHZhciByZW1vdmVfdGltZW91dDsKCiAgICAgICAgICAgIGNsZWFyVGltZW91dChhbmltX3RpbWVvdXQpOwogICAgICAgICAgICBjbGVhclRpbWVvdXQoYW5pbTJfdGltZW91dCk7CiAgICAgICAgICAgIGNsZWFyVGltZW91dChyZW1vdmVfdGltZW91dCk7CgogICAgICAgICAgICBpZihyZXRvdXIpewoKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFwcGVuZFRvKCdib2R5JykuYWRkQ2xhc3MoJ2FsZXJ0IG9uY2UnKS5hcHBlbmQoJzxwPicrbWVzc2FnZVswXSsnPC9wPicpOwoKICAgICAgICAgICAgICAgIHZhciBuYl9zZWxlY3Rpb24gPSBwYXJzZUludCgkKCcubmJfc2VsZWN0aW9uJykudGV4dCgpKSsxOwogICAgICAgICAgICAgICAgJCgnLm5iX3NlbGVjdGlvbicpLnRleHQobmJfc2VsZWN0aW9uKTsKCiAgICAgICAgICAgICAgICBhbmltX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLmFkZENsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgIGFuaW0yX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnb25jZScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LDYwMCk7CgogICAgICAgICAgICAgICAgICAgIH0sIDE1MDApOwoKICAgICAgICAgICAgICAgIH0sIDEwMCk7CgkJCQkkKCdoZWFkZXIgLnNlbGVjdGlvbicpLmVhY2goZnVuY3Rpb24oKXsKCQkJCQlpZiAoJCh0aGlzKS5jaGlsZHJlbignc3BhbicpLmF0dHIoImNsYXNzIik9PSdvdXQnKQoJCQkJCQkkKHRoaXMpLmNoaWxkcmVuKCdzcGFuJykuYXR0cigiY2xhc3MiLCdmdWxsJyk7CgkJCQl9KTsKCiAgICAgICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFwcGVuZFRvKCdib2R5JykuYWRkQ2xhc3MoJ2FsZXJ0IGRvbmUnKS5hcHBlbmQoJzxwPicrbWVzc2FnZVsxXSsnPC9wPicpOwoKICAgICAgICAgICAgICAgIGFuaW1fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgYW5pbTJfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdkb25lJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sNjAwKTsKCiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gZmFsc2U7CgoJCX0pOwoKICAgICAgICAvLyAKICAgICAgICB2YXIgaDIgPSAkKCcuaW50ZXJsb2N1dGV1ciAucGhvdG8nKS53aWR0aCgpLzAuODM7CiAgICAgICAgJCgnLmludGVybG9jdXRldXIgLnBob3RvJykuaGVpZ2h0KGgyKTsKCiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgaDIgPSAkKCcuaW50ZXJsb2N1dGV1ciAucGhvdG8nKS53aWR0aCgpLzAuODM7CiAgICAgICAgICAgICQoJy5pbnRlcmxvY3V0ZXVyIC5waG90bycpLmhlaWdodChoMik7CiAgICAgICAgfSk7CgogICAgICAgIC8vIAogICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJy5hdXRvU2NhbGUnKSk7CiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpewogICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcuYXV0b1NjYWxlJykpOwogICAgICAgIH0pOwogICAgfSk7CiAgICAoZnVuY3Rpb24oKXsKICAgICAgICB2YXIgc3RpY2t5TWVudSA9ICcnOwoKICAgICAgICB2YXIgYXV0b1NjYWxlID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnaW1nLmF1dG9TY2FsZScpKTsKICAgICAgICB9CgogICAgICAgIHZhciBidG5Hb0Rvd24gPSBmdW5jdGlvbigpewogICAgICAgICAgICAvLyAgCiAgICAgICAgICAgICQoJ3NwYW4uYnRuR29Eb3duJykuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmKCQod2luZG93KS5zY3JvbGxUb3AoKSA9PSAkKCdzZWN0aW9uLnZpc3VlbEhEJykub2Zmc2V0KCkudG9wKXsKICAgICAgICAgICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7c2Nyb2xsVG9wOiQoJ3NlY3Rpb24udmlzdWVsSEQnKS5oZWlnaHQoKX0sMTIwMCk7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7c2Nyb2xsVG9wOjB9LDEyMDApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHZhciBzdGlja3kgPSBmdW5jdGlvbigpewogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAgICAgaWYoJCh3aW5kb3cpLnNjcm9sbFRvcCgpICE9IDApewogICAgICAgICAgICAgICAgICAgICQoJ2hlYWRlcicpLmFkZENsYXNzKCdzdGlja3knKTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICQoJ2hlYWRlcicpLnJlbW92ZUNsYXNzKCdzdGlja3knKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGF1dG9TY2FsZSgpOwogICAgICAgIGJ0bkdvRG93bigpOwogICAgICAgIHN0aWNreSgpOwoKICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShhdXRvU2NhbGUsYnRuR29Eb3duLHN0aWNreSk7CiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShhdXRvU2NhbGUpOwogICAgfSkoKTsKCi8vXV0+Cjwvc2NyaXB0PgoKICAgICAgICA8YSBjbGFzcz0iYnV0dG9uLXRvcC1zdGlja3kiIGhyZWY9IiN0b3AiIHRpdGxlPSJCYWNrIHRvIHRvcCI+PHNwYW4gY2xhc3M9ImZhIGZhLWNoZXZyb24tdXAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+PC9hPgogICAgPC9tYWluPgogICAgPGZvb3Rlcj4KCTxkaXYgY2xhc3M9InRvcCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCI+CgkJPCEtLSA8ZGl2IGNsYXNzPSJ0aXRyZSI+Tm91cyBjb250YWN0ZXI8L2Rpdj4gLS0+CiAgICAJCTwhLS0gPGEgY2xhc3M9ImFnZW5jZSBvbmUiIGl0ZW1zY29wZT0iaXRlbXNjb3BlIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50IiBocmVmPSIvY29udGFjdC8iIHRpdGxlPSJDb250YWN0ZXogbOKAmWFnZW5jZSBpbW1vYmlsacOocmUgRXR1ZGUgTGVwaWMiPgogICAgICAgICAgICAgICAgPGxpbmsgaXRlbXByb3A9ImltYWdlIiBocmVmPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2ltYWdlcy9sb2dvLnBuZyIvPgogICAgICAgICAgICAgICAgPG1ldGEgIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJFdHVkZSBMZXBpYyAiLz4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImJyYW5kIiBpdGVtcHJvcD0ibGVnYWxOYW1lIj5FdHVkZSBMZXBpYzwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJhZGRyZXNzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1Bvc3RhbEFkZHJlc3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ic3RyZWV0QWRkcmVzcyI+NDUgUnVlIExlcGljPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icG9zdGFsQ29kZSIgY29udGVudD0iNzUgMDE4Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJhZGRyZXNzTG9jYWxpdHkiIGNvbnRlbnQ9IlBBUklTIi8+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjc1IDAxODwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UEFSSVM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9saT4gLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLSA8bGkgaXRlbXByb3A9InRlbGVwaG9uZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDAxIDQyIDU4IDExIDExCiAgICAgICAgICAgICAgICAgICAgPC9saT4gLS0+CiAgICAgICAgICAgICAgICA8IS0tIDwvdWw+CiAgICAgICAgICAgIDwvYT4gLS0+CgogICAgICAgICAgICA8YSBjbGFzcz0iYWdlbmNlIG1hbnkiIGhyZWY9Ii9jb250YWN0LyIgdGl0bGU9IkV0dWRlIExlcGljIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2ltYWdlcy9sb2dvX2Zvb3Rlci5wbmciIGFsdD0iRXR1ZGUgTGVwaWMgLSAiLz4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8dWwgY2xhc3M9InJ6byI+CiAgICAgICAgICAgIAk8bGkgY2xhc3M9ImZhY2Vib29rIj48YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vRXR1ZGUtTGVwaWMtMTcxMDQwNjQwNTg3Mjg2Ni8iIHRpdGxlPSIgRmFjZWJvb2sgLSBBZ2VuY2UgaW1tb2JpbGnDqHJlIHBhcmlzIDE4ICIgdGFyZ2V0PSJfYmxhbmsiPjxzcGFuIGNsYXNzPSJvdXQiPjwvc3Bhbj48c3BhbiBjbGFzcz0iaG92ZXIiPjwvc3Bhbj48L2E+PC9saT4KICAgICAgICAgICAgCTxsaSBjbGFzcz0iaW5zdGFncmFtIj48YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2V0dWRlbGVwaWNfaW1tb2JpbGllci8iIHRpdGxlPSIiIHRhcmdldD0iX2JsYW5rIj48c3BhbiBjbGFzcz0ib3V0Ij48L3NwYW4+PHNwYW4gY2xhc3M9ImhvdmVyIj48L3NwYW4+PC9hPjwvbGk+CiAgICAgICAgICAgIAk8bGkgY2xhc3M9ImxpbmtlZGluIj48YSBocmVmPSJodHRwczovL2ZyLmxpbmtlZGluLmNvbS9pbi9ndWlsYWluZS1nb3VnbmFyZC1hNzI0Njg4MyIgdGl0bGU9IkxpbmtlZGluIC0gQWNoYXQgdmVudGUgYXBwYXJ0ZW1lbnQgbWFpc29uIGjDtHRlbCBwYXJ0aWN1bGllciBsb2Z0IGR1cGxleCBQYXJpcyIgdGFyZ2V0PSJfYmxhbmsiPjxzcGFuIGNsYXNzPSJvdXQiPjwvc3Bhbj48c3BhbiBjbGFzcz0iaG92ZXIiPjwvc3Bhbj48L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj48IS0tCiAgICAgICAgLS0+PGRpdiBjbGFzcz0icmlnaHQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRyZSI+TGllbnM8L2Rpdj4KICAgICAgICAgICAgPG5hdiBjbGFzcz0ibWVudSI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJidXJnZXIiPgoJPGEgaHJlZj0iaHR0cHM6Ly93d3cuZXR1ZGVsZXBpYy5mci8iIHRpdGxlPSJJbW1vYmlsaWVyIFBhcmlzIEV0dWRlIExlcGljIiBjbGFzcz0iYnVyZ2VyIj48c3Bhbj5BY2N1ZWlsPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSJjdXJyZW50Ij4KCTxhIGhyZWY9Ii92ZW50ZS1hcHBhcnRlbWVudC1wYXJpcy8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJJbW1vYmlsaWVyIGVuIFZlbnRlIEV0dWRlIExlcGljIiBjbGFzcz0iY3VycmVudCI+PHNwYW4+Tm9zIGJpZW5zPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSIiPgoJPGEgaHJlZj0iL2VzdGltYXRpb24tYXBwYXJ0ZW1lbnQtcGFyaXMvIiB0aXRsZT0iVmVuZHJlIHZvdHJlIGJpZW4gc3VyIFBhcmlzIiBjbGFzcz0iIj48c3Bhbj5Fc3RpbWVyL1ZlbmRyZTwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iIj4KCTxhIGhyZWY9Ii9iaWVucy12ZW5kdXMtYXBwYXJ0ZW1lbnQtcGFyaXMvIiB0aXRsZT0iQmllbnMgdmVuZHVzIHBhciBFdHVkZSBMZXBpYyIgY2xhc3M9IiI+PHNwYW4+QmllbnMgdmVuZHVzPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSIiPgoJPGEgaHJlZj0iL2FnZW5jZXMtaW1tb2JpbGllcmVzLXByZXN0aWdlLXBhcmlzLyIgdGl0bGU9IkFnZW5jZXMgSW1tb2JpbGnDqHJlcyBFdHVkZSBMZXBpYyIgY2xhc3M9IiI+PHNwYW4+UXVpIHNvbW1lcy1ub3VzID88L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9ImJ1cmdlciI+Cgk8YSBocmVmPSIvaW1tb2JpbGllci1wcmVzdGlnZS1tb250bWFydHJlLyIgdGl0bGU9Ik1vbnRtYXJ0cmUgIEV0dWRlIExlcGljIiBjbGFzcz0iYnVyZ2VyIj48c3Bhbj5Ob3RyZSBxdWFydGllciA6IE1vbnRtYXJ0cmU8L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9IiI+Cgk8YSBocmVmPSIvdGVtb2lnbmFnZXMvIiB0aXRsZT0iVMOpbW9pZ25hZ2VzIEV0dWRlIExlcGljIiBjbGFzcz0iIj48c3Bhbj5Uw6ltb2lnbmFnZXM8L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9ImJ1cmdlciI+Cgk8YSBocmVmPSIvYWN0dWFsaXRlcy8iIHRpdGxlPSJOb3V2ZWF1dMOpcyBFdHVkZSBMZXBpYyIgY2xhc3M9ImJ1cmdlciI+PHNwYW4+QWN0dWFsaXTDqXM8L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9ImJ1cmdlciI+Cgk8YSBocmVmPSIvYXF1ZXJpci1hcHBhcnRlbWVudC1wYXJpcy8iIHRpdGxlPSJSZWNoZXJjaGUgaW1tb2JpbGnDqHJlIFBhcmlzIiBjbGFzcz0iYnVyZ2VyIj48c3Bhbj5BY3F1w6lyaXI8L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9IiI+Cgk8YSBocmVmPSIvY29udGFjdC8iIHRpdGxlPSJDb250YWN0ZXogbOKAmWFnZW5jZSBpbW1vYmlsacOocmUgRXR1ZGUgTGVwaWMiIGNsYXNzPSIiPjxzcGFuPkNvbnRhY3Q8L3NwYW4+PC9hPgo8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3NlbGVjdGlvbi8iIHJlbD0ibm9mb2xsb3ciIHRpdGxlPSJTw6lsZWN0aW9ubmVyIGFubm9uY2UgaW1tb2JpbGnDqHJlIj5NYSBTw6lsZWN0aW9uPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L25hdj4KICAgICAgICA8L2Rpdj4KCTwvZGl2PgogICAgPGRpdiBjbGFzcz0iYm90dG9tIj4KICAgICAgICA8ZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWdhbCI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvbWVudGlvbnMtbGVnYWxlcy1iYXJlbWUvIiByZWw9Im5vZm9sbG93IiB0aXRsZT0iSW5mb3JtYXRpb25zIGp1cmlkaXF1ZXMgRXR1ZGUgTGVwaWMiPk1lbnRpb25zIGzDqWdhbGVzIC8gQmFyw6htZTwvYT4KICAgICAgICAgICAgICAgIDxzcGFuPiB8IDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9saWVucy11dGlsZXMvIiByZWw9Im5vZm9sbG93IiB0aXRsZT0iTGllbnMgdXRpbGVzIEV0dWRlIExlcGljIj5MaWVucyB1dGlsZXM8L2E+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZSI+IHwgPC9zcGFuPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5hZ2VuY2UtcGx1cy5mciIgdGl0bGU9IkFnZW5jZSBQbHVzLCBzb2x1dGlvbnMgcG91ciBsZXMgcHJvZmVzc2lvbm5lbHMgZGUgbCdpbW1vYmlsaWVyIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImhpZGUiPlLDqWFsaXNhdGlvbiA8c3BhbiBjbGFzcz0iY29sb3IiPkFnZW5jZSBwbHVzPC9zcGFuPjwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3BMYW5nIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Zvb3Rlcj4KPHNjcmlwdD4KLy88IVtDREFUQVsKICAgIChmdW5jdGlvbigpewogICAgICAgIHZhciBtZW51Rm9vdGVyID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy8gIAogICAgICAgICAgICB2YXIgbmJNZW51VWxzID0gMjsKICAgICAgICAgICAgdmFyIG1pbkJ5VWwgPSAyOwogICAgICAgICAgICB2YXIgcmVwYXJ0QnlMaW5lID0gZmFsc2U7ICAgIC8vICAKICAgICAgICAgICAgdmFyIGpMaXN0ID0gJCgnZm9vdGVyIG5hdi5tZW51JykuZmluZCgnbGknKTsKICAgICAgICAgICAgdmFyIG5iVG90YWwgPSBqTGlzdC5sZW5ndGg7CiAgICAgICAgICAgIGlmIChuYlRvdGFsL21pbkJ5VWw8bmJNZW51VWxzKQogICAgICAgICAgICAgICAgbmJNZW51VWxzID0gTWF0aC5mbG9vcihuYlRvdGFsL21pbkJ5VWwpOwogICAgICAgICAgICB2YXIgdWxzID0gW107CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAkKCdmb290ZXIgbmF2Lm1lbnUgdWwnKS5sZW5ndGg7IGkgPCBuYk1lbnVVbHM7IGkrKykKICAgICAgICAgICAgICAgIHVscy5wdXNoKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykpOwogICAgICAgICAgICAkKCdmb290ZXIgbmF2Lm1lbnUnKS5hcHBlbmQodWxzKS5jb250ZW50cygpLmZpbHRlcihmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5ub2RlVHlwZSA9PSAzOyB9KS5yZW1vdmUoKTsgICAvLyAgCiAgICAgICAgICAgICQoJ2Zvb3RlciBuYXYubWVudSB1bCcpLmNzcygnd2lkdGgnLCgxMDAvbmJNZW51VWxzKSsnJScpOwogICAgICAgICAgICB2YXIgbmJSYW5nZSA9IE1hdGguZmxvb3IobmJUb3RhbCAvIG5iTWVudVVscyk7CiAgICAgICAgICAgIHZhciBjdXJMaW0gPSBuYlJhbmdlICsgKG5iVG90YWwgJSBuYk1lbnVVbHMgPT0gMCA/IDAgOiAxKTsKICAgICAgICAgICAgdmFyIGNvbElkeCA9IDA7CiAgICAgICAgICAgIGpMaXN0LmVhY2goZnVuY3Rpb24oaWR4KXsKICAgICAgICAgICAgICAgICQoJ2Zvb3RlciBuYXYubWVudSB1bDplcSgnK2NvbElkeCsnKScpLmFwcGVuZCh0aGlzKTsKICAgICAgICAgICAgICAgIGlmIChyZXBhcnRCeUxpbmUpewogICAgICAgICAgICAgICAgICAgIGNvbElkeCsrOwogICAgICAgICAgICAgICAgICAgIGlmIChjb2xJZHggPT0gbmJNZW51VWxzKQogICAgICAgICAgICAgICAgICAgICAgICBjb2xJZHggPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICBpZiAoaWR4KzEgPj0gY3VyTGltKXsKICAgICAgICAgICAgICAgICAgICAgICAgY29sSWR4Kys7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckxpbSArPSBuYlJhbmdlICsgKGNvbElkeDwobmJUb3RhbCVuYk1lbnVVbHMpPzE6MCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICB2YXIgZHJvcExhbmcgPSBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgZmxhZ0h0bWwgPSAnPHVsPlxuXAogICAgICAgICAgICA8L3VsPic7CgogICAgICAgICAgICAkKCdkaXYuZHJvcExhbmcnKS5hcHBlbmQoZmxhZ0h0bWwpOwogICAgICAgIH07CgogICAgICAgIG1lbnVGb290ZXIoKTsKICAgICAgICBkcm9wTGFuZygpOwogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KG1lbnVGb290ZXIoKSk7CiAgICB9KSgpOwovL11dPgo8L3NjcmlwdD4KCiAgICA8ZGl2IGNsYXNzPSJwb3B1cC1jb250ZW50Ij4KICAgICAgICA8c3Bhbj5FbiBwb3Vyc3VpdmFudCB2b3RyZSBuYXZpZ2F0aW9uIHN1ciBjZSBzaXRlLCB2b3VzIGFjY2VwdGV6IGwndXRpbGlzYXRpb24gZGUgY29va2llcyBkZXN0aW7DqXMgw6AgbGEgcsOpYWxpc2F0aW9uIGRlIHN0YXRpc3RpcXVlcyBkZSB2aXNpdGVzLjxhIGhyZWY9Ii9tZW50aW9ucy1sZWdhbGVzLWJhcmVtZS8jY29va2llcyIgY2xhc3M9Im1vcmUtYnV0dG9uIj5FbiBzYXZvaXIgcGx1czwvYT48L3NwYW4+CiAgICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImFncmVlLWJ1dHRvbiIgdmFsdWU9IkNvbnRpbnVlciIvPgogICAgPC9kaXY+CjwvZGl2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvY29uZmlybV9jb29raWUubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgovLzwhW0NEQVRBWwoJKGZ1bmN0aW9uKCl7CgkJdmFyIHBvc0Zvb3RlciA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGlmKCEkKCcudmlzdWVsSEQnKS5sZW5ndGg9PTApewogICAgICAgICAgICAgICAgaWYoJCh3aW5kb3cpLmhlaWdodCgpPigkKCcudmlzdWVsSEQnKS5vdXRlckhlaWdodCh0cnVlKSskKCdtYWluJykub3V0ZXJIZWlnaHQodHJ1ZSkrJCgnZm9vdGVyJykub3V0ZXJIZWlnaHQodHJ1ZSkpKXsKICAgICAgICAgICAgICAgICAgICAkKCdmb290ZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6J2ZpeGVkJywKICAgICAgICAgICAgICAgICAgICAnYm90dG9tJzonMCcsCiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzonMTAwJScKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgJCgnZm9vdGVyJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOicnLAogICAgICAgICAgICAgICAgICAgICdib3R0b20nOicnLAogICAgICAgICAgICAgICAgICAgICd3aWR0aCc6JycKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIGlmKCQod2luZG93KS5oZWlnaHQoKT4oJCgnaGVhZGVyJykub3V0ZXJIZWlnaHQodHJ1ZSkrJCgnbWFpbicpLm91dGVySGVpZ2h0KHRydWUpKyQoJ2Zvb3RlcicpLm91dGVySGVpZ2h0KHRydWUpKSl7CiAgICAgICAgICAgICAgICAgICAgJCgnZm9vdGVyJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOidmaXhlZCcsCiAgICAgICAgICAgICAgICAgICAgJ2JvdHRvbSc6JzAnLAogICAgICAgICAgICAgICAgICAgICd3aWR0aCc6JzEwMCUnCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICQoJ2Zvb3RlcicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzonJywKICAgICAgICAgICAgICAgICAgICAnYm90dG9tJzonJywKICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOicnCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICB9OwoKICAgICAgICBwb3NGb290ZXIoKTsKCQkkKHdpbmRvdykucmVzaXplKHBvc0Zvb3Rlcik7CgogICAgICAgICAgICAkKCcuYWdyZWUtYnV0dG9uJykub24oJ2NsaWNrJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICBjb25maXJtY29va2llKCcnLGZ1bmN0aW9uKHJldG91cil7CiAgICAgICAgICAgICAgICAgICBpZiAocmV0b3VyKSB7JCgnLnBvcHVwLWNvbnRlbnQnKS5oaWRlKCk7fQogICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7Cgl9KSgpOwovL11dPgo8L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPgo=
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:20 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-1059/vente-appartement-5-pieces-2-chambres-paris-75018/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:20 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=g7fdt5p53dlpmku2456k45ia95; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:20 GMT
- request:
    method: get
    uri: https://www.etudelepic.fr/vente-appartement-paris/ref-na2-856/vente-appartement-3-pieces-2-chambres-paris-75002/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 15:15:20 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=vln8ghemrvp9pbpgmn55jodr10; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIiBsYW5nPSJmciI+CjxoZWFkPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ii8+CgogICAgPHRpdGxlPlZlbnRlIEFwcGFydGVtZW50IFBhcmlzIDIgKDc1MDAyKSBNb250b3JndWVpbCAtIEV0dWRlIExlcGljPC90aXRsZT4KCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iRGVzY3JpcHRpZiBkdSBiaWVuIHZlbnRlIGFwcGFydGVtZW50IDMgcGnDqGNlcyBQQVJJUyA3NTAwMiAyIGNoYW1icmVzIDExMSBtwrIgUHJpeCAxIDU1MCAwMDAg4oKsIFLDqWbDqXJlbmNlIE5BMi04NTYiLz4KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJhZ2VuY2UgaW1tb2JpbGnDqHJlIHBhcmlzIDE4w6htZSxhZ2VuY2UgaW1tb2JpbGnDqHJlIHBhcmlzLCA3NTAxOCwgNzUwMDksIDnDqG1lLGFjaGF0LHZlbnRlLGFjaGV0ZXIsdmVuZHJlLGFwcGFydGVtZW50LG1haXNvbixob3RlbCBwYXJ0aWN1bGllcixsb2Z0LGR1cGxleCxldHVkZSBsZXBpYyxwYXJpcyw3NTAxOCw3NTAwOSxpbW1vYmlsaWVyIGRlIGx1eGUgcGFyaXMiIC8+CiAgICA8bWV0YSBuYW1lPSJyZXZpc2l0LWFmdGVyIiBjb250ZW50PSIxMCBkYXlzIiAvPgogICAgPG1ldGEgbmFtZT0iZm9ybWF0LWRldGVjdGlvbiIgY29udGVudD0idGVsZXBob25lPW5vIiAvPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZSIgY29udGVudD0ieWVzIi8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZSIgY29udGVudD0iRXR1ZGUgTGVwaWMiLz4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgiLz4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSIgLz4KCgkKCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL1NjYWxlSW1hZ2UubWluLmpzPzIwMTYwMjEwPSI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL211bHRpcGxlLXNlbGVjdC5taW4uanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19kZWZhdWx0L3Jlc2V0Lm1pbi5jc3MiIC8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL21zZHJvcC5taW4uY3NzIiAvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9zdHlsZS5taW4uY3NzPzIwMjAwMzIzPSIvPgoKICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBocmVmPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2ltYWdlcy9mYXZpY29uLmljbyIgLz4KCiAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuZXR1ZGVsZXBpYy5mci92ZW50ZS1hcHBhcnRlbWVudC1wYXJpcy9yZWYtbmEyLTg1Ni92ZW50ZS1hcHBhcnRlbWVudC0zLXBpZWNlcy0yLWNoYW1icmVzLXBhcmlzLTc1MDAyLyIgLz4KCiAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3BlbitTYW5zOjMwMCwzMDBpLDQwMCw0MDBpLDYwMCw2MDBpLDcwMCw3MDBpLDgwMCw4MDBpIiByZWw9InN0eWxlc2hlZXQiPgoKICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgaHJlZj0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9pbWFnZXMvYXBwbGVUb3VjaEljb242MC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iNzZ4NzYiIGhyZWY9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvaW1hZ2VzL2FwcGxlVG91Y2hJY29uNzYucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjEyMHgxMjAiIGhyZWY9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvaW1hZ2VzL2FwcGxlVG91Y2hJY29uMTIwLnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxNTJ4MTUyIiBocmVmPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjE1Mi5wbmciPgoKICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1SYWxld2F5OjgwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+CiAgICA8bGluayBocmVmPSdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTo2MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPgogICAgPGxpbmsgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJhbGV3YXk6NTAwJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4KICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1SYWxld2F5OjQwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+CiAgICA8bGluayBocmVmPSdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPgogICAgPGxpbmsgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJhbGV3YXk6MjAwJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4KCiAgICA8bWV0YSBuYW1lPSJhcHBsaWNhdGlvbi1uYW1lIiBjb250ZW50PSJFdHVkZSBMZXBpYyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUNvbG9yIiBjb250ZW50PSIjODQxMTJjIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1zcXVhcmU3MHg3MGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvaW1hZ2VzL21zVG91Y2gvc21hbGx0aWxlLTcweDcwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlMTUweDE1MGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvaW1hZ2VzL21zVG91Y2gvbWVkaXVtdGlsZS0xNTB4MTUwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24td2lkZTMxMHgxNTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2ltYWdlcy9tc1RvdWNoL3dpZGV0aWxlLTMxMHgxNTAucG5nIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1zcXVhcmUzMTB4MzEwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9pbWFnZXMvbXNUb3VjaC9sYXJnZXRpbGUtMzEweDMxMC5wbmciIC8+CgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iVmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgMiAoNzUwMDIpIE1vbnRvcmd1ZWlsIiAvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iUVVBUlRJRVIgTU9OVE9SR1VFSUwtIERVU1NPVUJTOiBBdSA0w6htZSBldCBkZXJuaWVyIMOpdGFnZSBzYW5zIGFzY2Vuc2V1ciwgZGFucyB1biBwcmVzdGlnaWV1eCBow7R0ZWwgcGFydGljdWxpZXIgZGUgbGEgZmluIGR1IFhWSUnDqG1lIHNpw6hjbGUgZGUgdHLDqHMgYm9uIHN0YW5kaW5nIGF2ZWMgZ2FyZGllbm5lLCBzZSB0cm91dmUgdW4gYmllbiBleGNlcHRpb25uZWwgZGUgMy00IHBpw6hjZXMuIENldCBhcHBhcnRlbWVudCBkZSBwbHVzIiAvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmV0dWRlbGVwaWMuZnIvdmVudGUtYXBwYXJ0ZW1lbnQtcGFyaXMvcmVmLW5hMi04NTYvdmVudGUtYXBwYXJ0ZW1lbnQtMy1waWVjZXMtMi1jaGFtYnJlcy1wYXJpcy03NTAwMi8iIC8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSJodHRwczovL3d3dy5ldHVkZWxlcGljLmZyL2RhdGFzL2JpZW5zL2ltYWdlcy82MTAvNjEwXzAwLTIwMTktMTItMTUtMDMwNS5qcGciIC8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9ImFydGljbGUiIC8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOmxvY2FsZSIgY29udGVudD0iZnJfRlIiIC8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOmxvY2FsZTphbHRlcm5hdGUiIGNvbnRlbnQ9ImZyX0ZSIiAvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IkV0dWRlIExlcGljIiAvPgoKCgoKICAgIDwhLS1baWYgSUUgXT48c2NyaXB0IHNyYz0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9qcy9tb2Rlcm5penIuY3VzdG9tLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHRlIElFIDldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvanMvcGxhY2Vob2xkZXJzLm1pbi5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIChndGUgSUUgNikmKGx0ZSBJRSA4KV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9qcy9zZWxlY3Rpdml6ci1taW4uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdCBJRSA5XT48c2NyaXB0IHNyYz0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9qcy9jc3MzLW1lZGlhcXVlcmllcy5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CgoKPC9oZWFkPgo8IS0tW2lmIGx0IElFIDddPiA8Ym9keSBjbGFzcz0iaWUgaWU2IGllN18gaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA3XT4gICAgPGJvZHkgY2xhc3M9ImllIGllNyBpZTdfIGllOF8gaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTggaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA5XT4gICAgPGJvZHkgY2xhc3M9ImllIGllOSBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBndCBJRSA5XT4gPGJvZHk+PCFbZW5kaWZdLS0+CjwhLS1baWYgIUlFXT48IS0tPjxib2R5PjwhLS08IVtlbmRpZl0tLT4KCTxkaXYgaWQ9Im1haW4iIGNsYXNzPSJhbm5vbmNlcyBkZWZhdWx0Ij4KICAgIDxoZWFkZXI+CjxhIGhyZWY9Ii9zZWxlY3Rpb24vIiB0aXRsZT0iU8OpbGVjdGlvbm5lciBhbm5vbmNlIGltbW9iaWxpw6hyZSA6IDAiIGNsYXNzPSJzZWxlY3Rpb24iPgogICAgPHNwYW4gY2xhc3M9Im91dCI+PC9zcGFuPjwhLS0KICAgIC0tPjxzcGFuIGNsYXNzPSJob3ZlciI+PC9zcGFuPgo8L2E+CjxhIGhyZWY9IiNuYXYiIGNsYXNzPSJidXJnZXJCdG4iPjwvYT4KPGRpdiBjbGFzcz0ibG9nbyI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZXR1ZGVsZXBpYy5mci8iIHRpdGxlPSJJbW1vYmlsaWVyIFBhcmlzIEV0dWRlIExlcGljIj4KICAgICAgICAgICAgPGltZyBzcmM9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvaW1hZ2VzL2xvZ29fYWdlbmNlLnBuZyIgYWx0PSJFdHVkZSBMZXBpYyIgLz4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgIDwvYT4KCjwvZGl2Pgo8bmF2IGNsYXNzPSJtZW51Ij4KICAgIDx1bCBjbGFzcz0idG9wIj4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9zZWxlY3Rpb24vIiB0aXRsZT0iIDAiIGNsYXNzPSJzZWxlY3Rpb24iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im91dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhvdmVyIj48L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcExhbmciPjwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIjbmF2IiBjbGFzcz0iYnRuQ2xvc2UiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im91dCI+PC9zcGFuPjwhLS0KICAgICAgICAgICAgICAgIC0tPjxzcGFuIGNsYXNzPSJob3ZlciI+PC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgIDwvdWw+PCEtLQogICAgLS0+PHVsIGNsYXNzPSJsaWVuIj4KICAgICAgICA8bGkgY2xhc3M9ImJ1cmdlciI+Cgk8YSBocmVmPSJodHRwczovL3d3dy5ldHVkZWxlcGljLmZyLyIgdGl0bGU9IkltbW9iaWxpZXIgUGFyaXMgRXR1ZGUgTGVwaWMiIGNsYXNzPSJidXJnZXIiPjxzcGFuPkFjY3VlaWw8L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9ImN1cnJlbnQiPgoJPGEgaHJlZj0iL3ZlbnRlLWFwcGFydGVtZW50LXBhcmlzLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkltbW9iaWxpZXIgZW4gVmVudGUgRXR1ZGUgTGVwaWMiIGNsYXNzPSJjdXJyZW50Ij48c3Bhbj5Ob3MgYmllbnM8L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9IiI+Cgk8YSBocmVmPSIvZXN0aW1hdGlvbi1hcHBhcnRlbWVudC1wYXJpcy8iIHRpdGxlPSJWZW5kcmUgdm90cmUgYmllbiBzdXIgUGFyaXMiIGNsYXNzPSIiPjxzcGFuPkVzdGltZXIvVmVuZHJlPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSIiPgoJPGEgaHJlZj0iL2JpZW5zLXZlbmR1cy1hcHBhcnRlbWVudC1wYXJpcy8iIHRpdGxlPSJCaWVucyB2ZW5kdXMgcGFyIEV0dWRlIExlcGljIiBjbGFzcz0iIj48c3Bhbj5CaWVucyB2ZW5kdXM8L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9IiI+Cgk8YSBocmVmPSIvYWdlbmNlcy1pbW1vYmlsaWVyZXMtcHJlc3RpZ2UtcGFyaXMvIiB0aXRsZT0iQWdlbmNlcyBJbW1vYmlsacOocmVzIEV0dWRlIExlcGljIiBjbGFzcz0iIj48c3Bhbj5RdWkgc29tbWVzLW5vdXMgPzwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iYnVyZ2VyIj4KCTxhIGhyZWY9Ii9pbW1vYmlsaWVyLXByZXN0aWdlLW1vbnRtYXJ0cmUvIiB0aXRsZT0iTW9udG1hcnRyZSAgRXR1ZGUgTGVwaWMiIGNsYXNzPSJidXJnZXIiPjxzcGFuPk5vdHJlIHF1YXJ0aWVyIDogTW9udG1hcnRyZTwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iIj4KCTxhIGhyZWY9Ii90ZW1vaWduYWdlcy8iIHRpdGxlPSJUw6ltb2lnbmFnZXMgRXR1ZGUgTGVwaWMiIGNsYXNzPSIiPjxzcGFuPlTDqW1vaWduYWdlczwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iYnVyZ2VyIj4KCTxhIGhyZWY9Ii9hY3R1YWxpdGVzLyIgdGl0bGU9Ik5vdXZlYXV0w6lzIEV0dWRlIExlcGljIiBjbGFzcz0iYnVyZ2VyIj48c3Bhbj5BY3R1YWxpdMOpczwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iYnVyZ2VyIj4KCTxhIGhyZWY9Ii9hcXVlcmlyLWFwcGFydGVtZW50LXBhcmlzLyIgdGl0bGU9IlJlY2hlcmNoZSBpbW1vYmlsacOocmUgUGFyaXMiIGNsYXNzPSJidXJnZXIiPjxzcGFuPkFjcXXDqXJpcjwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iIj4KCTxhIGhyZWY9Ii9jb250YWN0LyIgdGl0bGU9IkNvbnRhY3RleiBs4oCZYWdlbmNlIGltbW9iaWxpw6hyZSBFdHVkZSBMZXBpYyIgY2xhc3M9IiI+PHNwYW4+Q29udGFjdDwvc3Bhbj48L2E+CjwvbGk+CgogICAgPC91bD4KPC9uYXY+CjxzcGFuIGNsYXNzPSJpY29fbWVudSI+PC9zcGFuPgo8L2hlYWRlcj4KPHNjcmlwdD4KLy88IVtDREFUQVsKKGZ1bmN0aW9uKCl7CiAgICB2YXIgaXNNZW51T3BlbiA9IGZhbHNlOwoKICAgIHZhciBwbGFjZU1lbnUgPSBmdW5jdGlvbigpewogICAgICAgIGlmKCQoJ2hlYWRlcicpLmhhc0NsYXNzKCdidXJnZXJlZCcpKXsKICAgICAgICAgICAgJCgnaGVhZGVyIG5hdi5tZW51JykuY3NzKHsKICAgICAgICAgICAgICAgICdyaWdodCcgOiAtJCh3aW5kb3cpLm91dGVyV2lkdGgodHJ1ZSksCiAgICAgICAgICAgICAgICAnZGlzcGxheScgOiAnbm9uZScKICAgICAgICAgICAgfSk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICQoJ2hlYWRlciBuYXYubWVudScpLmNzcyh7CiAgICAgICAgICAgICAgICAncmlnaHQnIDogJycsCiAgICAgICAgICAgICAgICAnZGlzcGxheScgOiAnJwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9CgogICAgdmFyIG9wZW5NZW51ID0gZnVuY3Rpb24oKXsKICAgICAgICAkKCcuYnVyZ2VyQnRuJykuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICAgICAgaWYoJCgnaGVhZGVyJykuaGFzQ2xhc3MoJ2J1cmdlcmVkJykpewogICAgICAgICAgICAgICAgJCgiaHRtbCwgYm9keSIpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IDAgfSwyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnaGVhZGVyIG5hdi5tZW51JykuZmFkZUluKDUwKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnaGVhZGVyIG5hdi5tZW51Jykuc3RvcCh0cnVlLHRydWUpLmFuaW1hdGUoeydyaWdodCc6JzAnfSwyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ25hdi5tZW51IC5saWVuJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzooJCh3aW5kb3cpLmhlaWdodCgpLSQoJ25hdi5tZW51IC50b3AnKS5vdXRlckhlaWdodCh0cnVlKSkrJ3B4JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6J2F1dG8nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ21haW4nKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOigkKHdpbmRvdykuaGVpZ2h0KCktKCQoJ2hlYWRlcicpLm91dGVySGVpZ2h0KHRydWUpKyQoJ2Zvb3RlcicpLm91dGVySGVpZ2h0KHRydWUpKSkrJ3B4JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgogICAgdmFyIGNsb3NlTWVudSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgJCgnLmJ0bkNsb3NlJykuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICAgICAgaWYoJCgnaGVhZGVyJykuaGFzQ2xhc3MoJ2J1cmdlcmVkJykpewogICAgICAgICAgICAgICAgJCgnaGVhZGVyIG5hdi5tZW51JykuZmFkZU91dCgyNTApOwogICAgICAgICAgICAgICAgJCgnaGVhZGVyIG5hdi5tZW51Jykuc3RvcCh0cnVlLHRydWUpLmFuaW1hdGUoeydyaWdodCc6Jy0xMDAlJ30sMjUwKTsKICAgICAgICAgICAgICAgICQoJ21haW4nKS5jc3MoewogICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOicnLAogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICQoJ25hdi5tZW51IC5saWVuJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzonJywKICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6JycsCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgogICAgdmFyIG1lbnVXaWR0aCA9ICgoJCgndWwubGllbiBsaTpub3QoLmJ1cmdlcikgYScpLm91dGVyV2lkdGgodHJ1ZSkrNTQpKiQoJ3VsLmxpZW4gbGk6bm90KC5idXJnZXIpJykubGVuZ3RoKSs1NTA7CgogICAgdmFyIGZuQ2hlY2tCdXJnZXIgPSBmdW5jdGlvbigpewogICAgICAgIGlmKG1lbnVXaWR0aD4kKHdpbmRvdykub3V0ZXJXaWR0aCh0cnVlKSl7CiAgICAgICAgICAgICQoJ2hlYWRlcixmb290ZXInKS5hZGRDbGFzcygnYnVyZ2VyZWQnKTsKICAgICAgICAgICAgJCgnLmljb19tZW51JykuYWRkQ2xhc3MoJ3Zpc2libGUnKTsKICAgICAgICAgICAgJCgnaGVhZGVyIG5hdi5tZW51JykuZmFkZU91dCgyNTApOwogICAgICAgICAgICAkKCdoZWFkZXIgbmF2Lm1lbnUnKS5zdG9wKHRydWUsdHJ1ZSkuYW5pbWF0ZSh7J3JpZ2h0JzonLTEwMCUnfSwyNTApOwogICAgICAgIH1lbHNlewogICAgICAgICAgICAkKCdoZWFkZXIsZm9vdGVyJykucmVtb3ZlQ2xhc3MoJ2J1cmdlcmVkJyk7CiAgICAgICAgICAgICQoJy5pY29fbWVudScpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7CiAgICAgICAgICAgICQoJ2hlYWRlciBuYXYubWVudScpLmNzcyh7CiAgICAgICAgICAgICAgICAnZGlzcGxheSc6JycsCiAgICAgICAgICAgICAgICAncmlnaHQnOicnCiAgICAgICAgICAgIH0pCiAgICAgICAgfQogICAgfQoKICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgICAgIGZuQ2hlY2tCdXJnZXIoKTsKICAgICAgICBwbGFjZU1lbnUoKTsKICAgICAgICBvcGVuTWVudSgpOwogICAgICAgIGNsb3NlTWVudSgpOwogICAgfSk7CiAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgZm5DaGVja0J1cmdlcigpOwogICAgfSk7Cn0pKCk7Ci8vXV0+Cjwvc2NyaXB0PgoKICAgIDxtYWluPgogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9tYWpfc2VsZWN0aW9uLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIHZhciBtZXNzYWdlID0gbmV3IEFycmF5KCdDZXR0ZSBhbm5vbmNlIGEgw6l0w6kgYWpvdXTDqWUgw6Agdm90cmUgc8OpbGVjdGlvbi4nLCdDZXR0ZSBhbm5vbmNlIGVzdCBkw6lqw6AgZGFucyB2b3RyZSBzw6lsZWN0aW9uLicpOwo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9qcy9qcXVlcnkuY3ljbGUyLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvanMvanF1ZXJ5LmN5Y2xlMi5zd2lwZS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL2pxdWVyeS5zaGFycnJlLm1pbi5qcyI+PC9zY3JpcHQ+CjxzZWN0aW9uIGNsYXNzPSJhbm5vbmNlIGRldGFpbHMiPgogICAgPGFydGljbGUgaXRlbXByb3A9Im9mZmVycyIgaXRlbXNjb3BlPSIiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgPGZpZ3VyZT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3RuRGlhcG8iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbF9jdG4iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjeWNsZS1wcmV2Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV4dGVybi1wYWdlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjeWNsZS1uZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImRpYXBvcmFtYVByb2ZpbCIgY2xhc3M9InRyaWdnZXJIRCIgZGF0YS1jeWNsZS1sb2c9ImZhbHNlIiBkYXRhLWN5Y2xlLXBhZ2VyPSIuZXh0ZXJuLXBhZ2VyIiBkYXRhLWN5Y2xlLXBhZ2VyLXRlbXBsYXRlPSI8c3BhbiBjbGFzcz0ncGFnZXInPjwvc3Bhbj4iIGRhdGEtY3ljbGUtcHJldj0iLmN5Y2xlLXByZXYiIGRhdGEtY3ljbGUtbmV4dD0iLmN5Y2xlLW5leHQiPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InNwYWNlckJsb2NrZXIiIHNyYz0iL3RoZW1lL19kZWZhdWx0L2ltYWdlcy9zcGFjZXIucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iYXV0b1NjYWxlIiBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iL2RhdGFzL2JpZW5zL2ltYWdlcy82MTAvNjEwXzAwLTIwMTktMTItMTUtMDMwNS5qcGciIGFsdD0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDIpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mb3NCaWVuUGhvdG8iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIiBpdGVtcHJvcD0iY2F0ZWdvcnkiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvU2luZ2xlRmFtaWx5UmVzaWRlbmNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgYXBwYXJ0ZW1lbnQ8bWV0YSBpdGVtcHJvcD0ibnVtYmVyT2ZSb29tcyIgY29udGVudD0iMyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImZsb29yU2l6ZSIgY29udGVudD0iMTExIG3CsiIgLz4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImFkZHJlc3MiIGl0ZW1zY29wZT0iIiBpdGVtcHJvcD0iYXZhaWxhYmxlQXRPckZyb20iIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9QbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1Bvc3RhbEFkZHJlc3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUEFSSVMgKDc1MDAyKTxtZXRhIGl0ZW1wcm9wPSJwb3N0YWxDb2RlIiBjb250ZW50PSI3NTAwMiIgLz48bWV0YSBpdGVtcHJvcD0iYWRkcmVzc0xvY2FsaXR5IiBjb250ZW50PSJQQVJJUyAyIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0icXVhcnRpZXIiPiBNb250b3JndWVpbDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAxIDU1MCAwMDAgJmV1cm87CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icHJpY2UiIGNvbnRlbnQ9IjE1NTAwMDAuMDAiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJwcmljZUN1cnJlbmN5IiBjb250ZW50PSImZXVybzsiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZmlnY2FwdGlvbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZWYiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aWRlbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idHJpZ2dlckhEIG5vTGluayIgdGl0bGU9Ik91dnJpciBsZXMgaW1hZ2VzIGVuIHBsZWluIMOpY3JhbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbm5vbmNlX3JlZiI+UsOpZi4gOiBOQTItODU2PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2ZpZ2NhcHRpb24+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2hhZG93Ij48L2Rpdj4KICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW5ldXJEZXRhaWwiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJibG9jUGljdG9MaW5rQmFjayI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImxpbmtfYmFjayI+CiAgICAgICAgICAgICAgICA8L3VsPjx1bCBjbGFzcz0icGljdG8iPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3VyZmFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0bi1saSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG8iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eHQiPjExMTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBpZWNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0bi1saSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG8iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eHQiPjM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjaGFtYnJlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0bi1saSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG8iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eHQiPjI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZGIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdG4tbGkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHh0Ij4yPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2FsbGVzX2VhdSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0bi1saSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG8iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eHQiPjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPjx1bCBjbGFzcz0ibGlua19iYWNrIj4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXRhaWwiPgogICAgICAgICAgICAgICAgPGgxIGl0ZW1wcm9wPSJuYW1lIj5WZW50ZSBBcHBhcnRlbWVudCBQYXJpcyAyICg3NTAwMikgTW9udG9yZ3VlaWw8L2gxPgogICAgICAgICAgICAgICAgPGgyPk1PTlRPUkdVRUlMPC9oMj4KICAgICAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImRlc2NyaXB0aW9uIiBjbGFzcz0iZGVzY3JpcHRpb24iPlFVQVJUSUVSIE1PTlRPUkdVRUlMLSBEVVNTT1VCUzogQXUgNMOobWUgZXQgZGVybmllciDDqXRhZ2Ugc2FucyBhc2NlbnNldXIsIGRhbnMgdW4gcHJlc3RpZ2lldXggaMO0dGVsIHBhcnRpY3VsaWVyIGRlIGxhIGZpbiBkdSBYVklJw6htZSBzacOoY2xlIGRlIHRyw6hzIGJvbiBzdGFuZGluZyBhdmVjIGdhcmRpZW5uZSwgc2UgdHJvdXZlIHVuIGJpZW4gZXhjZXB0aW9ubmVsIGRlIDMtNCBwacOoY2VzLiBDZXQgYXBwYXJ0ZW1lbnQgZGUgcGx1cyBkZSAxMTBtwrIgQ2FycmV6KDE0MSBtwrIgaGFiaXRhYmxlKSBiw6luw6lmaWNpZSBkZSB0csOocyBiZWxsZXMgcHJlc3RhdGlvbnMgZXQgYSDDqXTDqSBlbnRpw6hyZW1lbnQgcmVkaXN0cmlidcOpIHBhciB1biBhcmNoaXRlY3RlIGlsIHkgYSA1IGFucy4gSWwgc2UgY29tcG9zZSBkJ3VuZSBlbnRyw6llIHF1aSBzJ291dnJlIHN1ciB1bmUgbWFnbmlmaXF1ZSBwacOoY2UgZGUgcsOpY2VwdGlvbiBiYWlnbsOpZSBkZSBsdW1pw6hyZSBhdmVjIGN1aXNpbmUgb3V2ZXJ0ZSwgdW5lIHN1aXRlIHBhcmVudGFsZSBhdmVjIGRyZXNzaW5nIGV0IHNhbGxlIGRlIGJhaW5zIChhdmVjIGRvdWNoZSwgYmFpZ25vaXJlIGV0IFdDKSwgdW4gYnVyZWF1IG91IHNhbG9uIFRWLCB1bmUgc2FsbGUgZCdlYXUvYnVhbmRlcmllLiA8YnIgLz4KQXUgNcOobWUgw6l0YWdlLCBzb3VzIGxlcyB0b2l0cywgdW5lIGNoYW1icmUgbWFuc2FyZMOpZSBhdmVjIHNhbGxlIGRlIGJhaW5zIGV0IFdDIGV0IG5vbWJyZXV4IHJhbmdlbWVudHMuIFVuIGVzcGFjZSBzdXBwbMOpbWVudGFpcmUgbWl0b3llbiBwZXV0IGZhaXJlIG9mZmljZSBkZSByYW5nZW1lbnRzIG91IGNlbGxpZXIgcG91ciBsZSB2aW4uIFJBUkUgZGFucyBsZSBxdWFydGllciwgY2UgYmVsIGFwcGFydGVtZW50IGVzdCB1biB2w6lyaXRhYmxlIGhhdnJlIGRlIHBhaXguIFNlcyA1IGZlbsOqdHJlcyBkYW5zIGxhIHBpw6hjZSBkZSByw6ljZXB0aW9uIG9udCB1bmUgdnVlIGTDqWdhZ8OpZSBzdXIgbGVzIHRvaXRzIGRlIFBhcmlzIDogaW1wcmVuYWJsZS4gVHLDqHMgbHVtaW5ldXgsIGF1IGNhbG1lLCB1biBiaWVuIGV4Y2VwdGlvbm5lbCDDoCBkw6ljb3V2cmlyLjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlzX2NvcHJvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbiBjb3Byb3ByacOpdMOpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhbm5vbmNlX3Byb2NlZHVyZSI+TW9udGFudCBtb3llbiBhbm51ZWwgZGUgbGEgcXVvdGUtcGFydCBkZSBjaGFyZ2VzIGNvdXJhbnRlcyA6IDEgNjM3ICZldXJvOzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icGljdG8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdXJmYWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdG4tbGkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG8iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR4dCI+MTExPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGllY2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdG4tbGkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG8iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR4dCI+Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNoYW1icmVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdG4tbGkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG8iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR4dCI+Mjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNkYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3RuLWxpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eHQiPjI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzYWxsZXNfZWF1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdG4tbGkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG8iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InR4dCI+MTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcGUiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZ19kcGUiIHNyYz0iaHR0cHM6Ly93d3cuYWdlbmNlLXBsdXMubmV0L3NraW5zL19kZWZhdWx0L2xpYi9BZ2VuY2VQbHVzL3dzL2ltZ0RQRS5hc2h4P3ZhbHVlPTEyMyZzaXplPTI0MHgyNDAmcGljdG89ZHBlX29tYnJlIiBhbHQ9IkRQRSI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm9GaW5hbmNlIj4KICAgICAgICAgICAgICAgICAgICA8aDI+SW5mb3JtYXRpb25zIGZpbmFuY2nDqHJlczwvaDI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgNTUwIDAwMCAmZXVybzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InByaWNlIiBjb250ZW50PSIxNTUwMDAwLjAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InByaWNlQ3VycmVuY3kiIGNvbnRlbnQ9IiZldXJvOyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2VfbGVnZW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvbm9yYWlyZXMgaW5jbHVzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlX2RldGFpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjEgNTAwIDAwMCAmZXVybzsgSG9ub3JhaXJlcyBleGNsdXM8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ib25vcmFpcmVzIGRlIDMsMzMlIFRUQyDDoCBsYSBjaGFyZ2UgZGUgbCdhY3F1w6lyZXVyPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9InRvb2xzIj4KICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhTGlrZSBham91dF9zZWxlY3Rpb24iIGRhdGEtYmllbmlkPSI2MTAiIHRpdGxlPSJBam91dGVyIMOgIG1hIHPDqWxlY3Rpb24iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJhTGlrZSBlbnZvaV9hbWkiIGRhdGEtYmllbmlkPSI2MTAiIHRpdGxlPSJFbnZveWVyIGFubm9uY2UgaW1tb2JpbGnDqHJlIj48L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJhTGlrZSBzaGFyZSIgZGF0YS1iaWVuaWQ9IjYxMCIgdGl0bGU9IlBhcnRhZ2VyIGNldHRlIGFubm9uY2UiPjwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9InByaW50IiByZWw9Im5vZm9sbG93IiBocmVmPSIvaW1wcmVzc2lvbi9kZXRhaWxzLzYxMC8mYW1wO21vYmlsZT0wIiB0aXRsZT0iSW1wcmltZXIgYW5ub25jZSBpbW1vYmlsacOocmUiIHRhcmdldD0iX2JsYW5rIj48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJtZW50aW9uIiByZWw9Im5vZm9sbG93IiBocmVmPSIvbWVudGlvbnMtbGVnYWxlcy1iYXJlbWUvIiB0aXRsZT0iSW5mb3JtYXRpb25zIGp1cmlkaXF1ZXMgRXR1ZGUgTGVwaWMiPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L25hdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImludGVybG9jdXRldXIiIGl0ZW1wcm9wPSJzZWxsZXIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50Ij4KICAgICAgICAgICAgICAgICAgICA8aDI+Vm90cmUgaW50ZXJsb2N1dGV1cjwvaDI+CiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJhZ2VuY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGgzIGl0ZW1wcm9wPSJuYW1lIj5FdHVkZSBMZXBpYzwvaDM+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhZGRyZXNzIiBpdGVtcHJvcD0iYWRkcmVzcyIgIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUG9zdGFsQWRkcmVzcyI+PHNwYW4+NDUgUnVlIExlcGljIC0KICAgICAgICAgICAgICAgICAgICAgICAgNzUgMDE4Jm5ic3A7UEFSSVM8L3NwYW4+PG1ldGEgaXRlbXByb3A9InN0cmVldEFkZHJlc3MiIGNvbnRlbnQ9IjQ1IFJ1ZSBMZXBpYyIgLz48bWV0YSBpdGVtcHJvcD0iYWRkcmVzc0xvY2FsaXR5IiBjb250ZW50PSJQQVJJUyIgLz48bWV0YSBpdGVtcHJvcD0icG9zdGFsQ29kZSIgY29udGVudD0iNzUgMDE4IiAvPjxtZXRhIGl0ZW1wcm9wPSJhZGRyZXNzTG9jYWxpdHkiIGNvbnRlbnQ9IlBBUklTIiAvPjxtZXRhIGl0ZW1wcm9wPSJhZGRyZXNzQ291bnRyeSIgY29udGVudD0iRnJhbmNlIi8+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiIGNsYXNzPSJ0ZWxlcGhvbmUiPjxhIGhyZWY9InRlbDowMSA0MiA1OCAxMSAxMSI+MDEgNDIgNTggMTEgMTE8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb250YWN0X2Fubm9uY2UiIGNsYXNzPSJhbm5vbmNlX2Zvcm0iPgogICAgICAgICAgICAgICAgICAgIDxoMj5EZW1hbmRlIGRlIHJlbnNlaWduZW1lbnRzPC9oMj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iY29udGFjdCB2YWxpZGF0ZV9mb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iI2NvbnRhY3RfYW5ub25jZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJob25leSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ3ZWJzaXRlIj5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0id2Vic2l0ZSIgaWQ9IndlYnNpdGUiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJzZWxmX2luZm8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGFzdF9uYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9Imxhc3RfbmFtZSIgdHlwZT0idGV4dCIgbmFtZT0ibGFzdF9uYW1lIiBjbGFzcz0icmVxdWlyZWQgaWNvX3Byb2ZpbCIgdmFsdWU9IiIgcGxhY2Vob2xkZXI9Ik5vbSoiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPjwhLS0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJsYXN0X25hbWUiIC8+PCEtLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+PGxhYmVsIGZvcj0iZmlyc3RfbmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJmaXJzdF9uYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJmaXJzdF9uYW1lIiBjbGFzcz0iaWNvX3Byb2ZpbCIgdmFsdWU9IiIgcGxhY2Vob2xkZXI9IlByw6lub20qIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD48IS0tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0iZmlyc3RfbmFtZSIgLz48IS0tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLT48bGFiZWwgZm9yPSJlbWFpbCIgY2xhc3M9InBhcl9lbWFpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJlbWFpbCIgdHlwZT0idGV4dCIgbmFtZT0iZW1haWwiIHZhbHVlPSIiIGNsYXNzPSJyZXF1aXJlZCBlbWFpbCBpY29fbWFpbCIgcGxhY2Vob2xkZXI9IkVtYWlsKiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+PCEtLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9ImVtYWlsIiAvPjwhLS0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsYWJlbCBmb3I9InBob25lIiBjbGFzcz0icF90ZWxlcGhvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0icGhvbmUiIHR5cGU9InRleHQiIG5hbWU9InBob25lIiB2YWx1ZT0iIiBjbGFzcz0icmVxdWlyZWQgaWNvX3RlbCIgcGxhY2Vob2xkZXI9IlTDqWzDqXBob25lIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibWVzc2FnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9Im1lc3NhZ2UiIG5hbWU9Im1lc3NhZ2UiIGNsYXNzPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9Ik1lc3NhZ2UiPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0iaG9uZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idmxuOGdoZW1ydnA5cGJwZ21uNTVqb2RyMTAiPlZldWlsbGV6IGxhaXNzZXIgbGEgdmFsZXVyIGluaXRpYWxlIGRlIGNlIGNoYW1wPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ2bG44Z2hlbXJ2cDlwYnBnbW41NWpvZHIxMCIgaWQ9InZsbjhnaGVtcnZwOXBicGdtbjU1am9kcjEwIiB2YWx1ZT0idmxuOGdoZW1ydnA5cGJwZ21uNTVqb2RyMTAiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvYmxpZ2F0b2lyZSI+KiBjaGFtcHMgb2JsaWdhdG9pcmVzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpZCIgaWQ9ImlkIiB2YWx1ZT0iNjEwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiB2YWx1ZT0iTkEyLTg1NiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmNlX2lkIiBpZD0iYWdlbmNlX2lkIiB2YWx1ZT0iMSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3ViamVjdCIgaWQ9InN1YmplY3QiIHZhbHVlPSJDb250YWN0QW5ub25jZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiBuYW1lPSJzZW5kX2VtYWlsIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJFbnZveWVyIi8+CiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgIAo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkvLzwhW0NEQVRBWwoKCXZhciBhZ2VuY3kgPSBbXTsKCglmdW5jdGlvbiBhZmZpY2hhZ2VUeHQoYXJyYXlBZ2VuY3kpewogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VOYW1lJykuZWFjaChmdW5jdGlvbigpeyQodGhpcykudGV4dChhcnJheUFnZW5jeVswXS5uYW1lKTt9KTsKICAgICAgICAkKCdhcnRpY2xlLm1hbmRhdG9yeVR4dCAuYWdlbmNlQWRkcmVzcycpLnRleHQoYXJyYXlBZ2VuY3lbMF0uYWRkcmVzcyk7CiAgICAgICAgJCgnYXJ0aWNsZS5tYW5kYXRvcnlUeHQgLmFnZW5jZU1haWwnKS50ZXh0KGFycmF5QWdlbmN5WzBdLm1haWwpOwogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VNYWlsJykuYXR0cignaHJlZicsJ21haWx0bzonK2FycmF5QWdlbmN5WzBdLm1haWwpOwoKICAgICAgICBhZ2VuY3kgPSBbXTsgLy8gb24gdmlkZSBsZSB0YWJsZWF1Cgl9CgoJZnVuY3Rpb24gYWdlbmNlTWFueSgpewoJCWFnZW5jeS5wdXNoKHsKCQkJbmFtZTokKCdzZWxlY3QjYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbmFtZScpLCBhZGRyZXNzOiQoJ3NlbGVjdCNhZ2VuY2VfaWQgb3B0aW9uW3ZhbHVlPTFdJykuYXR0cignZGF0YS1sb2NhbGlzYXRpb24nKSwgbWFpbDokKCdzZWxlY3QjYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbWFpbCcpCgkJfSk7CgoJCWFmZmljaGFnZVR4dChhZ2VuY3kpOwoKCQkkKCdzZWxlY3QjYWdlbmNlX2lkJykub24oJ2NoYW5nZScsZnVuY3Rpb24oKXsKCQkJYWdlbmN5LnB1c2goewoJCQkJbmFtZTokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLW5hbWUnKSwgYWRkcmVzczokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLWxvY2FsaXNhdGlvbicpLCBtYWlsOiQodGhpcykuY2hpbGRyZW4oIjpzZWxlY3RlZCIpLmF0dHIoJ2RhdGEtbWFpbCcpCgkJCX0pOwoJCQlhZmZpY2hhZ2VUeHQoYWdlbmN5KTsKCQl9KTsKCX0KCgkvL11dPgo8L3NjcmlwdD4KCgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkJLy88IVtDREFUQVsKCgkJYWdlbmN5LnB1c2goewoJCQluYW1lOiJFdHVkZSBMZXBpYyAiLCBhZGRyZXNzOiI0NSBSdWUgTGVwaWMgNzUgMDE4IFBBUklTIiwgbWFpbDoiY29udGFjdEBldHVkZWxlcGljLmZyIgoJCX0pOwoKCQlhZmZpY2hhZ2VUeHQoYWdlbmN5KTsKCgkJLy9dXT4KCTwvc2NyaXB0PgoKCgoKCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2FydGljbGU+Cjwvc2VjdGlvbj4KPCEtLSBSb290IGVsZW1lbnQgb2YgUGhvdG9Td2lwZS4gTXVzdCBoYXZlIGNsYXNzIHBzd3AuIC0tPgo8ZGl2IGNsYXNzPSJwc3dwIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgPCEtLSBCYWNrZ3JvdW5kIG9mIFBob3RvU3dpcGUuCiAgICBJdCdzIGEgc2VwYXJhdGUgZWxlbWVudCwgYXMgYW5pbWF0aW5nIG9wYWNpdHkgaXMgZmFzdGVyIHRoYW4gcmdiYSgpLiAtLT4KICAgIDxkaXYgY2xhc3M9InBzd3BfX2JnIj48L2Rpdj4KICAgIDwhLS0gU2xpZGVzIHdyYXBwZXIgd2l0aCBvdmVyZmxvdzpoaWRkZW4uIC0tPgogICAgPGRpdiBjbGFzcz0icHN3cF9fc2Nyb2xsLXdyYXAiPgogICAgICAgIDwhLS0gQ29udGFpbmVyIHRoYXQgaG9sZHMgc2xpZGVzLgogICAgICAgICAgICBQaG90b1N3aXBlIGtlZXBzIG9ubHkgMyBvZiB0aGVtIGluIERPTSB0byBzYXZlIG1lbW9yeS4KICAgICAgICAgICAgRG9uJ3QgbW9kaWZ5IHRoZXNlIDMgcHN3cF9faXRlbSBlbGVtZW50cywgZGF0YSBpcyBhZGRlZCBsYXRlciBvbi4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY29udGFpbmVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIERlZmF1bHQgKFBob3RvU3dpcGVVSV9EZWZhdWx0KSBpbnRlcmZhY2Ugb24gdG9wIG9mIHNsaWRpbmcgYXJlYS4gQ2FuIGJlIGNoYW5nZWQuIC0tPgogICAgICAgIDxpbWcgY2xhc3M9InNwYWNlckJsb2NrZXIiIHNyYz0iL3RoZW1lL19kZWZhdWx0L2ltYWdlcy9zcGFjZXIucG5nIiBhbHQ9IiIgc3R5bGU9InotaW5kZXg6MDsiIC8+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fdWkgcHN3cF9fdWktLWhpZGRlbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3RvcC1iYXIiPgogICAgICAgICAgICAgICAgPCEtLSAgQ29udHJvbHMgYXJlIHNlbGYtZXhwbGFuYXRvcnkuIE9yZGVyIGNhbiBiZSBjaGFuZ2VkLiAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NvdW50ZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tY2xvc2UiIHRpdGxlPSJDbG9zZSAoRXNjKSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1zaGFyZSIgdGl0bGU9IlNoYXJlIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWZzIiB0aXRsZT0iVG9nZ2xlIGZ1bGxzY3JlZW4iPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tem9vbSIgdGl0bGU9Ilpvb20gaW4vb3V0Ij48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwhLS0gUHJlbG9hZGVyIGRlbW8gaHR0cDovL2NvZGVwZW4uaW8vZGltc2VtZW5vdi9wZW4veXlCV29SIC0tPgogICAgICAgICAgICAgICAgPCEtLSBlbGVtZW50IHdpbGwgZ2V0IGNsYXNzIHBzd3BfX3ByZWxvYWRlci0tYWN0aXZlIHdoZW4gcHJlbG9hZGVyIGlzIHJ1bm5pbmcgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19wcmVsb2FkZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9faWNuIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fY3V0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19kb251dCI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2hhcmUtbW9kYWwgcHN3cF9fc2hhcmUtbW9kYWwtLWhpZGRlbiBwc3dwX19zaW5nbGUtdGFwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3NoYXJlLXRvb2x0aXAiPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLWxlZnQiIHRpdGxlPSJQcmV2aW91cyAoYXJyb3cgbGVmdCkiPjwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1hcnJvdy0tcmlnaHQiIHRpdGxlPSJOZXh0IChhcnJvdyByaWdodCkiPjwvYnV0dG9uPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19jYXB0aW9uIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb25fX2NlbnRlciI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvRW1iZWRWaWRlb0FQSS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vPCFbQ0RBVEFbCiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAvLyAgQWRkTG9hZEV2ZW50CiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBmdW5jdGlvbiBBZGRMb2FkRXZlbnQoZnVuYykgewogICAgICAgIHZhciBvbGRvbmxvYWQgPSB3aW5kb3cub25sb2FkOwogICAgICAgIGlmICh0eXBlb2Ygd2luZG93Lm9ubG9hZCAhPSAnZnVuY3Rpb24nKQogICAgICAgIHsgd2luZG93Lm9ubG9hZCA9IGZ1bmM7IH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKG9sZG9ubG9hZCkKICAgICAgICAgICAgICAgIHsgb2xkb25sb2FkKCk7IH0KICAgICAgICAgICAgICAgIGZ1bmMoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgICAgIC8vIAogICAgICAgICQoJyNtYWluJykuYWRkQ2xhc3MoJ2Fubm9uY2VzLWRldGFpbCBEMicpOwoKICAgICAgICAvLyAKICAgICAgICB2YXIgbGliRmlsZXMgPSB7CiAgICAgICAgICAgICdqcyc6IFsKICAgICAgICAgICAgICAgICcvdGhlbWUvX3NpdGVSSU8xNzAyLmV0dWxlcGljL2pzL1Bob3RvU3dpcGUvcGhvdG9zd2lwZS5taW4uanMnLAogICAgICAgICAgICAgICAgJy90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvanMvUGhvdG9Td2lwZS9waG90b3N3aXBlLXVpLWRlZmF1bHQubWluLmpzJwogICAgICAgICAgICBdLAogICAgICAgICAgICAnY3NzJzogWwogICAgICAgICAgICAgICAgJy90aGVtZS9fc2l0ZVJJTzE3MDIuZXR1bGVwaWMvanMvUGhvdG9Td2lwZS9waG90b3N3aXBlLmNzcycsCiAgICAgICAgICAgICAgICAnL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9qcy9QaG90b1N3aXBlL2RlZmF1bHQtc2tpbi9kZWZhdWx0LXNraW4uY3NzJwogICAgICAgICAgICBdCiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsaW09bGliRmlsZXNbJ2pzJ10ubGVuZ3RoOyBpIDwgbGltOyBpKyspewogICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgICAgICBub2RlLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKICAgICAgICAgICAgbm9kZS5zcmMgPSBsaWJGaWxlc1snanMnXVtpXTsKICAgICAgICAgICAgJCgnaGVhZCcpLmFwcGVuZChub2RlKTsKICAgICAgICB9CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpbT1saWJGaWxlc1snY3NzJ10ubGVuZ3RoOyBpIDwgbGltOyBpKyspewogICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTsKICAgICAgICAgICAgbm9kZS50eXBlID0gJ3RleHQvY3NzJzsKICAgICAgICAgICAgbm9kZS5yZWwgPSAnc3R5bGVzaGVldCc7CiAgICAgICAgICAgIG5vZGUuaHJlZiA9IGxpYkZpbGVzWydjc3MnXVtpXTsKICAgICAgICAgICAgaWYgKGk9PTApCiAgICAgICAgICAgICAgICAkKCdoZWFkJykucHJlcGVuZChub2RlKTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgJCgnaGVhZCBsaW5rJykuZXEoaS0xKS5hZnRlcihub2RlKTsKICAgICAgICB9CiAgICAgICAgKGZ1bmN0aW9uKCl7CgogICAgICAgICAgICB2YXIgc2xpZGVzID0gW107CgogICAgICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYxMC82MTBfMDAtMjAxOS0xMi0xNS0wMzA1LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDIpIiB9KTsKICAgICAgICAgICAgICAgICAgICBzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MTAvNjEwXzAxLTIwMTktMTItMTUtMDMwNS5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDAyKSIgfSk7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNjEwLzYxMF8wMi0yMDE5LTEyLTE1LTAzMDUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwMikiIH0pOwogICAgICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYxMC82MTBfMDMtMjAxOS0xMi0xNS0wMzA1LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDIpIiB9KTsKICAgICAgICAgICAgICAgICAgICBzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MTAvNjEwXzA0LTIwMTktMTItMTUtMDMwNi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDAyKSIgfSk7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNjEwLzYxMF8wNS0yMDE5LTEyLTE1LTAzMDYuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwMikiIH0pOwogICAgICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYxMC82MTBfMDYtMjAxOS0xMi0xNS0wMzA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDIpIiB9KTsKICAgICAgICAgICAgICAgICAgICBzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MTAvNjEwXzA3LTIwMTktMTItMTUtMDMwNi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDAyKSIgfSk7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNjEwLzYxMF8wOC0yMDE5LTEyLTE1LTAzMDYuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwMikiIH0pOwogICAgICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYxMC82MTBfMDktMjAxOS0xMi0xNS0wMzA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDIpIiB9KTsKCiAgICAgICAgICAgIGlmKHNsaWRlcy5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICAgIHNsaWRlcy5zaGlmdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzbGlkZXMubGVuZ3RoID09IDApCiAgICAgICAgICAgICAgICAkKCcjZGlhcG9yYW1hUHJvZmlsIC5jeWNsZS1wYWdlcicpLmhpZGUoKTsKCiAgICAgICAgICAgIGZ1bmN0aW9uIGltZ1ByZWxvYWQoc2xpZGVzLCBpZHgsIGNhbGxiYWNrKXsKCiAgICAgICAgICAgICAgICB2YXIgdGVtcEltZyA9IG5ldyBJbWFnZSgpOwogICAgICAgICAgICAgICAgdmFyIE9ialNsaWRlID0gc2xpZGVzW2lkeF07CiAgICAgICAgICAgICAgICBpZihPYmpTbGlkZSA9PSBudWxsKXsKICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJCh0ZW1wSW1nKS5sb2FkKGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgIHZhciBuZXdTbGlkZSA9ICc8ZGl2IGRhdGEtY3ljbGUtcGFnZXItdGVtcGxhdGU9IjxzcGFuPjwvc3Bhbj4iPjxpbWcgY2xhc3M9InNwYWNlckJsb2NrZXIiIHNyYz0iL3RoZW1lL19kZWZhdWx0L2ltYWdlcy9zcGFjZXIucG5nIiBhbHQ9IiIgLz48aW1nIGl0ZW1wcm9wPSJpbWFnZSIgY2xhc3M9ImF1dG9TY2FsZSIgc3JjPSInK09ialNsaWRlLnNyYysnIiBhbHQ9IicrT2JqU2xpZGUuYWx0KyciLz48c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+PC9kaXY+JzsKCiAgICAgICAgICAgICAgICAgICAgJCgnI2RpYXBvcmFtYVByb2ZpbCcpLmN5Y2xlKCdhZGQnLCBuZXdTbGlkZSk7CgogICAgICAgICAgICAgICAgICAgIC8vICAKCiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCArIDEgPCBzbGlkZXMubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgaW1nUHJlbG9hZChzbGlkZXMsIGlkeCArIDEsIGNhbGxiYWNrKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB0ZW1wSW1nLnNyYyA9IE9ialNsaWRlLnNyYzsKCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEFkZExvYWRFdmVudChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaW1nUHJlbG9hZChzbGlkZXMsMCwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgaCA9ICgkKHdpbmRvdykuaGVpZ2h0KCkpOwogICAgICAgICAgICAgICAgICAgIHZhciBoZiA9IE1hdGgucm91bmQoaCk7CgogICAgICAgICAgICAgICAgICAgICQoJyNkaWFwb3JhbWFQcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzpoZisncHgnCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgJCgnLmNvbnRlbmV1ckRldGFpbCcpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdtYXJnaW4tdG9wJyA6ICQod2luZG93KS5oZWlnaHQoKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJy5hdXRvU2NhbGUnKSk7CgoKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgfSkoKTsKCiAgICAgICAgLy8gCgogICAgICAgIChmdW5jdGlvbigpewoKICAgICAgICAgICAgdmFyIGggPSAoJCh3aW5kb3cpLmhlaWdodCgpKTsKICAgICAgICAgICAgdmFyIGhmID0gTWF0aC5yb3VuZChoKTsKCiAgICAgICAgICAgICQoJyNkaWFwb3JhbWFQcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgJ2hlaWdodCc6aGYrJ3B4JwogICAgICAgICAgICB9KTsKICAgICAgICAgICAkKCcuY29udGVuZXVyRGV0YWlsJykuY3NzKHsKICAgICAgICAgICAgICAgICdtYXJnaW4tdG9wJyA6ICQod2luZG93KS5oZWlnaHQoKQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnLmF1dG9TY2FsZScpKTsKICAgICAgICB9KSgpOwoKICAgICAgICAvLyAKCiAgICAgICAgdmFyIGRpYXBvQ3ljbGUgPSAkKCcjZGlhcG9yYW1hUHJvZmlsJykuY3ljbGUoewogICAgICAgICAgICBzbGlkZXM6Jz4gZGl2JywKICAgICAgICAgICAgZng6ICdmYWRlJywKICAgICAgICAgICAgc3BlZWQ6MTAwMCwKICAgICAgICAgICAgc3dpcGU6dHJ1ZSwKICAgICAgICAgICAgdGltZW91dDo1MDAwCiAgICAgICAgfSk7CgogICAgICAgIC8vIAoKICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBoID0gKCQod2luZG93KS5oZWlnaHQoKSk7CiAgICAgICAgICAgIHZhciBoZiA9IE1hdGgucm91bmQoaCk7CgogICAgICAgICAgICAkKCcjZGlhcG9yYW1hUHJvZmlsJykuY3NzKHsKICAgICAgICAgICAgICAgICdoZWlnaHQnOmhmKydweCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQoJy5jb250ZW5ldXJEZXRhaWwnKS5jc3MoewogICAgICAgICAgICAgICAgJ21hcmdpbi10b3AnIDogJCh3aW5kb3cpLmhlaWdodCgpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcuYXV0b1NjYWxlJykpOwogICAgICAgIH0pOwoKICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCdpbWcuYXV0b1NjYWxlJykpOwogICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKXsKICAgICAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnaW1nLmF1dG9TY2FsZScpKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gCgogICAgICAgIHZhciBsaXN0SW1ncyA9IFtdOwoKICAgICAgICBsaXN0SW1ncy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYxMC82MTBfMDAtMjAxOS0xMi0xNS0wMzA1LmpwZyIsdGl0bGU6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDAyKSIsdzoiIixoOiIiIH0pOwogICAgICAgIGxpc3RJbWdzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNjEwLzYxMF8wMS0yMDE5LTEyLTE1LTAzMDUuanBnIix0aXRsZToiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDIpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MTAvNjEwXzAyLTIwMTktMTItMTUtMDMwNS5qcGciLHRpdGxlOiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwMikiLHc6IiIsaDoiIiB9KTsKICAgICAgICBsaXN0SW1ncy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYxMC82MTBfMDMtMjAxOS0xMi0xNS0wMzA1LmpwZyIsdGl0bGU6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDAyKSIsdzoiIixoOiIiIH0pOwogICAgICAgIGxpc3RJbWdzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNjEwLzYxMF8wNC0yMDE5LTEyLTE1LTAzMDYuanBnIix0aXRsZToiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDIpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MTAvNjEwXzA1LTIwMTktMTItMTUtMDMwNi5qcGciLHRpdGxlOiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwMikiLHc6IiIsaDoiIiB9KTsKICAgICAgICBsaXN0SW1ncy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYxMC82MTBfMDYtMjAxOS0xMi0xNS0wMzA2LmpwZyIsdGl0bGU6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDAyKSIsdzoiIixoOiIiIH0pOwogICAgICAgIGxpc3RJbWdzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNjEwLzYxMF8wNy0yMDE5LTEyLTE1LTAzMDYuanBnIix0aXRsZToiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDIpIix3OiIiLGg6IiIgfSk7CiAgICAgICAgbGlzdEltZ3MucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy82MTAvNjEwXzA4LTIwMTktMTItMTUtMDMwNi5qcGciLHRpdGxlOiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwMikiLHc6IiIsaDoiIiB9KTsKICAgICAgICBsaXN0SW1ncy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzYxMC82MTBfMDktMjAxOS0xMi0xNS0wMzA2LmpwZyIsdGl0bGU6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDAyKSIsdzoiIixoOiIiIH0pOwoKICAgICAgICBpZiAobGlzdEltZ3MubGVuZ3RoID4gMCl7CiAgICAgICAgICAgICQoJy50cmlnZ2VySEQnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgcHN3cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHN3cCcpWzBdOwogICAgICAgICAgICAgICAgdmFyIGdhbGxlcnkgPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107CiAgICAgICAgICAgICAgICAvLyAgCiAgICAgICAgICAgICAgICAkKCcubG9hZGVyX3Bob3Rvc3dpcGUnKS5zaG93KCk7CiAgICAgICAgICAgICAgICB2YXIgcHJlbG9hZEltZyA9IGZ1bmN0aW9uKGlkeCl7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA+PSBsaXN0SW1ncy5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB2YXIgZGVmZXIgPSAkLkRlZmVycmVkKCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcEltZyA9IG5ldyBJbWFnZSgpOwogICAgICAgICAgICAgICAgICAgIHRtcEltZy5vbmxvYWQgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICBsaXN0SW1nc1tpZHhdLncgPSB0aGlzLm5hdHVyYWxXaWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEltZ3NbaWR4XS5oID0gdGhpcy5uYXR1cmFsSGVpZ2h0OwogICAgICAgICAgICAgICAgICAgICAgICBkZWZlci5yZXNvbHZlKGlkeCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRtcEltZy5vbmVycm9yID0gZnVuY3Rpb24oKXsgZGVmZXIucmVqZWN0KGlkeCk7IH0KICAgICAgICAgICAgICAgICAgICB0bXBJbWcuc3JjID0gbGlzdEltZ3NbaWR4XS5zcmM7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVyLnByb21pc2UoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gcHJlbG9hZEltZygwKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaW0gPSBsaXN0SW1ncy5sZW5ndGg7IGkgPCBsaW07IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbihpZHgpewogICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGxpc3RJbWdzW2lkeF0pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2FsbGVyeSA9PSBudWxsKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJTbGlkZUlkeCA9IGRpYXBvQ3ljbGUuZGF0YSgiY3ljbGUub3B0cyIpLmN1cnJTbGlkZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPj0gY3VyU2xpZGVJZHgpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbGxlcnkgPSBuZXcgUGhvdG9Td2lwZShwc3dwRWxlbWVudCwgUGhvdG9Td2lwZVVJX0RlZmF1bHQsIGl0ZW1zLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbmNoVG9DbG9zZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25TY3JvbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZU9uVmVydGljYWxEcmFnOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdPcGFjaXR5OicwLjk1JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIFVJIE9wdGlvbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVFbDogZmFsc2UsLy8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tUb0Nsb3NlTm9uWm9vbWFibGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXBUb0Nsb3NlOiBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbGxlcnkubGlzdGVuKCdjbG9zZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFwb0N5Y2xlLmN5Y2xlKCdyZXN1bWUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5pbml0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxvYWRlcl9waG90b3N3aXBlJykuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5LmdvVG8oY3VyU2xpZGVJZHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID49IGdhbGxlcnkuZ2V0Q3VycmVudEluZGV4KCkgLSAxICYmIGlkeCA8PSBnYWxsZXJ5LmdldEN1cnJlbnRJbmRleCgpICsgMSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5pbnZhbGlkYXRlQ3Vyckl0ZW1zKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS51cGRhdGVTaXplKHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5LnVpLnVwZGF0ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmVsb2FkSW1nKGlkeCsxKTsKICAgICAgICAgICAgICAgICAgICB9LGZ1bmN0aW9uKGlkeCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmVsb2FkSW1nKGlkeCsxKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgIGRpYXBvQ3ljbGUuY3ljbGUoJ3BhdXNlJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy8gCiAgICAgICAgJCgnLmRldGFpbHMgLnRvb2xzIC5zaGFyZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPSJib3ggYm94X3NoYXJlIj48ZGl2IGNsYXNzPSJzaXplciI+PGgxPlBhcnRhZ2VyIHN1cjwvaDE+PGRpdiBjbGFzcz0iY29udGVudCI+PC9kaXY+PHNwYW4gY2xhc3M9ImFMaWtlIGJ0bkNsb3NlIj48L3NwYW4+PC9kaXY+PC9kaXY+JykuYXBwZW5kVG8oJ2JvZHknKS5mYWRlSW4oJ2Zhc3QnKTsKICAgICAgICAgICAgJCgnLmJveF9zaGFyZSAuYnRuQ2xvc2UnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICQoJy5ib3hfc2hhcmUnKS5mYWRlT3V0KCdmYXN0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgJCgnYm9keSxodG1sJykuY3NzKCdvdmVyZmxvdycsICcnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQoJ2JvZHksaHRtbCcpLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7CiAgICAgICAgICAgICQoJy5ib3hfc2hhcmUgLmNvbnRlbnQnKS5zaGFycnJlKHsKICAgICAgICAgICAgICAgIHNoYXJlOiB7CiAgICAgICAgICAgICAgICAgICAgdHdpdHRlcjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBmYWNlYm9vazogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBsaW5rZWRpbjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBwaW50ZXJlc3Q6IHRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBidXR0b25zOiB7CiAgICAgICAgICAgICAgICAgICAgcGludGVyZXN0OiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhOiAnaHR0cHM6Ly93d3cuZXR1ZGVsZXBpYy5mci8nLnJlcGxhY2UoL1wvJC8sICcnKSArICcvJyArICcvZGF0YXMvYmllbnMvdGh1bWJzLzYxMC82MTBfMDAtMjAxOS0xMi0xNS0wMzA1LmpwZycucmVwbGFjZSgvXlwvLywgJycpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPHVsPlxuXAogICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJhTGlrZSBmYWNlYm9vayI+RmFjZWJvb2s8L3NwYW4+PC9saT5cblwKICAgICAgICAgICAgICAgIDxsaT48c3BhbiBjbGFzcz0iYUxpa2UgdHdpdHRlciI+VHdpdHRlcjwvc3Bhbj48L2xpPlxuXAogICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJhTGlrZSBsaW5rZWRpbiI+TGlua2VkaW48L3NwYW4+PC9saT5cblwKICAgICAgICAgICAgICAgIDxsaT48c3BhbiBjbGFzcz0iYUxpa2UgcGludGVyZXN0Ij5QaW50ZXJlc3Q8L3NwYW4+PC9saT5cblwKICAgICAgICAgICAgICAgIDwvdWw+JywKICAgICAgICAgICAgICAgIHVybEN1cmw6ICcnLCAvLyAgZGlzYWJsZSBzaGFycnJlLnBocAogICAgICAgICAgICAgICAgZW5hYmxlSG92ZXI6IGZhbHNlLAogICAgICAgICAgICAgICAgZW5hYmxlQ291bnRlcjogZmFsc2UsCiAgICAgICAgICAgICAgICBlbmFibGVUcmFja2luZzogZmFsc2UsCiAgICAgICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKGFwaSwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgICAgICQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICdsaSA+IConLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvY2lhbE5hbWVzID0gWydmYWNlYm9vaycsICdsaW5rZWRpbicsICdwaW50ZXJlc3QnLCAndHdpdHRlciddCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc29jaWFsTmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKHNvY2lhbE5hbWVzW2ldKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5vcGVuUG9wdXAoc29jaWFsTmFtZXNbaV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0pOwoKICAgICAgICAvLyAKICAgICAgICAkKCcuZW52b2lfYW1pJykub24oJ2NsaWNrJyxmdW5jdGlvbigpewogICAgICAgICAgICAkKCc8Zm9ybSBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iL2Vudm9pZS1hbm5vbmNlL2RldGFpbHMvJyskKHRoaXMpLmF0dHIoJ2RhdGEtYmllbmlkJykrJy8iPlxuXAogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idXJsX3NsdWciIHZhbHVlPSJ2ZW50ZS1hcHBhcnRlbWVudC1wYXJpcyIgLz5cblwKICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlZGlyZWN0IiB2YWx1ZT0iMSIgLz5cblwKICAgICAgICAgICAgPC9mb3JtPicpLmFwcGVuZFRvKCdib2R5Jykuc3VibWl0KCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gCiAgICAgICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciB2aWRPcGVuID0gZmFsc2U7CiAgICAgICAgICAgIHZhciBlbWJlZFZpZGVvID0gbnVsbDsKICAgICAgICAgICAgJCgnLnRyaWdnZXJWaWQnKS5vbiggJ2NsaWNrJywgZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICBpZih2aWRPcGVuID09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmlkT3BlbiA9IHRydWU7CgogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBFbWJlZFZpZGVvQVBJLkVudW1UeXBlU2V0dGluZ3MpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlkZW9UeXBlU2V0dGluZ3MgPSBFbWJlZFZpZGVvQVBJLkVudW1UeXBlU2V0dGluZ3Nba2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICQodGhpcykuYXR0cignZGF0YS12aWR1cmwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVybC5tYXRjaCh2aWRlb1R5cGVTZXR0aW5ncy5ocmVmUGF0dGVybikpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoJy5ib3hfdmlkZW8nKS5sZW5ndGggPT0gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz0iYm94IGJveF92aWRlbyI+PHNwYW4gY2xhc3M9ImFMaWtlIGJ0bkNsb3NlIj48L3NwYW4+PGRpdiBjbGFzcz0ic2l6ZXIiPjxkaXYgY2xhc3M9InZpZXdlciI+PGlmcmFtZSBhbGxvd2Z1bGxzY3JlZW49IiIgZnJhbWVib3JkZXI9IjAiIGhlaWdodD0iMTAwJSIgc3JjPSInK3VybCsnP2F1dG9wbGF5PTEiIHdpZHRoPSIxMDAlIj48L2lmcmFtZT48L2Rpdj48L2Rpdj48L2Rpdj4nKS5hcHBlbmRUbygnYm9keScpLmZhZGVJbignZmFzdCcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5LGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZW1iZWRWaWRlbyAhPSBudWxsKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWJlZFZpZGVvLnBsYXlWaWRlbygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZE9wZW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJCgnLnZpZXdlcicpLmhlaWdodCgkKCcudmlld2VyJykud2lkdGgoKS8xLjgyMjkxNjYpOwogICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlc2l6ZShmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAkKCcudmlld2VyJykuaGVpZ2h0KCQoJy52aWV3ZXInKS53aWR0aCgpLzEuODIyOTE2Nik7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICQoJy5ib3hfdmlkZW8gLmJ0bkNsb3NlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5ib3hfdmlkZW8nKS5mYWRlT3V0KCdmYXN0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keSxodG1sJykuY3NzKCdvdmVyZmxvdycsICcnKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0pOwogICAgICAgIH0pKCk7CiAgICAgICAgLy8gCgogICAgICAgICQoJy5ham91dF9zZWxlY3Rpb24nKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CgogICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7CgogICAgICAgIHZhciBpZCA9ICQodGhpcykuYXR0cignZGF0YS1iaWVuaWQnKTsKCiAgICAgICAgbWFzZWxlY3Rpb24oJycsaWQsJ2FkZCcsZnVuY3Rpb24ocmV0b3VyKXsKCiAgICAgICAgICAgIHZhciBhbmltX3RpbWVvdXQ7CiAgICAgICAgICAgIHZhciBhbmltMl90aW1lb3V0OwogICAgICAgICAgICB2YXIgcmVtb3ZlX3RpbWVvdXQ7CgogICAgICAgICAgICBjbGVhclRpbWVvdXQoYW5pbV90aW1lb3V0KTsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW0yX3RpbWVvdXQpOwogICAgICAgICAgICBjbGVhclRpbWVvdXQocmVtb3ZlX3RpbWVvdXQpOwoKICAgICAgICAgICAgaWYocmV0b3VyKXsKCiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBvbmNlJykuYXBwZW5kKCc8cD4nK21lc3NhZ2VbMF0rJzwvcD4nKTsKCiAgICAgICAgICAgICAgICB2YXIgbmJfc2VsZWN0aW9uID0gcGFyc2VJbnQoJCgnLm5iX3NlbGVjdGlvbicpLnRleHQoKSkrMTsKICAgICAgICAgICAgICAgICQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KG5iX3NlbGVjdGlvbik7CgogICAgICAgICAgICAgICAgYW5pbV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5hZGRDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICBhbmltMl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ29uY2UnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSw2MDApOwoKICAgICAgICAgICAgICAgICAgICB9LCAxNTAwKTsKCiAgICAgICAgICAgICAgICB9LCAxMDApOwoJCQkJJCgnaGVhZGVyIC5zZWxlY3Rpb24nKS5lYWNoKGZ1bmN0aW9uKCl7CgkJCQkJaWYgKCQodGhpcykuY2hpbGRyZW4oJ3NwYW4nKS5hdHRyKCJjbGFzcyIpPT0nb3V0JykKCQkJCQkJJCh0aGlzKS5jaGlsZHJlbignc3BhbicpLmF0dHIoImNsYXNzIiwnZnVsbCcpOwoJCQkJfSk7CgogICAgICAgICAgICB9ZWxzZSB7CiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBkb25lJykuYXBwZW5kKCc8cD4nK21lc3NhZ2VbMV0rJzwvcD4nKTsKCiAgICAgICAgICAgICAgICBhbmltX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLmFkZENsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgIGFuaW0yX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnZG9uZScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LDYwMCk7CgogICAgICAgICAgICAgICAgICAgIH0sIDE1MDApOwoKICAgICAgICAgICAgICAgIH0sIDEwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIGZhbHNlOwoKCQl9KTsKCiAgICAgICAgLy8gCiAgICAgICAgdmFyIGgyID0gJCgnLmludGVybG9jdXRldXIgLnBob3RvJykud2lkdGgoKS8wLjgzOwogICAgICAgICQoJy5pbnRlcmxvY3V0ZXVyIC5waG90bycpLmhlaWdodChoMik7CgogICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIGgyID0gJCgnLmludGVybG9jdXRldXIgLnBob3RvJykud2lkdGgoKS8wLjgzOwogICAgICAgICAgICAkKCcuaW50ZXJsb2N1dGV1ciAucGhvdG8nKS5oZWlnaHQoaDIpOwogICAgICAgIH0pOwoKICAgICAgICAvLyAKICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcuYXV0b1NjYWxlJykpOwogICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKXsKICAgICAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnLmF1dG9TY2FsZScpKTsKICAgICAgICB9KTsKICAgIH0pOwogICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIHN0aWNreU1lbnUgPSAnJzsKCiAgICAgICAgdmFyIGF1dG9TY2FsZSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJ2ltZy5hdXRvU2NhbGUnKSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgYnRuR29Eb3duID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAkKCdzcGFuLmJ0bkdvRG93bicpLmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZigkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPT0gJCgnc2VjdGlvbi52aXN1ZWxIRCcpLm9mZnNldCgpLnRvcCl7CiAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe3Njcm9sbFRvcDokKCdzZWN0aW9uLnZpc3VlbEhEJykuaGVpZ2h0KCl9LDEyMDApOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe3Njcm9sbFRvcDowfSwxMjAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgc3RpY2t5ID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgIGlmKCQod2luZG93KS5zY3JvbGxUb3AoKSAhPSAwKXsKICAgICAgICAgICAgICAgICAgICAkKCdoZWFkZXInKS5hZGRDbGFzcygnc3RpY2t5Jyk7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAkKCdoZWFkZXInKS5yZW1vdmVDbGFzcygnc3RpY2t5JykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBhdXRvU2NhbGUoKTsKICAgICAgICBidG5Hb0Rvd24oKTsKICAgICAgICBzdGlja3koKTsKCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoYXV0b1NjYWxlLGJ0bkdvRG93bixzdGlja3kpOwogICAgICAgICQod2luZG93KS5yZXNpemUoYXV0b1NjYWxlKTsKICAgIH0pKCk7CgovL11dPgo8L3NjcmlwdD4KCiAgICAgICAgPGEgY2xhc3M9ImJ1dHRvbi10b3Atc3RpY2t5IiBocmVmPSIjdG9wIiB0aXRsZT0iQmFjayB0byB0b3AiPjxzcGFuIGNsYXNzPSJmYSBmYS1jaGV2cm9uLXVwIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPjwvYT4KICAgIDwvbWFpbj4KICAgIDxmb290ZXI+Cgk8ZGl2IGNsYXNzPSJ0b3AiPgogICAgICAgIDxkaXYgY2xhc3M9ImxlZnQiPgoJCTwhLS0gPGRpdiBjbGFzcz0idGl0cmUiPk5vdXMgY29udGFjdGVyPC9kaXY+IC0tPgogICAgCQk8IS0tIDxhIGNsYXNzPSJhZ2VuY2Ugb25lIiBpdGVtc2NvcGU9Iml0ZW1zY29wZSIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1JlYWxFc3RhdGVBZ2VudCIgaHJlZj0iL2NvbnRhY3QvIiB0aXRsZT0iQ29udGFjdGV6IGzigJlhZ2VuY2UgaW1tb2JpbGnDqHJlIEV0dWRlIExlcGljIj4KICAgICAgICAgICAgICAgIDxsaW5rIGl0ZW1wcm9wPSJpbWFnZSIgaHJlZj0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9pbWFnZXMvbG9nby5wbmciLz4KICAgICAgICAgICAgICAgIDxtZXRhICBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iRXR1ZGUgTGVwaWMgIi8+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJicmFuZCIgaXRlbXByb3A9ImxlZ2FsTmFtZSI+RXR1ZGUgTGVwaWM8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0iYWRkcmVzcyIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9Qb3N0YWxBZGRyZXNzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InN0cmVldEFkZHJlc3MiPjQ1IFJ1ZSBMZXBpYzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc3RhbENvZGUiIGNvbnRlbnQ9Ijc1IDAxOCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iYWRkcmVzc0xvY2FsaXR5IiBjb250ZW50PSJQQVJJUyIvPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj43NSAwMTg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlBBUklTPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+IC0tPgogICAgICAgICAgICAgICAgICAgIDwhLS0gPGxpIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAwMSA0MiA1OCAxMSAxMQogICAgICAgICAgICAgICAgICAgIDwvbGk+IC0tPgogICAgICAgICAgICAgICAgPCEtLSA8L3VsPgogICAgICAgICAgICA8L2E+IC0tPgoKICAgICAgICAgICAgPGEgY2xhc3M9ImFnZW5jZSBtYW55IiBocmVmPSIvY29udGFjdC8iIHRpdGxlPSJFdHVkZSBMZXBpYyI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3RoZW1lL19zaXRlUklPMTcwMi5ldHVsZXBpYy9pbWFnZXMvbG9nb19mb290ZXIucG5nIiBhbHQ9IkV0dWRlIExlcGljIC0gIi8+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPHVsIGNsYXNzPSJyem8iPgogICAgICAgICAgICAJPGxpIGNsYXNzPSJmYWNlYm9vayI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0V0dWRlLUxlcGljLTE3MTA0MDY0MDU4NzI4NjYvIiB0aXRsZT0iIEZhY2Vib29rIC0gQWdlbmNlIGltbW9iaWxpw6hyZSBwYXJpcyAxOCAiIHRhcmdldD0iX2JsYW5rIj48c3BhbiBjbGFzcz0ib3V0Ij48L3NwYW4+PHNwYW4gY2xhc3M9ImhvdmVyIj48L3NwYW4+PC9hPjwvbGk+CiAgICAgICAgICAgIAk8bGkgY2xhc3M9Imluc3RhZ3JhbSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9ldHVkZWxlcGljX2ltbW9iaWxpZXIvIiB0aXRsZT0iIiB0YXJnZXQ9Il9ibGFuayI+PHNwYW4gY2xhc3M9Im91dCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJob3ZlciI+PC9zcGFuPjwvYT48L2xpPgogICAgICAgICAgICAJPGxpIGNsYXNzPSJsaW5rZWRpbiI+PGEgaHJlZj0iaHR0cHM6Ly9mci5saW5rZWRpbi5jb20vaW4vZ3VpbGFpbmUtZ291Z25hcmQtYTcyNDY4ODMiIHRpdGxlPSJMaW5rZWRpbiAtIEFjaGF0IHZlbnRlIGFwcGFydGVtZW50IG1haXNvbiBow7R0ZWwgcGFydGljdWxpZXIgbG9mdCBkdXBsZXggUGFyaXMiIHRhcmdldD0iX2JsYW5rIj48c3BhbiBjbGFzcz0ib3V0Ij48L3NwYW4+PHNwYW4gY2xhc3M9ImhvdmVyIj48L3NwYW4+PC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+PCEtLQogICAgICAgIC0tPjxkaXYgY2xhc3M9InJpZ2h0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0cmUiPkxpZW5zPC9kaXY+CiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im1lbnUiPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYnVyZ2VyIj4KCTxhIGhyZWY9Imh0dHBzOi8vd3d3LmV0dWRlbGVwaWMuZnIvIiB0aXRsZT0iSW1tb2JpbGllciBQYXJpcyBFdHVkZSBMZXBpYyIgY2xhc3M9ImJ1cmdlciI+PHNwYW4+QWNjdWVpbDwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iY3VycmVudCI+Cgk8YSBocmVmPSIvdmVudGUtYXBwYXJ0ZW1lbnQtcGFyaXMvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iSW1tb2JpbGllciBlbiBWZW50ZSBFdHVkZSBMZXBpYyIgY2xhc3M9ImN1cnJlbnQiPjxzcGFuPk5vcyBiaWVuczwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iIj4KCTxhIGhyZWY9Ii9lc3RpbWF0aW9uLWFwcGFydGVtZW50LXBhcmlzLyIgdGl0bGU9IlZlbmRyZSB2b3RyZSBiaWVuIHN1ciBQYXJpcyIgY2xhc3M9IiI+PHNwYW4+RXN0aW1lci9WZW5kcmU8L3NwYW4+PC9hPgo8L2xpPgo8bGkgY2xhc3M9IiI+Cgk8YSBocmVmPSIvYmllbnMtdmVuZHVzLWFwcGFydGVtZW50LXBhcmlzLyIgdGl0bGU9IkJpZW5zIHZlbmR1cyBwYXIgRXR1ZGUgTGVwaWMiIGNsYXNzPSIiPjxzcGFuPkJpZW5zIHZlbmR1czwvc3Bhbj48L2E+CjwvbGk+CjxsaSBjbGFzcz0iIj4KCTxhIGhyZWY9Ii9hZ2VuY2VzLWltbW9iaWxpZXJlcy1wcmVzdGlnZS1wYXJpcy8iIHRpdGxlPSJBZ2VuY2VzIEltbW9iaWxpw6hyZXMgRXR1ZGUgTGVwaWMiIGNsYXNzPSIiPjxzcGFuPlF1aSBzb21tZXMtbm91cyA/PC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSJidXJnZXIiPgoJPGEgaHJlZj0iL2ltbW9iaWxpZXItcHJlc3RpZ2UtbW9udG1hcnRyZS8iIHRpdGxlPSJNb250bWFydHJlICBFdHVkZSBMZXBpYyIgY2xhc3M9ImJ1cmdlciI+PHNwYW4+Tm90cmUgcXVhcnRpZXIgOiBNb250bWFydHJlPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSIiPgoJPGEgaHJlZj0iL3RlbW9pZ25hZ2VzLyIgdGl0bGU9IlTDqW1vaWduYWdlcyBFdHVkZSBMZXBpYyIgY2xhc3M9IiI+PHNwYW4+VMOpbW9pZ25hZ2VzPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSJidXJnZXIiPgoJPGEgaHJlZj0iL2FjdHVhbGl0ZXMvIiB0aXRsZT0iTm91dmVhdXTDqXMgRXR1ZGUgTGVwaWMiIGNsYXNzPSJidXJnZXIiPjxzcGFuPkFjdHVhbGl0w6lzPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSJidXJnZXIiPgoJPGEgaHJlZj0iL2FxdWVyaXItYXBwYXJ0ZW1lbnQtcGFyaXMvIiB0aXRsZT0iUmVjaGVyY2hlIGltbW9iaWxpw6hyZSBQYXJpcyIgY2xhc3M9ImJ1cmdlciI+PHNwYW4+QWNxdcOpcmlyPC9zcGFuPjwvYT4KPC9saT4KPGxpIGNsYXNzPSIiPgoJPGEgaHJlZj0iL2NvbnRhY3QvIiB0aXRsZT0iQ29udGFjdGV6IGzigJlhZ2VuY2UgaW1tb2JpbGnDqHJlIEV0dWRlIExlcGljIiBjbGFzcz0iIj48c3Bhbj5Db250YWN0PC9zcGFuPjwvYT4KPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9zZWxlY3Rpb24vIiByZWw9Im5vZm9sbG93IiB0aXRsZT0iU8OpbGVjdGlvbm5lciBhbm5vbmNlIGltbW9iaWxpw6hyZSI+TWEgU8OpbGVjdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9uYXY+CiAgICAgICAgPC9kaXY+Cgk8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImJvdHRvbSI+CiAgICAgICAgPGRpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWwiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL21lbnRpb25zLWxlZ2FsZXMtYmFyZW1lLyIgcmVsPSJub2ZvbGxvdyIgdGl0bGU9IkluZm9ybWF0aW9ucyBqdXJpZGlxdWVzIEV0dWRlIExlcGljIj5NZW50aW9ucyBsw6lnYWxlcyAvIEJhcsOobWU8L2E+CiAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvbGllbnMtdXRpbGVzLyIgcmVsPSJub2ZvbGxvdyIgdGl0bGU9IkxpZW5zIHV0aWxlcyBFdHVkZSBMZXBpYyI+TGllbnMgdXRpbGVzPC9hPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGUiPiB8IDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYWdlbmNlLXBsdXMuZnIiIHRpdGxlPSJBZ2VuY2UgUGx1cywgc29sdXRpb25zIHBvdXIgbGVzIHByb2Zlc3Npb25uZWxzIGRlIGwnaW1tb2JpbGllciIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJoaWRlIj5Sw6lhbGlzYXRpb24gPHNwYW4gY2xhc3M9ImNvbG9yIj5BZ2VuY2UgcGx1czwvc3Bhbj48L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wTGFuZyI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9mb290ZXI+CjxzY3JpcHQ+Ci8vPCFbQ0RBVEFbCiAgICAoZnVuY3Rpb24oKXsKICAgICAgICB2YXIgbWVudUZvb3RlciA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgdmFyIG5iTWVudVVscyA9IDI7CiAgICAgICAgICAgIHZhciBtaW5CeVVsID0gMjsKICAgICAgICAgICAgdmFyIHJlcGFydEJ5TGluZSA9IGZhbHNlOyAgICAvLyAgCiAgICAgICAgICAgIHZhciBqTGlzdCA9ICQoJ2Zvb3RlciBuYXYubWVudScpLmZpbmQoJ2xpJyk7CiAgICAgICAgICAgIHZhciBuYlRvdGFsID0gakxpc3QubGVuZ3RoOwogICAgICAgICAgICBpZiAobmJUb3RhbC9taW5CeVVsPG5iTWVudVVscykKICAgICAgICAgICAgICAgIG5iTWVudVVscyA9IE1hdGguZmxvb3IobmJUb3RhbC9taW5CeVVsKTsKICAgICAgICAgICAgdmFyIHVscyA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBpID0gJCgnZm9vdGVyIG5hdi5tZW51IHVsJykubGVuZ3RoOyBpIDwgbmJNZW51VWxzOyBpKyspCiAgICAgICAgICAgICAgICB1bHMucHVzaChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpKTsKICAgICAgICAgICAgJCgnZm9vdGVyIG5hdi5tZW51JykuYXBwZW5kKHVscykuY29udGVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMubm9kZVR5cGUgPT0gMzsgfSkucmVtb3ZlKCk7ICAgLy8gIAogICAgICAgICAgICAkKCdmb290ZXIgbmF2Lm1lbnUgdWwnKS5jc3MoJ3dpZHRoJywoMTAwL25iTWVudVVscykrJyUnKTsKICAgICAgICAgICAgdmFyIG5iUmFuZ2UgPSBNYXRoLmZsb29yKG5iVG90YWwgLyBuYk1lbnVVbHMpOwogICAgICAgICAgICB2YXIgY3VyTGltID0gbmJSYW5nZSArIChuYlRvdGFsICUgbmJNZW51VWxzID09IDAgPyAwIDogMSk7CiAgICAgICAgICAgIHZhciBjb2xJZHggPSAwOwogICAgICAgICAgICBqTGlzdC5lYWNoKGZ1bmN0aW9uKGlkeCl7CiAgICAgICAgICAgICAgICAkKCdmb290ZXIgbmF2Lm1lbnUgdWw6ZXEoJytjb2xJZHgrJyknKS5hcHBlbmQodGhpcyk7CiAgICAgICAgICAgICAgICBpZiAocmVwYXJ0QnlMaW5lKXsKICAgICAgICAgICAgICAgICAgICBjb2xJZHgrKzsKICAgICAgICAgICAgICAgICAgICBpZiAoY29sSWR4ID09IG5iTWVudVVscykKICAgICAgICAgICAgICAgICAgICAgICAgY29sSWR4ID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCsxID49IGN1ckxpbSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbElkeCsrOwogICAgICAgICAgICAgICAgICAgICAgICBjdXJMaW0gKz0gbmJSYW5nZSArIChjb2xJZHg8KG5iVG90YWwlbmJNZW51VWxzKT8xOjApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGRyb3BMYW5nID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIGZsYWdIdG1sID0gJzx1bD5cblwKICAgICAgICAgICAgPC91bD4nOwoKICAgICAgICAgICAgJCgnZGl2LmRyb3BMYW5nJykuYXBwZW5kKGZsYWdIdG1sKTsKICAgICAgICB9OwoKICAgICAgICBtZW51Rm9vdGVyKCk7CiAgICAgICAgZHJvcExhbmcoKTsKICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShtZW51Rm9vdGVyKCkpOwogICAgfSkoKTsKLy9dXT4KPC9zY3JpcHQ+CgogICAgPGRpdiBjbGFzcz0icG9wdXAtY29udGVudCI+CiAgICAgICAgPHNwYW4+RW4gcG91cnN1aXZhbnQgdm90cmUgbmF2aWdhdGlvbiBzdXIgY2Ugc2l0ZSwgdm91cyBhY2NlcHRleiBsJ3V0aWxpc2F0aW9uIGRlIGNvb2tpZXMgZGVzdGluw6lzIMOgIGxhIHLDqWFsaXNhdGlvbiBkZSBzdGF0aXN0aXF1ZXMgZGUgdmlzaXRlcy48YSBocmVmPSIvbWVudGlvbnMtbGVnYWxlcy1iYXJlbWUvI2Nvb2tpZXMiIGNsYXNzPSJtb3JlLWJ1dHRvbiI+RW4gc2F2b2lyIHBsdXM8L2E+PC9zcGFuPgogICAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIGNsYXNzPSJhZ3JlZS1idXR0b24iIHZhbHVlPSJDb250aW51ZXIiLz4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2NvbmZpcm1fY29va2llLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KLy88IVtDREFUQVsKCShmdW5jdGlvbigpewoJCXZhciBwb3NGb290ZXIgPSBmdW5jdGlvbigpewogICAgICAgICAgICBpZighJCgnLnZpc3VlbEhEJykubGVuZ3RoPT0wKXsKICAgICAgICAgICAgICAgIGlmKCQod2luZG93KS5oZWlnaHQoKT4oJCgnLnZpc3VlbEhEJykub3V0ZXJIZWlnaHQodHJ1ZSkrJCgnbWFpbicpLm91dGVySGVpZ2h0KHRydWUpKyQoJ2Zvb3RlcicpLm91dGVySGVpZ2h0KHRydWUpKSl7CiAgICAgICAgICAgICAgICAgICAgJCgnZm9vdGVyJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOidmaXhlZCcsCiAgICAgICAgICAgICAgICAgICAgJ2JvdHRvbSc6JzAnLAogICAgICAgICAgICAgICAgICAgICd3aWR0aCc6JzEwMCUnCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICQoJ2Zvb3RlcicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzonJywKICAgICAgICAgICAgICAgICAgICAnYm90dG9tJzonJywKICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOicnCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBpZigkKHdpbmRvdykuaGVpZ2h0KCk+KCQoJ2hlYWRlcicpLm91dGVySGVpZ2h0KHRydWUpKyQoJ21haW4nKS5vdXRlckhlaWdodCh0cnVlKSskKCdmb290ZXInKS5vdXRlckhlaWdodCh0cnVlKSkpewogICAgICAgICAgICAgICAgICAgICQoJ2Zvb3RlcicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzonZml4ZWQnLAogICAgICAgICAgICAgICAgICAgICdib3R0b20nOicwJywKICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOicxMDAlJwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAkKCdmb290ZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6JycsCiAgICAgICAgICAgICAgICAgICAgJ2JvdHRvbSc6JycsCiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzonJwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgfTsKCiAgICAgICAgcG9zRm9vdGVyKCk7CgkJJCh3aW5kb3cpLnJlc2l6ZShwb3NGb290ZXIpOwoKICAgICAgICAgICAgJCgnLmFncmVlLWJ1dHRvbicpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgY29uZmlybWNvb2tpZSgnJyxmdW5jdGlvbihyZXRvdXIpewogICAgICAgICAgICAgICAgICAgaWYgKHJldG91cikgeyQoJy5wb3B1cC1jb250ZW50JykuaGlkZSgpO30KICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoJfSkoKTsKLy9dXT4KPC9zY3JpcHQ+Cgo8L2JvZHk+CjwvaHRtbD4K
    http_version: null
  recorded_at: Tue, 14 Apr 2020 15:15:20 GMT
recorded_with: VCR 5.1.0
