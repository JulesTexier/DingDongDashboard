---
http_interactions:
- request:
    method: get
    uri: https://www.dauphine-immo.com/advanced-search/?bathrooms=&location=&max-area=&max-price=&min-area=&min-price=&property_id=&status=vente&type=
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:06 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '21626'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=ku0lk1p6kkh6mqk80jqldd5im4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      Link:
      - "<https://www.dauphine-immo.com/?p=41>; rel=shortlink"
      - <https://www.dauphine-immo.com/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJmci1GUiIgcHJlZml4PSJvZzogaHR0cDovL29ncC5tZS9ucyMiPg0KPGhlYWQ+DQoJPG1ldGEgY2hhcnNldD0iVVRGLTgiPg0KCTxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+DQoJPGxpbmsgcmVsPSJwcm9maWxlIiBocmVmPSJodHRwOi8vZ21wZy5vcmcveGZuLzExIj4NCgk8bGluayByZWw9InBpbmdiYWNrIiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS94bWxycGMucGhwIj4NCg0KICAJPHRpdGxlPlJlY2hlcmNoZSBhdmFuY8OpZSAtIERhdXBoaW5lIFJpdmUgR2F1Y2hlPC90aXRsZT4KPHN0eWxlIHR5cGU9J3RleHQvY3NzJz4jd3AtYWRtaW4tYmFyLXdwLWxvZ297ZGlzcGxheTpub25lO30jd3AtYWRtaW4tYmFyLV9sZWdhY3lvcHRpb25ze2Rpc3BsYXk6bm9uZTt9PC9zdHlsZT4gICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogWW91IGNhbiBhZGQgbW9yZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gd2ViZm9udGxvYWRlciBieSBwcmV2aW91c2x5IGRlZmluaW5nIHRoZSBXZWJGb250Q29uZmlnIHdpdGggeW91ciBvcHRpb25zICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBXZWJGb250Q29uZmlnID09PSAidW5kZWZpbmVkIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXZWJGb250Q29uZmlnID0gbmV3IE9iamVjdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV2ViRm9udENvbmZpZ1snZ29vZ2xlJ10gPSB7ZmFtaWxpZXM6IFsnUm9ib3RvOjQwMCw1MDAnXX07CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3ZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdzY3JpcHQnICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2Yuc3JjID0gJ2h0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvd2ViZm9udC8xLjUuMy93ZWJmb250LmpzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3Zi50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2YuYXN5bmMgPSAndHJ1ZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ3NjcmlwdCcgKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCB3ZiwgcyApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBZb3UgY2FuIGFkZCBtb3JlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB3ZWJmb250bG9hZGVyIGJ5IHByZXZpb3VzbHkgZGVmaW5pbmcgdGhlIFdlYkZvbnRDb25maWcgd2l0aCB5b3VyIG9wdGlvbnMgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIFdlYkZvbnRDb25maWcgPT09ICJ1bmRlZmluZWQiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdlYkZvbnRDb25maWcgPSBuZXcgT2JqZWN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXZWJGb250Q29uZmlnWydnb29nbGUnXSA9IHtmYW1pbGllczogWydNb250c2VycmF0OjQwMCw3MDAmYW1wO3N1YnNldD1sYXRpbiddfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3NjcmlwdCcgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3Zi5zcmMgPSAnaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy93ZWJmb250LzEuNS4zL3dlYmZvbnQuanMnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdmLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3Zi5hc3luYyA9ICd0cnVlJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnc2NyaXB0JyApWzBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIHdmLCBzICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgCgo8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vYWR2YW5jZWQtc2VhcmNoLyIgLz4KPG1ldGEgcHJvcGVydHk9Im9nOmxvY2FsZSIgY29udGVudD0iZnJfRlIiIC8+CjxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJhcnRpY2xlIiAvPgo8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IlJlY2hlcmNoZSBhdmFuY8OpZSAtIERhdXBoaW5lIFJpdmUgR2F1Y2hlIiAvPgo8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hZHZhbmNlZC1zZWFyY2gvIiAvPgo8bWV0YSBwcm9wZXJ0eT0ib2c6c2l0ZV9uYW1lIiBjb250ZW50PSJEYXVwaGluZSBSaXZlIEdhdWNoZSIgLz4KPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5IiAvPgo8bWV0YSBuYW1lPSJ0d2l0dGVyOnRpdGxlIiBjb250ZW50PSJSZWNoZXJjaGUgYXZhbmPDqWUgLSBEYXVwaGluZSBSaXZlIEdhdWNoZSIgLz4KPG1ldGEgcHJvcGVydHk9IkRDLmRhdGUuaXNzdWVkIiBjb250ZW50PSIyMDE2LTAxLTIxVDE5OjQwOjA5KzAwOjAwIiAvPgo8IS0tIC8gWW9hc3QgU0VPIFByZW1pdW0gcGx1Z2luLiAtLT4KCjxsaW5rIHJlbD0nZG5zLXByZWZldGNoJyBocmVmPScvL3d3dy5kYXVwaGluZS1pbW1vLmNvbScgLz4KPGxpbmsgcmVsPSdkbnMtcHJlZmV0Y2gnIGhyZWY9Jy8vcy53Lm9yZycgLz4KPGxpbmsgcmVsPSJhbHRlcm5hdGUiIHR5cGU9ImFwcGxpY2F0aW9uL3Jzcyt4bWwiIHRpdGxlPSJEYXVwaGluZSBSaXZlIEdhdWNoZSAmcmFxdW87IEZsdXgiIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2ZlZWQvIiAvPgo8bGluayByZWw9ImFsdGVybmF0ZSIgdHlwZT0iYXBwbGljYXRpb24vcnNzK3htbCIgdGl0bGU9IkRhdXBoaW5lIFJpdmUgR2F1Y2hlICZyYXF1bzsgRmx1eCBkZXMgY29tbWVudGFpcmVzIiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9jb21tZW50cy9mZWVkLyIgLz4KCQk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkJCXdpbmRvdy5fd3BlbW9qaVNldHRpbmdzID0geyJiYXNlVXJsIjoiaHR0cHM6XC9cL3Mudy5vcmdcL2ltYWdlc1wvY29yZVwvZW1vamlcLzExXC83Mng3MlwvIiwiZXh0IjoiLnBuZyIsInN2Z1VybCI6Imh0dHBzOlwvXC9zLncub3JnXC9pbWFnZXNcL2NvcmVcL2Vtb2ppXC8xMVwvc3ZnXC8iLCJzdmdFeHQiOiIuc3ZnIiwic291cmNlIjp7IndwZW1vamkiOiJodHRwczpcL1wvd3d3LmRhdXBoaW5lLWltbW8uY29tXC93cC1pbmNsdWRlc1wvanNcL3dwLWVtb2ppLmpzIiwidHdlbW9qaSI6Imh0dHBzOlwvXC93d3cuZGF1cGhpbmUtaW1tby5jb21cL3dwLWluY2x1ZGVzXC9qc1wvdHdlbW9qaS5qcyJ9fTsKCQkJKCBmdW5jdGlvbiggd2luZG93LCBkb2N1bWVudCwgc2V0dGluZ3MgKSB7Cgl2YXIgc3JjLCByZWFkeSwgaWksIHRlc3RzOwoKCS8qCgkgKiBDcmVhdGUgYSBjYW52YXMgZWxlbWVudCBmb3IgdGVzdGluZyBuYXRpdmUgYnJvd3NlciBzdXBwb3J0CgkgKiBvZiBlbW9qaS4KCSAqLwoJdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdjYW52YXMnICk7Cgl2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0ICYmIGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7CgoJLyoqCgkgKiBDaGVjayBpZiB0d28gc2V0cyBvZiBFbW9qaSBjaGFyYWN0ZXJzIHJlbmRlciB0aGUgc2FtZS4KCSAqCgkgKiBAcGFyYW0gc2V0MSBhcnJheSBTZXQgb2YgRW1vamkgY2hhcmFjdGVycy4KCSAqIEBwYXJhbSBzZXQyIGFycmF5IFNldCBvZiBFbW9qaSBjaGFyYWN0ZXJzLgoJICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHR3byBzZXRzIHJlbmRlciB0aGUgc2FtZS4KCSAqLwoJZnVuY3Rpb24gZW1vamlTZXRzUmVuZGVySWRlbnRpY2FsbHkoIHNldDEsIHNldDIgKSB7CgkJdmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7CgoJCS8vIENsZWFudXAgZnJvbSBwcmV2aW91cyB0ZXN0LgoJCWNvbnRleHQuY2xlYXJSZWN0KCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQgKTsKCQljb250ZXh0LmZpbGxUZXh0KCBzdHJpbmdGcm9tQ2hhckNvZGUuYXBwbHkoIHRoaXMsIHNldDEgKSwgMCwgMCApOwoJCXZhciByZW5kZXJlZDEgPSBjYW52YXMudG9EYXRhVVJMKCk7CgoJCS8vIENsZWFudXAgZnJvbSBwcmV2aW91cyB0ZXN0LgoJCWNvbnRleHQuY2xlYXJSZWN0KCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQgKTsKCQljb250ZXh0LmZpbGxUZXh0KCBzdHJpbmdGcm9tQ2hhckNvZGUuYXBwbHkoIHRoaXMsIHNldDIgKSwgMCwgMCApOwoJCXZhciByZW5kZXJlZDIgPSBjYW52YXMudG9EYXRhVVJMKCk7CgoJCXJldHVybiByZW5kZXJlZDEgPT09IHJlbmRlcmVkMjsKCX0KCgkvKioKCSAqIERldGVjdCBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyByZW5kZXJpbmcgZW1vamkgb3IgZmxhZyBlbW9qaS4gRmxhZyBlbW9qaSBhcmUgYSBzaW5nbGUgZ2x5cGgKCSAqIG1hZGUgb2YgdHdvIGNoYXJhY3RlcnMsIHNvIHNvbWUgYnJvd3NlcnMgKG5vdGFibHksIEZpcmVmb3ggT1MgWCkgZG9uJ3Qgc3VwcG9ydCB0aGVtLgoJICoKCSAqIEBzaW5jZSA0LjIuMAoJICoKCSAqIEBwYXJhbSB0eXBlIHtTdHJpbmd9IFdoZXRoZXIgdG8gdGVzdCBmb3Igc3VwcG9ydCBvZiAiZmxhZyIgb3IgImVtb2ppIi4KCSAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIGJyb3dzZXIgY2FuIHJlbmRlciBlbW9qaSwgZmFsc2UgaWYgaXQgY2Fubm90LgoJICovCglmdW5jdGlvbiBicm93c2VyU3VwcG9ydHNFbW9qaSggdHlwZSApIHsKCQl2YXIgaXNJZGVudGljYWw7CgoJCWlmICggISBjb250ZXh0IHx8ICEgY29udGV4dC5maWxsVGV4dCApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJLyoKCQkgKiBDaHJvbWUgb24gT1MgWCBhZGRlZCBuYXRpdmUgZW1vamkgcmVuZGVyaW5nIGluIE00MS4gVW5mb3J0dW5hdGVseSwKCQkgKiBpdCBkb2Vzbid0IHdvcmsgd2hlbiB0aGUgZm9udCBpcyBib2xkZXIgdGhhbiA1MDAgd2VpZ2h0LiBTbywgd2UKCQkgKiBjaGVjayBmb3IgYm9sZCByZW5kZXJpbmcgc3VwcG9ydCB0byBhdm9pZCBpbnZpc2libGUgZW1vamkgaW4gQ2hyb21lLgoJCSAqLwoJCWNvbnRleHQudGV4dEJhc2VsaW5lID0gJ3RvcCc7CgkJY29udGV4dC5mb250ID0gJzYwMCAzMnB4IEFyaWFsJzsKCgkJc3dpdGNoICggdHlwZSApIHsKCQkJY2FzZSAnZmxhZyc6CgkJCQkvKgoJCQkJICogVGVzdCBmb3IgVU4gZmxhZyBjb21wYXRpYmlsaXR5LiBUaGlzIGlzIHRoZSBsZWFzdCBzdXBwb3J0ZWQgb2YgdGhlIGxldHRlciBsb2NhbGUgZmxhZ3MsCgkJCQkgKiBzbyBnaXZlcyB1cyBhbiBlYXN5IHRlc3QgZm9yIGZ1bGwgc3VwcG9ydC4KCQkJCSAqCgkJCQkgKiBUbyB0ZXN0IGZvciBzdXBwb3J0LCB3ZSB0cnkgdG8gcmVuZGVyIGl0LCBhbmQgY29tcGFyZSB0aGUgcmVuZGVyaW5nIHRvIGhvdyBpdCB3b3VsZCBsb29rIGlmCgkJCQkgKiB0aGUgYnJvd3NlciBkb2Vzbid0IHJlbmRlciBpdCBjb3JyZWN0bHkgKFtVXSArIFtOXSkuCgkJCQkgKi8KCQkJCWlzSWRlbnRpY2FsID0gZW1vamlTZXRzUmVuZGVySWRlbnRpY2FsbHkoCgkJCQkJWyA1NTM1NiwgNTY4MjYsIDU1MzU2LCA1NjgxOSBdLAoJCQkJCVsgNTUzNTYsIDU2ODI2LCA4MjAzLCA1NTM1NiwgNTY4MTkgXQoJCQkJKTsKCgkJCQlpZiAoIGlzSWRlbnRpY2FsICkgewoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCgkJCQkvKgoJCQkJICogVGVzdCBmb3IgRW5nbGlzaCBmbGFnIGNvbXBhdGliaWxpdHkuIEVuZ2xhbmQgaXMgYSBjb3VudHJ5IGluIHRoZSBVbml0ZWQgS2luZ2RvbSwgaXQKCQkJCSAqIGRvZXMgbm90IGhhdmUgYSB0d28gbGV0dGVyIGxvY2FsZSBjb2RlIGJ1dCByYXRoZXIgYW4gZml2ZSBsZXR0ZXIgc3ViLWRpdmlzaW9uIGNvZGUuCgkJCQkgKgoJCQkJICogVG8gdGVzdCBmb3Igc3VwcG9ydCwgd2UgdHJ5IHRvIHJlbmRlciBpdCwgYW5kIGNvbXBhcmUgdGhlIHJlbmRlcmluZyB0byBob3cgaXQgd291bGQgbG9vayBpZgoJCQkJICogdGhlIGJyb3dzZXIgZG9lc24ndCByZW5kZXIgaXQgY29ycmVjdGx5IChibGFjayBmbGFnIGVtb2ppICsgW0ddICsgW0JdICsgW0VdICsgW05dICsgW0ddKS4KCQkJCSAqLwoJCQkJaXNJZGVudGljYWwgPSBlbW9qaVNldHNSZW5kZXJJZGVudGljYWxseSgKCQkJCQlbIDU1MzU2LCA1NzMzMiwgNTYxMjgsIDU2NDIzLCA1NjEyOCwgNTY0MTgsIDU2MTI4LCA1NjQyMSwgNTYxMjgsIDU2NDMwLCA1NjEyOCwgNTY0MjMsIDU2MTI4LCA1NjQ0NyBdLAoJCQkJCVsgNTUzNTYsIDU3MzMyLCA4MjAzLCA1NjEyOCwgNTY0MjMsIDgyMDMsIDU2MTI4LCA1NjQxOCwgODIwMywgNTYxMjgsIDU2NDIxLCA4MjAzLCA1NjEyOCwgNTY0MzAsIDgyMDMsIDU2MTI4LCA1NjQyMywgODIwMywgNTYxMjgsIDU2NDQ3IF0KCQkJCSk7CgoJCQkJcmV0dXJuICEgaXNJZGVudGljYWw7CgkJCWNhc2UgJ2Vtb2ppJzoKCQkJCS8qCgkJCQkgKiBTaGUncyB0aGUgaGVybyBFbW9qaSBkZXNlcnZlcywgYnV0IG5vdCB0aGUgb25lIGl0IG5lZWRzIHJpZ2h0IG5vdy4KCQkJCSAqCgkJCQkgKiBUbyB0ZXN0IGZvciBzdXBwb3J0LCB0cnkgdG8gcmVuZGVyIGEgbmV3IGVtb2ppIChmZW1hbGUgc3VwZXJoZXJvKSwKCQkJCSAqIHRoZW4gY29tcGFyZSBpdCB0byBob3cgaXQgd291bGQgbG9vayBpZiB0aGUgYnJvd3NlciBkb2Vzbid0IHJlbmRlciBpdCBjb3JyZWN0bHkKCQkJCSAqIChzdXBlcmhlcm8gKyBmZW1hbGUgc2lnbikuCgkJCQkgKi8KCQkJCWlzSWRlbnRpY2FsID0gZW1vamlTZXRzUmVuZGVySWRlbnRpY2FsbHkoCgkJCQkJWzU1MzU4LCA1Njc2MCwgOTc5MiwgNjUwMzldLAoJCQkJCVs1NTM1OCwgNTY3NjAsIDgyMDMsIDk3OTIsIDY1MDM5XQoJCQkJKTsKCQkJCXJldHVybiAhIGlzSWRlbnRpY2FsOwoJCX0KCgkJcmV0dXJuIGZhbHNlOwoJfQoKCWZ1bmN0aW9uIGFkZFNjcmlwdCggc3JjICkgewoJCXZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnc2NyaXB0JyApOwoKCQlzY3JpcHQuc3JjID0gc3JjOwoJCXNjcmlwdC5kZWZlciA9IHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdoZWFkJyApWzBdLmFwcGVuZENoaWxkKCBzY3JpcHQgKTsKCX0KCgl0ZXN0cyA9IEFycmF5KCAnZmxhZycsICdlbW9qaScgKTsKCglzZXR0aW5ncy5zdXBwb3J0cyA9IHsKCQlldmVyeXRoaW5nOiB0cnVlLAoJCWV2ZXJ5dGhpbmdFeGNlcHRGbGFnOiB0cnVlCgl9OwoKCWZvciggaWkgPSAwOyBpaSA8IHRlc3RzLmxlbmd0aDsgaWkrKyApIHsKCQlzZXR0aW5ncy5zdXBwb3J0c1sgdGVzdHNbIGlpIF0gXSA9IGJyb3dzZXJTdXBwb3J0c0Vtb2ppKCB0ZXN0c1sgaWkgXSApOwoKCQlzZXR0aW5ncy5zdXBwb3J0cy5ldmVyeXRoaW5nID0gc2V0dGluZ3Muc3VwcG9ydHMuZXZlcnl0aGluZyAmJiBzZXR0aW5ncy5zdXBwb3J0c1sgdGVzdHNbIGlpIF0gXTsKCgkJaWYgKCAnZmxhZycgIT09IHRlc3RzWyBpaSBdICkgewoJCQlzZXR0aW5ncy5zdXBwb3J0cy5ldmVyeXRoaW5nRXhjZXB0RmxhZyA9IHNldHRpbmdzLnN1cHBvcnRzLmV2ZXJ5dGhpbmdFeGNlcHRGbGFnICYmIHNldHRpbmdzLnN1cHBvcnRzWyB0ZXN0c1sgaWkgXSBdOwoJCX0KCX0KCglzZXR0aW5ncy5zdXBwb3J0cy5ldmVyeXRoaW5nRXhjZXB0RmxhZyA9IHNldHRpbmdzLnN1cHBvcnRzLmV2ZXJ5dGhpbmdFeGNlcHRGbGFnICYmICEgc2V0dGluZ3Muc3VwcG9ydHMuZmxhZzsKCglzZXR0aW5ncy5ET01SZWFkeSA9IGZhbHNlOwoJc2V0dGluZ3MucmVhZHlDYWxsYmFjayA9IGZ1bmN0aW9uKCkgewoJCXNldHRpbmdzLkRPTVJlYWR5ID0gdHJ1ZTsKCX07CgoJaWYgKCAhIHNldHRpbmdzLnN1cHBvcnRzLmV2ZXJ5dGhpbmcgKSB7CgkJcmVhZHkgPSBmdW5jdGlvbigpIHsKCQkJc2V0dGluZ3MucmVhZHlDYWxsYmFjaygpOwoJCX07CgoJCWlmICggZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciApIHsKCQkJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCByZWFkeSwgZmFsc2UgKTsKCQkJd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgcmVhZHksIGZhbHNlICk7CgkJfSBlbHNlIHsKCQkJd2luZG93LmF0dGFjaEV2ZW50KCAnb25sb2FkJywgcmVhZHkgKTsKCQkJZG9jdW1lbnQuYXR0YWNoRXZlbnQoICdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBmdW5jdGlvbigpIHsKCQkJCWlmICggJ2NvbXBsZXRlJyA9PT0gZG9jdW1lbnQucmVhZHlTdGF0ZSApIHsKCQkJCQlzZXR0aW5ncy5yZWFkeUNhbGxiYWNrKCk7CgkJCQl9CgkJCX0gKTsKCQl9CgoJCXNyYyA9IHNldHRpbmdzLnNvdXJjZSB8fCB7fTsKCgkJaWYgKCBzcmMuY29uY2F0ZW1vamkgKSB7CgkJCWFkZFNjcmlwdCggc3JjLmNvbmNhdGVtb2ppICk7CgkJfSBlbHNlIGlmICggc3JjLndwZW1vamkgJiYgc3JjLnR3ZW1vamkgKSB7CgkJCWFkZFNjcmlwdCggc3JjLnR3ZW1vamkgKTsKCQkJYWRkU2NyaXB0KCBzcmMud3BlbW9qaSApOwoJCX0KCX0KCn0gKSggd2luZG93LCBkb2N1bWVudCwgd2luZG93Ll93cGVtb2ppU2V0dGluZ3MgKTsKCQk8L3NjcmlwdD4KCQk8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgppbWcud3Atc21pbGV5LAppbWcuZW1vamkgewoJZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7Cglib3JkZXI6IG5vbmUgIWltcG9ydGFudDsKCWJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsKCWhlaWdodDogMWVtICFpbXBvcnRhbnQ7Cgl3aWR0aDogMWVtICFpbXBvcnRhbnQ7CgltYXJnaW46IDAgLjA3ZW0gIWltcG9ydGFudDsKCXZlcnRpY2FsLWFsaWduOiAtMC4xZW0gIWltcG9ydGFudDsKCWJhY2tncm91bmQ6IG5vbmUgIWltcG9ydGFudDsKCXBhZGRpbmc6IDAgIWltcG9ydGFudDsKfQo8L3N0eWxlPgo8bGluayByZWw9J3N0eWxlc2hlZXQnIGlkPSdsZWFmbGV0LmNzcy1ncm91cC1jc3MnIGhyZWY9J2h0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2Fpdm9uaS1taW4vbWluLz9mPXdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXovbGVhZmxldC9sZWFmbGV0LmNzcyx3cC1jb250ZW50L3RoZW1lcy9ob3V6ZXovaG91emV6L2xlYWZsZXQvTWFya2VyQ2x1c3Rlci5jc3Msd3AtY29udGVudC90aGVtZXMvaG91emV6L2hvdXplei9sZWFmbGV0L01hcmtlckNsdXN0ZXIuRGVmYXVsdC5jc3Msd3AtY29udGVudC9wbHVnaW5zL3JldnNsaWRlci9wdWJsaWMvYXNzZXRzL2Nzcy9zZXR0aW5ncy5jc3Msd3AtY29udGVudC9wbHVnaW5zL3VrLWNvb2tpZS1jb25zZW50L2Fzc2V0cy9jc3Mvc3R5bGUuY3NzLHdwLWNvbnRlbnQvcGx1Z2lucy93ZWdsb3QvZGlzdC9jc3MvZnJvbnQtY3NzLmNzcyx3cC1jb250ZW50L3BsdWdpbnMvd3Atam9iLW1hbmFnZXIvYXNzZXRzL2Nzcy9jaG9zZW4uY3NzLHdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXovY3NzL2Jvb3RzdHJhcC5taW4uY3NzLHdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXovY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzLHdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXovY3NzL2FsbC5taW4uY3NzJiMwMzg7dmVyPTE1ODY3ODg5MjEnIHR5cGU9J3RleHQvY3NzJyBtZWRpYT0nYWxsJyAvPg0KPHN0eWxlIGlkPSdycy1wbHVnaW4tc2V0dGluZ3MtaW5saW5lLWNzcycgdHlwZT0ndGV4dC9jc3MnPgojcnMtZGVtby1pZCB7fQo8L3N0eWxlPgo8bGluayByZWw9J3N0eWxlc2hlZXQnIGlkPSdob3V6ZXotbWFpbi1ncm91cC1jc3MnIGhyZWY9J2h0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2Fpdm9uaS1taW4vbWluLz9mPXdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXovY3NzL21haW4uY3NzLHdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXotY2hpbGQvc3R5bGUuY3NzLHdwLWNvbnRlbnQvYWdlbmNlODM4ODQtaW1hZ2VzL3NtaWxlX2ZvbnRzL0RlZmF1bHRzL0RlZmF1bHRzLmNzcyYjMDM4O3Zlcj0xNTg2Nzg4OTIxJyB0eXBlPSd0ZXh0L2NzcycgbWVkaWE9J2FsbCcgLz4NCjxzdHlsZSBpZD0naG91emV6LXN0eWxlLWlubGluZS1jc3MnIHR5cGU9J3RleHQvY3NzJz4KCiAgICAgICAgLmFkdmFuY2Utc2VhcmNoLWhlYWRlciwgCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUsIAogICAgICAgIC5hZHZhbmNlZC1zZWFyY2gtbW9iaWxlIC5zaW5nbGUtc2VhcmNoIC5mb3JtLWNvbnRyb2wsCiAgICAgICAgLnNlYXJjaC1leHBhbmRhYmxlIC5hZHZhbmNlZC1zZWFyY2ggewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgICB9CiAgICAgICAgLnNlYXJjaC1leHBhbmQtYnRuIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzFjMTkxZjsKICAgICAgICB9CiAgICAgICAgLnNlYXJjaC1leHBhbmQtYnRuIHsKICAgICAgICAgICAgY29sb3I6ICNmZmZmZmYKICAgICAgICB9CiAgICAgICAgLmFkdmFuY2Utc2VhcmNoLWhlYWRlciAuaG91emV6LXRoZW1lLWJ1dHRvbiwKICAgICAgICAuYWR2YW5jZWQtc2VhcmNoLW1vYmlsZSAuaG91emV6LXRoZW1lLWJ1dHRvbiwKICAgICAgICAuc3BsYXNoLXNlYXJjaCAuYnRuLXNlY29uZGFyeSwKICAgICAgICAuYWR2YW5jZWQtc2VhcmNoIC5idG4tc2Vjb25kYXJ5IHsKICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxYzE5MWY7CiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMxYzE5MWY7CiAgICAgICAgfQogICAgICAgIC5hZHZhbmNlLXNlYXJjaC1oZWFkZXIgLmhvdXplei10aGVtZS1idXR0b246Zm9jdXMsCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUgLmhvdXplei10aGVtZS1idXR0b246Zm9jdXMsCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaCAuYnRuLXNlY29uZGFyeTpmb2N1cywKICAgICAgICAuc3BsYXNoLXNlYXJjaCAuYnRuLXNlY29uZGFyeTpmb2N1cyB7CiAgICAgICAgICBjb2xvcjogIzgwN2Y3ZjsKICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmZmZmOwogICAgICAgIH0KICAgICAgICAuYWR2YW5jZS1zZWFyY2gtaGVhZGVyIC5ob3V6ZXotdGhlbWUtYnV0dG9uOmhvdmVyLAogICAgICAgIC5hZHZhbmNlZC1zZWFyY2ggLmJ0bi1zZWNvbmRhcnk6aG92ZXIsCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUgLmhvdXplei10aGVtZS1idXR0b246aG92ZXIsCiAgICAgICAgLnNwbGFzaC1zZWFyY2ggLmJ0bi1zZWNvbmRhcnk6aG92ZXIgewogICAgICAgICAgY29sb3I6ICM4MDdmN2Y7CiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOwogICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZmZmZjsKICAgICAgICB9CiAgICAgICAgLmFkdmFuY2Utc2VhcmNoLWhlYWRlciAuaG91emV6LXRoZW1lLWJ1dHRvbjphY3RpdmUsCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaCAuYnRuLXNlY29uZGFyeTphY3RpdmUsCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUgLmhvdXplei10aGVtZS1idXR0b246YWN0aXZlLAogICAgICAgIC5zcGxhc2gtc2VhcmNoIC5idG4tc2Vjb25kYXJ5OmFjdGl2ZSB7CiAgICAgICAgICBjb2xvcjogIzgwN2Y3ZjsKICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmZmZmOwogICAgICAgIH0KICAgICAgICAuYWR2YW5jZWQtc2VhcmNoIC5mb3JtLWNvbnRyb2wsCiAgICAgICAgLmFkdmFuY2Utc2VhcmNoLWhlYWRlciAuYm9vdHN0cmFwLXNlbGVjdCAuYnRuLAogICAgICAgIC5hZHZhbmNlLXNlYXJjaC1oZWFkZXIgLmJvb3RzdHJhcC1zZWxlY3QgLmZhdmUtbG9hZC1tb3JlIGEsCiAgICAgICAgLmZhdmUtbG9hZC1tb3JlIC5hZHZhbmNlLXNlYXJjaC1oZWFkZXIgLmJvb3RzdHJhcC1zZWxlY3QgYSwKICAgICAgICAuYWR2YW5jZS1maWVsZHMgLmZvcm0tY29udHJvbHsKICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZmZmZjsKICAgICAgICB9CiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaCAuaW5wdXQtZ3JvdXAgLmZvcm0tY29udHJvbCwgICAgICAgIAogICAgICAgIC5zZWFyY2gtbG9uZyAuc2VhcmNoIGlucHV0LAogICAgICAgIC5hZHZhbmNlZC1zZWFyY2ggLnNlYXJjaC1sb25nIC5zZWFyY2gsCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaCAuc2VhcmNoLWxvbmcgLmJ0bi1ncm91cCwKICAgICAgICAuYWR2YW5jZWQtc2VhcmNoIC5zZWFyY2gtbG9uZyAuYWR2YW5jZS1idG4sCiAgICAgICAgLmlucHV0LWdyb3VwLWFkZG9uIHsKICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZmZmZmZmICFpbXBvcnRhbnQ7CiAgICAgICAgfQogICAgICAgIC5hZHZhbmNlZC1zZWFyY2gtbW9iaWxlIC5hZHZhbmNlLWZpZWxkcyB7CiAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmZmZmOwogICAgICAgIH0KICAgICAgICAuYWR2YW5jZWQtc2VhcmNoLW1vYmlsZSAuc2luZ2xlLXNlYXJjaC13cmFwIGJ1dHRvbiB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgICAgIH0KCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUgLmFkdmFuY2UtZmllbGRzOjphZnRlciB7CiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICNmZmZmZmY7CiAgICAgICAgfQogICAgICAgIC5hZHZhbmNlZC1zZWFyY2gtbW9iaWxlIC5zaW5nbGUtc2VhcmNoLWlubmVyIC5mb3JtLWNvbnRyb2w6Oi1tb3otcGxhY2Vob2xkZXIgewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICB9CiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUgLnNpbmdsZS1zZWFyY2gtaW5uZXIgLmZvcm0tY29udHJvbDotbXMtaW5wdXQtcGxhY2Vob2xkZXIgewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICB9CiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUgLnNpbmdsZS1zZWFyY2gtaW5uZXIgLmZvcm0tY29udHJvbDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgICAgIH0KICAgICAgICAuYWR2YW5jZS1idG4uYmx1ZSB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgICAgIH0KICAgICAgICAuYWR2YW5jZS1idG4uYmx1ZTpob3ZlciwKICAgICAgICAuYWR2YW5jZS1idG4uYmx1ZTpmb2N1cyB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgICAgIH0KICAgICAgICAuYWR2YW5jZWQtc2VhcmNoIC5hZHZhbmNlLWJ0biB7CiAgICAgICAgICAgIGNvbG9yOiAjYjFhNzk1OwogICAgICAgIH0KICAgICAgICAuYWR2YW5jZWQtc2VhcmNoIC5hZHZhbmNlLWJ0bjpob3ZlciB7CiAgICAgICAgICAgIGNvbG9yOiM4MDdmN2Y7CiAgICAgICAgfQogICAgICAgIC5hZHZhbmNlZC1zZWFyY2ggLmFkdmFuY2UtYnRuOmZvY3VzLAogICAgICAgIC5hZHZhbmNlZC1zZWFyY2ggLmFkdmFuY2UtYnRuLmFjdGl2ZSB7CiAgICAgICAgICAgIGNvbG9yOiM4MDdmN2Y7CiAgICAgICAgfQogICAgICAgIC5hZHZhbmNlZC1zZWFyY2ggLmFkdmFuY2UtZmllbGRzLAogICAgICAgIC5hZHZhbmNlZC1zZWFyY2ggLmZlYXR1cmVzLWxpc3QgbGFiZWwudGl0bGUsCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUgLmFkdmFuY2UtZmllbGRzLAogICAgICAgIC5hZHZhbmNlZC1zZWFyY2gtbW9iaWxlIC5mZWF0dXJlcy1saXN0IGxhYmVsLnRpdGxlLAogICAgICAgIC5hZHZhbmNlZC1zZWFyY2gtbW9iaWxlIC5mZWF0dXJlcy1saXN0IC5jaGVja2JveC1pbmxpbmUsCiAgICAgICAgLnJhbmdlLXRpdGxlLAogICAgICAgIC5yYW5nZS10ZXh0LAogICAgICAgIC5yYW5nZS10ZXh0IHAsCiAgICAgICAgLm1pbi1wcmljZS1yYW5nZSwKICAgICAgICAubWF4LXByaWNlLXJhbmdlLAogICAgICAgIC5hZHZhbmNlZC1zZWFyY2gtbW9iaWxlLCAKICAgICAgICAuYWR2YW5jZWQtc2VhcmNoLW1vYmlsZSAuc2luZ2xlLXNlYXJjaC1pbm5lciAuZm9ybS1jb250cm9sIHsKICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgfQogICAgICAgIC5hZHZhbmNlZC1zZWFyY2gtbW9iaWxlIC5zaW5nbGUtc2VhcmNoLWlubmVyIC5mb3JtLWNvbnRyb2w6Oi1tb3otcGxhY2Vob2xkZXIgewogICAgICAgICAgY29sb3I6ICNmZmZmZmYgIWltcG9ydGFudDsgICAgICAgICAKICAgICAgICB9CiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUgLnNpbmdsZS1zZWFyY2gtaW5uZXIgLmZvcm0tY29udHJvbDotbXMtaW5wdXQtcGxhY2Vob2xkZXIgewogICAgICAgICAgY29sb3I6ICNmZmZmZmYgIWltcG9ydGFudDsKICAgICAgICB9CiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaC1tb2JpbGUgLnNpbmdsZS1zZWFyY2gtaW5uZXIgLmZvcm0tY29udHJvbDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7CiAgICAgICAgICBjb2xvcjogI2ZmZmZmZiAhaW1wb3J0YW50OwogICAgICAgIH0KICAgICAgICAudG9wLWJhciB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7CiAgICAgICAgfQogICAgICAgIC50b3AtYmFyIC50b3AtbmF2ID4gdWwgPiBsaSA+IGE6aG92ZXIsCiAgICAgICAgLnRvcC1iYXIgLnRvcC1uYXYgPiB1bCBsaS5hY3RpdmUgPiBhLAogICAgICAgIC50b3AtYmFyIC50b3AtbmF2ID4gdWwgdWwgYTpob3ZlciwKICAgICAgICAudG9wLWNvbnRhY3QgYTpob3ZlciwKICAgICAgICAudG9wLWJhciAuZHJvcGRvd24tbWVudSA+IGxpOmhvdmVyLAogICAgICAgIC50b3AtY29udGFjdCBsaSAuYnRuOmhvdmVyIHsKICAgICAgICAgICAgY29sb3I6IHJnYmEoMTc3LDE2NywxNDksMDEpOwogICAgICAgIH0KICAgICAgICAudG9wLWNvbnRhY3QgYSwKICAgICAgICAudG9wLWNvbnRhY3QgbGksCiAgICAgICAgLnRvcC1jb250YWN0IGxpIC5idG4sCiAgICAgICAgLnRvcC1iYXIgLnRvcC1uYXYgPiB1bCA+IGxpID4gYSB7CiAgICAgICAgICAgIGNvbG9yOiAjYjFhNzk1OwogICAgICAgIH0KICAgICAgICAudG9wLWJhciAubW9iaWxlLW5hdiAubmF2LXRyaWdnZXIgewogICAgICAgICAgICBjb2xvcjogI0ZGRkZGRjsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGY4Zjg7CiAgICAgICAgfQogICAgICAgIGEsCiAgICAgICAgYTpmb2N1cywKICAgICAgICBhOmFjdGl2ZSwKICAgICAgICAuYmx1ZSwKICAgICAgICAudGV4dC1wcmltYXJ5LAogICAgICAgIC5idG4tbGluaywKICAgICAgICAuaXRlbS1ib2R5IGgyLAogICAgICAgIC5kZXRhaWwgaDMsCiAgICAgICAgLmJyZWFkY3J1bWIgbGkgYSwKICAgICAgICAuZmF2ZS1sb2FkLW1vcmUgYSwKICAgICAgICAuc29ydC10YWIgLmJ0biwKICAgICAgICAuc29ydC10YWIgLmZhdmUtbG9hZC1tb3JlIGEsCiAgICAgICAgLmZhdmUtbG9hZC1tb3JlIC5zb3J0LXRhYiBhLAogICAgICAgIC5wYWdpbmF0aW9uLW1haW4gLnBhZ2luYXRpb24gYSwKICAgICAgICAudGVhbS1jYXB0aW9uLWFmdGVyIC50ZWFtLW5hbWUgYTpob3ZlciwKICAgICAgICAudGVhbS1jYXB0aW9uLWFmdGVyIC50ZWFtLWRlc2lnbmF0aW9uIGE6aG92ZXIsCiAgICAgICAgLmFnZW50LW1lZGlhIC52aWV3LAogICAgICAgIC5teS1wcm9wZXJ0eS1tZW51IGEuYWN0aXZlLAogICAgICAgIC5teS1wcm9wZXJ0eS1tZW51IGE6aG92ZXIsCiAgICAgICAgLnNlYXJjaC1wYW5lbCAuYWR2YW5jZS10cmlnZ2VyeyAgICAgICAgCiAgICAgICAgICAgIGNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAucHJvcGVydHktaXRlbSBoMiBhLAogICAgICAgIC5wcm9wZXJ0eS1pdGVtIC5wcm9wZXJ0eS10aXRsZSBhLAogICAgICAgIC53aWRnZXQgLm1lZGlhLWhlYWRpbmcgYSB7CiAgICAgICAgICAgIGNvbG9yOiAjMDAwMDAwOwogICAgICAgIH0KICAgICAgICAucHJvcGVydHktaXRlbSBoMiBhOmhvdmVyLAogICAgICAgIC5wcm9wZXJ0eS1pdGVtIC5wcm9wZXJ0eS10aXRsZSBhOmhvdmVyLAogICAgICAgIC53aWRnZXQgLm1lZGlhLWhlYWRpbmcgYTpob3ZlciB7CiAgICAgICAgICAgIGNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAjc2lkZWJhciAud2lkZ2V0X3RhZ19jbG91ZCAudGFnY2xvdWQgYSwKICAgICAgICAucGFnaW5hdGlvbi1tYWluIC5wYWdpbmF0aW9uIGxpLmFjdGl2ZSBhLAogICAgICAgIC5vdGhlci1mZWF0dXJlcyAuYnRuLmJ0bi1zZWNvbmRhcnksCiAgICAgICAgLm15LW1lbnUgLmFjdGl2ZSBhLCAgICAgICAgCiAgICAgICAgLmhvdXplei1tb2R1bGUgLm1vZHVsZS10aXRsZS1uYXYgLm1vZHVsZS1uYXYgLmJ0biwKICAgICAgICAuaG91emV6LW1vZHVsZSAubW9kdWxlLXRpdGxlLW5hdiAubW9kdWxlLW5hdiAuZmF2ZS1sb2FkLW1vcmUgYSwKICAgICAgICAuZmF2ZS1sb2FkLW1vcmUgLmhvdXplei1tb2R1bGUgLm1vZHVsZS10aXRsZS1uYXYgLm1vZHVsZS1uYXYgYSB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWMxOTFmOwogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAucGxhbi10YWJzIGxpLmFjdGl2ZSB7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgNHB4IDAgIzFjMTkxZjsKICAgICAgICAgICAgYm9yZGVyLXRvcC1jb2xvcjogIzFjMTkxZjsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICAgICAgICAgICAgY29sb3I6ICMxYzE5MWY7CiAgICAgICAgfQogICAgICAgIC5idG4tcHJpbWFyeSwgICAgICAgIAogICAgICAgIC5sYWJlbC1wcmltYXJ5LAogICAgICAgIC5zY3JvbGx0b3AtYnRuIHsKICAgICAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxYzE5MWY7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogIzFjMTkxZjsKICAgICAgICB9CiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTIgLmhlYWRlci10b3AtY2FsbCB7CiAgICAgICAgICAgIGNvbG9yOiAjYjFhNzk1OwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOwogICAgICAgIH0KICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAuYXZhdGFyIHsKICAgICAgICAgICAgY29sb3I6ICNiMWE3OTU7CiAgICAgICAgfQogICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkgewogICAgICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAuaGVhZGVyLXRvcCB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWMxOTFmOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC5tb2RhbC1oZWFkZXIsCiAgICAgICAgLnVpLXNsaWRlci1ob3Jpem9udGFsIC51aS1zbGlkZXItcmFuZ2UsCiAgICAgICAgLnVpLXN0YXRlLWhvdmVyLAogICAgICAgIC51aS13aWRnZXQtY29udGVudCAudWktc3RhdGUtaG92ZXIsCiAgICAgICAgLnVpLXdpZGdldC1oZWFkZXIgLnVpLXN0YXRlLWhvdmVyLAogICAgICAgIC51aS1zdGF0ZS1mb2N1cywKICAgICAgICAudWktd2lkZ2V0LWNvbnRlbnQgLnVpLXN0YXRlLWZvY3VzLAogICAgICAgIC51aS13aWRnZXQtaGVhZGVyIC51aS1zdGF0ZS1mb2N1cywKICAgICAgICAubGlzdC1sb2FkaW5nLWJhcnsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzFjMTkxZjsKICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgICB9CiAgICAgICAgLmhvdXplei1tb2R1bGUgLm1vZHVsZS10aXRsZS1uYXYgLm1vZHVsZS1uYXYgLmJ0biB7CiAgICAgICAgICAgIGNvbG9yOiAjMWMxOTFmOwogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjMWMxOTFmOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgICB9CiAgICAgICAgLmZhdmUtbG9hZC1tb3JlIGEsCiAgICAgICAgLmZhdmUtbG9hZC1tb3JlIGE6aG92ZXIgewogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAjdHJhbnNwb3J0YXRpb24sCiAgICAgICAgI3N1cGVybWFya2V0cywKICAgICAgICAjc2Nob29scywKICAgICAgICAjbGlicmFyaWVzLAogICAgICAgICNwaGFybWFjaWVzLAogICAgICAgICNob3NwaXRhbHMsCiAgICAgICAgLnBheS1zdGVwLWJsb2NrLmFjdGl2ZSBzcGFuLAogICAgICAgIC5sb2FkZXItcmlwcGxlIGRpdjpudGgtb2YtdHlwZSgyKXsKICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAubG9hZGVyLXJpcHBsZSBkaXY6bnRoLW9mLXR5cGUoMSl7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2IxYTc5NTsKICAgICAgICB9CiAgICAgICAgLmRldGFpbC1ibG9jayAuYWxlcnQtaW5mbyB7CiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDAsMCwwLC44NSk7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC4xKTsKICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzFjMTkxZjsKICAgICAgICB9CiAgICAgICAgLmhvdXplei10YWJlci13cmFwIC5ob3V6ZXotdGFicyBsaS5hY3RpdmU6OmJlZm9yZSwKICAgICAgICAuaG91emV6LXRhYmVyLXdyYXAgLmhvdXplei10YWJzIGxpOmhvdmVyOjpiZWZvcmUsCiAgICAgICAgLmhvdXplei10YWJlci13cmFwIC5ob3V6ZXotdGFicyBsaTphY3RpdmU6OmJlZm9yZSwKICAgICAgICAucHJvZmlsZS10YWJzIGxpOmhvdmVyLAogICAgICAgIC5zdGVwcy1uYXYsIC5zdGVwcy1wcm9ncmVzcy1tYWluIC5zdGVwcy1wcm9ncmVzcyBzcGFuIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzFjMTkxZjsKICAgICAgICB9CiAgICAgICAgLmJ0bi1zZWNvbmRhcnksCiAgICAgICAgLmFnZW50X2NvbnRhY3RfZm9ybS5idG4tc2Vjb25kYXJ5LAogICAgICAgICAuZm9ybS1tZWRpYSAud3BjZjctc3VibWl0LAogICAgICAgICAud3BjZjctc3VibWl0LAogICAgICAgICAuZHNpZHgtcmVzcC1hcmVhLXN1Ym1pdCBpbnB1dFt0eXBlPSdzdWJtaXQnXXsKICAgICAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNiMWE3OTU7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2IxYTc5NTsKICAgICAgICB9CiAgICAgICAgLml0ZW0tdGh1bWIgLmxhYmVsLWZlYXR1cmVkLCBmaWd1cmUgLmxhYmVsLWZlYXR1cmVkLCAuY2Fyb3VzZWwtbW9kdWxlIC5jYXJvdXNlbCAuaXRlbSBmaWd1cmUgLmxhYmVsLWZlYXR1cmVkIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsKICAgICAgICAgICAgY29sb3I6ICNlMDAwM2I7CiAgICAgICAgfQogICAgICAgICAgICBhOmhvdmVyLAogICAgICAgICAgICAuYmx1ZTpob3ZlciwKICAgICAgICAgICAgLmJ0bi1saW5rOmhvdmVyLAogICAgICAgICAgICAuYnJlYWRjcnVtYiBsaSBhOmhvdmVyLAogICAgICAgICAgICAucGFnaW5hdGlvbi1tYWluIC5wYWdpbmF0aW9uIGE6aG92ZXIsCiAgICAgICAgICAgIC52Y190b2dnbGVfdGl0bGUgaDQ6aG92ZXIgLAogICAgICAgICAgICAuZm9vdGVyIGE6aG92ZXIsCiAgICAgICAgICAgIC5pbXByZXNzLWFkZHJlc3M6aG92ZXIsCiAgICAgICAgICAgIC5hZ2VudC1tZWRpYSAudmlldzpob3ZlcnsKICAgICAgICAgICAgICAgIGNvbG9yOiByZ2JhKDE3NywxNjcsMTQ5LDAxKTsKICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAuc2xpZGVzaG93IC5zbGlkZSAuc2xpY2stcHJldiwKICAgICAgICAgICAgLnNsaWRlc2hvdyAuc2xpZGVzaG93LW5hdiAuc2xpY2stcHJldiwKICAgICAgICAgICAgLnNsaWRlc2hvdyAuc2xpZGUgLnNsaWNrLW5leHQsCiAgICAgICAgICAgIC5zbGlkZXNob3cgLnNsaWRlc2hvdy1uYXYgLnNsaWNrLW5leHQsCiAgICAgICAgICAgIC5iYW5uZXItc2xpZGVyIC5zbGljay1wcmV2LAogICAgICAgICAgICAuYmFubmVyLXNsaWRlciAuc2xpY2stbmV4dCwKICAgICAgICAgICAgLmJhbm5lci1zbGlkZXIgLnNsaWRlc2hvdyAuc2xpZGUgLnNsaWNrLW5leHQsCiAgICAgICAgICAgIC5zbGlkZXNob3cgLnNsaWRlIC5iYW5uZXItc2xpZGVyIC5zbGljay1uZXh0LAogICAgICAgICAgICAuYmFubmVyLXNsaWRlciAuc2xpZGVzaG93IC5zbGlkZXNob3ctbmF2IC5zbGljay1uZXh0LAogICAgICAgICAgICAuc2xpZGVzaG93IC5zbGlkZXNob3ctbmF2IC5iYW5uZXItc2xpZGVyIC5zbGljay1uZXh0LAogICAgICAgICAgICAuZGV0YWlsLXRvcCAubWVkaWEtdGFicyBhOmhvdmVyIHNwYW4sCiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi5zbHBhc2gtaGVhZGVyIC5oZWFkZXItcmlnaHQgYS5idG46aG92ZXIsCiAgICAgICAgICAgIC5zbHBhc2gtaGVhZGVyLmhlYWRlci1zZWN0aW9uLTQgLmhlYWRlci1yaWdodCBhLmJ0bjpob3ZlciwKICAgICAgICAgICAgLmhvdXplei1tb2R1bGUgLm1vZHVsZS10aXRsZS1uYXYgLm1vZHVsZS1uYXYgLmJ0bjpob3ZlciwKICAgICAgICAgICAgLmhvdXplei1tb2R1bGUgLm1vZHVsZS10aXRsZS1uYXYgLm1vZHVsZS1uYXYgLmZhdmUtbG9hZC1tb3JlIGE6aG92ZXIsCiAgICAgICAgICAgIC5mYXZlLWxvYWQtbW9yZSAuaG91emV6LW1vZHVsZSAubW9kdWxlLXRpdGxlLW5hdiAubW9kdWxlLW5hdiBhOmhvdmVyLAogICAgICAgICAgICAuaG91emV6LW1vZHVsZSAubW9kdWxlLXRpdGxlLW5hdiAubW9kdWxlLW5hdiAuYnRuOmZvY3VzLAogICAgICAgICAgICAuaG91emV6LW1vZHVsZSAubW9kdWxlLXRpdGxlLW5hdiAubW9kdWxlLW5hdiAuZmF2ZS1sb2FkLW1vcmUgYTpmb2N1cywKICAgICAgICAgICAgLmZhdmUtbG9hZC1tb3JlIC5ob3V6ZXotbW9kdWxlIC5tb2R1bGUtdGl0bGUtbmF2IC5tb2R1bGUtbmF2IGE6Zm9jdXN7CiAgICAgICAgICAgICAgICBjb2xvcjogI2ZmZjsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTc3LDE2NywxNDksMDEpOwogICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgxNzcsMTY3LDE0OSwwMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmZhdmUtbG9hZC1tb3JlIGE6aG92ZXIsCiAgICAgICAgICAgICNzaWRlYmFyIC53aWRnZXRfdGFnX2Nsb3VkIC50YWdjbG91ZCBhOmhvdmVyLAogICAgICAgICAgICAub3RoZXItZmVhdHVyZXMgLmJ0bi5idG4tc2Vjb25kYXJ5OmhvdmVyLAogICAgICAgICAgICAubXktYWN0aW9ucyAuYWN0aW9uLWJ0bjpob3ZlciwKICAgICAgICAgICAgLm15LWFjdGlvbnMgLmFjdGlvbi1idG46Zm9jdXMsCiAgICAgICAgICAgIC5teS1hY3Rpb25zIC5hY3Rpb24tYnRuOmFjdGl2ZSwKICAgICAgICAgICAgLm15LWFjdGlvbnMgLm9wZW4gLmFjdGlvbi1idG4sICAgICAgICAgICAgCiAgICAgICAgICAgIC50ZXN0aW1vbmlhbC1jYXJvdXNlbCAuc2xpY2stbmV4dDpob3ZlciwKICAgICAgICAgICAgLnRlc3RpbW9uaWFsLWNhcm91c2VsIC5zbGljay1uZXh0OmZvY3VzewogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNzcsMTY3LDE0OSwwMSk7CiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6IHJnYmEoMTc3LDE2NywxNDksMDEpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAuYnRuLXByaW1hcnk6aG92ZXIsCiAgICAgICAgICAgIC5idG4tcHJpbWFyeTpmb2N1cywKICAgICAgICAgICAgLmJ0bi1wcmltYXJ5OmFjdGl2ZSwKICAgICAgICAgICAgLmludm9pY2UtbGlzdCAuYnRuLWludm9pY2U6aG92ZXIsCiAgICAgICAgICAgICNob3V6ZXotZ21hcC1tYWluIC5tYXAtYnRuOmhvdmVyLAogICAgICAgICAgICAubWVkaWEtdGFicy1saXN0IGxpID4gYTpob3ZlciwKICAgICAgICAgICAgLm1lZGlhLXRhYnMtbGlzdCBsaS5hY3RpdmUgYSwKICAgICAgICAgICAgLmRldGFpbC1iYXIgLmRldGFpbC10YWJzIGxpOmhvdmVyLAogICAgICAgICAgICAuYWN0aW9ucyBsaSA+IHNwYW46aG92ZXIsCiAgICAgICAgICAgIC5saWdodGJveC1hcnJvdzpob3ZlciwKICAgICAgICAgICAgLnNjcm9sbHRvcC1idG46aG92ZXIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNzcsMTY3LDE0OSwwMSk7CiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6IHJnYmEoMTc3LDE2NywxNDksMDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5idG4tc2Vjb25kYXJ5OmhvdmVyLAogICAgICAgICAgICAuYWdlbnRfY29udGFjdF9mb3JtLmJ0bi1zZWNvbmRhcnk6aG92ZXIsCiAgICAgICAgICAgICAuZm9ybS1tZWRpYSAud3BjZjctc3VibWl0OmhvdmVyLAogICAgICAgICAgICAgLndwY2Y3LXN1Ym1pdDpob3ZlciwKICAgICAgICAgICAgIC53cGNmNy1zdWJtaXQ6Zm9jdXMsCiAgICAgICAgICAgICAud3BjZjctc3VibWl0OmFjdGl2ZSwKICAgICAgICAgICAgIC5kc2lkeC1yZXNwLWFyZWEtc3VibWl0IGlucHV0W3R5cGU9J3N1Ym1pdCddOmhvdmVyLAogICAgICAgICAgICAgLmRzaWR4LXJlc3AtYXJlYS1zdWJtaXQgaW5wdXRbdHlwZT0nc3VibWl0J106Zm9jdXMsCiAgICAgICAgICAgICAuZHNpZHgtcmVzcC1hcmVhLXN1Ym1pdCBpbnB1dFt0eXBlPSdzdWJtaXQnXTphY3RpdmV7CiAgICAgICAgICAgICAgICBjb2xvcjogI2ZmZjsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjgsMjUsMzEsMDEpOwogICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyOCwyNSwzMSwwMSk7CiAgICAgICAgICAgIH0KICAgICAgICAuaGVhZGVyLXNlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAuaGVhZGVyLXNlY3Rpb24gLm5hdmkgPiB1bCA+IGxpID4gYSB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgICB9CiAgICAgICAgLmhlYWRlci1zZWN0aW9uIC5oZWFkZXItcmlnaHQgLnVzZXIgYSwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24gLmhlYWRlci1yaWdodCBzcGFuIHsKICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgfQogICAgICAgICAgICAuaGVhZGVyLXNlY3Rpb24gLm5hdmkgPiB1bCA+IGxpID4gYTpob3ZlciB7CiAgICAgICAgICAgICAgICBjb2xvcjogcmdiYSgyOCwyNSwzMSwwMSk7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbiAuaGVhZGVyLXJpZ2h0IC51c2VyIGE6aG92ZXIsCiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbiAuaGVhZGVyLXJpZ2h0IHNwYW46aG92ZXIgewogICAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMjgsMjUsMzEsMDEpOwogICAgICAgICAgICB9CiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTMgLmhlYWRlci10b3AgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMyAuaGVhZGVyLXRvcC1zb2NpYWwgYSwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMyAuaGVhZGVyLWNvbnRhY3QgLmNvbnRhY3QtYmxvY2sgLmZhLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5oZWFkZXItdG9wIC5tZWRpYS1oZWFkaW5nLAogICAgICAgIC5oZWFkZXItY29udGFjdCAuY29udGFjdC1ibG9jayBwewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICB9CiAgICAgICAgLmhlYWRlci1jb250YWN0IC5jb250YWN0LWJsb2NrIC5mYSB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgICAgIH0KICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMyAuaGVhZGVyLWJvdHRvbSB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxYzE5MWY7CiAgICAgICAgfQogICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5uYXZpID4gdWwgPiBsaSA+IGEsCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTMgLmhlYWRlci1yaWdodCAudXNlciBhLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5oZWFkZXItcmlnaHQgc3BhbiB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgICAgIH0gICAgICAgIAogICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5oZWFkZXItcmlnaHQgLnVzZXIgewogICAgICAgICAgICBsaW5lLWhlaWdodDogNjBweDsKICAgICAgICB9CiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5uYXZpID4gdWwgPiBsaSA+IGE6aG92ZXIsCiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5uYXZpID4gdWwgPiBsaS5hY3RpdmUgPiBhewogICAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMTc3LDE2NywxNDksMDEpOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5oZWFkZXItcmlnaHQgLnVzZXIgYTpob3ZlciwKICAgICAgICAgICAgLmhlYWRlci1zZWN0aW9uLTMgLmhlYWRlci1yaWdodCBzcGFuOmhvdmVyIHsKICAgICAgICAgICAgICAgIGNvbG9yOiByZ2JhKDE3NywxNjcsMTQ5LDAxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMyAubmF2aSA+IHVsID4gbGkgewogICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5oZWFkZXItYm90dG9tIHsKICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmhlYWRlci1zZWN0aW9uLTMgLm5hdmkgdWwgewogICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMik7CiAgICAgICAgICAgIH0KICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAuaGVhZGVyLXRvcCB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNiMWE3OTU7CiAgICAgICAgfQogICAgICAgIC5oZWFkZXItc2VjdGlvbi0yIC5oZWFkZXItYm90dG9tIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2IxYTc5NTsKICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IG5vbmUgIzJhMzUzZDsKICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IG5vbmUgIzJhMzUzZDsKICAgICAgICB9CiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTIgLmhlYWRlci1ib3R0b20gLm5hdmkgPiB1bCA+IGxpIHsKICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggbm9uZSAjMmEzNTNkOwogICAgICAgIH0KICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAuaGVhZGVyLXJpZ2h0IHsKICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBub25lICMyYTM1M2Q7CiAgICAgICAgfQogICAgICAgIC5oZWFkZXItc2VjdGlvbi0yIC5uYXZpID4gdWwgPiBsaSA+IGEsCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTIgLmhlYWRlci1yaWdodCAudXNlciBhLAogICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAuaGVhZGVyLXJpZ2h0IHNwYW4gewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICB9CiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi0yIC5uYXZpID4gdWwgPiBsaSA+IGE6aG92ZXIsCiAgICAgICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAubmF2aSA+IHVsID4gbGkuYWN0aXZlID4gYXsKICAgICAgICAgICAgICAgIGNvbG9yOiByZ2JhKDE3NywxNjcsMTQ5LDAxKTsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTc3LDE2NywxNDksMDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi0yIC5oZWFkZXItcmlnaHQgLnVzZXIgYTpob3ZlciwKICAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi0yIC5oZWFkZXItcmlnaHQgc3Bhbjpob3ZlciB7CiAgICAgICAgICAgICAgICBjb2xvcjogcmdiYSgxNzcsMTY3LDE0OSwwMSk7CiAgICAgICAgICAgIH0KICAgICAgICAuaGVhZGVyLXNlY3Rpb24gLmhlYWRlci1yaWdodCBhLmJ0biwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAuaGVhZGVyLXJpZ2h0IGEuYnRuLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5oZWFkZXItcmlnaHQgYS5idG4gewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZmZmZjsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjIpOwogICAgICAgIH0KICAgICAgICAuaGVhZGVyLXNlY3Rpb24gLmhlYWRlci1yaWdodCAudXNlciBhLmJ0bjpob3ZlciwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAuaGVhZGVyLXJpZ2h0IC51c2VyIGEuYnRuOmhvdmVyLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5oZWFkZXItcmlnaHQgLnVzZXIgYS5idG46aG92ZXIgewogICAgICAgICAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwxKTsKICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZmZmZmZmOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuMSk7CiAgICAgICAgfQogICAgCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTQsCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTQgLm5hdmkgPiB1bCB1bCB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxYzE5MWY7CiAgICAgICAgfQogICAgICAgIC5zdGlja3lfbmF2LmhlYWRlci1zZWN0aW9uLTQuaGVhZGVyLXNlY3Rpb24tNCwKICAgICAgICAuc3RpY2t5X25hdi5oZWFkZXItc2VjdGlvbi00IC5oZWFkZXItc2VjdGlvbi00ewogICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKCwsLDAuNyk7CiAgICAgICAgfQogICAgICAgIC5oZWFkZXItc2VjdGlvbi00IC5uYXZpID4gdWwgPiBsaSA+IGEsCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTQgLm5hdmkgPiB1bCB1bCBhLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi00IC5oZWFkZXItcmlnaHQgLnVzZXIgYSwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tNCAuaGVhZGVyLXJpZ2h0IHNwYW4gewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICB9CiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTQgLmhlYWRlci1yaWdodCAuYnRuIHsKICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNmZmZmZmY7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7CiAgICAgICAgfQogICAgICAgICAgICAuaGVhZGVyLXNlY3Rpb24tNCAubmF2aSA+IHVsID4gbGkgPiBhOmhvdmVyLAogICAgICAgICAgICAuaGVhZGVyLXNlY3Rpb24tNCAubmF2aSA+IHVsIHVsIGE6aG92ZXIsCiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi00IC5uYXZpID4gdWwgPiBsaS5hY3RpdmUgPiBhLAogICAgICAgICAgICAuaGVhZGVyLXNlY3Rpb24tNCAuaGVhZGVyLXJpZ2h0IC51c2VyIGE6aG92ZXIsCiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi00IC5oZWFkZXItcmlnaHQgLnVzZXIgYTpmb2N1cywKICAgICAgICAgICAgLmhlYWRlci1zZWN0aW9uLTQgLmhlYWRlci1yaWdodCBzcGFuOmhvdmVyLAogICAgICAgICAgICAuaGVhZGVyLXNlY3Rpb24tNCAuaGVhZGVyLXJpZ2h0IHNwYW46Zm9jdXMgewogICAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMTc3LDE2NywxNDksMDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi00IC5oZWFkZXItcmlnaHQgLnVzZXIgLmJ0bjpob3ZlciB7CiAgICAgICAgICAgICAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwxKTsKICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwxKTsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMSk7CiAgICAgICAgICAgIH0KICAgICAgLmhvdXplei1oZWFkZXItdHJhbnNwYXJlbnQgewogICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IDEwMCU7CiAgICAgICBib3JkZXItYm90dG9tOiAxcHggbm9uZTsKICAgICAgIGJvcmRlci1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjMpOwogICAgICB9CiAgICAgIC5oZWFkZXItc2VjdGlvbi00LmhvdXplei1oZWFkZXItdHJhbnNwYXJlbnQgLm5hdmkgPiB1bCA+IGxpID4gYSwKCiAgICAgIC5oZWFkZXItc2VjdGlvbi00LmhvdXplei1oZWFkZXItdHJhbnNwYXJlbnQgLmhlYWRlci1yaWdodCAuYWNjb3VudC1hY3Rpb24gc3BhbiwKICAgICAgLmhlYWRlci1zZWN0aW9uLTQuaG91emV6LWhlYWRlci10cmFuc3BhcmVudCAuaGVhZGVyLXJpZ2h0IC51c2VyIHNwYW4gewogICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgfQogICAgLmhlYWRlci1zZWN0aW9uLTQuaG91emV6LWhlYWRlci10cmFuc3BhcmVudCAubmF2aSA+IHVsID4gbGkgPiBhOmhvdmVyLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi00LmhvdXplei1oZWFkZXItdHJhbnNwYXJlbnQgLm5hdmkgPiB1bCB1bCBhOmhvdmVyLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi00LmhvdXplei1oZWFkZXItdHJhbnNwYXJlbnQgLmFjY291bnQtYWN0aW9uIGxpOmhvdmVyLAoKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tNC5ob3V6ZXotaGVhZGVyLXRyYW5zcGFyZW50IC5oZWFkZXItcmlnaHQgLnVzZXIgYTpob3ZlciwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tNC5ob3V6ZXotaGVhZGVyLXRyYW5zcGFyZW50IC5oZWFkZXItcmlnaHQgLmFjY291bnQtYWN0aW9uIHNwYW46aG92ZXIsCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTQuaG91emV6LWhlYWRlci10cmFuc3BhcmVudCAuaGVhZGVyLXJpZ2h0IC51c2VyIHNwYW46aG92ZXIsCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTQuaG91emV6LWhlYWRlci10cmFuc3BhcmVudCAuaGVhZGVyLXJpZ2h0IC51c2VyIGE6Zm9jdXMgewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICB9CiAgICAuaGVhZGVyLXNlY3Rpb24tNC5ob3V6ZXotaGVhZGVyLXRyYW5zcGFyZW50IC5oZWFkZXItcmlnaHQgLmJ0biB7CiAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZmZmZjsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuMik7CiAgICB9CiAgICAgICAgICAgIC5oZWFkZXItc2VjdGlvbi00LmhvdXplei1oZWFkZXItdHJhbnNwYXJlbnQgLmhlYWRlci1yaWdodCAudXNlciAuYnRuOmhvdmVyIHsKICAgICAgICAgICAgICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDEpOwogICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDEpOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwxKTsKICAgICAgICAgICAgfQogICAgICAgICNtYWluX2xhdGVyYWxfbWVudSAjbWVudSB1bCBsaS5tZW51LWl0ZW0taGFzLWNoaWxkcmVuID5hOmJlZm9yZXsKICAgICAgICAgICAgYmFja2dyb3VuZDogIzFjMTkxZjsKICAgICAgICB9CiAgICAgICAgI21haW5fbGF0ZXJhbF9tZW51ICNtZW51IHVsIGxpIGE6aG92ZXIsCiAgICAgICAgI21haW5fbGF0ZXJhbF9tZW51ICNtZW51IHVsIGxpIGE6YWN0aXZlLAogICAgICAgICNtYWluX2xhdGVyYWxfbWVudSAjbWVudSB1bCBsaSBhOmZvY3VzewogICAgICAgICAgICAgIGNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAjbWFpbl9sYXRlcmFsX21lbnUgI21lbnUgPiB1bCA+IGxpLm1lbnUtaXRlbS1oYXMtY2hpbGRyZW4+YTphZnRlcnsKICAgICAgICAgIGJvcmRlci1jb2xvcjogIzFjMTkxZiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDsKICAgICAgICB9CiAgICAgICAgLnRyaWdnZXJfbWVudSBzcGFuewogICAgICAgICAgYm9yZGVyLXRvcDogMnB4IHNvbGlkICMxYzE5MWY7CiAgICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzFjMTkxZjsKICAgICAgICB9CiAgICAgICAgLnRyaWdnZXJfbWVudSBzcGFuOjpiZWZvcmUsCiAgICAgICAgI21haW5fbGF0ZXJhbF9tZW51IC5jbG9zZS1tZW51IHNwYW46YmVmb3JlLAogICAgICAgICNtYWluX2xhdGVyYWxfbWVudSAuY2xvc2UtbWVudSBzcGFuOmFmdGVyewogICAgICAgICAgIGJhY2tncm91bmQ6ICMxYzE5MWY7CiAgICAgICAgfQogICAgICAgIC50cmlnZ2VyX21lbnUgLmNpcmNsZS1tZW51ewogICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzFjMTkxZjsKICAgICAgICB9CiAgICAgIAogICAgICAgIC5uYXZpLm1haW4tbmF2ID4gdWwgdWwgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuOTUpOwogICAgICAgIH0KICAgICAgICAubmF2aS5tYWluLW5hdiA+IHVsIHVsIGEgewogICAgICAgICAgICBjb2xvcjogIzFjMTkxZiFpbXBvcnRhbnQ7CiAgICAgICAgfQogICAgICAgIC5uYXZpLm1haW4tbmF2ID4gdWwgdWwgYTpob3ZlciB7CiAgICAgICAgICAgIGNvbG9yOiAjYjFhNzk1IWltcG9ydGFudDsKICAgICAgICB9CiAgICAgICAgLm5hdmkubWFpbi1uYXYgPiB1bCB1bCBsaSB7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2U2ZTZlNjsKICAgICAgICB9CiAgICAgCiAgICAgICAgLmhlYWRlci1zZWN0aW9uIC5oZWFkZXItcmlnaHQgYSwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24gLmhlYWRlci1yaWdodCBzcGFuLAogICAgICAgIC5oZWFkZXItc2VjdGlvbiAuaGVhZGVyLXJpZ2h0IC5idG4tZGVmYXVsdCwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24gLm5hdmkgdWwgbGksCiAgICAgICAgLmhlYWRlci1zZWN0aW9uIC5hY2NvdW50LWRyb3Bkb3duID4gdWwgPiBsaSA+IGEsCgogICAgICAgIC5oZWFkZXItc2VjdGlvbi0zIC5oZWFkZXItcmlnaHQgYSwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMyAuaGVhZGVyLXJpZ2h0IHNwYW4sCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTMgLm5hdmkgdWwgbGksCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTMgLmFjY291bnQtZHJvcGRvd24gPiB1bCA+IGxpID4gYSwKCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTIgLmhlYWRlci1yaWdodCBhLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi0yIC5oZWFkZXItcmlnaHQgc3BhbiwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAubmF2aSB1bCBsaSwKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tMiAuYWNjb3VudC1kcm9wZG93biA+IHVsID4gbGkgPiBhLAoKICAgICAgICAuaGVhZGVyLXNlY3Rpb24tNCAuaGVhZGVyLXJpZ2h0IGEsCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLTQgLmhlYWRlci1yaWdodCBzcGFuLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi00IC5uYXZpIHVsIGxpLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi00IC5oZWFkZXItcmlnaHQgLmJ0bi1kZWZhdWx0LAogICAgICAgIC5oZWFkZXItc2VjdGlvbi00IC5hY2NvdW50LWRyb3Bkb3duID4gdWwgPiBsaSA+IGEgewogICAgICAgICAgICBmb250LWZhbWlseTogTW9udHNlcnJhdDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgICAgICBmb250LXdlaWdodDogNzAwOwogICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDsKICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAgICAgfQogICAgICAgIC5oZWFkZXItc2VjdGlvbi5zbHBhc2gtaGVhZGVyIC5uYXZpID4gdWwgPiBsaSA+IGE6aG92ZXIsCiAgICAgICAgLnNscGFzaC1oZWFkZXIuaGVhZGVyLXNlY3Rpb24tNCAubmF2aSA+IHVsID4gbGkgPiBhOmhvdmVyLAogICAgICAgIC5oZWFkZXItc2VjdGlvbi5zbHBhc2gtaGVhZGVyIC5oZWFkZXItcmlnaHQgLnVzZXIgPiBhOmhvdmVyLAogICAgICAgIC5zbHBhc2gtaGVhZGVyLmhlYWRlci1zZWN0aW9uLTQgLmhlYWRlci1yaWdodCAudXNlciA+IGE6aG92ZXIsCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLnNscGFzaC1oZWFkZXIgLm5hdmkgPiB1bCA+IGxpID4gYTpmb2N1cywKICAgICAgICAuc2xwYXNoLWhlYWRlci5oZWFkZXItc2VjdGlvbi00IC5uYXZpID4gdWwgPiBsaSA+IGE6Zm9jdXMsCiAgICAgICAgLmhlYWRlci1zZWN0aW9uLnNscGFzaC1oZWFkZXIgLmhlYWRlci1yaWdodCAudXNlciA+IGE6Zm9jdXMsCiAgICAgICAgLnNscGFzaC1oZWFkZXIuaGVhZGVyLXNlY3Rpb24tNCAuaGVhZGVyLXJpZ2h0IC51c2VyID4gYTpmb2N1cyAgewogICAgICAgICAgICBjb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwxKTsKICAgICAgICB9CiAgICAgICAgLmhlYWRlci1zZWN0aW9uLnNscGFzaC1oZWFkZXIgLm5hdmkgPiB1bCA+IGxpLmFjdGl2ZSA+IGF7CiAgICAgICAgICAgIGNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAuaGVhZGVyLW1vYmlsZSB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7CiAgICAgICAgfQogICAgICAgIC5oZWFkZXItbW9iaWxlIC5uYXYtZHJvcGRvd24gPiB1bCB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC45NSk7CiAgICAgICAgfQogICAgICAgIC5tb2JpbGUtbmF2IC5uYXYtdHJpZ2dlciwKICAgICAgICAuaGVhZGVyLW1vYmlsZSAudXNlciBhLAogICAgICAgIC5oZWFkZXItbW9iaWxlIC51c2VyLWljb24gewogICAgICAgICAgICBjb2xvcjogIzFjMTkxZjsKICAgICAgICB9CiAgICAgICAgLm5hdi1kcm9wZG93biBhLAogICAgICAgIC5uYXYtZHJvcGRvd24gbGkgLmV4cGFuZC1tZSB7CiAgICAgICAgICAgIGNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAubW9iaWxlLW5hdiBhIHsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IE1vbnRzZXJyYXQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE4cHg7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgICAgIH0KICAgICAgICAubW9iaWxlLW5hdiAubmF2LWRyb3Bkb3duID4gdWwgdWwgYSB7CiAgICAgICAgICAgIGNvbG9yOiAjMWMxOTFmOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOwogICAgICAgIH0KICAgICAgICAubW9iaWxlLW5hdiAubmF2LWRyb3Bkb3duIGxpIHsKICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNmZmZmZmY7ICAgICAgICAgICAgCiAgICAgICAgfQogICAgICAgICAgICAubW9iaWxlLW5hdiAubmF2LWRyb3Bkb3duID4gdWwgPiBsaTpob3ZlciB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI4LDI1LDMxLDAxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAubW9iaWxlLW5hdiAubmF2LWRyb3Bkb3duIGxpLmFjdGl2ZSA+IGEgewogICAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMTc3LDE2NywxNDksMDEpOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyOCwyNSwzMSwwMSk7CiAgICAgICAgICAgIH0KICAgICAgICAuYWNjb3VudC1kcm9wZG93biA+IHVsIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsKICAgICAgICB9CiAgICAgICAgLmFjY291bnQtZHJvcGRvd24gPiB1bDpiZWZvcmUgewogICAgICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAjRkZGRkZGOwogICAgICAgIH0KICAgICAgICAuYWNjb3VudC1kcm9wZG93biA+IHVsID4gbGkgPiBhIHsKICAgICAgICAgICAgY29sb3I6ICMxYzE5MWYgIWltcG9ydGFudDsKICAgICAgICB9CiAgICAgICAgLmFjY291bnQtZHJvcGRvd24gPiB1bCA+IGxpID4gYTpob3ZlciwgLmFjY291bnQtZHJvcGRvd24gPiB1bCA+IGxpLmFjdGl2ZSA+IGEsIC5hY2NvdW50LWRyb3Bkb3duID4gdWwgPiBsaS5hY3RpdmUgPiBhOmhvdmVyIHsKICAgICAgICAgICAgY29sb3I6ICNiMWE3OTUgIWltcG9ydGFudDsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMDQsMjA0LDIwNCwwLjE1KTsKICAgICAgICB9CiAgICAgICAgLmFjY291bnQtZHJvcGRvd24gPiB1bCA+IGxpIHsKICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZTZlNmU2OwogICAgICAgIH0KICAgICAgICAuYWNjb3VudC1kcm9wZG93biA+IHVsIC5zdWItbWVudSB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7CiAgICAgICAgfQogICAgICAgIC5hY2NvdW50LWRyb3Bkb3duID4gdWwgLnN1Yi1tZW51ID4gbGksCiAgICAgICAgLmFjY291bnQtZHJvcGRvd24gPiB1bCAuc3ViLW1lbnUgPiBsaSBhIHsKICAgICAgICAgICAgY29sb3I6ICNGRkZGRkY7CiAgICAgICAgfQogICAgICAgIC5hY2NvdW50LWRyb3Bkb3duID4gdWwgLnN1Yi1tZW51ID4gbGkgYTpob3ZlciwgLmFjY291bnQtZHJvcGRvd24gPiB1bCAuc3ViLW1lbnUgPiBsaS5hY3RpdmUgPiBhIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjIpICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIGNvbG9yOiBpbmhlcml0OwogICAgICAgIH0KICAgICAgICAuYWNjb3VudC1kcm9wZG93biA+IHVsIC5zdWItbWVudSA+IGxpIHsKICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuMikgIWltcG9ydGFudDsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLmZvb3RlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxYzE5MWY7CiAgICAgICAgfQogICAgICAgIC5mb290ZXItYm90dG9tIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2IxYTc5NTsKICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IG5vbmUgIzAwMjQzZjsKICAgICAgICB9CiAgICAgICAgLmZvb3RlciwKICAgICAgICAuZm9vdGVyLXdpZGdldCBoNCwKICAgICAgICAuZm9vdGVyLWJvdHRvbSBwLAogICAgICAgIC5mb290ZXItd2lkZ2V0LndpZGdldF9jYWxlbmRhciBjYXB0aW9uICB7CiAgICAgICAgICAgIGNvbG9yOiA7CiAgICAgICAgfQogICAgICAgIC5mb290ZXIgYSwKICAgICAgICAuZm9vdGVyLWJvdHRvbSAubmF2aSBhLAogICAgICAgIC5mb290ZXItYm90dG9tIC5mb290LXNvY2lhbCBwIGEgewogICAgICAgICAgICBjb2xvcjogOwogICAgICAgIH0KICAgICAgICAuZm9vdGVyLXdpZGdldCAud2lkZ2V0LXRpdGxlLAogICAgICAgIC5mb290ZXIgcCwgLmZvb3RlciBwLndwLWNhcHRpb24tdGV4dCwKICAgICAgICAgLmZvb3RlciBsaSwKICAgICAgICAgIC5mb290ZXIgbGkgaSB7CiAgICAgICAgICAgIGNvbG9yOiA7CiAgICAgICAgfQogICAgICAgICAgICAuZm9vdGVyIGE6aG92ZXIsCiAgICAgICAgICAgIC5mb290ZXItYm90dG9tIC5uYXZpIGE6aG92ZXIsCiAgICAgICAgICAgIC5mb290ZXItYm90dG9tIC5mb290LXNvY2lhbCBwIGE6aG92ZXIgIHsKICAgICAgICAgICAgICAgIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC5mb290ZXItd2lkZ2V0LndpZGdldF90YWdfY2xvdWQgLnRhZ2Nsb3VkIGEgewogICAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMSk7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiA7CiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCA7CiAgICAgICAgICAgIH0KICAgICAgICBib2R5IHsKICAgICAgICAgICAgY29sb3I6ICMwMDAwMDA7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBNb250c2VycmF0OwogICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNHB4OwogICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsKICAgICAgICB9CiAgICAgICAgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0LCB0ZXh0YXJlYSB7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBNb250c2VycmF0OwogICAgICAgIH0KICAgICAgICBoMSwKICAgICAgICAucGFnZS10aXRsZSAudGl0bGUtaGVhZCwKICAgICAgICAuYXJ0aWNsZS1kZXRhaWwgaDEsCiAgICAgICAgaDIsCiAgICAgICAgLmFydGljbGUtZGV0YWlsIGgyLAogICAgICAgIC5ob3V6ZXotbW9kdWxlIC5tb2R1bGUtdGl0bGUtbmF2IGgyLAogICAgICAgIGgzLAogICAgICAgIC5tb2R1bGUtdGl0bGUgaDMsCiAgICAgICAgLmFydGljbGUtZGV0YWlsIGgzLAogICAgICAgIC5kZXRhaWwgaDMsCiAgICAgICAgLmNhcHRpb24tYm90dG9tIC5kZXRhaWwgaDMsCiAgICAgICAgLmRldGFpbC1ib3R0b20uZGV0YWlsIGgzLAogICAgICAgIC5hZGQtdGl0bGUtdGFiIGgzLAogICAgICAgICNzaWRlYmFyIC53aWRnZXQtdGl0bGUsCiAgICAgICAgLmZvb3Rlci13aWRnZXQgLndpZGdldC10aXRsZSwKICAgICAgICAuc2VydmljZXMtbW9kdWxlIC5zZXJ2aWNlLWJsb2NrIGgzLAogICAgICAgIGg0LAogICAgICAgIC5hcnRpY2xlLWRldGFpbCBoNCwKICAgICAgICBoNSwKICAgICAgICAuYXJ0aWNsZS1kZXRhaWwgaDUsCiAgICAgICAgaDYsCiAgICAgICAgLmFydGljbGUtZGV0YWlsIGg2LAogICAgICAgIC5pdGVtLWJvZHkgaDIsCiAgICAgICAgLml0ZW0tYm9keSAucHJvcGVydHktdGl0bGUsCiAgICAgICAgLnBvc3QtY2FyZC1kZXNjcmlwdGlvbiBoMywKICAgICAgICAucG9zdC1jYXJkLWRlc2NyaXB0aW9uIC5wb3N0LWNhcmQtdGl0bGUsCiAgICAgICAgLm15LXByb3BlcnR5IC5teS1oZWFkaW5nLAogICAgICAgIC5tb2R1bGUtdGl0bGUgaDIsCiAgICAgICAgLmhvdXplei1tb2R1bGUgLm1vZHVsZS10aXRsZS1uYXYgaDIgewogICAgICAgICAgICBmb250LWZhbWlseTogTW9udHNlcnJhdDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGluaGVyaXQ7CiAgICAgICAgfQogICAgICAgIGgxLAogICAgICAgIC5wYWdlLXRpdGxlIC50aXRsZS1oZWFkLAogICAgICAgIC5hcnRpY2xlLWRldGFpbCBoMSB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDM4cHg7CiAgICAgICAgICAgIG1hcmdpbjogMCAwIDI4cHggMDsKICAgICAgICB9CiAgICAgICAgaDIsCiAgICAgICAgLmFydGljbGUtZGV0YWlsIGgyLAogICAgICAgIC5ob3V6ZXotbW9kdWxlIC5tb2R1bGUtdGl0bGUtbmF2IGgyIHsKICAgICAgICAgICAgZm9udC1zaXplOiAyNHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMzJweDsKICAgICAgICAgICAgbWFyZ2luOiAwIDAgMTBweCAwOwogICAgICAgIH0KICAgICAgICAuaG91emV6LW1vZHVsZSAubW9kdWxlLXRpdGxlLW5hdiBoMiB7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICB9CiAgICAgICAgaDMsCiAgICAgICAgLm1vZHVsZS10aXRsZSBoMywKICAgICAgICAuYXJ0aWNsZS1kZXRhaWwgaDMsCiAgICAgICAgLnNlcnZpY2VzLW1vZHVsZSAuc2VydmljZS1ibG9jayBoMyB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI4cHg7CiAgICAgICAgfQogICAgICAgIGg0LAogICAgICAgIC5hcnRpY2xlLWRldGFpbCBoNCB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI2cHg7CiAgICAgICAgICAgIG1hcmdpbjogMCAwIDI0cHggMDsKICAgICAgICB9CiAgICAgICAgaDUsCiAgICAgICAgLmFydGljbGUtZGV0YWlsIGg1IHsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDsKICAgICAgICAgICAgbWFyZ2luOiAwIDAgMjRweCAwOwogICAgICAgIH0KICAgICAgICBoNiwKICAgICAgICAuYXJ0aWNsZS1kZXRhaWwgaDYgewogICAgICAgICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4OwogICAgICAgICAgICBtYXJnaW46IDAgMCAyNHB4IDA7CiAgICAgICAgfQogICAgICAgIC5pdGVtLWJvZHkgaDIsCiAgICAgICAgLnBvc3QtY2FyZC1kZXNjcmlwdGlvbiBoMywKICAgICAgICAubXktcHJvcGVydHkgLm15LWhlYWRpbmcgewogICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4OwogICAgICAgICAgICBtYXJnaW46IDAgMCA4cHggMDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGluaGVyaXQ7CiAgICAgICAgfQogICAgICAgIC5tb2R1bGUtdGl0bGUgaDIgewogICAgICAgICAgICBmb250LXNpemU6IDI0cHg7CiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAzMnB4OwogICAgICAgICAgICBtYXJnaW46IDAgMCAxMHB4IDA7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0OwogICAgICAgICAgICB0ZXh0LWFsaWduOiBpbmhlcml0OwogICAgICAgIH0KICAgICAgICAubW9kdWxlLXRpdGxlIC5zdWItaGVhZGluZyB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0OwogICAgICAgICAgICB0ZXh0LWFsaWduOiBpbmhlcml0OwogICAgICAgIH0KICAgICAgICAuaG91emV6LW1vZHVsZSAubW9kdWxlLXRpdGxlLW5hdiAuc3ViLXRpdGxlIHsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDsKICAgICAgICAgICAgbWFyZ2luOiA4cHggMCAwIDA7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0OwogICAgICAgICAgICB0ZXh0LWFsaWduOiBpbmhlcml0OwogICAgICAgIH0KICAgICAgICAuaXRlbS10aHVtYiAuaG92ZXItZWZmZWN0OmJlZm9yZSwKICAgICAgICBmaWd1cmUgLmhvdmVyLWVmZmVjdDpiZWZvcmUsCiAgICAgICAgLmNhcm91c2VsLW1vZHVsZSAuY2Fyb3VzZWwgLml0ZW0gZmlndXJlIC5ob3Zlci1lZmZlY3Q6YmVmb3JlLAogICAgICAgIC5pdGVtLXRodW1iIC5zbGlkZXNob3cgLnNsaWRlc2hvdy1uYXYtbWFpbiAuc2xpY2stc2xpZGU6YmVmb3JlLAogICAgICAgIC5zbGlkZXNob3cgLnNsaWRlc2hvdy1uYXYtbWFpbiAuaXRlbS10aHVtYiAuc2xpY2stc2xpZGU6YmVmb3JlLAogICAgICAgIGZpZ3VyZSAuc2xpZGVzaG93IC5zbGlkZXNob3ctbmF2LW1haW4gLnNsaWNrLXNsaWRlOmJlZm9yZSwKICAgICAgICAuc2xpZGVzaG93IC5zbGlkZXNob3ctbmF2LW1haW4gZmlndXJlIC5zbGljay1zbGlkZTpiZWZvcmUgewogICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sIHJnYmEoMCwwLDAsMCkgMCUsIHJnYmEoMCwwLDAsMCkgMCUsIHJnYmEoMCwwLDAsMCkgNjUlLCByZ2JhKDAsMCwwLC43NSkgMTAwJSk7CiAgICAgICAgfQogICAgICAgIC5zbGlkZXNob3cgLnNsaWRlIC5zbGljay1wcmV2OmhvdmVyLAogICAgICAgIC5zbGlkZXNob3cgLnNsaWRlc2hvdy1uYXYgLnNsaWNrLXByZXY6aG92ZXIsCiAgICAgICAgLnNsaWRlc2hvdyAuc2xpZGUgLnNsaWNrLW5leHQ6aG92ZXIsCiAgICAgICAgLnNsaWRlc2hvdyAuc2xpZGVzaG93LW5hdiAuc2xpY2stbmV4dDpob3ZlciwKICAgICAgICAuc2xpZGVzaG93IC5zbGlkZSAuc2xpY2stcHJldjpmb2N1cywKICAgICAgICAuc2xpZGVzaG93IC5zbGlkZXNob3ctbmF2IC5zbGljay1wcmV2OmZvY3VzLAogICAgICAgIC5zbGlkZXNob3cgLnNsaWRlIC5zbGljay1uZXh0OmZvY3VzLAogICAgICAgIC5zbGlkZXNob3cgLnNsaWRlc2hvdy1uYXYgLnNsaWNrLW5leHQ6Zm9jdXMKICAgICAgICAuaXRlbS10aHVtYjpob3ZlciAuaG92ZXItZWZmZWN0OmJlZm9yZSwKICAgICAgICBmaWd1cmU6aG92ZXIgLmhvdmVyLWVmZmVjdDpiZWZvcmUsCiAgICAgICAgLmNhcm91c2VsLW1vZHVsZSAuY2Fyb3VzZWwgLml0ZW0gZmlndXJlOmhvdmVyIC5ob3Zlci1lZmZlY3Q6YmVmb3JlLAogICAgICAgIC5pdGVtLXRodW1iOmhvdmVyIC5zbGlkZXNob3cgLnNsaWRlc2hvdy1uYXYtbWFpbiAuc2xpY2stc2xpZGU6YmVmb3JlLAogICAgICAgIC5zbGlkZXNob3cgLnNsaWRlc2hvdy1uYXYtbWFpbiAuaXRlbS10aHVtYjpob3ZlciAuc2xpY2stc2xpZGU6YmVmb3JlLAogICAgICAgIGZpZ3VyZTpob3ZlciAuc2xpZGVzaG93IC5zbGlkZXNob3ctbmF2LW1haW4gLnNsaWNrLXNsaWRlOmJlZm9yZSwKICAgICAgICAuc2xpZGVzaG93IC5zbGlkZXNob3ctbmF2LW1haW4gZmlndXJlOmhvdmVyIC5zbGljay1zbGlkZTpiZWZvcmUsCiAgICAgICAgLml0ZW0tdGh1bWI6aG92ZXIgLmhvdmVyLWVmZmVjdDpiZWZvcmUsCiAgICAgICAgZmlndXJlOmhvdmVyIC5ob3Zlci1lZmZlY3Q6YmVmb3JlLAogICAgICAgIC5jYXJvdXNlbC1tb2R1bGUgLmNhcm91c2VsIC5pdGVtIGZpZ3VyZTpob3ZlciAuaG92ZXItZWZmZWN0OmJlZm9yZSwKICAgICAgICAuaXRlbS10aHVtYjpob3ZlciAuc2xpZGVzaG93IC5zbGlkZXNob3ctbmF2LW1haW4gLnNsaWNrLXNsaWRlOmJlZm9yZSwKICAgICAgICAuc2xpZGVzaG93IC5zbGlkZXNob3ctbmF2LW1haW4gLml0ZW0tdGh1bWI6aG92ZXIgLnNsaWNrLXNsaWRlOmJlZm9yZSwKICAgICAgICBmaWd1cmU6aG92ZXIgLnNsaWRlc2hvdyAuc2xpZGVzaG93LW5hdi1tYWluIC5zbGljay1zbGlkZTpiZWZvcmUsCiAgICAgICAgLnNsaWRlc2hvdyAuc2xpZGVzaG93LW5hdi1tYWluIGZpZ3VyZTpob3ZlciAuc2xpY2stc2xpZGU6YmVmb3JlIHsKICAgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIC5maWd1cmUtZ3JpZCAuZGV0YWlsIGgzLAogICAgICAgIC5kZXRhaWwtYWJvdmUuZGV0YWlsIGgzIHsKICAgICAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgfQogICAgICAgIC5kZXRhaWwtYm90dG9tLmRldGFpbCBoMyB7CiAgICAgICAgICAgIGNvbG9yOiAjMDAwOwogICAgICAgIH0KICAgICAgICAuYWdlbnQtY29udGFjdCBhIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDsKICAgICAgICB9CiAgICAgICAgbGFiZWwgewogICAgICAgICAgICBmb250LXdlaWdodDogNDAwOwogICAgICAgICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgICAgfQogICAgICAgIC5sYWJlbC1zdGF0dXMgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzOwogICAgICAgICAgICBmb250LXdlaWdodDogNzAwOwogICAgICAgIH0KICAgICAgICAucmVhZCAuZmEgewogICAgICAgICAgICB0b3A6IDFweDsKICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgIH0gICAgICAgICAgICAKICAgICAgICAubGFiZWwtcHJpbWFyeSwKICAgICAgICAuZmF2ZS1sb2FkLW1vcmUgYSwKICAgICAgICAud2lkZ2V0X3RhZ19jbG91ZCAudGFnY2xvdWQgYSwKICAgICAgICAucGFnaW5hdGlvbi1tYWluIC5wYWdpbmF0aW9uIGxpLmFjdGl2ZSBhLAogICAgICAgIC5vdGhlci1mZWF0dXJlcyAuYnRuLmJ0bi1zZWNvbmRhcnksCiAgICAgICAgLm15LW1lbnUgLmFjdGl2ZSBhbSB7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7CiAgICAgICAgfSAgICAgICAKICAgICAgICAKICAgICAgICAvKi5mZWF0dXJlcy1saXN0IHsKICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDE1cHg7CiAgICAgICAgfSovCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaCAuYWR2YW5jZS1idG4gaSB7CiAgICAgICAgICAgIGZsb2F0OiBpbmhlcml0OwogICAgICAgICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgICAgdG9wOiAwcHg7CiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNnB4OwogICAgICAgIH0KICAgICAgICBAbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHsKICAgICAgICAgICAgLmFkdmFuY2VkLXNlYXJjaCAuZmVhdHVyZXMtbGlzdCAuY2hlY2tib3gtaW5saW5lIHsKICAgICAgICAgICAgICAgIHdpZHRoOiAxNCU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLmhlYWRlci1kZXRhaWwudGFibGUtY2VsbCAuaGVhZGVyLXJpZ2h0IHsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMjdweDsKICAgICAgICB9CiAgICAgICAgLmhlYWRlci1kZXRhaWwgaDEgLmFjdGlvbnMgc3BhbiwgLmhlYWRlci1kZXRhaWwgaDQgLmFjdGlvbnMgc3BhbiB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwogICAgICAgICAgICBtYXJnaW46IDAgM3B4OwogICAgICAgIH0gICAgICAgIAogICAgICAgIC5oZWFkZXItZGV0YWlsIC5wcm9wZXJ0eS1hZGRyZXNzIHsKICAgICAgICAgICAgY29sb3I6ICM3MDcwNzA7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDEycHg7CiAgICAgICAgfSAgICAgICAgCiAgICAgICAgLndoaXRlLWJsb2NrIHsKICAgICAgICAgICAgcGFkZGluZzogNDBweDsKICAgICAgICB9CiAgICAgICAgLndwYl90ZXh0X2NvbHVtbiB1bCwKICAgICAgICAud3BiX3RleHRfY29sdW1uIG9sIHsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMjBweDsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAyMHB4OwogICAgICAgIH0KICAgICAgICAjc2lkZWJhciAud2lkZ2V0X2hvdXplel9sYXRlc3RfcG9zdHMgaW1nIHsKICAgICAgICAgICAgbWF4LXdpZHRoOiA5MHB4OwogICAgICAgICAgICBtYXJnaW4tdG9wOiAwOwogICAgICAgIH0KICAgICAgICAjc2lkZWJhciAud2lkZ2V0X2hvdXplel9sYXRlc3RfcG9zdHMgLm1lZGlhLWhlYWRpbmcsCiAgICAgICAgI3NpZGViYXIgLndpZGdldF9ob3V6ZXpfbGF0ZXN0X3Bvc3RzIC5yZWFkIHsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICB9ICAgICAgICAKICAgICAgICAjc2lkZWJhciAud2lkZ2V0LXJhbmdlIC5kcm9wZG93bi10b2dnbGUsCiAgICAgICAgLmJvb3RzdHJhcC1zZWxlY3QuYnRuLWdyb3VwLCAgICAgICAgCiAgICAgICAgLnNlYXJjaC1sb25nIC5zZWFyY2ggaW5wdXQsCiAgICAgICAgLmFkdmFuY2VkLXNlYXJjaCAuc2VhcmNoLWxvbmcgLmFkdmFuY2UtYnRuLCAgICAgICAgCiAgICAgICAgLnNwbGFzaC1zZWFyY2ggLmRyb3Bkb3duLXRvZ2dsZSwgICAgICAgIAogICAgICAgIC5zb3J0LXRhYiB7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICAgICAgICAgIGNvbG9yOiAjOTU5NTk1ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDsKICAgICAgICB9CgogICAgICAgIC5hZHZhbmNlZC1zZWFyY2ggLmlucHV0LWdyb3VwIC5mb3JtLWNvbnRyb2wgewogICAgICAgICAgICBib3JkZXItbGVmdC13aWR0aDogMDsKICAgICAgICB9ICAgICAgICAKICAgICAgICAubG9jYXRpb24tc2VsZWN0IHsKICAgICAgICAgICAgbWF4LXdpZHRoOiAxNzBweDsKICAgICAgICB9ICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAudmVnYXMtb3ZlcmxheSB7CiAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7CiAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS93cC1jb250ZW50L2FnZW5jZTgzODg0LWltYWdlcy8yMDE2LzAzL2JnLXZpZGVvLTEucG5nKTsKICAgICAgICAgICB9CiAgICAgICAgLnVzZXItZGFzaGJvYXJkLWxlZnQsCiAgICAgICAgLmJvYXJkLWhlYWRlci00ewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiMxYzE5MWY7CiAgICAgICAgfQogICAgICAgIC5ib2FyZC1wYW5lbC1tZW51ID4gbGkgYSwKICAgICAgICAuYm9hcmQtaGVhZGVyLTQgLmJvYXJkLXRpdGxlLAogICAgICAgIC5ib2FyZC1oZWFkZXItNCAuYnJlYWRjcnVtYiA+IC5hY3RpdmUsCiAgICAgICAgLmJvYXJkLWhlYWRlci00IC5icmVhZGNydW1iIGxpOmFmdGVyLAogICAgICAgIC5ib2FyZC1oZWFkZXItNCAuc3RlcHMtcHJvZ3Jlc3MtbWFpbnsgCiAgICAgICAgICAgIGNvbG9yOiNmZmZmZmY7IAogICAgICAgICB9CiAgICAgICAgLmJvYXJkLXBhbmVsLW1lbnUgPiBsaS5hY3RpdmUgewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICB9CiAgICAgICAgLmJvYXJkLXBhbmVsLW1lbnUgLnN1Yi1tZW51IHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzFjMTkxZjsKICAgICAgICB9CiAgICAgICAgLmJvYXJkLXBhbmVsLW1lbnUgLnN1Yi1tZW51ID4gbGkuYWN0aXZlID4gYSwgLmJvYXJkLXBhbmVsLW1lbnUgPiBsaSBhOmhvdmVyIHsKICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgfQogICAgIAogICAgICAgICNpaGYtbWFpbi1jb250YWluZXIgLmJ0bi1wcmltYXJ5LCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIC5paGYtbWFwLXNlYXJjaC1yZWZpbmUtbGluaywKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIC5paGYtbWFwLXNlYXJjaC1yZWZpbmUtbGluayB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNiMWE3OTU7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2IxYTc5NTsKICAgICAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgfQogICAgICAgICNpaGYtbWFpbi1jb250YWluZXIgLmJ0bi1wcmltYXJ5OmhvdmVyLCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIC5idG4tcHJpbWFyeTpmb2N1cywgCiAgICAgICAgI2loZi1tYWluLWNvbnRhaW5lciAuYnRuLXByaW1hcnk6YWN0aXZlLCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIC5idG4tcHJpbWFyeS5hY3RpdmUgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI4LDI1LDMxLDAxKTsKICAgICAgICB9CiAgICAgICAgI2loZi1tYWluLWNvbnRhaW5lciBhIHsKICAgICAgICAgICAgY29sb3I6ICMxYzE5MWY7ICAgICAgIAogICAgICAgIH0KICAgICAgICAuaWhmLWdyaWQtcmVzdWx0LWJhc2ljLWluZm8tY29udGFpbmVyLAogICAgICAgICNpaGYtbWFpbi1jb250YWluZXIgewogICAgICAgICAgICBjb2xvcjogIzAwMDAwMDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IE1vbnRzZXJyYXQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lOwogICAgICAgIH0KICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIC5mcy0xMiwKICAgICAgICAuaWhmLXRhYi1wYW5lLAogICAgICAgICNpaGYtYWdlbnQtc2VsbGVycy1yZXAsCiAgICAgICAgI2loZi1ib2FyZC1kZXRhaWwtZGlzY2xhaW1lciwKICAgICAgICAjaWhmLWJvYXJkLWRldGFpbC11cGRhdGV0ZXh0ICB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICB9CiAgICAgICAgI2loZi1tYWluLWNvbnRhaW5lciAudGl0bGUtYmFyLTEsCiAgICAgICAgLmloZi1tYXAtaWNvbiwKICAgICAgICAuc2xpY2stcHJldiwKICAgICAgICAuc2xpY2stbmV4dCwKICAgICAgICAub3dsLXRoZW1lIC5vd2wtY29udHJvbHMgLm93bC1uYXYgW2NsYXNzKj1vd2wtXXsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzFjMTkxZjsKICAgICAgICB9CiAgICAgICAgLmloZi1tYXAtaWNvbnsKICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAuaWhmLW1hcC1pY29uOmFmdGVyewogICAgICAgICAgICBib3JkZXItdG9wLWNvbG9yOiAjMWMxOTFmOwogICAgICAgIH0KICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIGgxLCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIGgyLCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIGgzLCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIGg0LCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIGg1LCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIGg2LCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIC5oMSwgCiAgICAgICAgI2loZi1tYWluLWNvbnRhaW5lciAuaDIsIAogICAgICAgICNpaGYtbWFpbi1jb250YWluZXIgLmgzLCAKICAgICAgICAjaWhmLW1haW4tY29udGFpbmVyIC5oNCwgCiAgICAgICAgI2loZi1tYWluLWNvbnRhaW5lciAuaDUsIAogICAgICAgICNpaGYtbWFpbi1jb250YWluZXIgLmg2LAogICAgICAgICNpaGYtbWFpbi1jb250YWluZXIgaDQuaWhmLWFkZHJlc3MsCiAgICAgICAgI2loZi1tYWluLWNvbnRhaW5lciBoNC5paGYtcHJpY2UgIHsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IE1vbnRzZXJyYXQ7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0OwogICAgICAgICAgICB0ZXh0LWFsaWduOiBpbmhlcml0OwogICAgICAgIH0KICAgIC5sb2dvIGltZyB7DQogICAgbWF4LWhlaWdodDogMTAwcHggIWltcG9ydGFudDsNCiAgICBtYXgtd2lkdGg6IDQwMHB4ICFpbXBvcnRhbnQ7DQogICAgICAgIG1pbi13aWR0aDogMjAwcHg7DQp9DQoNCi5wYWdlLWlkLTc4MzEyICAuc3BsYXNoLWhlYWRlciAubG9nbyB7DQogICAgbWF4LXdpZHRoOiAxMzBweDsNCn0NCg0KLmp1c3RpZnkgLndwYl93cmFwcGVyew0KICAgIHRleHQtYWxpZ246anVzdGlmeTsNCn0NCiNjYXJvdXNlbC1tb2R1bGUtNC5ob3V6ZXotbW9kdWxlIHsNCiAgICBwYWRkaW5nOiA0MHB4IDA7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCn0NCi5oZWFkZXItc2VjdGlvbi00LmhvdXplei1oZWFkZXItdHJhbnNwYXJlbnQgLm5hdmkgPiB1bCA+IGxpID4gYSwgLmhlYWRlci1zZWN0aW9uLTQuaG91emV6LWhlYWRlci10cmFuc3BhcmVudCAuaGVhZGVyLXJpZ2h0IC5hY2NvdW50LWFjdGlvbiBzcGFuLCAuaGVhZGVyLXNlY3Rpb24tNC5ob3V6ZXotaGVhZGVyLXRyYW5zcGFyZW50IC5oZWFkZXItcmlnaHQgLnVzZXIgc3BhbiB7DQogICAgY29sb3I6ICNGRkZGRkY7DQp9DQojY2Fyb3VzZWwtbW9kdWxlLTQuaG91emV6LW1vZHVsZSB7DQogICAgcGFkZGluZzogMDsNCiAgICBtYXJnaW4tdG9wOi0yNXB4Ow0KfQ0KLmhlYWRlci1zZWN0aW9uLTQgLmxvZ29kZW1vIHsNCiAgICBsaW5lLWhlaWdodDogODVweDsNCn0NCi5iYW5uZXItc2VhcmNoLXRhYmVyIHsNCiAgICBtYXJnaW4tdG9wOiA0MDVweDsNCn0NCi5wYWdlLWlkLTg3NDUgLmJhbm5lci1jYXB0aW9uLA0KLnBhZ2UtaWQtNzgzMTYgLmJhbm5lci1jYXB0aW9uLA0KLnBhZ2UtaWQtODYwMyAuYmFubmVyLWNhcHRpb24sDQoucGFnZS1pZC04NjQyIC5iYW5uZXItY2FwdGlvbg0Kew0KICAgIG1heC13aWR0aDo0MDBweDsNCn0NCg0KLmNhcm91c2VsLWNvbHVtbi0zIC5vd2wtaXRlbSBmaWd1cmUuaXRlbS10aHVtYiB7DQogICAgbWF4LWhlaWdodDogaW5oZXJpdCAhaW1wb3J0YW50Ow0KfQ0KLmNhcm91c2VsLmNhcm91c2VsLWNvbHVtbi0xLnNsaWRlLWFuaW1hdGVkIC5vd2wtaXRlbSAuaXRlbS10aHVtYiB7DQogICAgbWF4LWhlaWdodDogaW5oZXJpdDsNCn0NCi5wYWdlLWlkLTc4MzI4IC5hZHZhbmNlZC1zZWFyY2ggLnRleHQtY2VudGVyIHsNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQouYWR2YW5jZS1zZWFyY2gtaGVhZGVyIGJ1dHRvbi5hZHZhbmNlLWJ0bi5idG57DQogICAgZGlzcGxheTpub25lOw0KfQ0KLnBhZ2UtaWQtODc0NSAud3BjZjctZm9ybSBwew0KICAgIGZvbnQtc2l6ZTo5cHggIWltcG9ydGFudDsNCn0NCg0KDQoucGFnZS1pZC03ODMyOCAudmNfY29sLWhhcy1maWxsew0KICAgIHBhZGRpbmctcmlnaHQ6MDsNCiAgICBwYWRkaW5nLWxlZnQ6MDsNCn0NCi5wYWdlLWlkLTc4MzI4IC52Y19jb2wtaGFzLWZpbGwgLnZjX2N1c3RvbV8xNTU5MDU4MDk5Nzc2ICwNCi5wYWdlLWlkLTc4MzI4IC52Y19jb2wtaGFzLWZpbGwgLnZjX2N1c3RvbV8xNTU5MDUwNDI5Njk4LA0KLnBhZ2UtaWQtNzgzMjggLnZjX2NvbC1oYXMtZmlsbCAudmNfY3VzdG9tXzE1NTkwNTA0Mzc4NzZ7DQogICAgYm9yZGVyLXJpZ2h0OjJweCBzb2xpZCAjZmZmOw0KICAgIA0KfQ0KLnBhZ2UtaWQtNzgzMjggLnZjX2N1c3RvbV8xNTU5MDUxMDY4MTMyew0KICAgIGJvcmRlci10b3A6MnB4IHNvbGlkICNmZmY7DQp9DQoNCi5wYWdlLWlkLTc4MzI4IC53cGNmNy1mb3JtIHB7DQogICAgZm9udC1zaXplOjlweCAhaW1wb3J0YW50Ow0KfQ0KLmZ1bGwtaW1nLXZpZXcgLml0ZW0td3JhcC5pbmZvYm94X3RyaWdnZXIsDQouZnVsbC1pbWctdmlldyAucHJvcGVydHktaXRlbS50YWJsZS1saXN0ew0KICAgIGhlaWdodDo0MDBweDsNCn0NCi5zaW5nbGUtcHJvcGVydHkgLmFkdmFuY2VkLXNlYXJjaC5hZHZhbmNlLXNlYXJjaC1oZWFkZXIuaG91emV6LWFkdi1wcmljZS1yYW5nZXsNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQouc2luZ2xlLXByb3BlcnR5IC5oZWFkZXItc2VjdGlvbi00ew0KICAgIGJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7DQogICAgcG9zaXRpb246YWJzb2x1dGU7DQp9DQoNCi5ibHVyaW1hZ2V7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICB0b3A6IDA7DQogICAgcmlnaHQ6IDA7DQogICAgei1pbmRleDogLTE7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIGZpbHRlcjogYmx1cigxNHB4KTsNCiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgIWltcG9ydGFudDsNCiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwICFpbXBvcnRhbnQ7DQp9DQoNCi5zbGlkZXNob3ctbWFpbiAuYmx1cmltYWdlIHsNCiAgICBiYWNrZ3JvdW5kOiByZ2JhKDE3NywxNjcsMTQ5LDAxKSAhaW1wb3J0YW50Ow0KfQ0KDQouY2Fyb3VzZWwuY2Fyb3VzZWwtY29sdW1uLTEuc2xpZGUtYW5pbWF0ZWQgLm93bC1pdGVtIC5pdGVtLXRodW1iIHsNCiAgICBoZWlnaHQ6IDQ3MHB4Ow0KfQ0KI2Rlc2NyaXB0aW9uLnByb3BlcnR5LWRlc2NyaXB0aW9uIHAgc3BhbiB7DQogICAgZm9udC1mYW1pbHk6IEFyaWFsLHNhbnMtc2VyaWYgIWltcG9ydGFudDsNCiAgICBmb250LXNpemU6IDIwcHggIWltcG9ydGFudDsNCiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7DQogICAgbGluZS1oZWlnaHQ6IDMycHg7DQp9DQouZGV0YWlsLXNsaWRlciAuaXRlbSB7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KLnNsaWNrLXNsaWRlIGltZyB7DQogICAgZGlzcGxheTogYmxvY2s7DQogICAgbWF4LWhlaWdodDogMTAwJTsNCiAgICBtYXgtd2lkdGg6IDEwMCU7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIG1hcmdpbjogMDsNCiAgICBwYWRkaW5nOiAwOw0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICB0b3A6IDUwJTsNCiAgICBsZWZ0OiA1MCU7DQogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7DQp9DQoucGFnZS10ZW1wbGF0ZS5wYWdlLXRlbXBsYXRlLXRlbXBsYXRlIC5ob3V6ZXotaGVhZGVyLW1haW4uaGVhZGVyLXNlY3Rpb24tNCwNCi5wYWdlLXRlbXBsYXRlLWRlZmF1bHQucGFnZSAuaG91emV6LWhlYWRlci1tYWluLmhlYWRlci1zZWN0aW9uLTQgew0KICAgIGJhY2tncm91bmQtY29sb3I6I2IxYTc5NTsNCn0NCi5wYWdlLXRlbXBsYXRlLnBhZ2UtdGVtcGxhdGUtdGVtcGxhdGUgLmhvdXplei1oZWFkZXItbWFpbi5oZWFkZXItc2VjdGlvbi00IC5uYXZpID4gdWwgPiBsaSA+IGE6aG92ZXIsDQoucGFnZS10ZW1wbGF0ZS1kZWZhdWx0LnBhZ2UgLmhvdXplei1oZWFkZXItbWFpbi5oZWFkZXItc2VjdGlvbi00IC5uYXZpID4gdWwgPiBsaSA+IGE6aG92ZXIsDQoucGFnZS10ZW1wbGF0ZS1kZWZhdWx0LnBhZ2UgLmhvdXplei1oZWFkZXItbWFpbi5oZWFkZXItc2VjdGlvbi00IC5uYXZpID4gdWwgPiBsaS5hY3RpdmUgPiBhLA0KLnBhZ2UtdGVtcGxhdGUucGFnZS10ZW1wbGF0ZS10ZW1wbGF0ZSAuaG91emV6LWhlYWRlci1tYWluLmhlYWRlci1zZWN0aW9uLTQgLm5hdmkgPiB1bCBsaS5hY3RpdmUgPiBhDQp7DQogICBjb2xvcjojZmZmOw0KICAgb3BhY2l0eTouNjsNCn0NCg0KLyptb2RpZmkgZGUgbGEgdmlzdGEgZGUgbG9zIGxpc3RhZG9zKi8NCkBtZWRpYSAobWluLXdpZHRoOjcyOHB4KXsNCi5wYWdlLXRlbXBsYXRlLXByb3BlcnR5LWxpc3RpbmctZnVsbHdpZHRoLWZ1bGxpbWcgLnByb3BlcnR5LWxpc3RpbmcuZnVsbC1pbWctdmlldyAuaXRlbS13cmFwOm50aC1jaGlsZChldmVuKXsNCiAgICBiYWNrZ3JvdW5kLXNpemU6IDUwJTsNCiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Ow0KICAgIGJhY2tncm91bmQtcG9zaXRpb246IHJpZ2h0Ow0KfQ0KLnBhZ2UtdGVtcGxhdGUtcHJvcGVydHktbGlzdGluZy1mdWxsd2lkdGgtZnVsbGltZyAucHJvcGVydHktbGlzdGluZy5mdWxsLWltZy12aWV3IC5pdGVtLXdyYXA6bnRoLWNoaWxkKG9kZCl7DQogICAgYmFja2dyb3VuZC1zaXplOiA1MCU7DQogICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsNCiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBsZWZ0Ow0KfQ0KDQoucGFnZS10ZW1wbGF0ZS1wcm9wZXJ0eS1saXN0aW5nLWZ1bGx3aWR0aC1mdWxsaW1nIC5wcm9wZXJ0eS1saXN0aW5nLmZ1bGwtaW1nLXZpZXcgLml0ZW0td3JhcCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQp9DQoNCi5wYWdlLXRlbXBsYXRlLXByb3BlcnR5LWxpc3RpbmctZnVsbHdpZHRoLWZ1bGxpbWcgLnByb3BlcnR5LWxpc3RpbmcuZnVsbC1pbWctdmlldyAuaXRlbS13cmFwOm50aC1jaGlsZChvZGQpIC5pdGVtLWJvZHl7DQogICAgd2lkdGg6NTAlOw0KICAgICAgICB0b3A6IDE5MHB4Ow0KICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsNCn0NCi5wYWdlLXRlbXBsYXRlLXByb3BlcnR5LWxpc3RpbmctZnVsbHdpZHRoLWZ1bGxpbWcgLnByb3BlcnR5LWxpc3RpbmcuZnVsbC1pbWctdmlldyAuaXRlbS13cmFwOm50aC1jaGlsZChldmVuKSAuaXRlbS1ib2R5ew0KICAgIHdpZHRoOjUwJTsNCiAgICAgICAgdG9wOiAxOTBweDsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7DQogICAgbGVmdDowOw0KICAgIGJvdHRvbTppbmhlcml0Ow0KfQ0KLnBhZ2UtdGVtcGxhdGUtcHJvcGVydHktbGlzdGluZy1mdWxsd2lkdGgtZnVsbGltZyAucHJvcGVydHktbGlzdGluZy5mdWxsLWltZy12aWV3IC5pdGVtLXdyYXAgLml0ZW0tYm9keSAuaXRlbS1ib2R5LWlubmVyLA0KLnBhZ2UtdGVtcGxhdGUtcHJvcGVydHktbGlzdGluZy1mdWxsd2lkdGgtZnVsbGltZyAucHJvcGVydHktbGlzdGluZy5mdWxsLWltZy12aWV3IC5pdGVtLXdyYXAgLml0ZW0tYm9keSAuaXRlbS1ib2R5LWlubmVyIC5wcmljZXsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9DQoucGFnZS10ZW1wbGF0ZS1wcm9wZXJ0eS1saXN0aW5nLWZ1bGx3aWR0aC1mdWxsaW1nIC5wcm9wZXJ0eS1saXN0aW5nLmZ1bGwtaW1nLXZpZXcgLnByb3BlcnR5LWl0ZW0gaDIgYSwNCi5wYWdlLXRlbXBsYXRlLXByb3BlcnR5LWxpc3RpbmctZnVsbHdpZHRoLWZ1bGxpbWcgLnByb3BlcnR5LWxpc3RpbmcuZnVsbC1pbWctdmlldyAuaXRlbS1ib2R5LA0KLnBhZ2UtdGVtcGxhdGUtcHJvcGVydHktbGlzdGluZy1mdWxsd2lkdGgtZnVsbGltZyAucHJvcGVydHktbGlzdGluZy5mdWxsLWltZy12aWV3IC5pdGVtLWJvZHkgLmRhdGUgcCwNCi5wYWdlLXRlbXBsYXRlLXByb3BlcnR5LWxpc3RpbmctZnVsbHdpZHRoLWZ1bGxpbWcgLnByb3BlcnR5LWxpc3RpbmcuZnVsbC1pbWctdmlldyAuaXRlbS1ib2R5IC5kYXRlIHAgYSwNCi5wYWdlLXRlbXBsYXRlLXByb3BlcnR5LWxpc3RpbmctZnVsbHdpZHRoLWZ1bGxpbWcgLnByb3BlcnR5LWxpc3RpbmcuZnVsbC1pbWctdmlldyAuaXRlbS1ib2R5IC5pdGVtLXByaWNlew0KICAgICBjb2xvcjojMDAwOw0KfQ0KLnBhZ2UtdGVtcGxhdGUtcHJvcGVydHktbGlzdGluZy1mdWxsd2lkdGgtZnVsbGltZyAucHJvcGVydHktbGlzdGluZy5mdWxsLWltZy12aWV3IC5wcm9wZXJ0eS1pdGVtIGgyIHsNCm1heC13aWR0aDogaW5oZXJpdDsNCn0NCi5wYWdlLXRlbXBsYXRlLXByb3BlcnR5LWxpc3RpbmctZnVsbHdpZHRoLWZ1bGxpbWcgLnByb3BlcnR5LWxpc3RpbmcuZnVsbC1pbWctdmlldyAucHJvcGVydHktaXRlbXsNCiBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoMjU1LDI1NSwyNTUsMCkgMCUscmdiYSgyNTUsMjU1LDI1NSwwKSAxMDAlLHJnYmEoMCwwLDAsMSkgMTAwJSk7DQp9DQoucGFnZS10ZW1wbGF0ZS1wcm9wZXJ0eS1saXN0aW5nLWZ1bGx3aWR0aC1mdWxsaW1nIC5wcm9wZXJ0eS1saXN0aW5nLmZ1bGwtaW1nLXZpZXcgLml0ZW0td3JhcDpudGgtY2hpbGQoZXZlbikgLmFjdGlvbnMsDQoucGFnZS10ZW1wbGF0ZS1wcm9wZXJ0eS1saXN0aW5nLWZ1bGx3aWR0aC1mdWxsaW1nIC5wcm9wZXJ0eS1saXN0aW5nLmZ1bGwtaW1nLXZpZXcgLml0ZW0td3JhcDpudGgtY2hpbGQoZXZlbikgLmxhYmVsLWZlYXR1cmVkew0KICAgIGxlZnQ6IGluaGVyaXQ7DQogICAgcmlnaHQ6IDA7DQp9DQouZnVsbC1pbWctdmlldyAuaXRlbS1ib2R5IC5pbmZvLXJvdysuaW5mby1yb3d7DQogICAgbWFyZ2luLXRvcDowOw0KfQ0KLmluZm8tcm93IC5wcmljZXsNCiAgICBtYXJnaW4tdG9wOjA7DQp9DQouZnVsbC1pbWctdmlldyAucHJvcGVydHktaXRlbSAuaXRlbS1ib2R5ew0KICAgIHBhZGRpbmc6MDsNCn0NCi5wcmljZSAuaXRlbS1wcmljZXsNCnBhZGRpbmctdG9wOjA7ICAgIA0KfQ0KLmZ1bGwtaW1nLXZpZXcgLmFtZW5pdGllcyBwOmZpcnN0LWNoaWxkew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgbWFyZ2luLXRvcDoyMHB4Ow0KICAgIGNvbG9yOiM4YjkxOTc7DQp9DQoNCi5mdWxsLWltZy12aWV3IC5hbWVuaXRpZXMgLmJlZDpiZWZvcmV7DQogICAgZm9udC1mYW1pbHk6IEZvbnRBd2Vzb21lOw0KICAgY29udGVudDogIlxmMjM2IjsNCiAgIGZvbnQtc2l6ZToxLjZlbTsNCiAgIGRpc3BsYXk6YmxvY2s7DQogICBtYXJnaW4tYm90dG9tOjEwcHg7DQogIA0KfQ0KLmZ1bGwtaW1nLXZpZXcgLmFtZW5pdGllcyAuYmF0aDpiZWZvcmV7DQogICAgIGZvbnQtZmFtaWx5OiBGb250QXdlc29tZTsNCiAgIGNvbnRlbnQ6ICJcZjJjZCI7DQogICBmb250LXNpemU6MS42ZW07DQogICAgZGlzcGxheTpibG9jazsNCiAgICBtYXJnaW4tYm90dG9tOjEwcHg7DQogIA0KfQ0KLmZ1bGwtaW1nLXZpZXcgLmFtZW5pdGllcyAuc2l6ZTpiZWZvcmV7DQogICAgIGZvbnQtZmFtaWx5OiBGb250QXdlc29tZTsNCiAgIGNvbnRlbnQ6ICJcZjAxNSI7DQogICBmb250LXNpemU6MS42ZW07DQogICAgZGlzcGxheTpibG9jazsNCiAgICBtYXJnaW4tYm90dG9tOjEwcHg7DQogICANCn0NCi5mdWxsLWltZy12aWV3IC5hbWVuaXRpZXMgc3BhbnsNCiAgICBkaXNwbGF5OmJsb2NrOw0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICM4YjkxOTc7DQogICAgcGFkZGluZy1yaWdodDoxMHB4Ow0KfQ0KLmZ1bGwtaW1nLXZpZXcgLmFtZW5pdGllcyBzcGFuOmxhc3QtY2hpbGR7DQogICAgYm9yZGVyLXJpZ2h0Om5vbmU7DQp9DQp9DQoNCg0KLyppbmZvIGNvbXByaW1pZGEqLw0KLnNpbmdsZS5zaW5nbGUtcHJvcGVydHkgLmRldGFpbC1jb250ZW50LXRhYmJlciwNCi5zaW5nbGUuc2luZ2xlLXByb3BlcnR5IC5kZXRhaWwtY29udGVudC10YWJiZXIgLmRldGFpbC1ibG9ja3sNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNlYmViZWQ7DQp9DQouc2luZ2xlLnNpbmdsZS1wcm9wZXJ0eSAuZGV0YWlsLWNvbnRlbnQtdGFiYmVyIC5kZXRhaWwtdGl0bGUgaDJ7DQogICAgZm9udC1zaXplOjE4cHg7DQogICAgbWFyZ2luOjA7DQp9DQouc2luZ2xlLnNpbmdsZS1wcm9wZXJ0eSAuZGV0YWlsLWNvbnRlbnQtdGFiYmVyICNhZGRyZXNzIC5hbGVydC1pbmZvIHsNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQouc2luZ2xlLnNpbmdsZS1wcm9wZXJ0eSAuZGV0YWlsLWNvbnRlbnQtdGFiYmVyICNhZGRyZXNzIHsNCiAgICBwYWRkaW5nOjIwcHggMjVweDsNCn0NCi5zaW5nbGUuc2luZ2xlLXByb3BlcnR5IC5kZXRhaWwtY29udGVudC10YWJiZXIgI2FkZHJlc3MgLnRpdGxlLWxlZnQgew0KICAgICAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIzkzZDVmNjsNCnBhZGRpbmc6IDBweCAwcHggMTVweCAwOw0KfQ0KLnNpbmdsZS5zaW5nbGUtcHJvcGVydHkgLmRldGFpbC1jb250ZW50LXRhYmJlciAjYWRkcmVzcyBhZGRyZXNzIHsNCiAgICBwYWRkaW5nLXRvcDogMTVweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9DQouc2luZ2xlLnNpbmdsZS1wcm9wZXJ0eSAuZGV0YWlsLWNvbnRlbnQtdGFiYmVyICNhZGRyZXNzIC5kZXRhaWwtdGl0bGUgLnRpdGxlLXJpZ2h0IHsNCiAgICBmbG9hdDogaW5oZXJpdDsNCiAgICBmb250LXNpemU6IDEycHg7DQogICAgbGluZS1oZWlnaHQ6IDE4cHg7DQogICAgbWFyZ2luLXRvcDogNzRweDsNCn0NCi5zaW5nbGUuc2luZ2xlLXByb3BlcnR5IC5kZXRhaWwtY29udGVudC10YWJiZXIgLmFsZXJ0LWluZm8gdWx7DQogICAgYm9yZGVyLXRvcDogM3B4IHNvbGlkICM5M2Q1ZjY7DQogICAgcGFkZGluZy10b3A6IDIwcHg7DQogICAgdGV4dC1hbGlnbjpsZWZ0Ow0KICAgIGRpc3BsYXk6ZmxleDsNCiAgICBmbGV4LWRpcmVjdGlvbjpjb2x1bW47DQogICAganVzdGlmeS1jb250ZW50OmVuZDsNCn0NCi5zaW5nbGUuc2luZ2xlLXByb3BlcnR5IC5kZXRhaWwtY29udGVudC10YWJiZXIgLmFsZXJ0LWluZm8gdWwgc3Ryb25new0KICAgIGRpc3BsYXk6aW5saW5lOw0KICAgIHdpZHRoOiBpbml0aWFsOw0KICAgIG1hcmdpbi1yaWdodDphdXRvOw0KfQ0KLnNpbmdsZS5zaW5nbGUtcHJvcGVydHkgLmRldGFpbC1jb250ZW50LXRhYmJlciAuYWxlcnQtaW5mbyB1bCBsaXsNCiAgICBmbG9hdDpub25lOw0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsNCn0NCi5zaW5nbGUuc2luZ2xlLXByb3BlcnR5IC5kZXRhaWwtY29udGVudC10YWJiZXIgLmFsZXJ0LWluZm8gdWwgbGkgLmFpdm9uaS1kZXRhaWxzew0KICAgIHdpZHRoOjEwMCU7DQogICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsNCn0NCi5zaW5nbGUuc2luZ2xlLXByb3BlcnR5IC5kZXRhaWwtY29udGVudC10YWJiZXIgLmRldGFpbC1ibG9jayAuYWxlcnQtaW5mb3sNCiAgICBiYWNrZ3JvdW5kOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7DQogICAgbWFyZ2luLWJvdHRvbTowOw0KfQ0KLnNpbmdsZS5zaW5nbGUtcHJvcGVydHkgLmRldGFpbC1jb250ZW50LXRhYmJlciAuZGV0YWlsLWJsb2Nrew0KICAgIHBhZGRpbmc6MjBweCAwOw0KfQ0KLnNpbmdsZS5zaW5nbGUtcHJvcGVydHkgLmRldGFpbC1jb250ZW50LXRhYmJlciAuZGV0YWlsLWJsb2NrIC5EUEVCT1ggLmRldGFpbC10aXRsZXsNCiAgICBtaW4taGVpZ2h0OiAxMDBweDsNCn0NCkBtZWRpYSAobWluLXdpZHRoOiA0MjVweCkgYW5kIChtYXgtd2lkdGg6IDEwMjRweCl7DQogICAgLnNpbmdsZS5zaW5nbGUtcHJvcGVydHkgLmRldGFpbC1jb250ZW50LXRhYmJlciAuZGV0YWlsLXRpdGxlIGgyew0KICAgIGZvbnQtc2l6ZToxMnB4Ow0KICAgIH0NCn0NCi5mZWF0dXJlc3sNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQouYW1lbml0aWVzIHA6bnRoLWNoaWxkKDIpew0KICAgIGRpc3BsYXk6bm9uZTsNCn0NCi5pdGVtLWJvZHkgLnByb3BlcnR5LWFkZHJlc3Mgew0KICAgIGRpc3BsYXk6aW5saW5lOw0KfQ0KLmRldGFpbC10b3AuZGV0YWlsLXRvcC1mdWxsIC5oZWFkZXItZGV0YWlsIC5wcm9wZXJ0eS1hZGRyZXNzIHsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9DQouc2luZ2xlLXByb3BlcnR5IC5kZXRhaWwtY29udGFjdCBhLmJ0bi5idG4tc2Vjb25kYXJ5LmJ0bi1ibG9ja3sNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQoubGlnaHRib3gtcG9wdXAgIC5hZ2VudC1tZWRpYSBkZHsNCiAgICAgZm9udC1zaXplOjEuNWVtOw0KfQ0KQG1lZGlhIChtYXgtd2lkdGg6NzY4cHgpew0KICAgIC5zaW5nbGUtcHJvcGVydHkgLmRldGFpbC1mZWF0dXJlcyAuRFBFQk9Yew0KICAgICAgICBkaXNwbGF5OiBmbGV4OyANCiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgfQ0KICAgICAuc2luZ2xlLXByb3BlcnR5IC5kZXRhaWwtY29udGFjdCAuYWdlbnQtbWVkaWEgZGR7DQogICAgICAgIGZvbnQtc2l6ZToxLjVlbTsNCiAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7DQogICAgfQ0KfQ0KQG1lZGlhIChtYXgtd2lkdGg6NDI1cHgpew0KICAgIC5zaW5nbGUtcHJvcGVydHkgLnByb3BlcnR5LWRlc2NyaXB0aW9uew0KICAgICAgICBwYWRkaW5nOjMwcHggIWltcG9ydGFudDsNCiAgICB9DQogICAgLnNpbmdsZS1wcm9wZXJ0eSAuZGV0YWlsLWFkZHJlc3MgLnRpdGxlLXJpZ2h0LA0KICAgIC5zaW5nbGUtcHJvcGVydHkgYWRkcmVzcy5wcm9wZXJ0eS1hZGRyZXNzew0KICAgICAgICBmbG9hdDpub25lOw0KICAgICAgICB0ZXh0LWFsaWduOmNlbnRlcjsNCiAgICB9DQogICAgLnNpbmdsZS1wcm9wZXJ0eSAuZGV0YWlsLWNvbnRhY3QgLmFnZW50LW1lZGlhIGRkew0KICAgICAgICBmb250LXNpemU6MS41ZW07DQogICAgfQ0KICAgIC5wYWdlLWlkLTc4MzE2IC52Y19jdXN0b21fMTU1MDU4ODAyNzM0NXsNCiAgICAgICAgcGFkZGluZy1yaWdodDogMjBweDsNCiAgICAgICAgcGFkZGluZy1sZWZ0OiAyMHB4Ow0KICAgIH0NCiAgICAucGFnZS1pZC03ODg4MyAuYWlvLWljb24tYm94IC5haW8taWNvbi10aXRsZS51bHQtcmVzcG9uc2l2ZSwNCiAgICAucGFnZS1pZC03ODg4NSAuYWlvLWljb24tYm94IC5haW8taWNvbi10aXRsZS51bHQtcmVzcG9uc2l2ZSwNCiAgICAucGFnZS1pZC03ODg4NyAuYWlvLWljb24tYm94IC5haW8taWNvbi10aXRsZS51bHQtcmVzcG9uc2l2ZXsNCiAgICAgICAgZm9udC1zaXplOjI4cHggIWltcG9ydGFudDsNCiAgICB9DQogICAgLnBhZ2UtaWQtODY0MiAudmNfY3VzdG9tXzE1NTA1ODkxMDY1MzMgaDF7DQogICAgICAgIGZvbnQtc2l6ZToyNHB4Ow0KICAgIH0NCiAgICAuc2luZ2xlLXByb3BlcnR5IC5kZXRhaWwtZnVsbC13aWR0aCAjZGVzY3JpcHRpb24ucHJvcGVydHktZGVzY3JpcHRpb24gcCBzcGFuew0KICAgICAgICBmb250LXNpemU6MTZweCAhaW1wb3J0YW50Ow0KICAgIH0NCiAgIA0KfQ0KQG1lZGlhIChtYXgtd2lkdGg6MzIwcHgpew0KICAgICAucGFnZS1pZC03ODg4MyAuYWlvLWljb24tYm94IC5haW8taWNvbi10aXRsZS51bHQtcmVzcG9uc2l2ZSwNCiAgICAucGFnZS1pZC03ODg4NSAuYWlvLWljb24tYm94IC5haW8taWNvbi10aXRsZS51bHQtcmVzcG9uc2l2ZSwNCiAgICAucGFnZS1pZC03ODg4NyAuYWlvLWljb24tYm94IC5haW8taWNvbi10aXRsZS51bHQtcmVzcG9uc2l2ZXsNCiAgICAgICAgZm9udC1zaXplOjI0cHggIWltcG9ydGFudDsNCiAgICB9DQogICAgDQp9DQouc2luZ2xlLXByb3BlcnR5IC5tZWRpYS1hZ2VudC1waG90b3sNCiAgICBiYWNrZ3JvdW5kLXNpemU6NDAlOw0KfQ0KQG1lZGlhKG1heC13aWR0aDo0MjVweCl7DQogICAgLnNpbmdsZS1wcm9wZXJ0eSAubWVkaWEtYWdlbnQtcGhvdG97DQogICAgICAgIGJhY2tncm91bmQtc2l6ZTo2NSU7DQogICAgfQ0KfQ0KLnByb3BlcnR5LWFkZHJlc3N7DQogICAgZGlzcGxheTpub25lIWltcG9ydGFudDsNCn0NCg0KI2FkZHJlc3MgLnRpdGxlLXJpZ2h0IGF7IGRpc3BsYXk6bm9uZSFpbXBvcnRhbnR9DQoNCi5sZWFmbGV0LXBvcHVwLWNvbnRlbnQgLmJvZHktbGVmdCBoNHsgZGlzcGxheTpub25lIWltcG9ydGFudH0KPC9zdHlsZT4KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHNyYz0naHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vd3AtaW5jbHVkZXMvanMvanF1ZXJ5L2pxdWVyeS5qcyc+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9J2h0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL3dwLWluY2x1ZGVzL2pzL2pxdWVyeS9qcXVlcnktbWlncmF0ZS5qcyc+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9J2h0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2Fpdm9uaS1taW4vbWluLz9mPXdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXovbGVhZmxldC9sZWFmbGV0LmpzLHdwLWNvbnRlbnQvcGx1Z2lucy9yZXZzbGlkZXIvcHVibGljL2Fzc2V0cy9qcy9qcXVlcnkudGhlbWVwdW5jaC50b29scy5taW4uanMsd3AtY29udGVudC9wbHVnaW5zL3JldnNsaWRlci9wdWJsaWMvYXNzZXRzL2pzL2pxdWVyeS50aGVtZXB1bmNoLnJldm9sdXRpb24ubWluLmpzLHdwLWNvbnRlbnQvcGx1Z2lucy93ZWdsb3QvZGlzdC9mcm9udC1qcy5qcyx3cC1jb250ZW50L3RoZW1lcy9ob3V6ZXovaG91emV6L2pzL2pxdWVyeS5udW1iZXIubWluLmpzJiMwMzg7dmVyPTE1ODY3ODg5MjEnPjwvc2NyaXB0Pg0KPGxpbmsgcmVsPSdodHRwczovL2FwaS53Lm9yZy8nIGhyZWY9J2h0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL3dwLWpzb24vJyAvPgo8bGluayByZWw9IkVkaXRVUkkiIHR5cGU9ImFwcGxpY2F0aW9uL3JzZCt4bWwiIHRpdGxlPSJSU0QiIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL3htbHJwYy5waHA/cnNkIiAvPgo8bGluayByZWw9Indsd21hbmlmZXN0IiB0eXBlPSJhcHBsaWNhdGlvbi93bHdtYW5pZmVzdCt4bWwiIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL3dwLWluY2x1ZGVzL3dsd21hbmlmZXN0LnhtbCIgLz4gCjxtZXRhIG5hbWU9ImdlbmVyYXRvciIgY29udGVudD0iV29yZFByZXNzIDQuOS44IiAvPgo8bGluayByZWw9J3Nob3J0bGluaycgaHJlZj0naHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vP3A9NDEnIC8+CjxsaW5rIHJlbD0iYWx0ZXJuYXRlIiB0eXBlPSJhcHBsaWNhdGlvbi9qc29uK29lbWJlZCIgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vd3AtanNvbi9vZW1iZWQvMS4wL2VtYmVkP3VybD1odHRwcyUzQSUyRiUyRnd3dy5kYXVwaGluZS1pbW1vLmNvbSUyRmFkdmFuY2VkLXNlYXJjaCUyRiIgLz4KPGxpbmsgcmVsPSJhbHRlcm5hdGUiIHR5cGU9InRleHQveG1sK29lbWJlZCIgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vd3AtanNvbi9vZW1iZWQvMS4wL2VtYmVkP3VybD1odHRwcyUzQSUyRiUyRnd3dy5kYXVwaGluZS1pbW1vLmNvbSUyRmFkdmFuY2VkLXNlYXJjaCUyRiYjMDM4O2Zvcm1hdD14bWwiIC8+CjxzdHlsZSBpZD0iY3RjYy1jc3MiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0ic2NyZWVuIj4KCQkJCSNjYXRhcHVsdC1jb29raWUtYmFyIHsKCQkJCQlib3gtc2l6aW5nOiBib3JkZXItYm94OwoJCQkJCW1heC1oZWlnaHQ6IDA7CgkJCQkJb3BhY2l0eTogMDsKCQkJCQl6LWluZGV4OiA5OTk5OTsKCQkJCQlvdmVyZmxvdzogaGlkZGVuOwoJCQkJCWNvbG9yOiAjZGRkOwoJCQkJCXBvc2l0aW9uOiBmaXhlZDsKCQkJCQlsZWZ0OiAwOwoJCQkJCXRvcDogMDsKCQkJCQl3aWR0aDogMTAwJTsKCQkJCQliYWNrZ3JvdW5kLWNvbG9yOiAjNGY0ZjRmOwoJCQkJfQoJCQkJI2NhdGFwdWx0LWNvb2tpZS1iYXIgYSB7CgkJCQkJY29sb3I6ICNmZmY7CgkJCQl9CgkJCQkjY2F0YXB1bHQtY29va2llLWJhciAueF9jbG9zZSBzcGFuIHsKCQkJCQliYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOwoJCQkJfQoJCQkJYnV0dG9uI2NhdGFwdWx0Q29va2llIHsKCQkJCQliYWNrZ3JvdW5kOjsKCQkJCQljb2xvcjogI2ZmZmZmZjsKCQkJCQlib3JkZXI6IDA7IHBhZGRpbmc6IDZweCA5cHg7IGJvcmRlci1yYWRpdXM6IDNweDsKCQkJCX0KCQkJCSNjYXRhcHVsdC1jb29raWUtYmFyIGgzIHsKCQkJCQljb2xvcjogI2RkZDsKCQkJCX0KCQkJCS5oYXMtY29va2llLWJhciAjY2F0YXB1bHQtY29va2llLWJhciB7CgkJCQkJb3BhY2l0eTogMTsKCQkJCQltYXgtaGVpZ2h0OiA5OTlweDsKCQkJCQltaW4taGVpZ2h0OiAzMHB4OwoJCQkJfTwvc3R5bGU+PGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2FkdmFuY2VkLXNlYXJjaC8/dHlwZT0mbWF4LXByaWNlPSZzdGF0dXM9dmVudGUmbG9jYXRpb249JmJhdGhyb29tcz0mbWluLWFyZWE9Jm1heC1hcmVhPSZtaW4tcHJpY2U9Jm1heC1wcmljZT0mcHJvcGVydHlfaWQ9IiBocmVmbGFuZz0iZnIiLz4KPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2VuL2FkdmFuY2VkLXNlYXJjaC8/dHlwZT0mbWF4LXByaWNlPSZzdGF0dXM9dmVudGUmbG9jYXRpb249JmJhdGhyb29tcz0mbWluLWFyZWE9Jm1heC1hcmVhPSZtaW4tcHJpY2U9Jm1heC1wcmljZT0mcHJvcGVydHlfaWQ9IiBocmVmbGFuZz0iZW4iLz4KPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2FkdmFuY2VkLXNlYXJjaC8/dHlwZT0mbWF4LXByaWNlPSZzdGF0dXM9dmVudGUmbG9jYXRpb249JmJhdGhyb29tcz0mbWluLWFyZWE9Jm1heC1hcmVhPSZtaW4tcHJpY2U9Jm1heC1wcmljZT0mcHJvcGVydHlfaWQ9IiBocmVmbGFuZz0iZnIiLz4KPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2VuL2FkdmFuY2VkLXNlYXJjaC8/dHlwZT0mbWF4LXByaWNlPSZzdGF0dXM9dmVudGUmbG9jYXRpb249JmJhdGhyb29tcz0mbWluLWFyZWE9Jm1heC1hcmVhPSZtaW4tcHJpY2U9Jm1heC1wcmljZT0mcHJvcGVydHlfaWQ9IiBocmVmbGFuZz0iZW4iLz4KICAgIAo8IS0tIEZhdmljb24gLS0+PGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS93cC1jb250ZW50L2FnZW5jZTgzODg0LWltYWdlcy9pbWFnZXMvcGxhY2Vob2xkZXItNi5wbmciPjxtZXRhIG5hbWU9ImdlbmVyYXRvciIgY29udGVudD0iUG93ZXJlZCBieSBXUEJha2VyeSBQYWdlIEJ1aWxkZXIgLSBkcmFnIGFuZCBkcm9wIHBhZ2UgYnVpbGRlciBmb3IgV29yZFByZXNzLiIvPgo8IS0tW2lmIGx0ZSBJRSA5XT48bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS93cC1jb250ZW50L3BsdWdpbnMvanNfY29tcG9zZXIvYXNzZXRzL2Nzcy92Y19sdGVfaWU5Lm1pbi5jc3MiIG1lZGlhPSJzY3JlZW4iPjwhW2VuZGlmXS0tPjxtZXRhIG5hbWU9ImdlbmVyYXRvciIgY29udGVudD0iUG93ZXJlZCBieSBTbGlkZXIgUmV2b2x1dGlvbiA1LjQuOCAtIHJlc3BvbnNpdmUsIE1vYmlsZS1GcmllbmRseSBTbGlkZXIgUGx1Z2luIGZvciBXb3JkUHJlc3Mgd2l0aCBjb21mb3J0YWJsZSBkcmFnIGFuZCBkcm9wIGludGVyZmFjZS4iIC8+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij5mdW5jdGlvbiBzZXRSRVZTdGFydFNpemUoZSl7CQkJCQkJCQkJDQoJCQkJCQl0cnl7IGUuYz1qUXVlcnkoZS5jKTt2YXIgaT1qUXVlcnkod2luZG93KS53aWR0aCgpLHQ9OTk5OSxyPTAsbj0wLGw9MCxmPTAscz0wLGg9MDsNCgkJCQkJCQlpZihlLnJlc3BvbnNpdmVMZXZlbHMmJihqUXVlcnkuZWFjaChlLnJlc3BvbnNpdmVMZXZlbHMsZnVuY3Rpb24oZSxmKXtmPmkmJih0PXI9ZixsPWUpLGk+ZiYmZj5yJiYocj1mLG49ZSl9KSx0PnImJihsPW4pKSxmPWUuZ3JpZGhlaWdodFtsXXx8ZS5ncmlkaGVpZ2h0WzBdfHxlLmdyaWRoZWlnaHQscz1lLmdyaWR3aWR0aFtsXXx8ZS5ncmlkd2lkdGhbMF18fGUuZ3JpZHdpZHRoLGg9aS9zLGg9aD4xPzE6aCxmPU1hdGgucm91bmQoaCpmKSwiZnVsbHNjcmVlbiI9PWUuc2xpZGVyTGF5b3V0KXt2YXIgdT0oZS5jLndpZHRoKCksalF1ZXJ5KHdpbmRvdykuaGVpZ2h0KCkpO2lmKHZvaWQgMCE9ZS5mdWxsU2NyZWVuT2Zmc2V0Q29udGFpbmVyKXt2YXIgYz1lLmZ1bGxTY3JlZW5PZmZzZXRDb250YWluZXIuc3BsaXQoIiwiKTtpZiAoYykgalF1ZXJ5LmVhY2goYyxmdW5jdGlvbihlLGkpe3U9alF1ZXJ5KGkpLmxlbmd0aD4wP3UtalF1ZXJ5KGkpLm91dGVySGVpZ2h0KCEwKTp1fSksZS5mdWxsU2NyZWVuT2Zmc2V0LnNwbGl0KCIlIikubGVuZ3RoPjEmJnZvaWQgMCE9ZS5mdWxsU2NyZWVuT2Zmc2V0JiZlLmZ1bGxTY3JlZW5PZmZzZXQubGVuZ3RoPjA/dS09alF1ZXJ5KHdpbmRvdykuaGVpZ2h0KCkqcGFyc2VJbnQoZS5mdWxsU2NyZWVuT2Zmc2V0LDApLzEwMDp2b2lkIDAhPWUuZnVsbFNjcmVlbk9mZnNldCYmZS5mdWxsU2NyZWVuT2Zmc2V0Lmxlbmd0aD4wJiYodS09cGFyc2VJbnQoZS5mdWxsU2NyZWVuT2Zmc2V0LDApKX1mPXV9ZWxzZSB2b2lkIDAhPWUubWluSGVpZ2h0JiZmPGUubWluSGVpZ2h0JiYoZj1lLm1pbkhlaWdodCk7ZS5jLmNsb3Nlc3QoIi5yZXZfc2xpZGVyX3dyYXBwZXIiKS5jc3Moe2hlaWdodDpmfSkJCQkJCQ0KCQkJCQkJfWNhdGNoKGQpe2NvbnNvbGUubG9nKCJGYWlsdXJlIGF0IFByZXNpemUgb2YgU2xpZGVyOiIrZCl9CQkJCQkJDQoJCQkJCX07PC9zY3JpcHQ+Cjxub3NjcmlwdD48c3R5bGUgdHlwZT0idGV4dC9jc3MiPiAud3BiX2FuaW1hdGVfd2hlbl9hbG1vc3RfdmlzaWJsZSB7IG9wYWNpdHk6IDE7IH08L3N0eWxlPjwvbm9zY3JpcHQ+CQ0KCQk8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KICAucHJpbWFyeS1jb2xvciB7DQogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxYzE5MWYgIWltcG9ydGFudDsNCiAgfQ0KICAuc2Vjb25kYXJ5LWNvbG9yIHsNCiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2IxYTc5NSAhaW1wb3J0YW50Ow0KICB9DQogIDwvc3R5bGU+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9InBhZ2UtdGVtcGxhdGUgcGFnZS10ZW1wbGF0ZS10ZW1wbGF0ZSBwYWdlLXRlbXBsYXRlLXByb3BlcnR5LWxpc3RpbmctZnVsbHdpZHRoLWZ1bGxpbWcgcGFnZS10ZW1wbGF0ZS10ZW1wbGF0ZXByb3BlcnR5LWxpc3RpbmctZnVsbHdpZHRoLWZ1bGxpbWctcGhwIHBhZ2UgcGFnZS1pZC00MSAgdHJhbnNwYXJlbnQtbm8gaG91emV6LWNoaWxkIHdwYi1qcy1jb21wb3NlciBqcy1jb21wLXZlci01LjYgdmNfcmVzcG9uc2l2ZSIgPg0KDQoJDQo8ZGl2IGlkPSJmYi1yb290Ij48L2Rpdj4NCg0KDQoNCjxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJwb3AtbG9naW4iIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImxvZ2luLXRhYnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj5JZGVudGlmaWFudCA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8bGk+Tm91dmVsIFV0aWxpc2F0ZXVyPC9saT4gLS0+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxpIGNsYXNzPSJmYSBmYS1jbG9zZSI+PC9pPjwvYnV0dG9uPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkgbG9naW4tYmxvY2sgY2xhc3MtZm9yLXJlZ2lzdGVyLW1zZyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InBvcC1yZXNldC1wYXNzIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtc20iPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsb2dpbi10YWJzIj4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+csOpaW5pdGlhbGlzZXIgbGUgbW90IGRlIHBhc3NlPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PGkgY2xhc3M9ImZhIGZhLWNsb3NlIj48L2k+PC9idXR0b24+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSBsb2dpbi1ibG9jayI+CiAgICAgICAgICAgICAgICA8cD5TJiMwMzk7aWwgdm91cyBwbGHDrnQgZW50cmVyIHZvdHJlIG5vbSBkJiMwMzk7dXRpbGlzYXRldXIgb3UgYWRyZXNzZSBlLW1haWwuIFZvdXMgcmVjZXZyZXogdW4gbGllbiBwb3VyIGNyw6llciB1biBub3V2ZWF1IG1vdCBkZSBwYXNzZSBwYXIgY291cnJpZWwuPC9wPgogICAgICAgICAgICAgICAgPGRpdiBpZD0iaG91emV6X21zZ19yZXNldCIgY2xhc3M9Im1lc3NhZ2UiPjwvZGl2PgogICAgICAgICAgICAgICAgPGZvcm0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LXVzZXIgaW5wdXQtaWNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0idXNlcl9sb2dpbl9mb3Jnb3QiIGlkPSJ1c2VyX2xvZ2luX2ZvcmdvdCIgcGxhY2Vob2xkZXI9IlNhaXNpc3NleiB2b3RyZSBub20gdm90cmUgZW1haWwuIiBjbGFzcz0iZm9ybS1jb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImZhdmVfcmVzZXRwYXNzd29yZF9zZWN1cml0eSIgbmFtZT0iZmF2ZV9yZXNldHBhc3N3b3JkX3NlY3VyaXR5IiB2YWx1ZT0iNTQxZDUwMmVhYSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfd3BfaHR0cF9yZWZlcmVyIiB2YWx1ZT0iL2FkdmFuY2VkLXNlYXJjaC8/dHlwZT0mYW1wO21heC1wcmljZT0mYW1wO3N0YXR1cz12ZW50ZSZhbXA7bG9jYXRpb249JmFtcDtiYXRocm9vbXM9JmFtcDttaW4tYXJlYT0mYW1wO21heC1hcmVhPSZhbXA7bWluLXByaWNlPSZhbXA7bWF4LXByaWNlPSZhbXA7cHJvcGVydHlfaWQ9IiAvPiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJob3V6ZXpfZm9yZ2V0cGFzcyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tYmxvY2siPk9idGVuZXogdW4gTm91dmVhdSBtb3QgZGUgcGFzc2U8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cg0KPCEtLXN0YXJ0IHNlY3Rpb24gaGVhZGVyLS0+CjxoZWFkZXIgaWQ9ImhlYWRlci1zZWN0aW9uIiBjbGFzcz0iIGhvdXplei1oZWFkZXItbWFpbiBoZWFkZXItc2VjdGlvbi00IG5hdi1yaWdodCAgIGhvdXplei1kaXNhYmxlZC1jcmVhdGUtbGlzdGluZyIgZGF0YS1zdGlja3k9IjEiPgoKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWxlZnQiPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nbyBsb2dvLWRlc2t0b3AiPgogICAgICAgICAgICAgICAgCgoKCTxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tLyI+CgkJCQkJPGltZyBzcmM9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL3dwLWNvbnRlbnQvYWdlbmNlODM4ODQtaW1hZ2VzL2ltYWdlcy9EYXVwaGluZS1CbGFuYy5wbmciIGFsdD0ibG9nbyI+CgkJCTwvYT4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZpIG1haW4tbmF2Ij4KICAgICAgICAgICAgICAgIDx1bCBpZD0ibWFpbi1uYXYiIGNsYXNzPSIiPjxsaSBpZD0ibWVudS1pdGVtLTc4MzM1IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLWhvbWUgbWVudS1pdGVtLTc4MzM1Ij48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS8iPkFjY3VlaWw8L2E+PC9saT4KPGxpIGlkPSJtZW51LWl0ZW0tNjY3MTMiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tNjY3MTMiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2FjaGV0ZXIvIj5BY2hldGVyPC9hPjwvbGk+CjxsaSBpZD0ibWVudS1pdGVtLTY2NzE0IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLTY2NzE0Ij48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9sb3Vlci8iPkxvdWVyPC9hPjwvbGk+CjxsaSBpZD0ibWVudS1pdGVtLTc4OTI4IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLWN1c3RvbSBtZW51LWl0ZW0tb2JqZWN0LWN1c3RvbSBtZW51LWl0ZW0taGFzLWNoaWxkcmVuIG1lbnUtaXRlbS03ODkyOCI+PGEgaHJlZj0iIyI+Tm9zIEFnZW5jZXM8L2E+Cjx1bCBjbGFzcz0ic3ViLW1lbnUiPgoJPGxpIGlkPSJtZW51LWl0ZW0tNzg4NTQiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tNzg4NTQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL25vdHJlLWhpc3RvaXJlLyI+Tm90cmUgaGlzdG9pcmU8L2E+PC9saT4KCTxsaSBpZD0ibWVudS1pdGVtLTc4OTMxIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLTc4OTMxIj48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hZ2VuY2UtZGF1cGhpbmUtcGFyaXMtNi1ub3JkLyI+QWdlbmNlIFBhcmlzIDbDqG1lIE5vcmQ8L2E+PC9saT4KCTxsaSBpZD0ibWVudS1pdGVtLTc4OTMwIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLTc4OTMwIj48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hZ2VuY2UtZGF1cGhpbmUtcGFyaXMtNi1zdWQvIj5BZ2VuY2UgUGFyaXMgNsOobWUgU3VkPC9hPjwvbGk+Cgk8bGkgaWQ9Im1lbnUtaXRlbS03ODkyOSIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIG1lbnUtaXRlbS03ODkyOSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vYWdlbmNlLWRhdXBoaW5lLXJpdmUtZ2F1Y2hlLXBhcmlzLTcvIj5BZ2VuY2UgUGFyaXMgN8OobWU8L2E+PC9saT4KPC91bD4KPC9saT4KPGxpIGlkPSJtZW51LWl0ZW0tNzg4MDgiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tNzg4MDgiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2dlcmVyLyI+R8OpcmVyPC9hPjwvbGk+CjxsaSBpZD0ibWVudS1pdGVtLTg5MTciIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tODkxNyI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vZXN0aW1lei12b3RyZS1iaWVuLyI+RXN0aW1leiB2b3RyZSBiaWVuPC9hPjwvbGk+CjxsaSBpZD0ibWVudS1pdGVtLTc4MzIwIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLTc4MzIwIj48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hY3R1YWxpdGVzLyI+QWN0dWFsaXTDqXM8L2E+PC9saT4KPGxpIGlkPSJtZW51LWl0ZW0tODkyMiIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIG1lbnUtaXRlbS04OTIyIj48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9jb250YWN0LyI+Q29udGFjdDwvYT48L2xpPgo8L3VsPiAgICAgICAgICAgIDwvbmF2PgogICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9InVzZXIiPgoKICAgICAgICAgICAgPGEgaHJlZj0iL3dwLWFkbWluIj48aSBjbGFzcz0iZmEgZmEtdXNlciBoaWRkZW4tbWQgaGlkZGVuLWxnIj48L2k+IDxzcGFuIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIj5Db25uZXhpb248L3NwYW4+PC9hPiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+Cgo8L2hlYWRlcj4KPCEtLWVuZCBzZWN0aW9uIGhlYWRlci0tPgoKCjxkaXYgY2xhc3M9ImhlYWRlci1tb2JpbGUgaG91emV6LWhlYWRlci1tb2JpbGUgIiAgZGF0YS1zdGlja3k9IjEiPgoJPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KCQk8IS0tc3RhcnQgbW9iaWxlIG5hdi0tPgoJCTxkaXYgY2xhc3M9Im1vYmlsZS1uYXYiPgoJCQk8c3BhbiBjbGFzcz0ibmF2LXRyaWdnZXIiPjxpIGNsYXNzPSJmYSBmYS1uYXZpY29uIj48L2k+PC9zcGFuPgoJCQk8ZGl2IGNsYXNzPSJuYXYtZHJvcGRvd24gbWFpbi1uYXYtZHJvcGRvd24iPjwvZGl2PgoJCTwvZGl2PgoJCTwhLS1lbmQgbW9iaWxlIG5hdi0tPgoJCTxkaXYgY2xhc3M9ImhlYWRlci1sb2dvIGxvZ28tbW9iaWxlIj4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vIj4KICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vd3AtY29udGVudC9hZ2VuY2U4Mzg4NC1pbWFnZXMvbG9nb19kYXVwaGluZS5wbmciIGFsdD0iTW9iaWxlIGxvZ28iPgogICAgPC9hPgkJPC9kaXY+CgkJCQkJCQkJCTxkaXYgY2xhc3M9ImhlYWRlci11c2VyIj4KCQkJCQkKICAgIDx1bCBjbGFzcz0iYWNjb3VudC1hY3Rpb24iPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVzZXItaWNvbiI+PGkgY2xhc3M9ImZhIGZhLXVzZXIiPjwvaT48L3NwYW4+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY291bnQtZHJvcGRvd24iPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT4gPGEgaHJlZj0iIyIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI3BvcC1sb2dpbiI+IDxpIGNsYXNzPSJmYSBmYS11c2VyIj48L2k+Q29ubmV4aW9uPC9hPjwvbGk+ICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbGk+CiAgICA8L3VsPgoJCQkJPC9kaXY+CgkJCQkJCTwvZGl2Pgo8L2Rpdj4NCgoKCjwhLS1zdGFydCBhZHZhbmNlZCBzZWFyY2ggc2VjdGlvbi0tPgo8ZGl2IGNsYXNzPSJhZHZhbmNlZC1zZWFyY2ggYW5pbWF0ZWQgZmFkZUluRG93biBhZHZhbmNlLXNlYXJjaC1oZWFkZXIgaG91emV6LWFkdi1wcmljZS1yYW5nZSAiIGRhdGEtc3RpY2t5PScwJz4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iZ2V0IiBhdXRvY29tcGxldGU9Im9mZiIgYWN0aW9uPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hZHZhbmNlZC1zZWFyY2gvIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHNlYXJjaC1sb25nIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlYXJjaCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1zZWFyY2ggaW5wdXQtaWNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiIHZhbHVlPSIiIG5hbWU9ImtleXdvcmQiIHBsYWNlaG9sZGVyPSJDaGVyY2hlciB1bmUgdmlsbGUgb3UgdW4gY29kZSBwb3N0YWwgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJhdXRvX2NvbXBsZXRlX2FqYXgiIGNsYXNzPSJhdXRvLWNvbXBsZXRlIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJzZWxlY3RwaWNrZXIiICBpZD0ic2VsZWN0ZWRfc3RhdHVzIiBuYW1lPSJzdGF0dXMiIGRhdGEtbGl2ZS1zZWFyY2g9ImZhbHNlIiBkYXRhLWxpdmUtc2VhcmNoLXN0eWxlPSJiZWdpbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPlR5cGUgZCYjMDM5O29ww6lyYXRpb248L29wdGlvbj48b3B0aW9uIHZhbHVlPSJsb2NhdGlvbiI+IExPQ0FUSU9OPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0idmVudGUiIHNlbGVjdGVkPSJzZWxlY3RlZCI+IFZFTlRFPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iIj5Ub3VzPC9vcHRpb24+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0ic2VsZWN0cGlja2VyIiBuYW1lPSJ0eXBlIiBkYXRhLWxpdmUtc2VhcmNoPSJmYWxzZSIgZGF0YS1saXZlLXNlYXJjaC1zdHlsZT0iYmVnaW5zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj5UeXBlIGRlIGJpZW48L29wdGlvbj48b3B0aW9uIHZhbHVlPSJ0MyI+IFQzPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0idDIiPiBUMjwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InQ0Ij4gVDQ8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJhcHBhcnRlbWVudC1ybm92Ij4gQXBwYXJ0ZW1lbnQgciYjeEU5O25vdiYjeEU5Ozwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InQxIj4gVDE8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJsb2Z0Ij4gTG9mdDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9ImR1cGxleC10cmlwbGV4Ij4gRHVwbGV4L1RyaXBsZXg8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJ0Ni1ldC1wbHVzIj4gVDYgZXQgcGx1czwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InQ1Ij4gVDU8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJhcHBhcnRlbWVudCI+IEFwcGFydGVtZW50PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iYm94Ij4gQm94PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0icGFya2luZyI+IFBhcmtpbmc8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJzdHVkaW8iPiBTdHVkaW88L29wdGlvbj48b3B0aW9uIHZhbHVlPSIyLXBpY2VzIj4gMiBwaSYjeEU4O2Nlczwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjMtcGljZXMiPiAzIHBpJiN4RTg7Y2VzPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNC1waWNlcyI+IDQgcGkmI3hFODtjZXM8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI1LXBpY2VzLWV0LXBsdXMiPiA1IHBpJiN4RTg7Y2VzIGV0IHBsdXM8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIiPlRvdXM8L29wdGlvbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImJlZHJvb21zIiBjbGFzcz0ic2VsZWN0cGlja2VyIiBkYXRhLWxpdmUtc2VhcmNoPSJmYWxzZSIgZGF0YS1saXZlLXNlYXJjaC1zdHlsZT0iYmVnaW5zIiB0aXRsZT0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+Q2hhbWJyZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEiPjE8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIyIj4yPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMyI+Mzwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjQiPjQ8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI1Ij41PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNiI+Njwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjciPjc8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI4Ij44PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iOSI+OTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjEwIj4xMDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9ImFueSI+VG91czwvb3B0aW9uPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iYXJlYSIgY2xhc3M9InNlbGVjdHBpY2tlciIgZGF0YS1saXZlLXNlYXJjaD0iZmFsc2UiIGRhdGEtbGl2ZS1zZWFyY2gtc3R5bGU9ImJlZ2lucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+Wm9uZTwvb3B0aW9uPjxvcHRpb24gZGF0YS1wYXJlbnRjaXR5PSIiIHZhbHVlPSIxMi1lbWUiPiAxMiBlbWU8L29wdGlvbj48b3B0aW9uIGRhdGEtcGFyZW50Y2l0eT0iIiB2YWx1ZT0iMy1lbWUiPiAzIGVtZTwvb3B0aW9uPjxvcHRpb24gZGF0YS1wYXJlbnRjaXR5PSIiIHZhbHVlPSIxNi1lbWUiPiAxNiBlbWU8L29wdGlvbj48b3B0aW9uIGRhdGEtcGFyZW50Y2l0eT0iIiB2YWx1ZT0iMWVyIj4gMWVyPC9vcHRpb24+PG9wdGlvbiBkYXRhLXBhcmVudGNpdHk9IiIgdmFsdWU9IjQtZW1lIj4gNCBlbWU8L29wdGlvbj48b3B0aW9uIGRhdGEtcGFyZW50Y2l0eT0iIiB2YWx1ZT0iNi1lbWUiPiA2IGVtZTwvb3B0aW9uPjxvcHRpb24gZGF0YS1wYXJlbnRjaXR5PSIiIHZhbHVlPSI3LWVtZSI+IDcgZW1lPC9vcHRpb24+PG9wdGlvbiBkYXRhLXBhcmVudGNpdHk9IiIgdmFsdWU9IjEwLWVtZSI+IDEwIGVtZTwvb3B0aW9uPjxvcHRpb24gZGF0YS1wYXJlbnRjaXR5PSIiIHZhbHVlPSIxNC1lbWUiPiAxNCBlbWU8L29wdGlvbj48b3B0aW9uIGRhdGEtcGFyZW50Y2l0eT0iIiB2YWx1ZT0iMTctZW1lIj4gMTcgZW1lPC9vcHRpb24+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1ncm91cCBib290c3RyYXAtc2VsZWN0IHBvc3RmaXgtYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBzdHlsZT0iYm9yZGVyLWxlZnQ6MHB4O3BhZGRpbmctbGVmdDogMTBweDsiIHZhbHVlPSIiIG5hbWU9Im1pbi1hcmVhIiBwbGFjZWhvbGRlcj0iU3VyZmFjZSBNaW4gIiBkYXRhLWxpdmUtc2VhcmNoPSJmYWxzZSIgZGF0YS1saXZlLXNlYXJjaC1zdHlsZT0iYmVnaW5zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1ncm91cCBib290c3RyYXAtc2VsZWN0IHBvc3RmaXgtcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgc3R5bGU9ImJvcmRlci1sZWZ0OjBweDtwYWRkaW5nLWxlZnQ6IDEwcHg7IiB2YWx1ZT0iIiBuYW1lPSJtYXgtcHJpY2UiIHBsYWNlaG9sZGVyPSJCdWRnZXQgTWF4IiBkYXRhLWxpdmUtc2VhcmNoPSJmYWxzZSIgZGF0YS1saXZlLXNlYXJjaC1zdHlsZT0iYmVnaW5zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZHZhbmNlLWJ0bi1ob2xkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImFkdmFuY2UtYnRuIGJ0biIgdHlwZT0iYnV0dG9uIj48aSBjbGFzcz0iZmEgZmEtZ2VhciI+PC9pPiBBdmFuY8OpPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWJ0biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSI+UmVjaGVyY2hlcjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZHZhbmNlLWZpZWxkcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMyBjb2wteHMtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iYmF0aHJvb21zIiBjbGFzcz0ic2VsZWN0cGlja2VyIiBkYXRhLWxpdmUtc2VhcmNoPSJmYWxzZSIgZGF0YS1saXZlLXNlYXJjaC1zdHlsZT0iYmVnaW5zIiB0aXRsZT0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+U2FsbGUocykgZGUgYmFpbihzKTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMSI+MTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjIiPjI8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIzIj4zPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNCI+NDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjUiPjU8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI2Ij42PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNyI+Nzwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjgiPjg8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI5Ij45PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMTAiPjEwPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iYW55Ij5Ub3VzPC9vcHRpb24+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTMgY29sLXhzLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcG9zdGZpeC1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHZhbHVlPSIiIG5hbWU9Im1heC1hcmVhIiBwbGFjZWhvbGRlcj0iU3VyZmFjZSBNYXggIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMyBjb2wteHMtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHBvc3RmaXgtcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiB2YWx1ZT0iIiBuYW1lPSJtaW4tcHJpY2UiIHBsYWNlaG9sZGVyPSJCdWRnZXQgTWluIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhZHZhbmNlZC1zZWFyY2gtbW9iaWxlIGhvdXplei1hZHYtcHJpY2UtcmFuZ2UiIGRhdGEtc3RpY2t5PScwJz4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgIDxmb3JtIGF1dG9jb21wbGV0ZT0ib2ZmIiBtZXRob2Q9ImdldCIgYWN0aW9uPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hZHZhbmNlZC1zZWFyY2gvIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaW5nbGUtc2VhcmNoLXdyYXAiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaW5nbGUtc2VhcmNoLWlubmVyIGFkdmFuY2UtYnRuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InRhYmxlLWNlbGwgdGV4dC1sZWZ0IiB0eXBlPSJidXR0b24iPjxpIGNsYXNzPSJmYSBmYS1nZWFyIj48L2k+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaW5nbGUtc2VhcmNoLWlubmVyIHNpbmdsZS1zZWFyY2giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHZhbHVlPSIiIG5hbWU9ImtleXdvcmQiIHBsYWNlaG9sZGVyPSJDaGVyY2hlciB1bmUgdmlsbGUgb3UgdW4gY29kZSBwb3N0YWwgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImF1dG9fY29tcGxldGVfYWpheCIgY2xhc3M9ImF1dG8tY29tcGxldGUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2luZ2xlLXNlYXJjaC1pbm5lciBzaW5nbGUtc2VhY2gtYnRuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InRhYmxlLWNlbGwgdGV4dC1yaWdodCIgdHlwZT0ic3VibWl0Ij48aSBjbGFzcz0iZmEgZmEtc2VhcmNoIj48L2k+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGNvbC14cy0xMiBmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJzZWxlY3RwaWNrZXIiIGlkPSJzZWxlY3RlZF9zdGF0dXMiIG5hbWU9InN0YXR1cyIgZGF0YS1saXZlLXNlYXJjaD0iZmFsc2UiIGRhdGEtbGl2ZS1zZWFyY2gtc3R5bGU9ImJlZ2lucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImxvY2F0aW9uIj4gTE9DQVRJT048L29wdGlvbj48b3B0aW9uIHZhbHVlPSJ2ZW50ZSIgc2VsZWN0ZWQ9InNlbGVjdGVkIj4gVkVOVEU8L29wdGlvbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBjb2wteHMtMTIgZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0ic2VsZWN0cGlja2VyIiBuYW1lPSJ0eXBlIiBkYXRhLWxpdmUtc2VhcmNoPSJmYWxzZSIgZGF0YS1saXZlLXNlYXJjaC1zdHlsZT0iYmVnaW5zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj5UeXBlIGRlIGJpZW48L29wdGlvbj48b3B0aW9uIHZhbHVlPSJ0MyI+IFQzPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0idDIiPiBUMjwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InQ0Ij4gVDQ8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJhcHBhcnRlbWVudC1ybm92Ij4gQXBwYXJ0ZW1lbnQgciYjeEU5O25vdiYjeEU5Ozwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InQxIj4gVDE8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJsb2Z0Ij4gTG9mdDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9ImR1cGxleC10cmlwbGV4Ij4gRHVwbGV4L1RyaXBsZXg8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJ0Ni1ldC1wbHVzIj4gVDYgZXQgcGx1czwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InQ1Ij4gVDU8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJhcHBhcnRlbWVudCI+IEFwcGFydGVtZW50PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iYm94Ij4gQm94PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0icGFya2luZyI+IFBhcmtpbmc8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJzdHVkaW8iPiBTdHVkaW88L29wdGlvbj48b3B0aW9uIHZhbHVlPSIyLXBpY2VzIj4gMiBwaSYjeEU4O2Nlczwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjMtcGljZXMiPiAzIHBpJiN4RTg7Y2VzPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNC1waWNlcyI+IDQgcGkmI3hFODtjZXM8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI1LXBpY2VzLWV0LXBsdXMiPiA1IHBpJiN4RTg7Y2VzIGV0IHBsdXM8L29wdGlvbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGNvbC14cy0xMiBmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJiZWRyb29tcyIgY2xhc3M9InNlbGVjdHBpY2tlciIgZGF0YS1saXZlLXNlYXJjaD0iZmFsc2UiIGRhdGEtbGl2ZS1zZWFyY2gtc3R5bGU9ImJlZ2lucyIgdGl0bGU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPkNoYW1icmVzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxIj4xPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMiI+Mjwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjMiPjM8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI0Ij40PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNSI+NTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjYiPjY8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI3Ij43PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iOCI+ODwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjkiPjk8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIxMCI+MTA8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJhbnkiPlRvdXM8L29wdGlvbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgY29sLXhzLTEyIGZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iYXJlYSIgY2xhc3M9InNlbGVjdHBpY2tlciIgZGF0YS1saXZlLXNlYXJjaD0iZmFsc2UiIGRhdGEtbGl2ZS1zZWFyY2gtc3R5bGU9ImJlZ2lucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+Wm9uZTwvb3B0aW9uPjxvcHRpb24gZGF0YS1wYXJlbnRjaXR5PSIiIHZhbHVlPSIxMi1lbWUiPiAxMiBlbWU8L29wdGlvbj48b3B0aW9uIGRhdGEtcGFyZW50Y2l0eT0iIiB2YWx1ZT0iMy1lbWUiPiAzIGVtZTwvb3B0aW9uPjxvcHRpb24gZGF0YS1wYXJlbnRjaXR5PSIiIHZhbHVlPSIxNi1lbWUiPiAxNiBlbWU8L29wdGlvbj48b3B0aW9uIGRhdGEtcGFyZW50Y2l0eT0iIiB2YWx1ZT0iMWVyIj4gMWVyPC9vcHRpb24+PG9wdGlvbiBkYXRhLXBhcmVudGNpdHk9IiIgdmFsdWU9IjQtZW1lIj4gNCBlbWU8L29wdGlvbj48b3B0aW9uIGRhdGEtcGFyZW50Y2l0eT0iIiB2YWx1ZT0iNi1lbWUiPiA2IGVtZTwvb3B0aW9uPjxvcHRpb24gZGF0YS1wYXJlbnRjaXR5PSIiIHZhbHVlPSI3LWVtZSI+IDcgZW1lPC9vcHRpb24+PG9wdGlvbiBkYXRhLXBhcmVudGNpdHk9IiIgdmFsdWU9IjEwLWVtZSI+IDEwIGVtZTwvb3B0aW9uPjxvcHRpb24gZGF0YS1wYXJlbnRjaXR5PSIiIHZhbHVlPSIxNC1lbWUiPiAxNCBlbWU8L29wdGlvbj48b3B0aW9uIGRhdGEtcGFyZW50Y2l0eT0iIiB2YWx1ZT0iMTctZW1lIj4gMTcgZW1lPC9vcHRpb24+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiB2YWx1ZT0iIiBuYW1lPSJtaW4tYXJlYSIgcGxhY2Vob2xkZXI9IlN1cmZhY2UgTWluICAobcKyKSIgZGF0YS1saXZlLXNlYXJjaD0iZmFsc2UiIGRhdGEtbGl2ZS1zZWFyY2gtc3R5bGU9ImJlZ2lucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiB2YWx1ZT0iIiBuYW1lPSJtYXgtcHJpY2UiIHBsYWNlaG9sZGVyPSJCdWRnZXQgTWF4IiBkYXRhLWxpdmUtc2VhcmNoPSJmYWxzZSIgZGF0YS1saXZlLXNlYXJjaC1zdHlsZT0iYmVnaW5zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFkdmFuY2UtZmllbGRzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImJhdGhyb29tcyIgY2xhc3M9InNlbGVjdHBpY2tlciIgZGF0YS1saXZlLXNlYXJjaD0iZmFsc2UiIGRhdGEtbGl2ZS1zZWFyY2gtc3R5bGU9ImJlZ2lucyIgdGl0bGU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPlNhbGxlKHMpIGRlIGJhaW4ocyk8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEiPjE8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIyIj4yPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMyI+Mzwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjQiPjQ8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI1Ij41PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNiI+Njwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjciPjc8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI4Ij44PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iOSI+OTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjEwIj4xMDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9ImFueSI+VG91czwvb3B0aW9uPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgdmFsdWU9IiIgbmFtZT0ibWF4LWFyZWEiIHBsYWNlaG9sZGVyPSJTdXJmYWNlIE1heCAgKG3CsikiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHZhbHVlPSIiIG5hbWU9Im1pbi1wcmljZSIgcGxhY2Vob2xkZXI9IkJ1ZGdldCBNaW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMTBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgY29sLXhzLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkgYnRuLWJsb2NrIGhvdXplei10aGVtZS1idXR0b24iPjxpIGNsYXNzPSJmYSBmYS1zZWFyY2ggcHVsbC1sZWZ0Ij48L2k+IFJlY2hlcmNoZXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pg0KPGRpdiBpZD0ic2VjdGlvbi1ib2R5IiBjbGFzcz0iIj4NCgkJDQoNCjwhLS1zdGFydCBjb21wYXJlIHBhbmVsLS0+CjxkaXYgaWQ9ImNvbXBhcmUtY29udHJvbGxlciIgY2xhc3M9ImNvbXBhcmUtcGFuZWwiPgogICAgPGRpdiBjbGFzcz0iY29tcGFyZS1wYW5lbC1oZWFkZXIiPgogICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPiBDb21wYXJlciBsZXMgYW5ub25jZXMgPHNwYW4gY2xhc3M9InBhbmVsLWJ0bi1jbG9zZSBwdWxsLXJpZ2h0Ij48aSBjbGFzcz0iZmEgZmEtdGltZXMiPjwvaT48L3NwYW4+PC9oND4KICAgIDwvZGl2PgogICAgCiAgICAgICAgPGRpdiBpZD0iY29tcGFyZS1wcm9wZXJ0aWVzLWJhc2tldCI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CjwhLS1lbmQgY29tcGFyZSBwYW5lbC0tPgoNCgkNCgoKPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICA8ZGl2IGNsYXNzPSJwYWdlLXRpdGxlIGJyZWFkY3J1bWItdG9wIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgPG9sIGNsYXNzPSJicmVhZGNydW1iIj48bGkgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vZGF0YS12b2NhYnVsYXJ5Lm9yZy9CcmVhZGNydW1iIj48YSBpdGVtcHJvcD0idXJsIiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS8iPjxzcGFuIGl0ZW1wcm9wPSJ0aXRsZSI+QWNjdWVpbDwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9ImFjdGl2ZSI+UmVjaGVyY2hlIGF2YW5jw6llPC9saT48L29sPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhZ2UtdGl0bGUtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9InRpdGxlLWhlYWQiPlJlY2hlcmNoZSBhdmFuY8OpZTwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWdlLXRpdGxlLXJpZ2h0Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZXciPgogICAgICAgICAgICAgICAgICAgIAkJCQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzb3J0LXRhYiB0YWJsZS1jZWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyaWV6IHBhcjogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0ic29ydF9wcm9wZXJ0aWVzIiBjbGFzcz0ic2VsZWN0cGlja2VyIGJzLXNlbGVjdC1oaWRkZW4iIHRpdGxlPSIiIGRhdGEtbGl2ZS1zZWFyY2gtc3R5bGU9ImJlZ2lucyIgZGF0YS1saXZlLXNlYXJjaD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+RMOpZmF1dDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gIHZhbHVlPSJhX3ByaWNlIj5Qcml4IChjcm9pc3NhbnQpPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBzZWxlY3RlZCB2YWx1ZT0iZF9wcmljZSI+UHJpeCAoZMOpY3JvaXNzYW50KTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gIHZhbHVlPSJmZWF0dXJlZCI+RXhjbHVzaXZpdMOpPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICB2YWx1ZT0iYV9kYXRlIj5EYXRlIChjcm9pc3NhbnQpPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAgdmFsdWU9ImRfZGF0ZSI+RGF0ZSAoZMOpY3JvaXNzYW50KTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtY2VsbCBoaWRkZW4teHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlldy1idG4gYnRuLWxpc3QgIj48aSBjbGFzcz0iZmEgZmEtdGgtbGlzdCI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpZXctYnRuIGJ0bi1ncmlkICI+PGkgY2xhc3M9ImZhIGZhLXRoLWxhcmdlIj48L2k+PC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIgY29sLW1kLTEyIGNvbC1zbS0xMiBjb2wteHMtMTIgcDAiPgogICAgICAgICAgPGRpdiBpZD0iY29udGVudC1hcmVhIj4KCiAgICAgICAgICAgICAgPCEtLXN0YXJ0IGxpc3QgdGFicy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWVuZCBsaXN0IHRhYnMtLT4KCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvcGVydHktbGlzdGluZyBmdWxsLWltZy12aWV3Ij4KPGRpdiBpZD0iSUQtODQ3ODUiIGNsYXNzPSJhbmltYXRlZCBib3VuY2UgaXRlbS13cmFwIGluZm9ib3hfdHJpZ2dlciBpdGVtLTUtcGljZXMtZXQtcGx1cy1wYXJpcy0xNC1lbWUiIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9haXZvbmkvd3AtY29udGVudC9hZ2VuY2U4Mzg4NC1pbWFnZXMvMjAxOTExMTMxNzEyMzMvVkVOVEUtMzM1OTQ3MS1EQVVQSElORS1SSVZFLUdBVUNIRS1QQVJJUy02ZS1TVUQtUGFyaXMuanBnJyk7Ij4KICAgIDxkaXYgY2xhc3M9InByb3BlcnR5LWl0ZW0gdGFibGUtbGlzdCIgPgogICAgICAgICAgICA8YSBjbGFzcz0iZnVsbC1pbWctbGluayBob3Zlci1lZmZlY3QiIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL3Byb3BlcnR5LzUtcGljZXMtZXQtcGx1cy1wYXJpcy0xNC1lbWUvIj48L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZ3VyZS1ibG9jayI+CiAgICAgICAgICAgICAgICA8ZmlndXJlIGNsYXNzPSJpdGVtLXRodW1iIj4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFiZWwtd3JhcCBsYWJlbC1yaWdodCBoaWRlLW9uLWxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImxhYmVsLXN0YXR1cyBsYWJlbC1zdGF0dXMtMjEzIGxhYmVsIGxhYmVsLWRlZmF1bHQiPlZFTlRFPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYWN0aW9ucyI+CgogICAgICAgIDxsaT4KCiAgICAgICAgPHNwYW4gY2xhc3M9ImFkZF9mYXYiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLW9yaWdpbmFsLXRpdGxlPSJGYXZvcmlzIiBkYXRhLXByb3BpZD0iODQ3ODUiPjxpIGNsYXNzPSJmYSBmYS1oZWFydC1vIj48L2k+PC9zcGFuPgogICAgPC9saT4KICAgIAogICAgICAgIAogICAgICAgIDxsaT4KICAgICAgICA8c3BhbiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgdGl0bGU9Iig0KSBQaG90b3MiPgogICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2FtZXJhIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9saT4KICAgIAogICAgICAgIDxsaT4KICAgICAgICA8c3BhbiBpZD0iY29tcGFyZS1saW5rLTg0Nzg1IiBjbGFzcz0iY29tcGFyZS1wcm9wZXJ0eSIgZGF0YS1wcm9waWQ9Ijg0Nzg1IiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgdGl0bGU9IkNvbXBhcmVyIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZmlndXJlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0tYm9keSI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtLWJvZHktaW5uZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhYmVsLXdyYXAgaGlkZS1vbi1ncmlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gIGNsYXNzPSJsYWJlbC1zdGF0dXMgbGFiZWwtc3RhdHVzLTIxMyBsYWJlbCBsYWJlbC1kZWZhdWx0Ij5WRU5URTwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJwcm9wZXJ0eS10aXRsZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vcHJvcGVydHkvNS1waWNlcy1ldC1wbHVzLXBhcmlzLTE0LWVtZS8iPjUgcGkmI3hFODtjZXMgZXQgcGx1cyAmIzgyMTE7IFBhcmlzICYjODIxMTsgMTQgZW1lPC9hPjwvaDI+ICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3cgYW1lbml0aWVzIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgPHA+PHNwYW4gY2xhc3M9ImJlZCI+Q2hhbWJyZXM6IDQ8L3NwYW4+PHNwYW4gY2xhc3M9ImJhdGgiPlNhbGxlKHMpIGRlIGJhaW4ocyk6IDI8L3NwYW4+PHNwYW4gY2xhc3M9InNpemUiPlN1cmZhY2U6IDEzNSBtwrI8L3NwYW4+PC9wPiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3BlcnR5LXR5cGUiPjUgcGkmI3hFODtjZXMgZXQgcGx1czwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBkYXRlIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3AtdXNlci1hZ2VudCI+PGkgY2xhc3M9ImZhIGZhLXVzZXIiPjwvaT4gPGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vYWdlbnQvZGF1cGhpbmUtcml2ZS1nYXVjaGUtcGFyaXMtNmUtc3VkLyI+REFVUEhJTkUgUklWRSBHQVVDSEUgUEFSSVMgNmUgU1VEPC9hPiA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcm9wLWRhdGUiPjxpIGNsYXNzPSJmYSBmYS1zbGFjayI+PC9pPjMzNTk0NzE8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93IHByaWNlIj48c3BhbiBjbGFzcz0iaXRlbS1wcmljZSI+Mi4yOTUuMDAwIOKCrDwvc3Bhbj48L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogIAoKPC9kaXY+Cgo8ZGl2IGlkPSJJRC04ODM2OSIgY2xhc3M9ImFuaW1hdGVkIGJvdW5jZSBpdGVtLXdyYXAgaW5mb2JveF90cmlnZ2VyIGl0ZW0tNS1waWNlcy1ldC1wbHVzLXBhcmlzLTE3LWVtZSIgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybCgnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2Fpdm9uaS93cC1jb250ZW50L2FnZW5jZTgzODg0LWltYWdlcy8yMDIwMDMwMTIxMTAwOS9WRU5URS0zMzQxODY2LURBVVBISU5FLVJJVkUtR0FVQ0hFLVBBUklTLTdlLVBhcmlzLmpwZycpOyI+CiAgICA8ZGl2IGNsYXNzPSJwcm9wZXJ0eS1pdGVtIHRhYmxlLWxpc3QiID4KICAgICAgICAgICAgPGEgY2xhc3M9ImZ1bGwtaW1nLWxpbmsgaG92ZXItZWZmZWN0IiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9wcm9wZXJ0eS81LXBpY2VzLWV0LXBsdXMtcGFyaXMtMTctZW1lLyI+PC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWd1cmUtYmxvY2siPgogICAgICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz0iaXRlbS10aHVtYiI+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhYmVsLXdyYXAgbGFiZWwtcmlnaHQgaGlkZS1vbi1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gIGNsYXNzPSJsYWJlbC1zdGF0dXMgbGFiZWwtc3RhdHVzLTIxMyBsYWJlbCBsYWJlbC1kZWZhdWx0Ij5WRU5URTwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFjdGlvbnMiPgoKICAgICAgICA8bGk+CgogICAgICAgIDxzcGFuIGNsYXNzPSJhZGRfZmF2IiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1vcmlnaW5hbC10aXRsZT0iRmF2b3JpcyIgZGF0YS1wcm9waWQ9Ijg4MzY5Ij48aSBjbGFzcz0iZmEgZmEtaGVhcnQtbyI+PC9pPjwvc3Bhbj4KICAgIDwvbGk+CiAgICAKICAgICAgICAKICAgICAgICA8bGk+CiAgICAgICAgPHNwYW4gZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIHRpdGxlPSIoMTMpIFBob3RvcyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jYW1lcmEiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2xpPgogICAgCiAgICAgICAgPGxpPgogICAgICAgIDxzcGFuIGlkPSJjb21wYXJlLWxpbmstODgzNjkiIGNsYXNzPSJjb21wYXJlLXByb3BlcnR5IiBkYXRhLXByb3BpZD0iODgzNjkiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXBsYWNlbWVudD0idG9wIiB0aXRsZT0iQ29tcGFyZXIiPgogICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cyI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbS1ib2R5Ij4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0tYm9keS1pbm5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFiZWwtd3JhcCBoaWRlLW9uLWdyaWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImxhYmVsLXN0YXR1cyBsYWJlbC1zdGF0dXMtMjEzIGxhYmVsIGxhYmVsLWRlZmF1bHQiPlZFTlRFPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InByb3BlcnR5LXRpdGxlIj48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9wcm9wZXJ0eS81LXBpY2VzLWV0LXBsdXMtcGFyaXMtMTctZW1lLyI+NSBwaSYjeEU4O2NlcyBldCBwbHVzICYjODIxMTsgUGFyaXMgJiM4MjExOyAxNyBlbWU8L2E+PC9oMj4gICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBhbWVuaXRpZXMgaGlkZS1vbi1ncmlkIj4KICAgICAgICAgICAgICAgICAgICA8cD48c3BhbiBjbGFzcz0ic2l6ZSI+U3VyZmFjZTogMTU0IG3Csjwvc3Bhbj48L3A+ICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJvcGVydHktdHlwZSI+NSBwaSYjeEU4O2NlcyBldCBwbHVzPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93IGRhdGUgaGlkZS1vbi1ncmlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJvcC11c2VyLWFnZW50Ij48aSBjbGFzcz0iZmEgZmEtdXNlciI+PC9pPiA8YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hZ2VudC9kYXVwaGluZS1yaXZlLWdhdWNoZS1wYXJpcy03ZS8iPkRBVVBISU5FIFJJVkUgR0FVQ0hFIFBBUklTIDdlPC9hPiA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcm9wLWRhdGUiPjxpIGNsYXNzPSJmYSBmYS1zbGFjayI+PC9pPjMzNDE4NjY8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93IHByaWNlIj48c3BhbiBjbGFzcz0iaXRlbS1wcmljZSI+Mi4yNjQuMDAwIOKCrDwvc3Bhbj48L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogIAoKPC9kaXY+Cgo8ZGl2IGlkPSJJRC04NjQ5NCIgY2xhc3M9ImFuaW1hdGVkIGJvdW5jZSBpdGVtLXdyYXAgaW5mb2JveF90cmlnZ2VyIGl0ZW0tNS1waWNlcy1ldC1wbHVzLXBhcmlzLTYtZW1lIiBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3MzLmFtYXpvbmF3cy5jb20vYWl2b25pL3dwLWNvbnRlbnQvYWdlbmNlODM4ODQtaW1hZ2VzLzIwMjAwMjA0MjExMTU4L1ZFTlRFLTM1ODYyMzItREFVUEhJTkUtUklWRS1HQVVDSEUtUEFSSVMtNmUtU1VELVBhcmlzLmpwZycpOyI+CiAgICA8ZGl2IGNsYXNzPSJwcm9wZXJ0eS1pdGVtIHRhYmxlLWxpc3QiID4KICAgICAgICAgICAgPGEgY2xhc3M9ImZ1bGwtaW1nLWxpbmsgaG92ZXItZWZmZWN0IiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9wcm9wZXJ0eS81LXBpY2VzLWV0LXBsdXMtcGFyaXMtNi1lbWUtMi8iPjwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmlndXJlLWJsb2NrIj4KICAgICAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9Iml0ZW0tdGh1bWIiPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYWJlbC13cmFwIGxhYmVsLXJpZ2h0IGhpZGUtb24tbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0ibGFiZWwtc3RhdHVzIGxhYmVsLXN0YXR1cy0yMTMgbGFiZWwgbGFiZWwtZGVmYXVsdCI+VkVOVEU8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJhY3Rpb25zIj4KCiAgICAgICAgPGxpPgoKICAgICAgICA8c3BhbiBjbGFzcz0iYWRkX2ZhdiIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtb3JpZ2luYWwtdGl0bGU9IkZhdm9yaXMiIGRhdGEtcHJvcGlkPSI4NjQ5NCI+PGkgY2xhc3M9ImZhIGZhLWhlYXJ0LW8iPjwvaT48L3NwYW4+CiAgICA8L2xpPgogICAgCiAgICAgICAgCiAgICAgICAgPGxpPgogICAgICAgIDxzcGFuIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXBsYWNlbWVudD0idG9wIiB0aXRsZT0iKDE2KSBQaG90b3MiPgogICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2FtZXJhIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9saT4KICAgIAogICAgICAgIDxsaT4KICAgICAgICA8c3BhbiBpZD0iY29tcGFyZS1saW5rLTg2NDk0IiBjbGFzcz0iY29tcGFyZS1wcm9wZXJ0eSIgZGF0YS1wcm9waWQ9Ijg2NDk0IiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgdGl0bGU9IkNvbXBhcmVyIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZmlndXJlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0tYm9keSI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtLWJvZHktaW5uZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhYmVsLXdyYXAgaGlkZS1vbi1ncmlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gIGNsYXNzPSJsYWJlbC1zdGF0dXMgbGFiZWwtc3RhdHVzLTIxMyBsYWJlbCBsYWJlbC1kZWZhdWx0Ij5WRU5URTwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJwcm9wZXJ0eS10aXRsZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vcHJvcGVydHkvNS1waWNlcy1ldC1wbHVzLXBhcmlzLTYtZW1lLTIvIj41IHBpJiN4RTg7Y2VzIGV0IHBsdXMgJiM4MjExOyBQYXJpcyAmIzgyMTE7IDYgZW1lPC9hPjwvaDI+ICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3cgYW1lbml0aWVzIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgPHA+PHNwYW4gY2xhc3M9ImJlZCI+Q2hhbWJyZXM6IDM8L3NwYW4+PHNwYW4gY2xhc3M9ImJhdGgiPlNhbGxlKHMpIGRlIGJhaW4ocyk6IDI8L3NwYW4+PHNwYW4gY2xhc3M9InNpemUiPlN1cmZhY2U6IDEzNCBtwrI8L3NwYW4+PC9wPiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3BlcnR5LXR5cGUiPjUgcGkmI3hFODtjZXMgZXQgcGx1czwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBkYXRlIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3AtdXNlci1hZ2VudCI+PGkgY2xhc3M9ImZhIGZhLXVzZXIiPjwvaT4gPGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vYWdlbnQvZGF1cGhpbmUtcml2ZS1nYXVjaGUtcGFyaXMtNmUtc3VkLyI+REFVUEhJTkUgUklWRSBHQVVDSEUgUEFSSVMgNmUgU1VEPC9hPiA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcm9wLWRhdGUiPjxpIGNsYXNzPSJmYSBmYS1zbGFjayI+PC9pPjM1ODYyMzI8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93IHByaWNlIj48c3BhbiBjbGFzcz0iaXRlbS1wcmljZSI+MS45NzYuMDAwIOKCrDwvc3Bhbj48L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogIAoKPC9kaXY+Cgo8ZGl2IGlkPSJJRC04ODYwMSIgY2xhc3M9ImFuaW1hdGVkIGJvdW5jZSBpdGVtLXdyYXAgaW5mb2JveF90cmlnZ2VyIGl0ZW0tNS1waWNlcy1ldC1wbHVzLXBhcmlzLTYtZW1lIiBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3MzLmFtYXpvbmF3cy5jb20vYWl2b25pL3dwLWNvbnRlbnQvYWdlbmNlODM4ODQtaW1hZ2VzLzIwMjAwMzEzMjExMDUzL1ZFTlRFLTM3NzE2OTYtREFVUEhJTkUtUklWRS1HQVVDSEUtUEFSSVMtNmUtU1VELVBhcmlzLmpwZycpOyI+CiAgICA8ZGl2IGNsYXNzPSJwcm9wZXJ0eS1pdGVtIHRhYmxlLWxpc3QiID4KICAgICAgICAgICAgPGEgY2xhc3M9ImZ1bGwtaW1nLWxpbmsgaG92ZXItZWZmZWN0IiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9wcm9wZXJ0eS81LXBpY2VzLWV0LXBsdXMtcGFyaXMtNi1lbWUtMy8iPjwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmlndXJlLWJsb2NrIj4KICAgICAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9Iml0ZW0tdGh1bWIiPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYWJlbC13cmFwIGxhYmVsLXJpZ2h0IGhpZGUtb24tbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0ibGFiZWwtc3RhdHVzIGxhYmVsLXN0YXR1cy0yMTMgbGFiZWwgbGFiZWwtZGVmYXVsdCI+VkVOVEU8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJhY3Rpb25zIj4KCiAgICAgICAgPGxpPgoKICAgICAgICA8c3BhbiBjbGFzcz0iYWRkX2ZhdiIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtb3JpZ2luYWwtdGl0bGU9IkZhdm9yaXMiIGRhdGEtcHJvcGlkPSI4ODYwMSI+PGkgY2xhc3M9ImZhIGZhLWhlYXJ0LW8iPjwvaT48L3NwYW4+CiAgICA8L2xpPgogICAgCiAgICAgICAgCiAgICAgICAgPGxpPgogICAgICAgIDxzcGFuIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXBsYWNlbWVudD0idG9wIiB0aXRsZT0iKDcpIFBob3RvcyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jYW1lcmEiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2xpPgogICAgCiAgICAgICAgPGxpPgogICAgICAgIDxzcGFuIGlkPSJjb21wYXJlLWxpbmstODg2MDEiIGNsYXNzPSJjb21wYXJlLXByb3BlcnR5IiBkYXRhLXByb3BpZD0iODg2MDEiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXBsYWNlbWVudD0idG9wIiB0aXRsZT0iQ29tcGFyZXIiPgogICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cyI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbS1ib2R5Ij4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0tYm9keS1pbm5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFiZWwtd3JhcCBoaWRlLW9uLWdyaWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImxhYmVsLXN0YXR1cyBsYWJlbC1zdGF0dXMtMjEzIGxhYmVsIGxhYmVsLWRlZmF1bHQiPlZFTlRFPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InByb3BlcnR5LXRpdGxlIj48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9wcm9wZXJ0eS81LXBpY2VzLWV0LXBsdXMtcGFyaXMtNi1lbWUtMy8iPjUgcGkmI3hFODtjZXMgZXQgcGx1cyAmIzgyMTE7IFBhcmlzICYjODIxMTsgNiBlbWU8L2E+PC9oMj4gICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBhbWVuaXRpZXMgaGlkZS1vbi1ncmlkIj4KICAgICAgICAgICAgICAgICAgICA8cD48c3BhbiBjbGFzcz0iYmVkIj5DaGFtYnJlczogMzwvc3Bhbj48c3BhbiBjbGFzcz0iYmF0aCI+U2FsbGUocykgZGUgYmFpbihzKTogMjwvc3Bhbj48c3BhbiBjbGFzcz0ic2l6ZSI+U3VyZmFjZTogOTQgbcKyPC9zcGFuPjwvcD4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcm9wZXJ0eS10eXBlIj41IHBpJiN4RTg7Y2VzIGV0IHBsdXM8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3cgZGF0ZSBoaWRlLW9uLWdyaWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcm9wLXVzZXItYWdlbnQiPjxpIGNsYXNzPSJmYSBmYS11c2VyIj48L2k+IDxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2FnZW50L2RhdXBoaW5lLXJpdmUtZ2F1Y2hlLXBhcmlzLTZlLXN1ZC8iPkRBVVBISU5FIFJJVkUgR0FVQ0hFIFBBUklTIDZlIFNVRDwvYT4gPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJvcC1kYXRlIj48aSBjbGFzcz0iZmEgZmEtc2xhY2siPjwvaT4zNzcxNjk2PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBwcmljZSI+PHNwYW4gY2xhc3M9Iml0ZW0tcHJpY2UiPjEuODkwLjAwMCDigqw8L3NwYW4+PC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAKCjwvZGl2PgoKPGRpdiBpZD0iSUQtODQ2ODYiIGNsYXNzPSJhbmltYXRlZCBib3VuY2UgaXRlbS13cmFwIGluZm9ib3hfdHJpZ2dlciBpdGVtLTQtcGljZXMtcGFyaXMtNy1lbWUiIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9haXZvbmkvd3AtY29udGVudC9hZ2VuY2U4Mzg4NC1pbWFnZXMvMjAxOTEyMDkxNDU3MTkvVkVOVEUtMzMzODU0MC1EQVVQSElORS1SSVZFLUdBVUNIRS1QQVJJUy03ZS1QYXJpcy5qcGcnKTsiPgogICAgPGRpdiBjbGFzcz0icHJvcGVydHktaXRlbSB0YWJsZS1saXN0IiA+CiAgICAgICAgICAgIDxhIGNsYXNzPSJmdWxsLWltZy1saW5rIGhvdmVyLWVmZmVjdCIgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vcHJvcGVydHkvNC1waWNlcy1wYXJpcy03LWVtZS8iPjwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmlndXJlLWJsb2NrIj4KICAgICAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9Iml0ZW0tdGh1bWIiPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYWJlbC13cmFwIGxhYmVsLXJpZ2h0IGhpZGUtb24tbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0ibGFiZWwtc3RhdHVzIGxhYmVsLXN0YXR1cy0yMTMgbGFiZWwgbGFiZWwtZGVmYXVsdCI+VkVOVEU8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJhY3Rpb25zIj4KCiAgICAgICAgPGxpPgoKICAgICAgICA8c3BhbiBjbGFzcz0iYWRkX2ZhdiIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtb3JpZ2luYWwtdGl0bGU9IkZhdm9yaXMiIGRhdGEtcHJvcGlkPSI4NDY4NiI+PGkgY2xhc3M9ImZhIGZhLWhlYXJ0LW8iPjwvaT48L3NwYW4+CiAgICA8L2xpPgogICAgCiAgICAgICAgCiAgICAgICAgPGxpPgogICAgICAgIDxzcGFuIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXBsYWNlbWVudD0idG9wIiB0aXRsZT0iKDgpIFBob3RvcyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jYW1lcmEiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2xpPgogICAgCiAgICAgICAgPGxpPgogICAgICAgIDxzcGFuIGlkPSJjb21wYXJlLWxpbmstODQ2ODYiIGNsYXNzPSJjb21wYXJlLXByb3BlcnR5IiBkYXRhLXByb3BpZD0iODQ2ODYiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXBsYWNlbWVudD0idG9wIiB0aXRsZT0iQ29tcGFyZXIiPgogICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cyI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbS1ib2R5Ij4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0tYm9keS1pbm5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFiZWwtd3JhcCBoaWRlLW9uLWdyaWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImxhYmVsLXN0YXR1cyBsYWJlbC1zdGF0dXMtMjEzIGxhYmVsIGxhYmVsLWRlZmF1bHQiPlZFTlRFPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InByb3BlcnR5LXRpdGxlIj48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9wcm9wZXJ0eS80LXBpY2VzLXBhcmlzLTctZW1lLyI+NCBwaSYjeEU4O2NlcyAmIzgyMTE7IFBhcmlzICYjODIxMTsgNyBlbWU8L2E+PC9oMj4gICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBhbWVuaXRpZXMgaGlkZS1vbi1ncmlkIj4KICAgICAgICAgICAgICAgICAgICA8cD48c3BhbiBjbGFzcz0iYmVkIj5DaGFtYnJlczogMjwvc3Bhbj48c3BhbiBjbGFzcz0ic2l6ZSI+U3VyZmFjZTogNjggbcKyPC9zcGFuPjwvcD4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcm9wZXJ0eS10eXBlIj40IHBpJiN4RTg7Y2VzPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93IGRhdGUgaGlkZS1vbi1ncmlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJvcC11c2VyLWFnZW50Ij48aSBjbGFzcz0iZmEgZmEtdXNlciI+PC9pPiA8YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hZ2VudC9kYXVwaGluZS1yaXZlLWdhdWNoZS1wYXJpcy03ZS8iPkRBVVBISU5FIFJJVkUgR0FVQ0hFIFBBUklTIDdlPC9hPiA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcm9wLWRhdGUiPjxpIGNsYXNzPSJmYSBmYS1zbGFjayI+PC9pPjMzMzg1NDA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93IHByaWNlIj48c3BhbiBjbGFzcz0iaXRlbS1wcmljZSI+MS4zNjUuMDAwIOKCrDwvc3Bhbj48L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogIAoKPC9kaXY+Cgo8ZGl2IGlkPSJJRC04ODQwNiIgY2xhc3M9ImFuaW1hdGVkIGJvdW5jZSBpdGVtLXdyYXAgaW5mb2JveF90cmlnZ2VyIGl0ZW0tMy1waWNlcy1wYXJpcy02LWVtZSIgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybCgnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2Fpdm9uaS93cC1jb250ZW50L2FnZW5jZTgzODg0LWltYWdlcy8yMDIwMDMwNjIxMDcyMy9WRU5URS0zNzA2NDY0LURBVVBISU5FLVJJVkUtR0FVQ0hFLVBBUklTLTdlLVBhcmlzLmpwZycpOyI+CiAgICA8ZGl2IGNsYXNzPSJwcm9wZXJ0eS1pdGVtIHRhYmxlLWxpc3QiID4KICAgICAgICAgICAgPGEgY2xhc3M9ImZ1bGwtaW1nLWxpbmsgaG92ZXItZWZmZWN0IiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9wcm9wZXJ0eS8zLXBpY2VzLXBhcmlzLTYtZW1lLTIvIj48L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZ3VyZS1ibG9jayI+CiAgICAgICAgICAgICAgICA8ZmlndXJlIGNsYXNzPSJpdGVtLXRodW1iIj4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFiZWwtd3JhcCBsYWJlbC1yaWdodCBoaWRlLW9uLWxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImxhYmVsLXN0YXR1cyBsYWJlbC1zdGF0dXMtMjEzIGxhYmVsIGxhYmVsLWRlZmF1bHQiPlZFTlRFPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYWN0aW9ucyI+CgogICAgICAgIDxsaT4KCiAgICAgICAgPHNwYW4gY2xhc3M9ImFkZF9mYXYiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLW9yaWdpbmFsLXRpdGxlPSJGYXZvcmlzIiBkYXRhLXByb3BpZD0iODg0MDYiPjxpIGNsYXNzPSJmYSBmYS1oZWFydC1vIj48L2k+PC9zcGFuPgogICAgPC9saT4KICAgIAogICAgICAgIAogICAgICAgIDxsaT4KICAgICAgICA8c3BhbiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgdGl0bGU9IigxMSkgUGhvdG9zIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNhbWVyYSI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvbGk+CiAgICAKICAgICAgICA8bGk+CiAgICAgICAgPHNwYW4gaWQ9ImNvbXBhcmUtbGluay04ODQwNiIgY2xhc3M9ImNvbXBhcmUtcHJvcGVydHkiIGRhdGEtcHJvcGlkPSI4ODQwNiIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIHRpdGxlPSJDb21wYXJlciI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtLWJvZHkiPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbS1ib2R5LWlubmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYWJlbC13cmFwIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0ibGFiZWwtc3RhdHVzIGxhYmVsLXN0YXR1cy0yMTMgbGFiZWwgbGFiZWwtZGVmYXVsdCI+VkVOVEU8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0icHJvcGVydHktdGl0bGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL3Byb3BlcnR5LzMtcGljZXMtcGFyaXMtNi1lbWUtMi8iPjMgcGkmI3hFODtjZXMgJiM4MjExOyBQYXJpcyAmIzgyMTE7IDYgZW1lPC9hPjwvaDI+ICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3cgYW1lbml0aWVzIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgPHA+PHNwYW4gY2xhc3M9ImJlZCI+Q2hhbWJyZXM6IDI8L3NwYW4+PHNwYW4gY2xhc3M9InNpemUiPlN1cmZhY2U6IDcxIG3Csjwvc3Bhbj48L3A+ICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJvcGVydHktdHlwZSI+MyBwaSYjeEU4O2NlczwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBkYXRlIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3AtdXNlci1hZ2VudCI+PGkgY2xhc3M9ImZhIGZhLXVzZXIiPjwvaT4gPGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vYWdlbnQvZGF1cGhpbmUtcml2ZS1nYXVjaGUtcGFyaXMtN2UvIj5EQVVQSElORSBSSVZFIEdBVUNIRSBQQVJJUyA3ZTwvYT4gPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJvcC1kYXRlIj48aSBjbGFzcz0iZmEgZmEtc2xhY2siPjwvaT4zNzA2NDY0PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBwcmljZSI+PHNwYW4gY2xhc3M9Iml0ZW0tcHJpY2UiPjEuMjYwLjAwMCDigqw8L3NwYW4+PC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAKCjwvZGl2PgoKPGRpdiBpZD0iSUQtODg0MzciIGNsYXNzPSJhbmltYXRlZCBib3VuY2UgaXRlbS13cmFwIGluZm9ib3hfdHJpZ2dlciBpdGVtLTMtcGljZXMtcGFyaXMtNi1lbWUiIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9haXZvbmkvd3AtY29udGVudC9hZ2VuY2U4Mzg4NC1pbWFnZXMvMjAyMDAzMDgyMTEwNTYvVkVOVEUtMzcwODU0MS1EQVVQSElORS1SSVZFLUdBVUNIRS1QQVJJUy03ZS1QYXJpcy5qcGcnKTsiPgogICAgPGRpdiBjbGFzcz0icHJvcGVydHktaXRlbSB0YWJsZS1saXN0IiA+CiAgICAgICAgICAgIDxhIGNsYXNzPSJmdWxsLWltZy1saW5rIGhvdmVyLWVmZmVjdCIgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vcHJvcGVydHkvMy1waWNlcy1wYXJpcy02LWVtZS00LyI+PC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWd1cmUtYmxvY2siPgogICAgICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz0iaXRlbS10aHVtYiI+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhYmVsLXdyYXAgbGFiZWwtcmlnaHQgaGlkZS1vbi1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gIGNsYXNzPSJsYWJlbC1zdGF0dXMgbGFiZWwtc3RhdHVzLTIxMyBsYWJlbCBsYWJlbC1kZWZhdWx0Ij5WRU5URTwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFjdGlvbnMiPgoKICAgICAgICA8bGk+CgogICAgICAgIDxzcGFuIGNsYXNzPSJhZGRfZmF2IiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1vcmlnaW5hbC10aXRsZT0iRmF2b3JpcyIgZGF0YS1wcm9waWQ9Ijg4NDM3Ij48aSBjbGFzcz0iZmEgZmEtaGVhcnQtbyI+PC9pPjwvc3Bhbj4KICAgIDwvbGk+CiAgICAKICAgICAgICAKICAgICAgICA8bGk+CiAgICAgICAgPHNwYW4gZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIHRpdGxlPSIoMTQpIFBob3RvcyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jYW1lcmEiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2xpPgogICAgCiAgICAgICAgPGxpPgogICAgICAgIDxzcGFuIGlkPSJjb21wYXJlLWxpbmstODg0MzciIGNsYXNzPSJjb21wYXJlLXByb3BlcnR5IiBkYXRhLXByb3BpZD0iODg0MzciIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXBsYWNlbWVudD0idG9wIiB0aXRsZT0iQ29tcGFyZXIiPgogICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cyI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbS1ib2R5Ij4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0tYm9keS1pbm5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFiZWwtd3JhcCBoaWRlLW9uLWdyaWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImxhYmVsLXN0YXR1cyBsYWJlbC1zdGF0dXMtMjEzIGxhYmVsIGxhYmVsLWRlZmF1bHQiPlZFTlRFPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InByb3BlcnR5LXRpdGxlIj48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9wcm9wZXJ0eS8zLXBpY2VzLXBhcmlzLTYtZW1lLTQvIj4zIHBpJiN4RTg7Y2VzICYjODIxMTsgUGFyaXMgJiM4MjExOyA2IGVtZTwvYT48L2gyPiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93IGFtZW5pdGllcyBoaWRlLW9uLWdyaWQiPgogICAgICAgICAgICAgICAgICAgIDxwPjxzcGFuIGNsYXNzPSJzaXplIj5TdXJmYWNlOiA1OCBtwrI8L3NwYW4+PC9wPiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3BlcnR5LXR5cGUiPjMgcGkmI3hFODtjZXM8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3cgZGF0ZSBoaWRlLW9uLWdyaWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcm9wLXVzZXItYWdlbnQiPjxpIGNsYXNzPSJmYSBmYS11c2VyIj48L2k+IDxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2FnZW50L2RhdXBoaW5lLXJpdmUtZ2F1Y2hlLXBhcmlzLTdlLyI+REFVUEhJTkUgUklWRSBHQVVDSEUgUEFSSVMgN2U8L2E+IDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3AtZGF0ZSI+PGkgY2xhc3M9ImZhIGZhLXNsYWNrIj48L2k+MzcwODU0MTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3cgcHJpY2UiPjxzcGFuIGNsYXNzPSJpdGVtLXByaWNlIj4xLjA1OC4wMDAg4oKsPC9zcGFuPjwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgCgo8L2Rpdj4KCjxkaXYgaWQ9IklELTg4NjU4IiBjbGFzcz0iYW5pbWF0ZWQgYm91bmNlIGl0ZW0td3JhcCBpbmZvYm94X3RyaWdnZXIgaXRlbS0yLXBpY2VzLXBhcmlzLTYtZW1lIiBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3MzLmFtYXpvbmF3cy5jb20vYWl2b25pL3dwLWNvbnRlbnQvYWdlbmNlODM4ODQtaW1hZ2VzLzIwMjAwMzIxMjEwNjQxL1ZFTlRFLTM3MDYxNTUtREFVUEhJTkUtUklWRS1HQVVDSEUtUEFSSVMtNmUtTk9SRC1QYXJpcy5qcGcnKTsiPgogICAgPGRpdiBjbGFzcz0icHJvcGVydHktaXRlbSB0YWJsZS1saXN0IiA+CiAgICAgICAgICAgIDxhIGNsYXNzPSJmdWxsLWltZy1saW5rIGhvdmVyLWVmZmVjdCIgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vcHJvcGVydHkvMi1waWNlcy1wYXJpcy02LWVtZS01LyI+PC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWd1cmUtYmxvY2siPgogICAgICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz0iaXRlbS10aHVtYiI+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhYmVsLXdyYXAgbGFiZWwtcmlnaHQgaGlkZS1vbi1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gIGNsYXNzPSJsYWJlbC1zdGF0dXMgbGFiZWwtc3RhdHVzLTIxMyBsYWJlbCBsYWJlbC1kZWZhdWx0Ij5WRU5URTwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFjdGlvbnMiPgoKICAgICAgICA8bGk+CgogICAgICAgIDxzcGFuIGNsYXNzPSJhZGRfZmF2IiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1vcmlnaW5hbC10aXRsZT0iRmF2b3JpcyIgZGF0YS1wcm9waWQ9Ijg4NjU4Ij48aSBjbGFzcz0iZmEgZmEtaGVhcnQtbyI+PC9pPjwvc3Bhbj4KICAgIDwvbGk+CiAgICAKICAgICAgICAKICAgICAgICA8bGk+CiAgICAgICAgPHNwYW4gZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIHRpdGxlPSIoOCkgUGhvdG9zIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNhbWVyYSI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvbGk+CiAgICAKICAgICAgICA8bGk+CiAgICAgICAgPHNwYW4gaWQ9ImNvbXBhcmUtbGluay04ODY1OCIgY2xhc3M9ImNvbXBhcmUtcHJvcGVydHkiIGRhdGEtcHJvcGlkPSI4ODY1OCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIHRpdGxlPSJDb21wYXJlciI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtLWJvZHkiPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbS1ib2R5LWlubmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYWJlbC13cmFwIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0ibGFiZWwtc3RhdHVzIGxhYmVsLXN0YXR1cy0yMTMgbGFiZWwgbGFiZWwtZGVmYXVsdCI+VkVOVEU8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0icHJvcGVydHktdGl0bGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL3Byb3BlcnR5LzItcGljZXMtcGFyaXMtNi1lbWUtNS8iPjIgcGkmI3hFODtjZXMgJiM4MjExOyBQYXJpcyAmIzgyMTE7IDYgZW1lPC9hPjwvaDI+ICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3cgYW1lbml0aWVzIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgPHA+PHNwYW4gY2xhc3M9ImJlZCI+Q2hhbWJyZXM6IDE8L3NwYW4+PHNwYW4gY2xhc3M9ImJhdGgiPlNhbGxlKHMpIGRlIGJhaW4ocyk6IDE8L3NwYW4+PHNwYW4gY2xhc3M9InNpemUiPlN1cmZhY2U6IDUyIG3Csjwvc3Bhbj48L3A+ICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJvcGVydHktdHlwZSI+MiBwaSYjeEU4O2NlczwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBkYXRlIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3AtdXNlci1hZ2VudCI+PGkgY2xhc3M9ImZhIGZhLXVzZXIiPjwvaT4gPGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vYWdlbnQvZGF1cGhpbmUtcml2ZS1nYXVjaGUtcGFyaXMtNmUtbm9yZC8iPkRBVVBISU5FIFJJVkUgR0FVQ0hFIFBBUklTIDZlIE5PUkQ8L2E+IDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3AtZGF0ZSI+PGkgY2xhc3M9ImZhIGZhLXNsYWNrIj48L2k+MzcwNjE1NTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3cgcHJpY2UiPjxzcGFuIGNsYXNzPSJpdGVtLXByaWNlIj45ODUuMDAwIOKCrDwvc3Bhbj48L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogIAoKPC9kaXY+Cgo8ZGl2IGlkPSJJRC04NDQxNyIgY2xhc3M9ImFuaW1hdGVkIGJvdW5jZSBpdGVtLXdyYXAgaW5mb2JveF90cmlnZ2VyIGl0ZW0tc3R1ZGlvLXBhcmlzLTYtZW1lIiBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3MzLmFtYXpvbmF3cy5jb20vYWl2b25pL3dwLWNvbnRlbnQvYWdlbmNlODM4ODQtaW1hZ2VzLzIwMTkxMTEzMTcwMjU4L1ZFTlRFLTMzNTY0MjMtREFVUEhJTkUtUklWRS1HQVVDSEUtUEFSSVMtNmUtTk9SRC1QYXJpcy5qcGcnKTsiPgogICAgPGRpdiBjbGFzcz0icHJvcGVydHktaXRlbSB0YWJsZS1saXN0IiA+CiAgICAgICAgICAgIDxhIGNsYXNzPSJmdWxsLWltZy1saW5rIGhvdmVyLWVmZmVjdCIgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vcHJvcGVydHkvc3R1ZGlvLXBhcmlzLTYtZW1lLTIvIj48L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZ3VyZS1ibG9jayI+CiAgICAgICAgICAgICAgICA8ZmlndXJlIGNsYXNzPSJpdGVtLXRodW1iIj4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFiZWwtd3JhcCBsYWJlbC1yaWdodCBoaWRlLW9uLWxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImxhYmVsLXN0YXR1cyBsYWJlbC1zdGF0dXMtMjEzIGxhYmVsIGxhYmVsLWRlZmF1bHQiPlZFTlRFPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYWN0aW9ucyI+CgogICAgICAgIDxsaT4KCiAgICAgICAgPHNwYW4gY2xhc3M9ImFkZF9mYXYiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLW9yaWdpbmFsLXRpdGxlPSJGYXZvcmlzIiBkYXRhLXByb3BpZD0iODQ0MTciPjxpIGNsYXNzPSJmYSBmYS1oZWFydC1vIj48L2k+PC9zcGFuPgogICAgPC9saT4KICAgIAogICAgICAgIAogICAgICAgIDxsaT4KICAgICAgICA8c3BhbiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgdGl0bGU9IigxNykgUGhvdG9zIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNhbWVyYSI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvbGk+CiAgICAKICAgICAgICA8bGk+CiAgICAgICAgPHNwYW4gaWQ9ImNvbXBhcmUtbGluay04NDQxNyIgY2xhc3M9ImNvbXBhcmUtcHJvcGVydHkiIGRhdGEtcHJvcGlkPSI4NDQxNyIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIHRpdGxlPSJDb21wYXJlciI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtLWJvZHkiPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbS1ib2R5LWlubmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYWJlbC13cmFwIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0ibGFiZWwtc3RhdHVzIGxhYmVsLXN0YXR1cy0yMTMgbGFiZWwgbGFiZWwtZGVmYXVsdCI+VkVOVEU8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0icHJvcGVydHktdGl0bGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL3Byb3BlcnR5L3N0dWRpby1wYXJpcy02LWVtZS0yLyI+U3R1ZGlvICYjODIxMTsgUGFyaXMgJiM4MjExOyA2IGVtZTwvYT48L2gyPiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm8tcm93IGFtZW5pdGllcyBoaWRlLW9uLWdyaWQiPgogICAgICAgICAgICAgICAgICAgIDxwPjxzcGFuIGNsYXNzPSJzaXplIj5TdXJmYWNlOiAzMSBtwrI8L3NwYW4+PC9wPiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3BlcnR5LXR5cGUiPlN0dWRpbzwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvLXJvdyBkYXRlIGhpZGUtb24tZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3AtdXNlci1hZ2VudCI+PGkgY2xhc3M9ImZhIGZhLXVzZXIiPjwvaT4gPGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vYWdlbnQvZGF1cGhpbmUtcml2ZS1nYXVjaGUtcGFyaXMtNmUtbm9yZC8iPkRBVVBISU5FIFJJVkUgR0FVQ0hFIFBBUklTIDZlIE5PUkQ8L2E+IDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByb3AtZGF0ZSI+PGkgY2xhc3M9ImZhIGZhLXNsYWNrIj48L2k+MzM1NjQyMzwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1yb3cgcHJpY2UiPjxzcGFuIGNsYXNzPSJpdGVtLXByaWNlIj45NDcuMDAwIOKCrDwvc3Bhbj48L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogIAoKPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBFbiBvZiBwcm9wZXJ0aWVzIGNvbnRlbnQgLS0+CgogICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1zdGFydCBQYWdpbmF0aW9uLS0+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFnaW5hdGlvbi1tYWluICI+PHVsIGNsYXNzPSJwYWdpbmF0aW9uIj48bGkgY2xhc3M9ImRpc2FibGVkIj48YSBhcmlhLWxhYmVsPSJQcmV2aW91cyI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPjxpIGNsYXNzPSJmYSBmYS1hbmdsZS1sZWZ0Ij48L2k+PC9zcGFuPjwvYT48L2xpPjxsaSBjbGFzcz0iYWN0aXZlIj48YSBkYXRhLWhvdXplcGFnaT0iMSIgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vYWR2YW5jZWQtc2VhcmNoLz90eXBlJiMwMzg7bWF4LXByaWNlJiMwMzg7c3RhdHVzPXZlbnRlJiMwMzg7bG9jYXRpb24mIzAzODtiYXRocm9vbXMmIzAzODttaW4tYXJlYSYjMDM4O21heC1hcmVhJiMwMzg7bWluLXByaWNlJiMwMzg7cHJvcGVydHlfaWQiPjEgPHNwYW4gY2xhc3M9InNyLW9ubHkiPjwvc3Bhbj48L2E+PC9saT48bGk+PGEgZGF0YS1ob3V6ZXBhZ2k9IjIiIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2FkdmFuY2VkLXNlYXJjaC9wYWdlLzIvP3R5cGUmIzAzODttYXgtcHJpY2UmIzAzODtzdGF0dXM9dmVudGUmIzAzODtsb2NhdGlvbiYjMDM4O2JhdGhyb29tcyYjMDM4O21pbi1hcmVhJiMwMzg7bWF4LWFyZWEmIzAzODttaW4tcHJpY2UmIzAzODtwcm9wZXJ0eV9pZCI+MjwvYT48L2xpPjxsaT48YSBkYXRhLWhvdXplcGFnaT0iMiIgcmVsPSJOZXh0IiBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hZHZhbmNlZC1zZWFyY2gvcGFnZS8yLz90eXBlJiMwMzg7bWF4LXByaWNlJiMwMzg7c3RhdHVzPXZlbnRlJiMwMzg7bG9jYXRpb24mIzAzODtiYXRocm9vbXMmIzAzODttaW4tYXJlYSYjMDM4O21heC1hcmVhJiMwMzg7bWluLXByaWNlJiMwMzg7cHJvcGVydHlfaWQiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj48aSBjbGFzcz0iZmEgZmEtYW5nbGUtcmlnaHQiPjwvaT48L3NwYW4+PC9hPjwvbGk+PC91bD48L2Rpdj4gICAgICAgICAgICAgIDwhLS1zdGFydCBQYWdpbmF0aW9uLS0+CgogICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PjwhLS0gZW5kIGNvbnRhaW5lci1jb250ZW50IC0tPgoKICA8L2Rpdj4KPC9kaXY+CgoNCg0KICAgICAgICA8L2Rpdj4gPCEtLS5jb250YWluZXIgU3RhcnQgaW4gaGVhZGVyLS0+DQogICAgPC9kaXY+IDwhLS1TdGFydCBpbiBoZWFkZXIgZW5kICNzZWN0aW9uLWJvZHktLT4NCg0KPGJ1dHRvbiBjbGFzcz0ic2Nyb2xsdG9wLWJ0biBiYWNrLXRvcCI+PGkgY2xhc3M9ImZhIGZhLWFuZ2xlLXVwIj48L2k+PC9idXR0b24+Cg0KPCEtLXN0YXJ0IGZvb3RlciBzZWN0aW9uLS0+DQo8Zm9vdGVyIGlkPSJmb290ZXItc2VjdGlvbiI+DQogICAgDQogICAgDQogICAgPGRpdiBjbGFzcz0iZm9vdGVyLWJvdHRvbSI+DQoNCiAgICAJPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS0zIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWNvbCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8cD5EYXVwaGluZSBSaXZlIEdhdWNoZSAgLSBUb3VzIGRyb2l0cyByw6lzZXJ2w6lzPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWNvbCBmb290LXNvY2lhbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBjb2wtc20tNiI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1jb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2aSI+DQoJICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGlkPSJmb290ZXItbWVudSIgY2xhc3M9IiI+PGxpIGlkPSJtZW51LWl0ZW0tOTA0MCIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIG1lbnUtaXRlbS05MDQwIj48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hY2hldGVyLyI+QWNoZXRlcjwvYT48L2xpPgo8bGkgaWQ9Im1lbnUtaXRlbS02NjczNyIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIG1lbnUtaXRlbS02NjczNyI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vbG91ZXIvIj5Mb3VlcjwvYT48L2xpPgo8bGkgaWQ9Im1lbnUtaXRlbS03NTM5MiIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIG1lbnUtaXRlbS03NTM5MiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vbm9zLWFnZW5jZXMvIj5Ob3MgQWdlbmNlczwvYT48L2xpPgo8bGkgaWQ9Im1lbnUtaXRlbS05MDQzIiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLTkwNDMiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2VzdGltZXotdm90cmUtYmllbi8iPkVzdGltZXogdm90cmUgYmllbjwvYT48L2xpPgo8bGkgaWQ9Im1lbnUtaXRlbS05MDQ2IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLTkwNDYiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2NvbnRhY3QvIj5Db250YWN0PC9hPjwvbGk+CjxsaSBpZD0ibWVudS1pdGVtLTkwNDUiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBtZW51LWl0ZW0tOTA0NSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vbWVudGlvbnNsZWdhbGVzLyI+TWVudGlvbnMgTMOpZ2FsZXM8L2E+PC9saT4KPGxpIGlkPSJtZW51LWl0ZW0tODU5OTUiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtY3VzdG9tIG1lbnUtaXRlbS1vYmplY3QtY3VzdG9tIG1lbnUtaXRlbS04NTk5NSI+PGEgaHJlZj0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2Fpdm9uaS93cC1jb250ZW50L2FnZW5jZTgzODg0LWltYWdlcy8yMDE5MTEyNjE1NDIwOS9iYXJlJUNDJTgybWUtaG9ub3JhaXJlcy0yMDE5LWNvbnZlcnRpLnBkZiI+QmFyw6htZSBob25vcmFpcmVzPC9hPjwvbGk+CjxsaSBpZD0ibWVudS1pdGVtLTcwNzI0IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgbWVudS1pdGVtLTcwNzI0Ij48YSBocmVmPSJodHRwczovL3d3dy5kYXVwaGluZS1pbW1vLmNvbS9hY2Nlcy12b3MtZG9ubmVlcy1wZXJzb25uZWxsZXMvIj5BY2PDqHMgw6Agdm9zIGRvbm7DqWVzIHBlcnNvbm5lbGxlczwvYT48L2xpPgo8bGkgaWQ9Im1lbnUtaXRlbS03MDcyNSIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIG1lbnUtaXRlbS03MDcyNSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vY29va2llcy8iPkNvb2tpZXM8L2E+PC9saT4KPC91bD4NCgkJCQkJCTwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWFpdm9uaSBuYXZpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRvcCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGUgcsOpYWxpc8OpIHBhciA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2Fpdm9uaV8vIiB0YXJnZXQ9Il9ibGFuayI+QWlWT05pPC9hPi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYm90dG9tIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZXMgLyByw6lmw6lyZW5jZW1lbnQgLyBzZXJ2aWNlcyBpbmZvcm1hdGlxdWVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxhIGhyZWY9Ii93cC1hZG1pbiI+PGkgY2xhc3M9ImZhIGZhLXVzZXIgaGlkZGVuLW1kIGhpZGRlbi1sZyI+PC9pPiA8c3BhbiBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyI+Q29ubmV4aW9uPC9zcGFuPjwvYT4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj48IS0tIEVuZCBmb290ZXIgYm90dG9tIC0tPg0KPC9mb290ZXI+DQo8IS0tZW5kIGZvb3RlciBzZWN0aW9uLS0+DQoNCjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4KLyogPCFbQ0RBVEFbICovCnZhciBfd3BjZjcgPSB7InJlY2FwdGNoYSI6eyJtZXNzYWdlcyI6eyJlbXB0eSI6Ik1lcmNpIGRlIGNvbmZpcm1lciBxdWUgdm91cyBuXHUyMDE5XHUwMGVhdGVzIHBhcyB1biByb2JvdC4ifX0sImNhY2hlZCI6IjEifTsKLyogXV0+ICovCjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+Ci8qIDwhW0NEQVRBWyAqLwp2YXIgY3RjY192YXJzID0geyJleHBpcnkiOiIzMCIsIm1ldGhvZCI6IjEiLCJ2ZXJzaW9uIjoiMSJ9OwovKiBdXT4gKi8KPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4KLyogPCFbQ0RBVEFbICovCnZhciBoel9wbHVnaW4gPSB7InJhdGluZ190ZXJyaWJsZSI6IkRlcyBzaXR1YXRpb25zIHRlcnJpYmxlcyIsInJhdGluZ19wb29yIjoiTVx1MDBlOWRpb2NyZSIsInJhdGluZ19hdmVyYWdlIjoiTW95ZW4gIiwicmF0aW5nX3Znb29kIjoiVHJcdTAwZThzIEJvbiIsInJhdGluZ19leGNlcHRpb25hbCI6IkV4Y2VwdGlvbm5lbCJ9OwovKiBdXT4gKi8KPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9J2h0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2Fpdm9uaS1taW4vbWluLz9mPXdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXotY2hpbGQvanMvYWl2b25pLmpzLHdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXovbGVhZmxldC9sZWFmbGV0Lm1hcmtlcmNsdXN0ZXIuanMsd3AtY29udGVudC9wbHVnaW5zL2NvbnRhY3QtZm9ybS03L2luY2x1ZGVzL2pzL2pxdWVyeS5mb3JtLm1pbi5qcyx3cC1jb250ZW50L3BsdWdpbnMvY29udGFjdC1mb3JtLTcvaW5jbHVkZXMvanMvc2NyaXB0cy5qcyx3cC1jb250ZW50L3BsdWdpbnMvdWstY29va2llLWNvbnNlbnQvYXNzZXRzL2pzL3VrLWNvb2tpZS1jb25zZW50LWpzLmpzLHdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXovanMvYm9vdHN0cmFwLm1pbi5qcyx3cC1jb250ZW50L3RoZW1lcy9ob3V6ZXovaG91emV6L2pzL3BsdWdpbnMuanMsd3AtaW5jbHVkZXMvanMvanF1ZXJ5L3VpL2NvcmUubWluLmpzLHdwLWluY2x1ZGVzL2pzL2pxdWVyeS91aS9kYXRlcGlja2VyLm1pbi5qcyx3cC1jb250ZW50L3RoZW1lcy9ob3V6ZXovaG91emV6L2pzL2kxOG4vZGF0ZXBpY2tlci1mci5qcyYjMDM4O3Zlcj0xNTg2Nzg4OTIxJz48L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4KLyogPCFbQ0RBVEFbICovCnZhciB1aUF1dG9jb21wbGV0ZUwxMG4gPSB7Im5vUmVzdWx0cyI6IkF1Y3VuIHJcdTAwZTlzdWx0YXQuIiwib25lUmVzdWx0IjoiVW4gclx1MDBlOXN1bHRhdCB0cm91dlx1MDBlOS4gVXRpbGlzZXogbGVzIGZsXHUwMGU4Y2hlcyBoYXV0IGV0IGJhcyBkdSBjbGF2aWVyIHBvdXIgbGVzIHBhcmNvdXJpci4gIiwibWFueVJlc3VsdHMiOiIlZCByXHUwMGU5c3VsdGF0cyB0cm91dlx1MDBlOXMuIFV0aWxpc2V6IGxlcyBmbFx1MDBlOGNoZXMgaGF1dCBldCBiYXMgZHUgY2xhdmllciBwb3VyIGxlcyBwYXJjb3VyaXIuIiwiaXRlbVNlbGVjdGVkIjoiXHUwMGM5bFx1MDBlOW1lbnQgc1x1MDBlOWxlY3Rpb25uXHUwMGU5LiJ9OwovKiBdXT4gKi8KPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4KLyogPCFbQ0RBVEFbICovCnZhciBIT1VaRVpfYWpheGNhbGxzX3ZhcnMgPSB7ImFkbWluX3VybCI6Imh0dHBzOlwvXC93d3cuZGF1cGhpbmUtaW1tby5jb21cL3dwLWFkbWluXC8iLCJob3V6ZXpfcnRsIjoibm8iLCJyZWRpcmVjdF90eXBlIjoiZGlmZl9wYWdlIiwibG9naW5fcmVkaXJlY3QiOiIiLCJsb2dpbl9sb2FkaW5nIjoiRW52b2kgZCdpbmZvcm1hdGlvbnMgZGUgbCd1dGlsaXNhdGV1ciBlbiBjb3VycywgcGF0aWVudGVyLi4uIiwiZGlyZWN0X3BheV90ZXh0IjoiVHJhaXRlbWVudCwgUydpbCB2b3VzIHBsYVx1MDBlZXQgcGF0aWVudGVyIC4uLiIsInVzZXJfaWQiOiIwIiwidHJhbnNwYXJlbnRfbWVudSI6Im5vIiwic2ltcGxlX2xvZ28iOiJodHRwczpcL1wvd3d3LmRhdXBoaW5lLWltbW8uY29tXC93cC1jb250ZW50XC9hZ2VuY2U4Mzg4NC1pbWFnZXNcL2ltYWdlc1wvRGF1cGhpbmUtQmxhbmMucG5nIiwicmV0aW5hX2xvZ28iOiJodHRwczpcL1wvd3d3LmRhdXBoaW5lLWltbW8uY29tXC93cC1jb250ZW50XC9hZ2VuY2U4Mzg4NC1pbWFnZXNcL2ltYWdlc1wvRGF1cGhpbmUtQmxhbmMucG5nIiwicmV0aW5hX2xvZ29fbW9iaWxlIjoiaHR0cHM6XC9cL3d3dy5kYXVwaGluZS1pbW1vLmNvbVwvd3AtY29udGVudFwvYWdlbmNlODM4ODQtaW1hZ2VzXC9sb2dvX2RhdXBoaW5lLnBuZyIsInJldGluYV9sb2dvX21vYmlsZV9zcGxhc2giOiJodHRwczpcL1wvd3d3LmRhdXBoaW5lLWltbW8uY29tXC93cC1jb250ZW50XC9hZ2VuY2U4Mzg4NC1pbWFnZXNcL2ltYWdlc1wvRGF1cGhpbmUtQmxhbmMucG5nIiwicmV0aW5hX2xvZ29fc3BsYXNoIjoiaHR0cHM6XC9cL3d3dy5kYXVwaGluZS1pbW1vLmNvbVwvd3AtY29udGVudFwvYWdlbmNlODM4ODQtaW1hZ2VzXC9pbWFnZXNcL0RhdXBoaW5lLUJsYW5jLnBuZyIsInJldGluYV9sb2dvX2hlaWdodCI6IiIsInJldGluYV9sb2dvX3dpZHRoIjoiIiwicHJvcGVydHlfbGF0IjoiIiwicHJvcGVydHlfbG5nIjoiIiwicHJvcGVydHlfbWFwIjoiIiwicHJvcGVydHlfbWFwX3N0cmVldCI6IiIsImlzX3Npbmd1bGFyX3Byb3BlcnR5IjoiIiwicHJvY2Vzc19sb2FkZXJfcmVmcmVzaCI6ImZhIGZhLXNwaW4gZmEtcmVmcmVzaCIsInByb2Nlc3NfbG9hZGVyX3NwaW5uZXIiOiJmYSBmYS1zcGluIGZhLXNwaW5uZXIiLCJwcm9jZXNzX2xvYWRlcl9jaXJjbGUiOiJmYSBmYS1zcGluIGZhLWNpcmNsZS1vLW5vdGNoIiwicHJvY2Vzc19sb2FkZXJfY29nIjoiZmEgZmEtc3BpbiBmYS1jb2ciLCJzdWNjZXNzX2ljb24iOiJmYSBmYS1jaGVjayIsInByb3BfZmVhdHVyZWQiOiJFeGNsdXNpdml0XHUwMGU5IiwiZmVhdHVyZWRfbGlzdGluZ3Nfbm9uZSI6IllvdSBoYXZlIHVzZWQgYWxsIHRoZSBcIkZlYXR1cmVkXCIgbGlzdGluZ3MgaW4geW91ciBwYWNrYWdlLiIsInByb3Bfc2VudF9mb3JfYXBwcm92YWwiOiJFbnZveVx1MDBlOXMgcG91ciB2YWxpZGF0aW9uIiwicGF5cGFsX2Nvbm5lY3RpbmciOiJDb25uZXhpb24gXHUwMGUwIFBheXBhbCAhIFMnaWwgdm91cyBwbGFcdTAwZWV0LCBhdHRlbmRlei4uLiAiLCJtb2xsaWVfY29ubmVjdGluZyI6IkNvbm5leGlvbiBcdTAwZTAgbW9sbGllLCBTJ2lsIHZvdXMgcGxhXHUwMGVldCBwYXRpZW50ZXIgLi4uICIsImNvbmZpcm0iOiJcdTAwY2F0ZXMtdm91cyBzXHUwMGZiciBkZSB2b3Vsb2lyIHN1cHByaW1lciA/IiwiY29uZmlybV9mZWF0dXJlZCI6Ilx1MDBjYXRlcy12b3VzIHNcdTAwZmJyIGRlIHZvdWxvaXIgZmFpcmUgdW5lIGxpc3RlIGVuIHZlZGV0dGU/IiwiY29uZmlybV9mZWF0dXJlZF9yZW1vdmUiOiJFdGVzLXZvdXMgc1x1MDBmYnIgcXVlIHZvdXMgdm91bGV6IHN1cHByaW1lciBkZSBsJ1x1MDBlOW51bVx1MDBlOXJhdGlvbiBlbiB2ZWRldHRlPyIsImNvbmZpcm1fcmVsaXN0IjoiRXRlcy12b3VzIHNcdTAwZmJyIGRlIHZvdWxvaXIgcmVtZXR0cmUgZW4gdmVudGUgY2V0dGUgcHJvcHJpXHUwMGU5dFx1MDBlOT8iLCJub3RfZm91bmQiOiJOb3VzIG4nYXZvbnMgdHJvdXZcdTAwZTkgYXVjdW4gclx1MDBlOXN1bHRhdCIsImZvcl9yZW50IjoiZm9yLXJlbnQiLCJmb3JfcmVudF9wcmljZV9yYW5nZSI6ImZvci1yZW50IiwiY3VycmVuY3lfc3ltYm9sIjoiXHUyMGFjIiwiYWR2YW5jZWRfc2VhcmNoX3dpZGdldF9taW5fcHJpY2UiOiIwIiwiYWR2YW5jZWRfc2VhcmNoX3dpZGdldF9tYXhfcHJpY2UiOiIxMDAwMDAwIiwiYWR2YW5jZWRfc2VhcmNoX21pbl9wcmljZV9yYW5nZV9mb3JfcmVudCI6IjUwIiwiYWR2YW5jZWRfc2VhcmNoX21heF9wcmljZV9yYW5nZV9mb3JfcmVudCI6IjI1MDAwIiwiYWR2YW5jZWRfc2VhcmNoX3dpZGdldF9taW5fYXJlYSI6IjEwMCIsImFkdmFuY2VkX3NlYXJjaF93aWRnZXRfbWF4X2FyZWEiOiI2MDAiLCJhZHZhbmNlZF9zZWFyY2hfcHJpY2Vfc2xpZGUiOiIwIiwiZmF2ZV9wYWdlX3RlbXBsYXRlIjoicHJvcGVydHktbGlzdGluZy1mdWxsd2lkdGgtZnVsbGltZy5waHAiLCJnb29nbGVfbWFwX3N0eWxlIjoiW1xyXG4gICAge1xyXG4gICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIixcclxuICAgICAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcInNhdHVyYXRpb25cIjogLTEwMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcImxpZ2h0bmVzc1wiOiA2MFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLFxyXG4gICAgICAgIFwic3R5bGVyc1wiOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwic2F0dXJhdGlvblwiOiAtMTAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwibGlnaHRuZXNzXCI6IDQwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwidmlzaWJpbGl0eVwiOiBcIm9uXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIixcclxuICAgICAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcInNhdHVyYXRpb25cIjogLTEwMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLnByb3ZpbmNlXCIsXHJcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgXCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsXHJcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgXCJ2aXNpYmlsaXR5XCI6IFwib25cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcImxpZ2h0bmVzc1wiOiAzMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsXHJcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIixcclxuICAgICAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI2VmOGMyNVwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwibGlnaHRuZXNzXCI6IDQwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIixcclxuICAgICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsXHJcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgXCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsXHJcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIixcclxuICAgICAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI2I2YzU0Y1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwibGlnaHRuZXNzXCI6IDQwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwic2F0dXJhdGlvblwiOiAtNDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7fVxyXG5dIiwiZ29vZ2xlbWFwX2RlZmF1bHRfem9vbSI6IjEwIiwiZ29vZ2xlbWFwX3Bpbl9jbHVzdGVyIjoieWVzIiwiZ29vZ2xlbWFwX3pvb21fY2x1c3RlciI6IjIwIiwibWFwX2ljb25zX3BhdGgiOiJodHRwczpcL1wvd3d3LmRhdXBoaW5lLWltbW8uY29tXC93cC1jb250ZW50XC90aGVtZXNcL2hvdXplelwvaG91emV6XC9pbWFnZXNcL21hcFwvIiwiaW5mb2JveENsb3NlIjoiaHR0cHM6XC9cL3d3dy5kYXVwaGluZS1pbW1vLmNvbVwvd3AtY29udGVudFwvdGhlbWVzXC9ob3V6ZXpcL2hvdXplelwvaW1hZ2VzXC9tYXBcL2Nsb3NlLnBuZyIsImNsdXN0ZXJJY29uIjoiaHR0cDpcL1wvb25lLmFpdm9uaS5jb21cL3dwLWNvbnRlbnRcL29uZS1pbWFnZXNcLzIwMTdcLzA1XC9jdXJzb3ItMS5wbmciLCJnb29nbGVfbWFwX25lZWRlZCI6IiIsInBhZ2VkIjoiMCIsInNlYXJjaF9yZXN1bHRfcGFnZSI6InRlbXBsYXRlXC9wcm9wZXJ0eS1saXN0aW5nLWZ1bGx3aWR0aC1mdWxsaW1nLnBocCIsInNlYXJjaF9rZXl3b3JkIjoiIiwic2VhcmNoX2NvdW50cnkiOiIiLCJzZWFyY2hfc3RhdGUiOiIiLCJzZWFyY2hfY2l0eSI6IiIsInNlYXJjaF9mZWF0dXJlIjoiIiwic2VhcmNoX2FyZWEiOiIiLCJzZWFyY2hfc3RhdHVzIjoidmVudGUiLCJzZWFyY2hfbGFiZWwiOiIiLCJzZWFyY2hfdHlwZSI6IiIsInNlYXJjaF9iZWRyb29tcyI6IiIsInNlYXJjaF9iYXRocm9vbXMiOiIiLCJzZWFyY2hfbWluX3ByaWNlIjoiIiwic2VhcmNoX21heF9wcmljZSI6IiIsInNlYXJjaF9taW5fYXJlYSI6IiIsInNlYXJjaF9tYXhfYXJlYSI6IiIsInNlYXJjaF9wdWJsaXNoX2RhdGUiOiIiLCJzZWFyY2hfbm9fcG9zdHMiOiIxMCIsInNlYXJjaF9sb2NhdGlvbiI6IiIsInVzZV9yYWRpdXMiOiJvbiIsInNlYXJjaF9sYXQiOiIiLCJzZWFyY2hfbG9uZyI6IiIsInNlYXJjaF9yYWRpdXMiOiIiLCJ0cmFuc3BvcnRhdGlvbiI6IlRyYW5zcG9ydCIsInN1cGVybWFya2V0IjoiU3VwZXJtYXJjaFx1MDBlOSIsInNjaG9vbHMiOiJcdTAwYzljb2xlcyIsImxpYnJhcmllcyI6IkNvbGxlY3Rpb25zIiwicGhhcm1hY2llcyI6IlBoYXJtYWNpZXMiLCJob3NwaXRhbHMiOiJIXHUwMGY0cGl0YXV4Iiwic29ydF9ieSI6IiIsIm1lYXN1cmVtZW50X3VwZGF0aW5nX21zZyI6IkVuIGNvdXJzIGRlIE1pc2UgXHUwMGUwIGpvdXIuLi4gVmV1aWxsZXogcGF0aWVudGVyLiIsImN1cnJlbmN5X3VwZGF0aW5nX21zZyI6Ik1pc2UgXHUwMGUwIGpvdXIgZGUgbGEgbW9ubmFpZSwgUydpbCB2b3VzIHBsYVx1MDBlZXQgcGF0aWVudGVyIC4uLiIsImN1cnJlbmN5X3Bvc2l0aW9uIjoiYWZ0ZXIiLCJzdWJtaXNzaW9uX2N1cnJlbmN5IjoiVVNEIiwid2lyZV90cmFuc2Zlcl90ZXh0IjoiXHUwMGNhdHJlIHBheVx1MDBlOSIsImRpcmVjdF9wYXlfdGhhbmtzIjoiSmUgdm91cyByZW1lcmNpZS4gUydpbCB2b3VzIHBsYVx1MDBlZXQgdlx1MDBlOXJpZmllciB2b3RyZSBlLW1haWwgcG91ciBvYnRlbmlyIGRlcyBpbnN0cnVjdGlvbnMgZGUgcGFpZW1lbnQuIiwiZGlyZWN0X3BheW1lbnRfdGl0bGUiOiJJbnN0cnVjdGlvbnMgZGUgcGFpZW1lbnQgZGlyZWN0IiwiZGlyZWN0X3BheW1lbnRfYnV0dG9uIjoiRU5WT1lFUiBNT0kgTEEgRkFDVFVSRSIsImRpcmVjdF9wYXltZW50X2RldGFpbHMiOiIiLCJtZWFzdXJlbWVudF91bml0IjoibVx1MDBiMiIsImhlYWRlcl9tYXBfc2VsZWN0ZWRfY2l0eSI6W10sInRob3VzYW5kc19zZXBhcmF0b3IiOiIgIiwiY3VycmVudF90ZW1wYWx0ZSI6InRlbXBsYXRlXC9wcm9wZXJ0eS1saXN0aW5nLWZ1bGx3aWR0aC1mdWxsaW1nLnBocCIsIm1vbnRobHlfcGF5bWVudCI6Ik1lbnN1YWxpdFx1MDBlOSIsIndlZWtseV9wYXltZW50IjoiUGFpZW1lbnQgaGViZG9tYWRhaXJlIiwiYmlfd2Vla2x5X3BheW1lbnQiOiJQYWllbWVudCBCaS1IZWJkb21hZGFpcmUiLCJjb21wYXJlX2J1dHRvbl91cmwiOiJodHRwczpcL1wvd3d3LmRhdXBoaW5lLWltbW8uY29tXC9jb21wYXJlci1sZXMtYmllbnNcLyIsInRlbXBsYXRlX3RoYW5reW91IjoiaHR0cHM6XC9cL3d3dy5kYXVwaGluZS1pbW1vLmNvbVwvIiwiY29tcGFyZV9wYWdlX25vdF9mb3VuZCI6IlMnaWwgdm91cyBwbGFcdTAwZWV0IGNyXHUwMGU5ZXIgdW5lIHBhZ2UgXHUwMGUwIGwnYWlkZSBkZSBjb21wYXJlciBsZXMgcHJvcHJpXHUwMGU5dFx1MDBlOXMgbW9kXHUwMGU4bGUiLCJwcm9wZXJ0eV9kZXRhaWxfdG9wIjoidjUiLCJrZXl3b3JkX3NlYXJjaF9maWVsZCI6InByb3BfY2l0eV9zdGF0ZV9jb3VudHkiLCJrZXl3b3JkX2F1dG9jb21wbGV0ZSI6IjEiLCJob3V6ZXpfZGF0ZV9sYW5ndWFnZSI6ImZyIiwiaG91emV6X2RlZmF1bHRfcmFkaXVzIjoiNTAiLCJlbmFibGVfcmFkaXVzX3NlYXJjaCI6IjAiLCJlbmFibGVfcmFkaXVzX3NlYXJjaF9oYWxmbWFwIjoiMCIsImhvdXplel9wcmltYXJ5X2NvbG9yIjoiIzFjMTkxZiIsImdlb2NvbXBsZXRlX2NvdW50cnkiOiJGUiIsImhvdXplel9sb2dnZWRfaW4iOiJubyIsImlwaW5mb19sb2NhdGlvbiI6IjEiLCJnYWxsZXJ5X2F1dG9wbGF5IjoiMCIsInN0cmlwZV9wYWdlIjoiaHR0cHM6XC9cL3d3dy5kYXVwaGluZS1pbW1vLmNvbVwvIiwidHdvY2hlY2tvdXRfcGFnZSI6Imh0dHBzOlwvXC93d3cuZGF1cGhpbmUtaW1tby5jb21cLyIsImdyb3VwX21hcmtlcnMiOm51bGx9OwovKiBdXT4gKi8KPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9J2h0dHBzOi8vd3d3LmRhdXBoaW5lLWltbW8uY29tL2Fpdm9uaS1taW4vbWluLz9mPXdwLWluY2x1ZGVzL2pzL2pxdWVyeS91aS93aWRnZXQubWluLmpzLHdwLWluY2x1ZGVzL2pzL2pxdWVyeS91aS9wb3NpdGlvbi5taW4uanMsd3AtaW5jbHVkZXMvanMvanF1ZXJ5L3VpL21lbnUubWluLmpzLHdwLWluY2x1ZGVzL2pzL3dwLWExMXkuanMsd3AtaW5jbHVkZXMvanMvanF1ZXJ5L3VpL2F1dG9jb21wbGV0ZS5taW4uanMsd3AtaW5jbHVkZXMvanMvanF1ZXJ5L3VpL21vdXNlLm1pbi5qcyx3cC1pbmNsdWRlcy9qcy9qcXVlcnkvanF1ZXJ5LnVpLnRvdWNoLXB1bmNoLmpzLHdwLWNvbnRlbnQvdGhlbWVzL2hvdXplei9ob3V6ZXovanMvYWl2b25pX2FqYXhfY2FsbHMuanMsd3AtY29udGVudC90aGVtZXMvaG91emV6L2hvdXplei9qcy9jdXN0b20uanMmIzAzODt2ZXI9MTU4Njc4ODkyMSc+PC9zY3JpcHQ+DQoJCQkKCQkJCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCQkJCQlqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCQpewoJCQkJCQkJCQkJCQlpZighY2F0YXB1bHRSZWFkQ29va2llKCJjYXRBY2NDb29raWVzIikpeyAvLyBJZiB0aGUgY29va2llIGhhcyBub3QgYmVlbiBzZXQgdGhlbiBzaG93IHRoZSBiYXIKCQkJCQkJCSQoImh0bWwiKS5hZGRDbGFzcygiaGFzLWNvb2tpZS1iYXIiKTsKCQkJCQkJCSQoImh0bWwiKS5hZGRDbGFzcygiY29va2llLWJhci10b3AtYmFyIik7CgkJCQkJCQkkKCJodG1sIikuYWRkQ2xhc3MoImNvb2tpZS1iYXItYmFyIik7CgkJCQkJCQkJCQkJCQkJCS8vIFdhaXQgZm9yIHRoZSBhbmltYXRpb24gb24gdGhlIGh0bWwgdG8gZW5kIGJlZm9yZSByZWNhbGN1bGF0aW5nIHRoZSByZXF1aXJlZCB0b3AgbWFyZ2luCgkJCQkJCQkJJCgiaHRtbCIpLm9uKCd3ZWJraXRUcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIG9UcmFuc2l0aW9uRW5kIG1zVHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24oZSkgewoJCQkJCQkJCQkvLyBjb2RlIHRvIGV4ZWN1dGUgYWZ0ZXIgdHJhbnNpdGlvbiBlbmRzCgkJCQkJCQkJCXZhciBiYXJIZWlnaHQgPSAkKCcjY2F0YXB1bHQtY29va2llLWJhcicpLm91dGVySGVpZ2h0KCk7CgkJCQkJCQkJCSQoImh0bWwiKS5jc3MoIm1hcmdpbi10b3AiLGJhckhlaWdodCk7CgkJCQkJCQkJCSQoImJvZHkuYWRtaW4tYmFyIikuY3NzKCJtYXJnaW4tdG9wIixiYXJIZWlnaHQtMzIpOyAvLyBQdXNoIHRoZSBib2R5IGRvd24gaWYgdGhlIGFkbWluIGJhciBpcyBhY3RpdmUKCQkJCQkJCQl9KTsKCQkJCQkJCQkJCQkJCX0KCQkJCQkJCQkJCQkJCQkJCQl9KTsKCQkJCTwvc2NyaXB0PgoJCQkKCQkJPGRpdiBpZD0iY2F0YXB1bHQtY29va2llLWJhciIgY2xhc3M9IiB1c2VfeF9jbG9zZSBmbG9hdC1hY2NlcHQiPjxkaXYgY2xhc3M9ImN0Y2MtaW5uZXIgIj48c3BhbiBjbGFzcz0iY3RjYy1sZWZ0LXNpZGUiPkVuIHBvdXJzdWl2YW50IHZvdHJlIG5hdmlnYXRpb24sIHZvdXMgYWNjZXB0ZXogbOKAmXV0aWxpc2F0aW9uIGRlIGNvb2tpZXMgb3UgdGVjaG5vbG9naWVzIHNpbWlsYWlyZXMgcG91ciBkaXNwb3NlciBkZSBzZXJ2aWNlcyBldCBvZmZyZXMgYWRhcHTDqWVzIMOgIHZvcyBjZW50cmVzIGTigJlpbnTDqXLDqnRzLiA8YSBjbGFzcz0iY3RjYy1tb3JlLWluZm8tbGluayIgdGFiaW5kZXg9MCB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vY29va2llcy8iPkVuIHNhdm9pciBwbHVzLjwvYT48L3NwYW4+PHNwYW4gY2xhc3M9ImN0Y2MtcmlnaHQtc2lkZSI+PC9zcGFuPjxkaXYgY2xhc3M9InhfY2xvc2UiPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+PCEtLSBjdXN0b20gd3JhcHBlciBjbGFzcyAtLT48L2Rpdj48IS0tICNjYXRhcHVsdC1jb29raWUtYmFyIC0tPiANCjwhLS1XZWdsb3QgMi4wLjUtLT48YXNpZGUgZGF0YS13Zy1ub3RyYW5zbGF0ZSBjbGFzcz0nY291bnRyeS1zZWxlY3RvciB3ZWdsb3QtZHJvcGRvd24gd2VnbG90LWRlZmF1bHQnPjxpbnB1dCBpZD0id2cxNTg2OTQ2MzY2NWU5NmUxM2UxNWQ0MTU2MiIgY2xhc3M9IndlZ2xvdF9jaG9pY2UiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJtZW51Ii8+PGxhYmVsIGZvcj0id2cxNTg2OTQ2MzY2NWU5NmUxM2UxNWQ0MTU2MiIgY2xhc3M9IndnY3VycmVudCB3Zy1saSB3ZWdsb3QtZmxhZ3MgZmxhZy0wIGZyIiBkYXRhLWNvZGUtbGFuZ3VhZ2U9ImZyIj48c3Bhbj5GUjwvc3Bhbj48L2xhYmVsPjx1bD48bGkgY2xhc3M9IndnLWxpIHdlZ2xvdC1mbGFncyBmbGFnLTAgZW4iIGRhdGEtY29kZS1sYW5ndWFnZT0iZW4iPjxhIGRhdGEtd2ctbm90cmFuc2xhdGUgaHJlZj0iaHR0cHM6Ly93d3cuZGF1cGhpbmUtaW1tby5jb20vZW4vYWR2YW5jZWQtc2VhcmNoLz90eXBlPSZtYXgtcHJpY2U9JnN0YXR1cz12ZW50ZSZsb2NhdGlvbj0mYmF0aHJvb21zPSZtaW4tYXJlYT0mbWF4LWFyZWE9Jm1pbi1wcmljZT0mbWF4LXByaWNlPSZwcm9wZXJ0eV9pZD0iPkVOPC9hPjwvbGk+PC91bD48L2FzaWRlPiA8L2JvZHk+DQo8L2h0bWw+DQoKPCEtLSBEeW5hbWljIHBhZ2UgZ2VuZXJhdGVkIGluIDAuNDYyIHNlY29uZHMuIC0tPgo8IS0tIENhY2hlZCBwYWdlIGdlbmVyYXRlZCBieSBXUC1TdXBlci1DYWNoZSBvbiAyMDIwLTA0LTE1IDEwOjI2OjA2IC0tPgoKPCEtLSBDb21wcmVzc2lvbiA9IGd6aXAgLS0+
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:06 GMT
- request:
    method: get
    uri: https://www.dauphine-immo.com/property/5-pices-et-plus-paris-14-eme/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:06 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '25340'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=7f2t2tbpn3g1loh8f39nfg3966; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://www.dauphine-immo.com/xmlrpc.php
      Link:
      - "<https://www.dauphine-immo.com/?p=84785>; rel=shortlink"
      - <https://www.dauphine-immo.com/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:07 GMT
- request:
    method: get
    uri: https://www.dauphine-immo.com/property/5-pices-et-plus-paris-17-eme/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:07 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '25759'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Set-Cookie:
      - PHPSESSID=pt429lvv6pc53aqdklptvpupv7; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Pingback:
      - https://www.dauphine-immo.com/xmlrpc.php
      Link:
      - "<https://www.dauphine-immo.com/?p=88369>; rel=shortlink"
      - <https://www.dauphine-immo.com/wp-json/>; rel="https://api.w.org/"
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:07 GMT
- request:
    method: get
    uri: https://www.dauphine-immo.com/property/5-pices-et-plus-paris-6-eme-2/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:08 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '25787'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Vary:
      - Accept-Encoding, Cookie
      Cache-Control:
      - max-age=3, must-revalidate
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:08 GMT
- request:
    method: get
    uri: https://www.dauphine-immo.com/property/5-pices-et-plus-paris-6-eme-3/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:08 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '25352'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Vary:
      - Accept-Encoding, Cookie
      Cache-Control:
      - max-age=3, must-revalidate
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:09 GMT
- request:
    method: get
    uri: https://www.dauphine-immo.com/property/4-pices-paris-7-eme/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:09 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '24866'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Vary:
      - Accept-Encoding, Cookie
      Cache-Control:
      - max-age=3, must-revalidate
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:09 GMT
- request:
    method: get
    uri: https://www.dauphine-immo.com/property/3-pices-paris-6-eme-2/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:09 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '25374'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Vary:
      - Accept-Encoding, Cookie
      Cache-Control:
      - max-age=3, must-revalidate
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:10 GMT
- request:
    method: get
    uri: https://www.dauphine-immo.com/property/3-pices-paris-6-eme-4/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:10 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '25472'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Vary:
      - Accept-Encoding, Cookie
      Cache-Control:
      - max-age=3, must-revalidate
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:10 GMT
- request:
    method: get
    uri: https://www.dauphine-immo.com/property/2-pices-paris-6-eme-5/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:10 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '25270'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Vary:
      - Accept-Encoding, Cookie
      Cache-Control:
      - max-age=3, must-revalidate
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:11 GMT
- request:
    method: get
    uri: https://www.dauphine-immo.com/property/studio-paris-6-eme-2/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.16.1
      Date:
      - Wed, 15 Apr 2020 10:26:11 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Content-Length:
      - '25427'
      Connection:
      - keep-alive
      X-Powered-By:
      - PHP/7.0.33
      Vary:
      - Accept-Encoding, Cookie
      Cache-Control:
      - max-age=3, must-revalidate
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 10:26:11 GMT
recorded_with: VCR 5.1.0
