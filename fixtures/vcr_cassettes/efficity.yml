---
http_interactions:
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/results/?inputed_location=8075056&max_price=&min_nb_of_rooms=1&property_type=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:33 GMT
      Content-Length:
      - '43895'
      Content-Type:
      - text/html; charset=utf-8
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Origin
      Cache-Control:
      - max-age=
      X-Varnish:
      - '29811553'
      - '5111544'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:33 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_94-m2_paris_75013_10248850/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:33 GMT
      Content-Type:
      - text/html; charset=utf-8
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Origin
      Cache-Control:
      - max-age=
      X-Varnish:
      - '33175545'
      - '4820412'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:33 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_93-m2_paris_75014_18434502/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:34 GMT
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '12528015'
      - '32150910'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:34 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_23-m2_paris_75019_18425332/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:34 GMT
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Origin
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '29811555'
      - '5111547'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:34 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_98-m2_paris_75020_17996162/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:34 GMT
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '32577522'
      - '8471822'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:34 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_140-m2_paris_75013_18392292/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:34 GMT
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - max-age=
      X-Varnish:
      - '23289537'
      - '4820415'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:34 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_77-m2_paris_75018_18333133/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:34 GMT
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '12945246'
      - '32482270'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:34 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_11-m2_paris_75016_18377651/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:34 GMT
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '23289558'
      - '4820418'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:35 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_11-m2_paris_75016_18377463/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:35 GMT
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Origin
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '13632226'
      - '32482290'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:35 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_41-m2_paris_75005_18021431/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:35 GMT
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '13632229'
      - '32482320'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:35 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_50-m2_paris_75015_17677021/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:35 GMT
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Origin
      Content-Type:
      - text/html; charset=utf-8
      Cache-Control:
      - max-age=
      X-Varnish:
      - '32577544'
      - '4951729'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:35 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_89-m2_paris_75019_18105916/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:35 GMT
      X-Frame-Options:
      - SAMEORIGIN
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Origin
      Cache-Control:
      - max-age=
      X-Varnish:
      - '32577564'
      - '4951732'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:35 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_46-m2_paris_75015_18310551/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - gunicorn/19.7.1
      Date:
      - Wed, 01 Apr 2020 19:28:35 GMT
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - max-age=
      X-Varnish:
      - '13632232'
      - '32482341'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 19:28:35 GMT
recorded_with: VCR 5.1.0
