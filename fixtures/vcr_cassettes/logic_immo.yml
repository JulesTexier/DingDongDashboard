---
http_interactions:
- request:
    method: get
    uri: https://www.logic-immo.com/vente-immobilier-paris-75,100_1/options/groupprptypesids=1,2,6,7,12,15/order=update_date_desc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.245
      Loadtime:
      - D=315074 t=1585672739019239
      Server:
      - elb
      Cache-Control:
      - max-age=120
      Expires:
      - Tue, 31 Mar 2020 16:40:59 GMT
      Date:
      - Tue, 31 Mar 2020 16:38:59 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+Cgo8aHRtbCBsYW5nPSJmciI+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlLGNocm9tZT0xIj4KICAgIDxtZXRhIGh0dHAtZXF1aXY9InJlZnJlc2giIGNvbnRlbnQ9IjIxMDAiLz4KICAgIDxtZXRhIG5hbWU9InNpdGUiIGNvbnRlbnQ9ImxvZ2ljLWltbW8uY29tIi8+CgoKICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9iYWJlbC1wb2x5ZmlsbC83LjIuNS9wb2x5ZmlsbC5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcmVhY3QvMTYuMTEuMC91bWQvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcmVhY3QtZG9tLzE2LjExLjAvdW1kL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2pzb24iIGNsYXNzPSJDb29raWVDb25zZW50UGFyYW0iPgogICAgewogICAgInVybCIgOiAiaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQvdmVuZG9yL2Nvb2tpZS1jb25zZW50LW1vZHVsZSIsCiAgICAicHVzaFRoZXNoaWVsZCI6IHRydWUsCiAgICAicHVzaFRob3IiOiB0cnVlCiAgICB9CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC92ZW5kb3IvY29va2llLWNvbnNlbnQtbW9kdWxlL2Rpc3QvZGlzdC5taW4uanMiCiAgICAgICAgICAgIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+CgogICAgPHRpdGxlPjQ2MjkgYW5ub25jZXMgZGUgdmVudGUgaW1tb2JpbGllciDDoCBQYXJpcyAoNzUpPC90aXRsZT48bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iQWZmaW5leiB2b3RyZSByZWNoZXJjaGUgZCYjMDM5O2FjaGF0IMOgIFBhcmlzIChDZW50cmUgdmlsbGUgZXQgYWxlbnRvdXJzKSBwYXIgdHlwZSBkZSBiaWVuIDogYXBwYXJ0ZW1lbnQsIG1haXNvbiwuLi4gcGFyIG5vbWJyZSBkZSBwacOoY2VzIDogc3R1ZGlvLCBUMiwgVDMsLi4uIj4KPG1ldGEgbmFtZT0icm9ib3RzIiBjb250ZW50PSJub2luZGV4LCBub2ZvbGxvdyI+CjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgbWF4aW11bS1zY2FsZT0xLCB1c2VyLXNjYWxhYmxlPW5vIj4KPG1ldGEgbmFtZT0iZ29vZ2xlIiBjb250ZW50PSJub3NpdGVsaW5rc3NlYXJjaGJveCI+CiAgICA8bWV0YSBwcm9wZXJ0eT0iZmI6cGFnZV9pZCIgY29udGVudD0iMzY4MDY1NDYzMTEyIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0iZmI6YXBwX2lkIiBjb250ZW50PSIxOTg2MjM0MzA0NDIiLz4KICAgIDxtZXRhIG5hbWU9ImFwcGxlLWl0dW5lcy1hcHAiIGNvbnRlbnQ9ImFwcC1pZD0zNzIzOTYzODciPgoKCiAgICA8bGluayBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC9jc3MvcGFnZXMvbGlzdGluZy9saXN0LmNzcz90YWc9MjAuMC4xIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KPGxpbmsgaHJlZj0iL2Fzc2V0LWNvcmFpbC9jc3MvbGlzdC5jc3M/dGFnPTIwLjAuMSIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CjxsaW5rIGhyZWY9Ii9hc3NldC1jb3JhaWwvY3NzL2pxdWVyeS1wbHVnaW5zL3NsaWNrLmNzcz90YWc9MjAuMC4xIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KPGxpbmsgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vdmVudGUtaW1tb2JpbGllci1wYXJpcy03NSwxMDBfMS9vcHRpb25zL2dyb3VwcHJwdHlwZXNpZHM9MSwyLDYsNywxMiwxNS9vcmRlcj11cGRhdGVfZGF0ZV9kZXNjIiByZWw9ImNhbm9uaWNhbCI+CjxsaW5rIGhyZWY9Ii9hc3NldC1jb3JhaWwvaW1nL2Zhdmljb24ucG5nP3RhZz0yMC4wLjEiIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIj4KPGxpbmsgaHJlZj0iL2Fzc2V0LWNvcmFpbC9pbWcvZmF2aWNvbi5pY28/dGFnPTIwLjAuMSIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIHZhciBfZ2xvYmFsRW52ID0gJ3Byb2R1Y3Rpb24nOwo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kZXJuaXpyLmN1c3RvbS44Nzg1NC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGRlZmVyPSJkZWZlciIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9jb25zb2xlbG9nLm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LTEuMTIuNC5taW4uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1taWdyYXRlLTEuMi4xLm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvYm9vdHN0cmFwLm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LXBsYWNlaG9sZGVyLW1hc3Rlci9qcXVlcnkucGxhY2Vob2xkZXIubWluLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8IS0tW2lmIGx0IElFIDldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBtaW5pZnlfZGlzYWJsZWQ9IjEiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvcmVzcG9uZC5taW4uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CjwhLS1baWYgbHQgSUUgOV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIG1pbmlmeV9kaXNhYmxlZD0iMSIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9odG1sNXNoaXYuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL2NvbW1vbi9jb29raWUtbm90aWNlLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9qcXVlcnktYmFzZTY0LmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvbW9kdWxlcy9qcXVlcnktbGljb20tbG9jYWxpdGllcy1jb29raWUuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1saW5ramFtbWVyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvbW9kdWxlcy9uYXYuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBkZWZlcj0iZGVmZXIiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LWpjYXJvdXNlbGxpdGUtMS44LjEwLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9qcXVlcnktbGF6eWxvYWQuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1pbWdsaXF1aWQtbWluLTAuOS45NDQuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBkZWZlcj0iZGVmZXIiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LWNyZWF0ZWh0bWwtMS4wLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgZGVmZXI9ImRlZmVyIiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLWJhci9TZXJ2aWNlL3VzZXItYmFyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL1NlcnZpY2UvT2ZmZXJTZWxlY3Rpb25Db2xsZWN0aW9uU2VydmljZS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9GYWN0b3J5L01hcHBlckZhY3RvcnkuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvRmFjdG9yeS9TdG9yYWdlQWRhcHRlckZhY3RvcnkuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvQWRhcHRlci9Ccm93c2VyU3RvcmFnZUFkYXB0ZXIuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvQWRhcHRlci9Mb2NhbFN0b3JhZ2VBZGFwdGVyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL01hcHBlci9Vc2VyUG9zaXRpb25NYXBwZXIuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvTWFwcGVyL0xvY2FsaXR5TWFwcGVyLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL01hcHBlci9TZWxlY3Rpb25NYXBwZXIuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL21vZHVsZS11c2VyLXN0b3JhZ2UvTWFwcGVyL1VybE1hcHBlci5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9NYXBwZXIvVXNlck1hcHBlci5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9Db2xsZWN0aW9uL09mZmVyU2VsZWN0aW9uQ29sbGVjdGlvbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9Db2xsZWN0aW9uL0xvY2FsaXR5Q29sbGVjdGlvbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9Nb2RlbC9PZmZlclNlbGVjdGlvbk1vZGVsLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL01vZGVsL1VybE1vZGVsLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9tb2R1bGUtdXNlci1zdG9yYWdlL01vZGVsL1VzZXJNb2RlbC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvbW9kdWxlLXVzZXItc3RvcmFnZS9Nb2RlbC9Vc2VyUG9zaXRpb25Nb2RlbC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL21vZHVsZXMvZm9ybUNvbnRyb2wuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL3Jlc3VsdC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL21vZHVsZXMvbGlzdC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvY29sb3Jib3gtbWFzdGVyL2pxdWVyeS5jb2xvcmJveC1taW4uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL2NkYi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL21vZHVsZXMvY29tcGFueV9yYXRpbmdzLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS8vanMvc3JjL2Rpc3BhdGNoZXJzL3BhZ2UtZGlzcGF0Y2hlci5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LXZpc2libGUuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL3NlbGVjdDItY3VzdG9tLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9wb2x5ZmlsbHMtanNOYXRpZi5taW4uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2RldGVjdC1pZS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL21vZHVsZXMvc2VhcmNoQ29udHJvbC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL21vZHVsZXMvanF1ZXJ5LWFsZXJ0LW1vZGFsLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC92ZW5kb3IvdDktbW9kdWxlL2Rpc3QuZXM1LmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9qcy9saWIvanF1ZXJ5LXZhbGlkZWFzeS1saWNvbS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQvanMvbGF5b3V0L29mZmVyL3JlY29tbWFuZGVkLW9mZmVycy1jYXJyb3VzZWwuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL29hcy1mbG9hdGFibGUuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0L2pzL2xheW91dC9yZXN1bHQvc2FzLWNyZWRpdC5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQvanMvbGliL2pxdWVyeS1maXh0by0wLjMuMS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQvanMvdmVuZG9ycy9pc01vYmlsZS5taW4uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL1NlcnZpY2UvTnVtYmVyRm9ybWF0dGVyU2VydmljZS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL1NlcnZpY2UvTG9jYWxpdHlTZXJ2aWNlLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvT2JzZXJ2ZXIvTnVtYmVyU2VwYXJhdG9yT2JzZXJ2ZXIuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9TdWJqZWN0L051bWJlclN1YmplY3QuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy9tb2R1bGVzL2xpcmVzdWx0LmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvbW9kdWxlcy94aXRpL3NlYXJjaC1lbmdpbmUtdHJhY2tlci1yZXN1bHQuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIC8vPCEtLQogICAgCiAgICAgICAgICAgIHZhciBzZWFyY2hFbmdpbmVUcmFja2VyUFIgPSBuZXcgVHJhY2tpbmcuU2VhcmNoRW5naW5lVHJhY2tlclBSKHsgY29udGV4dDogInN0YW5kYXJkIiB9KTsKICAgICAgICAKICAgIC8vLS0+Cjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9qcXVlcnktZW5oYW5jZWQtY29va2llLTEuMC4wLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9qcXVlcnkubWFza2VkaW5wdXQuanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0LWNvcmFpbC9qcy92ZW5kb3JzL2pxdWVyeS1tZDUtMS40LmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9qcXVlcnkuc2hhMjU2Lm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL3ZlbmRvcnMvanF1ZXJ5LW1vZGFsLW1hc3Rlci9qcXVlcnkubW9kYWwubWluLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvdmVuZG9ycy9kYXZpZGpicmFkc2hhdy1pZnJhbWUtcmVzaXplci9qcy9pZnJhbWVSZXNpemVyLm1pbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL09ic2VydmVyL1Bob25lSW5wdXRPYnNlcnZlci5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQtY29yYWlsL2pzL21haW4uanM/dGFnPTIwLjAuMSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2Fzc2V0L3ZlbmRvci9tb2JpbGUtZGV0ZWN0L21vYmlsZS1kZXRlY3QubWluLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC92ZW5kb3Ivc2FzLW1vZHVsZS9kaXN0LmVzNS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vanMvbGF5b3V0L3JlZGlyZWN0X21vYmlsZS5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vYXNzZXQvanMvbGF5b3V0L2NvbW1vbi9zYXMtZnVuY3Rpb25zLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9hc3NldC1jb3JhaWwvanMvbW9kdWxlcy94aXRpL3NlYXJjaC1lbmdpbmUtdHJhY2tlci5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vL2pzL3NyYy9hcHBsaWNhdGlvbi5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vL2pzL2NvbmZpZy9zYXMvY29uZmlnLmpzP3RhZz0yMC4wLjEiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS8vanMvc3JjL2NvbnRyb2xsZXJzL3BhZ2UtY29udHJvbGxlci5qcz90YWc9MjAuMC4xIj48L3NjcmlwdD4gICAgPHNjcmlwdD4KICAgICAgICBmdW5jdGlvbiBjcmVhdERPTUVsZW1lbnQgKG9iaikgewogICAgICAgICAgICBsZXQgRE9NRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQob2JqWyduYW1lJ10pOwogICAgICAgICAgICBkZWxldGUgb2JqWyduYW1lJ107CiAgICAgICAgICAgIGZvcihjb25zdCBba2V5LHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7CiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnY2hpbGQnKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIERPTUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3JlYXRET01FbGVtZW50KHZhbHVlKSk7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBET01FbGVtZW50W2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gRE9NRWxlbWVudDsKICAgICAgICB9CiAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KGZ1bmN0aW9uICgpewogICAgICAgICAgICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdOwogICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGNyZWF0RE9NRWxlbWVudCh7ICduYW1lJzogJ3NjcmlwdCcsICd0eXBlJzogJ3RleHQvamF2YXNjcmlwdCcsICdzcmMnOiAnaHR0cHM6Ly9zdGF0aWMuY3JpdGVvLm5ldC9qcy9sZC9sZC5qcycgfSk7CiAgICAgICAgICAgICAgICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICAgICAgICAgIH0sIDQpOwogICAgICAgIH0pOwogICAgPC9zY3JpcHQ+CiAgICAKPGxpbmsgcmVsPSJwcmVmZXRjaCIgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vdmVudGUtaW1tb2JpbGllci1wYXJpcy03NSwxMDBfMS9vcHRpb25zL2dyb3VwcHJwdHlwZXNpZHM9MSwyLDYsNywxMiwxNS9wYWdlPTIvb3JkZXI9dXBkYXRlX2RhdGVfZGVzYyI+ICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgaGl0UmVtYWlsTWUoImxpc3QiKTsKICAgICAgICAgICAgCiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vdHJ5LmFidGFzdHkuY29tLzFlYjkwNGI5YWE0ZTIwYTEzMjJjOTgyYzQ5ZDkxNTAzLmpzIj48L3NjcmlwdD4KCiAgICA8L2hlYWQ+Cjxib2R5IGNsYXNzPSJjb250cm9sbGVyLW9mZmVyIGFjdGlvbi1saXN0IG1hcHBlci1zYWxlIHJvdXRlLXBycyB0ZW1wbGF0ZS1hcHBsaWNhdGlvbi1vZmZlci1saXN0Ij4KCjxkaXYgaWQ9InFhX2ltYWlsX3N0YXR1cyIgaGlkZGVuPjwvZGl2Pgo8ZGl2IGlkPSJxYV9pbWFpbF9tZXNzYWdlIiBoaWRkZW4+PC9kaXY+Cgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0idW5pdmVyc2UiIHZhbHVlPSIxIi8+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJhY3Rpb24iIHZhbHVlPSJsaXN0Ii8+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAvLzwhLS0KICAgIAogICAgICAgICAgICAgICAgeHRfcGFnZXR5cGUgPSAiIjsKICAgICAgICAgICAgICAgIC8vZG8gbm90IG1vZGlmeSBiZWxvdwogICAgICAgICAgICAgICAgaWYgKHdpbmRvdy54dHBhcmFtIT1udWxsKSB7d2luZG93Lnh0cGFyYW0rPSImcHR5cGU9Iit4dF9wYWdldHlwZTt9CiAgICAgICAgICAgICAgICBlbHNlIHt4dHBhcmFtID0gIiZwdHlwZT0iK3h0X3BhZ2V0eXBlO307CgogICAgICAgICAgICAgICAgdmFyIHh0Q3VzdG9tID0ge307CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIE1vYmlsZURldGVjdCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZGV2aWNlID0gbmV3IE1vYmlsZURldGVjdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0cnVlKXsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAoZGV2aWNlLnBob25lKCkgIT09IG51bGwpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeHRDdXN0b20uZGV2aWNlID0gJ3NtYXJ0cGhvbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgKGRldmljZS50YWJsZXQoKSAhPT0gbnVsbCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4dEN1c3RvbS5kZXZpY2UgPSAndGFibGV0JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeHRDdXN0b20uZGV2aWNlID0gJ2Rlc2t0b3AnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgeHRudiA9IGRvY3VtZW50OwogICAgICAgICAgICAgICAgeHRzZCA9ICJodHRwczovL2xvZ3MxMjQxIjsKICAgICAgICAgICAgICAgIHh0c2l0ZSA9IDQ5MDgwNDsKICAgICAgICAgICAgICAgIHh0Y3VzdG9tID0geHRDdXN0b207CiAgICAgICAgICAgICAgICB4dG4yID0gIjEiOwogICAgICAgICAgICAgICAgeHRwYWdlID0gIkxpc3RlX2RlX3Jlc3VsdGF0c19BY2hhdDo6TGlzdGVfZGVfcmVzdWx0YXRzX0FjaGF0XzAxIjsKICAgICAgICAgICAgICAgIHh0ZGkgPSAiIjsKICAgICAgICAgICAgICAgIHh0X211bHRjID0gIiZ4MT0xJngyPTEmeDU9Jng2PTEmeDc9MTAwJng4PSZ4OT0lNUJBcHBhcnRlbWVudCU1RCUyQyU1Qk1haXNvbiU1RCUyQyU1QkxvZnQrJTJGK0F0ZWxpZXIlNUQlMkMlNUJWaWxsYSU1RCUyQyU1QlByb3ByaSVDMyVBOXQlQzMlQTklNUQlMkMlNUJWaWFnZXIlNUQmeDEwPSZ4MTE9JngxMj0meDEzPSZ4MTQ9JngxNSZ4MTc9MSZ4MjA9IjsKICAgICAgICAgICAgICAgIHh0X2FuID0gIiI7CiAgICAgICAgICAgICAgICB4dF9hYyA9ICIiOwogICAgICAgICAgICAgICAgeHRlcmdvID0gIjEiOwogICAgICAgICAgICAgICAgeHRfYXRpID0gIiZhdGk9UFVCLTEtNzQxMzU5NzktLVtEQWxhdW5lSUFEXS1bTEldLVswMTAxMDFdLVs1OTAwNzNdLFBVQi0xLTc0MTEwMjU4LS1bREFsYXVuZUlBRF0tW0xJXS1bMDEwMTAxXS1bNTkwMDczXSxQVUItMS03MzU5OTczMi0tW1BEaWdpdGFsXS1bTEldLVswMTAxMDFdLVs1NDk3NzRdLFBVQi0xLTc0MTM1NjgxLS1bRHVvMl0tW0xJXS1bMDEwMTAxXS1bMTIyNTY0NF0sUFVCLTEtNzQxMzM5NTItLVtEdW8yXS1bTEldLVswMTAxMDFdLVsxMjI1NjQ0XSxQVUItMS03NDEzNTY4NC0tW0R1bzJdLVtMSV0tWzAxMDEwMV0tWzEyMjU2NDRdLFBVQi0xLTc0MTM1Njg4LS1bRHVvMl0tW0xJXS1bMDEwMTAxXS1bMTIyNTY0NF0sUFVCLTEtNzQxMzU2ODMtLVtEdW8yXS1bTEldLVswMTAxMDFdLVsxMjI1NjQ0XSxQVUItMS03NDEzNTY4Mi0tW0R1bzJdLVtMSV0tWzAxMDEwMV0tWzEyMjU2NDRdLFBVQi0xLTc0MTMzOTU0LS1bRHVvMl0tW0xJXS1bMDEwMTAxXS1bMTIyNTY0NF0sUFVCLTEtNzQxMzU1MzktLVtEQWxhdW5lSUFEXS1bTEldLVswMTAxMDFdLVs1OTAwNzNdLFBVQi0xLTcxNjIzNjIxLS1bUERpZ2l0YWxdLVtMSV0tWzAxMDEwMV0tWzExNTE3OTVdLFBVQi0xLTc0MTM1MDYwLS1bREFsYXVuZUlBRF0tW0xJXS1bMDEwMTAxXS1bNTkwMDczXSxQVUItMS03NDEzNTA2My0tW0RBbGF1bmVJQURdLVtMSV0tWzAxMDEwMV0tWzU5MDA3M10sUFVCLTEtNzM4Mjg0NTEtLVtEdW8zXS1bTEldLVswMTAxMDFdLVsxMzc1OTIyXSxQVUItMS03MzgyODQ1NC0tW0R1bzNdLVtMSV0tWzAxMDEwMV0tWzEzNzU5MjJdLFBVQi0xLTczMjE4NzE1LS1bRHVvM10tW0xJXS1bMDEwMTAxXS1bMTM3NTkyMl0sUFVCLTEtNzI1MjMxNDEtLVtQRGlnaXRhbF0tW0xJXS1bMDEyMDAxXS1bMTIwOTIwNV0sUFVCLTEtNzMzODcyNjktLVtQRGlnaXRhbF0tW0xJXS1bMDEyMDAxXS1bMTIwOTIwNV0sUFVCLTEtNzM4NzA2MTAtLVtQRGlnaXRhbF0tW0xJXS1bMDEwMTAxXS1bMTIwOTIwNV0iOwogICAgICAgICAgICAgICAgeHRfYXQgPSBnZXRVc2VyRGF0YUZvcm1Db29raWUoKTsKCiAgICAgICAgICAgICAgICAvL2RvIG5vdCBtb2RpZnkgYmVsb3cKICAgICAgICAgICAgICAgIGlmICh3aW5kb3cueHRwYXJhbSE9bnVsbCl7d2luZG93Lnh0cGFyYW0rPSImYWM9Iit4dF9hYysiJmF0PSIreHRfYXQreHRfbXVsdGMreHRfYXRpO30KICAgICAgICAgICAgICAgIGVsc2Uge3dpbmRvdy54dHBhcmFtPSImYWM9Iit4dF9hYysiJmF0PSIreHRfYXQreHRfbXVsdGMreHRfYXRpO307CiAgICAgICAgICAgICAgICAKICAgIC8vLS0+Cjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvbGliL3h0Y29yZS5qcyI+PC9zY3JpcHQ+PG5vc2NyaXB0PjxpbWcgd2lkdGg9IjEiIGhlaWdodD0iMSIgYWx0PSIiIHNyYz0iaHR0cHM6Ly9sb2dzMTI0MS54aXRpLmNvbS9oaXQueGl0aT9zPTQ5MDgwNCZzMj0xJnA9TGlzdGVfZGVfcmVzdWx0YXRzX0FjaGF0OjpMaXN0ZV9kZV9yZXN1bHRhdHNfQWNoYXRfMDEmeDE9MSZ4Mj0xJng1PSZ4Nj0xJng3PTEwMCZ4OD0meDk9JTVCQXBwYXJ0ZW1lbnQlNUQlMkMlNUJNYWlzb24lNUQlMkMlNUJMb2Z0KyUyRitBdGVsaWVyJTVEJTJDJTVCVmlsbGElNUQlMkMlNUJQcm9wcmklQzMlQTl0JUMzJUE5JTVEJTJDJTVCVmlhZ2VyJTVEJngxMD0meDExPSZ4MTI9JngxMz0meDE0PSZ4MTUmeDE3PTEmeDIwPSZkaT0mYXQ9JmFjPSI+PC9ub3NjcmlwdD4KPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImFwcGxpY2F0aW9uQmFzZVBhdGgiIG5hbWU9ImFwcGxpY2F0aW9uQmFzZVBhdGgiCiAgICAgICB2YWx1ZT0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vIi8+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJncmFwaGljc0Jhc2VQYXRoIiBuYW1lPSJncmFwaGljc0Jhc2VQYXRoIgogICAgICAgdmFsdWU9Ii9hc3NldC1jb3JhaWwiLz4KPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9Im15QWNjb3VudEJhc2VQYXRoIiBuYW1lPSJteUFjY291bnRCYXNlUGF0aCIKICAgICAgIHZhbHVlPSJodHRwOi8vbW9uY29tcHRlLmxvZ2ljLWltbW8uY29tIi8+Cgo8IS0tIGNmIGNvbW1lbnRhaXJlIHBsdXMgaGF1dCAtLT4KPGhlYWRlciBpZD0ianMtaGVhZGVyLXdyYXBwZXIiIGNsYXNzPSJoZWFkZXItd3JhcHBlciI+CjwhLS0gY2YgY29tbWVudGFpcmUgcGx1cyBoYXV0IC0tPgogICAgPGRpdiBpZD0ianMtaGVhZGVyLWNvbnRhaW5lciIgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPHNwYW4gaWQ9ImJ1dHRvbk1lbnUiIGNsYXNzPSJidXJnZXJNZW51IGpzLW9wZW5OYXZiYXIiPjwvc3Bhbj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgaGVhZGVyIj4KICAgICAgICAgICAgPGRpdiBpZD0ibG9nbyIgY2xhc3M9ImNvbC14cy00IGNvbC1sZy0zIGZpdmUgY29sdW1ucyBhbHBoYSI+CiAgICAgICAgICAgICAgICA8c3BhbiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5M2QzY3ViRzluYVdNdGFXMXRieTVqYjIwdiIgdGl0bGU9IkFubm9uY2VzIGltbW9iaWxpw6hyZXMgTG9naWMtSW1tbyIgY2xhc3M9ImxvZ28td2Vic2l0ZSBqYW1tZXIiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICczMycsICdIZWFkZXI6OkxpZW5fTG9nbycsICdOJyk7Ij48aW1nIHNyYz0iL2Fzc2V0LWNvcmFpbC9pbWcvbG9nb19saWNvbV9ibHVlLnBuZyIgYWx0PSJBbm5vbmNlcyBpbW1vYmlsacOocmVzIExvZ2ljLUltbW8iID48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9ImhlYWRlclBvbmRlcmluZyIgY2xhc3M9ImNvbC14cy0yIGNvbC1sZy01Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTYgY29sLWxnLTQgZWxldmVuIGNvbHVtbnMgb21lZ2EgaGVhZGVyUmlnaHQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVwb3RBbm5vbmNlIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGllbkRBIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMzMnLCAnSGVhZGVyOjpWZW5kcmVfTW9uX0JpZW4nLCAnTicpOyIgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUiIHRpdGxlPSJWZW5kcmUgbW9uIGJpZW4iPlZlbmRyZSBtb24gYmllbjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxpZ24tcmlnaHQiIGlkPSJsb2dpbl9iYXIiIAogICAgICAgICAgICAgICAgICAgIGRhdGEtdXNlcmJhci1hamF4dXJsPSIvYWpheC11c2VyLWJhciIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS11c2VyYmFyLWFqYXhsb2dpbnVybD0iL2FqYXhMb2dpbiIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS11c2VyYmFyLWFqYXhwcm9jZXNzbG9naW51cmw9Ii9hamF4UHJvY2Vzc0xvZ2luIiAKICAgICAgICAgICAgICAgICAgICBkYXRhLXVzZXJiYXItYWpheGZvcmdldHRlbnBhc3N3b3JkdXJsPSIvYWpheEZvcmdvdHRlblBhc3N3b3JkIiAKICAgICAgICAgICAgICAgICAgICBkYXRhLXVzZXJiYXItYWpheGFkZHRvc2VsZWN0aW9udXJsPSIvb2ZmZXIvYWRkLXRvLXNlbGVjdGlvbiIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS11c2VyYmFyLWFqYXhyZW1vdmVmcm9tc2VsZWN0aW9udXJsPSIvb2ZmZXIvcmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdXNlcmJhci1wb3BpbmFkZHRvc2VsZWN0aW9uY29uZmlybXVybD0iL3BvcGluYWNxdWVyZXVycGx1cyI+CiAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxuYXYgaWQ9Im1lbnUiPgogICAgPGRpdiBpZD0ianMtbWVudS1jb250YWluZXIiIGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBwcmltYXJ5LW5hdiI+CiAgICAgICAgICAgIDxkaXYgaWQ9ImpzLW1lbnUtY29sIiBjbGFzcz0iY29sLXhzLTEyIHByaW1hcnktbmF2LWNvbCI+CiAgICAgICAgICAgICAgICA8dWwgaWQ9Im1lbnVfY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im1lbnVfMSIgb25tb3VzZW92ZXI9InNob3dNZW51KDEpIiBvbm1vdXNlb3V0PSJoaWRlTWVudSgxKSIgY2xhc3M9ImNvbHVtbnMgIGN1cnJlbnQtbGkgICI+PGEgaWQ9Im92ZXJfaXRlbV8xIiBjbGFzcz0iY3VycmVudC1pdGVtIiBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS8iIGRhdGEtbnVtPSIxIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6TGllbl9BY2hldGVyJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkFjaGV0ZXI8L3NwYW4+PC9hPgo8L2xpPjxsaSBpZD0ibWVudV8yIiBvbm1vdXNlb3Zlcj0ic2hvd01lbnUoMikiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDIpIiBjbGFzcz0iY29sdW1ucyAgIj48YSBpZD0ib3Zlcl9pdGVtXzIiIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2xvY2F0aW9uLWltbW9iaWxpZXIucGhwIiBkYXRhLW51bT0iMiIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkxpZW5fTG91ZXImIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+TG91ZXI8L3NwYW4+PC9hPgo8dWwgaWQ9InN1Ym1lbnVfMiIgY2xhc3M9InN1Ym1lbnUgIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IC04M3B4Ij48bGkgY2xhc3M9ImNvbHVtbnMgIj48c3BhbiBjbGFzcz0iamFtbWVyIiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5M2QzY3ViRzluYVdNdGFXMXRieTVqYjIwdmJHOWpZWFJwYjI0dGFXMXRiMkpwYkdsbGNpNXdhSEE9IiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6TGllbl9Mb3Vlcl8tX0xvY2F0aW9uJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkxvY2F0aW9uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxzcGFuIGNsYXNzPSJqYW1tZXIiIHJlbD0iaGlkZUxpbms6YUhSMGNITTZMeTkzZDNjdWJHOW5hV010YVcxdGJ5NWpiMjB2Y21WamFHVnlZMmhsTFdOdmJHOWpZWFJwYjI0dWNHaHciIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpMaWVuX0xvdWVyXy1fQ29sb2NhdGlvbiYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5Db2xvY2F0aW9uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxzcGFuIGNsYXNzPSJqYW1tZXIiIHJlbD0iaGlkZUxpbms6YUhSMGNEb3ZMM1poWTJGdVkyVnpMbXh2WjJsakxXbHRiVzh1WTI5dEx3PT0iIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpMaWVuX0xvdWVyXy1fTG9jYXRpb25fZGVfdmFjYW5jZXMmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+TG9jYXRpb24gZGUgdmFjYW5jZXM8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD48L2xpPjxsaSBpZD0ibWVudV8zIiBvbm1vdXNlb3Zlcj0ic2hvd01lbnUoMykiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDMpIiBjbGFzcz0iY29sdW1ucyAgIj48c3BhbiBjbGFzcz0iamFtbWVyIiBpZD0ib3Zlcl9pdGVtXzMiIHJlbD0iaGlkZUxpbms6YUhSMGNITTZMeTkzZDNjdWJHOW5hV010YVcxdGJ5NWpiMjB2WlhOMGFXMWhkR2x2YmkxcGJXMXZZbWxzYVdWeVpRPT0iIGRhdGEtbnVtPSIzIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6VmVuZHJlJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkVzdGltZXI8L3NwYW4+PC9zcGFuPgo8YSBpZD0ib3Zlcl9pdGVtXzMiIGhyZWY9Ii9lc3RpbWF0aW9uLWltbW9iaWxpZXJlIiBkYXRhLW51bT0iMyIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzMzJywgJ0hlYWRlcjo6VmVuZHJlJywgJ04nKTsiIGNsYXNzPSIiPjxkaXYgY2xhc3M9ImVzdGltZXJUb29sdGlwIj5HcmF0dWl0PC9kaXY+PC9hPjx1bCBpZD0ic3VibWVudV8zIiBjbGFzcz0ic3VibWVudSAiIHN0eWxlPSJtYXJnaW4tbGVmdDogLTEwNXB4Ij48bGkgY2xhc3M9ImNvbHVtbnMgIj48c3BhbiBjbGFzcz0iamFtbWVyIiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5M2QzY3ViRzluYVdNdGFXMXRieTVqYjIwdlpYTjBhVzFoZEdsdmJpMXBiVzF2WW1sc2FXVnlaUT09IiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6VmVuZHJlXy1fQ29uZmllel92b3RyZV9iaWVuJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkVzdGltZXIgdm90cmUgYmllbjwvc3Bhbj48L3NwYW4+PC9saT48bGkgY2xhc3M9ImNvbHVtbnMgIj48c3BhbiBjbGFzcz0iamFtbWVyIiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5M2QzY3ViR0ZqYjNSbGFXMXRieTVqYjIwdmNISnBlQzFrWlMxc0xXbHRiVzh2ZG1WdWRHVXZjR0Y1Y3k5bWNtRnVZMlV1YUhSdCIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpMaWVuX1ZlbmRyZV8tX0RlcG90X2RfYW5ub25jZXMmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+UHJpeCBkZSBsJiMwMzk7aW1tb2JpbGllcjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPjwvbGk+PGxpIGlkPSJtZW51XzQiIG9ubW91c2VvdmVyPSJzaG93TWVudSg0KSIgb25tb3VzZW91dD0iaGlkZU1lbnUoNCkiIGNsYXNzPSJjb2x1bW5zICAiPjxzcGFuIGNsYXNzPSJqYW1tZXIiIGlkPSJvdmVyX2l0ZW1fNCIgcmVsPSJoaWRlTGluazphSFIwY0hNNkx5OTNkM2N1Ykc5bmFXTXRhVzF0Ynk1amIyMHZaWGhqYkhWemFYWnBkR1U9IiBkYXRhLW51bT0iNCIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkV4Y2x1c2l2aXRlcyYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5FeGNsdXNpdml0w6lzPC9zcGFuPjwvc3Bhbj4KPC9saT48bGkgaWQ9Im1lbnVfNSIgb25tb3VzZW92ZXI9InNob3dNZW51KDUpIiBvbm1vdXNlb3V0PSJoaWRlTWVudSg1KSIgY2xhc3M9ImNvbHVtbnMgY29sb3ItZ3JleSAiPjxzcGFuIGNsYXNzPSJqYW1tZXIiIGlkPSJvdmVyX2l0ZW1fNSIgcmVsPSJoaWRlTGluazphSFIwY0RvdkwyTnZibk4wY25WcGNtVXViRzluYVdNdGFXMXRieTVqYjIwdiIgZGF0YS1udW09IjUiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpDb25zdHJ1aXJlJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkNvbnN0cnVpcmU8L3NwYW4+PC9zcGFuPgo8dWwgaWQ9InN1Ym1lbnVfNSIgY2xhc3M9InN1Ym1lbnUgIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IC0xMzdweCI+PGxpIGNsYXNzPSJjb2x1bW5zICI+PHNwYW4gY2xhc3M9ImphbW1lciIgcmVsPSJoaWRlTGluazphSFIwY0RvdkwyTnZibk4wY25WcGNtVXViRzluYVdNdGFXMXRieTVqYjIwdiIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkNvbnN0cnVpcmVfLV9Ob3NfYW5ub25jZXMmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+Tm9zIGFubm9uY2VzPC9zcGFuPjwvc3Bhbj48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxzcGFuIGNsYXNzPSJqYW1tZXIiIHJlbD0iaGlkZUxpbms6YUhSMGNEb3ZMMk52Ym5OMGNuVnBjbVV1Ykc5bmFXTXRhVzF0Ynk1amIyMHZZMjl1YzNSeWRXTjBaWFZ5Y3c9PSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkNvbnN0cnVpcmVfLV9Ucm91dmVyX3VuX2NvbnN0cnVjdGV1ciYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5Ucm91dmVyIHVuIGNvbnN0cnVjdGV1cjwvc3Bhbj48L3NwYW4+PC9saT48bGkgY2xhc3M9ImNvbHVtbnMgIj48c3BhbiBjbGFzcz0iamFtbWVyIiByZWw9ImhpZGVMaW5rOmFIUjBjRG92TDJOdmJuTjBjblZwY21VdWJHOW5hV010YVcxdGJ5NWpiMjB2Y21WaGJHbHpZWFJwYjI1eiIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkNvbnN0cnVpcmVfLV9Sw6lhbGlzYXRpb25zJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPlLDqWFsaXNhdGlvbnM8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD48L2xpPjxsaSBpZD0ibWVudV82IiBvbm1vdXNlb3Zlcj0ic2hvd01lbnUoNikiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDYpIiBjbGFzcz0iY29sdW1ucyBjb2xvci1ncmV5ICI+PHNwYW4gY2xhc3M9ImphbW1lciIgaWQ9Im92ZXJfaXRlbV82IiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5dVpYVm1MbXh2WjJsakxXbHRiVzh1WTI5dEx3PT0iIGRhdGEtbnVtPSI2IiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6QWNoZXRlcl9kYW5zX2xlX25ldWYmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+TmV1Zjwvc3Bhbj48L3NwYW4+Cjx1bCBpZD0ic3VibWVudV82IiBjbGFzcz0ic3VibWVudSAiIHN0eWxlPSJtYXJnaW4tbGVmdDogLTEzNXB4Ij48bGkgY2xhc3M9ImNvbHVtbnMgIj48c3BhbiBjbGFzcz0iamFtbWVyIiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5dVpYVm1MbXh2WjJsakxXbHRiVzh1WTI5dEx3PT0iIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpBY2hldGVyX2RhbnNfbGVfbmV1Zl8tX0hhYml0ZXImIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+SGFiaXRlcjwvc3Bhbj48L3NwYW4+PC9saT48bGkgY2xhc3M9ImNvbHVtbnMgIj48c3BhbiBjbGFzcz0iamFtbWVyIiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5dVpYVm1MbXh2WjJsakxXbHRiVzh1WTI5dEwybHVkbVZ6ZEdseSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkFjaGV0ZXJfZGFuc19sZV9uZXVmXy1fRXBhcmduZXImIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+SW52ZXN0aXI8L3NwYW4+PC9zcGFuPjwvbGk+PGxpIGNsYXNzPSJjb2x1bW5zICI+PHNwYW4gY2xhc3M9ImphbW1lciIgcmVsPSJoaWRlTGluazphSFIwY0hNNkx5OXVaWFZtTG14dloybGpMV2x0Ylc4dVkyOXRMM0J5YjIxdmRHVjFjbk09IiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6QWNoZXRlcl9kYW5zX2xlX25ldWZfLV9Ucm91dmV6X3VuX3Byb21vdGV1ciYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5Bbm51YWlyZSBkZXMgcHJvbW90ZXVyczwvc3Bhbj48L3NwYW4+PC9saT48bGkgY2xhc3M9ImNvbHVtbnMgIj48c3BhbiBjbGFzcz0iamFtbWVyIiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5dVpYVm1MbXh2WjJsakxXbHRiVzh1WTI5dEwyVmthWFJ2IiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6QWNoZXRlcl9kYW5zX2xlX25ldWZfLV9BY3R1c19ldF9kb3NzaWVycyYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5BY3R1cyBldCBkb3NzaWVyczwvc3Bhbj48L3NwYW4+PC9saT48L3VsPjwvbGk+PGxpIGlkPSJtZW51XzciIG9ubW91c2VvdmVyPSJzaG93TWVudSg3KSIgb25tb3VzZW91dD0iaGlkZU1lbnUoNykiIGNsYXNzPSJjb2x1bW5zICAgd2l0aC1kYXNoIj48c3BhbiBjbGFzcz0iamFtbWVyIiBpZD0ib3Zlcl9pdGVtXzciIHJlbD0iaGlkZUxpbms6YUhSMGNITTZMeTkzZDNjdWJIVjRMWEpsYzJsa1pXNWpaUzVqYjIwdlpuSXZkbVZ1ZEdVdWNHaHciIHRhcmdldD0iX2JsYW5rIiBkYXRhLW51bT0iNyIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OlByZXN0aWdlJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPlByZXN0aWdlPC9zcGFuPjwvc3Bhbj4KPHNwYW4gY2xhc3M9Imljb24tZGFzaCI+PC9zcGFuPjwvbGk+PGxpIGlkPSJtZW51XzgiIG9ubW91c2VvdmVyPSJzaG93TWVudSg4KSIgb25tb3VzZW91dD0iaGlkZU1lbnUoOCkiIGNsYXNzPSJjb2x1bW5zICAiPjxzcGFuIGNsYXNzPSJqYW1tZXIiIGlkPSJvdmVyX2l0ZW1fOCIgcmVsPSJoaWRlTGluazphSFIwY0hNNkx5OTNkM2N1Ykc5bmFXTXRhVzF0Ynk1amIyMHZZVzV1ZFdGcGNtVXRZV2RsYm1ObGN5MXBiVzF2WW1sc2FXVnlaWE11Y0dodyIgZGF0YS1udW09IjgiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpUcm91dmVyX3VuZV9hZ2VuY2UmIzAzOTssICYjMDM5O04mIzAzOTspOyI+PHNwYW4+QWdlbmNlczwvc3Bhbj48L3NwYW4+CjwvbGk+PGxpIGlkPSJtZW51XzkiIG9ubW91c2VvdmVyPSJzaG93TWVudSg5KSIgb25tb3VzZW91dD0iaGlkZU1lbnUoOSkiIGNsYXNzPSJjb2x1bW5zIHZpc2libGUtbGctYmxvY2sgICI+PHNwYW4gY2xhc3M9ImphbW1lciIgaWQ9Im92ZXJfaXRlbV85IiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5dVpYVm1MbXh2WjJsakxXbHRiVzh1WTI5dEwybHVkbVZ6ZEdseUxuQm9jQT09IiBkYXRhLW51bT0iOSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkludmVzdGlyJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkludmVzdGlyPC9zcGFuPjwvc3Bhbj4KPC9saT48bGkgaWQ9Im1lbnVfMTAiIG9ubW91c2VvdmVyPSJzaG93TWVudSgxMCkiIG9ubW91c2VvdXQ9ImhpZGVNZW51KDEwKSIgY2xhc3M9ImNvbHVtbnMgdmlzaWJsZS1sZy1ibG9jayAgIj48c3BhbiBjbGFzcz0iamFtbWVyIiBpZD0ib3Zlcl9pdGVtXzEwIiByZWw9ImhpZGVMaW5rOmFIUjBjSE02THk5M2QzY3ViRzluYVdNdGFXMXRieTVqYjIwdllXTjBkUzF0WVhKamFHVXRhVzF0YjJKcGJHbGxjaTV3YUhBPSIgZGF0YS1udW09IjEwIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6QWN0dWFsaXRlcyYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5BY3R1YWxpdMOpczwvc3Bhbj48L3NwYW4+Cjx1bCBpZD0ic3VibWVudV8xMCIgY2xhc3M9InN1Ym1lbnUgIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IC0yODdweCI+PGxpIGNsYXNzPSJjb2x1bW5zICI+PHNwYW4gY2xhc3M9ImphbW1lciIgcmVsPSJoaWRlTGluazphSFIwY0hNNkx5OTNkM2N1Ykc5bmFXTXRhVzF0Ynk1amIyMHZZV04wZFMxdFlYSmphR1V0YVcxdGIySnBiR2xsY2k5aFkzUjFjeTFwYlcxdlltbHNhV1Z5TG5Cb2NBPT0iIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAmIzAzOTtDJiMwMzk7LCAmIzAzOTszMyYjMDM5OywgJiMwMzk7SGVhZGVyOjpBY3R1YWxpdGVzXy1fTmF0aW9uYWxlcyYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5OYXRpb25hbGVzPC9zcGFuPjwvc3Bhbj48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxzcGFuIGNsYXNzPSJqYW1tZXIiIHJlbD0iaGlkZUxpbms6YUhSMGNITTZMeTkzZDNjdWJHOW5hV010YVcxdGJ5NWpiMjB2WVdOMGRYTXRhVzF0YjJKcGJHbGxjaTF5WldkcGIyNXpMbkJvY0E9PSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkFjdHVhbGl0ZXNfLV9SZWdpb25hbGVzJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPlLDqWdpb25hbGVzPC9zcGFuPjwvc3Bhbj48L2xpPjxsaSBjbGFzcz0iY29sdW1ucyAiPjxzcGFuIGNsYXNzPSJqYW1tZXIiIHJlbD0iaGlkZUxpbms6YUhSMGNITTZMeTkzZDNjdWJHOW5hV010YVcxdGJ5NWpiMjB2WjNWcFpHVXRhVzF0YjJKcGJHbGxjaTV3YUhBPSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkFjdHVhbGl0ZXNfLV9HdWlkZV9pbW1vYmlsaWVyJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkd1aWRlIGltbW9iaWxpZXI8L3NwYW4+PC9zcGFuPjwvbGk+PGxpIGNsYXNzPSJjb2x1bW5zICI+PHNwYW4gY2xhc3M9ImphbW1lciIgcmVsPSJoaWRlTGluazphSFIwY0hNNkx5OXVaWGR6Y205dmJTNXNiMmRwWXkxcGJXMXZMbU52YlE9PSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICYjMDM5O0MmIzAzOTssICYjMDM5OzMzJiMwMzk7LCAmIzAzOTtIZWFkZXI6OkFjdHVhbGl0ZXNfLV9Fc3BhY2VfcHJlc3NlJiMwMzk7LCAmIzAzOTtOJiMwMzk7KTsiPjxzcGFuPkVzcGFjZSBwcmVzc2U8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD48L2xpPjxsaSBpZD0ibWVudV8xMSIgb25tb3VzZW92ZXI9InNob3dNZW51KDExKSIgb25tb3VzZW91dD0iaGlkZU1lbnUoMTEpIiBjbGFzcz0iY29sdW1ucyB2aXNpYmxlLWxnLWJsb2NrICBsYXN0IGNvbG9yLWdyZXkgIj48c3BhbiBjbGFzcz0iamFtbWVyIiBpZD0ib3Zlcl9pdGVtXzExIiByZWw9ImhpZGVMaW5rOmFIUjBjRG92TDJKc2IyY3ViRzluYVdNdGFXMXRieTVqYjIwdiIgZGF0YS1udW09IjExIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJiMwMzk7QyYjMDM5OywgJiMwMzk7MzMmIzAzOTssICYjMDM5O0hlYWRlcjo6QmxvZyYjMDM5OywgJiMwMzk7TiYjMDM5Oyk7Ij48c3Bhbj5CbG9nPC9zcGFuPjwvc3Bhbj4KPC9saT4gICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9uYXY+CjxkaXYgaWQ9InN1Ym1lbnViZyI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgaWQ9ImpzLW9hcy1zdWJtZW51YmciIGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxpbnB1dCB0eXBlPSJoaWRkZW4iIHZhbHVlPSIiIGlkPSJtZW51X2N1cnJlbnRfdW5pdiIgLz4KPC9oZWFkZXI+CjxkaXYgY2xhc3M9InNhc19ibG9jayBtYXN0aGVhZCIKICAgICBpZD0ic2FzXzc3MzMyIj48L2Rpdj4KCjxkaXYgaWQ9ImpzLWNvbnRlbnQiIGNsYXNzPSJjb250ZW50V3JhcHBlciBsaS1jb250YWluZXIiPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogIHZhciBhcGlIb3N0ID0gImh0dHBzOlwvXC9hcGkubG9naWMtaW1tby5jb20iOwoKICAvLyBpbnRpYWxpemUgdDkgY29uZgoKICB2YXIgYXBwQ29uZiA9ICh0eXBlb2YgYXBpSG9zdCA9PT0gJ3VuZGVmaW5lZCcgfHwgYXBpSG9zdCA9PT0gbnVsbCkgPwogICAgICBudWxsIDoge2FwaVVybDogYXBpSG9zdH07CgoKICAKICB2YXIgdDlDb25maWcgPSBuZXcgVDlDb25maWcoYXBwQ29uZik7Cgo8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2JsdWViaXJkLzMuMy41L2JsdWViaXJkLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQ+CiAgdmFyIHNhcyA9IHNhcyB8fCB7fTsKCiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoCiAgJ0RPTUNvbnRlbnRMb2FkZWQnLAogIGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIGxvYWRTbWFydEFkT25Db25zZW50KCkgewogICAgICB2YXIgc21hcnRhZFNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICBzbWFydGFkU2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKICAgICAgc21hcnRhZFNjcmlwdC5zcmMgPSAnLy9jZWQuc2FzY2RuLmNvbS90YWcvMjc1MS9zbWFydC5qcyc7CgogICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07CiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc21hcnRhZFNjcmlwdCk7CgogICAgICBmdW5jdGlvbiByZWxvYWRTbWFydEFkKCkgewogICAgICAgIGlmIChzYXMgJiYgc2FzLmNtZCkgewogICAgICAgICAgc2FzLmNtZCA9IHNhcy5jbWQgfHwgW107CiAgICAgICAgICBzYXMuY21kLnB1c2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzYXMuc2V0dXAoe25ldHdvcmtpZDogMjc1MSwgZG9tYWluOiAiLy93d3cxNC5zbWFydGFkc2VydmVyLmNvbSIsIGFzeW5jOiB0cnVlfSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHNhcy5jbWQucHVzaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHNhcy5jYWxsKCJvbmVjYWxsIiwgewogICAgICAgICAgICAgIHNpdGVJZDogMTY2MjkxLAogICAgICAgICAgICAgIHBhZ2VJZDogODc2NDYzLAogICAgICAgICAgICAgIGZvcm1hdElkOiAnNTgwOTQsNTgwNDEsNTgwMzksNTgwNjcsNTgwODcsNTgwMzUsNTg2ODksNTgwMzQsNTgwNjksNTgwNzAsNTgwMzgsNTgwNjgsNzU2NzQsNzczMzInLAogICAgICAgICAgICAgIHRhcmdldDogY3JlYXRlVGFyZ2V0KFtbeyJsb2NJZCI6IjEiLCJsb2NMZXZlbCI6MCwicG9uZGVyaW5nTmFtZSI6IklMRSBERSBGUkFOQ0UiLCJsb2NOYW1lIjoiSUxFIERFIEZSQU5DRSIsImxvY0NwIjoiNzUwMDgiLCJsb2NaaXAiOiI3NSIsImxvY0xhdCI6IjAiLCJsb2NMbmciOiIwIn0seyJsb2NJZCI6IjEwMCIsImxvY0xldmVsIjoxLCJwb25kZXJpbmdOYW1lIjoiUEFSSVMiLCJsb2NOYW1lIjoiUEFSSVMiLCJsb2NDcCI6Ijc1IiwibG9jWmlwIjoiNzUiLCJsb2NMYXQiOiIwIiwibG9jTG5nIjoiMCJ9XV0pLAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZXRUaW1lb3V0KHJlbG9hZFNtYXJ0QWQsIDUwMCkKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJlbG9hZFNtYXJ0QWQoKTsKICAgIH0KCiAgICBDb29raWVDb25zZW50ICYmIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KGxvYWRTbWFydEFkT25Db25zZW50LCA0KTsKICB9KTsKPC9zY3JpcHQ+CjxzY3JpcHQ+CiAgICBmdW5jdGlvbiBjcmVhdERPTUVsZW1lbnQgKG9iaikgewogICAgICAgIGxldCBET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvYmpbJ25hbWUnXSk7CiAgICAgICAgZGVsZXRlIG9ialsnbmFtZSddOwogICAgICAgIGZvcihjb25zdCBba2V5LHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7CiAgICAgICAgICAgIGlmIChrZXkgPT09ICdjaGlsZCcpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIERPTUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3JlYXRET01FbGVtZW50KHZhbHVlKSk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBET01FbGVtZW50W2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIERPTUVsZW1lbnQ7CiAgICB9CiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICBDb29raWVDb25zZW50LmhpdE9uQ29uc2VudChmdW5jdGlvbiAoKXsKICAgICAgICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdOwogICAgICAgICAgICB2YXIgc2NyaXB0ID0gY3JlYXRET01FbGVtZW50KHsgJ25hbWUnOiAnc2NyaXB0JywgJ3R5cGUnOiAndGV4dC9qYXZhc2NyaXB0JywgJ3NyYyc6ICdodHRwczovL3N0YXRpYy5jcml0ZW8ubmV0L2pzL2xkL2xkLmpzJyB9KTsKICAgICAgICAgICAgdmFyIHNjcmlwdDIgPSBjcmVhdERPTUVsZW1lbnQoeyAnbmFtZSc6ICdzY3JpcHQnLCAndHlwZSc6ICd0ZXh0L2phdmFzY3JpcHQnLCAnc3JjJzogJy8vc3RhdGljLmNyaXRlby5uZXQvanMvbGQvcHVibGlzaGVydGFnLmpzJyB9KTsKCiAgICAgICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQyKTsKICAgICAgICB9LCA0KTsKICAgIH0pOwo8L3NjcmlwdD4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3VycmVudFVybCIgaWQ9ImN1cnJlbnRVcmwiIHZhbHVlPSJodHRwcyYjeDNBOyYjeDJGOyYjeDJGO3d3dy5sb2dpYy1pbW1vLmNvbSYjeDJGO3ZlbnRlLWltbW9iaWxpZXItcGFyaXMtNzUsMTAwXzEmI3gyRjtvcHRpb25zJiN4MkY7Z3JvdXBwcnB0eXBlc2lkcyYjeDNEOzEsMiw2LDcsMTIsMTUmI3gyRjtvcmRlciYjeDNEO3VwZGF0ZV9kYXRlX2Rlc2MiPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im5iUmVzdWx0YXRzIiBpZD0ibmJSZXN1bHRhdHMiIHZhbHVlPSI0NjI5Ij48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJqc29uTG9jYWxpdGllcyIgaWQ9Impzb25Mb2NhbGl0aWVzIiB2YWx1ZT0iJiN4NUI7JiN4NUI7JiN4N0I7JnF1b3Q7bG9jSWQmcXVvdDsmI3gzQTsmcXVvdDsxJnF1b3Q7LCZxdW90O2xvY0xldmVsJnF1b3Q7JiN4M0E7MCwmcXVvdDtwb25kZXJpbmdOYW1lJnF1b3Q7JiN4M0E7JnF1b3Q7SUxFJiN4MjA7REUmI3gyMDtGUkFOQ0UmcXVvdDssJnF1b3Q7bG9jTmFtZSZxdW90OyYjeDNBOyZxdW90O0lMRSYjeDIwO0RFJiN4MjA7RlJBTkNFJnF1b3Q7LCZxdW90O2xvY0NwJnF1b3Q7JiN4M0E7JnF1b3Q7NzUwMDgmcXVvdDssJnF1b3Q7bG9jWmlwJnF1b3Q7JiN4M0E7JnF1b3Q7NzUmcXVvdDssJnF1b3Q7bG9jTGF0JnF1b3Q7JiN4M0E7JnF1b3Q7MCZxdW90OywmcXVvdDtsb2NMbmcmcXVvdDsmI3gzQTsmcXVvdDswJnF1b3Q7JiN4N0Q7LCYjeDdCOyZxdW90O2xvY0lkJnF1b3Q7JiN4M0E7JnF1b3Q7MTAwJnF1b3Q7LCZxdW90O2xvY0xldmVsJnF1b3Q7JiN4M0E7MSwmcXVvdDtwb25kZXJpbmdOYW1lJnF1b3Q7JiN4M0E7JnF1b3Q7UEFSSVMmcXVvdDssJnF1b3Q7bG9jTmFtZSZxdW90OyYjeDNBOyZxdW90O1BBUklTJnF1b3Q7LCZxdW90O2xvY0NwJnF1b3Q7JiN4M0E7JnF1b3Q7NzUmcXVvdDssJnF1b3Q7bG9jWmlwJnF1b3Q7JiN4M0E7JnF1b3Q7NzUmcXVvdDssJnF1b3Q7bG9jTGF0JnF1b3Q7JiN4M0E7JnF1b3Q7MCZxdW90OywmcXVvdDtsb2NMbmcmcXVvdDsmI3gzQTsmcXVvdDswJnF1b3Q7JiN4N0Q7JiN4NUQ7JiN4NUQ7Ij48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdXJyZW50UGFnZSIgaWQ9ImN1cnJlbnRQYWdlIiB2YWx1ZT0iMSI+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIHZhciByb3V0ZU5hbWUgPSAicHJzIjsKPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgdmFyIHNlYXJjaFBhcmFtcyA9IHsiY29udHJvbGxlciI6IkFwcGxpY2F0aW9uXFxDb250cm9sbGVyXFxPZmZlciIsImFjdGlvbiI6Imxpc3QiLCJwYWdlIjoxLCJtYXBwZXIiOiJzYWxlIiwidW5pdmVyc2UiOjEsIm9yZGVyIjoidXBkYXRlX2RhdGVfZGVzYyIsImdvb2dsZVJlbWFya2V0aW5nVHlwZSI6InNlYXJjaHJlc3VsdHMiLCJ0cmFuc2FjdGlvblR5cGVzIjoiMSw1LDYiLCJjb3JhaWwiOnRydWUsImxvY05hbWVzIjoicGFyaXMtNzUiLCJsb2NJZDEiOiIxMDAiLCJsb2NMZXZlbDEiOiIxIiwiZ3JvdXBQcnBUeXBlc0lkcyI6IjEsMiw2LDcsMTIsMTUiLCJyb3V0ZU5hbWUiOiJwcnMiLCJhcmVhTWluIjpudWxsLCJwcmljZU1pbiI6bnVsbCwicHJpY2VNYXgiOm51bGwsIm5iUm9vbXMiOm51bGx9Owo8L3NjcmlwdD48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgY3VycmVudFVybCA9ICJodHRwOi8vd3d3LmxvZ2ljLWltbW8uY29tL3ZlbnRlLWltbW9iaWxpZXItcGFyaXMtNzUsMTAwXzEvb3B0aW9ucy9ncm91cHBycHR5cGVzaWRzPTEsMiw2LDcsMTIsMTUvb3JkZXI9dXBkYXRlX2RhdGVfZGVzYyI7Cjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgaXRlbXNUeXBlRGVCaWVucyA9IFt7ImxhYmVsIjoiQXBwYXJ0ZW1lbnQiLCJ2YWx1ZSI6MSwic2VsZWN0ZWQiOnRydWV9LHsibGFiZWwiOiJNYWlzb24iLCJ2YWx1ZSI6Miwic2VsZWN0ZWQiOnRydWV9LHsibGFiZWwiOiJUZXJyYWluIiwidmFsdWUiOjMsInNlbGVjdGVkIjpmYWxzZX0seyJsYWJlbCI6IkJ1cmVhdSBcLyBDb21tZXJjZSIsInZhbHVlIjo0LCJzZWxlY3RlZCI6ZmFsc2V9LHsibGFiZWwiOiJJbW1ldWJsZSIsInZhbHVlIjo1LCJzZWxlY3RlZCI6ZmFsc2V9LHsibGFiZWwiOiJMb2Z0IFwvIEF0ZWxpZXIiLCJ2YWx1ZSI6Niwic2VsZWN0ZWQiOnRydWV9LHsibGFiZWwiOiJWaWxsYSIsInZhbHVlIjo3LCJzZWxlY3RlZCI6dHJ1ZX0seyJsYWJlbCI6IkNoYWxldCIsInZhbHVlIjo4LCJzZWxlY3RlZCI6ZmFsc2V9LHsibGFiZWwiOiJDaFx1MDBlMnRlYXUiLCJ2YWx1ZSI6OSwic2VsZWN0ZWQiOmZhbHNlfSx7ImxhYmVsIjoiUGFya2luZyIsInZhbHVlIjoxMCwic2VsZWN0ZWQiOmZhbHNlfSx7ImxhYmVsIjoiRmVybWUiLCJ2YWx1ZSI6MTEsInNlbGVjdGVkIjpmYWxzZX0seyJsYWJlbCI6IlByb3ByaVx1MDBlOXRcdTAwZTkiLCJ2YWx1ZSI6MTIsInNlbGVjdGVkIjp0cnVlfSx7ImxhYmVsIjoiSFx1MDBmNHRlbCBwYXJ0aWN1bGllciIsInZhbHVlIjoxMywic2VsZWN0ZWQiOmZhbHNlfSx7ImxhYmVsIjoiQXV0cmUiLCJ2YWx1ZSI6MTQsInNlbGVjdGVkIjpmYWxzZX0seyJsYWJlbCI6IlZpYWdlciIsInZhbHVlIjoxNSwic2VsZWN0ZWQiOnRydWV9XTsKPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgdmFyIGpzb25Mb2NhbGl0aWVzID0gW3sibGN0X3BhcmVudF9pZCI6IjEiLCJsY3RfcGFyZW50IjoiSUxFIERFIEZSQU5DRSIsImxjdF9pZCI6IjEwMCIsImxjdF9sZXZlbCI6IjEiLCJsY3RfbmFtZSI6IlBBUklTIiwibGN0X3Bvc3RfY29kZSI6Ijc1IiwibGN0X2NvdW50IjoiIiwibGN0X2dlbyI6W10sImRpc3RyaWN0cyI6W119XTsKPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgdmFyIGl0ZW1zTmJyZVBpZWNlcyA9IFt7ImxhYmVsIjoxLCJzZWxlY3RlZCI6ZmFsc2UsInZhbHVlIjoxfSx7ImxhYmVsIjoyLCJzZWxlY3RlZCI6ZmFsc2UsInZhbHVlIjoyfSx7ImxhYmVsIjozLCJzZWxlY3RlZCI6ZmFsc2UsInZhbHVlIjozfSx7ImxhYmVsIjo0LCJzZWxlY3RlZCI6ZmFsc2UsInZhbHVlIjo0fSx7ImxhYmVsIjo1LCJzZWxlY3RlZCI6ZmFsc2UsInZhbHVlIjo1fSx7ImxhYmVsIjo2LCJzZWxlY3RlZCI6ZmFsc2UsInZhbHVlIjo2fV07Cjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIHZhciB4aXRpRm9ybSA9IHsic2VhcmNoQnRuIjoiQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpWYWxpZGF0aW9uX0NyaXRlcmU6OlZhbGlkYXRpb25fQ3JpdGVyZV9SRUNIRVJDSEVSIiwic2VhcmNoQWR2YW5jZWRDcml0ZXJpYUJ0biI6IkFjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6VmFsaWRhdGlvbl9Dcml0ZXJlOjpWYWxpZGF0aW9uX0NyaXRlcmVfQXZhbmNlc19SRUNIRVJDSEVSIiwic2VhcmNoRGlzdHJpY3RCdG4iOiJBY3Rpb25fTGlzdGVfQW5ub25jZXM6OlZhbGlkYXRpb25fQ3JpdGVyZTo6VmFsaWRhdGlvbl9RdWFydGllciIsImFkZFRvd24iOiJBY3Rpb25fTGlzdGVfQW5ub25jZXM6OlZhbGlkYXRpb25fQ3JpdGVyZTo6VmFsaWRhdGlvbl9Dcml0ZXJlX0xvY2FsaXNhdGlvbl8iLCJyZW1vdmVUb3duIjoiQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpWYWxpZGF0aW9uX0NyaXRlcmU6OlN1cHByZXNzaW9uX0NyaXRlcmVfTG9jYWxpc2F0aW9uXyJ9Owo8L3NjcmlwdD48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgdW5pdmVyc2UgPSAxOwo8L3NjcmlwdD4KCjxzZWN0aW9uIGlkPSJqcy1zZWFyY2gtc2VjdGlvbiIgY2xhc3M9ImxpLXJlc3VsdCBzZWFyY2gtc2VjdGlvbi13cmFwcGVyIj4KICAgIDxkaXYgaWQ9ImpzLXNlYXJjaC1zZWN0aW9uLWNvbnRhaW5lciIgY2xhc3M9ImNvbnRhaW5lciBzZWFyY2gtc2VjdGlvbiI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvcm0taG9yaXpvbnRhbCBqcy1mb3JtU2VhcmNoIiBpZD0iZm9ybVNlYXJjaFBSIiBhY3Rpb249Ii9yZXdyaXRpbmdPZmZlclNlYXJjaCIgbWV0aG9kPSJwb3N0IgogICAgICAgICAgICAgICAgICBub3ZhbGlkYXRlPgogICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0ianNvbkxvY2FsaXRpZXMiIHZhbHVlPSdbeyJsb2NJZCI6IjIzNTkwIiwibG9jMiI6IjIzNTkwIiwibG9jTGV2ZWwiOiIyIiwibG9jWmlwIjoiNzUwMTEiLCJsb2MwIjoiMSIsImxvY05hbWUwIjoiSUxFIERFIEZSQU5DRSIsImxvYzEiOiIxMDAiLCJsb2NOYW1lMSI6IlBBUklTIiwibG9jTmFtZTIiOiJQQVJJUyAxMUUiLCJsb2NOYW1lIjoiUEFSSVMgMTFFIiwibG9jOTgiOiIwIiwibG9jOTkiOiIwIiwibG9jMyI6IiJ9XSc+IC0tPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImxvY2FsaXRpZXNIaWRkZW4iIG5hbWU9ImxvY2FsaXRpZXMiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idW5pdmVyc2UiIHZhbHVlPSIxIi8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0ib3JkZXIiIG5hbWU9Im9yZGVyIiB2YWx1ZT0idXBkYXRlX2RhdGVfZGVzYyIvPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImFyZWFNaW4iIG5hbWU9ImFyZWFNaW4iLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJwcmljZU1pbiIgbmFtZT0icHJpY2VNaW4iLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJwcmljZU1heCIgbmFtZT0icHJpY2VNYXgiLz4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgc2VhcmNoQmxvY2tsaW5rIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgc2VhcmNoIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9ImxpY29tLWJyZWFkY3J1bWIiPgogICAgPHRyPgogICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vIiB0aXRsZT0iVmVudGUiIGNsYXNzPSJzaXplXzExIGJsYWNrIGJvbGQiPlZlbnRlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzaXplXzExIGJsYWNrIGJvbGQiPiAmbmJzcDsmIzEyNDsmbmJzcDsgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibGFzdC1lbGVtZW50Ij5Wb3RyZSByZWNoZXJjaGU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXJlc3VsdC1vZmZlci1maXJzdHJvdyIgaWQ9InRvcGFkdmFuY2Vkem9uZSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlyZXN1bHQtb2ZmZXItZmlyc3Ryb3ctZmllbGRzIGpzLVQ5YmxvY2tCbHVySGVpZ2h0IiBpZD0ianMtdDlab25lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8c3BhbiBjbGFzcz0ianMtbW9yZSI+Li4uPC9zcGFuPi0tPgoKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgaWQ9ImxvY2FsaXR5UFIiIG5hbWU9ImxvY2FsaXR5IiB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1tZCByZXF1aXJlZCIgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEteHQtbGFiZWw9IjE2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1tZXNzYWdlLXJlcXVpcmVkPSJWZXVpbGxleiBzYWlzaXIgYXUgbW9pbnMgdW5lIGxvY2FsaXTDqSAobWF4LiAxMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWZpZWxkaWQ9ImxvY2FsaXRpZXNIZWxwTWVzc2FnZSI+IC0tPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJsb2NhbGl0eVBSIiB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1tZCByZXF1aXJlZCIgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEteHQtbGFiZWw9IjE2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1tZXNzYWdlLXJlcXVpcmVkPSJWZXVpbGxleiBzYWlzaXIgYXUgbW9pbnMgdW5lIGxvY2FsaXTDqSAobWF4LiAxMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWZpZWxkaWQ9ImxvY2FsaXRpZXNIZWxwTWVzc2FnZSI+CgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0ibG9jYWxpdGllc0hlbHBNZXNzYWdlIiBjbGFzcz0iaGVscC1ibG9jayBlcnJvci13cmFwcGVyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlyZXN1bHQtb2ZmZXItbW9yZSBsaXJlc3VsdC1vZmZlci1tb3JlLWZpcnN0cm93IHRleHQtcmlnaHQganMtb3BlbmVyUXVhcnRpZXJzIj4gLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPkRhbnMgcXVlbCBxdWFydGllciA/IDxpIGNsYXNzPSJpY29uLWNpcmNsZS1wbHVzLWJvcmRlciI+PC9pPjwvYT4gLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgPC9kaXY+IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBob3RvTmV3Q2hlY2tib3ggY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InBob3RvTmV3Q2hlY2tib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGlkPSJwaG90b05ld0NoZWNrYm94TGFiZWwiIGZvcj0icGhvdG9OZXdDaGVja2JveCI+QW5ub25jZShzKSBhdmVjIHBob3RvczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGxpcmVzdWx0LW9mZmVyLWJsb2NrcyBqcy16b25lUXVhcnRpZXJzIiBkYXRhLXN0YXR1cz0id2FpdGluZ09wZW5pbmciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0zIiBpZD0ianMtbG9jYWxpdGllc1pvbmUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy04IGNvbC14cy1vZmZzZXQtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImpzLXF1YXJ0aWVyc1pvbmVBbGxMb2NhbGl0aWVzIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGxpcmVzdWx0LW9mZmVyLWFkdmFuY2VkLXN1Ym1pdCB2aXNpYmxlLWxnLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0zIGNvbC14cy1vZmZzZXQtNiB0ZXh0LXJpZ2h0IGRlbGV0ZSBqcy1jbGVhclF1YXJ0aWVycyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE+RWZmYWNlcjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMgdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gbG9naWMtYnRuLWxhcmdlIGxvZ2ljLWJ0bi13aGl0ZSBzdWJtaXRCdG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXhpdGktY2xpY2s9IkFjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6VmFsaWRhdGlvbl9Dcml0ZXJlOjpWYWxpZGF0aW9uX1F1YXJ0aWVyIj5WYWxpZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxpcmVzdWx0LW9mZmVyLXNlY29uZHJvdyBjbGVhcmZpeCIgaWQ9ImpzLWNyaXRlcmFab25lIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXNlY29uZHJvdy1jb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXNlY29uZHJvdy1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlyZXN1bHQtb2ZmZXItc2Vjb25kcm93LWZpZWxkcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlyZXN1bHQtb2ZmZXItdHlwZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1ncm91cCBsaWNvbS1idG4tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUeXBlIGRlIGJpZW4gPHNwYW4gY2xhc3M9Imljb24tYXJyb3czZG93biI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGpzLW1lbnVUeXBlRGVCaWVucyIgcm9sZT0ibWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlyZXN1bHQtb2ZmZXItcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAgbGljb20tYnRuLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGnDqGNlcyA8c3BhbiBjbGFzcz0iaWNvbi1hcnJvdzNkb3duIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUganMtbWVudU5icmVQaWVjZXMiIHJvbGU9Im1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxpcmVzdWx0LWRlc2t0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXJlc3VsdC1vZmZlci1zaXplIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlucHV0LXN5bWJvbCBpbnB1dC1zeW1ib2wtbTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJhcmVhTWluRGVzayIgZGF0YS1uYW1lPSJhcmVhTWluIiB0eXBlPSJ0ZWwiIHBsYWNlaG9sZGVyPSJNaW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im51bWJlciBmb3JtLWNvbnRyb2wgaW5wdXQtbWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1tZXNzYWdlLW51bWJlcj0iTGEgdmFsZXVyIGRvaXQgw6p0cmUgZGUgdHlwZSBudW3DqXJpcXVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItZmllbGRpZD0iYXJlYU1pbkRlc2tNZXNzYWdlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iMTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImFyZWFNaW5EZXNrTWVzc2FnZSIgY2xhc3M9ImhlbHAtYmxvY2siPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxpcmVzdWx0LWJ1ZGdldC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXJlc3VsdC1vZmZlci1idWRnZXRtaW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlucHV0LXN5bWJvbCBpbnB1dC1zeW1ib2wtZXVybyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJwcmljZU1pbkRlc2siIGRhdGEtbmFtZT0icHJpY2VNaW4iIHR5cGU9InRlbCIgcGxhY2Vob2xkZXI9Ik1pbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im51bWJlciBmb3JtLWNvbnRyb2wgaW5wdXQtbWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItbWVzc2FnZS1udW1iZXI9IkxhIHZhbGV1ciBkb2l0IMOqdHJlIGRlIHR5cGUgbnVtw6lyaXF1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1maWVsZGlkPSJwcmljZU1pbkRlc2tIZWxwTWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoPSIxMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InByaWNlTWluRGVza0hlbHBNZXNzYWdlIiBjbGFzcz0iaGVscC1ibG9jayBlcnJvci13cmFwcGVyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxpcmVzdWx0LW9mZmVyLWJ1ZGdldG1heCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtc3ltYm9sIGlucHV0LXN5bWJvbC1ldXJvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9InByaWNlTWF4RGVzayIgZGF0YS1uYW1lPSJwcmljZU1heCIgdHlwZT0idGVsIiBwbGFjZWhvbGRlcj0iTWF4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibnVtYmVyIGdyZWF0ZXJ0aGFuIGZvcm0tY29udHJvbCBpbnB1dC1tZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1ncmVhdGVydGhhbj0icHJpY2VNaW5EZXNrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLW1lc3NhZ2UtbnVtYmVyPSJMYSB2YWxldXIgZG9pdCDDqnRyZSBkZSB0eXBlIG51bcOpcmlxdWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItbWVzc2FnZS1ncmVhdGVydGhhbj0iQ2UgbW9udGFudCBkb2l0IMOqdHJlIHN1cMOpcmlldXIgw6Agdm90cmUgbW9udGFudCBtaW5pbXVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWZpZWxkaWQ9InByaWNlTWF4RGVza0hlbHBNZXNzYWdlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjExIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHJpY2VNYXhEZXNrSGVscE1lc3NhZ2UiIGNsYXNzPSJoZWxwLWJsb2NrIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlyZXN1bHQtdGFibGV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlyZXN1bHQtb2ZmZXItc2l6ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1zeW1ib2wgaW5wdXQtc3ltYm9sLW0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iYXJlYU1pblRhYmxldCIgZGF0YS1uYW1lPSJhcmVhTWluIiB0eXBlPSJ0ZWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Im1pbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibnVtYmVyIGZvcm0tY29udHJvbCBpbnB1dC1tZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLW1lc3NhZ2UtbnVtYmVyPSJMYSB2YWxldXIgZG9pdCDDqnRyZSBkZSB0eXBlIG51bcOpcmlxdWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1maWVsZGlkPSJhcmVhTWluVGFibGV0TWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjExIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJhcmVhTWluVGFibGV0TWVzc2FnZSIgY2xhc3M9ImhlbHAtYmxvY2sgZXJyb3Itd3JhcHBlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlyZXN1bHQtYnVkZ2V0LWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxpcmVzdWx0LW9mZmVyLWJ1ZGdldG1pbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtc3ltYm9sIGlucHV0LXN5bWJvbC1ldXJvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9InByaWNlTWluVGFibGV0IiBkYXRhLW5hbWU9InByaWNlTWluIiB0eXBlPSJ0ZWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJtaW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJudW1iZXIgZm9ybS1jb250cm9sIGlucHV0LW1kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLW1lc3NhZ2UtbnVtYmVyPSJMYSB2YWxldXIgZG9pdCDDqnRyZSBkZSB0eXBlIG51bcOpcmlxdWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItZmllbGRpZD0icHJpY2VNaW5UYWJsZXRIZWxwTWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoPSIxMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InByaWNlTWluVGFibGV0SGVscE1lc3NhZ2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImhlbHAtYmxvY2sgZXJyb3Itd3JhcHBlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXJlc3VsdC1vZmZlci1idWRnZXRtYXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlucHV0LXN5bWJvbCBpbnB1dC1zeW1ib2wtZXVybyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJwcmljZU1heFRhYmxldCIgZGF0YS1uYW1lPSJwcmljZU1heCIgdHlwZT0idGVsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0ibWF4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibnVtYmVyIGdyZWF0ZXJ0aGFuIGZvcm0tY29udHJvbCBpbnB1dC1tZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1ncmVhdGVydGhhbj0icHJpY2VNaW5UYWJsZXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItbWVzc2FnZS1udW1iZXI9IkxhIHZhbGV1ciBkb2l0IMOqdHJlIGRlIHR5cGUgbnVtw6lyaXF1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1tZXNzYWdlLWdyZWF0ZXJ0aGFuPSJDZSBtb250YW50IGRvaXQgw6p0cmUgc3Vww6lyaWV1ciDDoCB2b3RyZSBtb250YW50IG1pbmltdW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItZmllbGRpZD0icHJpY2VNYXhUYWJsZXRIZWxwTWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoPSIxMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InByaWNlTWF4VGFibGV0SGVscE1lc3NhZ2UiIGNsYXNzPSJoZWxwLWJsb2NrIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlyZXN1bHQtb2ZmZXItc2VhcmNoIHN1Ym1pdEJ0biIgaWQ9ImpzLXN1Ym1pdEJ0blBSIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tZ2xhc3MgaWNvbi13aGl0ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXJlc3VsdC1vZmZlci1tb3JlIGxpcmVzdWx0LW9mZmVyLW1vcmUtc2Vjb25kcm93IHRleHQtcmlnaHQganMtb3BlbmVyQWR2YW5jZWRab25lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjdG9wYWR2YW5jZWR6b25lIj5QbHVzIGRlIGNyaXTDqHJlcyA8aSBjbGFzcz0iaWNvbi1jaXJjbGUtcGx1cy1ib3JkZXIiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBsaXJlc3VsdC1vZmZlci1hZHZhbmNlZCBqcy1hZHZhbmNlZFpvbmUiIGRhdGEtc3RhdHVzPSJ3YWl0aW5nT3BlbmluZyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMganMtb3B0aW9uc1pvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5PcHRpb25zPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNlYXJjaE9wdGlvbnNbXSIgaWQ9ImxpLW9wdGlvbnMtMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjAiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1vcHRpb25zLTAiPkFubm9uY2UocykgZGUgLSBkZSA3IGpvdXJzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNlYXJjaE9wdGlvbnNbXSIgaWQ9ImxpLW9wdGlvbnMtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1vcHRpb25zLTEiPkFubm9uY2UocykgYXZlYyBwaG90b3M8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2VhcmNoT3B0aW9uc1tdIiBpZD0ibGktb3B0aW9ucy0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMiIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLW9wdGlvbnMtMiI+QW5ub25jZXMgZGFucyBsJ2FuY2llbjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzZWFyY2hPcHRpb25zW10iIGlkPSJsaS1vcHRpb25zLTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIzIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktb3B0aW9ucy0zIj5Bbm5vbmNlcyBlbiBleGNsdXNpdml0w6k8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2VhcmNoT3B0aW9uc1tdIiBpZD0ibGktb3B0aW9ucy00IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLW9wdGlvbnMtNCI+QmllbnMgbWV1YmzDqXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzZWN1cml0eS1kaXZpZGVyIj5Tw6ljdXJpdMOpPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFTZWN1cml0eVtdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibGktc2VjdXJpdHktMTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxMyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLXNlY3VyaXR5LTEzIj5HYXJkaWVuPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFTZWN1cml0eVtdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibGktc2VjdXJpdHktMTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxNiIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLXNlY3VyaXR5LTE2Ij5JbnRlcnBob25lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFTZWN1cml0eVtdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibGktc2VjdXJpdHktMTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxOSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLXNlY3VyaXR5LTE5Ij5EaWdpY29kZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMiBqcy1jaGFtYnJlc1pvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5DaGFtYnJlczwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0IGpzLWFsbEJlZHJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ibmJfYmVkcm9vbXNfYWxsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJuYl9iZWRyb29tc19hbGwiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im5iX2JlZHJvb21zX2FsbCI+VG91dGVzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQganMtbkJlZHJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9Im5iQmVkcm9vbXNbXSIgaWQ9ImxpLWJlZHJvb21zLTFyb29tIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLWJlZHJvb21zLTFyb29tIj4xPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0IGpzLW5CZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJuYkJlZHJvb21zW10iIGlkPSJsaS1iZWRyb29tcy0ycm9vbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1iZWRyb29tcy0ycm9vbSI+MjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCBqcy1uQmVkcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ibmJCZWRyb29tc1tdIiBpZD0ibGktYmVkcm9vbXMtM3Jvb20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIzIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktYmVkcm9vbXMtM3Jvb20iPjM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQganMtbkJlZHJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9Im5iQmVkcm9vbXNbXSIgaWQ9ImxpLWJlZHJvb21zLTRyb29tIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLWJlZHJvb21zLTRyb29tIj40PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0IGpzLW5CZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJuYkJlZHJvb21zW10iIGlkPSJsaS1iZWRyb29tcy01cm9vbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjUiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1iZWRyb29tcy01cm9vbSI+NTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCBqcy1uQmVkcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ibmJCZWRyb29tc1tdIiBpZD0ibGktYmVkcm9vbXMtNnJvb20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI2IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktYmVkcm9vbXMtNnJvb20iPjYgZXQgKzwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTUganMtY29tbW9kaXRlc1pvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5Db21tb2RpdMOpczwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJhZHZhbmNlZENyaXRlcmlhQmFzaWNzW10iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWFkdmFuY2VkLWZpcnN0LTE0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxNCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktYWR2YW5jZWQtZmlyc3QtMTQiPkNhdmU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJhZHZhbmNlZENyaXRlcmlhQmFzaWNzW10iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWFkdmFuY2VkLWZpcnN0LTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjMiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLWFkdmFuY2VkLWZpcnN0LTMiPlBhcmtpbmc8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJhZHZhbmNlZENyaXRlcmlhQmFzaWNzW10iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWFkdmFuY2VkLWZpcnN0LTIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktYWR2YW5jZWQtZmlyc3QtMjEiPkJveDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFCYXNpY3NbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibGktYWR2YW5jZWQtZmlyc3QtNSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktYWR2YW5jZWQtZmlyc3QtNSI+VGVycmFzc2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJhZHZhbmNlZENyaXRlcmlhQmFzaWNzW10iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWFkdmFuY2VkLWZpcnN0LTIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktYWR2YW5jZWQtZmlyc3QtMjAiPkNoZW1pbsOpZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFCYXNpY3NbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibGktYWR2YW5jZWQtZmlyc3QtMTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEyIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1hZHZhbmNlZC1maXJzdC0xMiI+UmVub3bDqTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFCYXNpY3NbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibGktYWR2YW5jZWQtZmlyc3QtMTciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjE3IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1hZHZhbmNlZC1maXJzdC0xNyI+QWlyIGNvbmRpdGlvbm7DqTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFCYXNpY3NbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibGktYWR2YW5jZWQtZmlyc3QtMjIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIyIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1hZHZhbmNlZC1maXJzdC0yMiI+VG9pbGV0dGVzIGluZMOpcGVuZGFudGVzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFCYXNpY3NbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibGktYWR2YW5jZWQtc2Vjb25kLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLWFkdmFuY2VkLXNlY29uZC0xIj5HYXJhZ2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJhZHZhbmNlZENyaXRlcmlhQmFzaWNzW10iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWFkdmFuY2VkLXNlY29uZC0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1hZHZhbmNlZC1zZWNvbmQtMiI+QmFsY29uPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iYWR2YW5jZWRDcml0ZXJpYUJhc2ljc1tdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJsaS1hZHZhbmNlZC1zZWNvbmQtMTUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjE1IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1hZHZhbmNlZC1zZWNvbmQtMTUiPkphcmRpbjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94IHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFCYXNpY3NbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibGktYWR2YW5jZWQtc2Vjb25kLTI0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyNCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktYWR2YW5jZWQtc2Vjb25kLTI0Ij5QYXJxdWV0PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iYWR2YW5jZWRDcml0ZXJpYUJhc2ljc1tdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJsaS1hZHZhbmNlZC1zZWNvbmQtMTgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjE4IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1hZHZhbmNlZC1zZWNvbmQtMTgiPlBpc2NpbmU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJhZHZhbmNlZENyaXRlcmlhQmFzaWNzW10iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWFkdmFuY2VkLXNlY29uZC00IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI0IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1hZHZhbmNlZC1zZWNvbmQtNCI+QXNjZW5zZXVyPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMiBqcy1jaGF1ZmZhZ2Vab25lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+Q2hhdWZmYWdlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFIZWF0aW5nW10iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJsaS1oZWF0aW5nLTciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI3IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktaGVhdGluZy03Ij5HYXo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iYWR2YW5jZWRDcml0ZXJpYUhlYXRpbmdbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWhlYXRpbmctNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjYiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1oZWF0aW5nLTYiPkNlbnRyYWw8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iYWR2YW5jZWRDcml0ZXJpYUhlYXRpbmdbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWhlYXRpbmctMTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxMCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLWhlYXRpbmctMTAiPkVsZWN0cmlxdWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iYWR2YW5jZWRDcml0ZXJpYUhlYXRpbmdbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWhlYXRpbmctOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjkiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsaS1oZWF0aW5nLTkiPkluZGl2aWR1ZWw8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iYWR2YW5jZWRDcml0ZXJpYUhlYXRpbmdbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImxpLWhlYXRpbmctMTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxMSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxpLWhlYXRpbmctMTEiPkZpb3VsPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2tib3ggdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImFkdmFuY2VkQ3JpdGVyaWFIZWF0aW5nW10iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJsaS1oZWF0aW5nLTgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI4IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGktaGVhdGluZy04Ij5BdSBzb2w8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGxpcmVzdWx0LW9mZmVyLWFkdmFuY2VkLXN1Ym1pdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0yIGNvbC14cy1vZmZzZXQtNyB0ZXh0LXJpZ2h0IGRlbGV0ZSBqcy1jbGVhckFkdmFuY2VkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhPkVmZmFjZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMyB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIGxvZ2ljLWJ0bi1sYXJnZSBsb2dpYy1idG4td2hpdGUgcHVsbC1jZW50ZXIgc3VibWl0QnRuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXhpdGktY2xpY2s9IkFjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6VmFsaWRhdGlvbl9Dcml0ZXJlOjpWYWxpZGF0aW9uX0NyaXRlcmVfQXZhbmNlc19SRUNIRVJDSEVSIj5WYWxpZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVzIGNyaXTDqHJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9zZWN0aW9uPjxkaXYgaWQ9ImpzLXNvcnRiYXIiIGNsYXNzPSJjb250YWluZXIgc29ydGJhciBzb3J0YmFyLWxhcmdlIj4KICAgIDxoMSBjbGFzcz0ib2ZmZXItdm9sdW1ldHJ5Ij4KICAgICAgICA0NjI5IGFubm9uY2VzIGQnYWNoYXQgaW1tb2JpbGllciBQYXJpcyAoNzUpPGJyLz4KICAgIDwvaDE+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1Tb3J0LUNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWZpbHRlciI+CiAgICAgICAgICAgIDxkaXYgaWQ9InNvcnRiYXJfdG9wIiBjbGFzcz0ic2l6ZV8xMiI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iaWRTZWFyY2hFbmdpbmVUb1N1Ym1pdCIgbmFtZT0iaWRTZWFyY2hFbmdpbmVUb1N1Ym1pdCIgdmFsdWU9InNlYXJjaF9yZXN1bHRfZm9ybSIvPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idW5pdmVyc2Vfc29ydCIgaWQ9InVuaXZlcnNlX3NvcnQiIHZhbHVlPSIxIj4gICAgPGRpdiBjbGFzcz0ic29ydC1sZWZ0IHNlbGVjdC13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b21zZWxlY3QgaW5wdXQtc29ydC1jcml0ZXJpYSBzZWxlY3QtZHJvcGRvd24iPgogICAgICAgICAgICA8c2VsZWN0IG5hbWU9InNvcnRfY3JpdGVyaWFfc2VsZWN0IiBpZD0ic29ydF9jcml0ZXJpYV9zZWxlY3QiIGNsYXNzPSJzZWxlY3REcm9wZG93blNvcnQiIHRpdGxlPSJDcml0JiN4RTg7cmUmI3gyMDtkZSYjeDIwO3RyaSIgZGF0YS1oaWRkZW5maWVsZD0ib3JkZXIiIGRhdGEtbXNkcm9wZG93bi1tYWluY3NzPSJtYWluc2tpbiIgZGF0YS1tc2Ryb3Bkb3duLXZpc2libGVyb3dzPSIxMCI+PG9wdGlvbiB2YWx1ZT0iMCI+VHJpZXIgcGFyPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InJlY29fcGR0X2Rlc2MiIGRhdGEtY3JpdGVyaWEteGl0aS1jbGljaz0iQWN0aW9uX0xpc3RlX0Fubm9uY2VzJiN4M0E7JiN4M0E7VHJpX2Rlc19Bbm5vbmNlcyYjeDNBOyYjeDNBO1RyaV9wYXJfUmVjb21tYW5kYXRpb25zIj5SZWNvbW1hbmRhdGlvbnM8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0icHJpY2VfYXNjIiBkYXRhLWNyaXRlcmlhLXhpdGktY2xpY2s9IkFjdGlvbl9MaXN0ZV9Bbm5vbmNlcyYjeDNBOyYjeDNBO1RyaV9kZXNfQW5ub25jZXMmI3gzQTsmI3gzQTtUcmlfcGFyX1ByaXhfY3JvaXNzYW50Ij5Qcml4IGNyb2lzc2FudDwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJwcmljZV9kZXNjIiBkYXRhLWNyaXRlcmlhLXhpdGktY2xpY2s9IkFjdGlvbl9MaXN0ZV9Bbm5vbmNlcyYjeDNBOyYjeDNBO1RyaV9kZXNfQW5ub25jZXMmI3gzQTsmI3gzQTtUcmlfcGFyX1ByaXhfZGVjcm9pc3NhbnQiPlByaXggZMOpY3JvaXNzYW50PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImFyZWFfYXNjIiBkYXRhLWNyaXRlcmlhLXhpdGktY2xpY2s9IkFjdGlvbl9MaXN0ZV9Bbm5vbmNlcyYjeDNBOyYjeDNBO1RyaV9kZXNfQW5ub25jZXMmI3gzQTsmI3gzQTtUcmlfcGFyX1N1cmZhY2VfY3JvaXNzYW50ZSI+U3VyZmFjZSBjcm9pc3NhbnRlPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImFyZWFfZGVzYyIgZGF0YS1jcml0ZXJpYS14aXRpLWNsaWNrPSJBY3Rpb25fTGlzdGVfQW5ub25jZXMmI3gzQTsmI3gzQTtUcmlfZGVzX0Fubm9uY2VzJiN4M0E7JiN4M0E7VHJpX3Bhcl9TdXJmYWNlX2RlY3JvaXNzYW50ZSI+U3VyZmFjZSBkw6ljcm9pc3NhbnRlPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Im5iX3Jvb21zX2FzYyIgZGF0YS1jcml0ZXJpYS14aXRpLWNsaWNrPSJBY3Rpb25fTGlzdGVfQW5ub25jZXMmI3gzQTsmI3gzQTtUcmlfZGVzX0Fubm9uY2VzJiN4M0E7JiN4M0E7VHJpX3Bhcl9OYl9waWVjZXNfY3JvaXNzYW50Ij5OYiBwacOoY2VzIGNyb2lzc2FudDwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJuYl9yb29tc19kZXNjIiBkYXRhLWNyaXRlcmlhLXhpdGktY2xpY2s9IkFjdGlvbl9MaXN0ZV9Bbm5vbmNlcyYjeDNBOyYjeDNBO1RyaV9kZXNfQW5ub25jZXMmI3gzQTsmI3gzQTtUcmlfcGFyX05iX3BpZWNlc19kZWNyb2lzc2FudCI+TmIgcGnDqGNlcyBkw6ljcm9pc3NhbnQ8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0idXBkYXRlX2RhdGVfZGVzYyIgc2VsZWN0ZWQ9InNlbGVjdGVkIiBkYXRhLWNyaXRlcmlhLXhpdGktY2xpY2s9IkFjdGlvbl9MaXN0ZV9Bbm5vbmNlcyYjeDNBOyYjeDNBO1RyaV9kZXNfQW5ub25jZXMmI3gzQTsmI3gzQTtUcmlfcGFyX05vdXZlYXV0ZXMiPk5vdXZlYXV0w6lzPC9vcHRpb24+PC9zZWxlY3Q+PHAgaWQ9InNvcnRfY3JpdGVyaWFfc2VsZWN0X2Vycm9ycyIgY2xhc3M9ImVycm9yLXdyYXBwZXIiPjwvcD4gICAgICAgIDwvZGl2PgogICAgICAgIDxpIGNsYXNzPSJwb3Bpbi1pbmZvIGpzLXBvcGluLWluZm8iIHRpdGxlPSJpbmZvcm1hdGlvbiI+aTwvaT4KICAgICAgICA8ZGl2IGlkPSJwb3Bpbi1sZWdhbC1pbmZvIiBjbGFzcz0icG9waW4gcG9waW4tbGVnYWwtaW5mbyBjbGVhcmZpeCI+CiAgICA8aDMgY2xhc3M9InBvcGluLWxlZ2FsLWluZm8tdGl0bGUiPkNvbW1lbnQgbGVzIGFubm9uY2VzIHNvbnQtZWxsZXMgY2xhc3PDqWVzIHN1ciBub3RyZSBTaXRlID88L2gzPgogICAgPHAgY2xhc3M9InBvcGluLWxlZ2FsLWluZm8tY29udGVudCI+TGUgdHJpIGRlcyBhbm5vbmNlcyBlc3QgcsOpYWxpc8OpIMOgIGzigJlhaWRlIGTigJl1biBhbGdvcml0aG1lIHByZW5hbnQgZW4gY29tcHRlIGRlcyBjcml0w6hyZXMgc8OpbGVjdGlvbm7DqXMKICAgIHBhciBsJ2ludGVybmF1dGUgbG9ycyBkZSBzYSByZWNoZXJjaGUgOiBlbiBwbHVzIGR1IHRyaSBwYXIgZMOpZmF1dCwgaWwgZXN0IHBvc3NpYmxlIGRlIHRyaWVyIHBhciBQcml4IGNyb2lzc2FudHMsCiAgICBQcml4IGTDqWNyb2lzc2FudHMsIFN1cmZhY2UgY3JvaXNzYW50ZSwgU3VyZmFjZSBkw6ljcm9pc3NhbnRlLCBOb21icmUgZGUgcGnDqGNlcyBjcm9pc3NhbnQsIE5vbWJyZSBkZSBwacOoY2VzCiAgICBkw6ljcm9pc3NhbnQgZXQgTm91dmVhdXTDqXMuIExlIHRyaSBwYXIgZMOpZmF1dCBkZXMgYW5ub25jZXMgKGludGl0dWzDqSDCqyBUcmkgcGFyIHJlY29tbWFuZGF0aW9ucyDCuyBzdXIgbGEgcGFnZSBkZQogICAgcsOpc3VsdGF0cykgZXN0IGzigJlvcmRyZSBk4oCZYWZmaWNoYWdlIGRlcyBhbm5vbmNlcyBxdWkgc+KAmWFwcGxpcXVlIGF1dG9tYXRpcXVlbWVudCDDoCBwYXJ0aXIgZHUgbW9tZW50IG/DuSBs4oCZaW50ZXJuYXV0ZQogICAgbuKAmWEgcGFzIHBlcnNvbm5hbGlzw6kgc29uIHRyaSBvdSBzcMOpY2lmacOpIGRlcyBjcml0w6hyZXMgZGUgcHLDqWbDqXJlbmNlLiBTZWxvbiBs4oCZb3B0aW9uIHBheWFudGUgw6l2ZW50dWVsbGVtZW50IGFjdGl2w6llIHBhcgogICAgICAgIGzigJlhbm5vbmNldXIgc3VyIHVuZSBvdSBwbHVzaWV1cnMgZGUgc2VzIGFubm9uY2VzIGFpbnNpIHF1ZSBsZXVyIGRhdGUgZGUgbWlzZSDDoCBqb3VyLCBjZWxsZXMtY2kgcG91cnJvbnQgYsOpbsOpZmljaWVyLAogICAgICAgIGRhbnMgbGUgdHJpIGluaXRpYWwgcGFyIGTDqWZhdXQgZHUgU2l0ZSwgZCd1bmUgcHJpb3JpdMOpIGQnYWZmaWNoYWdlIGVuIGxpc3RlIGRlIHLDqXN1bHRhdHMgZHUgU2l0ZS4KICAgIDwvcD4KICAgIDxidXR0b24gY2xhc3M9ImJ0bi1wb3Bpbi1jbG9zZWQiPlRlcm1pbsOpPC9idXR0b24+CjwvZGl2PiAgICA8L2Rpdj4KCiAgICA8IS0tICAgICAgICA8ZGl2IGNsYXNzPSJzb3J0LXJpZ2h0Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJib2xkIGxibC1uYnBlcnBhZ2UiPk5iIHLDqXN1bHRhdHMvcGFnZTwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbXNlbGVjdCBpbnB1dC1uYnBlcnBhZ2UiPi0tPgogICAgICAgICAgICA8IS0tICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pi0tPgoKICAgIAo8L2Rpdj4gICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWFsZXJ0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQtZW1haWwiPgogICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIGxvZ2ljLWJ0bi1zbWFsbCBsb2dpYy1idG4td2hpdGUgdGV4dC1sZWZ0IHBvcGluLWFlaSIKICAgICAgICAgICAgICAgICAgICBkYXRhLXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQUVJVE9QLUZPUk1BRUktU0lURSIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiIAogICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsPSIvcG9waW5hZWlzaWdudXAiIAogICAgICAgICAgICAgICAgICAgIGRhdGEtcG9zaXRpb249Ikxpc3RlX1Jlc3VsdGF0c19IYXV0IiAKICAgICAgICAgICAgICAgIGRhdGEtaGVpZ2h0PSIzNDAiCiAgICAgICAgZGF0YS13aWR0aD0iNTAwIgogICAgPgogICAgICAgIDxpIGNsYXNzPSJpY29uLWJlbGwtYm9yZGVyIj48L2k+CiAgICAgICAgPHA+Q3LDqWV6IHVuZSBhbGVydGUgcG91ciBjZXR0ZSByZWNoZXJjaGU8L3A+CiAgICA8L2J1dHRvbj4KPC9kaXY+ICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxzZWN0aW9uIGlkPSJqcy1vZmZlci1saXN0LXNlY3Rpb24iPgogICAgPGRpdiBpZD0ianMtb2ZmZXItbGlzdC1jb250YWluZXIiIGNsYXNzPSJvZmZlci1saXN0LWNvbnRhaW5lciBjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWxpc3QtY29udGVudCByb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1saXN0LXJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlciBvZmZlci1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0FwYXJ0bWVudENvbXBsZXgiICAgICAgICBjbGFzcz0ib2ZmZXItbGlzdC1pdGVtIj4KICAgIDxkaXYgaWQ9ImhlYWRlci1vZmZlci1FNzI5RDA0Ny0xQTIyLTE5RTgtNjdDMS1FRTkwNTBCMzNFNTUiCiAgICAgICAgIGRhdGEtcmVzdWx0PSJzdGFuZGFyZFJlc3VsdCIKICAgICAgICAgZGF0YS1wb3NpdGlvbj0iMCIKICAgICAgICAgZGF0YS1hZ2Nsb2dvdXJsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWdjL2VhYy9lYWMxMDkyZC03NjhkLTRmMWEtNWNhYS03NzY0M2EyNmE5OGEvbG9nby8yNjB4MTYwXzhlZTY1NjRmLTFhMzgtNDQ2Yi04ZWRhLWM2MjU4M2NmNjUyMS5qcGciCiAgICAgICAgIGNsYXNzPSJvZmZlci1ibG9jayBjbGVhcmZpeCI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZSI+CiAgICA8ZGl2IGNsYXNzPSJwaWN0dXJlLXdyYXBwZXIiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYi1saW5rIG9mZmVyLWxpbmsgZGVmYXVsdC1waWN0dXJlIGltZ0xpcXVpZEZpbGwgaW1nTGlxdWlkIiBkYXRhLXRyaWdnZXItaW1nbGlxdWlkPSIxIiBkYXRhLWltZ0xpcXVpZC1maWxsPSJ0cnVlIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxhenkiIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICBhbHQ9IlZlbnRlIGFwcGFydGVtZW50IFBhcmlzIDEzICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjMyPC9zcGFuPiBtwrIgZW52aXJvbiAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+MTwvc3Bhbj4gcGnDqGNlIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My9lNzIvOS85NTgxYjM3My1kMjhiLTRiNGYtOWI3NS1lYjk4NTE4MDY5M2EuanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+PGRpdiBjbGFzcz0iY2FwIGZsYWcgIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGl0ZW1zY29wZT48c3BhbiBpdGVtcHJvcD0iYXZhaWxhYmlsaXR5Ij48c3BhbiBjbGFzcz0iIj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PiAgICAgICAgPGEgY2xhc3M9ImFkZC10by1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iRTcyOUQwNDctMUEyMi0xOUU4LTY3QzEtRUU5MDUwQjMzRTU1IgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci1FNzI5RDA0Ny0xQTIyLTE5RTgtNjdDMS1FRTkwNTBCMzNFNTUiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICA8L2E+CiAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSJFNzI5RDA0Ny0xQTIyLTE5RTgtNjdDMS1FRTkwNTBCMzNFNTUiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT4KICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZS1tb3JlIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1waWN0dXJlLWNvdW50Ij4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbi0taW1hZ2UiPjwvaT4gMS82PHNwYW4+IC0gVm9pciBsZXMgcGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtcHJpY2UiPgogICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItcHJpY2UiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICAgICAgICAgICAgPHNwYW4+NTIwIDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1iYW5rIG1lYSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9lLWltbW9iaWxpZXIuY3JlZGl0LWFncmljb2xlLmZyL3NpbXVsY2EvP09SST1zZWxvZ2VyY2FtcGFnbmUmeHRvcj1BTC0yLVtwYXJ0ZW5hcmlhdF0tW0xvZ2ljLWltbW9dLVtsaWVuX3NlcnZpY2VzXS1bcGRsXS1bZGVza3RvcF0iIHRpdGxlPSJRdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPyIgY2xhc3M9InNpemVfMTEgcmVkIHVuZGVybGluZSIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0xpZW5fUGFydGVuYWlyZV9CYW5jYWlyZTo6TGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlX0xpc3RlX0Fubm9uY2VzJywgJ04nKTsiIHJlbD0ibm9mb2xsb3ciPk91IDIgMDk5IOKCrCAvIG1vaXMqIDxici8+UXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID88L2E+ICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9Im5hbWUiIGNvbnRlbnQ9IkFwcGFydGVtZW50Ii8+CiAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50PSIzMiBtwrIgLiAxIHBpw6hjZSAuIFBhcmlzIDEzICg3NTAxMykiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLWU3MjlkMDQ3LTFhMjItMTllOC02N2MxLWVlOTA1MGIzM2U1NS5odG0iIHRpdGxlPSJWZW50ZSBzdHVkaW8gUGFyaXMgMTNlIDMyIG3CsiIgY2xhc3M9Im9mZmVyLWxpbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6QmxvY19Bbm5vbmNlOjpCbG9jX0Fubm9uY2VfMTo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj5WZW50ZSBhcHBhcnRlbWVudDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLW1lYXN1cmluZy10YXBlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+MzI8L3NwYW4+IG3CsiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4xPC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLWhhbGYiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1sb2NhbGl0eSI+UGFyaXMgMTMgKDc1MDEzKTwvc3Bhbj48L2Rpdj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtZTcyOWQwNDctMWEyMi0xOWU4LTY3YzEtZWU5MDUwYjMzZTU1Lmh0bSIgdGl0bGU9IlBhcmlzIiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tc2VjdG9yIG9mZmVyLXNlY3RvciBvZmZlci1saW5rIj5QYXJpczwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1hZ2VuY3lMb2dvIG5vTG9nbyI+CiAgICAKICAgIAogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEgY2xlYXJmaXgiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWRldGFpbHMtY3RhLS1kZWNvdXZyaXIiPiBWb2lyIGwnYW5ub25jZTwvc3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdCI+ICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IkU3MjlEMDQ3LTFBMjItMTlFOC02N0MxLUVFOTA1MEIzM0U1NSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1lbWFpbCI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLXRlbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iRTcyOUQwNDctMUEyMi0xOUU4LTY3QzEtRUU5MDUwQjMzRTU1IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXRlbGVwaG9uZSI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9BcGFydG1lbnRDb21wbGV4IiAgICAgICAgY2xhc3M9Im9mZmVyLWxpc3QtaXRlbSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItOEY1NTNCNkItOUE4RC1ENTg0LTkxMTQtNDJBRkUyMjREREFCIgogICAgICAgICBkYXRhLXJlc3VsdD0ic3RhbmRhcmRSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjEiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2FnYy9lYWMvZWFjMTA5MmQtNzY4ZC00ZjFhLTVjYWEtNzc2NDNhMjZhOThhL2xvZ28vMjYweDE2MF84ZWU2NTY0Zi0xYTM4LTQ0NmItOGVkYS1jNjI1ODNjZjY1MjEuanBnIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAwOSAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz42Nzwvc3Bhbj4gbcKyIGVudmlyb24gJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjM8L3NwYW4+IHBpw6hjZXMiIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0zMzV4MjUzLzhmNS8wLzA4ZWNjNDQyLWRmYWYtNGI5YS05NzQxLTBkYjMwODFlZDQ2Ni5qcGciPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZsYWctY29udGFpbmVyIj48ZGl2IGNsYXNzPSJjYXAgZmxhZyAiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciIgaXRlbXNjb3BlPjxzcGFuIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiPjxzcGFuIGNsYXNzPSIiPjwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+ICAgICAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI4RjU1M0I2Qi05QThELUQ1ODQtOTExNC00MkFGRTIyNEREQUIiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1lbGVtZW50dG9tb3ZlPSIjaGVhZGVyLW9mZmVyLThGNTUzQjZCLTlBOEQtRDU4NC05MTE0LTQyQUZFMjI0RERBQiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LWJvcmRlciI+PC9pPgogICAgICAgIDwvYT4KICAgICAgICA8YSBjbGFzcz0icmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjhGNTUzQjZCLTlBOEQtRDU4NC05MTE0LTQyQUZFMjI0RERBQiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1zZWxlY3RlZCI+PC9pPgogICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlLW1vcmUiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLXBpY3R1cmUtY291bnQiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uLS1pbWFnZSI+PC9pPiAxLzY8c3Bhbj4gLSBWb2lyIGxlcyBwaG90b3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzIj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1wcmljZSI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1wcmljZSIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgICAgICAgICA8c3Bhbj44MjYgMDAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLWJhbmsgbWVhIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2UtaW1tb2JpbGllci5jcmVkaXQtYWdyaWNvbGUuZnIvc2ltdWxjYS8/T1JJPXNlbG9nZXJjYW1wYWduZSZ4dG9yPUFMLTItW3BhcnRlbmFyaWF0XS1bTG9naWMtaW1tb10tW2xpZW5fc2VydmljZXNdLVtwZGxdLVtkZXNrdG9wXSIgdGl0bGU9IlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/IiBjbGFzcz0ic2l6ZV8xMSByZWQgdW5kZXJsaW5lIiB0YXJnZXQ9Il9ibGFuayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnTGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlOjpMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmVfTGlzdGVfQW5ub25jZXMnLCAnTicpOyIgcmVsPSJub2ZvbGxvdyI+T3UgMyAzMzQg4oKsIC8gbW9pcyogPGJyLz5RdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPzwvYT4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3RpayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQiLz4KICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9IjY3IG3CsiAuIDMgcGnDqGNlcyAuIFBhcmlzIDA5ICg3NTAwOSkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLThmNTUzYjZiLTlhOGQtZDU4NC05MTE0LTQyYWZlMjI0ZGRhYi5odG0iIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCAzIHBpw6hjZXMgUGFyaXMgOWUgNjcgbcKyIiBjbGFzcz0ib2ZmZXItbGluayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV8yOjpCbG9jX0Fubm9uY2VfVHlwZV9kZV9CaWVuJywgJ04nKTsiIGZsYWc9ImlzU3RhbmRhcmQiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLXR5cGUiPlZlbnRlIGFwcGFydGVtZW50PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tbWVhc3VyaW5nLXRhcGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz42Nzwvc3Bhbj4gbcKyICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1yb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXBpZWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjM8L3NwYW4+IHAuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWJlZHJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tYmVkcm9vbSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4yPC9zcGFuPiBjaC4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24taGFsZiI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLWxvY2FsaXR5Ij5QYXJpcyAwOSAoNzUwMDkpPC9zcGFuPjwvZGl2PjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS04ZjU1M2I2Yi05YThkLWQ1ODQtOTExNC00MmFmZTIyNGRkYWIuaHRtIiB0aXRsZT0iUGFyaXMiIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1zZWN0b3Igb2ZmZXItc2VjdG9yIG9mZmVyLWxpbmsiPlBhcmlzPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gbm9Mb2dvIj4KICAgIAogICAgCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YSBjbGVhcmZpeCI+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItZGV0YWlscy1jdGEtLWRlY291dnJpciI+IFZvaXIgbCdhbm5vbmNlPC9zcGFuPgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0Ij4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS1lbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iOEY1NTNCNkItOUE4RC1ENTg0LTkxMTQtNDJBRkUyMjREREFCIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWVtYWlsIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tdGVsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI4RjU1M0I2Qi05QThELUQ1ODQtOTExNC00MkFGRTIyNEREQUIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tdGVsZXBob25lIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0FwYXJ0bWVudENvbXBsZXgiICAgICAgICBjbGFzcz0ib2ZmZXItbGlzdC1pdGVtIj4KICAgIDxkaXYgaWQ9ImhlYWRlci1vZmZlci01OTI2NEMyQy0wMUVBLUVGNjEtRjMxNS03NjQ1M0ZBNjQ5MTAiCiAgICAgICAgIGRhdGEtcmVzdWx0PSJzdGFuZGFyZFJlc3VsdCIKICAgICAgICAgZGF0YS1wb3NpdGlvbj0iMiIKICAgICAgICAgZGF0YS1hZ2Nsb2dvdXJsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWdjLzEyOS8xMjk2ZThhNi1hYzkwLTVjZGYtNWE5Zi0zZjA5ZWRmMjhhY2EvbG9nby8yNjB4MTYwX2YwMThkYzc4LTIxOTUtNGI4OC04MGE2LTdjMDUzYWY2ZTY1ZC5qcGciCiAgICAgICAgIGNsYXNzPSJvZmZlci1ibG9jayBjbGVhcmZpeCI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZSI+CiAgICA8ZGl2IGNsYXNzPSJwaWN0dXJlLXdyYXBwZXIiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYi1saW5rIG9mZmVyLWxpbmsgZGVmYXVsdC1waWN0dXJlIGltZ0xpcXVpZEZpbGwgaW1nTGlxdWlkIiBkYXRhLXRyaWdnZXItaW1nbGlxdWlkPSIxIiBkYXRhLWltZ0xpcXVpZC1maWxsPSJ0cnVlIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxhenkiIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICBhbHQ9IlZlbnRlIGFwcGFydGVtZW50IFBhcmlzIDExICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4yPC9zcGFuPiBwacOoY2VzIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My81OTIvNy83ZjA4NGYyYy1mZWE4LTQxNzItYmM2OC1lOWUyODdjMzM4NzMuanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+PGRpdiBjbGFzcz0iY2FwIGZsYWcgIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGl0ZW1zY29wZT48c3BhbiBpdGVtcHJvcD0iYXZhaWxhYmlsaXR5Ij48c3BhbiBjbGFzcz0iIj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PiAgICAgICAgPGEgY2xhc3M9ImFkZC10by1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iNTkyNjRDMkMtMDFFQS1FRjYxLUYzMTUtNzY0NTNGQTY0OTEwIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci01OTI2NEMyQy0wMUVBLUVGNjEtRjMxNS03NjQ1M0ZBNjQ5MTAiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICA8L2E+CiAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI1OTI2NEMyQy0wMUVBLUVGNjEtRjMxNS03NjQ1M0ZBNjQ5MTAiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT4KICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZS1tb3JlIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1waWN0dXJlLWNvdW50Ij4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbi0taW1hZ2UiPjwvaT4gMS80PHNwYW4+IC0gVm9pciBsZXMgcGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtcHJpY2UiPgogICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItcHJpY2UiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICAgICAgICAgICAgPHNwYW4+MjYyIDUwMCDigqw8L3NwYW4+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1iYW5rIG1lYSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9lLWltbW9iaWxpZXIuY3JlZGl0LWFncmljb2xlLmZyL3NpbXVsY2EvP09SST1zZWxvZ2VyY2FtcGFnbmUmeHRvcj1BTC0yLVtwYXJ0ZW5hcmlhdF0tW0xvZ2ljLWltbW9dLVtsaWVuX3NlcnZpY2VzXS1bcGRsXS1bZGVza3RvcF0iIHRpdGxlPSJRdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPyIgY2xhc3M9InNpemVfMTEgcmVkIHVuZGVybGluZSIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0xpZW5fUGFydGVuYWlyZV9CYW5jYWlyZTo6TGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlX0xpc3RlX0Fubm9uY2VzJywgJ04nKTsiIHJlbD0ibm9mb2xsb3ciPk91IDEgMDU5IOKCrCAvIG1vaXMqIDxici8+UXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID88L2E+ICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9Im5hbWUiIGNvbnRlbnQ9IkFwcGFydGVtZW50Ii8+CiAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50PSIyIHBpw6hjZXMgLiBQYXJpcyAxMSAoNzUwMTEpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS01OTI2NGMyYy0wMWVhLWVmNjEtZjMxNS03NjQ1M2ZhNjQ5MTAuaHRtIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIFBhcmlzIDExZSIgY2xhc3M9Im9mZmVyLWxpbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6QmxvY19Bbm5vbmNlOjpCbG9jX0Fubm9uY2VfMzo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj5WZW50ZSBhcHBhcnRlbWVudDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4yPC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1iZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWJlZHJvb20iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+MTwvc3Bhbj4gY2guICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLWhhbGYiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1sb2NhbGl0eSI+UGFyaXMgMTEgKDc1MDExKTwvc3Bhbj48L2Rpdj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtNTkyNjRjMmMtMDFlYS1lZjYxLWYzMTUtNzY0NTNmYTY0OTEwLmh0bSIgdGl0bGU9IlBhcmlzIiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tc2VjdG9yIG9mZmVyLXNlY3RvciBvZmZlci1saW5rIj5QYXJpczwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1hZ2VuY3lMb2dvIG5vTG9nbyI+CiAgICAKICAgIAogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEgY2xlYXJmaXgiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWRldGFpbHMtY3RhLS1kZWNvdXZyaXIiPiBWb2lyIGwnYW5ub25jZTwvc3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdCI+ICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IjU5MjY0QzJDLTAxRUEtRUY2MS1GMzE1LTc2NDUzRkE2NDkxMCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1lbWFpbCI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLXRlbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iNTkyNjRDMkMtMDFFQS1FRjYxLUYzMTUtNzY0NTNGQTY0OTEwIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXRlbGVwaG9uZSI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9BcGFydG1lbnRDb21wbGV4IiAgICAgICAgY2xhc3M9Im9mZmVyLWxpc3QtaXRlbSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItMzdEOEFERDktRTAzRC0wRjYxLTdDMTItODc4MjNCMEJGNEM0IgogICAgICAgICBkYXRhLXJlc3VsdD0ic3RhbmRhcmRSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjMiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAxMyAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz42MDwvc3Bhbj4gbcKyIGVudmlyb24gJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjM8L3NwYW4+IHBpw6hjZXMiIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0zMzV4MjUzLzM3ZC9mL2Y5ZGUzMWY4LTVjM2QtNDBmNy04ZDE2LTRhMTRiMmNhMzAzYy5qcGciPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZsYWctY29udGFpbmVyIj48ZGl2IGNsYXNzPSJjYXAgZmxhZyAiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciIgaXRlbXNjb3BlPjxzcGFuIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiPjxzcGFuIGNsYXNzPSIiPjwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+ICAgICAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSIzN0Q4QUREOS1FMDNELTBGNjEtN0MxMi04NzgyM0IwQkY0QzQiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1lbGVtZW50dG9tb3ZlPSIjaGVhZGVyLW9mZmVyLTM3RDhBREQ5LUUwM0QtMEY2MS03QzEyLTg3ODIzQjBCRjRDNCIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LWJvcmRlciI+PC9pPgogICAgICAgIDwvYT4KICAgICAgICA8YSBjbGFzcz0icmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjM3RDhBREQ5LUUwM0QtMEY2MS03QzEyLTg3ODIzQjBCRjRDNCIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1zZWxlY3RlZCI+PC9pPgogICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlLW1vcmUiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLXBpY3R1cmUtY291bnQiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uLS1pbWFnZSI+PC9pPiAxLzQ8c3Bhbj4gLSBWb2lyIGxlcyBwaG90b3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzIj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1wcmljZSI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1wcmljZSIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgICAgICAgICA8c3Bhbj43NTQgODAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLWJhbmsgbWVhIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2UtaW1tb2JpbGllci5jcmVkaXQtYWdyaWNvbGUuZnIvc2ltdWxjYS8/T1JJPXNlbG9nZXJjYW1wYWduZSZ4dG9yPUFMLTItW3BhcnRlbmFyaWF0XS1bTG9naWMtaW1tb10tW2xpZW5fc2VydmljZXNdLVtwZGxdLVtkZXNrdG9wXSIgdGl0bGU9IlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/IiBjbGFzcz0ic2l6ZV8xMSByZWQgdW5kZXJsaW5lIiB0YXJnZXQ9Il9ibGFuayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnTGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlOjpMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmVfTGlzdGVfQW5ub25jZXMnLCAnTicpOyIgcmVsPSJub2ZvbGxvdyI+T3UgMyAwNDcg4oKsIC8gbW9pcyogPGJyLz5RdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPzwvYT4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3RpayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQiLz4KICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9IjYwIG3CsiAuIDMgcGnDqGNlcyAuIFBhcmlzIDEzICg3NTAxMykiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTM3ZDhhZGQ5LWUwM2QtMGY2MS03YzEyLTg3ODIzYjBiZjRjNC5odG0iIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCAzIHBpw6hjZXMgUGFyaXMgMTNlIDYwIG3CsiIgY2xhc3M9Im9mZmVyLWxpbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6QmxvY19Bbm5vbmNlOjpCbG9jX0Fubm9uY2VfNDo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj5WZW50ZSBhcHBhcnRlbWVudDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLW1lYXN1cmluZy10YXBlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+NjA8L3NwYW4+IG3CsiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4zPC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1iZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWJlZHJvb20iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Mjwvc3Bhbj4gY2guICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLWhhbGYiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1sb2NhbGl0eSI+UGFyaXMgMTMgKDc1MDEzKTwvc3Bhbj48L2Rpdj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtMzdkOGFkZDktZTAzZC0wZjYxLTdjMTItODc4MjNiMGJmNGM0Lmh0bSIgdGl0bGU9IlBhcmlzIDEzw6htZSIgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLXNlY3RvciBvZmZlci1zZWN0b3Igb2ZmZXItbGluayI+UGFyaXMgMTPDqG1lPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gbm9Mb2dvIj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLW1vcmVwIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FnZW5jZS1pbW1vYmlsaWVyZS9wYXJpcy0xMmVncmF2ZW1lL2Fubm9uY2VzLWltbW9iaWxpZXItcGFyaXMtMTJlZ3JhdmVtZV83NTAxMi1CREFBMjVFMS01MTI1LTQ5NUEtOEYyNC1CNDE3N0EyRTA1QjEuaHRtbCIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTM1NjgxLS1bRHVvMl0tW0xJXS1bMTUzNDAxXS1bMTIyNTY0NF0nKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItYWdlbmN5LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkJMRyBJTU1PQklMSUVSIj5CTEcgSU1NT0JJTElFUjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1hZ2VuY3ktd2Vic2l0ZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYmxnaW1tb2JpbGllci5jb20iIHRpdGxlPSJDbGlxdWV6IGljaSBwb3VyIHZpc2l0ZXIgbGUgc2l0ZSBkZSBsJ2FnZW5jZSIKICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9mb2xsb3ciIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTM1NjgxLS1bRHVvMl0tW0xJXS1bMDQzNDAxXS1bMTIyNTY0NF0nKTsiPlNpdGUgd2ViPC9hPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEgY2xlYXJmaXgiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWRldGFpbHMtY3RhLS1kZWNvdXZyaXIiPiBWb2lyIGwnYW5ub25jZTwvc3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdCI+ICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IjM3RDhBREQ5LUUwM0QtMEY2MS03QzEyLTg3ODIzQjBCRjRDNCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1lbWFpbCI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLXRlbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iMzdEOEFERDktRTAzRC0wRjYxLTdDMTItODc4MjNCMEJGNEM0IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXRlbGVwaG9uZSI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9BcGFydG1lbnRDb21wbGV4IiAgICAgICAgY2xhc3M9Im9mZmVyLWxpc3QtaXRlbSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItNDQ3OEIwRUEtOEY1OS1DRDBCLUZGNjMtMzU2NUJFNkMwQjc1IgogICAgICAgICBkYXRhLXJlc3VsdD0ic3RhbmRhcmRSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjQiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAxMyAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz40OTwvc3Bhbj4gbcKyIGVudmlyb24gJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjI8L3NwYW4+IHBpw6hjZXMiIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0zMzV4MjUzLzQ0Ny9lL2U3ZjUxNDc5LTM3Y2UtNDdkMy04YjViLWFiMGRiMjczOThlNC5qcGciPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZsYWctY29udGFpbmVyIj48ZGl2IGNsYXNzPSJjYXAgZmxhZyAiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciIgaXRlbXNjb3BlPjxzcGFuIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiPjxzcGFuIGNsYXNzPSIiPjwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+ICAgICAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI0NDc4QjBFQS04RjU5LUNEMEItRkY2My0zNTY1QkU2QzBCNzUiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1lbGVtZW50dG9tb3ZlPSIjaGVhZGVyLW9mZmVyLTQ0NzhCMEVBLThGNTktQ0QwQi1GRjYzLTM1NjVCRTZDMEI3NSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LWJvcmRlciI+PC9pPgogICAgICAgIDwvYT4KICAgICAgICA8YSBjbGFzcz0icmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjQ0NzhCMEVBLThGNTktQ0QwQi1GRjYzLTM1NjVCRTZDMEI3NSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1zZWxlY3RlZCI+PC9pPgogICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlLW1vcmUiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLXBpY3R1cmUtY291bnQiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uLS1pbWFnZSI+PC9pPiAxLzU8c3Bhbj4gLSBWb2lyIGxlcyBwaG90b3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzIj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1wcmljZSI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1wcmljZSIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgICAgICAgICA8c3Bhbj41NzYgMDAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLWJhbmsgbWVhIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2UtaW1tb2JpbGllci5jcmVkaXQtYWdyaWNvbGUuZnIvc2ltdWxjYS8/T1JJPXNlbG9nZXJjYW1wYWduZSZ4dG9yPUFMLTItW3BhcnRlbmFyaWF0XS1bTG9naWMtaW1tb10tW2xpZW5fc2VydmljZXNdLVtwZGxdLVtkZXNrdG9wXSIgdGl0bGU9IlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/IiBjbGFzcz0ic2l6ZV8xMSByZWQgdW5kZXJsaW5lIiB0YXJnZXQ9Il9ibGFuayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnTGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlOjpMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmVfTGlzdGVfQW5ub25jZXMnLCAnTicpOyIgcmVsPSJub2ZvbGxvdyI+T3UgMiAzMjUg4oKsIC8gbW9pcyogPGJyLz5RdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPzwvYT4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3RpayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQiLz4KICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9IjQ5IG3CsiAuIDIgcGnDqGNlcyAuIFBhcmlzIDEzICg3NTAxMykiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTQ0NzhiMGVhLThmNTktY2QwYi1mZjYzLTM1NjViZTZjMGI3NS5odG0iIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCAyIHBpw6hjZXMgUGFyaXMgMTNlIDQ5IG3CsiIgY2xhc3M9Im9mZmVyLWxpbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6QmxvY19Bbm5vbmNlOjpCbG9jX0Fubm9uY2VfNTo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj5WZW50ZSBhcHBhcnRlbWVudDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLW1lYXN1cmluZy10YXBlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+NDk8L3NwYW4+IG3CsiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4yPC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1iZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWJlZHJvb20iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+MTwvc3Bhbj4gY2guICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLWhhbGYiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1sb2NhbGl0eSI+UGFyaXMgMTMgKDc1MDEzKTwvc3Bhbj48L2Rpdj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtNDQ3OGIwZWEtOGY1OS1jZDBiLWZmNjMtMzU2NWJlNmMwYjc1Lmh0bSIgdGl0bGU9IlBhcmlzIDEzw6htZSIgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLXNlY3RvciBvZmZlci1zZWN0b3Igb2ZmZXItbGluayI+UGFyaXMgMTPDqG1lPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gbm9Mb2dvIj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLW1vcmVwIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FnZW5jZS1pbW1vYmlsaWVyZS9wYXJpcy0xMmVncmF2ZW1lL2Fubm9uY2VzLWltbW9iaWxpZXItcGFyaXMtMTJlZ3JhdmVtZV83NTAxMi1CREFBMjVFMS01MTI1LTQ5NUEtOEYyNC1CNDE3N0EyRTA1QjEuaHRtbCIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTMzOTUyLS1bRHVvMl0tW0xJXS1bMTUzNDAxXS1bMTIyNTY0NF0nKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItYWdlbmN5LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkJMRyBJTU1PQklMSUVSIj5CTEcgSU1NT0JJTElFUjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1hZ2VuY3ktd2Vic2l0ZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYmxnaW1tb2JpbGllci5jb20iIHRpdGxlPSJDbGlxdWV6IGljaSBwb3VyIHZpc2l0ZXIgbGUgc2l0ZSBkZSBsJ2FnZW5jZSIKICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9mb2xsb3ciIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTMzOTUyLS1bRHVvMl0tW0xJXS1bMDQzNDAxXS1bMTIyNTY0NF0nKTsiPlNpdGUgd2ViPC9hPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEgY2xlYXJmaXgiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWRldGFpbHMtY3RhLS1kZWNvdXZyaXIiPiBWb2lyIGwnYW5ub25jZTwvc3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdCI+ICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IjQ0NzhCMEVBLThGNTktQ0QwQi1GRjYzLTM1NjVCRTZDMEI3NSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1lbWFpbCI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLXRlbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iNDQ3OEIwRUEtOEY1OS1DRDBCLUZGNjMtMzU2NUJFNkMwQjc1IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXRlbGVwaG9uZSI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9BcGFydG1lbnRDb21wbGV4IiAgICAgICAgY2xhc3M9Im9mZmVyLWxpc3QtaXRlbSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItNEYxOTFFQUQtMzE0OC1DMkExLUY4Q0QtMDIwNUE3MUREMjYwIgogICAgICAgICBkYXRhLXJlc3VsdD0ic3RhbmRhcmRSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjUiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAxMyAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz43Njwvc3Bhbj4gbcKyIGVudmlyb24gJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjQ8L3NwYW4+IHBpw6hjZXMiIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0zMzV4MjUzLzRmMS8yLzI5NDFmNjk4LWYxNDEtNDJmNi04NzRmLWI0NTAyZGQ0MjI1ZS5qcGciPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZsYWctY29udGFpbmVyIj48ZGl2IGNsYXNzPSJjYXAgZmxhZyAiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciIgaXRlbXNjb3BlPjxzcGFuIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiPjxzcGFuIGNsYXNzPSIiPjwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+ICAgICAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI0RjE5MUVBRC0zMTQ4LUMyQTEtRjhDRC0wMjA1QTcxREQyNjAiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1lbGVtZW50dG9tb3ZlPSIjaGVhZGVyLW9mZmVyLTRGMTkxRUFELTMxNDgtQzJBMS1GOENELTAyMDVBNzFERDI2MCIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LWJvcmRlciI+PC9pPgogICAgICAgIDwvYT4KICAgICAgICA8YSBjbGFzcz0icmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjRGMTkxRUFELTMxNDgtQzJBMS1GOENELTAyMDVBNzFERDI2MCIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1zZWxlY3RlZCI+PC9pPgogICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlLW1vcmUiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLXBpY3R1cmUtY291bnQiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uLS1pbWFnZSI+PC9pPiAxLzQ8c3Bhbj4gLSBWb2lyIGxlcyBwaG90b3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzIj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1wcmljZSI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1wcmljZSIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgICAgICAgICA8c3Bhbj45MzcgMzAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLWJhbmsgbWVhIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2UtaW1tb2JpbGllci5jcmVkaXQtYWdyaWNvbGUuZnIvc2ltdWxjYS8/T1JJPXNlbG9nZXJjYW1wYWduZSZ4dG9yPUFMLTItW3BhcnRlbmFyaWF0XS1bTG9naWMtaW1tb10tW2xpZW5fc2VydmljZXNdLVtwZGxdLVtkZXNrdG9wXSIgdGl0bGU9IlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/IiBjbGFzcz0ic2l6ZV8xMSByZWQgdW5kZXJsaW5lIiB0YXJnZXQ9Il9ibGFuayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnTGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlOjpMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmVfTGlzdGVfQW5ub25jZXMnLCAnTicpOyIgcmVsPSJub2ZvbGxvdyI+T3UgMyA3ODMg4oKsIC8gbW9pcyogPGJyLz5RdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPzwvYT4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3RpayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQiLz4KICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9Ijc2IG3CsiAuIDQgcGnDqGNlcyAuIFBhcmlzIDEzICg3NTAxMykiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTRmMTkxZWFkLTMxNDgtYzJhMS1mOGNkLTAyMDVhNzFkZDI2MC5odG0iIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA0IHBpw6hjZXMgUGFyaXMgMTNlIDc2IG3CsiIgY2xhc3M9Im9mZmVyLWxpbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6QmxvY19Bbm5vbmNlOjpCbG9jX0Fubm9uY2VfNjo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj5WZW50ZSBhcHBhcnRlbWVudDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLW1lYXN1cmluZy10YXBlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+NzY8L3NwYW4+IG3CsiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz40PC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1iZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWJlZHJvb20iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Mzwvc3Bhbj4gY2guICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLWhhbGYiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1sb2NhbGl0eSI+UGFyaXMgMTMgKDc1MDEzKTwvc3Bhbj48L2Rpdj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtNGYxOTFlYWQtMzE0OC1jMmExLWY4Y2QtMDIwNWE3MWRkMjYwLmh0bSIgdGl0bGU9IlBhcmlzIDEzw6htZSIgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLXNlY3RvciBvZmZlci1zZWN0b3Igb2ZmZXItbGluayI+UGFyaXMgMTPDqG1lPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gbm9Mb2dvIj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLW1vcmVwIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FnZW5jZS1pbW1vYmlsaWVyZS9wYXJpcy0xMmVncmF2ZW1lL2Fubm9uY2VzLWltbW9iaWxpZXItcGFyaXMtMTJlZ3JhdmVtZV83NTAxMi1CREFBMjVFMS01MTI1LTQ5NUEtOEYyNC1CNDE3N0EyRTA1QjEuaHRtbCIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTM1Njg0LS1bRHVvMl0tW0xJXS1bMTUzNDAxXS1bMTIyNTY0NF0nKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItYWdlbmN5LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkJMRyBJTU1PQklMSUVSIj5CTEcgSU1NT0JJTElFUjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1hZ2VuY3ktd2Vic2l0ZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYmxnaW1tb2JpbGllci5jb20iIHRpdGxlPSJDbGlxdWV6IGljaSBwb3VyIHZpc2l0ZXIgbGUgc2l0ZSBkZSBsJ2FnZW5jZSIKICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9mb2xsb3ciIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTM1Njg0LS1bRHVvMl0tW0xJXS1bMDQzNDAxXS1bMTIyNTY0NF0nKTsiPlNpdGUgd2ViPC9hPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEgY2xlYXJmaXgiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWRldGFpbHMtY3RhLS1kZWNvdXZyaXIiPiBWb2lyIGwnYW5ub25jZTwvc3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdCI+ICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IjRGMTkxRUFELTMxNDgtQzJBMS1GOENELTAyMDVBNzFERDI2MCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1lbWFpbCI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLXRlbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iNEYxOTFFQUQtMzE0OC1DMkExLUY4Q0QtMDIwNUE3MUREMjYwIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXRlbGVwaG9uZSI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9BcGFydG1lbnRDb21wbGV4IiAgICAgICAgY2xhc3M9Im9mZmVyLWxpc3QtaXRlbSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItOTYwQjE1MDItQzg5Qy04QkNCLUJFNEYtMjQwMTI0QzUyREQ5IgogICAgICAgICBkYXRhLXJlc3VsdD0ic3RhbmRhcmRSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjYiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAxMyAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz4xMTA8L3NwYW4+IG3CsiBlbnZpcm9uICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz41PC9zcGFuPiBwacOoY2VzIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My85NjAvOS85MTE2M2VlMC05MjllLTQxYjMtYmY5MC02ZWI4NzVkYmQyYzIuanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+PGRpdiBjbGFzcz0iY2FwIGZsYWcgIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGl0ZW1zY29wZT48c3BhbiBpdGVtcHJvcD0iYXZhaWxhYmlsaXR5Ij48c3BhbiBjbGFzcz0iIj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PiAgICAgICAgPGEgY2xhc3M9ImFkZC10by1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iOTYwQjE1MDItQzg5Qy04QkNCLUJFNEYtMjQwMTI0QzUyREQ5IgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci05NjBCMTUwMi1DODlDLThCQ0ItQkU0Ri0yNDAxMjRDNTJERDkiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICA8L2E+CiAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI5NjBCMTUwMi1DODlDLThCQ0ItQkU0Ri0yNDAxMjRDNTJERDkiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT4KICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZS1tb3JlIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1waWN0dXJlLWNvdW50Ij4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbi0taW1hZ2UiPjwvaT4gMS80PHNwYW4+IC0gVm9pciBsZXMgcGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtcHJpY2UiPgogICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItcHJpY2UiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICAgICAgICAgICAgPHNwYW4+MSAzNTkgMDAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLWJhbmsgbWVhIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2UtaW1tb2JpbGllci5jcmVkaXQtYWdyaWNvbGUuZnIvc2ltdWxjYS8/T1JJPXNlbG9nZXJjYW1wYWduZSZ4dG9yPUFMLTItW3BhcnRlbmFyaWF0XS1bTG9naWMtaW1tb10tW2xpZW5fc2VydmljZXNdLVtwZGxdLVtkZXNrdG9wXSIgdGl0bGU9IlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/IiBjbGFzcz0ic2l6ZV8xMSByZWQgdW5kZXJsaW5lIiB0YXJnZXQ9Il9ibGFuayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnTGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlOjpMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmVfTGlzdGVfQW5ub25jZXMnLCAnTicpOyIgcmVsPSJub2ZvbGxvdyI+T3UgNSA0ODYg4oKsIC8gbW9pcyogPGJyLz5RdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPzwvYT4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3RpayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQiLz4KICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9IjExMCBtwrIgLiA1IHBpw6hjZXMgLiBQYXJpcyAxMyAoNzUwMTMpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS05NjBiMTUwMi1jODljLThiY2ItYmU0Zi0yNDAxMjRjNTJkZDkuaHRtIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNSBwacOoY2VzIFBhcmlzIDEzZSAxMTAgbcKyIiBjbGFzcz0ib2ZmZXItbGluayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV83OjpCbG9jX0Fubm9uY2VfVHlwZV9kZV9CaWVuJywgJ04nKTsiIGZsYWc9ImlzU3RhbmRhcmQiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLXR5cGUiPlZlbnRlIGFwcGFydGVtZW50PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tbWVhc3VyaW5nLXRhcGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz4xMTA8L3NwYW4+IG3CsiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz41PC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1iZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWJlZHJvb20iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+NDwvc3Bhbj4gY2guICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLWhhbGYiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1sb2NhbGl0eSI+UGFyaXMgMTMgKDc1MDEzKTwvc3Bhbj48L2Rpdj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtOTYwYjE1MDItYzg5Yy04YmNiLWJlNGYtMjQwMTI0YzUyZGQ5Lmh0bSIgdGl0bGU9IlBhcmlzIDEzw6htZSIgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLXNlY3RvciBvZmZlci1zZWN0b3Igb2ZmZXItbGluayI+UGFyaXMgMTPDqG1lPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gbm9Mb2dvIj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLW1vcmVwIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FnZW5jZS1pbW1vYmlsaWVyZS9wYXJpcy0xMmVncmF2ZW1lL2Fubm9uY2VzLWltbW9iaWxpZXItcGFyaXMtMTJlZ3JhdmVtZV83NTAxMi1CREFBMjVFMS01MTI1LTQ5NUEtOEYyNC1CNDE3N0EyRTA1QjEuaHRtbCIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTM1Njg4LS1bRHVvMl0tW0xJXS1bMTUzNDAxXS1bMTIyNTY0NF0nKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItYWdlbmN5LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkJMRyBJTU1PQklMSUVSIj5CTEcgSU1NT0JJTElFUjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1hZ2VuY3ktd2Vic2l0ZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYmxnaW1tb2JpbGllci5jb20iIHRpdGxlPSJDbGlxdWV6IGljaSBwb3VyIHZpc2l0ZXIgbGUgc2l0ZSBkZSBsJ2FnZW5jZSIKICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9mb2xsb3ciIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTM1Njg4LS1bRHVvMl0tW0xJXS1bMDQzNDAxXS1bMTIyNTY0NF0nKTsiPlNpdGUgd2ViPC9hPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEgY2xlYXJmaXgiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWRldGFpbHMtY3RhLS1kZWNvdXZyaXIiPiBWb2lyIGwnYW5ub25jZTwvc3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdCI+ICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9Ijk2MEIxNTAyLUM4OUMtOEJDQi1CRTRGLTI0MDEyNEM1MkREOSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1lbWFpbCI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLXRlbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iOTYwQjE1MDItQzg5Qy04QkNCLUJFNEYtMjQwMTI0QzUyREQ5IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXRlbGVwaG9uZSI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9BcGFydG1lbnRDb21wbGV4IiAgICAgICAgY2xhc3M9Im9mZmVyLWxpc3QtaXRlbSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItQTY1Nzg1QTUtQTZGOC01REUzLTAzMzktMTAwMzAxNDAxQjNBIgogICAgICAgICBkYXRhLXJlc3VsdD0ic3RhbmRhcmRSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjciCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAxMyAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz4xMjM8L3NwYW4+IG3CsiBlbnZpcm9uICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz41PC9zcGFuPiBwacOoY2VzIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My9hNjUvOC84NWQ4OWQ3OS01ZjdjLTRjZjgtOGM5NS1iMzBiNjU5ZWI0NmQuanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+PGRpdiBjbGFzcz0iY2FwIGZsYWcgIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGl0ZW1zY29wZT48c3BhbiBpdGVtcHJvcD0iYXZhaWxhYmlsaXR5Ij48c3BhbiBjbGFzcz0iIj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PiAgICAgICAgPGEgY2xhc3M9ImFkZC10by1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iQTY1Nzg1QTUtQTZGOC01REUzLTAzMzktMTAwMzAxNDAxQjNBIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci1BNjU3ODVBNS1BNkY4LTVERTMtMDMzOS0xMDAzMDE0MDFCM0EiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICA8L2E+CiAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSJBNjU3ODVBNS1BNkY4LTVERTMtMDMzOS0xMDAzMDE0MDFCM0EiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT4KICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZS1tb3JlIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1waWN0dXJlLWNvdW50Ij4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbi0taW1hZ2UiPjwvaT4gMS81PHNwYW4+IC0gVm9pciBsZXMgcGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtcHJpY2UiPgogICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItcHJpY2UiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICAgICAgICAgICAgPHNwYW4+MSA4ODEgMDAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLWJhbmsgbWVhIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2UtaW1tb2JpbGllci5jcmVkaXQtYWdyaWNvbGUuZnIvc2ltdWxjYS8/T1JJPXNlbG9nZXJjYW1wYWduZSZ4dG9yPUFMLTItW3BhcnRlbmFyaWF0XS1bTG9naWMtaW1tb10tW2xpZW5fc2VydmljZXNdLVtwZGxdLVtkZXNrdG9wXSIgdGl0bGU9IlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/IiBjbGFzcz0ic2l6ZV8xMSByZWQgdW5kZXJsaW5lIiB0YXJnZXQ9Il9ibGFuayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnTGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlOjpMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmVfTGlzdGVfQW5ub25jZXMnLCAnTicpOyIgcmVsPSJub2ZvbGxvdyI+T3UgNyA1OTMg4oKsIC8gbW9pcyogPGJyLz5RdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPzwvYT4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3RpayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQiLz4KICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9IjEyMyBtwrIgLiA1IHBpw6hjZXMgLiBQYXJpcyAxMyAoNzUwMTMpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS1hNjU3ODVhNS1hNmY4LTVkZTMtMDMzOS0xMDAzMDE0MDFiM2EuaHRtIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNSBwacOoY2VzIFBhcmlzIDEzZSAxMjMgbcKyIiBjbGFzcz0ib2ZmZXItbGluayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV84OjpCbG9jX0Fubm9uY2VfVHlwZV9kZV9CaWVuJywgJ04nKTsiIGZsYWc9ImlzU3RhbmRhcmQiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLXR5cGUiPlZlbnRlIGFwcGFydGVtZW50PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tbWVhc3VyaW5nLXRhcGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz4xMjM8L3NwYW4+IG3CsiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz41PC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1iZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWJlZHJvb20iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+NDwvc3Bhbj4gY2guICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLWhhbGYiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1sb2NhbGl0eSI+UGFyaXMgMTMgKDc1MDEzKTwvc3Bhbj48L2Rpdj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtYTY1Nzg1YTUtYTZmOC01ZGUzLTAzMzktMTAwMzAxNDAxYjNhLmh0bSIgdGl0bGU9IlBhcmlzIDEzw6htZSIgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLXNlY3RvciBvZmZlci1zZWN0b3Igb2ZmZXItbGluayI+UGFyaXMgMTPDqG1lPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gbm9Mb2dvIj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLW1vcmVwIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FnZW5jZS1pbW1vYmlsaWVyZS9wYXJpcy0xMmVncmF2ZW1lL2Fubm9uY2VzLWltbW9iaWxpZXItcGFyaXMtMTJlZ3JhdmVtZV83NTAxMi1CREFBMjVFMS01MTI1LTQ5NUEtOEYyNC1CNDE3N0EyRTA1QjEuaHRtbCIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTM1NjgzLS1bRHVvMl0tW0xJXS1bMTUzNDAxXS1bMTIyNTY0NF0nKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItYWdlbmN5LW5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkJMRyBJTU1PQklMSUVSIj5CTEcgSU1NT0JJTElFUjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1hZ2VuY3ktd2Vic2l0ZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYmxnaW1tb2JpbGllci5jb20iIHRpdGxlPSJDbGlxdWV6IGljaSBwb3VyIHZpc2l0ZXIgbGUgc2l0ZSBkZSBsJ2FnZW5jZSIKICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9mb2xsb3ciIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTc0MTM1NjgzLS1bRHVvMl0tW0xJXS1bMDQzNDAxXS1bMTIyNTY0NF0nKTsiPlNpdGUgd2ViPC9hPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEgY2xlYXJmaXgiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWRldGFpbHMtY3RhLS1kZWNvdXZyaXIiPiBWb2lyIGwnYW5ub25jZTwvc3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdCI+ICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IkE2NTc4NUE1LUE2RjgtNURFMy0wMzM5LTEwMDMwMTQwMUIzQSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1lbWFpbCI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLXRlbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iQTY1Nzg1QTUtQTZGOC01REUzLTAzMzktMTAwMzAxNDAxQjNBIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXRlbGVwaG9uZSI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9BcGFydG1lbnRDb21wbGV4IiAgICAgICAgY2xhc3M9Im9mZmVyLWxpc3QtaXRlbSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItRkYzRTYwNDQtRUMyRS02Mzk0LUJEREMtMTI3NjlCQjFFNTgwIgogICAgICAgICBkYXRhLXJlc3VsdD0ic3RhbmRhcmRSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjgiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAxMyAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz45MDwvc3Bhbj4gbcKyIGVudmlyb24gJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjQ8L3NwYW4+IHBpw6hjZXMiIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0zMzV4MjUzL2ZmMy8wLzBkNDk5YWI5LTQ1ZjktNDFmNy1iMWM0LTk5MTc2MTg5YjcwZS5qcGciPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZsYWctY29udGFpbmVyIj48ZGl2IGNsYXNzPSJjYXAgZmxhZyAiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciIgaXRlbXNjb3BlPjxzcGFuIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiPjxzcGFuIGNsYXNzPSIiPjwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+ICAgICAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSJGRjNFNjA0NC1FQzJFLTYzOTQtQkREQy0xMjc2OUJCMUU1ODAiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1lbGVtZW50dG9tb3ZlPSIjaGVhZGVyLW9mZmVyLUZGM0U2MDQ0LUVDMkUtNjM5NC1CRERDLTEyNzY5QkIxRTU4MCIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LWJvcmRlciI+PC9pPgogICAgICAgIDwvYT4KICAgICAgICA8YSBjbGFzcz0icmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IkZGM0U2MDQ0LUVDMkUtNjM5NC1CRERDLTEyNzY5QkIxRTU4MCIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1zZWxlY3RlZCI+PC9pPgogICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlLW1vcmUiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLXBpY3R1cmUtY291bnQiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uLS1pbWFnZSI+PC9pPiAxLzU8c3Bhbj4gLSBWb2lyIGxlcyBwaG90b3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzIj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1wcmljZSI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1wcmljZSIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgICAgICAgICA8c3Bhbj4xIDUwNCA4MDAg4oKsPC9zcGFuPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItYmFuayBtZWEiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZS1pbW1vYmlsaWVyLmNyZWRpdC1hZ3JpY29sZS5mci9zaW11bGNhLz9PUkk9c2Vsb2dlcmNhbXBhZ25lJnh0b3I9QUwtMi1bcGFydGVuYXJpYXRdLVtMb2dpYy1pbW1vXS1bbGllbl9zZXJ2aWNlc10tW3BkbF0tW2Rlc2t0b3BdIiB0aXRsZT0iUXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID8iIGNsYXNzPSJzaXplXzExIHJlZCB1bmRlcmxpbmUiIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmU6OkxpZW5fUGFydGVuYWlyZV9CYW5jYWlyZV9MaXN0ZV9Bbm5vbmNlcycsICdOJyk7IiByZWw9Im5vZm9sbG93Ij5PdSA2IDA3NCDigqwgLyBtb2lzKiA8YnIvPlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/PC9hPiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJBcHBhcnRlbWVudCIvPgogICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICAgICAgY29udGVudD0iOTAgbcKyIC4gNCBwacOoY2VzIC4gUGFyaXMgMTMgKDc1MDEzKSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtZmYzZTYwNDQtZWMyZS02Mzk0LWJkZGMtMTI3NjliYjFlNTgwLmh0bSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDQgcGnDqGNlcyBQYXJpcyAxM2UgOTAgbcKyIiBjbGFzcz0ib2ZmZXItbGluayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV85OjpCbG9jX0Fubm9uY2VfVHlwZV9kZV9CaWVuJywgJ04nKTsiIGZsYWc9ImlzU3RhbmRhcmQiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLXR5cGUiPlZlbnRlIGFwcGFydGVtZW50PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tbWVhc3VyaW5nLXRhcGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz45MDwvc3Bhbj4gbcKyICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1yb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXBpZWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjQ8L3NwYW4+IHAuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWJlZHJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tYmVkcm9vbSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4zPC9zcGFuPiBjaC4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24taGFsZiI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLWxvY2FsaXR5Ij5QYXJpcyAxMyAoNzUwMTMpPC9zcGFuPjwvZGl2PjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS1mZjNlNjA0NC1lYzJlLTYzOTQtYmRkYy0xMjc2OWJiMWU1ODAuaHRtIiB0aXRsZT0iUGFyaXMgMTPDqG1lIiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tc2VjdG9yIG9mZmVyLXNlY3RvciBvZmZlci1saW5rIj5QYXJpcyAxM8OobWU8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtYWdlbmN5TG9nbyBub0xvZ28iPgogICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbW9yZXAiPgogICAgICAgICAgICA8YSBocmVmPSIvYWdlbmNlLWltbW9iaWxpZXJlL3BhcmlzLTEyZWdyYXZlbWUvYW5ub25jZXMtaW1tb2JpbGllci1wYXJpcy0xMmVncmF2ZW1lXzc1MDEyLUJEQUEyNUUxLTUxMjUtNDk1QS04RjI0LUI0MTc3QTJFMDVCMS5odG1sIiB0YXJnZXQ9Il9ibGFuayIgb25jbGljaz0idG9wLnh0X2FkYyh0aGlzLCAnUFVCLTEtNzQxMzU2ODItLVtEdW8yXS1bTEldLVsxNTM0MDFdLVsxMjI1NjQ0XScpOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1hZ2VuY3ktbmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iQkxHIElNTU9CSUxJRVIiPkJMRyBJTU1PQklMSUVSPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWFnZW5jeS13ZWJzaXRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5ibGdpbW1vYmlsaWVyLmNvbSIgdGl0bGU9IkNsaXF1ZXogaWNpIHBvdXIgdmlzaXRlciBsZSBzaXRlIGRlIGwnYWdlbmNlIgogICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub2ZvbGxvdyIgb25jbGljaz0idG9wLnh0X2FkYyh0aGlzLCAnUFVCLTEtNzQxMzU2ODItLVtEdW8yXS1bTEldLVswNDM0MDFdLVsxMjI1NjQ0XScpOyI+U2l0ZSB3ZWI8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YSBjbGVhcmZpeCI+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItZGV0YWlscy1jdGEtLWRlY291dnJpciI+IFZvaXIgbCdhbm5vbmNlPC9zcGFuPgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0Ij4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS1lbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iRkYzRTYwNDQtRUMyRS02Mzk0LUJEREMtMTI3NjlCQjFFNTgwIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWVtYWlsIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tdGVsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSJGRjNFNjA0NC1FQzJFLTYzOTQtQkREQy0xMjc2OUJCMUU1ODAiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tdGVsZXBob25lIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0FwYXJ0bWVudENvbXBsZXgiICAgICAgICBjbGFzcz0ib2ZmZXItbGlzdC1pdGVtIj4KICAgIDxkaXYgaWQ9ImhlYWRlci1vZmZlci03NDYzODY0MC02MkVFLURBMkMtN0U2QS01MzlGNUU5MkU5NDgiCiAgICAgICAgIGRhdGEtcmVzdWx0PSJzdGFuZGFyZFJlc3VsdCIKICAgICAgICAgZGF0YS1wb3NpdGlvbj0iOSIKICAgICAgICAgZGF0YS1hZ2Nsb2dvdXJsPSIiCiAgICAgICAgIGNsYXNzPSJvZmZlci1ibG9jayBjbGVhcmZpeCI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZSI+CiAgICA8ZGl2IGNsYXNzPSJwaWN0dXJlLXdyYXBwZXIiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYi1saW5rIG9mZmVyLWxpbmsgZGVmYXVsdC1waWN0dXJlIGltZ0xpcXVpZEZpbGwgaW1nTGlxdWlkIiBkYXRhLXRyaWdnZXItaW1nbGlxdWlkPSIxIiBkYXRhLWltZ0xpcXVpZC1maWxsPSJ0cnVlIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxhenkiIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICBhbHQ9IlZlbnRlIGFwcGFydGVtZW50IFBhcmlzIDEzICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjM0PC9zcGFuPiBtwrIgZW52aXJvbiAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+MTwvc3Bhbj4gcGnDqGNlIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My83NDYvYy9jODFlZjVlNy1kY2RhLTQ2NGMtOTA2MS02MWU4YjQ2ZWIxNDguanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+PGRpdiBjbGFzcz0iY2FwIGZsYWcgIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGl0ZW1zY29wZT48c3BhbiBpdGVtcHJvcD0iYXZhaWxhYmlsaXR5Ij48c3BhbiBjbGFzcz0iIj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PiAgICAgICAgPGEgY2xhc3M9ImFkZC10by1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iNzQ2Mzg2NDAtNjJFRS1EQTJDLTdFNkEtNTM5RjVFOTJFOTQ4IgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci03NDYzODY0MC02MkVFLURBMkMtN0U2QS01MzlGNUU5MkU5NDgiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICA8L2E+CiAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI3NDYzODY0MC02MkVFLURBMkMtN0U2QS01MzlGNUU5MkU5NDgiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT4KICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZS1tb3JlIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1waWN0dXJlLWNvdW50Ij4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbi0taW1hZ2UiPjwvaT4gMS8zPHNwYW4+IC0gVm9pciBsZXMgcGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtcHJpY2UiPgogICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItcHJpY2UiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICAgICAgICAgICAgPHNwYW4+NDI4IDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1iYW5rIG1lYSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9lLWltbW9iaWxpZXIuY3JlZGl0LWFncmljb2xlLmZyL3NpbXVsY2EvP09SST1zZWxvZ2VyY2FtcGFnbmUmeHRvcj1BTC0yLVtwYXJ0ZW5hcmlhdF0tW0xvZ2ljLWltbW9dLVtsaWVuX3NlcnZpY2VzXS1bcGRsXS1bZGVza3RvcF0iIHRpdGxlPSJRdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPyIgY2xhc3M9InNpemVfMTEgcmVkIHVuZGVybGluZSIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0xpZW5fUGFydGVuYWlyZV9CYW5jYWlyZTo6TGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlX0xpc3RlX0Fubm9uY2VzJywgJ04nKTsiIHJlbD0ibm9mb2xsb3ciPk91IDEgNzI3IOKCrCAvIG1vaXMqIDxici8+UXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID88L2E+ICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9Im5hbWUiIGNvbnRlbnQ9IkFwcGFydGVtZW50Ii8+CiAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50PSIzNCBtwrIgLiAxIHBpw6hjZSAuIFBhcmlzIDEzICg3NTAxMykiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTc0NjM4NjQwLTYyZWUtZGEyYy03ZTZhLTUzOWY1ZTkyZTk0OC5odG0iIHRpdGxlPSJWZW50ZSBzdHVkaW8gUGFyaXMgMTNlIDM0IG3CsiIgY2xhc3M9Im9mZmVyLWxpbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6QmxvY19Bbm5vbmNlOjpCbG9jX0Fubm9uY2VfMTA6OkJsb2NfQW5ub25jZV9UeXBlX2RlX0JpZW4nLCAnTicpOyIgZmxhZz0iaXNTdGFuZGFyZCI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtdHlwZSI+VmVudGUgYXBwYXJ0ZW1lbnQ8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWFyZWEiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1tZWFzdXJpbmctdGFwZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjM0PC9zcGFuPiBtwrIgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLXJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tcGllY2UiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+MTwvc3Bhbj4gcC4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi1oYWxmIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tbG9jYWxpdHkiPlBhcmlzIDEzICg3NTAxMyk8L3NwYW4+PC9kaXY+PGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTc0NjM4NjQwLTYyZWUtZGEyYy03ZTZhLTUzOWY1ZTkyZTk0OC5odG0iIHRpdGxlPSJQYXJpcyAxM8OobWUiIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1zZWN0b3Igb2ZmZXItc2VjdG9yIG9mZmVyLWxpbmsiPlBhcmlzIDEzw6htZTwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1hZ2VuY3lMb2dvIG5vTG9nbyI+CiAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1tb3JlcCI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hZ2VuY2UtaW1tb2JpbGllcmUvcGFyaXMtMTJlZ3JhdmVtZS9hbm5vbmNlcy1pbW1vYmlsaWVyLXBhcmlzLTEyZWdyYXZlbWVfNzUwMTItQkRBQTI1RTEtNTEyNS00OTVBLThGMjQtQjQxNzdBMkUwNUIxLmh0bWwiIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJ0b3AueHRfYWRjKHRoaXMsICdQVUItMS03NDEzMzk1NC0tW0R1bzJdLVtMSV0tWzE1MzQwMV0tWzEyMjU2NDRdJyk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWFnZW5jeS1uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJCTEcgSU1NT0JJTElFUiI+QkxHIElNTU9CSUxJRVI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItYWdlbmN5LXdlYnNpdGUiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LmJsZ2ltbW9iaWxpZXIuY29tIiB0aXRsZT0iQ2xpcXVleiBpY2kgcG91ciB2aXNpdGVyIGxlIHNpdGUgZGUgbCdhZ2VuY2UiCiAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vZm9sbG93IiBvbmNsaWNrPSJ0b3AueHRfYWRjKHRoaXMsICdQVUItMS03NDEzMzk1NC0tW0R1bzJdLVtMSV0tWzA0MzQwMV0tWzEyMjU2NDRdJyk7Ij5TaXRlIHdlYjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhIGNsZWFyZml4Ij4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1kZXRhaWxzLWN0YS0tZGVjb3V2cmlyIj4gVm9pciBsJ2Fubm9uY2U8L3NwYW4+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QiPiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLWVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI3NDYzODY0MC02MkVFLURBMkMtN0U2QS01MzlGNUU5MkU5NDgiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tZW1haWwiPjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS10ZWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9Ijc0NjM4NjQwLTYyRUUtREEyQy03RTZBLTUzOUY1RTkyRTk0OCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS10ZWxlcGhvbmUiPjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvQXBhcnRtZW50Q29tcGxleCIgICAgICAgIGNsYXNzPSJvZmZlci1saXN0LWl0ZW0iPgogICAgPGRpdiBpZD0iaGVhZGVyLW9mZmVyLTNEQUREQzQyLTU4N0MtREZDOC1DMjdDLUUzMTgyREE3NUQ1NCIKICAgICAgICAgZGF0YS1yZXN1bHQ9InN0YW5kYXJkUmVzdWx0IgogICAgICAgICBkYXRhLXBvc2l0aW9uPSIxMCIKICAgICAgICAgZGF0YS1hZ2Nsb2dvdXJsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWdjL2VhYy9lYWMxMDkyZC03NjhkLTRmMWEtNWNhYS03NzY0M2EyNmE5OGEvbG9nby8yNjB4MTYwXzhlZTY1NjRmLTFhMzgtNDQ2Yi04ZWRhLWM2MjU4M2NmNjUyMS5qcGciCiAgICAgICAgIGNsYXNzPSJvZmZlci1ibG9jayBjbGVhcmZpeCI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZSI+CiAgICA8ZGl2IGNsYXNzPSJwaWN0dXJlLXdyYXBwZXIiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYi1saW5rIG9mZmVyLWxpbmsgZGVmYXVsdC1waWN0dXJlIGltZ0xpcXVpZEZpbGwgaW1nTGlxdWlkIiBkYXRhLXRyaWdnZXItaW1nbGlxdWlkPSIxIiBkYXRhLWltZ0xpcXVpZC1maWxsPSJ0cnVlIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxhenkiIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICBhbHQ9IlZlbnRlIGFwcGFydGVtZW50IFBhcmlzIDEzICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjk1PC9zcGFuPiBtwrIgZW52aXJvbiAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Mzwvc3Bhbj4gcGnDqGNlcyIgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2Fkcy9waG90by1wcm9wLTMzNXgyNTMvM2RhLzgvODg3MjRjZmMtMDQ2OC00ZDk5LTk0MTItMjc4ODQzYmU5NDFhLmpwZyI+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZmxhZy1jb250YWluZXIiPjxkaXYgY2xhc3M9ImNhcCBmbGFnICIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIiBpdGVtc2NvcGU+PHNwYW4gaXRlbXByb3A9ImF2YWlsYWJpbGl0eSI+PHNwYW4gY2xhc3M9IiI+PC9zcGFuPjwvc3Bhbj48L2Rpdj48L2Rpdj4gICAgICAgIDxhIGNsYXNzPSJhZGQtdG8tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjNEQUREQzQyLTU4N0MtREZDOC1DMjdDLUUzMTgyREE3NUQ1NCIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWVsZW1lbnR0b21vdmU9IiNoZWFkZXItb2ZmZXItM0RBRERDNDItNTg3Qy1ERkM4LUMyN0MtRTMxODJEQTc1RDU0IgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtYm9yZGVyIj48L2k+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGNsYXNzPSJyZW1vdmUtZnJvbS1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iM0RBRERDNDItNTg3Qy1ERkM4LUMyN0MtRTMxODJEQTc1RDU0IgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LXNlbGVjdGVkIj48L2k+CiAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUtbW9yZSI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItcGljdHVyZS1jb3VudCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24tLWltYWdlIj48L2k+IDEvNjxzcGFuPiAtIFZvaXIgbGVzIHBob3Rvczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMiPgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXByaWNlIj4KICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLXByaWNlIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICAgICAgICAgIDxzcGFuPjEgNTcwIDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1iYW5rIG1lYSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9lLWltbW9iaWxpZXIuY3JlZGl0LWFncmljb2xlLmZyL3NpbXVsY2EvP09SST1zZWxvZ2VyY2FtcGFnbmUmeHRvcj1BTC0yLVtwYXJ0ZW5hcmlhdF0tW0xvZ2ljLWltbW9dLVtsaWVuX3NlcnZpY2VzXS1bcGRsXS1bZGVza3RvcF0iIHRpdGxlPSJRdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPyIgY2xhc3M9InNpemVfMTEgcmVkIHVuZGVybGluZSIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0xpZW5fUGFydGVuYWlyZV9CYW5jYWlyZTo6TGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlX0xpc3RlX0Fubm9uY2VzJywgJ04nKTsiIHJlbD0ibm9mb2xsb3ciPk91IDYgMzM4IOKCrCAvIG1vaXMqIDxici8+UXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID88L2E+ICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9Im5hbWUiIGNvbnRlbnQ9IkFwcGFydGVtZW50Ii8+CiAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50PSI5NSBtwrIgLiAzIHBpw6hjZXMgLiBQYXJpcyAxMyAoNzUwMTMpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS0zZGFkZGM0Mi01ODdjLWRmYzgtYzI3Yy1lMzE4MmRhNzVkNTQuaHRtIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIFBhcmlzIDEzZSA5NSBtwrIiIGNsYXNzPSJvZmZlci1saW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdBY3Rpb25fTGlzdGVfQW5ub25jZXM6OkJsb2NfQW5ub25jZTo6QmxvY19Bbm5vbmNlXzExOjpCbG9jX0Fubm9uY2VfVHlwZV9kZV9CaWVuJywgJ04nKTsiIGZsYWc9ImlzU3RhbmRhcmQiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLXR5cGUiPlZlbnRlIGFwcGFydGVtZW50PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tbWVhc3VyaW5nLXRhcGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz45NTwvc3Bhbj4gbcKyICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1yb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXBpZWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjM8L3NwYW4+IHAuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24taGFsZiI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLWxvY2FsaXR5Ij5QYXJpcyAxMyAoNzUwMTMpPC9zcGFuPjwvZGl2PjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS0zZGFkZGM0Mi01ODdjLWRmYzgtYzI3Yy1lMzE4MmRhNzVkNTQuaHRtIiB0aXRsZT0iUGFyaXMiIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1zZWN0b3Igb2ZmZXItc2VjdG9yIG9mZmVyLWxpbmsiPlBhcmlzPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gbm9Mb2dvIj4KICAgIAogICAgCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YSBjbGVhcmZpeCI+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItZGV0YWlscy1jdGEtLWRlY291dnJpciI+IFZvaXIgbCdhbm5vbmNlPC9zcGFuPgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0Ij4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS1lbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iM0RBRERDNDItNTg3Qy1ERkM4LUMyN0MtRTMxODJEQTc1RDU0IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWVtYWlsIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tdGVsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSIzREFEREM0Mi01ODdDLURGQzgtQzI3Qy1FMzE4MkRBNzVENTQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tdGVsZXBob25lIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0FwYXJ0bWVudENvbXBsZXgiICAgICAgICBjbGFzcz0ib2ZmZXItbGlzdC1pdGVtIj4KICAgIDxkaXYgaWQ9ImhlYWRlci1vZmZlci0xQzRBRDQxQy0wODU4LTU0QkMtMUNERS02RkM0QjU1RjUzQkQiCiAgICAgICAgIGRhdGEtcmVzdWx0PSJzdGFuZGFyZFJlc3VsdCIKICAgICAgICAgZGF0YS1wb3NpdGlvbj0iMTEiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2FnYy9hMTQvYTE0YTFjYjYtNjI1ZS00MmRmLWFjOWYtMmNlNTY1OTA0ZDAzL2xvZ28vMjYweDE2MF9hZjM1ZWYyZC0wNDhiLTQ3NWMtOTI1Ni1iYzhkY2U5ZTEyNGYuanBnIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAwNSAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz4xODwvc3Bhbj4gbcKyIGVudmlyb24gJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjE8L3NwYW4+IHBpw6hjZSIgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2Fkcy9waG90by1wcm9wLTMzNXgyNTMvMWM0LzUvNWRhMGY5MTEtNmFkOC00YTIwLTlmY2ItYzM2MmIzODU4ODhmLmpwZyI+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZmxhZy1jb250YWluZXIiPjxkaXYgY2xhc3M9ImNhcCBmbGFnICIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIiBpdGVtc2NvcGU+PHNwYW4gaXRlbXByb3A9ImF2YWlsYWJpbGl0eSI+PHNwYW4gY2xhc3M9IiI+PC9zcGFuPjwvc3Bhbj48L2Rpdj48L2Rpdj4gICAgICAgIDxhIGNsYXNzPSJhZGQtdG8tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjFDNEFENDFDLTA4NTgtNTRCQy0xQ0RFLTZGQzRCNTVGNTNCRCIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWVsZW1lbnR0b21vdmU9IiNoZWFkZXItb2ZmZXItMUM0QUQ0MUMtMDg1OC01NEJDLTFDREUtNkZDNEI1NUY1M0JEIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtYm9yZGVyIj48L2k+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGNsYXNzPSJyZW1vdmUtZnJvbS1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iMUM0QUQ0MUMtMDg1OC01NEJDLTFDREUtNkZDNEI1NUY1M0JEIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LXNlbGVjdGVkIj48L2k+CiAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUtbW9yZSI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItcGljdHVyZS1jb3VudCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24tLWltYWdlIj48L2k+IDEvODxzcGFuPiAtIFZvaXIgbGVzIHBob3Rvczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMiPgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXByaWNlIj4KICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLXByaWNlIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICAgICAgICAgIDxzcGFuPjI3MCA0MDAg4oKsPC9zcGFuPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItYmFuayBtZWEiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZS1pbW1vYmlsaWVyLmNyZWRpdC1hZ3JpY29sZS5mci9zaW11bGNhLz9PUkk9c2Vsb2dlcmNhbXBhZ25lJnh0b3I9QUwtMi1bcGFydGVuYXJpYXRdLVtMb2dpYy1pbW1vXS1bbGllbl9zZXJ2aWNlc10tW3BkbF0tW2Rlc2t0b3BdIiB0aXRsZT0iUXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID8iIGNsYXNzPSJzaXplXzExIHJlZCB1bmRlcmxpbmUiIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmU6OkxpZW5fUGFydGVuYWlyZV9CYW5jYWlyZV9MaXN0ZV9Bbm5vbmNlcycsICdOJyk7IiByZWw9Im5vZm9sbG93Ij5PdSAxIDA5MSDigqwgLyBtb2lzKiA8YnIvPlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/PC9hPiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJBcHBhcnRlbWVudCIvPgogICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICAgICAgY29udGVudD0iMTggbcKyIC4gMSBwacOoY2UgLiBQYXJpcyAwNSAoNzUwMDUpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS0xYzRhZDQxYy0wODU4LTU0YmMtMWNkZS02ZmM0YjU1ZjUzYmQuaHRtIiB0aXRsZT0iVmVudGUgc3R1ZGlvIFBhcmlzIDVlIDE4IG3CsiIgY2xhc3M9Im9mZmVyLWxpbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6QmxvY19Bbm5vbmNlOjpCbG9jX0Fubm9uY2VfMTI6OkJsb2NfQW5ub25jZV9UeXBlX2RlX0JpZW4nLCAnTicpOyIgZmxhZz0iaXNTdGFuZGFyZCI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtdHlwZSI+VmVudGUgYXBwYXJ0ZW1lbnQ8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWFyZWEiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1tZWFzdXJpbmctdGFwZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjE4PC9zcGFuPiBtwrIgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLXJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tcGllY2UiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+MTwvc3Bhbj4gcC4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi1oYWxmIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tbG9jYWxpdHkiPlBhcmlzIDA1ICg3NTAwNSk8L3NwYW4+PC9kaXY+PGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTFjNGFkNDFjLTA4NTgtNTRiYy0xY2RlLTZmYzRiNTVmNTNiZC5odG0iIHRpdGxlPSJQYXJpcyIgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLXNlY3RvciBvZmZlci1zZWN0b3Igb2ZmZXItbGluayI+UGFyaXM8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtYWdlbmN5TG9nbyBub0xvZ28iPgogICAgCiAgICAKICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhIGNsZWFyZml4Ij4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1kZXRhaWxzLWN0YS0tZGVjb3V2cmlyIj4gVm9pciBsJ2Fubm9uY2U8L3NwYW4+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QiPiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLWVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSIxQzRBRDQxQy0wODU4LTU0QkMtMUNERS02RkM0QjU1RjUzQkQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tZW1haWwiPjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS10ZWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IjFDNEFENDFDLTA4NTgtNTRCQy0xQ0RFLTZGQzRCNTVGNTNCRCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS10ZWxlcGhvbmUiPjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvQXBhcnRtZW50Q29tcGxleCIgICAgICAgIGNsYXNzPSJvZmZlci1saXN0LWl0ZW0iPgogICAgPGRpdiBpZD0iaGVhZGVyLW9mZmVyLTM3QTY5MTk2LUJERjctMUFCRi01NUE5LTk2MUI5MzQ5QjdFQiIKICAgICAgICAgZGF0YS1yZXN1bHQ9InN0YW5kYXJkUmVzdWx0IgogICAgICAgICBkYXRhLXBvc2l0aW9uPSIxMiIKICAgICAgICAgZGF0YS1hZ2Nsb2dvdXJsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWdjL2VhYy9lYWMxMDkyZC03NjhkLTRmMWEtNWNhYS03NzY0M2EyNmE5OGEvbG9nby8yNjB4MTYwXzhlZTY1NjRmLTFhMzgtNDQ2Yi04ZWRhLWM2MjU4M2NmNjUyMS5qcGciCiAgICAgICAgIGNsYXNzPSJvZmZlci1ibG9jayBjbGVhcmZpeCI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZSI+CiAgICA8ZGl2IGNsYXNzPSJwaWN0dXJlLXdyYXBwZXIiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYi1saW5rIG9mZmVyLWxpbmsgZGVmYXVsdC1waWN0dXJlIGltZ0xpcXVpZEZpbGwgaW1nTGlxdWlkIiBkYXRhLXRyaWdnZXItaW1nbGlxdWlkPSIxIiBkYXRhLWltZ0xpcXVpZC1maWxsPSJ0cnVlIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxhenkiIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICBhbHQ9IlZlbnRlIGxvZnQgUGFyaXMgMTEgJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+MTA5PC9zcGFuPiBtwrIgZW52aXJvbiAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+NDwvc3Bhbj4gcGnDqGNlcyIgZGF0YS1vcmlnaW5hbD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2Fkcy9waG90by1wcm9wLTMzNXgyNTMvMzdhLzcvN2YzMzViYjYtYWY2MS00OTM5LWI0ZDQtNDdhZDNkYmM5ODczLmpwZyI+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZmxhZy1jb250YWluZXIiPjxkaXYgY2xhc3M9ImNhcCBmbGFnICIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIiBpdGVtc2NvcGU+PHNwYW4gaXRlbXByb3A9ImF2YWlsYWJpbGl0eSI+PHNwYW4gY2xhc3M9IiI+PC9zcGFuPjwvc3Bhbj48L2Rpdj48L2Rpdj4gICAgICAgIDxhIGNsYXNzPSJhZGQtdG8tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjM3QTY5MTk2LUJERjctMUFCRi01NUE5LTk2MUI5MzQ5QjdFQiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWVsZW1lbnR0b21vdmU9IiNoZWFkZXItb2ZmZXItMzdBNjkxOTYtQkRGNy0xQUJGLTU1QTktOTYxQjkzNDlCN0VCIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtYm9yZGVyIj48L2k+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGNsYXNzPSJyZW1vdmUtZnJvbS1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iMzdBNjkxOTYtQkRGNy0xQUJGLTU1QTktOTYxQjkzNDlCN0VCIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LXNlbGVjdGVkIj48L2k+CiAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUtbW9yZSI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItcGljdHVyZS1jb3VudCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24tLWltYWdlIj48L2k+IDEvNzxzcGFuPiAtIFZvaXIgbGVzIHBob3Rvczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMiPgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXByaWNlIj4KICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLXByaWNlIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICAgICAgICAgIDxzcGFuPjg2MCAwMDAg4oKsPC9zcGFuPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItYmFuayBtZWEiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZS1pbW1vYmlsaWVyLmNyZWRpdC1hZ3JpY29sZS5mci9zaW11bGNhLz9PUkk9c2Vsb2dlcmNhbXBhZ25lJnh0b3I9QUwtMi1bcGFydGVuYXJpYXRdLVtMb2dpYy1pbW1vXS1bbGllbl9zZXJ2aWNlc10tW3BkbF0tW2Rlc2t0b3BdIiB0aXRsZT0iUXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID8iIGNsYXNzPSJzaXplXzExIHJlZCB1bmRlcmxpbmUiIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmU6OkxpZW5fUGFydGVuYWlyZV9CYW5jYWlyZV9MaXN0ZV9Bbm5vbmNlcycsICdOJyk7IiByZWw9Im5vZm9sbG93Ij5PdSAzIDQ3MSDigqwgLyBtb2lzKiA8YnIvPlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/PC9hPiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJMb2Z0Ii8+CiAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50PSIxMDkgbcKyIC4gNCBwacOoY2VzIC4gUGFyaXMgMTEgKDc1MDExKSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtMzdhNjkxOTYtYmRmNy0xYWJmLTU1YTktOTYxYjkzNDliN2ViLmh0bSIgdGl0bGU9IlZlbnRlIGxvZnQgNCBwacOoY2VzIFBhcmlzIDExZSAxMDkgbcKyIiBjbGFzcz0ib2ZmZXItbGluayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV8xMzo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj5WZW50ZSBsb2Z0PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tbWVhc3VyaW5nLXRhcGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz4xMDk8L3NwYW4+IG3CsiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz40PC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1iZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWJlZHJvb20iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Mzwvc3Bhbj4gY2guICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLWhhbGYiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1sb2NhbGl0eSI+UGFyaXMgMTEgKDc1MDExKTwvc3Bhbj48L2Rpdj48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtMzdhNjkxOTYtYmRmNy0xYWJmLTU1YTktOTYxYjkzNDliN2ViLmh0bSIgdGl0bGU9IlBhcmlzIiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tc2VjdG9yIG9mZmVyLXNlY3RvciBvZmZlci1saW5rIj5QYXJpczwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1hZ2VuY3lMb2dvIG5vTG9nbyI+CiAgICAKICAgIAogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEgY2xlYXJmaXgiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWRldGFpbHMtY3RhLS1kZWNvdXZyaXIiPiBWb2lyIGwnYW5ub25jZTwvc3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdCI+ICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IjM3QTY5MTk2LUJERjctMUFCRi01NUE5LTk2MUI5MzQ5QjdFQiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1lbWFpbCI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLXRlbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iMzdBNjkxOTYtQkRGNy0xQUJGLTU1QTktOTYxQjkzNDlCN0VCIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXRlbGVwaG9uZSI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9BcGFydG1lbnRDb21wbGV4IiAgICAgICAgY2xhc3M9Im9mZmVyLWxpc3QtaXRlbSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItRkRFMTNCODUtODc3Ri05NzkzLUQ3QTktMEE5NjExMzg4ODYzIgogICAgICAgICBkYXRhLXJlc3VsdD0ic3RhbmRhcmRSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjEzIgogICAgICAgICBkYXRhLWFnY2xvZ291cmw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZ2MvZWFjL2VhYzEwOTJkLTc2OGQtNGYxYS01Y2FhLTc3NjQzYTI2YTk4YS9sb2dvLzI2MHgxNjBfOGVlNjU2NGYtMWEzOC00NDZiLThlZGEtYzYyNTgzY2Y2NTIxLmpwZyIKICAgICAgICAgY2xhc3M9Im9mZmVyLWJsb2NrIGNsZWFyZml4Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlIj4KICAgIDxkaXYgY2xhc3M9InBpY3R1cmUtd3JhcHBlciI+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLWxlZnQiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tcmlnaHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9InRodW1iLWxpbmsgb2ZmZXItbGluayBkZWZhdWx0LXBpY3R1cmUgaW1nTGlxdWlkRmlsbCBpbWdMaXF1aWQiIGRhdGEtdHJpZ2dlci1pbWdsaXF1aWQ9IjEiIGRhdGEtaW1nTGlxdWlkLWZpbGw9InRydWUiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPGltZyBjbGFzcz0ibGF6eSIgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgIGFsdD0iVmVudGUgYXBwYXJ0ZW1lbnQgUGFyaXMgMTMgJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+NDg8L3NwYW4+IG3CsiBlbnZpcm9uICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4yPC9zcGFuPiBwacOoY2VzIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My9mZGUvZi9mNDVjOWM0NS0zOWQ4LTRkMTAtYjFiOS0wOGQ3ZjBhMjRhMzguanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+PGRpdiBjbGFzcz0iY2FwIGZsYWcgIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGl0ZW1zY29wZT48c3BhbiBpdGVtcHJvcD0iYXZhaWxhYmlsaXR5Ij48c3BhbiBjbGFzcz0iIj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PiAgICAgICAgPGEgY2xhc3M9ImFkZC10by1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iRkRFMTNCODUtODc3Ri05NzkzLUQ3QTktMEE5NjExMzg4ODYzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci1GREUxM0I4NS04NzdGLTk3OTMtRDdBOS0wQTk2MTEzODg4NjMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICA8L2E+CiAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSJGREUxM0I4NS04NzdGLTk3OTMtRDdBOS0wQTk2MTEzODg4NjMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT4KICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZS1tb3JlIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1waWN0dXJlLWNvdW50Ij4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbi0taW1hZ2UiPjwvaT4gMS82PHNwYW4+IC0gVm9pciBsZXMgcGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtcHJpY2UiPgogICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItcHJpY2UiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICAgICAgICAgICAgPHNwYW4+NTc2IDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1iYW5rIG1lYSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9lLWltbW9iaWxpZXIuY3JlZGl0LWFncmljb2xlLmZyL3NpbXVsY2EvP09SST1zZWxvZ2VyY2FtcGFnbmUmeHRvcj1BTC0yLVtwYXJ0ZW5hcmlhdF0tW0xvZ2ljLWltbW9dLVtsaWVuX3NlcnZpY2VzXS1bcGRsXS1bZGVza3RvcF0iIHRpdGxlPSJRdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPyIgY2xhc3M9InNpemVfMTEgcmVkIHVuZGVybGluZSIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0xpZW5fUGFydGVuYWlyZV9CYW5jYWlyZTo6TGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlX0xpc3RlX0Fubm9uY2VzJywgJ04nKTsiIHJlbD0ibm9mb2xsb3ciPk91IDIgMzI1IOKCrCAvIG1vaXMqIDxici8+UXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID88L2E+ICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9Im5hbWUiIGNvbnRlbnQ9IkFwcGFydGVtZW50Ii8+CiAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50PSI0OCBtwrIgLiAyIHBpw6hjZXMgLiBQYXJpcyAxMyAoNzUwMTMpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS1mZGUxM2I4NS04NzdmLTk3OTMtZDdhOS0wYTk2MTEzODg4NjMuaHRtIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIFBhcmlzIDEzZSA0OCBtwrIiIGNsYXNzPSJvZmZlci1saW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdBY3Rpb25fTGlzdGVfQW5ub25jZXM6OkJsb2NfQW5ub25jZTo6QmxvY19Bbm5vbmNlXzE0OjpCbG9jX0Fubm9uY2VfVHlwZV9kZV9CaWVuJywgJ04nKTsiIGZsYWc9ImlzU3RhbmRhcmQiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLXR5cGUiPlZlbnRlIGFwcGFydGVtZW50PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tbWVhc3VyaW5nLXRhcGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz40ODwvc3Bhbj4gbcKyICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1yb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXBpZWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjI8L3NwYW4+IHAuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24taGFsZiI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLWxvY2FsaXR5Ij5QYXJpcyAxMyAoNzUwMTMpPC9zcGFuPjwvZGl2PjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS1mZGUxM2I4NS04NzdmLTk3OTMtZDdhOS0wYTk2MTEzODg4NjMuaHRtIiB0aXRsZT0iUGFyaXMiIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1zZWN0b3Igb2ZmZXItc2VjdG9yIG9mZmVyLWxpbmsiPlBhcmlzPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gbm9Mb2dvIj4KICAgIAogICAgCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YSBjbGVhcmZpeCI+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItZGV0YWlscy1jdGEtLWRlY291dnJpciI+IFZvaXIgbCdhbm5vbmNlPC9zcGFuPgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0Ij4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS1lbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iRkRFMTNCODUtODc3Ri05NzkzLUQ3QTktMEE5NjExMzg4ODYzIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWVtYWlsIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tdGVsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSJGREUxM0I4NS04NzdGLTk3OTMtRDdBOS0wQTk2MTEzODg4NjMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tdGVsZXBob25lIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0FwYXJ0bWVudENvbXBsZXgiICAgICAgICBjbGFzcz0ib2ZmZXItbGlzdC1pdGVtIj4KICAgIDxkaXYgaWQ9ImhlYWRlci1vZmZlci01QTk2NzM2NS1CNTk5LUU1QjktRDBFRC1EODNBNDFBMjFGQTciCiAgICAgICAgIGRhdGEtcmVzdWx0PSJzdGFuZGFyZFJlc3VsdCIKICAgICAgICAgZGF0YS1wb3NpdGlvbj0iMTQiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2FnYy9hMDYvYTA2YmUxYWItOGM4ZS00MmQzLTlmZTUtMGU4OGU5N2U3ZmU0L2xvZ28vMjYweDE2MF9hYzJhY2ZlMS1hYTE1LTQxYTgtOGNjYy05YWRiZTZlY2Y0NjkuanBnIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAwNyAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz4zMDk8L3NwYW4+IG3CsiBlbnZpcm9uICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz43PC9zcGFuPiBwacOoY2VzIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My81YTkvNS81NDkwOWMzNi1hM2RjLTQ4YmMtYWNiMS1mMWJlNjc3YThkY2EuanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+PGRpdiBjbGFzcz0iY2FwIGZsYWcgIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGl0ZW1zY29wZT48c3BhbiBpdGVtcHJvcD0iYXZhaWxhYmlsaXR5Ij48c3BhbiBjbGFzcz0iIj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PiAgICAgICAgPGEgY2xhc3M9ImFkZC10by1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iNUE5NjczNjUtQjU5OS1FNUI5LUQwRUQtRDgzQTQxQTIxRkE3IgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci01QTk2NzM2NS1CNTk5LUU1QjktRDBFRC1EODNBNDFBMjFGQTciCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICA8L2E+CiAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI1QTk2NzM2NS1CNTk5LUU1QjktRDBFRC1EODNBNDFBMjFGQTciCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT4KICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZS1tb3JlIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1waWN0dXJlLWNvdW50Ij4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbi0taW1hZ2UiPjwvaT4gMS8xMDxzcGFuPiAtIFZvaXIgbGVzIHBob3Rvczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMiPgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXByaWNlIj4KICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLXByaWNlIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICAgICAgICAgIDxzcGFuPjkgNjAwIDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1iYW5rIG1lYSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9lLWltbW9iaWxpZXIuY3JlZGl0LWFncmljb2xlLmZyL3NpbXVsY2EvP09SST1zZWxvZ2VyY2FtcGFnbmUmeHRvcj1BTC0yLVtwYXJ0ZW5hcmlhdF0tW0xvZ2ljLWltbW9dLVtsaWVuX3NlcnZpY2VzXS1bcGRsXS1bZGVza3RvcF0iIHRpdGxlPSJRdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPyIgY2xhc3M9InNpemVfMTEgcmVkIHVuZGVybGluZSIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0xpZW5fUGFydGVuYWlyZV9CYW5jYWlyZTo6TGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlX0xpc3RlX0Fubm9uY2VzJywgJ04nKTsiIHJlbD0ibm9mb2xsb3ciPk91IDM4IDc1NSDigqwgLyBtb2lzKiA8YnIvPlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/PC9hPiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJBcHBhcnRlbWVudCIvPgogICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICAgICAgY29udGVudD0iMzA5IG3CsiAuIDcgcGnDqGNlcyAuIFBhcmlzIDA3ICg3NTAwNykiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTVhOTY3MzY1LWI1OTktZTViOS1kMGVkLWQ4M2E0MWEyMWZhNy5odG0iIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA3IHBpw6hjZXMgUGFyaXMgN2UgMzA5IG3CsiIgY2xhc3M9Im9mZmVyLWxpbmsiIG9uY2xpY2s9InJldHVybiB4dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6QmxvY19Bbm5vbmNlOjpCbG9jX0Fubm9uY2VfMTU6OkJsb2NfQW5ub25jZV9UeXBlX2RlX0JpZW4nLCAnTicpOyIgZmxhZz0iaXNTdGFuZGFyZCI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtdHlwZSI+VmVudGUgYXBwYXJ0ZW1lbnQ8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWFyZWEiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1tZWFzdXJpbmctdGFwZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjMwOTwvc3Bhbj4gbcKyICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1yb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXBpZWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjc8L3NwYW4+IHAuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWJlZHJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tYmVkcm9vbSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4zPC9zcGFuPiBjaC4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24taGFsZiI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLWxvY2FsaXR5Ij5QYXJpcyAwNyAoNzUwMDcpPC9zcGFuPjwvZGl2PjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS01YTk2NzM2NS1iNTk5LWU1YjktZDBlZC1kODNhNDFhMjFmYTcuaHRtIiB0aXRsZT0iUGFyaXMiIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1zZWN0b3Igb2ZmZXItc2VjdG9yIG9mZmVyLWxpbmsiPlBhcmlzPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gIj4KICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLW1vcmVwIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FnZW5jZS1pbW1vYmlsaWVyZS9wYXJpcy04ZWdyYXZlbWUvYW5ub25jZXMtaW1tb2JpbGllci1wYXJpcy04ZWdyYXZlbWVfNzUwMDgtQTA2QkUxQUItOEM4RS00MkQzLTlGRTUtMEU4OEU5N0U3RkU0Lmh0bWwiIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJ0b3AueHRfYWRjKHRoaXMsICdQVUItMS03MzgyODQ1MS0tW0R1bzNdLVtMSV0tWzE1MzUwMV0tWzEzNzU5MjJdJyk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZ2MvYTA2L2EwNmJlMWFiLThjOGUtNDJkMy05ZmU1LTBlODhlOTdlN2ZlNC9sb2dvLzYweDQwX2FjMmFjZmUxLWFhMTUtNDFhOC04Y2NjLTlhZGJlNmVjZjQ2OS5qcGciIHdpZHRoPSIzMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWFnZW5jeS13ZWJzaXRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5lbmdlbHZvZWxrZXJzLmNvbS9wYXJpcyIgdGl0bGU9IkNsaXF1ZXogaWNpIHBvdXIgdmlzaXRlciBsZSBzaXRlIGRlIGwnYWdlbmNlIgogICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub2ZvbGxvdyIgb25jbGljaz0idG9wLnh0X2FkYyh0aGlzLCAnUFVCLTEtNzM4Mjg0NTEtLVtEdW8zXS1bTEldLVswNDM1MDFdLVsxMzc1OTIyXScpOyI+U2l0ZSB3ZWI8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YSBjbGVhcmZpeCI+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItZGV0YWlscy1jdGEtLWRlY291dnJpciI+IFZvaXIgbCdhbm5vbmNlPC9zcGFuPgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0Ij4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS1lbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iNUE5NjczNjUtQjU5OS1FNUI5LUQwRUQtRDgzQTQxQTIxRkE3IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWVtYWlsIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tdGVsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI1QTk2NzM2NS1CNTk5LUU1QjktRDBFRC1EODNBNDFBMjFGQTciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tdGVsZXBob25lIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0FwYXJ0bWVudENvbXBsZXgiICAgICAgICBjbGFzcz0ib2ZmZXItbGlzdC1pdGVtIj4KICAgIDxkaXYgaWQ9ImhlYWRlci1vZmZlci00MjkwMDVENi1FMjNCLTdGNzYtNTNGNS0xMDExRDUyNzQxOEUiCiAgICAgICAgIGRhdGEtcmVzdWx0PSJzdGFuZGFyZFJlc3VsdCIKICAgICAgICAgZGF0YS1wb3NpdGlvbj0iMTUiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2FnYy9hMDYvYTA2YmUxYWItOGM4ZS00MmQzLTlmZTUtMGU4OGU5N2U3ZmU0L2xvZ28vMjYweDE2MF9hYzJhY2ZlMS1hYTE1LTQxYTgtOGNjYy05YWRiZTZlY2Y0NjkuanBnIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAwNyAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz4yMzU8L3NwYW4+IG3CsiBlbnZpcm9uICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz43PC9zcGFuPiBwacOoY2VzIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My80MjkvYi9iMzAxYmNlZi1jMmI0LTQ1YmMtYTVjOS01NTc0MzIzNjY0M2MuanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+PGRpdiBjbGFzcz0iY2FwIGZsYWcgIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGl0ZW1zY29wZT48c3BhbiBpdGVtcHJvcD0iYXZhaWxhYmlsaXR5Ij48c3BhbiBjbGFzcz0iIj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PiAgICAgICAgPGEgY2xhc3M9ImFkZC10by1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iNDI5MDA1RDYtRTIzQi03Rjc2LTUzRjUtMTAxMUQ1Mjc0MThFIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZWxlbWVudHRvbW92ZT0iI2hlYWRlci1vZmZlci00MjkwMDVENi1FMjNCLTdGNzYtNTNGNS0xMDExRDUyNzQxOEUiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1ib3JkZXIiPjwvaT4KICAgICAgICA8L2E+CiAgICAgICAgPGEgY2xhc3M9InJlbW92ZS1mcm9tLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI0MjkwMDVENi1FMjNCLTdGNzYtNTNGNS0xMDExRDUyNzQxOEUiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1tZWE9IiIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtc2VsZWN0ZWQiPjwvaT4KICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZS1tb3JlIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1waWN0dXJlLWNvdW50Ij4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbi0taW1hZ2UiPjwvaT4gMS85PHNwYW4+IC0gVm9pciBsZXMgcGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtcHJpY2UiPgogICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItcHJpY2UiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICAgICAgICAgICAgPHNwYW4+MyA2MDAgMDAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLWJhbmsgbWVhIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2UtaW1tb2JpbGllci5jcmVkaXQtYWdyaWNvbGUuZnIvc2ltdWxjYS8/T1JJPXNlbG9nZXJjYW1wYWduZSZ4dG9yPUFMLTItW3BhcnRlbmFyaWF0XS1bTG9naWMtaW1tb10tW2xpZW5fc2VydmljZXNdLVtwZGxdLVtkZXNrdG9wXSIgdGl0bGU9IlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/IiBjbGFzcz0ic2l6ZV8xMSByZWQgdW5kZXJsaW5lIiB0YXJnZXQ9Il9ibGFuayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnTGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlOjpMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmVfTGlzdGVfQW5ub25jZXMnLCAnTicpOyIgcmVsPSJub2ZvbGxvdyI+T3UgMTQgNTMzIOKCrCAvIG1vaXMqIDxici8+UXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID88L2E+ICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9Im5hbWUiIGNvbnRlbnQ9IkFwcGFydGVtZW50Ii8+CiAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50PSIyMzUgbcKyIC4gNyBwacOoY2VzIC4gUGFyaXMgMDcgKDc1MDA3KSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtNDI5MDA1ZDYtZTIzYi03Zjc2LTUzZjUtMTAxMWQ1Mjc0MThlLmh0bSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDcgcGnDqGNlcyBQYXJpcyA3ZSAyMzUgbcKyIiBjbGFzcz0ib2ZmZXItbGluayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV8xNjo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj5WZW50ZSBhcHBhcnRlbWVudDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLW1lYXN1cmluZy10YXBlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+MjM1PC9zcGFuPiBtwrIgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLXJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tcGllY2UiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Nzwvc3Bhbj4gcC4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYmVkcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1iZWRyb29tIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjU8L3NwYW4+IGNoLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi1oYWxmIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tbG9jYWxpdHkiPlBhcmlzIDA3ICg3NTAwNyk8L3NwYW4+PC9kaXY+PGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTQyOTAwNWQ2LWUyM2ItN2Y3Ni01M2Y1LTEwMTFkNTI3NDE4ZS5odG0iIHRpdGxlPSJQYXJpcyIgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLXNlY3RvciBvZmZlci1zZWN0b3Igb2ZmZXItbGluayI+UGFyaXM8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtYWdlbmN5TG9nbyAiPgogICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbW9yZXAiPgogICAgICAgICAgICA8YSBocmVmPSIvYWdlbmNlLWltbW9iaWxpZXJlL3BhcmlzLThlZ3JhdmVtZS9hbm5vbmNlcy1pbW1vYmlsaWVyLXBhcmlzLThlZ3JhdmVtZV83NTAwOC1BMDZCRTFBQi04QzhFLTQyRDMtOUZFNS0wRTg4RTk3RTdGRTQuaHRtbCIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTczODI4NDU0LS1bRHVvM10tW0xJXS1bMTUzNTAxXS1bMTM3NTkyMl0nKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2FnYy9hMDYvYTA2YmUxYWItOGM4ZS00MmQzLTlmZTUtMGU4OGU5N2U3ZmU0L2xvZ28vNjB4NDBfYWMyYWNmZTEtYWExNS00MWE4LThjY2MtOWFkYmU2ZWNmNDY5LmpwZyIgd2lkdGg9IjMwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItYWdlbmN5LXdlYnNpdGUiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LmVuZ2Vsdm9lbGtlcnMuY29tL3BhcmlzIiB0aXRsZT0iQ2xpcXVleiBpY2kgcG91ciB2aXNpdGVyIGxlIHNpdGUgZGUgbCdhZ2VuY2UiCiAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vZm9sbG93IiBvbmNsaWNrPSJ0b3AueHRfYWRjKHRoaXMsICdQVUItMS03MzgyODQ1NC0tW0R1bzNdLVtMSV0tWzA0MzUwMV0tWzEzNzU5MjJdJyk7Ij5TaXRlIHdlYjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhIGNsZWFyZml4Ij4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1kZXRhaWxzLWN0YS0tZGVjb3V2cmlyIj4gVm9pciBsJ2Fubm9uY2U8L3NwYW4+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QiPiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLWVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI0MjkwMDVENi1FMjNCLTdGNzYtNTNGNS0xMDExRDUyNzQxOEUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tZW1haWwiPjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS10ZWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IjQyOTAwNUQ2LUUyM0ItN0Y3Ni01M0Y1LTEwMTFENTI3NDE4RSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS10ZWxlcGhvbmUiPjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvQXBhcnRtZW50Q29tcGxleCIgICAgICAgIGNsYXNzPSJvZmZlci1saXN0LWl0ZW0iPgogICAgPGRpdiBpZD0iaGVhZGVyLW9mZmVyLTdBMUE3OTMyLTRGMUMtQzlDMy0xNzIzLTc4NTUxOTY3QjZDNSIKICAgICAgICAgZGF0YS1yZXN1bHQ9InN0YW5kYXJkUmVzdWx0IgogICAgICAgICBkYXRhLXBvc2l0aW9uPSIxNiIKICAgICAgICAgZGF0YS1hZ2Nsb2dvdXJsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWdjL2EwNi9hMDZiZTFhYi04YzhlLTQyZDMtOWZlNS0wZTg4ZTk3ZTdmZTQvbG9nby8yNjB4MTYwX2FjMmFjZmUxLWFhMTUtNDFhOC04Y2NjLTlhZGJlNmVjZjQ2OS5qcGciCiAgICAgICAgIGNsYXNzPSJvZmZlci1ibG9jayBjbGVhcmZpeCI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItcGljdHVyZSI+CiAgICA8ZGl2IGNsYXNzPSJwaWN0dXJlLXdyYXBwZXIiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYi1saW5rIG9mZmVyLWxpbmsgZGVmYXVsdC1waWN0dXJlIGltZ0xpcXVpZEZpbGwgaW1nTGlxdWlkIiBkYXRhLXRyaWdnZXItaW1nbGlxdWlkPSIxIiBkYXRhLWltZ0xpcXVpZC1maWxsPSJ0cnVlIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxhenkiIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICBhbHQ9IlZlbnRlIGFwcGFydGVtZW50IFBhcmlzIDE1ICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjEyMjwvc3Bhbj4gbcKyIGVudmlyb24gJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjY8L3NwYW4+IHBpw6hjZXMiIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0zMzV4MjUzLzdhMS9iL2IwZmMzZjFkLWM0N2ItNDYzYi1iOGYzLTIwZjFhOTY3MzUzZC5qcGciPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZsYWctY29udGFpbmVyIj48ZGl2IGNsYXNzPSJjYXAgZmxhZyAiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciIgaXRlbXNjb3BlPjxzcGFuIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiPjxzcGFuIGNsYXNzPSIiPjwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+ICAgICAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSI3QTFBNzkzMi00RjFDLUM5QzMtMTcyMy03ODU1MTk2N0I2QzUiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1lbGVtZW50dG9tb3ZlPSIjaGVhZGVyLW9mZmVyLTdBMUE3OTMyLTRGMUMtQzlDMy0xNzIzLTc4NTUxOTY3QjZDNSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LWJvcmRlciI+PC9pPgogICAgICAgIDwvYT4KICAgICAgICA8YSBjbGFzcz0icmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjdBMUE3OTMyLTRGMUMtQzlDMy0xNzIzLTc4NTUxOTY3QjZDNSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1zZWxlY3RlZCI+PC9pPgogICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlLW1vcmUiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLXBpY3R1cmUtY291bnQiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uLS1pbWFnZSI+PC9pPiAxLzEwPHNwYW4+IC0gVm9pciBsZXMgcGhvdG9zPC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtcHJpY2UiPgogICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItcHJpY2UiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICAgICAgICAgICAgPHNwYW4+MSA4NjAgMDAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLWJhbmsgbWVhIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2UtaW1tb2JpbGllci5jcmVkaXQtYWdyaWNvbGUuZnIvc2ltdWxjYS8/T1JJPXNlbG9nZXJjYW1wYWduZSZ4dG9yPUFMLTItW3BhcnRlbmFyaWF0XS1bTG9naWMtaW1tb10tW2xpZW5fc2VydmljZXNdLVtwZGxdLVtkZXNrdG9wXSIgdGl0bGU9IlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/IiBjbGFzcz0ic2l6ZV8xMSByZWQgdW5kZXJsaW5lIiB0YXJnZXQ9Il9ibGFuayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnTGllbl9QYXJ0ZW5haXJlX0JhbmNhaXJlOjpMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmVfTGlzdGVfQW5ub25jZXMnLCAnTicpOyIgcmVsPSJub2ZvbGxvdyI+T3UgNyA1MDgg4oKsIC8gbW9pcyogPGJyLz5RdWVsIHRhdXggcG91ciB2b3RyZSBwcm9qZXQgPzwvYT4gICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3RpayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQiLz4KICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9IjEyMiBtwrIgLiA2IHBpw6hjZXMgLiBQYXJpcyAxNSAoNzUwMTUpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2RldGFpbC12ZW50ZS03YTFhNzkzMi00ZjFjLWM5YzMtMTcyMy03ODU1MTk2N2I2YzUuaHRtIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIFBhcmlzIDE1ZSAxMjIgbcKyIiBjbGFzcz0ib2ZmZXItbGluayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV8xNzo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj5WZW50ZSBhcHBhcnRlbWVudDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLW1lYXN1cmluZy10YXBlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+MTIyPC9zcGFuPiBtwrIgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLXJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tcGllY2UiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Njwvc3Bhbj4gcC4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYmVkcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1iZWRyb29tIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjQ8L3NwYW4+IGNoLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi1oYWxmIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tbG9jYWxpdHkiPlBhcmlzIDE1ICg3NTAxNSk8L3NwYW4+PC9kaXY+PGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTdhMWE3OTMyLTRmMWMtYzljMy0xNzIzLTc4NTUxOTY3YjZjNS5odG0iIHRpdGxlPSJQYXJpcyIgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLXNlY3RvciBvZmZlci1zZWN0b3Igb2ZmZXItbGluayI+UGFyaXM8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtYWdlbmN5TG9nbyAiPgogICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbW9yZXAiPgogICAgICAgICAgICA8YSBocmVmPSIvYWdlbmNlLWltbW9iaWxpZXJlL3BhcmlzLThlZ3JhdmVtZS9hbm5vbmNlcy1pbW1vYmlsaWVyLXBhcmlzLThlZ3JhdmVtZV83NTAwOC1BMDZCRTFBQi04QzhFLTQyRDMtOUZFNS0wRTg4RTk3RTdGRTQuaHRtbCIgdGFyZ2V0PSJfYmxhbmsiIG9uY2xpY2s9InRvcC54dF9hZGModGhpcywgJ1BVQi0xLTczMjE4NzE1LS1bRHVvM10tW0xJXS1bMTUzNTAxXS1bMTM3NTkyMl0nKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2FnYy9hMDYvYTA2YmUxYWItOGM4ZS00MmQzLTlmZTUtMGU4OGU5N2U3ZmU0L2xvZ28vNjB4NDBfYWMyYWNmZTEtYWExNS00MWE4LThjY2MtOWFkYmU2ZWNmNDY5LmpwZyIgd2lkdGg9IjMwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItYWdlbmN5LXdlYnNpdGUiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LmVuZ2Vsdm9lbGtlcnMuY29tL3BhcmlzIiB0aXRsZT0iQ2xpcXVleiBpY2kgcG91ciB2aXNpdGVyIGxlIHNpdGUgZGUgbCdhZ2VuY2UiCiAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vZm9sbG93IiBvbmNsaWNrPSJ0b3AueHRfYWRjKHRoaXMsICdQVUItMS03MzIxODcxNS0tW0R1bzNdLVtMSV0tWzA0MzUwMV0tWzEzNzU5MjJdJyk7Ij5TaXRlIHdlYjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhIGNsZWFyZml4Ij4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1kZXRhaWxzLWN0YS0tZGVjb3V2cmlyIj4gVm9pciBsJ2Fubm9uY2U8L3NwYW4+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QiPiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLWVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI3QTFBNzkzMi00RjFDLUM5QzMtMTcyMy03ODU1MTk2N0I2QzUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tZW1haWwiPjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS10ZWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IjdBMUE3OTMyLTRGMUMtQzlDMy0xNzIzLTc4NTUxOTY3QjZDNSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzU3RhbmRhcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS10ZWxlcGhvbmUiPjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvQXBhcnRtZW50Q29tcGxleCIgICAgICAgIGNsYXNzPSJvZmZlci1saXN0LWl0ZW0gb2ZmZXItbGlzdC1pdGVtLS1leGNsdSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItQUM5QTU3RDQtQkYzMS00N0RDLTI4NTMtMzAyMDNGMDg1NUVGIgogICAgICAgICBkYXRhLXJlc3VsdD0iZXhjbHVSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjE3IgogICAgICAgICBkYXRhLWFnY2xvZ291cmw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZ2MvODJlLzgyZWQ4NmU1LWMxMTUtNGVkOC1hZWQ5LWFmYjc2NDVlNTZkZS9sb2dvLzI2MHgxNjBfYzJkZDJlMDEtYzA1My00Y2E3LTg4NzAtNmE4NjExNTk4NGExLmpwZyIKICAgICAgICAgY2xhc3M9Im9mZmVyLWJsb2NrIG9mZmVyLWJsb2NrLWV4Y2x1IGNsZWFyZml4Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlIj4KICAgIDxkaXYgY2xhc3M9InBpY3R1cmUtd3JhcHBlciI+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLWxlZnQiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tcmlnaHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9InRodW1iLWxpbmsgb2ZmZXItbGluayBkZWZhdWx0LXBpY3R1cmUgaW1nTGlxdWlkRmlsbCBpbWdMaXF1aWQiIGRhdGEtdHJpZ2dlci1pbWdsaXF1aWQ9IjEiIGRhdGEtaW1nTGlxdWlkLWZpbGw9InRydWUiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPGltZyBjbGFzcz0ibGF6eSIgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgIGFsdD0iVmVudGUgYXBwYXJ0ZW1lbnQgUGFyaXMgMTAgJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+NDg8L3NwYW4+IG3CsiBlbnZpcm9uICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4yPC9zcGFuPiBwacOoY2VzIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My9hYzkvYi9iYmZlODNhMy05ZWY0LTQ5MjYtYWQzOS0xYzc0Yjc4NmFiMGEuanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXAgZmxhZyBmbGFnLWJsdWUiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciIgaXRlbXNjb3BlPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhdmFpbGFiaWxpdHkiPkV4Y2x1c2l2aXTDqTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZGQtdG8tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IkFDOUE1N0Q0LUJGMzEtNDdEQy0yODUzLTMwMjAzRjA4NTVFRiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWVsZW1lbnR0b21vdmU9IiNoZWFkZXItb2ZmZXItQUM5QTU3RDQtQkYzMS00N0RDLTI4NTMtMzAyMDNGMDg1NUVGIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtYm9yZGVyIj48L2k+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGNsYXNzPSJyZW1vdmUtZnJvbS1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iQUM5QTU3RDQtQkYzMS00N0RDLTI4NTMtMzAyMDNGMDg1NUVGIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbW9kZT0iIiAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LXNlbGVjdGVkIj48L2k+CiAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUtbW9yZSI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItcGljdHVyZS1jb3VudCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24tLWltYWdlIj48L2k+IDEvNDxzcGFuPiAtIFZvaXIgbGVzIHBob3Rvczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMiPgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXByaWNlIj4KICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLXByaWNlIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICAgICAgICAgIDxzcGFuPjU5OSAwMDAg4oKsPC9zcGFuPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItYmFuayBtZWEiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZS1pbW1vYmlsaWVyLmNyZWRpdC1hZ3JpY29sZS5mci9zaW11bGNhLz9PUkk9c2Vsb2dlcmNhbXBhZ25lJnh0b3I9QUwtMi1bcGFydGVuYXJpYXRdLVtMb2dpYy1pbW1vXS1bbGllbl9zZXJ2aWNlc10tW3BkbF0tW2Rlc2t0b3BdIiB0aXRsZT0iUXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID8iIGNsYXNzPSJzaXplXzExIHJlZCB1bmRlcmxpbmUiIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmU6OkxpZW5fUGFydGVuYWlyZV9CYW5jYWlyZV9MaXN0ZV9Bbm5vbmNlcycsICdOJyk7IiByZWw9Im5vZm9sbG93Ij5PdSAyIDQxOCDigqwgLyBtb2lzKiA8YnIvPlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/PC9hPiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJBcHBhcnRlbWVudCIvPgogICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICAgICAgY29udGVudD0iNDggbcKyIC4gMiBwacOoY2VzIC4gUGFyaXMgMTAgKDc1MDEwKSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtYWM5YTU3ZDQtYmYzMS00N2RjLTI4NTMtMzAyMDNmMDg1NWVmLmh0bSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDIgcGnDqGNlcyBQYXJpcyAxMGUgNDggbcKyIiBjbGFzcz0ib2ZmZXItbGluayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV9FWENMVVNJVklURTo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc0V4Y2x1c2l2ZVZpc2liaWxpdHkiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLXR5cGUiPlZlbnRlIGFwcGFydGVtZW50PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1hcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tbWVhc3VyaW5nLXRhcGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz40ODwvc3Bhbj4gbcKyICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1yb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLXBpZWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjI8L3NwYW4+IHAuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWJlZHJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tYmVkcm9vbSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4xPC9zcGFuPiBjaC4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24taGFsZiI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLWxvY2FsaXR5Ij5QYXJpcyAxMCAoNzUwMTApPC9zcGFuPnw8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtYWM5YTU3ZDQtYmYzMS00N2RjLTI4NTMtMzAyMDNmMDg1NWVmLmh0bSIgdGl0bGU9IkNoJmFjaXJjO3RlYXUgZCdFYXUgLSBMYW5jcnkiIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1jaXR5IG9mZmVyLWJsb2NrIG9mZmVyLWxpbmsgb2ZmZXItY2l0eSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV9FWENMVVNJVklURTo6QmxvY19Bbm5vbmNlX1F1YXJ0aWVyJywgJ04nKTsiIGZsYWc9ImlzRXhjbHVzaXZlVmlzaWJpbGl0eSI+Q2gmYWNpcmM7dGVhdSBkJ0VhdSAtIExhbmNyeTwvYT48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1hZ2VuY3lMb2dvIG5vTG9nbyI+CiAgICAKICAgIAogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEgY2xlYXJmaXgiPgoKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWRldGFpbHMtY3RhLS1kZWNvdXZyaXIiPiBWb2lyIGwnYW5ub25jZTwvc3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdCI+ICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsY29udGFjdD0ibW9kYWxNYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyaWQ9IkFDOUE1N0Q0LUJGMzEtNDdEQy0yODUzLTMwMjAzRjA4NTVFRiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcnRyYW5zYWN0aW9udHlwZT0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmZsYWc9ImlzRXhjbHVzaXZlVmlzaWJpbGl0eSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWVtYWlsIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tdGVsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSJBQzlBNTdENC1CRjMxLTQ3REMtMjg1My0zMDIwM0YwODU1RUYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc0V4Y2x1c2l2ZVZpc2liaWxpdHkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS10ZWxlcGhvbmUiPjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvQXBhcnRtZW50Q29tcGxleCIgICAgICAgIGNsYXNzPSJvZmZlci1saXN0LWl0ZW0gb2ZmZXItbGlzdC1pdGVtLS1leGNsdSI+CiAgICA8ZGl2IGlkPSJoZWFkZXItb2ZmZXItNkNBM0ZGQUYtMUE0NS0zNzY3LTIzOUItRThCQzgyNDQ0QUVDIgogICAgICAgICBkYXRhLXJlc3VsdD0iZXhjbHVSZXN1bHQiCiAgICAgICAgIGRhdGEtcG9zaXRpb249IjE4IgogICAgICAgICBkYXRhLWFnY2xvZ291cmw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZ2MvODJlLzgyZWQ4NmU1LWMxMTUtNGVkOC1hZWQ5LWFmYjc2NDVlNTZkZS9sb2dvLzI2MHgxNjBfYzJkZDJlMDEtYzA1My00Y2E3LTg4NzAtNmE4NjExNTk4NGExLmpwZyIKICAgICAgICAgY2xhc3M9Im9mZmVyLWJsb2NrIG9mZmVyLWJsb2NrLWV4Y2x1IGNsZWFyZml4Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlIj4KICAgIDxkaXYgY2xhc3M9InBpY3R1cmUtd3JhcHBlciI+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhIHBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEtLWxlZnQiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tcmlnaHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9InRodW1iLWxpbmsgb2ZmZXItbGluayBkZWZhdWx0LXBpY3R1cmUgaW1nTGlxdWlkRmlsbCBpbWdMaXF1aWQiIGRhdGEtdHJpZ2dlci1pbWdsaXF1aWQ9IjEiIGRhdGEtaW1nTGlxdWlkLWZpbGw9InRydWUiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPGltZyBjbGFzcz0ibGF6eSIgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgIGFsdD0iVmVudGUgYXBwYXJ0ZW1lbnQgUGFyaXMgMDMgJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+MzY8L3NwYW4+IG3CsiBlbnZpcm9uICZidWxsOyA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4yPC9zcGFuPiBwacOoY2VzIiBkYXRhLW9yaWdpbmFsPSJodHRwczovL21tZi5sb2dpYy1pbW1vLmNvbS9tbWYvYWRzL3Bob3RvLXByb3AtMzM1eDI1My82Y2EvNC80NTE4MzI5Yi1mNjc2LTQ1YjYtODZhNy0xNWExMzA3ZGNlNGMuanBnIj4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnLWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXAgZmxhZyBmbGFnLWJsdWUiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciIgaXRlbXNjb3BlPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhdmFpbGFiaWxpdHkiPkV4Y2x1c2l2aXTDqTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZGQtdG8tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IjZDQTNGRkFGLTFBNDUtMzc2Ny0yMzlCLUU4QkM4MjQ0NEFFQyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWVsZW1lbnR0b21vdmU9IiNoZWFkZXItb2ZmZXItNkNBM0ZGQUYtMUE0NS0zNzY3LTIzOUItRThCQzgyNDQ0QUVDIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj4KICAgICAgICAgICAgPGkgY2xhc3M9Imljb24taGVhcnQtYm9yZGVyIj48L2k+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGNsYXNzPSJyZW1vdmUtZnJvbS1zZWxlY3Rpb24iCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1pZD0iNkNBM0ZGQUYtMUE0NS0zNzY3LTIzOUItRThCQzgyNDQ0QUVDIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tZnJvbXBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLXRyYW5zYWN0aW9uPSIxIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbWVhPSIiCiAgICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tbW9kZT0iIiAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LXNlbGVjdGVkIj48L2k+CiAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLTM2MCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUtbW9yZSI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItcGljdHVyZS1jb3VudCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24tLWltYWdlIj48L2k+IDEvNDxzcGFuPiAtIFZvaXIgbGVzIHBob3Rvczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMiPgogICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLXByaWNlIj4KICAgICAgICAgICAgPHAgY2xhc3M9Im9mZmVyLXByaWNlIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICAgICAgICAgIDxzcGFuPjQ2NSAwMDAg4oKsPC9zcGFuPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItYmFuayBtZWEiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZS1pbW1vYmlsaWVyLmNyZWRpdC1hZ3JpY29sZS5mci9zaW11bGNhLz9PUkk9c2Vsb2dlcmNhbXBhZ25lJnh0b3I9QUwtMi1bcGFydGVuYXJpYXRdLVtMb2dpYy1pbW1vXS1bbGllbl9zZXJ2aWNlc10tW3BkbF0tW2Rlc2t0b3BdIiB0aXRsZT0iUXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID8iIGNsYXNzPSJzaXplXzExIHJlZCB1bmRlcmxpbmUiIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmU6OkxpZW5fUGFydGVuYWlyZV9CYW5jYWlyZV9MaXN0ZV9Bbm5vbmNlcycsICdOJyk7IiByZWw9Im5vZm9sbG93Ij5PdSAxIDg3NyDigqwgLyBtb2lzKiA8YnIvPlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/PC9hPiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJBcHBhcnRlbWVudCIvPgogICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICAgICAgY29udGVudD0iMzYgbcKyIC4gMiBwacOoY2VzIC4gUGFyaXMgMDMgKDc1MDAzKSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtNmNhM2ZmYWYtMWE0NS0zNzY3LTIzOWItZThiYzgyNDQ0YWVjLmh0bSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDIgcGnDqGNlcyBQYXJpcyAzZSAzNiBtwrIiIGNsYXNzPSJvZmZlci1saW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdBY3Rpb25fTGlzdGVfQW5ub25jZXM6OkJsb2NfQW5ub25jZTo6QmxvY19Bbm5vbmNlX0VYQ0xVU0lWSVRFOjpCbG9jX0Fubm9uY2VfVHlwZV9kZV9CaWVuJywgJ04nKTsiIGZsYWc9ImlzRXhjbHVzaXZlVmlzaWJpbGl0eSI+PHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtdHlwZSI+VmVudGUgYXBwYXJ0ZW1lbnQ8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLWFyZWEiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1tZWFzdXJpbmctdGFwZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItYXJlYS1udW1iZXInPjM2PC9zcGFuPiBtwrIgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWNhcmFjdGVyaXN0aWstLXJvb21zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tcGllY2UiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Mjwvc3Bhbj4gcC4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYmVkcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1iZWRyb29tIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjE8L3NwYW4+IGNoLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi1oYWxmIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tbG9jYWxpdHkiPlBhcmlzIDAzICg3NTAwMyk8L3NwYW4+PC9kaXY+PGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLTZjYTNmZmFmLTFhNDUtMzc2Ny0yMzliLWU4YmM4MjQ0NGFlYy5odG0iIHRpdGxlPSJQYWlycyIgY2xhc3M9Im9mZmVyLWRldGFpbHMtbG9jYXRpb24tLXNlY3RvciBvZmZlci1zZWN0b3Igb2ZmZXItbGluayI+UGFpcnM8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtYWdlbmN5TG9nbyBub0xvZ28iPgogICAgCiAgICAKICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhIGNsZWFyZml4Ij4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1kZXRhaWxzLWN0YS0tZGVjb3V2cmlyIj4gVm9pciBsJ2Fubm9uY2U8L3NwYW4+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QiPiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLWVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSI2Q0EzRkZBRi0xQTQ1LTM3NjctMjM5Qi1FOEJDODI0NDRBRUMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc0V4Y2x1c2l2ZVZpc2liaWxpdHkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kZT0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvbnRhY3RhdXRvPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWVpc291cmNlPSJMSUNPTS1BRUktQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTlNVR0ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2lkdGg9IjYzNSIgZGF0YS1oZWlnaHQ9IjcwMCIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIKICAgICAgICAgICAgICAgICAgICBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiBkYXRhLXVuaXZlcnNlPSIxIiBkYXRhLXNvdXJjZT0iTElDT00tREVTS1RPUC1DT05UQUNULUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVFRFTC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1lbWFpbCI+PC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItY29udGFjdCBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtIG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0tLXRlbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iNkNBM0ZGQUYtMUE0NS0zNzY3LTIzOUItRThCQzgyNDQ0QUVDIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNFeGNsdXNpdmVWaXNpYmlsaXR5IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tdGVsZXBob25lIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0FwYXJ0bWVudENvbXBsZXgiICAgICAgICBjbGFzcz0ib2ZmZXItbGlzdC1pdGVtIj4KICAgIDxkaXYgaWQ9ImhlYWRlci1vZmZlci1GODM3ODYxQi04NEEyLTc3MDMtQTBFMy1DQUNFRjZFNjlDMTYiCiAgICAgICAgIGRhdGEtcmVzdWx0PSJzdGFuZGFyZFJlc3VsdCIKICAgICAgICAgZGF0YS1wb3NpdGlvbj0iMTkiCiAgICAgICAgIGRhdGEtYWdjbG9nb3VybD0iaHR0cHM6Ly9tbWYubG9naWMtaW1tby5jb20vbW1mL2FnYy84MmUvODJlZDg2ZTUtYzExNS00ZWQ4LWFlZDktYWZiNzY0NWU1NmRlL2xvZ28vMjYweDE2MF9jMmRkMmUwMS1jMDUzLTRjYTctODg3MC02YTg2MTE1OTg0YTEuanBnIgogICAgICAgICBjbGFzcz0ib2ZmZXItYmxvY2sgY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLXBpY3R1cmUiPgogICAgPGRpdiBjbGFzcz0icGljdHVyZS13cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpY3RvUGhvdG9OZXh0RmFrZUJsb2NNZWEgcGljdG9QaG90b05leHRGYWtlQmxvY01lYS0tbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icGljdG9QaG90b05leHRGYWtlQmxvY01lYSBwaWN0b1Bob3RvTmV4dEZha2VCbG9jTWVhLS1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0idGh1bWItbGluayBvZmZlci1saW5rIGRlZmF1bHQtcGljdHVyZSBpbWdMaXF1aWRGaWxsIGltZ0xpcXVpZCIgZGF0YS10cmlnZ2VyLWltZ2xpcXVpZD0iMSIgZGF0YS1pbWdMaXF1aWQtZmlsbD0idHJ1ZSIKICAgICAgICAgICAgPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJsYXp5IiBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgYWx0PSJWZW50ZSBhcHBhcnRlbWVudCBQYXJpcyAxNCAmYnVsbDsgPHNwYW4gY2xhc3M9J29mZmVyLWFyZWEtbnVtYmVyJz45Nzwvc3Bhbj4gbcKyIGVudmlyb24gJmJ1bGw7IDxzcGFuIGNsYXNzPSdvZmZlci1yb29tcy1udW1iZXInPjM8L3NwYW4+IHBpw6hjZXMiIGRhdGEtb3JpZ2luYWw9Imh0dHBzOi8vbW1mLmxvZ2ljLWltbW8uY29tL21tZi9hZHMvcGhvdG8tcHJvcC0zMzV4MjUzL2Y4My83LzcwMWUxN2JkLTE4YmUtNDcyNC04NDQwLWM4NDdjNDA0MjYzNy5qcGciPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZsYWctY29udGFpbmVyIj48ZGl2IGNsYXNzPSJjYXAgZmxhZyAiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciIgaXRlbXNjb3BlPjxzcGFuIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiPjxzcGFuIGNsYXNzPSIiPjwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+ICAgICAgICA8YSBjbGFzcz0iYWRkLXRvLXNlbGVjdGlvbiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWlkPSJGODM3ODYxQi04NEEyLTc3MDMtQTBFMy1DQUNFRjZFNjlDMTYiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1mcm9tcGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24tdHJhbnNhY3Rpb249IjEiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi1lbGVtZW50dG9tb3ZlPSIjaGVhZGVyLW9mZmVyLUY4Mzc4NjFCLTg0QTItNzcwMy1BMEUzLUNBQ0VGNkU2OUMxNiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWhlYXJ0LWJvcmRlciI+PC9pPgogICAgICAgIDwvYT4KICAgICAgICA8YSBjbGFzcz0icmVtb3ZlLWZyb20tc2VsZWN0aW9uIgogICAgICAgICAgIGRhdGEtbXlzZWxlY3Rpb24taWQ9IkY4Mzc4NjFCLTg0QTItNzcwMy1BMEUzLUNBQ0VGNkU2OUMxNiIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLWZyb21wYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgZGF0YS1teXNlbGVjdGlvbi10cmFuc2FjdGlvbj0iMSIKICAgICAgICAgICBkYXRhLW15c2VsZWN0aW9uLW1lYT0iIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1oZWFydC1zZWxlY3RlZCI+PC9pPgogICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi0zNjAiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1waWN0dXJlLW1vcmUiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLXBpY3R1cmUtY291bnQiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uLS1pbWFnZSI+PC9pPiAxLzQ8c3Bhbj4gLSBWb2lyIGxlcyBwaG90b3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzIj4KICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1wcmljZSI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJvZmZlci1wcmljZSIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgICAgICAgICA8c3Bhbj4xIDQ3MCA1MDAg4oKsPC9zcGFuPgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ib2ZmZXItYmFuayBtZWEiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZS1pbW1vYmlsaWVyLmNyZWRpdC1hZ3JpY29sZS5mci9zaW11bGNhLz9PUkk9c2Vsb2dlcmNhbXBhZ25lJnh0b3I9QUwtMi1bcGFydGVuYXJpYXRdLVtMb2dpYy1pbW1vXS1bbGllbl9zZXJ2aWNlc10tW3BkbF0tW2Rlc2t0b3BdIiB0aXRsZT0iUXVlbCB0YXV4IHBvdXIgdm90cmUgcHJvamV0ID8iIGNsYXNzPSJzaXplXzExIHJlZCB1bmRlcmxpbmUiIHRhcmdldD0iX2JsYW5rIiBvbmNsaWNrPSJyZXR1cm4geHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdMaWVuX1BhcnRlbmFpcmVfQmFuY2FpcmU6OkxpZW5fUGFydGVuYWlyZV9CYW5jYWlyZV9MaXN0ZV9Bbm5vbmNlcycsICdOJyk7IiByZWw9Im5vZm9sbG93Ij5PdSA1IDkzNiDigqwgLyBtb2lzKiA8YnIvPlF1ZWwgdGF1eCBwb3VyIHZvdHJlIHByb2pldCA/PC9hPiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJBcHBhcnRlbWVudCIvPgogICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICAgICAgY29udGVudD0iOTcgbcKyIC4gMyBwacOoY2VzIC4gUGFyaXMgMTQgKDc1MDE0KSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9kZXRhaWwtdmVudGUtZjgzNzg2MWItODRhMi03NzAzLWEwZTMtY2FjZWY2ZTY5YzE2Lmh0bSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDMgcGnDqGNlcyBQYXJpcyAxNGUgOTcgbcKyIiBjbGFzcz0ib2ZmZXItbGluayIgb25jbGljaz0icmV0dXJuIHh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpCbG9jX0Fubm9uY2U6OkJsb2NfQW5ub25jZV8yMDo6QmxvY19Bbm5vbmNlX1R5cGVfZGVfQmllbicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj48c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy10eXBlIj5WZW50ZSBhcHBhcnRlbWVudDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLW1lYXN1cmluZy10YXBlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdvZmZlci1hcmVhLW51bWJlcic+OTc8L3NwYW4+IG3CsiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZmVyLWRldGFpbHMtY2FyYWN0ZXJpc3Rpay0tcm9vbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGktaWNvbiBsaS1pY29uLS1waWVjZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nb2ZmZXItcm9vbXMtbnVtYmVyJz4zPC9zcGFuPiBwLiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2ZmZXItZGV0YWlscy1jYXJhY3RlcmlzdGlrLS1iZWRyb29tcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWJlZHJvb20iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J29mZmVyLXJvb21zLW51bWJlcic+Mjwvc3Bhbj4gY2guICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLWhhbGYiPjxzcGFuIGNsYXNzPSJvZmZlci1kZXRhaWxzLWxvY2F0aW9uLS1sb2NhbGl0eSI+UGFyaXMgMTQgKDc1MDE0KTwvc3Bhbj58PGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vZGV0YWlsLXZlbnRlLWY4Mzc4NjFiLTg0YTItNzcwMy1hMGUzLWNhY2VmNmU2OWMxNi5odG0iIHRpdGxlPSJNb250cGFybmFzc2UgLSBSYXNwYWlsIiBjbGFzcz0ib2ZmZXItZGV0YWlscy1sb2NhdGlvbi0tY2l0eSBvZmZlci1ibG9jayBvZmZlci1saW5rIG9mZmVyLWNpdHkiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6QmxvY19Bbm5vbmNlOjpCbG9jX0Fubm9uY2VfMjA6OkJsb2NfQW5ub25jZV9RdWFydGllcicsICdOJyk7IiBmbGFnPSJpc1N0YW5kYXJkIj5Nb250cGFybmFzc2UgLSBSYXNwYWlsPC9hPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWFnZW5jeUxvZ28gbm9Mb2dvIj4KICAgIAogICAgCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJvZmZlci1kZXRhaWxzLWN0YSBjbGVhcmZpeCI+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2dpYy1idG4gb2ZmZXItZGV0YWlscy1jdGEtLWRlY291dnJpciI+IFZvaXIgbCdhbm5vbmNlPC9zcGFuPgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0Ij4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIG9mZmVyLWNvbnRhY3Qgb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbSBvZmZlci1kZXRhaWxzLWN0YS0tY29udGFjdC1pdGVtLS1lbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmxjb250YWN0PSJtb2RhbE1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJpZD0iRjgzNzg2MUItODRBMi03NzAzLUEwRTMtQ0FDRUY2RTY5QzE2IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVydHJhbnNhY3Rpb250eXBlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9mZmVyZmxhZz0iaXNTdGFuZGFyZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY29udGFjdGF1dG89IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZWlzb3VyY2U9IkxJQ09NLUFFSS1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOU1VHRyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13aWR0aD0iNjM1IiBkYXRhLWhlaWdodD0iNzAwIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUQ09OVEFDVC1QT1BJTkNPTlRBQ1QiIGRhdGEtcHVzaGNvbnRhY3Q9IjEiIGRhdGEtbWFwcGVyPSJzYWxlIiBkYXRhLWNhbXBhaWduPSJDT05UQUdXRUJBRDEiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiIGRhdGEtdW5pdmVyc2U9IjEiIGRhdGEtc291cmNlPSJMSUNPTS1ERVNLVE9QLUNPTlRBQ1QtQUNIQVQtUFItTUFJTi1BTk5PTkNFLUJUVEVMLVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsaS1pY29uIGxpLWljb24tLWVtYWlsIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImxvZ2ljLWJ0biBvZmZlci1jb250YWN0IG9mZmVyLWRldGFpbHMtY3RhLS1jb250YWN0LWl0ZW0gb2ZmZXItZGV0YWlscy1jdGEtLWNvbnRhY3QtaXRlbS0tdGVsIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybGNvbnRhY3Q9Im1vZGFsTWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vZmZlcmlkPSJGODM3ODYxQi04NEEyLTc3MDMtQTBFMy1DQUNFRjZFNjlDMTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJ0cmFuc2FjdGlvbnR5cGU9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb2ZmZXJmbGFnPSJpc1N0YW5kYXJkIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb250YWN0YXV0bz0iIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFlaXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQU5OT05DRS1CVENPTlRBQ1QtUE9QSU5TVUdHIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdpZHRoPSI2MzUiIGRhdGEtaGVpZ2h0PSI3MDAiIGRhdGEteHRwYWdlPSJMaXN0ZV9kZV9SZXN1bHRhdHMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRDT05UQUNULVBPUElOQ09OVEFDVCIgZGF0YS1wdXNoY29udGFjdD0iMSIgZGF0YS1tYXBwZXI9InNhbGUiIGRhdGEtY2FtcGFpZ249IkNPTlRBR1dFQkFEMSIgZGF0YS14dHBhZ2U9Ikxpc3RlX2RlX1Jlc3VsdGF0cyIgZGF0YS11bml2ZXJzZT0iMSIgZGF0YS1zb3VyY2U9IkxJQ09NLURFU0tUT1AtQ09OVEFDVC1BQ0hBVC1QUi1NQUlOLUFOTk9OQ0UtQlRURUwtUE9QSU5DT05UQUNUIiBkYXRhLXB1c2hjb250YWN0PSIxIiBkYXRhLW1hcHBlcj0ic2FsZSIgZGF0YS1jYW1wYWlnbj0iQ09OVEFHV0VCQUQxIiBkYXRhLXh0cGFnZT0iTGlzdGVfZGVfUmVzdWx0YXRzIiA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxpLWljb24gbGktaWNvbi0tdGVsZXBob25lIj48L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaXJzdFNhc0Jsb2NrIiBpZD0iZmlyc3RTYXNCbG9jayI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY29uZFNhc0Jsb2NrIiBpZD0ic2Vjb25kU2FzQmxvY2siPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGlyZFNhc0Jsb2NrIiBpZD0idGhpcmRTYXNCbG9jayI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1wYWdlPSIxIiBpZD0icGFnZU51bWJlciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1wdWIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2FzLWJsb2NrIj4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgZG9jdW1lbnQud3JpdGUoJzxkaXYgaWQ9ImNydC0zNTI3NTAiIHN0eWxlPSJ3aWR0aDozMDBweDsgaGVpZ2h0OjI1MHB4OyI+PC9kaXY+Jyk7CiAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIEFjY2VwdGFibGVBZENyaXRlbygpIHsKICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIENyaXRlby5EaXNwbGF5QWNjZXB0YWJsZUFkSWZBZGJsb2NrZWQoewogICAgICAgICAgICAgICAgICAgICd6b25laWQnOiAzNTI3NTAsCiAgICAgICAgICAgICAgICAgICAgJ2NvbnRhaW5lcmlkJzogJ2NydC0zNTI3NTAnLAogICAgICAgICAgICAgICAgICAgICdvdmVycmlkZVpvbmVGbG9vcic6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KEFjY2VwdGFibGVBZENyaXRlbywgNCk7CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KICAgIAo8ZGl2IGNsYXNzPSJzYXNfYmxvY2sgcGFkZGluZ19ib3R0b21fMTAiCiAgICAgaWQ9InNhc181ODAzNCI+PC9kaXY+CjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Im9hcy1ibG9jayI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIHBhZGRpbmdfYm90dG9tXzEwIgogICAgIGlkPSJzYXNfNTgwNjkiPjwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJvYXMtYmxvY2siPgogICAgICAgIDxkaXYgY2xhc3M9InNhc19ibG9jayBwYWRkaW5nX2JvdHRvbV8xMCIKICAgICBpZD0ic2FzXzU4MDg3Ij48L2Rpdj4KICAgIDwvZGl2PgoKPGRpdiBjbGFzcz0ib2FzLWJsb2NrIG9hcy1jYSI+CiAgICA8ZGl2IGNsYXNzPSJ0aXRsZS1ncm91cCB0aXRsZS0yLWxpbmVzIj4KICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUgdGl0bGUtZ3JlZW4tZGFzaCB0aXRsZS1iaWcgY2FwIGJsYWNrIHNpemVfMTEgYm9sZCI+VHJvdXZlciB1biBmaW5hbmNlbWVudDwvc3Bhbj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIGZyYW1lZEJsb2NrIgogICAgIGlkPSJzYXNfNTg2ODkiPjwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iY2RiLWNvbnRhaW5lciI+CgoJPGkgY2xhc3M9Imljb24tdGFyZ2V0MiI+PC9pPgoKCTxzZWN0aW9uIGNsYXNzPSJsaS1jZGItZm9ybS10b3AiPgoKCQk8ZGl2IGNsYXNzPSJhbGlnbi1jZW50ZXIiPgoJCQk8cCBjbGFzcz0idGl0bGUiPkNoYXNzZXVycyBkZSBiaWVuczwvcD4KCQkJPHAgY2xhc3M9InN1YnRpdGxlIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAJRmFpdGVzLXZvdXMgYWlkZXIgZ3JhdHVpdGVtZW50PGJyIC8+CiAgICAgICAgICAgICAJZGFucyB2b3RyZSByZWNoZXJjaGU8YnIgLz4KICAgICAgICAgICAgIAlwYXIgZGVzIHByb2Zlc3Npb25uZWxzIGRlIGwnaW1tb2JpbGllciAgICAgICAgICAgICA8L3A+CgkJPC9kaXY+Cgk8L3NlY3Rpb24+CgoJPHNlY3Rpb24gY2xhc3M9ImxpLWNkYi1mb3JtLWJvdHRvbSI+CgkJPHAgY2xhc3M9InNlYXJjaGZvciB0ZXh0LWxlZnQiPlZvdXMgZMOpc2lyZXo8L3A+CgkJPGZvcm0gY2xhc3M9ImZvcm0taG9yaXpvbnRhbCIgbm92YWxpZGF0ZT4KCQkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CgkJCQk8ZGl2IGNsYXNzPSJyYWRpbyBjb2wteHMtNiB0ZXh0LWNlbnRlciI+CgkJCQkJPGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJ1bml2ZXJzZSIgaWQ9InJhZGlvMyIgdmFsdWU9IjEiIGNoZWNrZWQ+CgkJCQkJPGxhYmVsIGZvcj0icmFkaW8zIj5BY2hldGVyPC9sYWJlbD4KCQkJICAgICA8L2Rpdj4KCQkJICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBjb2wteHMtNiB0ZXh0LWNlbnRlciI+CgkJCQkJPGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJ1bml2ZXJzZSIgaWQ9InJhZGlvNCIgdmFsdWU9IjIiPgoJCQkJCTxsYWJlbCBmb3I9InJhZGlvNCI+TG91ZXI8L2xhYmVsPgoJCQkJPC9kaXY+CgkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGZvcm0tZW1haWwtb2stYnRuIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy05IGVtYWlsIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImNkYi1lbWFpbCIgbmFtZT0iY2RiLWVtYWlsIiB0eXBlPSJlbWFpbCIgcGxhY2Vob2xkZXI9IlZvdHJlIGVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LW1kIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTMgdGV4dC1sZWZ0IHN1Ym1pdCI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiPk9LPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgkJPC9mb3JtPgoKICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icmdwZENndSI+Vm9zIGluZm9ybWF0aW9ucyBzb250IHRyYWl0w6llcyBwYXIgTG9naWMtaW1tby5jb20gYWZpbiB2b3VzIGFib25uZXIgYXUoeCkgbWFnYXppbmUocykuIFBvdXIgZXhlcmNlciB2b3MgZHJvaXRzIGNvbmZvcm3DqW1lbnQgw6AgbGEgbG9pIMKrIEluZm9ybWF0aXF1ZSBldCBMaWJlcnTDqXMgwrsuPC9wPgoKICAgICAgICA8cCBjbGFzcz0icmdwZENndSI+Vm91cyBkaXNwb3NleiBk4oCZdW4gZHJvaXQgZOKAmWFjY8OocywgZGUgcmVjdGlmaWNhdGlvbiBldCwgcG91ciBkZXMgbW90aWZzIGzDqWdpdGltZXMsIGTigJlvcHBvc2l0aW9uIGF1eCBpbmZvcm1hdGlvbnMgcXVpIHZvdXMgY29uY2VybmVudCBxdWUgdm91cyBwb3V2ZXogZXhlcmNlciBlbiB2b3VzIGFkcmVzc2FudCDDoMKgQ29uY2VwdCBNdWx0aW3DqWRpYcKgNDU1IGF2ZW51ZSBHYWxpbMOpZSAtIDEzMTAwIEFpeC1lbi1Qcm92ZW5jZcKgb3UgcGFyIG1haWwgw6AgZHBvQGxvZ2ljLWltbW8uY29tLiBQb3VyIGVuIHNhdm9pciBwbHVzLCB2b3VzIHBvdXZleiDDqWdhbGVtZW50IGNvbnN1bHRlciBub3PCoAogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9jb25kaXRpb25zLWdlbmVyYWxlcy1kLXV0aWxpc2F0aW9uLmh0bWwiIHRhcmdldD0iX2JsYW5rIj4KICAgICAgICAgICAgICAgIDx1PkNHVSAmYW1wOyBQb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvdT4KICAgICAgICAgICAgPC9hPi4KICAgICAgICA8L3A+CiAgICA8L3NlY3Rpb24+CjwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIG9hcy1ibG9jayIKICAgICBpZD0ic2FzXzU4MDcwIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNhc19ibG9jayBvYXMtYmxvY2siCiAgICAgaWQ9InNhc181ODAzOCI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvYXMtYmxvY2sgb2FzLWZsb2F0YWJsZSI+CiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJmbG9hdF9sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJsaS1yaWdodC1nZW9ib29zdGVyLW9hcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmlyc3QtYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzYXNfYmxvY2sgb2FzLWJsb2NrIGhpZGUiCiAgICAgaWQ9InNhc181ODA5NCI+PC9kaXY+CjxkaXYgY2xhc3M9InNhc19ibG9jayBvYXMtYmxvY2siCiAgICAgaWQ9InNhc181ODAzOSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIG9hcy1ibG9jayIKICAgICBpZD0ic2FzXzU4MDM5XzIiIGRhdGEtcmVuZGVyPSI1ODAzOV8yIj48L2Rpdj4KICAgIDxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vamF2YXNjcmlwdCI+CiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKAogICAgICAnRE9NQ29udGVudExvYWRlZCcsCiAgICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICBmdW5jdGlvbiBzbWFydEFkUHVzaCAoKSB7CiAgICAgICAgICBpZiAodHlwZW9mIHNhcyAhPT0gJ3VuZGVmaW5lZCcgJiYgc2FzICYmIHNhcy5jbWQgJiYgc2FzLmNtZC5wdXNoKSB7CiAgICAgICAgICAgIHNhcy5jbWQucHVzaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgc2FzLnJlbmRlcigiNTgwMzlfMiIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNldFRpbWVvdXQoc21hcnRBZFB1c2gsIDUwMCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb29raWVDb25zZW50LmhpdE9uQ29uc2VudChzbWFydEFkUHVzaCwgNCk7CiAgICAgIH0pOwogICAgPC9zY3JpcHQ+CjxkaXYgY2xhc3M9InNhc19ibG9jayBvYXMtYmxvY2siCiAgICAgaWQ9InNhc181ODAzOV8zIiBkYXRhLXJlbmRlcj0iNTgwMzlfMyI+PC9kaXY+CiAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2phdmFzY3JpcHQiPgogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigKICAgICAgJ0RPTUNvbnRlbnRMb2FkZWQnLAogICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgZnVuY3Rpb24gc21hcnRBZFB1c2ggKCkgewogICAgICAgICAgaWYgKHR5cGVvZiBzYXMgIT09ICd1bmRlZmluZWQnICYmIHNhcyAmJiBzYXMuY21kICYmIHNhcy5jbWQucHVzaCkgewogICAgICAgICAgICBzYXMuY21kLnB1c2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHNhcy5yZW5kZXIoIjU4MDM5XzMiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZXRUaW1lb3V0KHNtYXJ0QWRQdXNoLCA1MDApOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ29va2llQ29uc2VudC5oaXRPbkNvbnNlbnQoc21hcnRBZFB1c2gsIDQpOwogICAgICB9KTsKICAgIDwvc2NyaXB0Pgo8ZGl2IGNsYXNzPSJzYXNfYmxvY2sgb2FzLWJsb2NrIgogICAgIGlkPSJzYXNfNTgwMzlfNCIgZGF0YS1yZW5kZXI9IjU4MDM5XzQiPjwvZGl2PgogICAgPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0Ij4KICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoCiAgICAgICdET01Db250ZW50TG9hZGVkJywKICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgIGZ1bmN0aW9uIHNtYXJ0QWRQdXNoICgpIHsKICAgICAgICAgIGlmICh0eXBlb2Ygc2FzICE9PSAndW5kZWZpbmVkJyAmJiBzYXMgJiYgc2FzLmNtZCAmJiBzYXMuY21kLnB1c2gpIHsKICAgICAgICAgICAgc2FzLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBzYXMucmVuZGVyKCI1ODAzOV80Iik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2V0VGltZW91dChzbWFydEFkUHVzaCwgNTAwKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KHNtYXJ0QWRQdXNoLCA0KTsKICAgICAgfSk7CiAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+Cgo8c2VjdGlvbiBjbGFzcz0iZnVuZGluZ01lbnRpb25TZWN0aW9uV3JhcHBlciI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZnVuZGluZ01lbnRpb24iPgogICAgPGIgY2xhc3M9ImZ1bmRpbmdNZW50aW9uU3RhciI+KjwvYj4gQ2V0dGUgc2ltdWxhdGlvbiBlc3QgY29tbXVuaXF1w6llIMOgIHRpdHJlIGluZm9ybWF0aWYsICBlbiBzZSBiYXNhbnQgc3VyIGxlcyB0YXV4IG1veWVucyBkdSBtYXJjaMOpLgo8L3A+ICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9zZWN0aW9uPgoKICAgIDxzZWN0aW9uIGNsYXNzPSJwci1hZWktYm90dG9tIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1sZy0xMiBvZmZlci1hbGVydCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQtZW1haWwiPgogICAgPGJ1dHRvbiBjbGFzcz0ibG9naWMtYnRuIGxvZ2ljLWJ0bi1zbWFsbCBsb2dpYy1idG4td2hpdGUgdGV4dC1sZWZ0IHBvcGluLWFlaSIKICAgICAgICAgICAgICAgICAgICBkYXRhLXNvdXJjZT0iTElDT00tQUVJLUFDSEFULVBSLU1BSU4tQUVJQk9UVE9NLUZPUk1BRUktU0lURSIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS11bml2ZXJzZT0iMSIgCiAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RlPSIiIAogICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsPSIvcG9waW5hZWlzaWdudXAiIAogICAgICAgICAgICAgICAgICAgIGRhdGEtcG9zaXRpb249Ikxpc3RlX1Jlc3VsdGF0c19CYXMiIAogICAgICAgICAgICAgICAgZGF0YS1oZWlnaHQ9IjM0MCIKICAgICAgICBkYXRhLXdpZHRoPSI1MDAiCiAgICA+CiAgICAgICAgPGkgY2xhc3M9Imljb24tYmVsbC1ib3JkZXIiPjwvaT4KICAgICAgICA8cD5DcsOpZXogdW5lIGFsZXJ0ZSBwb3VyIGNldHRlIHJlY2hlcmNoZTwvcD4KICAgIDwvYnV0dG9uPgo8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgoKPHNlY3Rpb24gY2xhc3M9Im9mZmVyLXBhZ2luYXRpb24td3JhcHBlciI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBvZmZlci1wYWdpbmF0aW9uIj4KICAgICAgICAgICAgICAgIAo8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uICBib2xkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJldiI+PC9kaXY+CiAgICAKICAgIDxkaXYgY2xhc3M9Im51bWJlcnMiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4gYnRuLW1haW5jb2xvciI+MTwvc3Bhbj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vdmVudGUtaW1tb2JpbGllci1wYXJpcy03NSwxMDBfMS9vcHRpb25zL2dyb3VwcHJwdHlwZXNpZHM9MSwyLDYsNywxMiwxNS9wYWdlPTIvb3JkZXI9dXBkYXRlX2RhdGVfZGVzYyIgdGl0bGU9IjIiIGNsYXNzPSJidG4gYnRuLWxpZ2h0Z3JleSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpQYWdpbmF0aW9uOjpQYWdpbmF0aW9uX1BhZ2VfMicsICdOJyk7Ij4yPC9hPiA8YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS92ZW50ZS1pbW1vYmlsaWVyLXBhcmlzLTc1LDEwMF8xL29wdGlvbnMvZ3JvdXBwcnB0eXBlc2lkcz0xLDIsNiw3LDEyLDE1L3BhZ2U9My9vcmRlcj11cGRhdGVfZGF0ZV9kZXNjIiB0aXRsZT0iMyIgY2xhc3M9ImJ0biBidG4tbGlnaHRncmV5IiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdBY3Rpb25fTGlzdGVfQW5ub25jZXM6OlBhZ2luYXRpb246OlBhZ2luYXRpb25fUGFnZV8zJywgJ04nKTsiPjM8L2E+IDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL3ZlbnRlLWltbW9iaWxpZXItcGFyaXMtNzUsMTAwXzEvb3B0aW9ucy9ncm91cHBycHR5cGVzaWRzPTEsMiw2LDcsMTIsMTUvcGFnZT00L29yZGVyPXVwZGF0ZV9kYXRlX2Rlc2MiIHRpdGxlPSI0IiBjbGFzcz0iYnRuIGJ0bi1saWdodGdyZXkiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6UGFnaW5hdGlvbjo6UGFnaW5hdGlvbl9QYWdlXzQnLCAnTicpOyI+NDwvYT4gPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vdmVudGUtaW1tb2JpbGllci1wYXJpcy03NSwxMDBfMS9vcHRpb25zL2dyb3VwcHJwdHlwZXNpZHM9MSwyLDYsNywxMiwxNS9wYWdlPTUvb3JkZXI9dXBkYXRlX2RhdGVfZGVzYyIgdGl0bGU9IjUiIGNsYXNzPSJidG4gYnRuLWxpZ2h0Z3JleSIgb25jbGljaz0idG9wLnh0X2NsaWNrKHRoaXMsICdDJywgJzEnLCAnQWN0aW9uX0xpc3RlX0Fubm9uY2VzOjpQYWdpbmF0aW9uOjpQYWdpbmF0aW9uX1BhZ2VfNScsICdOJyk7Ij41PC9hPiAgICAgICAgIDxzcGFuIGNsYXNzPSJib2xkIGdyZXkiPi4uLjwvc3Bhbj4KCiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vdmVudGUtaW1tb2JpbGllci1wYXJpcy03NSwxMDBfMS9vcHRpb25zL2dyb3VwcHJwdHlwZXNpZHM9MSwyLDYsNywxMiwxNS9wYWdlPTIzMi9vcmRlcj11cGRhdGVfZGF0ZV9kZXNjIiB0aXRsZT0iMjMyIiBjbGFzcz0iYnRuIGJ0bi1saWdodGdyZXkiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICcxJywgJ0FjdGlvbl9MaXN0ZV9Bbm5vbmNlczo6UGFnaW5hdGlvbjo6UGFnaW5hdGlvbl9QYWdlXzIzMicsICdOJyk7Ij4yMzI8L2E+ICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmV4dCI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vdmVudGUtaW1tb2JpbGllci1wYXJpcy03NSwxMDBfMS9vcHRpb25zL2dyb3VwcHJwdHlwZXNpZHM9MSwyLDYsNywxMiwxNS9wYWdlPTIvb3JkZXI9dXBkYXRlX2RhdGVfZGVzYyIgY2xhc3M9ImJ0biBidG4tbWFpbmNvbG9yIiBvbmNsaWNrPSJ0b3AueHRfY2xpY2sodGhpcywgJ0MnLCAnMScsICdBY3Rpb25fTGlzdGVfQW5ub25jZXM6OlBhZ2luYXRpb246OlBhZ2luYXRpb25fUGFnZV9zdWl2YW50ZScsICdOJyk7Ij48aSBjbGFzcz0iaWNvbi1hcnJvdzNyaWdodCI+PC9pPjwvYT4gICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+Cgo8c2VjdGlvbiBjbGFzcz0icmVjb21tZW5kZWRPZmZlcnNTZWN0aW9uV3JhcHBlciI+CiAgICA8L3NlY3Rpb24+Cgo8c2VjdGlvbiBjbGFzcz0iYWZzLWJvdHRvbS1zZWN0aW9uLXdyYXBwZXIiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgICAgICAgICAgPGRpdiBpZD0nYWZzY29udGFpbmVyMSc+PC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBjaGFyc2V0PSJ1dGYtOCI+CgogICAgdmFyIHBhZ2VPcHRpb25zID0gewogICAgICAgICJwdWJJZCI6ICJwdWItODA3ODYxNzIzOTIxNTgxNCIsCiAgICAgICAgInN0eWxlSWQiOiAiMzY2MDg4NzgxMSIsCiAgICAgICAgInF1ZXJ5IjogIlZlbnRlIGltbW9iaWxpZXIgUEFSSVMiLAogICAgICAgICJjaGFubmVsIjogIjQ1MDY2MDkwODkiLAogICAgICAgICJobCI6ICJmciIsCiAgICAgICAgImxpbmtUYXJnZXQiOiAiX2JsYW5rIgogICAgfTsKCiAgICB2YXIgYWRibG9jazEgPSB7CiAgICAgICAgImNvbnRhaW5lciI6ICJhZnNjb250YWluZXIxIiwKICAgICAgICAid2lkdGgiOiAiNjg0IiwKICAgICAgICAibnVtYmVyIjogNCwKICAgICAgICAiZm9udFNpemVUaXRsZSI6IDE0LAogICAgICAgICJjb2xvclRpdGxlTGluayI6ICIwMDhEQ0YiLAogICAgICAgICJjb2xvclRleHQiOiAiMkYyRjJGIgogICAgfTsKICAgIGZ1bmN0aW9uIGhpdEFkc1B1c2goKSB7CiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfZ29vZ0NzYSgnYWRzJywgcGFnZU9wdGlvbnMsIGFkYmxvY2sxKTsKICAgICAgICB9LCAzMDAwKTsKICAgIH0KICAgIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KGhpdEFkc1B1c2gsIDQpOwo8L3NjcmlwdD4gICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+Cgo8c2VjdGlvbiBjbGFzcz0ib2FzLWJvdHRvbS1zZWN0aW9uLXdyYXBwZXIiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICBkb2N1bWVudC53cml0ZSgnPGRpdiBpZD0iY3J0LTM1Mjc1MSIgc3R5bGU9IndpZHRoOjcyOHB4OyBoZWlnaHQ6OTBweDsiPjwvZGl2PicpOwogICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBBY2NlcHRhYmxlQWRDcml0ZW8oKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBDcml0ZW8uRGlzcGxheUFjY2VwdGFibGVBZElmQWRibG9ja2VkKHsKICAgICAgICAgICAgICAgICAgICAnem9uZWlkJzogMzUyNzUxLAogICAgICAgICAgICAgICAgICAgICdjb250YWluZXJpZCc6ICdjcnQtMzUyNzUxJywKICAgICAgICAgICAgICAgICAgICAnb3ZlcnJpZGVab25lRmxvb3InOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9LCAxMDAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBDb29raWVDb25zZW50LmhpdE9uQ29uc2VudChBY2NlcHRhYmxlQWRDcml0ZW8sIDQpOwogICAgICAgIH0pOwogICAgPC9zY3JpcHQ+CiAgICAKPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIHBhZGRpbmdfYm90dG9tXzEwIgogICAgIGlkPSJzYXNfNTgwNjciPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+Cgo8ZGl2IGlkPSJiYW5uZXIiIGNsYXNzPSJvYXMtcmVzdWx0LWJvdHRvbS1iYW5uZXIiPgogICAgPGltZyBhbHQ9IkZFUk1FUiIgc3JjPSIvaW1nL2NvbW1vbi9iYW5uZXJfY2xvc2VfZ3JleS5wbmciIGNsYXNzPSJjbG9zZS1idXR0b24iPgogICAgPGRpdiBjbGFzcz0ic2FzX2Jsb2NrIgogICAgIGlkPSJzYXNfNTgwNDEiPjwvZGl2Pgo8L2Rpdj4KCjxzY3JpcHQ+CiAgICB2YXIgQXBwID0gbmV3IEFwcGxpY2F0aW9uKHNhc0NvbmZpZyk7CiAgICBBcHAuc2V0VXAoKTsKICAgIGZ1bmN0aW9uIGFkc2Vuc2VIYW5kbGVyKCl7CiAgICAgICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF07CiAgICAgICAgZnVuY3Rpb24gYWRzZW5zZXB1c2hhZHMoKSB7CiAgICAgICAgICAgIChmdW5jdGlvbihnLG8pe2dbb109Z1tvXXx8ZnVuY3Rpb24oKXsoZ1tvXVsncSddPWdbb11bJ3EnXXx8W10pLnB1c2goYXJndW1lbnRzKX0sZ1tvXVsndCddPTEqbmV3IERhdGV9KSh3aW5kb3csJ19nb29nQ3NhJykKICAgICAgICB9CiAgICAgICAgICAgIGxldCBhZHNlbnNlU2NyaXB0ID0gY3JlYXRCYWxpc2UoeyduYW1lJzonc2NyaXB0JywndHlwZSc6J3RleHQvamF2YXNjcmlwdCcsJ3NyYyc6J2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vYWRzZW5zZS9zZWFyY2gvYWRzLmpzJ30pOwogICAgICAgIGFkc2Vuc2VTY3JpcHQub25sb2FkID0gYWRzZW5zZXB1c2hhZHM7CiAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChhZHNlbnNlU2NyaXB0KTsKICAgIH0KICAgIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KGFkc2Vuc2VIYW5kbGVyLCA0KTsKPC9zY3JpcHQ+CjwvZGl2PgoKPGZvb3Rlcj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgCjxkaXYgY2xhc3M9ImNyb3NzbGlua2luZ3MgIGNsZWFyZml4IHZpc2libGUtbGctYmxvY2sgIj4KICAgIDwvZGl2PgoKPGRpdiBpZD0iZm9vdGVyIgogICAgIGNsYXNzPSJtYWluLWxpbmtzICAiPgoKICAgIDxkaXYgaWQ9ImZvb3Rlcl9saW5rcyIgY2xhc3M9ImNsZWFyZml4IGJvdHRvbS1mb290ZXIiPgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaW5rcy1ibG9jayBmb290ZXItY29scyBjb2xzLTAiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0b3AiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb290ZXItc3VidGl0bGVzIj5Mb2dpYy1pbW1vLmNvbTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXZTaXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9jaGFydGUtZWRpdG9yaWFsZS5odG1sIiB0aXRsZT0iQ2hhcnRlIMOpZGl0b3JpYWxlIiByZWw9Im5vZm9sbG93Ij5DaGFydGUgw6lkaXRldXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwOi8vcHVibGllci11bmUtYW5ub25jZS5sb2dpYy1pbW1vLmNvbSIgdGl0bGU9IlB1YmxpZXIgdW5lIGFubm9uY2UiIG9uY2xpY2s9InRvcC54dF9jbGljayh0aGlzLCAnQycsICdMaWVuX0Zvb3Rlcjo6TWVudV9Mb2dpYy1JbW1vX2NvbTo6TGllbl9EZXBvdF9kX2Fubm9uY2VzJywgJzE3JywgJ04nKTsiPlB1YmxpZXIgdW5lIGFubm9uY2U8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9jb250YWN0ZXotbm91cyIgdGl0bGU9IkNvbnRhY3Rlei1ub3VzIiByZWw9Im5vZm9sbG93Ij5Db250YWN0ZXotbm91czwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdlNpdGVFbHQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL2FsZXJ0ZS1pbW1vLmh0bWwiIHRpdGxlPSJSZWNldm9pciBsZXMgYW5ub25jZXMgZCd1bmUgcmVjaGVyY2hlIj5BbGVydGUgRW1haWw8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwczovL3d3dy53ZWxjb21ldG90aGVqdW5nbGUuY28vZnIvY29tcGFuaWVzL2dyb3VwZS1zZWxvZ2VyL2xvZ2ljLWltbW8iIHRpdGxlPSJOb3VzIHJlY3J1dG9ucyI+Tm91cyByZWNydXRvbnM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXZTaXRlRWx0Ij48YSBocmVmPSJodHRwczovL25ld3Nyb29tLmxvZ2ljLWltbW8uY29tIiB0aXRsZT0iRXNwYWNlIHByZXNzZSI+RXNwYWNlIHByZXNzZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItYXBwcyI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS9mci9hcHAvbG9naWMtaW1tby5jb20vaWQzMDgwMjU2MTc/bXQ9OCI+PGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9hc3NldC1jb3JhaWwvaW1nL2Zvb3Rlci1hcHBzdG9yZS1idG4ucG5nIiBjbGFzcz0iYXBwc3RvcmUiPjwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5zbWFydG5zb2Z0LmxvZ2ljaW1tbyZobD1mciI+PGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9hc3NldC1jb3JhaWwvaW1nL2Zvb3Rlci1nb29nbGVwbGF5LWJ0bi5wbmciPjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIAo8L2Rpdj4KICAgIDwvZGl2Pgo8L2Zvb3Rlcj4KCjxzZWN0aW9uIGNsYXNzPSJmb290ZXItc29jaWFsLXNlY3Rpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGlkPSJsaWNvbS1wcmVmZXJlbmNlLWNlbnRlciI+PC9kaXY+CjxkaXYgY2xhc3M9InJvdyB0ZXh0LWNlbnRlciI+Cgk8ZGl2IGNsYXNzPSJjb2wteHMtNCBzb2NpYWwtZm9vdGVyLWxvZ28gdGV4dC1sZWZ0Ij4KICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0LWNvcmFpbC9pbWcvbG9nb19saWNvbV9ibHVlLnBuZyI+Cgk8L2Rpdj4KCTxkaXYgY2xhc3M9ImNvbC14cy0zIGNvbC1sZy00IHNvY2lhbC1mb290ZXItYnV0dG9ucyI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2xvZ2ljaW1tbyIgdGFyZ2V0PSJfYmxhbmsiPjxpIGNsYXNzPSJpY29uLWZhY2Vib29rIGljb24tY2lyY2xlIj48L2k+PC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vbG9naWNpbW1vIiB0YXJnZXQ9Il9ibGFuayI+PGkgY2xhc3M9Imljb24tdHdpdHRlciBpY29uLWNpcmNsZSI+PC9pPjwvYT4KCTwvZGl2PgoJPGRpdiBjbGFzcz0iY29sLXhzLTUgdmlzaWJsZS14cy1ibG9jayB2aXNpYmxlLXNtLWJsb2NrIHZpc2libGUtbWQtYmxvY2sgc29jaWFsLWZvb3Rlci10b29scyI+CgkgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9naWMtaW1tby5jb20vbW9iaWxlLnBocCI+PGkgY2xhc3M9Imljb24tbW9iaWxlIj48L2k+Jm5ic3A7PHA+QXBwbGljYXRpb248L3A+PC9hPgoJPC9kaXY+Cgk8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLWxnLTQgc29jaWFsLWZvb3Rlci1jb3B5cmlnaHQiPgogICAgICAgIDxwPkNvcHlyaWdodCDCqSAyMDAzLTIwMjAgQ29uY2VwdCBNdWx0aW3DqWRpYTwvcD4KICAgICAgICA8cD48YSBocmVmPSJodHRwczovL3d3dy5sb2dpYy1pbW1vLmNvbS9jZ3UtZXQtcG9saXRpcXVlLWRlLWNvbmZpZGVudGlhbGl0ZS5odG1sIiB0aXRsZT0iQ0dVICYgUG9saXRpcXVlIGRlIENvbmZpZGVudGlhbGl0w6kiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iY2d1Ij5DR1UgJiBQb2xpdGlxdWUgZGUgQ29uZmlkZW50aWFsaXTDqTwvYT48L3A+CiAgICAgICAgPHA+PGEgaHJlZj0iamF2YXNjcmlwdDp3aW5kb3cudGhlU2hpZWxkLnNob3dBZHZhbmNlZFNldHRpbmdzKCk7IiAgY2xhc3M9ImNndSI+UGFyYW3DqXRyZXIgbWVzIGNvb2tpZXM8L2E+PC9wPgoJPC9kaXY+Cgo8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+CgoKIDwhLS0gQ3JpdGVvVHJhY2sgLS0+IAo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBmdW5jdGlvbiBjcmVhdERPTUVsZW1lbnQgKG9iaikgewogICAgICAgIGxldCBET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvYmpbJ25hbWUnXSk7CiAgICAgICAgZGVsZXRlIG9ialsnbmFtZSddOwogICAgICAgIGZvcihjb25zdCBba2V5LHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7CiAgICAgICAgICAgIGlmIChrZXkgPT09ICdjaGlsZCcpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIERPTUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3JlYXRET01FbGVtZW50KHZhbHVlKSk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBET01FbGVtZW50W2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIERPTUVsZW1lbnQ7CiAgICB9CiAgICBmdW5jdGlvbiBjcml0ZW9UcmFja0hpdEhhbmRsZXIoKSB7CiAgICAgICAgZnVuY3Rpb24gY3JpdGVvVHJhY2tIaXRFeGVjKCkgewogICAgICAgICAgICB2YXIgZGV2aWNlID0gbmV3IE1vYmlsZURldGVjdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgICAgICAgIGRldmljZVR5cGUgPSBkZXZpY2UubW9iaWxlKCkgIT09IG51bGwgPyAndCcgOiAnZCc7IC8vIGlzIHRhYmxldCBvciBkZXNrdG9wCgogICAgICAgICAgICB3aW5kb3cuY3JpdGVvX3EgPSB3aW5kb3cuY3JpdGVvX3EgfHwgW107CgogICAgICAgICAgICB3aW5kb3cuY3JpdGVvX3EucHVzaCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICJ2aWV3TGlzdCIsIGl0ZW06IFsiRTcyOUQwNDctMUEyMi0xOUU4LTY3QzEtRUU5MDUwQjMzRTU1IiwiOEY1NTNCNkItOUE4RC1ENTg0LTkxMTQtNDJBRkUyMjREREFCIiwiNTkyNjRDMkMtMDFFQS1FRjYxLUYzMTUtNzY0NTNGQTY0OTEwIiwiMzdEOEFERDktRTAzRC0wRjYxLTdDMTItODc4MjNCMEJGNEM0IiwiNDQ3OEIwRUEtOEY1OS1DRDBCLUZGNjMtMzU2NUJFNkMwQjc1IiwiNEYxOTFFQUQtMzE0OC1DMkExLUY4Q0QtMDIwNUE3MUREMjYwIiwiOTYwQjE1MDItQzg5Qy04QkNCLUJFNEYtMjQwMTI0QzUyREQ5IiwiQTY1Nzg1QTUtQTZGOC01REUzLTAzMzktMTAwMzAxNDAxQjNBIiwiRkYzRTYwNDQtRUMyRS02Mzk0LUJEREMtMTI3NjlCQjFFNTgwIiwiNzQ2Mzg2NDAtNjJFRS1EQTJDLTdFNkEtNTM5RjVFOTJFOTQ4IiwiM0RBRERDNDItNTg3Qy1ERkM4LUMyN0MtRTMxODJEQTc1RDU0IiwiMUM0QUQ0MUMtMDg1OC01NEJDLTFDREUtNkZDNEI1NUY1M0JEIiwiMzdBNjkxOTYtQkRGNy0xQUJGLTU1QTktOTYxQjkzNDlCN0VCIiwiRkRFMTNCODUtODc3Ri05NzkzLUQ3QTktMEE5NjExMzg4ODYzIiwiNUE5NjczNjUtQjU5OS1FNUI5LUQwRUQtRDgzQTQxQTIxRkE3IiwiNDI5MDA1RDYtRTIzQi03Rjc2LTUzRjUtMTAxMUQ1Mjc0MThFIiwiN0ExQTc5MzItNEYxQy1DOUMzLTE3MjMtNzg1NTE5NjdCNkM1IiwiQUM5QTU3RDQtQkYzMS00N0RDLTI4NTMtMzAyMDNGMDg1NUVGIiwiNkNBM0ZGQUYtMUE0NS0zNzY3LTIzOUItRThCQzgyNDQ0QUVDIiwiRjgzNzg2MUItODRBMi03NzAzLUEwRTMtQ0FDRUY2RTY5QzE2Il0sIGFjY291bnQ6IDg4NiwgdWlfc2VjdGlvbjogImFjaGV0ZXIiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBldmVudDogInZpZXdMaXN0IiwgaXRlbTogWyJGN0I2RDlENi1GMDExLUU3NkUtRkU5Ni03OEZEMEUwMjkwREYiLCJFMjFDOUExQy1GNzAxLUE3N0UtMkIwRS03Qjk3QzYxRjZBQzkiLCJFM0Y1QjhBMS1BMzhBLTYzMTktOUJGRi1COUVFNERDQ0MyM0EiLCIxRkJEOUM4MS0zMDY4LTUxRTUtMDU5My03OUQzMTM3NThFNUIiLCI0QUFFQjE3Qy0wQjM4LTBDNkUtODM5Ni0yMjA4NkE5NkE1NDgiXSwgYWNjb3VudDogMTQyOTYsIHVpX3NlY3Rpb246ICJhY2hldGVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2V2ZW50OiAic2V0U2l0ZVR5cGUiLCB0eXBlOiBkZXZpY2VUeXBlfQogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAod2luZG93Lmhhc093blByb3BlcnR5KCdfX2NyaXRlb1RyYWNrTG9hZCcpKSB7CiAgICAgICAgICAgIGNyaXRlb1RyYWNrSGl0RXhlYygpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdpbmRvdy5fX2NyaXRlb1RyYWNrTG9hZCA9IHRydWU7CiAgICAgICAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTsKICAgICAgICAgICAgdmFyIGNyaXRlb1RyYWNrU2NyaXB0ID0gY3JlYXRET01FbGVtZW50KHsKICAgICAgICAgICAgICAgICduYW1lJzogJ3NjcmlwdCcsCiAgICAgICAgICAgICAgICAndHlwZSc6ICd0ZXh0L2phdmFzY3JpcHQnLAogICAgICAgICAgICAgICAgJ3NyYyc6ICdodHRwczovL3N0YXRpYy5jcml0ZW8ubmV0L2pzL2xkL2xkLmpzJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChjcml0ZW9UcmFja1NjcmlwdCk7CiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNyaXRlb1RyYWNrSGl0RXhlYywxMDAwKTsKICAgICAgICB9CiAgICB9CgogICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgQ29va2llQ29uc2VudC5oaXRPbkNvbnNlbnQoY3JpdGVvVHJhY2tIaXRIYW5kbGVyLCA0KTsKICAgIH0pOwo8L3NjcmlwdD4KCiA8IS0tIEdvb2dsZVJlbWFya2V0aW5nIC0tPiAKCiAgICA8ZGl2IGlkID0iR29vZ2xlQWRTZXJ2aWNlSW1nIiBzdHlsZT0iZGlzcGxheTppbmxpbmU7Ij4KICAgIDwvZGl2PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogIHZhciBpc0dvb2dsZUFkU2VydmljZUluaXRpYXRlZCA9IGZhbHNlOwogIGZ1bmN0aW9uIGNyZWF0RE9NRWxlbWVudCAob2JqKSB7CiAgICAgIGxldCBET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvYmpbJ25hbWUnXSk7CiAgICAgIGRlbGV0ZSBvYmpbJ25hbWUnXTsKICAgICAgZm9yKGNvbnN0IFtrZXksdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHsKICAgICAgICAgIGlmIChrZXkgPT09ICdjaGlsZCcpCiAgICAgICAgICB7CiAgICAgICAgICAgICAgRE9NRWxlbWVudC5hcHBlbmRDaGlsZChjcmVhdERPTUVsZW1lbnQodmFsdWUpKTsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIERPTUVsZW1lbnRba2V5XSA9IHZhbHVlOwogICAgICB9CiAgICAgIHJldHVybiBET01FbGVtZW50OwogIH0KCiAgZnVuY3Rpb24gaW5pdEdvb2dsZUFkU2VydmljZSgpIHsKICAgICAgdmFyIHBhcmVudEltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJHb29nbGVBZFNlcnZpY2VJbWciKTsKICAgICAgdmFyIEdvb2dsZUFkU2VydmljZUltZyA9IGNyZWF0RE9NRWxlbWVudCh7J25hbWUnOidpbWcnLCdoZWlnaHQnOicxJywgJ3dpZHRoJzonMScsICdzdHlsZSc6J2JvcmRlci1zdHlsZTpub25lOycsICdhbHQnOicnLCdzcmMnOicvL2dvb2dsZWFkcy5nLmRvdWJsZWNsaWNrLm5ldC9wYWdlYWQvdmlld3Rocm91Z2hjb252ZXJzaW9uLzEwNzE0MzAzNTUvP3ZhbHVlPTAmZ3VpZD1PTiZzY3JpcHQ9MCd9KTsKICAgICAgcGFyZW50SW1nLmFwcGVuZENoaWxkKEdvb2dsZUFkU2VydmljZUltZyk7CgoKICAgIGlmIChpc0dvb2dsZUFkU2VydmljZUluaXRpYXRlZCA9PT0gZmFsc2UpIHsKICAgICAgaXNHb29nbGVBZFNlcnZpY2VJbml0aWF0ZWQgPSB0cnVlOwogICAgICB2YXIgZ29vZ2xlX3RhZ19wYXJhbXMgPSB7CiAgICAgICAgbGlzdGluZ19pZDogIiNHb29nbGVSZW1hcmtldGluZ0lkIyIsCiAgICAgICAgbGlzdGluZ19wYWdldHlwZTogIiNHb29nbGVSZW1hcmtldGluZ1BhZ2VUeXBlIyIsCiAgICAgICAgbGlzdGluZ190b3RhbHZhbHVlOiAiI0dvb2dsZVJlbWFya2V0aW5nVG90YWxWYWx1ZSMiLAogICAgICAgIGxpc3RpbmdfdHJhbnNhY3Rpb246ICIjR29vZ2xlUmVtYXJrZXRpbmdUcmFuc2FjdGlvbiMiLAogICAgICAgIGxpc3RpbmdfbG9jYWxpdHk6ICIjR29vZ2xlUmVtYXJrZXRpbmdMb2NhbGl0eSMiLAogICAgICAgIGxpc3RpbmdfbmJSb29tczogIiNHb29nbGVSZW1hcmtldGluZ05iUm9vbXMjIgogICAgICB9OwoKICAgICAgdmFyIGdvb2dsZV9jb252ZXJzaW9uX2lkID0gMTA3MTQzMDM1NTsKICAgICAgdmFyIGdvb2dsZV9jdXN0b21fcGFyYW1zID0gd2luZG93Lmdvb2dsZV90YWdfcGFyYW1zOwogICAgICB2YXIgZ29vZ2xlX3JlbWFya2V0aW5nX29ubHkgPSB0cnVlOwoKICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgICBzY3JpcHQuc3JjID0gImh0dHBzOi8vd3d3Lmdvb2dsZWFkc2VydmljZXMuY29tL3BhZ2VhZC9jb252ZXJzaW9uX2FzeW5jLmpzIjsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXS5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgfQogIH0KICAvKiA8IVtDREFUQVsgKi8KICBDb29raWVDb25zZW50LmhpdE9uQ29uc2VudChpbml0R29vZ2xlQWRTZXJ2aWNlLCA0KTsKICAvKiBdXT4gKi8KPC9zY3JpcHQ+CgogPCEtLSBDbG91ZE1lZGlhIC0tPiAKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCBmdW5jdGlvbiAoKSB7CiAgQ29va2llQ29uc2VudC5oaXRPbkNvbnNlbnQoZnVuY3Rpb24oKSB7CiAgICBwYXJhbXMgPSB7CiAgICAgICdsb2NhbGlzYXRpb25fY29kZXBvc3RhbCcgOiAnI0Nsb3VkTWVkaWFUb3duQ29kZXMjJywKICAgICAgJ2xvY2FsaXNhdGlvbl92aWxsZScgOiAnI0Nsb3VkTWVkaWFUb3duTmFtZXMjJywKICAgICAgJ2xvY2FsaXNhdGlvbl9kZXBhcnRlbWVudCcgOiAnI0Nsb3VkTWVkaWFEZXB0TmFtZXMjJywKICAgICAgJ3N1cmZhY2VfbWluJyA6ICcjQ2xvdWRNZWRpYUFyZWFNaW4jJywKICAgICAgJ2J1ZGdldF9tYXgnIDogJyNDbG91ZE1lZGlhUHJpY2VNYXgjJwogICAgfTsKICAgIHZhciBzcmMgPSAnaHR0cHM6Ly90ci5jbG91ZC1tZWRpYS5mci90LzgwODdhNjFiLTM5YmMtNDA5ZS1iYTQ1LTJhOWY3MTRjNjI1NT93ZWJzaXRlPScrd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKycmJzsKICAgIGZvciAodmFyIGkgaW4gcGFyYW1zKSB7CiAgICAgIGtleSA9ICJsZ2lfIitpOwogICAgICB2YWx1ZSA9IGVuY29kZVVSSShwYXJhbXNbaV0pOwogICAgICBzcmMrPSBrZXkrIj0iK3ZhbHVlKyImIjsKICAgIH0KICAgIHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTsKICAgIHZhciBlYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsKICAgIGVhci5zcmMgPSBzcmM7CiAgICBlYXIud2lkdGggPSAxOwogICAgZWFyLmhlaWdodCA9IDE7CiAgICBiLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoZWFyLCBiKTsKICB9LCA0KTt9KTsKPC9zY3JpcHQ+CiA8IS0tIE1pbGxlTWVyY2lzIC0tPiAKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAvKioKICAgICAgICAgKiBBY3RpdmVyIC8gZMOpc2FjdGl2ZXIgbGVzIHRhZ3MgTWlsbGUgTWVyY2lzCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gYWJsZURpc2FibGVNaWxsZU1lcmNpcygpIHsKCiAgICAgICAgICAgIHdpbmRvdy5fdHJvcSA9IHdpbmRvdy5fdHJvcSB8fCBbXTsKICAgICAgICAgICAgX3Ryb3EucHVzaCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyd0YWdpZCcsICc2NTU5MDA2LTc0Y2RkMzU1YzkxN2QyZjUxMjI2NjM4ZjM1YTk5ODg1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnX3J0Z3BnJywgJ2xpc3RlJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnX3J0Z2lkY2F0JywgJ3ZlbnRlJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnX3J0Z2lkc3ViY2F0JywgJyddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ19ydGdpZHByb2R1aXRsaXN0ZScsICdlNzI5ZDA0Ny0xYTIyLTE5ZTgtNjdjMS1lZTkwNTBiMzNlNTV8OGY1NTNiNmItOWE4ZC1kNTg0LTkxMTQtNDJhZmUyMjRkZGFifDU5MjY0YzJjLTAxZWEtZWY2MS1mMzE1LTc2NDUzZmE2NDkxMCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ19ydGdpZHB1c2hsaXN0ZScsICc5YWNkZmViYi04ZjFhLTRkOGUtMzU2Zi1mMTc3ODdhMWEwMTR8NDRjODM0YmEtZjZkYS03ZmVlLTFlNWYtY2ViMmE4ZTRiMmU2fDc0OWRiOWMyLTJjNmUtNmE5ZC1kOTkzLWIxZjZhNDc1YThiYnw5OTZlNzIxNS0yMWNiLTM5YjYtNjkwYy1kOGZmNzU0NDJlMTUnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydfcnRnZGVwYXJ0ZW1lbnQnLCAnNzUnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydfcnRnY29kZXBvc3RhbCcsICcnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydfbTVlJywgJC5NYXBwZXJGYWN0b3J5KCkuZ2V0VXNlck1hcHBlcigpLmdldCgpLmdldE1kNUVtYWlsKCldCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgaWYgKHdpbmRvdy5fdHJvcWNrICE9PSAxKSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICAgICAgICAgICAgYS50eXBlID0gInRleHQvamF2YXNjcmlwdCI7CiAgICAgICAgICAgICAgICBhLmFzeW5jID0gITA7CiAgICAgICAgICAgICAgICBhLnNyYyA9ICIvL21tdHJvLmNvbS90cm8uanMiOwogICAgICAgICAgICAgICAgdmFyIGIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgic2NyaXB0IilbMF07CiAgICAgICAgICAgICAgICBiLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIGIpOwogICAgICAgICAgICB9CgoKICAgICAgICB9CiAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIENvb2tpZUNvbnNlbnQuaGl0T25Db25zZW50KGFibGVEaXNhYmxlTWlsbGVNZXJjaXMsIDQpOwogICAgICAgIH0pOwogICAgPC9zY3JpcHQ+CgogPCEtLSBHb29nbGVUYWdNYW5hZ2VyIC0tPiAKPHNjcmlwdD4KICAgIGRhdGFMYXllciA9IFtdOwo8L3NjcmlwdD4KCjxub3NjcmlwdD4KICAgIDxpZnJhbWUgc3JjPSIvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1OR1FLU04iIGhlaWdodD0iMCIgd2lkdGg9IjAiCiAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPgo8L25vc2NyaXB0PgoKPHNjcmlwdD4KICAgIChmdW5jdGlvbiAodywgZCwgcywgbCwgaSkgewogICAgICAgIHdbbF0gPSB3W2xdIHx8IFtdOwogICAgICAgIHdbbF0ucHVzaCh7J2d0bS5zdGFydCc6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBldmVudDogJ2d0bS5qcyd9KTsKICAgICAgICB2YXIgZiA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sIGogPSBkLmNyZWF0ZUVsZW1lbnQocyksIGRsID0gbCAhPSAnZGF0YUxheWVyJyA/ICcmbD0nICsgbCA6ICcnOwogICAgICAgIGouYXN5bmMgPSB0cnVlOwogICAgICAgIGouc3JjID0gJy8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nICsgaSArIGRsOwogICAgICAgIGYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaiwgZik7CiAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJ2RhdGFMYXllcicsICdHVE0tTkdRS1NOJyk7Cjwvc2NyaXB0PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgdmFyIGdvb2dsZVRhZ01hbmFnZXJUYWcgPSB7CiAgICAgICAgCiAgICAgICAgZ2V0Q29udGFjdFBhZ2U6IGZ1bmN0aW9uIChjb250YWN0U291cmNlKSB7CiAgICAgICAgICAgIHBhZ2VOYW1lID0gbnVsbDsKCiAgICAgICAgICAgICAgICAgICAgICAgIFsnUFInLCAnRkEnLCAnUFJBJywgJ1BEQSddLmZvckVhY2goZnVuY3Rpb24gKHBhZ2VLZXkpIHsKICAgICAgICAgICAgICAgIHJlZ2V4U3RyID0gJyg/IScgKyBwYWdlS2V5ICsgJyktKCcgKyBwYWdlS2V5ICsgJyktKD8hJyArIHBhZ2VLZXkgKyAnKSc7CiAgICAgICAgICAgICAgICByZWdleFBhZ2UgPSBuZXcgUmVnRXhwKHJlZ2V4U3RyLCAnZycpOwoKICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBjb250YWN0U291cmNlLm1hdGNoKHJlZ2V4UGFnZSkpIHsKICAgICAgICAgICAgICAgICAgICBwYWdlTmFtZSA9IHBhZ2VLZXk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2VOYW1lOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJldHVybiAobnVsbCAhPT0gcGFnZU5hbWUpID8gJ2ltYWlsX2NvbnRhY3RfJyArIHBhZ2VOYW1lIDogbnVsbDsKICAgICAgICB9LAoKICAgICAgICBnZXRDYW1wYWlnbk5hbWU6IGZ1bmN0aW9uIChjb250YWN0U2l0ZSwgY29udGFjdENvdW50cnksIGNhbXBhaWduTmFtZSkgewogICAgICAgICAgICByZXR1cm4gY29udGFjdFNpdGUgKyAnWycgKyBjb250YWN0Q291bnRyeSArICddWycgKyBjYW1wYWlnbk5hbWUgKyAnXSc7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0VHJhbnNhY3Rpb25UeXBlOiBmdW5jdGlvbiAoY29udGFjdFRyYW5zYWN0aW9uVHlwZSkgewogICAgICAgICAgICB0cmFuc2FjdGlvblR5cGUgPSBudWxsOwoKICAgICAgICAgICAgaWYgKGNvbnRhY3RUcmFuc2FjdGlvblR5cGUpIHsKICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uVHlwZSA9ICdhdXRyZSc7CiAgICAgICAgICAgICAgICBpZiAoY29udGFjdFRyYW5zYWN0aW9uVHlwZSA9PT0gJzEnKSB7CiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25UeXBlID0gJ2FjaGF0JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjb250YWN0VHJhbnNhY3Rpb25UeXBlID09PSAnMicpIHsKICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvblR5cGUgPSAnbG9jYXRpb24nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25UeXBlOwogICAgICAgIH0sCgogICAgICAgIHRyYW5zZm9ybURhdGE6IGZ1bmN0aW9uIChpbmlEYXRhKSB7CiAgICAgICAgICAgIGNvbnRhY3RQYWdlID0gdGhpcy5nZXRDb250YWN0UGFnZShpbmlEYXRhLmNvbnRhY3RTb3VyY2UpOwogICAgICAgICAgICBjYW1wYWlnbk5hbWUgPSB0aGlzLmdldENhbXBhaWduTmFtZShpbmlEYXRhLmNvbnRhY3RTaXRlLCBpbmlEYXRhLmNvbnRhY3RDb3VudHJ5LCBpbmlEYXRhLmNhbXBhaWduTmFtZSk7CiAgICAgICAgICAgIHRyYW5zYWN0aW9uVHlwZSA9IHRoaXMuZ2V0VHJhbnNhY3Rpb25UeXBlKGluaURhdGEuY29udGFjdFRyYW5zYWN0aW9uVHlwZSk7CgogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgZXZlbnROYW1lOiBjb250YWN0UGFnZSB8fCAnJywKICAgICAgICAgICAgICAgIGV2ZW50Q2FtcGFpZ246IGNhbXBhaWduTmFtZSB8fCAnJywKICAgICAgICAgICAgICAgIGV2ZW50VHlwZVRyYW5zYWN0aW9uOiB0cmFuc2FjdGlvblR5cGUgfHwgJycsCiAgICAgICAgICAgICAgICBldmVudFN0YXR1czogaW5pRGF0YS5pbWFpbFN0YXR1cyB8fCAnJywKICAgICAgICAgICAgICAgIGV2ZW50UmVxdWVzdElkOiBpbmlEYXRhLmltYWlsUmVxdWVzdElkIHx8ICcnCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKCiAgICAgICAgdHJhbnNmb3JtRGF0YVRlbDogZnVuY3Rpb24obG9jYXRpb25RdWVyeSkgewoKICAgICAgICAgICAgdmFyIGNvbnRhY3RUcmFuc2FjdGlvblR5cGUgPSAnYXV0cmUnOwoKICAgICAgICAgICAgLy8gIFBSIC8gRkEgOgogICAgICAgICAgICBpZiAobG9jYXRpb25RdWVyeS5tYXRjaCgvWz8mXShvZmZlcik/dHJhbnNhY3Rpb250eXBlPTEoJnwkKS8pICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBjb250YWN0VHJhbnNhY3Rpb25UeXBlID0gJ2FjaGF0JzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobG9jYXRpb25RdWVyeS5tYXRjaCgvWz8mXShvZmZlcik/dHJhbnNhY3Rpb250eXBlPTIoJnwkKS8pICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBjb250YWN0VHJhbnNhY3Rpb25UeXBlID0gJ2xvY2F0aW9uJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gIFBhZ2UgRMOpdGFpbCBBZ2VuY2UgKGJsb2MgYW5ub25jZSkgOgogICAgICAgICAgICBpZiAobG9jYXRpb25RdWVyeS5tYXRjaCgvWz8mXW9mZmVyX3RyYW5zYWN0aW9uX3R5cGU9MSgmfCQpLykgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGNvbnRhY3RUcmFuc2FjdGlvblR5cGUgPSAnYWNoYXQnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChsb2NhdGlvblF1ZXJ5Lm1hdGNoKC9bPyZdb2ZmZXJfdHJhbnNhY3Rpb25fdHlwZT0yKCZ8JCkvKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgY29udGFjdFRyYW5zYWN0aW9uVHlwZSA9ICdsb2NhdGlvbic7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBldmVudFBhZ2UgPSBudWxsOwoKICAgICAgICAgICAgLy8gIFBSIC8gRkEgOgogICAgICAgICAgICBpZiAobG9jYXRpb25RdWVyeS5tYXRjaCgvWz8mXXNvdXJjZT1bXiZdKi1QUi1bXiZdKigmfCQpLykgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGV2ZW50UGFnZSA9ICdQUic7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGxvY2F0aW9uUXVlcnkubWF0Y2goL1s/Jl1zb3VyY2U9W14mXSotRkEtW14mXSooJnwkKS8pICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBldmVudFBhZ2UgPSAnRkEnOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyAgUGFnZXMgQWdlbmNlIDoKICAgICAgICAgICAgaWYgKGxvY2F0aW9uUXVlcnkubWF0Y2goL1s/Jl1zb3VyY2U9W14mXSotUFJBLVteJl0qKCZ8JCkvKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgZXZlbnRQYWdlID0gJ1BSQSc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGxvY2F0aW9uUXVlcnkubWF0Y2goL1s/Jl1zb3VyY2U9W14mXSotUERBLVteJl0qKCZ8JCkvKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgZXZlbnRQYWdlID0gJ1BEQSc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChldmVudFBhZ2UgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lOiAnJwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogKCdpbWFpbF9jb250YWN0X3RlbF8nICsgZXZlbnRQYWdlKSwKICAgICAgICAgICAgICAgIGV2ZW50VHlwZVRyYW5zYWN0aW9uOiBjb250YWN0VHJhbnNhY3Rpb25UeXBlCiAgICAgICAgICAgIH07CgogICAgICAgIH0sCgogICAgICAgIHRocm93SGl0OiBmdW5jdGlvbiAoaGl0RGF0YSkgewogICAgICAgICAgICBpZiAoIWhpdERhdGEuZXZlbnROYW1lKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBkYXRhT2JqID0gewogICAgICAgICAgICAgICAgJ2V2ZW50JzogaGl0RGF0YS5ldmVudE5hbWUsCiAgICAgICAgICAgICAgICAnZXZlbnRUeXBlVHJhbnNhY3Rpb24nOiBoaXREYXRhLmV2ZW50VHlwZVRyYW5zYWN0aW9uCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChoaXREYXRhLmV2ZW50Q2FtcGFpZ24pIHsKICAgICAgICAgICAgICAgIGRhdGFPYmouZXZlbnRDYW1wYWlnbiA9IGhpdERhdGEuZXZlbnRDYW1wYWlnbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaGl0RGF0YS5ldmVudFN0YXR1cykgewogICAgICAgICAgICAgICAgZGF0YU9iai5ldmVudFN0YXR1cyA9IGhpdERhdGEuZXZlbnRTdGF0dXM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGhpdERhdGEuZXZlbnRSZXF1ZXN0SWQpIHsKICAgICAgICAgICAgICAgIGRhdGFPYmouZXZlbnRSZXF1ZXN0SWQgPSBoaXREYXRhLmV2ZW50UmVxdWVzdElkOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRhdGFMYXllci5wdXNoKGRhdGFPYmopOwogICAgICAgIH0KICAgIH0KPC9zY3JpcHQ+Cgo8IS0tIENlZGV4aXMgLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KKGZ1bmN0aW9uKHcsIGQpIHsgdmFyIGEgPSBmdW5jdGlvbigpIHsgdmFyIGIgPSBkLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwpiLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKaWYgKHVuZGVmaW5lZCAhPT0gYi5zZXRBdHRyaWJ1dGUpIHsgYi5zZXRBdHRyaWJ1dGUoJ2FzeW5jJywgJ2FzeW5jJyk7IH0KYi5zcmMgPSAnLy8nICsgKCh3LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JykgPyAnczMuYW1hem9uYXdzLmNvbS9jZHgtcmFkYXIvJyA6ICdyYWRhci5jZWRleGlzLmNvbS8nKSArICcwMS0xMDI1Mi1yYWRhcjEwLm1pbi5qcyc7IGQuYm9keS5hcHBlbmRDaGlsZChiKTsgfTsKaWYgKHcuYWRkRXZlbnRMaXN0ZW5lcikgeyB3LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBhLCBmYWxzZSk7IH0KZWxzZSBpZiAody5hdHRhY2hFdmVudCkgeyB3LmF0dGFjaEV2ZW50KCdvbmxvYWQnLCBhKTsgfQp9KHdpbmRvdywgZG9jdW1lbnQpKTsKPC9zY3JpcHQ+CgogPCEtLSBCb3Vyc29yYW1hIC0tPiAKPGRpdiBpZD0iaW1nQm91cnNvcmFtYSI+CjwvZGl2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBmdW5jdGlvbiBjcmVhdERPTUVsZW1lbnQgKG9iaikgewogICAgICAgIGxldCBET01FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvYmpbJ25hbWUnXSk7CiAgICAgICAgZGVsZXRlIG9ialsnbmFtZSddOwogICAgICAgIGZvcihjb25zdCBba2V5LHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7CiAgICAgICAgICAgIGlmIChrZXkgPT09ICdjaGlsZCcpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIERPTUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3JlYXRET01FbGVtZW50KHZhbHVlKSk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBET01FbGVtZW50W2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIERPTUVsZW1lbnQ7CiAgICB9CiAgICBmdW5jdGlvbiBoaXRCb3Vyc29yYW1hKCl7CiAgICAgICAgdmFyIHBhcmVudEltZyA9IHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW1nQm91cnNvcmFtYSIpOwogICAgICAgIHZhciBCb3Vyc29yYW1hSW1nID0gY3JlYXRET01FbGVtZW50KHsnbmFtZSc6J2ltZycsJ3NyYyc6J2h0dHBzOi8vd3d3LnNtYXJ0YWRzZXJ2ZXIuY29tL2ltcD9pbWdpZD0xODY5OTM2OCZ0bXN0cD1bdGltZXN0YW1wXSZ0Z3Q9W3RhcmdldGluZ10nfSk7CiAgICAgICAgcGFyZW50SW1nLmFwcGVuZENoaWxkKEJvdXJzb3JhbWFJbWcpOwogICAgfQogICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgQ29va2llQ29uc2VudC5oaXRPbkNvbnNlbnQoaGl0Qm91cnNvcmFtYSwgNCk7CiAgICB9KTsKPC9zY3JpcHQ+CgogPCEtLSBSZW1haWxNZSAtLT4gCjxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vamF2YXNjcmlwdCI+CiAgICB2YXIgcmVtYWlsTWVBY3Rpb24gPXsKICAgICAgICAiaG9tZSI6UmVtYWlsTWVIb21lLAogICAgICAgICJsaXN0IjpSZW1haWxNZVBSLAogICAgICAgICJ2aWV3IjpSZW1haWxNZUZBLAogICAgICAgICJjb250YWN0IjpSZW1haWxNZUNvbnRhY3QKICAgIH07CgoKICAgIGZ1bmN0aW9uIGhpdFJlbWFpbE1lKGFjdGlvbikgewogICAgICAgIGxldCByZW1haWxtZUZ1bmN0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAoZnVuY3Rpb24gKGNtX3AsIGNtX2lkLCBlcCwgcXMsIGIpIHsKICAgICAgICAgICAgICAgIGNtX3AgPSBbXTsKICAgICAgICAgICAgICAgIGNtX2lkID0gIjU0MGJkY2FlLWY4MDQtNDM1MS04MGE0LWUzMDc1ZjgxZDc2NCI7CiAgICAgICAgICAgICAgICBjbV9wLnB1c2goWyJoIiwgd2luZG93Lnh0X2F0XSk7CiAgICAgICAgICAgICAgICBjbV9wID0gcmVtYWlsTWVBY3Rpb25bYWN0aW9uXShjbV9wKTsKICAgICAgICAgICAgICAgIGNtX3AucHVzaChbInciLCB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWVdKSwgZXAgPSAiLy90ci5jbG91ZC1tZWRpYS5mci90LyIgKyBjbV9pZCwgcXMgPSBjbV9wLm1hcChmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVswXSArICI9IiArIGVuY29kZVVSSShhWzFdKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkuam9pbigiJiIpLCBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXSwgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpLCBlLnNyYyA9IGVwICsgIj8iICsgcXMsIGIucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChlLCBiKTsKICAgICAgICAgICAgfSkoKTsKICAgICAgICB9OwogICAgICAgICAgICBDb29raWVDb25zZW50LmhpdE9uQ29uc2VudChyZW1haWxtZUZ1bmN0aW9uLCA0KTsKICAgIH0KCgogICAgZnVuY3Rpb24gUmVtYWlsTWVIb21lIChjbV9wKSB7CiAgICAgICAgICAgICAgIGNtX3AucHVzaChbImFjdGlvbiIsICJob21lIl0pOwogICAgICAgICAgICAgICByZXR1cm4gY21fcDsKICAgIH0KCiAgICBmdW5jdGlvbiBSZW1haWxNZVBSIChjbV9wKSB7CiAgICAgICAgICAgIHZhciBvZmZlciA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbaWRePSJoZWFkZXItb2ZmZXItIl0nKTsKICAgICAgICAgICAgdmFyIG9mZmVySWQgPSAwOwoKICAgICAgICAgICAgY21fcC5wdXNoKFsiYWN0aW9uIiwgInNlYXJjaCJdKTsKICAgICAgICAgICAgY21fcC5wdXNoKFsicXVlcnkiLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVdKTsKICAgICAgICAgICAgd2hpbGUob2ZmZXJJZCA8IG9mZmVyLmxlbmd0aCkgewogICAgICAgICAgICAgICAgY21fcC5wdXNoKFsicHJvZHVjdHNbIiArIG9mZmVySWQgKyAiXVtpZF0iLCBvZmZlcltvZmZlcklkXS5pZC5yZXBsYWNlKCdoZWFkZXItb2ZmZXItJywgJycpXSk7CiAgICAgICAgICAgICAgICBvZmZlcklkKys7CiAgICAgICAgICAgIH0KICAgICAgICByZXR1cm4gY21fcDsKICAgIH0KCiAgICBmdW5jdGlvbiBSZW1haWxNZUZBIChjbV9wKSB7CiAgICAgICAgICAgIGNtX3AucHVzaChbImFjdGlvbiIsICJwcm9kdWN0Il0pOwogICAgICAgICAgICBjbV9wLnB1c2goWyJwcm9kdWN0Iiwgd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpZF49ImhlYWRlci1vZmZlci0iXScpWzBdLmlkXSk7CiAgICAgICAgcmV0dXJuIGNtX3A7CiAgICB9CiAgICBmdW5jdGlvbiBSZW1haWxNZUNvbnRhY3QgKGNtX3ApIHsKICAgICAgICB2YXIgb2ZmZXIgPSB3aW5kb3cucGFyZW50LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpZF49ImhlYWRlci1vZmZlci0iXScpWzBdOwogICAgICAgIGlmIChvZmZlcikgewogICAgICAgICAgICB2YXIgcHJpY2UgPSBvZmZlci5xdWVyeVNlbGVjdG9yQWxsKCdbY2xhc3M9Im1haW4tcHJpY2UiXScpWzBdOwoKICAgICAgICAgICAgY21fcC5wdXNoKFsiYWN0aW9uIiwgInNhbGUiXSk7CiAgICAgICAgICAgIGNtX3AucHVzaChbIm9yZGVyX2lkIiwgIiJdKTsKICAgICAgICAgICAgY21fcC5wdXNoKFsicHJvZHVjdHNbMF1baWRdIiwgb2ZmZXIuaWRdKTsKICAgICAgICAgICAgY21fcC5wdXNoKFsicHJvZHVjdHNbMF1bcHJpY2VdIiwgKHByaWNlICE9PSB1bmRlZmluZWQgPyBwcmljZS5pbm5lclRleHQgOiAnJyldKTsKICAgICAgICAgICAgY21fcC5wdXNoKFsicHJvZHVjdHNbMF1bcXVhbnRpdHldIiwgIjEiXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjbV9wOwogICAgfQo8L3NjcmlwdD4KCjxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vamF2YXNjcmlwdCI+CiAgICBtZCA9IG5ldyBNb2JpbGVEZXRlY3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpOwogICAgZGV2aWNlVHlwZSA9IG1kLm1vYmlsZSgpID8gJ21vYmlsZScgOiAobWQudGFibGV0KCkgPyAndGFibGV0JyA6ICdkZXNrdG9wJyk7CgogICAgdmFyIHNlYXJjaEVuZ2luZVRyYWNrZXIgPSBuZXcgVHJhY2tpbmcuU2VhcmNoRW5naW5lVHJhY2tlcih7CiAgICAgICAgZGV2aWNlVHlwZTogZGV2aWNlVHlwZSwKICAgICAgICB0cmFja2VyOiB7CiAgICAgICAgICAgIGhpdDogd2luZG93Lnh0X2NsaWNrCiAgICAgICAgfQogICAgfSk7CgogICAgc2VhcmNoRW5naW5lVHJhY2tlci5pbml0KCk7Cjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigKICAgICdET01Db250ZW50TG9hZGVkJywKICAgIGZ1bmN0aW9uICgpIHsKCiAgICBmdW5jdGlvbiBzbWFydEFkUHVzaCAoKSB7CiAgICAgIGlmICh0eXBlb2Ygc2FzICE9PSAndW5kZWZpbmVkJyAmJiBzYXMgJiYgc2FzLmNtZCAmJiBzYXMuY21kLnB1c2gpIHsKICAgICAgICBzYXMuY21kLnB1c2goZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHByZWZpeCA9ICdzYXNfJzsKICAgICAgICAgIHZhciBibG9ja3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzYXNfYmxvY2snKTsKCiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmxvY2tzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBibG9jayA9IGJsb2Nrcy5pdGVtKGkpOwogICAgICAgICAgICB2YXIgYmxvY2tJZCA9IChibG9jay5pZCkuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgpOwoKICAgICAgICAgICAgdmFyIHJlbmRlcklkID0gYmxvY2suZGF0YXNldC5yZW5kZXI7CiAgICAgICAgICAgIGlmIChyZW5kZXJJZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgLy8gc2tpcCBibG9ja3MgYWxyZWFkeSByZW5kZXJlZAogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzYXMuY21kLnB1c2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHNhcy5yZW5kZXIoYmxvY2tJZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHNldFRpbWVvdXQoc21hcnRBZFB1c2gsIDUwMCk7CiAgICAgIH0KICAgIH0KCiAgICBDb29raWVDb25zZW50LmhpdE9uQ29uc2VudChzbWFydEFkUHVzaCwgNCk7CiAgfSk7Cjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIKICAgICAgICBzcmM9Imh0dHBzOi8vd3d3LmxvZ2ljLWltbW8uY29tL3NlYXJjaC1tZWEvY2Fub25pY2FsLmpzIj48L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPgo=
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:59 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-e729d047-1a22-19e8-67c1-ee9050b33e55.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Cache-Control:
      - public, max-age=300
      Last-Modified:
      - Tue, 31 Mar 2020 14:06:31 GMT
      Expires:
      - Tue, 31 Mar 2020 16:43:59 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc1_orange.10.102.2.241
      Loadtime:
      - D=215112 t=1585672739581749
      Server:
      - elb
      Date:
      - Tue, 31 Mar 2020 16:38:59 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:59 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-8f553b6b-9a8d-d584-9114-42afe224ddab.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Tue, 31 Mar 2020 13:48:30 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc2.10.102.2.40
      Loadtime:
      - D=239853 t=1585671136542554
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Tue, 31 Mar 2020 16:44:00 GMT
      Date:
      - Tue, 31 Mar 2020 16:39:00 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:39:00 GMT
- request:
    method: get
    uri: https://www.logic-immo.com/detail-vente-37d8add9-e03d-0f61-7c12-87823b0bf4c4.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Last-Modified:
      - Tue, 31 Mar 2020 13:28:00 GMT
      Timing-Allow-Origin:
      - "*"
      Fromserver:
      - dc2.10.102.2.40
      Loadtime:
      - D=209812 t=1585669428611865
      Server:
      - elb
      Cache-Control:
      - public, max-age=300
      Expires:
      - Tue, 31 Mar 2020 16:44:00 GMT
      Date:
      - Tue, 31 Mar 2020 16:39:00 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Vary:
      - User-Agent
      X-Cdn-Forward:
      - AKAMAI
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:39:00 GMT
recorded_with: VCR 5.1.0
