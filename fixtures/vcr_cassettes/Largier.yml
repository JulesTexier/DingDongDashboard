---
http_interactions:
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/p=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:33 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=k4f0otpo3tmhi78b7a8ima01j5; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:33 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/p=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:33 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=imgt7708bp4dm527gq02je9653; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:33 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-794/vente-appartement-6-pieces-4-chambres-paris-75009/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:33 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=4ndb6eiqtqg2ij5a2vsvrlo4k4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:33 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-791/vente-appartement-6-pieces-3-chambres-paris-75008/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:34 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=jars1pllngj7ka2t3pv3qtonu4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:34 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-784/vente-appartement-3-pieces-2-chambres-paris-75016/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:34 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=go9gk4dpcegdna40oh81hr2nk1; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:34 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-787/vente-appartement-5-pieces-2-chambres-paris-75016/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:34 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=4l65l66o4seug8urm7alvuecs6; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:34 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la3-239/vente-appartement-4-pieces-2-chambres-paris-75116/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:34 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=h4d6fme4j1bnu7otnnlh37l501; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:34 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-783/vente-appartement-6-pieces-4-chambres-paris-75014/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:34 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=jc6v1b7avnr1oa30n82rjevq66; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4KPGhlYWQ+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiLz4KCiAgICA8dGl0bGU+VmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgMTQgQWzDqXNpYSAtIEFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzPC90aXRsZT4KCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iRMOpdGFpbHMgZGUgbCdhbm5vbmNlIGltbW9iaWxpw6hyZSB2ZW50ZSBhcHBhcnRlbWVudCA2IHBpw6hjZXMgUEFSSVMgNzUwMTQgNCBjaGFtYnJlcyAxNjggbcKyIFByaXggMSA4NDAgMDAwIOKCrCBSw6lmw6lyZW5jZSBMQTItNzgzIi8+CiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQWdlbmNlIGltbW9iaWxpw6hyZSBkZSBwcmVzdGlnZSxhY2hhdCx2ZW50ZSxhcHBhcnRlbWVudHMgcGFyaXNpZW5zLGhhdXNzbWFubmllbixtYWlzb25zLGjDtHRlbHMgcGFydGljdWxpZXJzLHByb3ByacOpdMOpcyxjaMOidGVhdXgsbG9mdCxkdXBsZXgsaW1tZXVibGVzLGNhYmluZXQgbGFyZ2llciA3NTAwOCxwYXJpcyxpbGUgZGUgZnJhbmNlLGFnZW5jZSBkZXMgYW1iYXNzYWRlcyxlc3RpbWF0aW9uLGV4cGVydGlzZSxpbW1vYmlsaWVyLGJpZW5zIGltbW9iaWxpZXJzLHLDqXNpZGVudGllbCIgLz4KICAgIDxtZXRhIG5hbWU9InJldmlzaXQtYWZ0ZXIiIGNvbnRlbnQ9IjEwIGRheXMiIC8+CiAgICA8bWV0YSBuYW1lID0iZm9ybWF0LWRldGVjdGlvbiIgY29udGVudCA9ICJ0ZWxlcGhvbmU9bm8iIC8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIiBjb250ZW50PSJ5ZXMiLz4KICAgIDxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLXRpdGxlIiBjb250ZW50PSJBZ2VuY2UgTGFyZ2llciAtIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyIvPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCIvPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIiAvPgoKICAgIDxiYXNlIGhyZWY9Imh0dHBzOi8vd3d3LmxhcmdpZXIuZnIvIiAvPgoKICAgIDwhLS08c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9qcXVlcnktMi4xLjEubWluLmpzIj48L3NjcmlwdD4tLT4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL2pxdWVyeS5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvU2NhbGVJbWFnZS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvanF1ZXJ5LmN5Y2xlMi5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL2pxdWVyeS5tdWx0aXBsZS5zZWxlY3QuanMiPjwvc2NyaXB0PgoJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvanF1ZXJ5LnNoYXJycmUubWluLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL21zZHJvcC5jc3MiIC8+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19kZWZhdWx0L3Jlc2V0LmNzcyIgLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9waG90b3N3aXBlLmNzcyIgLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2RlZmF1bHQtc2tpbi5jc3MiIC8+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvc3R5bGUuY3NzPzIwMTcwNDI0PSIvPgoKICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0iZW4iIGhyZWY9Imh0dHBzOi8vd3d3LmxhcmdpZXIuZnIvZW4vc2FsZS1ob3VzZS1hcGFydG1lbnQtbWFuc2lvbi1wYXJpcy1sYXJnaWVyL3JlZi1sYTItNzgzL3NhbGUtYXBhcnRtZW50LTYtcm9vbXMtNC1iZWRyb29tcy1wYXJpcy03NTAxNC9pbmRleC5waHAiIC8+CiAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9IiIgaHJlZj0iaHR0cHM6Ly9tLmxhcmdpZXIuZnIvZnIvdmVudGUtbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllci1wYXJpcy1sYXJnaWVyL3JlZi1sYTItNzgzL3ZlbnRlLWFwcGFydGVtZW50LTYtcGllY2VzLTQtY2hhbWJyZXMtcGFyaXMtNzUwMTQvIiAvPgoKICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvZmF2aWNvbi5pY28iIC8+CgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvYXBwbGVUb3VjaEljb242MC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iNzZ4NzYiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjc2LnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxMjB4MTIwIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvYXBwbGVUb3VjaEljb24xMjAucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjE1Mi5wbmciPgoKICAgIDxtZXRhIG5hbWU9ImFwcGxpY2F0aW9uLW5hbWUiIGNvbnRlbnQ9IkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiMwMzQ2OGEiIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTcweDcwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL21zVG91Y2gvc21hbGx0aWxlLTcweDcwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlMTUweDE1MGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9tc1RvdWNoL21lZGl1bXRpbGUtMTUweDE1MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXdpZGUzMTB4MTUwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL21zVG91Y2gvd2lkZXRpbGUtMzEweDE1MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTMxMHgzMTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvbXNUb3VjaC9sYXJnZXRpbGUtMzEweDMxMC5wbmciIC8+CgogICAgPCEtLVtpZiBJRSBdPjxzY3JpcHQgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9tb2Rlcm5penIuY3VzdG9tLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHRlIElFIDldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL3BsYWNlaG9sZGVycy5taW4uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiAoZ3RlIElFIDYpJihsdGUgSUUgOCldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL3NlbGVjdGl2aXpyLW1pbi5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIGx0IElFIDldPjxzY3JpcHQgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9jc3MzLW1lZGlhcXVlcmllcy5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CgogICAgPGxpbmsgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUFsZWdyZXlhJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4KCgoKPC9oZWFkPgo8IS0tW2lmIGx0IElFIDddPiA8Ym9keSBjbGFzcz0iaWUgaWU2IGllN18gaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA3XT4gICAgPGJvZHkgY2xhc3M9ImllIGllNyBpZTdfIGllOF8gaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTggaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA5XT4gICAgPGJvZHkgY2xhc3M9ImllIGllOSBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBndCBJRSA5XT4gPGJvZHk+PCFbZW5kaWZdLS0+CjwhLS1baWYgIUlFXT48IS0tPjxib2R5PjwhLS08IVtlbmRpZl0tLT4KCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIGlmICggJCh3aW5kb3cpLndpZHRoKCkgPD0gNzY4KSB7CiAgICAgICAgJCgnbWV0YVtuYW1lPXZpZXdwb3J0XScpLmF0dHIoJ2NvbnRlbnQnLCd3aWR0aD03NjgnKTsKICAgIH0KPC9zY3JpcHQ+CjxkaXYgaWQ9Im1haW4iIGNsYXNzPSJhbm5vbmNlcy1kZWZhdWx0Ij4KICAgIDxoZWFkZXI+CiAgICA8ZGl2IGNsYXNzPSJ0b3BfaGVhZGVyIj4KICAgICAgICA8ZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2dvIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sYXJnaWVyLmZyLyIgdGl0bGU9IkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJBZ2VuY2UgTGFyZ2llciAtIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyAtIEFjaGF0IGFwcGFydGVtZW50cyBwYXJpcyA4w6htZSIvPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxuYXY+CiAgICA8dWwgY2xhc3M9Im1haW5NZW51Ij4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci8iIHRpdGxlPSJBZ2VuY2UgTGFyZ2llciBJbW1vYmlsaWVyIGRlIFByZXN0aWdlIGRhbnMgbGUgOGUgZXQgT3Vlc3QgUGFyaXNpZW4iIGNsYXNzPSJpY29BY2N1ZWlsIj48L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9hZ2VuY2UtaW1tb2JpbGllcmUtcHJlc3RpZ2UtbGFyZ2llci1wYXJpcy8iIHRpdGxlPSJBZ2VuY2VzIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIHVuZSBIaXN0b2lyZSBQYXJpc2llbm5lIiBjbGFzcz0iIj5EZXB1aXMgMTg1OTwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3ZlbnRlLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbHMtcGFydGljdWxpZXItcGFyaXMtbGFyZ2llci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJJbW1vYmlsaWVyIGVuIFZlbnRlIGF2ZWMgTGFyZ2llciBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMiIGNsYXNzPSJjdXJyZW50Ij5Ob3MgYmllbnM8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci92ZW5kcmUtZXN0aW1hdGlvbi1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWxzLXBhcnRpY3VsaWVycy1wYXJpcy8iIHRpdGxlPSJWZW5kcmUgdm90cmUgYmllbiBzdXIgUGFyaXMgZXQgw45sZSBkZSBGcmFuY2UiIGNsYXNzPSIiPlZlbmRyZSBhdmVjIExhcmdpZXI8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9hY3F1ZXJpci1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWwtcGFydGljdWxpZXItcGFyaXMvIiB0aXRsZT0iQWNoZXRlciB2b3RyZSBiaWVuIHN1ciBQYXJpcyBldCDDj2xlIGRlIEZyYW5jZSIgY2xhc3M9IiI+QWNxdcOpcmlyIGF2ZWMgTGFyZ2llcjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iZmxhZ0xhbmciPgogICAgICAgICAgICA8YSBocmVmPSIvZW4vc2FsZS1ob3VzZS1hcGFydG1lbnQtbWFuc2lvbi1wYXJpcy1sYXJnaWVyL3JlZi1sYTItNzgzL3NhbGUtYXBhcnRtZW50LTYtcm9vbXMtNC1iZWRyb29tcy1wYXJpcy03NTAxNC8iIHRpdGxlPSJlbmdsaXNoIiBjbGFzcz0iZmxhZ1NsaWRlTWVudSI+ZW5nbGlzaDwvYT48aW1nIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL2ZsYWdzL2VuLnBuZyIgYWx0PSJlbmdsaXNoIiB0aXRsZT0iZW5nbGlzaCIgLz4KICAgICAgICA8L2xpPgogICAgPC91bD4KICAgIDx1bCBjbGFzcz0ic2Vjb25kTWVudSI+CiAgICAgICAgPGxpIGNsYXNzPSJtb3RldXJfaGVhZGVyIj4KICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJzZWxlY3Rpb25faGVhZGVyIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL21hLXNlbGVjdGlvbi1pbW1vYmlsaWVyLWxhcmdpZXItcGFyaXMvIiB0aXRsZT0iU8OpbGVjdGlvbm5lciBhbm5vbmNlIGltbW9iaWxpw6hyZSIgY2xhc3M9InNlbGVjdGlvbiI+CiAgICAgICAgICAgICAgICBNYSBzw6lsZWN0aW9uIDoKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuYl9zZWxlY3Rpb24iPjA8L3NwYW4+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZW4vc2FsZS1ob3VzZS1hcGFydG1lbnQtbWFuc2lvbi1wYXJpcy1sYXJnaWVyL3JlZi1sYTItNzgzL3NhbGUtYXBhcnRtZW50LTYtcm9vbXMtNC1iZWRyb29tcy1wYXJpcy03NTAxNC8iIHRpdGxlPSJlbmdsaXNoIiBjbGFzcz0iZmxhZyI+PGltZyBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9mbGFncy9lbi5wbmciIGFsdD0iZW5nbGlzaCIgdGl0bGU9ImVuZ2xpc2giIC8+PC9hPgoKCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgPC91bD4KICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KPC9uYXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgKGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAkKCcuaWNvX21lbnUnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKCdoZWFkZXIgPiBkaXYgbmF2IHVsLm1haW5NZW51Jykuc2xpZGVUb2dnbGUoMjAwKTsKICAgICAgICAgICAgfSk7CgogICAgICAgIH0pKCk7CiAgICB9KTsKPC9zY3JpcHQ+CgoKCgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX21lbnUiPjwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJmb3JtX2hlYWRlciI+CiAgICA8ZGl2PgogICAgICAgIDxzcGFuIGNsYXNzPSJpY29fY2xvc2VfaGVhZGVyIj48L3NwYW4+CiAgICAgICAgPGZvcm0gaWQ9Im1vdGV1cl9mb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2ZyL3ZlbnRlLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbHMtcGFydGljdWxpZXItcGFyaXMtbGFyZ2llci8iPgogICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9Im11bHRpIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Imdlb19tdWx0aSI+VmlsbGVzPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9Imdlb19zZWN0ZXVyIiBtdWx0aXBsZT0ibXVsdGlwbGUiIG5hbWU9Imdlb19zZWN0ZXVyW10iPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InBhcmlzX3JpdmVfZHJvaXRlIiA+UGFyaXMgcml2ZSBkcm9pdGU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJwYXJpc19yaXZlX2dhdWNoZSIgPlBhcmlzIHJpdmUgZ2F1Y2hlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iaWxlX2RlX2ZyYW5jZSIgPsOObGUtZGUtRnJhbmNlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0icHJvdmluY2UiID5Qcm92aW5jZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkiPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZ2VvX211bHRpIj5WaWxsZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9Imdlb19tdWx0aSIgbmFtZT0iZ2VvX211bHRpW10iIG11bHRpcGxlPSJtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NjAyNzA7Z291dmlldXgiID5HT1VWSUVVWCAtIDYwMjcwPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7ODQxNjA7bG91cm1hcmluIiA+TE9VUk1BUklOIC0gODQxNjA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwODtwYXJpcyIgPlBBUklTIC0gNzUwMDg8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwOTtwYXJpcyIgPlBBUklTIC0gNzUwMDk8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAxNDtwYXJpcyIgPlBBUklTIC0gNzUwMTQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAxNTtwYXJpcyIgPlBBUklTIC0gNzUwMTU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAxNjtwYXJpcyIgPlBBUklTIC0gNzUwMTY8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTExNjtwYXJpcyIgPlBBUklTIC0gNzUxMTY8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyX3NlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZsZWNoZV9zZWxlY3QiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0eXBlIj5UeXBlIGRlIGJpZW48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9InR5cGUiIG5hbWU9InR5cGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPlR5cGUgZGUgYmllbjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJBcHBhcnRtZW50IiA+QXBwYXJ0ZW1lbnQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iSG91c2UiID5NYWlzb248L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmbGVjaGVfc2VsZWN0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY2hhbWJyZXMiIGlkPSJjaGFtYnJlcyIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9InNlbGVjdF9uYl9jaGFtYnJlcyIgbmFtZT0ibmJfY2hhbWJyZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPkNoYW1icmVzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEsMiI+MSAtIDIgY2hhbWJyZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMywiPisgMyBjaGFtYnJlczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmbGVjaGVfc2VsZWN0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1pbiIgaWQ9ImJ1ZGdldF9taW4iIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1heCIgaWQ9ImJ1ZGdldF9tYXgiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImJ1ZGdldCI+QnVkZ2V0PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0ic2VsZWN0X2J1ZGdldCIgbmFtZT0iYnVkZ2V0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+QnVkZ2V0PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwLDUwMDAwMCI+JmxzYXF1bzsgNTAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjUwMDAwMCwxMDAwMDAwIj41MDAgMDAwIOKCrCAtIDEgMDAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwMDAwMDAsMjAwMDAwMCI+MSAwMDAgMDAwIOKCrCAtIDIgMDAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMDAwMDAsIj4mcnNhcXVvOyAyIDAwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0icmVmZXJlbmNlIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJiaWVuX3JlZiI+UsOpZsOpcmVuY2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiBwbGFjZWhvbGRlcj0iUsOpZsOpcmVuY2UiIHZhbHVlPSIiIGNsYXNzPSJ2YWxldXIiLz4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icCIgaWQ9InAiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im5ld19yZXNlYXJjaCIgaWQ9Im5ld19yZXNlYXJjaCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlY2hhcmdlTVIiIGlkPSJyZWNoYXJnZU1SIiB2YWx1ZT0iMCIgLz4KICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJSZWNoZXJjaGVyIiAvPgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgIDwvZm9ybT4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL21vdGV1cl94aHJfbGlzdGNpdGllcy5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiAgICAkKCcjc2VsZWN0X2J1ZGdldCcpLm9uKCdjaGFuZ2UnLGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgdmFyIHZhbGV1ciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLnNlbGVjdF9idWRnZXQudmFsdWU7CiAgICAgICAgICAgIGlmICh2YWxldXIuaW5kZXhPZignLCcsMCkgPiAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgdGFidmFsID0gdmFsZXVyLnNwbGl0KCcsJyk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5idWRnZXRfbWluLnZhbHVlID0gdGFidmFsWzBdOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuYnVkZ2V0X21heC52YWx1ZSA9IHRhYnZhbFsxXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9taW4udmFsdWUgPSAnJzsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9tYXgudmFsdWUgPSAnJzsKICAgICAgICAgICAgfQoKICAgIH0pOwoKICAgIHZhciBuYl9jaGFtYnJlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmNoYW1icmVzLnZhbHVlOwogICAgdmFyIHZhbGV1ciA9IG5iX2NoYW1icmVzOwoKICAgIGlmIChuYl9jaGFtYnJlcyAhPSAnMCcpCiAgICB7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuc2VsZWN0X25iX2NoYW1icmVzLnZhbHVlID0gdmFsZXVyOwogICAgfQoKICAgIChmdW5jdGlvbigpewoKICAgICAgICAkKCcjc2VsZWN0X25iX2NoYW1icmVzJykub24oJ2NoYW5nZScsZnVuY3Rpb24oKSB7CgogICAgICAgICAgICB2YXIgdmFsZXVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuc2VsZWN0X25iX2NoYW1icmVzLnZhbHVlOwogICAgICAgICAgICBpZiAodmFsZXVyLmluZGV4T2YoJywnLDApID4gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuY2hhbWJyZXMudmFsdWUgPSB2YWxldXI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5jaGFtYnJlcy52YWx1ZSA9IHZhbGV1cjsKICAgICAgICAgICAgfQoKICAgICAgICB9KS5jaGFuZ2UoKTsKCiAgICB9KSgpOwoKICAgIHZhciBtb3RldXJPcGVuID0gZmFsc2U7CgogICAgJCgnLm1vdGV1cl9oZWFkZXInKS5vbignY2xpY2snLCBmdW5jdGlvbigpewogICAgICAgIGlmKG1vdGV1ck9wZW4gPT0gZmFsc2UpewoKICAgICAgICAgICAgbW90ZXVyT3BlbiA9IHRydWU7CgogICAgICAgICAgICAkKCcuZm9ybV9oZWFkZXInKS5zbGlkZURvd24oMjAwLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzondmlzaWJsZScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAgICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlVXAoMjAwLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzonaGlkZGVuJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9CgogICAgfSk7CgogICAgJCgnLmljb19jbG9zZV9oZWFkZXInKS5vbignY2xpY2snLCBmdW5jdGlvbigpewoKICAgICAgICBtb3RldXJPcGVuID0gZmFsc2U7CgogICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlVXAoMjAwKTsKCiAgICB9KTsKCiAgICAkKCcjZ2VvX211bHRpJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgIHBsYWNlaG9sZGVyOiAiTG9jYWxpc2F0aW9uIiwKICAgICAgICBzZWxlY3RBbGw6IGZhbHNlCiAgICB9KTsKCiAgICAgJCgnI2dlb19zZWN0ZXVyJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgIHBsYWNlaG9sZGVyOiAiU2VjdGV1ciIsCiAgICAgICAgc2VsZWN0QWxsOiBmYWxzZQogICAgfSk7CgogICAgIG1vdGV1cl94aHJfbGlzdGNpdGllcygiZ2VvX3NlY3RldXI7dHJhbnNhYzt0eXBlX2ltbW87YWRkcmVzc19kZXBhcnRlbWVudDthZGRyZXNzX3BheXMiLCB0cnVlLCAiIik7CgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKCgkJLy9idWRnZXQKICAgICAgICB2YXIgYnVkZ2V0X21pbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmJ1ZGdldF9taW4udmFsdWU7CiAgICAgICAgdmFyIGJ1ZGdldF9tYXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5idWRnZXRfbWF4LnZhbHVlOwogICAgICAgIGlmIChidWRnZXRfbWluID09ICcnKSBidWRnZXRfbWluID0gJzAnOwogICAgICAgIHZhciB2YWxldXIgPSBidWRnZXRfbWluICsgJywnICsgYnVkZ2V0X21heDsKICAgICAgICBpZiAoYnVkZ2V0X21pbiAhPSAnMCcgfHwgYnVkZ2V0X21heCAhPSAnJykKICAgICAgICB7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnNlbGVjdF9idWRnZXQudmFsdWUgPSB2YWxldXI7CiAgICAgICAgfQoKICAgIH0pOwoKCgoKPC9zY3JpcHQ+Cgo8L2hlYWRlcj4KCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9qcXVlcnkuamNhcm91c2VsLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL3Bob3Rvc3dpcGUubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvcGhvdG9zd2lwZS11aS1kZWZhdWx0Lm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9tYWpfc2VsZWN0aW9uLmpzIj48L3NjcmlwdD4KICAgIDxzZWN0aW9uIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUHJvZHVjdCIgaWQ9ImFubm9uY2VfcHJvZmlsIj4KCQk8aDEgaXRlbXByb3A9Im5hbWUiPlZlbnRlIEFwcGFydGVtZW50IFBhcmlzIDE0IEFsw6lzaWE8L2gxPgogICAgICAgIDxkaXYgY2xhc3M9ImRpYXBvcmFtYV90aHVtYnMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaWFwb3JhbWFfcHJvZmlsIiBkYXRhLWN5Y2xlLXBhZ2VyLXRlbXBsYXRlPSIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGUiPgoJCQkJCTxpbWcgY2xhc3M9ImF1dG9TY2FsZSIgaXRlbXByb3A9ImltYWdlIiBzcmM9Ii9kYXRhcy9iaWVucy9pbWFnZXMvNzYwLzc2MF8wMC0yMDIwLTAzLTA2LTExMjIuanBnIiBhbHQ9ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgdGl0bGU9ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIvPjxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGh1bWJzX2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqY2Fyb3VzZWwtcHJldiBpbmFjdGl2ZSBpY29fZGV0YWlsX3ByZXYiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjeWNsZSIgZGF0YS1qY2Fyb3VzZWw9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYnMgY3ljbGUtcGFnZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgoJCQkJCQkJCQk8aW1nIGNsYXNzPSJhdXRvU2NhbGUiIGl0ZW1wcm9wPSJpbWFnZSIgc3JjPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzc2MC83NjBfMDAtMjAyMC0wMy0wNi0xMTIyLmpwZyIgYWx0PSJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCkiIHRpdGxlPSJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iamNhcm91c2VsLW5leHQgaW5hY3RpdmUgaWNvX2RldGFpbF9uZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKCQkJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCQkvLyAgQWRkTG9hZEV2ZW50CgkJCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQkJZnVuY3Rpb24gQWRkTG9hZEV2ZW50KGZ1bmMpIHsKCQkJCXZhciBvbGRvbmxvYWQgPSB3aW5kb3cub25sb2FkOwoJCQkJaWYgKHR5cGVvZiB3aW5kb3cub25sb2FkICE9ICdmdW5jdGlvbicpCgkJCQl7IHdpbmRvdy5vbmxvYWQgPSBmdW5jOyB9CgkJCQllbHNlIHsKCQkJCQl3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7CgkJCQkJCWlmIChvbGRvbmxvYWQpCgkJCQkJCXsgb2xkb25sb2FkKCk7IH0KCQkJCQkJZnVuYygpOwoJCQkJCX0KCQkJCX0KCQkJfQoKICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oZSkgewoKCQkJCShmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB3ID0gJCgnLmRpYXBvcmFtYV9wcm9maWwnKS53aWR0aCgpLzEuNTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLnRodW1ic19jb250YWluZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9KSgpOwoKICAgICAgICAgICAgICAgIC8vJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5lbXB0eSgpLmFwcGVuZCgkKCcudGh1bWJzID4gZGl2ID4gYScpLmNsb25lKCkpOwoKICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3ljbGUoewogICAgICAgICAgICAgICAgICAgIHNsaWRlczonPiBkaXYuc2xpZGUnLAogICAgICAgICAgICAgICAgICAgIHBhZ2VyOicuY3ljbGUtcGFnZXInLAogICAgICAgICAgICAgICAgICAgIG1hbnVhbFNwZWVkOjQwMCwKICAgICAgICAgICAgICAgICAgICBmeDogJ2ZhZGUnLAogICAgICAgICAgICAgICAgICAgIHNwZWVkOjIwMDAsCiAgICAgICAgICAgICAgICAgICAgc3dpcGU6dHJ1ZQogICAgICAgICAgICAgICAgfSk7CgoJCQkJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoJCQkJLyoqKioqKipBREQgRElBUE8gMVNUIFNMSURFIFRIRU4gUkVTVCBPRiBUSEVNIEFGVEVSIExPQUQqKioqKioqKioqLwoJCQkJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoJCQkJKGZ1bmN0aW9uKCl7CgoJCQkJCXZhciBzbGlkZXMgPSBbXTsKCgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzAwLTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzAxLTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzAyLTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzAzLTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzA0LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzA1LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzA2LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzA3LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzA4LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzA5LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzEwLTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzExLTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzEyLTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzEzLTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzE0LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzE1LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzE2LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzE3LTIwMjAtMDMtMDYtMTEyMi5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgoJCQkJCWlmKHNsaWRlcy5sZW5ndGggPiAwKXsKCQkJCQkJc2xpZGVzLnNoaWZ0KCk7CgkJCQkJfQoKCQkJCQlmdW5jdGlvbiBpbWdQcmVsb2FkKHNsaWRlcywgaWR4LCBjYWxsYmFjayl7CgoJCQkJCQl2YXIgdGVtcEltZyA9IG5ldyBJbWFnZSgpOwoJCQkJCQl2YXIgT2JqU2xpZGUgPSBzbGlkZXNbaWR4XTsKCQkJCQkJaWYoT2JqU2xpZGUgPT0gbnVsbCl7CgkJCQkJCQlyZXR1cm47CgkJCQkJCX0KCgkJCQkJCSQodGVtcEltZykubG9hZChmdW5jdGlvbigpewoJCQkJCQkJdmFyIG5ld1NsaWRlID0gJzxkaXYgY2xhc3M9InNsaWRlIiBkYXRhLWN5Y2xlLXBhZ2VyLXRlbXBsYXRlPSI8ZGl2PjxkaXY+PGltZyBhbHQ9XCcnK09ialNsaWRlLmFsdCsnXCcgc3JjPVwnJytPYmpTbGlkZS5zcmMrJ1wnLz48L2Rpdj48L2Rpdj4iPjxpbWcgaXRlbXByb3A9ImltYWdlIiBzcmM9IicrT2JqU2xpZGUuc3JjKyciIGFsdD0iJytPYmpTbGlkZS5hbHQrJyIvPjxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj48L2Rpdj4nOwoJCQkJCQkJJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jeWNsZSgnYWRkJywgbmV3U2xpZGUpOwoJCQkJCQkJSW1hZ2VBdXRvU2NhbGUoJCgnLnRodW1icyBpbWcnKSk7CgkJCQkJCQkvLyAgZ28gbmV4dAoJCQkJCQkJaWYgKGlkeCArIDEgPCBzbGlkZXMubGVuZ3RoKXsKCQkJCQkJCQlpbWdQcmVsb2FkKHNsaWRlcywgaWR4ICsgMSwgY2FsbGJhY2spOwoJCQkJCQkJfQoJCQkJCQkJZWxzZSB7CgkJCQkJCQkJaWYgKGNhbGxiYWNrICE9IG51bGwpewoJCQkJCQkJCQljYWxsYmFjaygpOwoJCQkJCQkJCX0KCQkJCQkJCX0KCQkJCQkJfSk7CgoJCQkJCQl0ZW1wSW1nLnNyYyA9IE9ialNsaWRlLnNyYzsKCQkJCQl9CgoJCQkJCUFkZExvYWRFdmVudChmdW5jdGlvbigpewoKCQkJCQkJaW1nUHJlbG9hZChzbGlkZXMsMCwgZnVuY3Rpb24oKXsKCgkJCQkJCQkkKCcudGh1bWJzJykuYWRkQ2xhc3MoJ2N5Y2xlLXBhZ2VyJyk7CgkJCQkJCQlJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzIGltZycpKTsKCgkJCQkJCQlpZiAoJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aCA+IDQpIHsKCgkJCQkJCQkJJCgnLmN5Y2xlJykuYWRkQ2xhc3MoJ2pjYXJvdXNlbC1tYW4nKTsKCQkJCQkJCQkkKCcuamNhcm91c2VsLW1hbicpLmpjYXJvdXNlbCh7CgkJCQkJCQkJCXZlcnRpY2FsOiB0cnVlCgkJCQkJCQkJfSk7CgoJCQkJCQkJCS8qKioqQ09OVFJPTCBCVE4gTkVYVCBQUkVWIENBUk9VU0VMKioqKi8KCgkJCQkJCQkJJCgnLmpjYXJvdXNlbC1wcmV2Jykub24oJ2pjYXJvdXNlbGNvbnRyb2w6YWN0aXZlJywgZnVuY3Rpb24oKSB7CgkJCQkJCQkJCSQodGhpcykucmVtb3ZlQ2xhc3MoJ2luYWN0aXZlJyk7CgkJCQkJCQkJfSkKCQkJCQkJCQkub24oJ2pjYXJvdXNlbGNvbnRyb2w6aW5hY3RpdmUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJJCh0aGlzKS5hZGRDbGFzcygnaW5hY3RpdmUnKTsKCQkJCQkJCQl9KQoJCQkJCQkJCS5qY2Fyb3VzZWxDb250cm9sKHsKCQkJCQkJCQkJdGFyZ2V0OiAnLT0xJwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkkKCcuamNhcm91c2VsLW5leHQnKS5vbignamNhcm91c2VsY29udHJvbDphY3RpdmUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJJCh0aGlzKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTsKCQkJCQkJCQl9KQoJCQkJCQkJCS5vbignamNhcm91c2VsY29udHJvbDppbmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLmFkZENsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLmpjYXJvdXNlbENvbnRyb2woewoJCQkJCQkJCQl0YXJnZXQ6ICcrPTEnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCS8qKioqQ09OVFJPTCBDQVJPVVNFTCBWSUEgU0xJREUgRElBUE9SQU1BKioqKi8KCgkJCQkJCQkJJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5vbignY3ljbGUtaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbiggZXZlbnQsIG9wdHMgKSB7CgkJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5yZW1vdmVDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJykuZXEob3B0cy5jdXJyU2xpZGUpLmFkZENsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKTsKCQkJCQkJCQl9KTsKCgkJCQkJCQkJJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5vbignY3ljbGUtYmVmb3JlJywgZnVuY3Rpb24oIGV2ZW50LCBvcHRzICkgewoJCQkJCQkJCQkkKCcudGh1bWJzID4gZGl2JykucmVtb3ZlQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpLmVxKG9wdHMubmV4dFNsaWRlKS5hZGRDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJyk7CgkJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbWFuJykuamNhcm91c2VsKCdzY3JvbGwnLCBvcHRzLm5leHRTbGlkZSk7CgkJCQkJCQkJfSk7CgoJCQkJCQkJCS8qKioqU0VUIFVQIENBUk9VU0VMIEFORCBISVMgQ0hJTERSRU4gV0lEVEgqKioqLwoKCQkJCQkJCQl2YXIgeCA9ICQoJy5qY2Fyb3VzZWwtbWFuJykuaGVpZ2h0KCkvNDsKCQkJCQkJCQl2YXIgeSA9ICQoJy50aHVtYnMgPiBkaXYnKS5sZW5ndGg7CgoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbWFuIC50aHVtYnMnKS5jc3MoewoJCQkJCQkJCQknaGVpZ2h0Jzp4KnkrJ3B4JwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkkKCcudGh1bWJzID4gZGl2JykuY3NzKHsKCQkJCQkJCQkJJ2hlaWdodCc6MTAwL3krJyUnCgkJCQkJCQkJfSk7CgoJCQkJCQkJfQoKCQkJCQkJfSk7CgkJCQkJfSk7CgoJCQkJfSkoKTsKCiAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgkJCQkvKioqKioqKioqKioqKklOU1RBTkNFIE9QRU5TV0lQRSBERVRBSUwgUEhPVE8qKioqKioqKioqKioqKioqKioqKiovCgkJCQkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgICAgICAgICAgICAgICB2YXIgb3BlblBob3RvU3dpcGUgPSBmdW5jdGlvbiAoaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcHN3cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHN3cCcpWzBdOwoKICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSBbXTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzc2MC83NjBfMDAtMjAyMC0wMy0wNi0xMTIyLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzYwLzc2MF8wMS0yMDIwLTAzLTA2LTExMjIuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzAyLTIwMjAtMDMtMDYtMTEyMi5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzc2MC83NjBfMDMtMjAyMC0wMy0wNi0xMTIyLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzYwLzc2MF8wNC0yMDIwLTAzLTA2LTExMjIuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzA1LTIwMjAtMDMtMDYtMTEyMi5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzc2MC83NjBfMDYtMjAyMC0wMy0wNi0xMTIyLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzYwLzc2MF8wNy0yMDIwLTAzLTA2LTExMjIuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzA4LTIwMjAtMDMtMDYtMTEyMi5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzc2MC83NjBfMDktMjAyMC0wMy0wNi0xMTIyLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzYwLzc2MF8xMC0yMDIwLTAzLTA2LTExMjIuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzExLTIwMjAtMDMtMDYtMTEyMi5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzc2MC83NjBfMTItMjAyMC0wMy0wNi0xMTIyLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzYwLzc2MF8xMy0yMDIwLTAzLTA2LTExMjIuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzE0LTIwMjAtMDMtMDYtMTEyMi5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzc2MC83NjBfMTUtMjAyMC0wMy0wNi0xMTIyLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzYwLzc2MF8xNi0yMDIwLTAzLTA2LTExMjIuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy83NjAvNzYwXzE3LTIwMjAtMDMtMDYtMTEyMi5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpJyx3OicnLGg6Jyd9KTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3Rvcnk6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgYmdPcGFjaXR5OicwLjk1JywKICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VPblNjcm9sbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dBbmltYXRpb25EdXJhdGlvbjogMzAwLAogICAgICAgICAgICAgICAgICAgICAgICBoaWRlQW5pbWF0aW9uRHVyYXRpb246IDMwMCwKICAgICAgICAgICAgICAgICAgICAgICAgLy9jYXB0aW9uRWw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBzaGFyZUVsOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgcGluY2hUb0Nsb3NlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VPblZlcnRpY2FsRHJhZzogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICB2YXIgZ2FsbGVyeSA9IG5ldyBQaG90b1N3aXBlKHBzd3BFbGVtZW50LCBQaG90b1N3aXBlVUlfRGVmYXVsdCwgaXRlbXMsIG9wdGlvbnMpOwoKICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5LmluaXQoKTsKICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5LmdvVG8oaW5kZXgpOwoKICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5Lmxpc3RlbignY2xvc2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jeWNsZSgncmVzdW1lJyk7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLm9uKCAnY2xpY2snLCdkaXYnLCBmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkKHRoaXMpLmRhdGEoImN5Y2xlLm9wdHMiKS5zbGlkZU51bSAtMTsKCiAgICAgICAgICAgICAgICAgICAgb3BlblBob3RvU3dpcGUoaW5kZXgpOwoKICAgICAgICAgICAgICAgICAgICAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKCdwYXVzZScpOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgLy9JTlNUQU5DRSBESUFQT1JBTUEgRklDSEUgQklFTgogICAgICAgICAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnLnRodW1icyBpbWcnKSk7CgogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgdyA9ICQoJy5kaWFwb3JhbWFfcHJvZmlsJykud2lkdGgoKS8xLjU7CgogICAgICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6dysncHgnCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICQoJy50aHVtYnNfY29udGFpbmVyJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6dysncHgnCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgfSkoKTsKCgkJCQlpZiAoJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aCA+IDQpIHsKCgkJCQkJLyoqKipTRVQgVVAgQ0FST1VTRUwgQU5EIEhJUyBDSElMRFJFTiBXSURUSCoqKiovCgoJCQkJCXZhciB4ID0gJCgnLmpjYXJvdXNlbC1tYW4nKS5oZWlnaHQoKS80OwoJCQkJCXZhciB5ID0gJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aDsKCgkJCQkJJCgnLmpjYXJvdXNlbC1tYW4gLnRodW1icycpLmNzcyh7CgkJCQkJCSdoZWlnaHQnOngqeSsncHgnCgkJCQkJfSk7CgoJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5jc3MoewoJCQkJCQknaGVpZ2h0JzoxMDAveSsnJScKCQkJCQl9KTsKCgkJCQl9CgogICAgICAgICAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnLnRodW1icyA+IGRpdiA+IGEgPiBpbWcnKSk7CgogICAgICAgICAgICB9KTsKCiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGRpdiBjbGFzcz0iYW5ub25jZV9kZXRhaWwiPgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgIDxoMiBpdGVtc2NvcGUgaXRlbXByb3A9ImF2YWlsYWJsZUF0T3JGcm9tIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUGxhY2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPkxvY2FsaXNhdGlvbiA6IDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzIj5QQVJJUyAxNDwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UXVhcnRpZXIgOiA8c3BhbiBpdGVtcHJvcD0iYWRkcmVzcyI+QWzDqXNpYTwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgPHAgaXRlbXByb3A9ImRlc2NyaXB0aW9uIiBjbGFzcz0iZGVzY3JpcHRpZiI+TCdhZ2VuY2UgTEFSR0lFUiB2b3VzIHByb3Bvc2UgZGFucyBsZSBxdWFydGllciBBbMOpc2lhLCDDoCBwcm94aW1pdMOpIGRlcyB0cmFuc3BvcnRzIGV0IGRlcyBjb21tZXJjZXMsIGRhbnMgdW4gdHLDqHMgYmVsIGltbWV1YmxlIGRlIHR5cGUgaGF1c3NtYW5uaWVuIGRhdGFudCBkZXMgYW5uw6llcyAxOTAwLCBhdSA1w6htZSDDqXRhZ2UgYXZlYyBhc2NlbnNldXIsIHVuIGJlbCBhcHBhcnRlbWVudCBmYW1pbGlhbCBkZSA2IHBpw6hjZXMgZXQgZGUgMTY4bcKyIGNvbXByZW5hbnQgOiB1bmUgZ2FsZXJpZSBkJ2VudHLDqWUsIHVuZSBiZWxsZSBwacOoY2UgZGUgcsOpY2VwdGlvbiBkb25uYW50IHN1ciB1biBiYWxjb24gY8O0dMOpIHJ1ZSwgdW5lIHN1aXRlIHBhcmVudGFsZSBhdmVjIHNhIHNhbGxlIGRlIGJhaW5zIGF0dGVuYW50ZSBhZG9zc8OpZSBhdSBzw6lqb3VyLCB1bmUgc2FsbGUgw6AgbWFuZ2VyIGRlIDIybcKyIGRvbm5hbnQgc3VyIGphcmRpbiBhcmJvcsOpLCB1bmUgY3Vpc2luZSBkb25uYW50IHN1ciBjb3VyLCB1biBjb3Vsb2lyIHF1aSBkZXNzZXJ0IGxlcyAzIGF1dHJlcyBjaGFtYnJlcyBkb25uYW50IGPDtHTDqSBqYXJkaW4gYXZlYyBkZXMgbm9tYnJldXggcmFuZ2VtZW50cywgdW5lIHNhbGxlIGRlIGRvdWNoZSwgdW5lIGJ1YW5kZXJpZSwgZGV1eCBXQyBzw6lwYXLDqXMuIEwnYXBwYXJ0ZW1lbnQgbOKAmW9mZnJlIGxlIGNoYXJtZSBkZSBsJ2FuY2llbiAocGFycXVldCwgbW91bHVyZXMsIGNoZW1pbsOpZXMpOyBsYSBoYXV0ZXVyIHNvdXMgcGxhZm9uZCBlc3QgZGUgMyBtw6h0cmVzLiBVbmUgY2F2ZSBjb21wbMOodGUgY2UgYmllbi4gTm91cyB2b3VzIGluZm9ybW9ucyBxdWUgY29uZm9ybcOpbWVudCDDoCBs4oCZYXJ0aWNsZSBMLjU2MS01IGR1IENvZGUgTW9uw6l0YWlyZSBldCBGaW5hbmNpZXIsIHVuZSBwacOoY2UgZOKAmWlkZW50aXTDqSB2b3VzIHNlcmEgZGVtYW5kw6llIGF2YW50IGNoYXF1ZSB2aXNpdGUuIExlIHN5bmRpY2F0IGRlcyBjb3Byb3ByacOpdGFpcmVzIG5lIGZhaXQgbOKAmW9iamV0IGTigJlhdWN1bmUgcHJvY8OpZHVyZSBtZW7DqWUgc3VyIGxlcyBmb25kZW1lbnRzIGRlcyBhcnRpY2xlcyAyOS0xQSBldCAyOS0xIGRlIGxhIGxvaSBkdSAxMCBqdWlsbGV0IDE5NjUgZXQgZGUgbOKAmWFydGljbGUgTC42MTUtNiBkdSBjb2RlIGRlIGxhIGNvbnN0cnVjdGlvbiBldCBkZSBsJ2hhYml0YXRpb24uPC9wPgogICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IEFycmF5KCdDZXR0ZSBhbm5vbmNlIGEgw6l0w6kgYWpvdXTDqWUgw6Agdm90cmUgc8OpbGVjdGlvbi4nLCdDZXR0ZSBhbm5vbmNlIGVzdCBkw6lqw6AgZGFucyB2b3RyZSBzw6lsZWN0aW9uLicpOwogICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9ybS1hbWkiIG5hbWU9ImNvbnRhY3RfYW1pIiBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iL2ZyL2FtaS8iPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlkYmllbiIgaWQ9ImlkYmllbiIgdmFsdWU9Ijc2MCIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiB2YWx1ZT0iTEEyLTc4MyIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3VybCIgaWQ9ImJpZW5fdXJsIiB2YWx1ZT0iL2ZyL3ZlbnRlLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbHMtcGFydGljdWxpZXItcGFyaXMtbGFyZ2llci9yZWYtbGEyLTc4My92ZW50ZS1hcHBhcnRlbWVudC02LXBpZWNlcy00LWNoYW1icmVzLXBhcmlzLTc1MDE0LyIgLz4KCQkJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJub19yZWRpcmVjdCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRldGFpbF9saW5rX291dGlscyI+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWpvdXRfc2VsZWN0aW9uIiBkYXRhLWJpZW5pZD0iNzYwIiBocmVmPSIjIiB0aXRsZT0iQWpvdXRlciDDoCBtYSBzw6lsZWN0aW9uIj5Bam91dGVyIMOgIG1hIHPDqWxlY3Rpb248L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJlbnZvaV9hbWkiIGhyZWY9IiMiIHRpdGxlPSJFbnZveWVyIMOgIHVuIGFtaSI+RW52b3llciDDoCB1biBhbWk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCQkJCQk8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzaGFyZV9idXR0b25zIGFMaWtlIiB0aXRsZT0iUGFydGFnZXIgY2V0dGUgb2ZmcmUgc3VyIGxlcyByw6lzZWF1eCBzb2NpYXV4Ij5QYXJ0YWdlciBjZSBsaWVuPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaW5rX2ltcHJlc3Npb24iIHRpdGxlPSJJbXByaW1lciBsZSBkw6l0YWlsIGRlIGNlIGJpZW4iIGhyZWY9Ii9mci9pbXByZXNzaW9uL2RldGFpbHMvNzYwLyIgdGFyZ2V0PSJfYmxhbmsiPkltcHJpbWVyPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idHJpZ2dlcl9tZW50aW9uIiBocmVmPSIvZnIvbWVudGlvbnMtbGVnYWxlcy1hZ2VuY2UtbGFyZ2llci8iIHRpdGxlPSJJbmZvcm1hdGlvbnMganVyaWRpcXVlcyBMYXJnaWVyIGFnZW5jZSBkZXMgQW1iYXNzYWRlcyI+Q29uc3VsdGVyIGxlIGJhcsOobWUgZGVzIGhvbm9yYWlyZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnRlcmxvY3V0ZXVyIiBpdGVtcHJvcD0ic2VsbGVyIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1JlYWxFc3RhdGVBZ2VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+Vm90cmUgaW50ZXJsb2N1dGV1cjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9ImxvY2F0aW9uIj4zMiBCb3VsZXZhcmQgTWFsZXNoZXJiZXMgLSA3NTAwOCBQYXJpczwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlTDqWwgOiA8c3BhbiBpdGVtcHJvcD0idGVsZXBob25lIj4wMSA0MiA2NSAxOCA4Mzwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxmb3JtIGlkPSJhbm5vbmNlX2Zvcm0iIGNsYXNzPSJ2YWxpZGF0ZV9mb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2ZyL3ZlbnRlLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbHMtcGFydGljdWxpZXItcGFyaXMtbGFyZ2llci9yZWYtbGEyLTc4My92ZW50ZS1hcHBhcnRlbWVudC02LXBpZWNlcy00LWNoYW1icmVzLXBhcmlzLTc1MDE0LyNjb250YWN0X2Fubm9uY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGVnZW5kPkRlbWFuZGUgZGUgcmVuc2VpZ25lbWVudHM8L2xlZ2VuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJob25leSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0id2Vic2l0ZSI+VmV1aWxsZXogbGFpc3NlciBsYSB2YWxldXIgaW5pdGlhbGUgZGUgY2UgY2hhbXA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ3ZWJzaXRlIiBpZD0id2Vic2l0ZSIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fdHdvcm93cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsYXN0X25hbWUiPk5vbSA8c3Bhbj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9Imxhc3RfbmFtZSIgdHlwZT0idGV4dCIgbmFtZT0ibGFzdF9uYW1lIiBjbGFzcz0icmVxdWlyZWQiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0ibGFzdF9uYW1lIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZmlyc3RfbmFtZSI+UHLDqW5vbSA8c3Bhbj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImZpcnN0X25hbWUiIHR5cGU9InRleHQiIG5hbWU9ImZpcnN0X25hbWUiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0iZmlyc3RfbmFtZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZW1haWwiPkVtYWlsIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iZW1haWwiIHR5cGU9InRleHQiIG5hbWU9ImVtYWlsIiB2YWx1ZT0iIiBjbGFzcz0icmVxdWlyZWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0iZW1haWwiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwaG9uZSI+VMOpbMOpcGhvbmU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJwaG9uZSIgdHlwZT0idGV4dCIgbmFtZT0icGhvbmUiIHZhbHVlPSIiIGNsYXNzPSJyZXF1aXJlZCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dGFyZWEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibGFiZWxfbWVzc2FnZS1hbm5vbmNlIiBmb3I9Im1lc3NhZ2UiPk1lc3NhZ2UgPHNwYW4+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0ibWVzc2FnZSIgbmFtZT0ibWVzc2FnZSIgY2xhc3M9InJlcXVpcmVkIj48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJtZXNzYWdlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImhvbmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJqYzZ2MWI3YXZucjFvYTMwbjgycmpldnE2NiI+VmV1aWxsZXogbGFpc3NlciBsYSB2YWxldXIgaW5pdGlhbGUgZGUgY2UgY2hhbXA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJqYzZ2MWI3YXZucjFvYTMwbjgycmpldnE2NiIgaWQ9ImpjNnYxYjdhdm5yMW9hMzBuODJyamV2cTY2IiB2YWx1ZT0iamM2djFiN2F2bnIxb2EzMG44MnJqZXZxNjYiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpZCIgaWQ9ImlkIiB2YWx1ZT0iNzYwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYmllbl9yZWYiIGlkPSJiaWVuX3JlZiIgdmFsdWU9IkxBMi03ODMiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY2VfaWQiIGlkPSJhZ2VuY2VfaWQiIHZhbHVlPSIxIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3ViamVjdCIgaWQ9InN1YmplY3QiIHZhbHVlPSJDb250YWN0QW5ub25jZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iYm91dG9uIHN1Ym1pdCIgbmFtZT0ic2VuZF9lbWFpbCIgdHlwZT0ic3VibWl0IiB2YWx1ZT0iRW52b3llciIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgPGRpdiBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIiBjbGFzcz0icHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0icHJpY2UiIGNsYXNzPSJhbm5vbmNlX3ByaWNlIj5Qcml4IDogPHNwYW4+MSA4NDAgMDAwICZldXJvOyA8L3NwYW4+PC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlX2RldGFpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIEhvbm9yYWlyZXMgaW5jbHVzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlX2RldGFpbCB0YWxsTWFyZ2luIHNpemUiPjEgNzk1IDAwMCAmZXVybzsgSG9ub3JhaXJlcyBleGNsdXM8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZV9kZXRhaWwgc2l6ZSI+SG9ub3JhaXJlcyBkZSAyLDUxJSBUVEMgw6AgbGEgY2hhcmdlIGRlIGwnYWNxdcOpcmV1cjwvcD4KCgkJCQkJCTxwIGNsYXNzPSJwcmljZV9kZXRhaWwiPjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGgyPkTDqXRhaWxzPC9oMj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGV0YWlsX2xpc3RlIj4KICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9InR5cGVPZkdvb2QiIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgICAgICAgICAgICAgYXBwYXJ0ZW1lbnQKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5TdXJmYWNlIDogPHNwYW4gaXRlbXByb3A9IndpZHRoIj4xNjggbcKyPC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPk5vbWJyZSBkZSBwacOoY2VzIDogPHNwYW4+Njwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5Ob21icmUgZGUgY2hhbWJyZXMgOiA8c3Bhbj40PC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSA6IDxzcGFuPkxBMi03ODM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJjb3BybyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVuIGNvcHJvcHJpw6l0w6kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMzggbG90cwogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb250YW50IG1veWVuIGFubnVlbCBkZSBsYSBxdW90ZS1wYXJ0IGRlIGNoYXJnZXMgY291cmFudGVzIDo8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUgMzAwICZldXJvOwogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlcF9kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZ19kcGUiIHNyYz0iaHR0cHM6Ly93d3cuYWdlbmNlLXBsdXMubmV0L3NraW5zL19kZWZhdWx0L2xpYi9BZ2VuY2VQbHVzL3dzL2ltZ0RQRS5hc2h4P3ZhbHVlPTE3NiZzaXplPTIwNngyMTEmcGljdG89ZHBlX29tYnJlX3RyYW5zcGFyZW50IiBhbHQ9IkRpYWdub3N0aWMgZGUgcGVyZm9ybWFuY2Ugw6luZXJnw6l0aXF1ZSI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImxpbmtfYmFjayI+CiAgICAgICAgPC9kaXY+CiAgICA8L3NlY3Rpb24+CiAgICA8IS0tIFJvb3QgZWxlbWVudCBvZiBQaG90b1N3aXBlLiBNdXN0IGhhdmUgY2xhc3MgcHN3cC4gLS0+CiAgICA8ZGl2IGNsYXNzPSJwc3dwIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgIDwhLS0gQmFja2dyb3VuZCBvZiBQaG90b1N3aXBlLgogICAgICAgIEl0J3MgYSBzZXBhcmF0ZSBlbGVtZW50LCBhcyBhbmltYXRpbmcgb3BhY2l0eSBpcyBmYXN0ZXIgdGhhbiByZ2JhKCkuIC0tPgogICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2JnIj48L2Rpdj4KICAgICAgICA8IS0tIFNsaWRlcyB3cmFwcGVyIHdpdGggb3ZlcmZsb3c6aGlkZGVuLiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19zY3JvbGwtd3JhcCI+CiAgICAgICAgICAgIDwhLS0gQ29udGFpbmVyIHRoYXQgaG9sZHMgc2xpZGVzLgogICAgICAgICAgICAgICAgUGhvdG9Td2lwZSBrZWVwcyBvbmx5IDMgb2YgdGhlbSBpbiBET00gdG8gc2F2ZSBtZW1vcnkuCiAgICAgICAgICAgICAgICBEb24ndCBtb2RpZnkgdGhlc2UgMyBwc3dwX19pdGVtIGVsZW1lbnRzLCBkYXRhIGlzIGFkZGVkIGxhdGVyIG9uLiAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0gRGVmYXVsdCAoUGhvdG9Td2lwZVVJX0RlZmF1bHQpIGludGVyZmFjZSBvbiB0b3Agb2Ygc2xpZGluZyBhcmVhLiBDYW4gYmUgY2hhbmdlZC4gLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3VpIHBzd3BfX3VpLS1oaWRkZW4iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fdG9wLWJhciI+CiAgICAgICAgICAgICAgICAgICAgPCEtLSAgQ29udHJvbHMgYXJlIHNlbGYtZXhwbGFuYXRvcnkuIE9yZGVyIGNhbiBiZSBjaGFuZ2VkLiAtLT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19jb3VudGVyIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1jbG9zZSIgdGl0bGU9IkNsb3NlIChFc2MpIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1zaGFyZSIgdGl0bGU9IlNoYXJlIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1mcyIgdGl0bGU9IlRvZ2dsZSBmdWxsc2NyZWVuIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS16b29tIiB0aXRsZT0iWm9vbSBpbi9vdXQiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwhLS0gUHJlbG9hZGVyIGRlbW8gaHR0cDovL2NvZGVwZW4uaW8vZGltc2VtZW5vdi9wZW4veXlCV29SIC0tPgogICAgICAgICAgICAgICAgICAgIDwhLS0gZWxlbWVudCB3aWxsIGdldCBjbGFzcyBwc3dwX19wcmVsb2FkZXItLWFjdGl2ZSB3aGVuIHByZWxvYWRlciBpcyBydW5uaW5nIC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9faWNuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19wcmVsb2FkZXJfX2N1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19wcmVsb2FkZXJfX2RvbnV0Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3NoYXJlLW1vZGFsIHBzd3BfX3NoYXJlLW1vZGFsLS1oaWRkZW4gcHN3cF9fc2luZ2xlLXRhcCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2hhcmUtdG9vbHRpcCI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWFycm93LS1sZWZ0IiB0aXRsZT0iUHJldmlvdXMgKGFycm93IGxlZnQpIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWFycm93LS1yaWdodCIgdGl0bGU9Ik5leHQgKGFycm93IHJpZ2h0KSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19jYXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19jYXB0aW9uX19jZW50ZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAkKCcuYWpvdXRfc2VsZWN0aW9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CgogICAgICAgIHZhciBpZCA9ICQodGhpcykuYXR0cignZGF0YS1iaWVuaWQnKTsKCiAgICAgICAgbWFzZWxlY3Rpb24oJycsIGlkLCAnYWRkJywgZnVuY3Rpb24ocmV0b3VyKSB7CgogICAgICAgICAgICB2YXIgYW5pbV90aW1lb3V0OwogICAgICAgICAgICB2YXIgYW5pbTJfdGltZW91dDsKICAgICAgICAgICAgdmFyIHJlbW92ZV90aW1lb3V0OwoKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1fdGltZW91dCk7CiAgICAgICAgICAgIGNsZWFyVGltZW91dChhbmltMl90aW1lb3V0KTsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlbW92ZV90aW1lb3V0KTsKCiAgICAgICAgICAgIGlmIChyZXRvdXIpIHsKCiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBvbmNlJykuYXBwZW5kKCc8cD4nICsgbWVzc2FnZVswXSArICc8L3A+Jyk7CgogICAgICAgICAgICAgICAgdmFyIG5iX3NlbGVjdGlvbiA9IHBhcnNlSW50KCQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KCkpICsgMTsKICAgICAgICAgICAgICAgICQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KG5iX3NlbGVjdGlvbik7CgogICAgICAgICAgICAgICAgYW5pbV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgYW5pbTJfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ29uY2UnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjAwKTsKCiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICAgICAgfSwgMTAwKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBkb25lJykuYXBwZW5kKCc8cD4nICsgbWVzc2FnZVsxXSArICc8L3A+Jyk7CgogICAgICAgICAgICAgICAgYW5pbV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgYW5pbTJfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2RvbmUnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjAwKTsKCiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgfSk7CgoJJCgnLmVudm9pX2FtaScpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKCQkkKCcuZm9ybS1hbWknKS5zdWJtaXQoKTsKCQlyZXR1cm4gZmFsc2U7Cgl9KTsKCgkkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewoJCSQoJy5zaGFyZV9idXR0b25zJykub24oJ2NsaWNrJyxmdW5jdGlvbigpewoJCQl2YXIgdm9pbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCQkJJCh2b2lsZSkuYXBwZW5kVG8oJ2JvZHknKS5hZGRDbGFzcygnYm94X3NoYXJlJyk7CgkJCXZhciBuZXdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgkJCXZhciBuZXdOb2RlMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJCQl2YXIgdmVydGljYWxfY2VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwoJCQl2YXIgdmVydGljYWxfY2VudGVyMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKCQkJdmFyIGNsb3NlX3NwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CgkJCSQobmV3Tm9kZSkuYXBwZW5kVG8odm9pbGUpLmFwcGVuZCgnPGgxPlBhcnRhZ2VyIGNlIGxpZW48L2gxPicpOwoJCQkkKG5ld05vZGUyKS5hcHBlbmRUbyhuZXdOb2RlKS5hdHRyKCdpZCcsJ3NoYXJlbWUnKS5hZGRDbGFzcygnc2hhcnJyZScpOwoJCQkkKHZlcnRpY2FsX2NlbnRlcikuYXBwZW5kVG8odm9pbGUpLmFkZENsYXNzKCd2ZXJ0aWNhbF9jZW50ZXInKTsKCQkJJChjbG9zZV9zcGFuKS5hcHBlbmRUbyhuZXdOb2RlKS5hZGRDbGFzcygnY2xvc2Vfc2hhcmUgaWNvX2Nsb3NlJyk7CgkJCSQodmVydGljYWxfY2VudGVyMikuYXBwZW5kVG8obmV3Tm9kZSkuYWRkQ2xhc3MoJ3ZlcnRpY2FsX2NlbnRlcicpOwoJCQkkKCcuYm94X3NoYXJlJykuZmFkZUluKDMwMCk7CgoJCQkkKCcjc2hhcmVtZScpLnNoYXJycmUoewoJCQkJc2hhcmU6IHsKCQkJCQl0d2l0dGVyOiB0cnVlLAoJCQkJCWZhY2Vib29rOiB0cnVlLAoJCQkJCWdvb2dsZVBsdXM6IHRydWUsCgkJCQkJcGludGVyZXN0OnRydWUKCQkJCX0sCiAgICAgICAgICAgICAgICBidXR0b25zOiB7CiAgICAgICAgICAgICAgICAgICAgcGludGVyZXN0OiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhOiAnaHR0cHM6Ly93d3cubGFyZ2llci5mci8nLnJlcGxhY2UoL1wvJC8sICcnKSArICcvJyArICcvZGF0YXMvYmllbnMvdGh1bWJzLzc2MC83NjBfMDAtMjAyMC0wMy0wNi0xMTIyLmpwZycucmVwbGFjZSgvXlwvLywgJycpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKCQkJCXRlbXBsYXRlOiAgICc8dWw+XG5cCgkJCQkJCQkJPGxpPlxuXAoJCQkJCQkJCQk8YSBocmVmPSIjIiBjbGFzcz0iZmFjZWJvb2siPlxuXAoJCQkJCQkJCQkJPHNwYW4gY2xhc3M9Imljb19mYWNlYm9vayI+PC9zcGFuPlxuXAoJCQkJCQkJCQkJPHNwYW4+RmFjZWJvb2s8L3NwYW4+XG5cCgkJCQkJCQkJCTwvYT5cblwKCQkJCQkJCQk8L2xpPlxuXAoJCQkJCQkJCTxsaT5cblwKCQkJCQkJCQkJPGEgaHJlZj0iIyIgY2xhc3M9InR3aXR0ZXIiPlxuXAoJCQkJCQkJCQkJPHNwYW4gY2xhc3M9Imljb190d2l0dGVyIj48L3NwYW4+XG5cCgkJCQkJCQkJCQk8c3Bhbj5Ud2l0dGVyPC9zcGFuPlxuXAoJCQkJCQkJCQk8L2E+XG5cCgkJCQkJCQkJPC9saT5cblwKCQkJCQkJCQk8bGk+XG5cCgkJCQkJCQkJCTxhIGhyZWY9IiMiIGNsYXNzPSJnb29nbGVwbHVzIj5cblwKCQkJCQkJCQkJCTxzcGFuIGNsYXNzPSJpY29fZ29vZ2xlcGx1cyI+PC9zcGFuPlxuXAoJCQkJCQkJCQkJPHNwYW4+R29vZ2xlICs8L3NwYW4+XG5cCgkJCQkJCQkJCTwvYT5cblwKCQkJCQkJCQk8L2xpPlxuXAoJCQkJCQkJCTxsaT5cblwKCQkJCQkJCQkJPGEgaHJlZj0iIyIgY2xhc3M9InBpbnRlcmVzdCI+XG5cCgkJCQkJCQkJCQk8c3BhbiBjbGFzcz0iaWNvX3BpbnRlcmVzdCI+PC9zcGFuPlxuXAoJCQkJCQkJCQkJPHNwYW4+UGludGVyZXN0PC9zcGFuPlxuXAoJCQkJCQkJCQk8L2E+XG5cCgkJCQkJCQkJPC9saT5cblwKCQkJCQkJCTwvdWw+JywKCQkJCXVybEN1cmw6ICcnLCAgICAvLyAgZGlzYWJsZSBzaGFycnJlLnBocAoJCQkJZW5hYmxlSG92ZXI6IGZhbHNlLAoJCQkJZW5hYmxlVHJhY2tpbmc6IGZhbHNlLAoJCQkJcmVuZGVyOiBmdW5jdGlvbihhcGksIG9wdGlvbnMpewoJCQkJCSQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcudHdpdHRlcicsIGZ1bmN0aW9uKCkgewoJCQkJCQl0cnkgewoJCQkJCQkJYXBpLm9wZW5Qb3B1cCgndHdpdHRlcicpOwoJCQkJCQl9CgkJCQkJCWZpbmFsbHkgewoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQl9CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9KTsKCQkJCQkkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLmZhY2Vib29rJywgZnVuY3Rpb24oKSB7CgkJCQkJCXRyeSB7CgkJCQkJCQlhcGkub3BlblBvcHVwKCdmYWNlYm9vaycpOwoJCQkJCQl9CgkJCQkJCWZpbmFsbHkgewoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQl9CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9KTsKCQkJCQkkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLmdvb2dsZXBsdXMnLCBmdW5jdGlvbigpIHsKCQkJCQkJdHJ5IHsKCQkJCQkJCWFwaS5vcGVuUG9wdXAoJ2dvb2dsZVBsdXMnKTsKCQkJCQkJfQoJCQkJCQlmaW5hbGx5IHsKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfSk7CgkJCQkJJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy5waW50ZXJlc3QnLCBmdW5jdGlvbigpIHsKCQkJCQkJdHJ5IHsKCQkJCQkJCWFwaS5vcGVuUG9wdXAoJ3BpbnRlcmVzdCcpOwoJCQkJCQl9CgkJCQkJCWZpbmFsbHkgewoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQl9CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9KTsKCQkJCX0KCQkJfSk7CgoJCQkkKCdib2R5LGh0bWwnKS5jc3MoewoJCQkJJ292ZXJmbG93JzonaGlkZGVuJwoJCQl9KTsKCgkJCSQoJy5jbG9zZV9zaGFyZScpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKCgkJCQkkKCcuYm94X3NoYXJlJykuZmFkZU91dCgzMDApOwoKCQkJCSQoJ2JvZHksaHRtbCcpLmNzcyh7CgkJCQkJJ292ZXJmbG93JzondmlzaWJsZScKCQkJCX0pOwoJCQkJJCgnLmJveF9zaGFyZScpLnJlbW92ZSgpOwoJCQl9KTsKCgkJCXJldHVybiBmYWxzZTsKCQl9KTsKCX0pOwoKICAgIDwvc2NyaXB0PgoKICAgIDxmb290ZXI+CiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl90b3AiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2dvRm9vdGVyIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci8iIHRpdGxlPSJBZ2VuY2UgTGFyZ2llciBJbW1vYmlsaWVyIGRlIFByZXN0aWdlIGRhbnMgbGUgOGUgZXQgT3Vlc3QgUGFyaXNpZW4iPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvbG9nby5wbmciIGFsdD0iQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMgLSBBY2hhdCBhcHBhcnRlbWVudHMgcGFyaXMgOMOobWUiPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWdlbmNlc19mb290ZXIiPgogICAgICAgICAgICAgICAgPGEgaXRlbXNjb3BlPSJpdGVtc2NvcGUiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9SZWFsRXN0YXRlQWdlbnQiIGhyZWY9Ii9mci9hZ2VuY2UtaW1tb2JpbGllcmUtcHJlc3RpZ2UtbGFyZ2llci1wYXJpcy8iIHRpdGxlPSJBZ2VuY2VzIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIHVuZSBIaXN0b2lyZSBQYXJpc2llbm5lIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnJhbmQiIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzPC9zcGFuPjxzcGFuIGNsYXNzPSJ0aXJldCI+Jm5ic3A7LSZuYnNwOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibG9jYXRpb24iPjMyIEJvdWxldmFyZCBNYWxlc2hlcmJlcyZuYnNwOwogICAgICAgICAgICAgICAgICAgIDc1MDA4Jm5ic3A7UGFyaXM8c3BhbiBjbGFzcz0idGlyZXQiPiZuYnNwOy0mbmJzcDs8L3NwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPjAxIDQyIDY1IDE4IDgzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPGEgaXRlbXNjb3BlPSJpdGVtc2NvcGUiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9SZWFsRXN0YXRlQWdlbnQiIGhyZWY9Ii9mci9hZ2VuY2UtaW1tb2JpbGllcmUtcHJlc3RpZ2UtbGFyZ2llci1wYXJpcy8iIHRpdGxlPSJBZ2VuY2VzIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIHVuZSBIaXN0b2lyZSBQYXJpc2llbm5lIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnJhbmQiIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzPC9zcGFuPjxzcGFuIGNsYXNzPSJ0aXJldCI+Jm5ic3A7LSZuYnNwOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibG9jYXRpb24iPjcxLCBydWUgZGUgbGEgUG9tcGUmbmJzcDsKICAgICAgICAgICAgICAgICAgICA3NTExNiZuYnNwO1BhcmlzPHNwYW4gY2xhc3M9InRpcmV0Ij4mbmJzcDstJm5ic3A7PC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0idGVsZXBob25lIj4wMSA4NiA5NSAyMyA3Njwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGNsYXNzPSJtZW50aW9uc19mb290ZXIiIGhyZWY9Imh0dHBzOi8vbS5sYXJnaWVyLmZyLyZtb2JpbGU9MSIgdGl0bGU9IlNpdGUgbW9iaWxlIj5TaXRlIG1vYmlsZTwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InNlbyI+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzb2NpYWxMaW5rcyI+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImZhY2Vib29rIiBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vTGFyZ2llci1BZ2VuY2UtRGVzLUFtYmFzc2FkZXMtUGFyaXMtMTQ5MjQxMjc5MDk5NjgzOC8iIHRpdGxlPSJGYWNlYm9vayAtIEFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzLCBBY2hhdCBhcHBhcnRlbWVudHMgcGFyaXMgOMOobWUiPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ0d2l0dGVyIiBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2xhcmdpZXJhZ2VuY2UiIHRpdGxlPSJUd2l0dGVyIC0gQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMsIEFnZW5jZSBpbW1vYmlsacOocmUgZGUgcHJlc3RpZ2UgNzUwMDggcGFyaXMiPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJpbnN0YWdyYW0iIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vbGFyZ2llcmFnZW5jZS8iIHRpdGxlPSJJbnN0YWdyYW0gLSBBZ2VuY2UgTGFyZ2llciAtIEFnZW5jZSBkZXMgQW1iYXNzYWRlcywgQXBwYXJ0ZW1lbnRzIG1haXNvbnMgaMO0dGVscyBwYXJ0aWN1bGllcnMgcGFyaXMgNzUiPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzEiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci8iIHRpdGxlPSJBZ2VuY2UgTGFyZ2llciBJbW1vYmlsaWVyIGRlIFByZXN0aWdlIGRhbnMgbGUgOGUgZXQgT3Vlc3QgUGFyaXNpZW4iPkFjY3VlaWw8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvYWdlbmNlLWltbW9iaWxpZXJlLXByZXN0aWdlLWxhcmdpZXItcGFyaXMvIiB0aXRsZT0iQWdlbmNlcyBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyB1bmUgSGlzdG9pcmUgUGFyaXNpZW5uZSI+RGVwdWlzIDE4NTk8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci92ZW50ZS1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWxzLXBhcnRpY3VsaWVyLXBhcmlzLWxhcmdpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iSW1tb2JpbGllciBlbiBWZW50ZSBhdmVjIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIj5Ob3MgYmllbnM8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci92ZW5kcmUtZXN0aW1hdGlvbi1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWxzLXBhcnRpY3VsaWVycy1wYXJpcy8iIHRpdGxlPSJWZW5kcmUgdm90cmUgYmllbiBzdXIgUGFyaXMgZXQgw45sZSBkZSBGcmFuY2UiPlZlbmRyZSBhdmVjIExhcmdpZXI8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9hY3F1ZXJpci1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWwtcGFydGljdWxpZXItcGFyaXMvIiB0aXRsZT0iQWNoZXRlciB2b3RyZSBiaWVuIHN1ciBQYXJpcyBldCDDj2xlIGRlIEZyYW5jZSI+QWNxdcOpcmlyIGF2ZWMgTGFyZ2llcjwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ic2VvMiI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL21hLXNlbGVjdGlvbi1pbW1vYmlsaWVyLWxhcmdpZXItcGFyaXMvIiB0aXRsZT0iU8OpbGVjdGlvbm5lciBhbm5vbmNlIGltbW9iaWxpw6hyZSI+TWEgc8OpbGVjdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9leHBlcnRpc2UtaW1tb2JpbGllci1wYXJpcy1sYXJnaWVyLyIgdGl0bGU9IkV4cGVydGlzZXIgdm90cmUgYmllbiBQYXJpcyBldCDDj2xlIGRlIEZyYW5jZSI+RXhwZXJ0aXNlIExhcmdpZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvYWN0dWFsaXRlcy1pbW1vYmlsaWVyLXBhcmlzLWxhcmdpZXIvIiB0aXRsZT0iTOKAmWFjdHVhbGl0w6kgTGFyZ2llciI+QWN0dWFsaXTDqXMgTGFyZ2llcjwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzMiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci92ZW50ZS1hY2hhdC1hcHBhcnRlbWVudHMtcGFyaXNpZW5zLXBhcmlzLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkFwcGFydGVtZW50cyBQYXJpc2llbnMgZW4gdmVudGUgcGFyIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIj5BcHBhcnRlbWVudHMgUGFyaXNpZW5zPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3ZlbnRlLXByb3ByaWV0ZXMtbWFpc29ucy1ob3RlbHMtcGFydGljdWxpZXItY2hhdGVhdXgtbGFyZ2llci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBQcm9wcmnDqXTDqXMsIE1haXNvbnMsIEjDtHRlbHMgUGFydGljdWxpZXIgZXQgQ2jDonRlYXV4IExhcmdpZXIiPlByb3ByacOpdMOpcywgTWFpc29ucywgQ2jDonRlYXV4IGV0IEjDtHRlbHMgUGFydGljdWxpZXJzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL2JpZW5zLXZlbmR1cy1hZ2VuY2UtaW1tb2JpbGllcmUtbGFyZ2llci8iIHRpdGxlPSJCaWVucyB2ZW5kdXMgcGFyIGzigJlBZ2VuY2UgTGFyZ2llciBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMiPlNpZ27DqSBwYXIgTGFyZ2llcjwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzQiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9hY2hhdC1hcHBhcnRlbWVudC1wYXJpcy03NTAwOC03NTAwMS8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudHMgUGFyaXMgNzUwMDgtNzUwMDEiPkFjaGF0IC8gQXBwYXJ0ZW1lbnRzIC8gUGFyaXMgLyA3NTAwOCAvIDc1MDAxPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3ZlbnRlLWhvdGVscy1wYXJ0aWN1bGllcnMtbWFpc29ucy1wYXJpcy03NTAwOC03NTAxNi03NTAxNy8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSAgSMO0dGVscyBQYXJ0aWN1bGllcnMgZXQgTWFpc29ucyA3NTAwOC03NTAxNi03NTAxNyI+SMO0dGVsIHBhcnRpY3VsaWVyIC8gTWFpc29uIC8gUGFyaXMgLyA3NTAwOCAvIDc1MDE2IC8gNzUwMTc8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvdmVudGUtYXBwYXJ0ZW1lbnRzLXBhcmlzLTE2ZW1lLTE3ZW1lLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50cyBQYXJpcyAxNsOobWUgTm9yZCBldCAxN8OobWUiPkFwcGFydGVtZW50IC8gUGFyaXMgMTbDqG1lIE5vcmQgLyAxN8OobWU8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvYWNoYXQtaW1tb2JpbGllci1kZS1wcmVzdGlnZS03NTAwOC03NTAxNi03NTAxNy8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJJbW1vYmlsaWVyIGRlIHByZXN0aWdlIFBhcmlzIE91ZXN0Ij5BY2hhdCAvIEltbW9iaWxpZXIgZGUgcHJlc3RpZ2UgLyA3NTAwOCAvIFBhcmlzIDE2w6htZSBub3JkIC8gMTfDqG1lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3ZlbnRlLW1haXNvbnMtaG90ZWxzLXBhcnRpY3VsaWVycy1wcm9wcmlldGVzLWNoYXRlYXV4LW9pc2UvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgTWFpc29ucywgSMO0dGVscyBQYXJ0aWN1bGllcnMsIFByb3ByacOpdMOpcyBldCBDaMOidGVhdXggZGFucyBs4oCZT2lzZSI+TWFpc29uIC8gSMO0dGVsIFBhcnRpY3VsaWVyIC8gUHJvcHJpw6l0w6kgLyBDaMOidGVhdSAvIE9pc2U8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvdmVudGUtbWFpc29ucy1oYXV0cy1kZS1zZWluZS15dmVsaW5lcy1lc3Nvbm5lLXNlaW5lLWV0LW1hcm5lLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIG1haXNvbnMgSGF1dHMgZGUgc2VpbmUsIFl2ZWxpbmVzLCBFc3Nvbm5lIGV0IFNlaW5lIGV0IE1hcm5lIj5NYWlzb24gLyBIYXV0cy1kZS1TZWluZSAvIFl2ZWxpbmVzIC8gRXNzb25uZSAvIFNlaW5lIGV0IE1hcm5lPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWwiPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvbWVudGlvbnMtbGVnYWxlcy1hZ2VuY2UtbGFyZ2llci8iIHRpdGxlPSJNZW50aW9ucyBsw6lnYWxlcyI+TWVudGlvbnMgbMOpZ2FsZXMgLyBCYXLDqG1lPC9hPiAtCiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9wYXJ0ZW5haXJlcy1pbW1vYmlsaWVycy1hZ2VuY2UtbGFyZ2llci8iIHRpdGxlPSJQYXJ0ZW5haXJlcyBkZSAgbOKAmUFnZW5jZSBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyI+UGFydGVuYWlyZXM8L2E+IC0KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5hZ2VuY2UtcGx1cy5mciIgdGl0bGU9IkFnZW5jZSBQbHVzLCBzb2x1dGlvbnMgcG91ciBsZXMgcHJvZmVzc2lvbm5lbHMgZGUgbCdpbW1vYmlsaWVyIj5Sw6lhbGlzYXRpb24gQWdlbmNlIFBsdXM8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9mb290ZXI+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgbGlzdF9saSA9ICQoJ2Zvb3RlciB1bC5zZW8xIGxpJyk7CgogICAgZm9yKHZhciBpPTA7aTxsaXN0X2xpLmxlbmd0aDtpKyspewoKICAgICAgICB2YXIgY3VycmVudF9lbGVtID0gbGlzdF9saVtpXTsKCiAgICAgICAgaWYoaSA9PSA0KXsKICAgICAgICAgICAgJChjdXJyZW50X2VsZW0pLnByZXBlbmRUbygnZm9vdGVyIC5zZW8yJyk7CiAgICAgICAgfSBlbHNlIGlmKGkgPT0gNSl7CiAgICAgICAgICAgICQoY3VycmVudF9lbGVtKS5pbnNlcnRBZnRlcignZm9vdGVyIC5zZW8yIGxpOm50aC1jaGlsZCgxKScpOwogICAgICAgIH1lbHNlIGlmKGkgPT0gNil7CiAgICAgICAgICAgICQoY3VycmVudF9lbGVtKS5pbnNlcnRBZnRlcignZm9vdGVyIC5zZW8yIGxpOm50aC1jaGlsZCgyKScpOwogICAgICAgIH0KICAgIH0KPC9zY3JpcHQ+Cgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKICAgIChmdW5jdGlvbigpewogICAgICAgIHZhciBmbkZvb3RlciA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBmID0gJCgnZm9vdGVyJyk7CiAgICAgICAgICAgIGlmIChmLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHZhciBtaW5IZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCkgLSBmLmlubmVySGVpZ2h0KCk7CiAgICAgICAgICAgICAgICBmLmNzcyh7cG9zaXRpb246J3N0YXRpYyd9KTsKICAgICAgICAgICAgICAgIGlmKGYub2Zmc2V0KCkudG9wIDwgbWluSGVpZ2h0KXsKICAgICAgICAgICAgICAgICAgICBmLmNzcyh7cG9zaXRpb246J2Fic29sdXRlJywgJ2JvdHRvbSc6JzAnfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZuRm9vdGVyKTsKICAgICAgICAkKHdpbmRvdykucmVzaXplKGZuRm9vdGVyKTsKICAgIH0pKCk7Cgo8L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPgo=
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:34 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-790/vente-appartement-2-pieces-1-chambre-paris-75015/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:34 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=ros9trtf2d4ibcv73ikt8c66t0; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:34 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-786/vente-appartement-5-pieces-3-chambres-paris-75016/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:35 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=4i27p3hjo5ob185ls9giq32sv3; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4KPGhlYWQ+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiLz4KCiAgICA8dGl0bGU+VmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgMTYgRWdsaXNlIGQnQXV0ZXVpbCAtIEFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzPC90aXRsZT4KCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iRMOpdGFpbHMgZGUgbCdhbm5vbmNlIGltbW9iaWxpw6hyZSB2ZW50ZSBhcHBhcnRlbWVudCA1IHBpw6hjZXMgUEFSSVMgNzUwMTYgMyBjaGFtYnJlcyA4MSBtwrIgUHJpeCAxIDAwMCAwMDAg4oKsIFLDqWbDqXJlbmNlIExBMi03ODYiLz4KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJBZ2VuY2UgaW1tb2JpbGnDqHJlIGRlIHByZXN0aWdlLGFjaGF0LHZlbnRlLGFwcGFydGVtZW50cyBwYXJpc2llbnMsaGF1c3NtYW5uaWVuLG1haXNvbnMsaMO0dGVscyBwYXJ0aWN1bGllcnMscHJvcHJpw6l0w6lzLGNow6J0ZWF1eCxsb2Z0LGR1cGxleCxpbW1ldWJsZXMsY2FiaW5ldCBsYXJnaWVyIDc1MDA4LHBhcmlzLGlsZSBkZSBmcmFuY2UsYWdlbmNlIGRlcyBhbWJhc3NhZGVzLGVzdGltYXRpb24sZXhwZXJ0aXNlLGltbW9iaWxpZXIsYmllbnMgaW1tb2JpbGllcnMscsOpc2lkZW50aWVsIiAvPgogICAgPG1ldGEgbmFtZT0icmV2aXNpdC1hZnRlciIgY29udGVudD0iMTAgZGF5cyIgLz4KICAgIDxtZXRhIG5hbWUgPSJmb3JtYXQtZGV0ZWN0aW9uIiBjb250ZW50ID0gInRlbGVwaG9uZT1ubyIgLz4KICAgIDxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLWNhcGFibGUiIGNvbnRlbnQ9InllcyIvPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtdGl0bGUiIGNvbnRlbnQ9IkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzIi8+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoIi8+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+CgogICAgPGJhc2UgaHJlZj0iaHR0cHM6Ly93d3cubGFyZ2llci5mci8iIC8+CgogICAgPCEtLTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL2pxdWVyeS0yLjEuMS5taW4uanMiPjwvc2NyaXB0Pi0tPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvanF1ZXJ5LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9TY2FsZUltYWdlLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9qcXVlcnkuY3ljbGUyLm1pbi5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvanF1ZXJ5Lm11bHRpcGxlLnNlbGVjdC5qcyI+PC9zY3JpcHQ+Cgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9qcXVlcnkuc2hhcnJyZS5taW4uanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvbXNkcm9wLmNzcyIgLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX2RlZmF1bHQvcmVzZXQuY3NzIiAvPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL3Bob3Rvc3dpcGUuY3NzIiAvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvZGVmYXVsdC1za2luLmNzcyIgLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9zdHlsZS5jc3M/MjAxNzA0MjQ9Ii8+CgogICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJlbiIgaHJlZj0iaHR0cHM6Ly93d3cubGFyZ2llci5mci9lbi9zYWxlLWhvdXNlLWFwYXJ0bWVudC1tYW5zaW9uLXBhcmlzLWxhcmdpZXIvcmVmLWxhMi03ODYvc2FsZS1hcGFydG1lbnQtNS1yb29tcy0zLWJlZHJvb21zLXBhcmlzLTc1MDE2L2luZGV4LnBocCIgLz4KICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0iIiBocmVmPSJodHRwczovL20ubGFyZ2llci5mci9mci92ZW50ZS1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWxzLXBhcnRpY3VsaWVyLXBhcmlzLWxhcmdpZXIvcmVmLWxhMi03ODYvdmVudGUtYXBwYXJ0ZW1lbnQtNS1waWVjZXMtMy1jaGFtYnJlcy1wYXJpcy03NTAxNi8iIC8+CgogICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9mYXZpY29uLmljbyIgLz4KCiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjYwLnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSI3Nng3NiIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL2FwcGxlVG91Y2hJY29uNzYucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjEyMHgxMjAiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjEyMC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTUyeDE1MiIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL2FwcGxlVG91Y2hJY29uMTUyLnBuZyI+CgogICAgPG1ldGEgbmFtZT0iYXBwbGljYXRpb24tbmFtZSIgY29udGVudD0iQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMiIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIgY29udGVudD0iIzAzNDY4YSIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlNzB4NzBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvbXNUb3VjaC9zbWFsbHRpbGUtNzB4NzAucG5nIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1zcXVhcmUxNTB4MTUwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL21zVG91Y2gvbWVkaXVtdGlsZS0xNTB4MTUwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24td2lkZTMxMHgxNTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvbXNUb3VjaC93aWRldGlsZS0zMTB4MTUwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlMzEweDMxMGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9tc1RvdWNoL2xhcmdldGlsZS0zMTB4MzEwLnBuZyIgLz4KCiAgICA8IS0tW2lmIElFIF0+PHNjcmlwdCBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL21vZGVybml6ci5jdXN0b20uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdGUgSUUgOV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvcGxhY2Vob2xkZXJzLm1pbi5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIChndGUgSUUgNikmKGx0ZSBJRSA4KV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvc2VsZWN0aXZpenItbWluLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHQgSUUgOV0+PHNjcmlwdCBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL2NzczMtbWVkaWFxdWVyaWVzLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KCiAgICA8bGluayBocmVmPSdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9QWxlZ3JleWEnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPgoKCgo8L2hlYWQ+CjwhLS1baWYgbHQgSUUgN10+IDxib2R5IGNsYXNzPSJpZSBpZTYgaWU3XyBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU3IGllN18gaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA4XT4gICAgPGJvZHkgY2xhc3M9ImllIGllOCBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDldPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU5IGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDldPiA8Ym9keT48IVtlbmRpZl0tLT4KPCEtLVtpZiAhSUVdPjwhLS0+PGJvZHk+PCEtLTwhW2VuZGlmXS0tPgoJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgaWYgKCAkKHdpbmRvdykud2lkdGgoKSA8PSA3NjgpIHsKICAgICAgICAkKCdtZXRhW25hbWU9dmlld3BvcnRdJykuYXR0cignY29udGVudCcsJ3dpZHRoPTc2OCcpOwogICAgfQo8L3NjcmlwdD4KPGRpdiBpZD0ibWFpbiIgY2xhc3M9ImFubm9uY2VzLWRlZmF1bHQiPgogICAgPGhlYWRlcj4KICAgIDxkaXYgY2xhc3M9InRvcF9oZWFkZXIiPgogICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvZ28iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxhcmdpZXIuZnIvIiB0aXRsZT0iQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL2xvZ28ucG5nIiBhbHQ9IkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzIC0gQWNoYXQgYXBwYXJ0ZW1lbnRzIHBhcmlzIDjDqG1lIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPG5hdj4KICAgIDx1bCBjbGFzcz0ibWFpbk1lbnUiPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyLyIgdGl0bGU9IkFnZW5jZSBMYXJnaWVyIEltbW9iaWxpZXIgZGUgUHJlc3RpZ2UgZGFucyBsZSA4ZSBldCBPdWVzdCBQYXJpc2llbiIgY2xhc3M9Imljb0FjY3VlaWwiPjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL2FnZW5jZS1pbW1vYmlsaWVyZS1wcmVzdGlnZS1sYXJnaWVyLXBhcmlzLyIgdGl0bGU9IkFnZW5jZXMgTGFyZ2llciBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMgdW5lIEhpc3RvaXJlIFBhcmlzaWVubmUiIGNsYXNzPSIiPkRlcHVpcyAxODU5PC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvdmVudGUtbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllci1wYXJpcy1sYXJnaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkltbW9iaWxpZXIgZW4gVmVudGUgYXZlYyBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyIgY2xhc3M9ImN1cnJlbnQiPk5vcyBiaWVuczwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3ZlbmRyZS1lc3RpbWF0aW9uLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbHMtcGFydGljdWxpZXJzLXBhcmlzLyIgdGl0bGU9IlZlbmRyZSB2b3RyZSBiaWVuIHN1ciBQYXJpcyBldCDDjmxlIGRlIEZyYW5jZSIgY2xhc3M9IiI+VmVuZHJlIGF2ZWMgTGFyZ2llcjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL2FjcXVlcmlyLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbC1wYXJ0aWN1bGllci1wYXJpcy8iIHRpdGxlPSJBY2hldGVyIHZvdHJlIGJpZW4gc3VyIFBhcmlzIGV0IMOPbGUgZGUgRnJhbmNlIiBjbGFzcz0iIj5BY3F1w6lyaXIgYXZlYyBMYXJnaWVyPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJmbGFnTGFuZyI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9lbi9zYWxlLWhvdXNlLWFwYXJ0bWVudC1tYW5zaW9uLXBhcmlzLWxhcmdpZXIvcmVmLWxhMi03ODYvc2FsZS1hcGFydG1lbnQtNS1yb29tcy0zLWJlZHJvb21zLXBhcmlzLTc1MDE2LyIgdGl0bGU9ImVuZ2xpc2giIGNsYXNzPSJmbGFnU2xpZGVNZW51Ij5lbmdsaXNoPC9hPjxpbWcgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvZmxhZ3MvZW4ucG5nIiBhbHQ9ImVuZ2xpc2giIHRpdGxlPSJlbmdsaXNoIiAvPgogICAgICAgIDwvbGk+CiAgICA8L3VsPgogICAgPHVsIGNsYXNzPSJzZWNvbmRNZW51Ij4KICAgICAgICA8bGkgY2xhc3M9Im1vdGV1cl9oZWFkZXIiPgogICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlbGVjdGlvbl9oZWFkZXIiPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvbWEtc2VsZWN0aW9uLWltbW9iaWxpZXItbGFyZ2llci1wYXJpcy8iIHRpdGxlPSJTw6lsZWN0aW9ubmVyIGFubm9uY2UgaW1tb2JpbGnDqHJlIiBjbGFzcz0ic2VsZWN0aW9uIj4KICAgICAgICAgICAgICAgIE1hIHPDqWxlY3Rpb24gOgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5iX3NlbGVjdGlvbiI+MDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lbi9zYWxlLWhvdXNlLWFwYXJ0bWVudC1tYW5zaW9uLXBhcmlzLWxhcmdpZXIvcmVmLWxhMi03ODYvc2FsZS1hcGFydG1lbnQtNS1yb29tcy0zLWJlZHJvb21zLXBhcmlzLTc1MDE2LyIgdGl0bGU9ImVuZ2xpc2giIGNsYXNzPSJmbGFnIj48aW1nIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL2ZsYWdzL2VuLnBuZyIgYWx0PSJlbmdsaXNoIiB0aXRsZT0iZW5nbGlzaCIgLz48L2E+CgoKICAgICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICA8L3VsPgogICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2Pgo8L25hdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgICAgICAoZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICQoJy5pY29fbWVudScpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQoJ2hlYWRlciA+IGRpdiBuYXYgdWwubWFpbk1lbnUnKS5zbGlkZVRvZ2dsZSgyMDApOwogICAgICAgICAgICB9KTsKCiAgICAgICAgfSkoKTsKICAgIH0pOwo8L3NjcmlwdD4KCgoKCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fbWVudSI+PC9zcGFuPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImZvcm1faGVhZGVyIj4KICAgIDxkaXY+CiAgICAgICAgPHNwYW4gY2xhc3M9Imljb19jbG9zZV9oZWFkZXIiPjwvc3Bhbj4KICAgICAgICA8Zm9ybSBpZD0ibW90ZXVyX2Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvZnIvdmVudGUtbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllci1wYXJpcy1sYXJnaWVyLyI+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkiPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZ2VvX211bHRpIj5WaWxsZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iZ2VvX3NlY3RldXIiIG11bHRpcGxlPSJtdWx0aXBsZSIgbmFtZT0iZ2VvX3NlY3RldXJbXSI+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0icGFyaXNfcml2ZV9kcm9pdGUiID5QYXJpcyByaXZlIGRyb2l0ZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InBhcmlzX3JpdmVfZ2F1Y2hlIiA+UGFyaXMgcml2ZSBnYXVjaGU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJpbGVfZGVfZnJhbmNlIiA+w45sZS1kZS1GcmFuY2U8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJwcm92aW5jZSIgPlByb3ZpbmNlPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJtdWx0aSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJnZW9fbXVsdGkiPlZpbGxlczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iZ2VvX211bHRpIiBuYW1lPSJnZW9fbXVsdGlbXSIgbXVsdGlwbGU9Im11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs2MDI3MDtnb3V2aWV1eCIgPkdPVVZJRVVYIC0gNjAyNzA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs4NDE2MDtsb3VybWFyaW4iID5MT1VSTUFSSU4gLSA4NDE2MDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MDA4O3BhcmlzIiA+UEFSSVMgLSA3NTAwODwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MDA5O3BhcmlzIiA+UEFSSVMgLSA3NTAwOTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MDE0O3BhcmlzIiA+UEFSSVMgLSA3NTAxNDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MDE1O3BhcmlzIiA+UEFSSVMgLSA3NTAxNTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MDE2O3BhcmlzIiA+UEFSSVMgLSA3NTAxNjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MTE2O3BhcmlzIiA+UEFSSVMgLSA3NTExNjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmxlY2hlX3NlbGVjdCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InR5cGUiPlR5cGUgZGUgYmllbjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0idHlwZSIgbmFtZT0idHlwZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+VHlwZSBkZSBiaWVuPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkFwcGFydG1lbnQiID5BcHBhcnRlbWVudDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJIb3VzZSIgPk1haXNvbjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyX3NlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZsZWNoZV9zZWxlY3QiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjaGFtYnJlcyIgaWQ9ImNoYW1icmVzIiB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0ic2VsZWN0X25iX2NoYW1icmVzIiBuYW1lPSJuYl9jaGFtYnJlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+Q2hhbWJyZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMSwyIj4xIC0gMiBjaGFtYnJlczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIzLCI+KyAzIGNoYW1icmVzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyX3NlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZsZWNoZV9zZWxlY3QiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibWluIiBpZD0iYnVkZ2V0X21pbiIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibWF4IiBpZD0iYnVkZ2V0X21heCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYnVkZ2V0Ij5CdWRnZXQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJzZWxlY3RfYnVkZ2V0IiBuYW1lPSJidWRnZXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj5CdWRnZXQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAsNTAwMDAwIj4mbHNhcXVvOyA1MDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNTAwMDAwLDEwMDAwMDAiPjUwMCAwMDAg4oKsIC0gMSAwMDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTAwMDAwMCwyMDAwMDAwIj4xIDAwMCAwMDAg4oKsIC0gMiAwMDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAwMDAwMCwiPiZyc2FxdW87IDIgMDAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJyZWZlcmVuY2UiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImJpZW5fcmVmIj5Sw6lmw6lyZW5jZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImJpZW5fcmVmIiBpZD0iYmllbl9yZWYiIHBsYWNlaG9sZGVyPSJSw6lmw6lyZW5jZSIgdmFsdWU9IiIgY2xhc3M9InZhbGV1ciIvPgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwIiBpZD0icCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibmV3X3Jlc2VhcmNoIiBpZD0ibmV3X3Jlc2VhcmNoIiB2YWx1ZT0iMSIgLz4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icmVjaGFyZ2VNUiIgaWQ9InJlY2hhcmdlTVIiIHZhbHVlPSIwIiAvPgogICAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImJvdXRvbiBzdWJtaXQiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IlJlY2hlcmNoZXIiIC8+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgPC9mb3JtPgogICAgPC9kaXY+CjwvZGl2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvbW90ZXVyX3hocl9saXN0Y2l0aWVzLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKICAgICQoJyNzZWxlY3RfYnVkZ2V0Jykub24oJ2NoYW5nZScsZnVuY3Rpb24oKSB7CgogICAgICAgICAgICB2YXIgdmFsZXVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuc2VsZWN0X2J1ZGdldC52YWx1ZTsKICAgICAgICAgICAgaWYgKHZhbGV1ci5pbmRleE9mKCcsJywwKSA+IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciB0YWJ2YWwgPSB2YWxldXIuc3BsaXQoJywnKTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9taW4udmFsdWUgPSB0YWJ2YWxbMF07CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5idWRnZXRfbWF4LnZhbHVlID0gdGFidmFsWzFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuYnVkZ2V0X21pbi52YWx1ZSA9ICcnOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuYnVkZ2V0X21heC52YWx1ZSA9ICcnOwogICAgICAgICAgICB9CgogICAgfSk7CgogICAgdmFyIG5iX2NoYW1icmVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuY2hhbWJyZXMudmFsdWU7CiAgICB2YXIgdmFsZXVyID0gbmJfY2hhbWJyZXM7CgogICAgaWYgKG5iX2NoYW1icmVzICE9ICcwJykKICAgIHsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5zZWxlY3RfbmJfY2hhbWJyZXMudmFsdWUgPSB2YWxldXI7CiAgICB9CgogICAgKGZ1bmN0aW9uKCl7CgogICAgICAgICQoJyNzZWxlY3RfbmJfY2hhbWJyZXMnKS5vbignY2hhbmdlJyxmdW5jdGlvbigpIHsKCiAgICAgICAgICAgIHZhciB2YWxldXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5zZWxlY3RfbmJfY2hhbWJyZXMudmFsdWU7CiAgICAgICAgICAgIGlmICh2YWxldXIuaW5kZXhPZignLCcsMCkgPiAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5jaGFtYnJlcy52YWx1ZSA9IHZhbGV1cjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmNoYW1icmVzLnZhbHVlID0gdmFsZXVyOwogICAgICAgICAgICB9CgogICAgICAgIH0pLmNoYW5nZSgpOwoKICAgIH0pKCk7CgogICAgdmFyIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAkKCcubW90ZXVyX2hlYWRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7CiAgICAgICAgaWYobW90ZXVyT3BlbiA9PSBmYWxzZSl7CgogICAgICAgICAgICBtb3RldXJPcGVuID0gdHJ1ZTsKCiAgICAgICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlRG93bigyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOid2aXNpYmxlJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgbW90ZXVyT3BlbiA9IGZhbHNlOwoKICAgICAgICAgICAgJCgnLmZvcm1faGVhZGVyJykuc2xpZGVVcCgyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOidoaWRkZW4nCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgIH0KCiAgICB9KTsKCiAgICAkKCcuaWNvX2Nsb3NlX2hlYWRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7CgogICAgICAgIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAgICAgJCgnLmZvcm1faGVhZGVyJykuc2xpZGVVcCgyMDApOwoKICAgIH0pOwoKICAgICQoJyNnZW9fbXVsdGknKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICJMb2NhbGlzYXRpb24iLAogICAgICAgIHNlbGVjdEFsbDogZmFsc2UKICAgIH0pOwoKICAgICAkKCcjZ2VvX3NlY3RldXInKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICJTZWN0ZXVyIiwKICAgICAgICBzZWxlY3RBbGw6IGZhbHNlCiAgICB9KTsKCiAgICAgbW90ZXVyX3hocl9saXN0Y2l0aWVzKCJnZW9fc2VjdGV1cjt0cmFuc2FjO3R5cGVfaW1tbzthZGRyZXNzX2RlcGFydGVtZW50O2FkZHJlc3NfcGF5cyIsIHRydWUsICIiKTsKCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewoKCQkvL2J1ZGdldAogICAgICAgIHZhciBidWRnZXRfbWluID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuYnVkZ2V0X21pbi52YWx1ZTsKICAgICAgICB2YXIgYnVkZ2V0X21heCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmJ1ZGdldF9tYXgudmFsdWU7CiAgICAgICAgaWYgKGJ1ZGdldF9taW4gPT0gJycpIGJ1ZGdldF9taW4gPSAnMCc7CiAgICAgICAgdmFyIHZhbGV1ciA9IGJ1ZGdldF9taW4gKyAnLCcgKyBidWRnZXRfbWF4OwogICAgICAgIGlmIChidWRnZXRfbWluICE9ICcwJyB8fCBidWRnZXRfbWF4ICE9ICcnKQogICAgICAgIHsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuc2VsZWN0X2J1ZGdldC52YWx1ZSA9IHZhbGV1cjsKICAgICAgICB9CgogICAgfSk7CgoKCgo8L3NjcmlwdD4KCjwvaGVhZGVyPgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL2pxdWVyeS5qY2Fyb3VzZWwubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvcGhvdG9zd2lwZS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9waG90b3N3aXBlLXVpLWRlZmF1bHQubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL21hal9zZWxlY3Rpb24uanMiPjwvc2NyaXB0PgogICAgPHNlY3Rpb24gaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9Qcm9kdWN0IiBpZD0iYW5ub25jZV9wcm9maWwiPgoJCTxoMSBpdGVtcHJvcD0ibmFtZSI+VmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgMTYgRWdsaXNlIGQnQXV0ZXVpbDwvaDE+CiAgICAgICAgPGRpdiBjbGFzcz0iZGlhcG9yYW1hX3RodW1icyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpYXBvcmFtYV9wcm9maWwiIGRhdGEtY3ljbGUtcGFnZXItdGVtcGxhdGU9IiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZSI+CgkJCQkJPGltZyBjbGFzcz0iYXV0b1NjYWxlIiBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iL2RhdGFzL2JpZW5zL2ltYWdlcy83NTgvNzU4XzAwLTIwMjAtMDItMjgtMTQwNi5qcGVnIiBhbHQ9ImFwcGFydGVtZW50IDUgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE2KSIgdGl0bGU9ImFwcGFydGVtZW50IDUgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE2KSIvPjxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGh1bWJzX2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqY2Fyb3VzZWwtcHJldiBpbmFjdGl2ZSBpY29fZGV0YWlsX3ByZXYiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjeWNsZSIgZGF0YS1qY2Fyb3VzZWw9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYnMgY3ljbGUtcGFnZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgoJCQkJCQkJCQk8aW1nIGNsYXNzPSJhdXRvU2NhbGUiIGl0ZW1wcm9wPSJpbWFnZSIgc3JjPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzc1OC83NThfMDAtMjAyMC0wMi0yOC0xNDA2LmpwZWciIGFsdD0iYXBwYXJ0ZW1lbnQgNSBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTYpIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgNSBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTYpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImpjYXJvdXNlbC1uZXh0IGluYWN0aXZlIGljb19kZXRhaWxfbmV4dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCgkJCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQkJLy8gIEFkZExvYWRFdmVudAoJCQkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJCWZ1bmN0aW9uIEFkZExvYWRFdmVudChmdW5jKSB7CgkJCQl2YXIgb2xkb25sb2FkID0gd2luZG93Lm9ubG9hZDsKCQkJCWlmICh0eXBlb2Ygd2luZG93Lm9ubG9hZCAhPSAnZnVuY3Rpb24nKQoJCQkJeyB3aW5kb3cub25sb2FkID0gZnVuYzsgfQoJCQkJZWxzZSB7CgkJCQkJd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkgewoJCQkJCQlpZiAob2xkb25sb2FkKQoJCQkJCQl7IG9sZG9ubG9hZCgpOyB9CgkJCQkJCWZ1bmMoKTsKCQkJCQl9CgkJCQl9CgkJCX0KCiAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKGUpIHsKCgkJCQkoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgdyA9ICQoJy5kaWFwb3JhbWFfcHJvZmlsJykud2lkdGgoKS8xLjU7CgogICAgICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6dysncHgnCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICQoJy50aHVtYnNfY29udGFpbmVyJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6dysncHgnCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgfSkoKTsKCiAgICAgICAgICAgICAgICAvLyQoJy5kaWFwb3JhbWFfcHJvZmlsJykuZW1wdHkoKS5hcHBlbmQoJCgnLnRodW1icyA+IGRpdiA+IGEnKS5jbG9uZSgpKTsKCiAgICAgICAgICAgICAgICAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKHsKICAgICAgICAgICAgICAgICAgICBzbGlkZXM6Jz4gZGl2LnNsaWRlJywKICAgICAgICAgICAgICAgICAgICBwYWdlcjonLmN5Y2xlLXBhZ2VyJywKICAgICAgICAgICAgICAgICAgICBtYW51YWxTcGVlZDo0MDAsCiAgICAgICAgICAgICAgICAgICAgZng6ICdmYWRlJywKICAgICAgICAgICAgICAgICAgICBzcGVlZDoyMDAwLAogICAgICAgICAgICAgICAgICAgIHN3aXBlOnRydWUKICAgICAgICAgICAgICAgIH0pOwoKCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqQUREIERJQVBPIDFTVCBTTElERSBUSEVOIFJFU1QgT0YgVEhFTSBBRlRFUiBMT0FEKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCShmdW5jdGlvbigpewoKCQkJCQl2YXIgc2xpZGVzID0gW107CgoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNzU4Lzc1OF8wMC0yMDIwLTAyLTI4LTE0MDYuanBlZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgNSBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTYpIiB9KTsKCgkJCQkJaWYoc2xpZGVzLmxlbmd0aCA+IDApewoJCQkJCQlzbGlkZXMuc2hpZnQoKTsKCQkJCQl9CgoJCQkJCWZ1bmN0aW9uIGltZ1ByZWxvYWQoc2xpZGVzLCBpZHgsIGNhbGxiYWNrKXsKCgkJCQkJCXZhciB0ZW1wSW1nID0gbmV3IEltYWdlKCk7CgkJCQkJCXZhciBPYmpTbGlkZSA9IHNsaWRlc1tpZHhdOwoJCQkJCQlpZihPYmpTbGlkZSA9PSBudWxsKXsKCQkJCQkJCXJldHVybjsKCQkJCQkJfQoKCQkJCQkJJCh0ZW1wSW1nKS5sb2FkKGZ1bmN0aW9uKCl7CgkJCQkJCQl2YXIgbmV3U2xpZGUgPSAnPGRpdiBjbGFzcz0ic2xpZGUiIGRhdGEtY3ljbGUtcGFnZXItdGVtcGxhdGU9IjxkaXY+PGRpdj48aW1nIGFsdD1cJycrT2JqU2xpZGUuYWx0KydcJyBzcmM9XCcnK09ialNsaWRlLnNyYysnXCcvPjwvZGl2PjwvZGl2PiI+PGltZyBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iJytPYmpTbGlkZS5zcmMrJyIgYWx0PSInK09ialNsaWRlLmFsdCsnIi8+PHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPjwvZGl2Pic7CgkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKCdhZGQnLCBuZXdTbGlkZSk7CgkJCQkJCQlJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzIGltZycpKTsKCQkJCQkJCS8vICBnbyBuZXh0CgkJCQkJCQlpZiAoaWR4ICsgMSA8IHNsaWRlcy5sZW5ndGgpewoJCQkJCQkJCWltZ1ByZWxvYWQoc2xpZGVzLCBpZHggKyAxLCBjYWxsYmFjayk7CgkJCQkJCQl9CgkJCQkJCQllbHNlIHsKCQkJCQkJCQlpZiAoY2FsbGJhY2sgIT0gbnVsbCl7CgkJCQkJCQkJCWNhbGxiYWNrKCk7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9KTsKCgkJCQkJCXRlbXBJbWcuc3JjID0gT2JqU2xpZGUuc3JjOwoJCQkJCX0KCgkJCQkJQWRkTG9hZEV2ZW50KGZ1bmN0aW9uKCl7CgoJCQkJCQlpbWdQcmVsb2FkKHNsaWRlcywwLCBmdW5jdGlvbigpewoKCQkJCQkJCSQoJy50aHVtYnMnKS5hZGRDbGFzcygnY3ljbGUtcGFnZXInKTsKCQkJCQkJCUltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgaW1nJykpOwoKCQkJCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkJCQkkKCcuY3ljbGUnKS5hZGRDbGFzcygnamNhcm91c2VsLW1hbicpOwoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbWFuJykuamNhcm91c2VsKHsKCQkJCQkJCQkJdmVydGljYWw6IHRydWUKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipDT05UUk9MIEJUTiBORVhUIFBSRVYgQ0FST1VTRUwqKioqLwoKCQkJCQkJCQkkKCcuamNhcm91c2VsLXByZXYnKS5vbignamNhcm91c2VsY29udHJvbDphY3RpdmUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJJCh0aGlzKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTsKCQkJCQkJCQl9KQoJCQkJCQkJCS5vbignamNhcm91c2VsY29udHJvbDppbmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLmFkZENsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLmpjYXJvdXNlbENvbnRyb2woewoJCQkJCQkJCQl0YXJnZXQ6ICctPTEnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbmV4dCcpLm9uKCdqY2Fyb3VzZWxjb250cm9sOmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLm9uKCdqY2Fyb3VzZWxjb250cm9sOmluYWN0aXZlJywgZnVuY3Rpb24oKSB7CgkJCQkJCQkJCSQodGhpcykuYWRkQ2xhc3MoJ2luYWN0aXZlJyk7CgkJCQkJCQkJfSkKCQkJCQkJCQkuamNhcm91c2VsQ29udHJvbCh7CgkJCQkJCQkJCXRhcmdldDogJys9MScKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipDT05UUk9MIENBUk9VU0VMIFZJQSBTTElERSBESUFQT1JBTUEqKioqLwoKCQkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLm9uKCdjeWNsZS1pbml0aWFsaXplZCcsIGZ1bmN0aW9uKCBldmVudCwgb3B0cyApIHsKCQkJCQkJCQkJJCgnLnRodW1icyA+IGRpdicpLnJlbW92ZUNsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKS5lcShvcHRzLmN1cnJTbGlkZSkuYWRkQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpOwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLm9uKCdjeWNsZS1iZWZvcmUnLCBmdW5jdGlvbiggZXZlbnQsIG9wdHMgKSB7CgkJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5yZW1vdmVDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJykuZXEob3B0cy5uZXh0U2xpZGUpLmFkZENsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKTsKCQkJCQkJCQkJJCgnLmpjYXJvdXNlbC1tYW4nKS5qY2Fyb3VzZWwoJ3Njcm9sbCcsIG9wdHMubmV4dFNsaWRlKTsKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipTRVQgVVAgQ0FST1VTRUwgQU5EIEhJUyBDSElMRFJFTiBXSURUSCoqKiovCgoJCQkJCQkJCXZhciB4ID0gJCgnLmpjYXJvdXNlbC1tYW4nKS5oZWlnaHQoKS80OwoJCQkJCQkJCXZhciB5ID0gJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aDsKCgkJCQkJCQkJJCgnLmpjYXJvdXNlbC1tYW4gLnRodW1icycpLmNzcyh7CgkJCQkJCQkJCSdoZWlnaHQnOngqeSsncHgnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5jc3MoewoJCQkJCQkJCQknaGVpZ2h0JzoxMDAveSsnJScKCQkJCQkJCQl9KTsKCgkJCQkJCQl9CgoJCQkJCQl9KTsKCQkJCQl9KTsKCgkJCQl9KSgpOwoKICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqSU5TVEFOQ0UgT1BFTlNXSVBFIERFVEFJTCBQSE9UTyoqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKICAgICAgICAgICAgICAgIHZhciBvcGVuUGhvdG9Td2lwZSA9IGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICAgICAgICAgICAgIHZhciBwc3dwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wc3dwJylbMF07CgogICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzU4Lzc1OF8wMC0yMDIwLTAyLTI4LTE0MDYuanBlZycsIHRpdGxlOidhcHBhcnRlbWVudCA1IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNiknLHc6JycsaDonJ30pOwoKICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBiZ09wYWNpdHk6JzAuOTUnLAogICAgICAgICAgICAgICAgICAgICAgICBjbG9zZU9uU2Nyb2xsOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0FuaW1hdGlvbkR1cmF0aW9uOiAzMDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVBbmltYXRpb25EdXJhdGlvbjogMzAwLAogICAgICAgICAgICAgICAgICAgICAgICAvL2NhcHRpb25FbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlRWw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBwaW5jaFRvQ2xvc2U6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBjbG9zZU9uVmVydGljYWxEcmFnOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIHZhciBnYWxsZXJ5ID0gbmV3IFBob3RvU3dpcGUocHN3cEVsZW1lbnQsIFBob3RvU3dpcGVVSV9EZWZhdWx0LCBpdGVtcywgb3B0aW9ucyk7CgogICAgICAgICAgICAgICAgICAgIGdhbGxlcnkuaW5pdCgpOwogICAgICAgICAgICAgICAgICAgIGdhbGxlcnkuZ29UbyhpbmRleCk7CgogICAgICAgICAgICAgICAgICAgIGdhbGxlcnkubGlzdGVuKCdjbG9zZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKCdyZXN1bWUnKTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykub24oICdjbGljaycsJ2RpdicsIGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICQodGhpcykuZGF0YSgiY3ljbGUub3B0cyIpLnNsaWRlTnVtIC0xOwoKICAgICAgICAgICAgICAgICAgICBvcGVuUGhvdG9Td2lwZShpbmRleCk7CgogICAgICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3ljbGUoJ3BhdXNlJyk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvL0lOU1RBTkNFIERJQVBPUkFNQSBGSUNIRSBCSUVOCiAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzIGltZycpKTsKCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB3ID0gJCgnLmRpYXBvcmFtYV9wcm9maWwnKS53aWR0aCgpLzEuNTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLnRodW1ic19jb250YWluZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9KSgpOwoKCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkvKioqKlNFVCBVUCBDQVJPVVNFTCBBTkQgSElTIENISUxEUkVOIFdJRFRIKioqKi8KCgkJCQkJdmFyIHggPSAkKCcuamNhcm91c2VsLW1hbicpLmhlaWdodCgpLzQ7CgkJCQkJdmFyIHkgPSAkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoOwoKCQkJCQkkKCcuamNhcm91c2VsLW1hbiAudGh1bWJzJykuY3NzKHsKCQkJCQkJJ2hlaWdodCc6eCp5KydweCcKCQkJCQl9KTsKCgkJCQkJJCgnLnRodW1icyA+IGRpdicpLmNzcyh7CgkJCQkJCSdoZWlnaHQnOjEwMC95KyclJwoJCQkJCX0pOwoKCQkJCX0KCiAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzID4gZGl2ID4gYSA+IGltZycpKTsKCiAgICAgICAgICAgIH0pOwoKICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IGNsYXNzPSJhbm5vbmNlX2RldGFpbCI+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgPGgyIGl0ZW1zY29wZSBpdGVtcHJvcD0iYXZhaWxhYmxlQXRPckZyb20iIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9QbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+TG9jYWxpc2F0aW9uIDogPHNwYW4gaXRlbXByb3A9ImFkZHJlc3MiPlBBUklTIDE2PC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5RdWFydGllciA6IDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzIj5FZ2xpc2UgZCdBdXRldWlsPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0iZGVzY3JpcHRpb24iIGNsYXNzPSJkZXNjcmlwdGlmIj5SdWUgZGUgUsOpbXVzYXQsIMOgIGRldXggcGFzIGRlIGwnRWdsaXNlIGQnQXV0ZXVpbCwgbCdBZ2VuY2UgTEFSR0lFUiB2b3VzIHByb3Bvc2UsIGRhbnMgdW4gYmVsIGltbWV1YmxlIGRlIDE5MTQsIHVuIGFwcGFydGVtZW50IGZhbWlsaWFsIGVuIERVUExFWCBkZSA4MCBtwrIgc2l0dcOpIGF1IDPDqG1lIMOpdGFnZSwgZGVzc2VydmkgcGFyIGFzY2Vuc2V1ciwgc3VyIGNvdXIsIGNvbXByZW5hbnQ6IFPDqWpvdXIsIGN1aXNpbmUgw6lxdWlww6llIGV0IGFtw6luYWfDqWUsIGNoYW1icmUgZXQgYXUgbml2ZWF1IHN1cMOpcmlldXIsIGNoYW1icmUgYXZlYyBncmFuZCBkcmVzc2luZywgM8OobWUgY2hhbWJyZSwgc2FsbGUgZGUgYmFpbnMgZXQgV0Mgc8OpcGFyw6lzLiBDZXQgYXBwYXJ0ZW1lbnQgb2ZmcmUgbGUgY2hhcm1lIGRlIGwnYW5jaWVuLCBiZWxsZSBoYXV0ZXVyIHNvdXMgcGxhZm9uZCBldCBsZSBDQUxNRS4gVW5lIENBVkUgY29tcGzDqHRlIGNlIGJpZW4uIFNlY3RvcmlzYXRpb24gSmVhbiBCYXB0aXN0ZSBTYXkuIExlIHN5bmRpY2F0IGRlcyBjb3Byb3ByacOpdGFpcmVzIG5lIGZhaXQgbCdvYmpldCBkJ2F1Y3VuZSBwcm9jw6lkdXJlIG1lbsOpZSBzdXIgbGVzIGZvbmRlbWVudHMgZGVzIGFydGljbGVzIDI5LUlBIGV0IDI5LTEgZGUgbGEgbG9pIGR1IDEwIGp1aWxsZXQgMTk2NSBldCBkZSBsJ2FydGljbGUgTDYxNS02IGR1IENvZGUgZGUgbGEgY29uc3RydWN0aW9uIGV0IGRlIGwnaGFiaXRhdGlvbi4gTm91cyB2b3VzIGluZm9ybW9ucyBxdWUgY29uZm9ybcOpbWVudCDDoCBsJ2FydGljbGUgTC41NjEtNSBkdSBDb2RlIG1vbsOpdGFpcmUgZXQgZmluYW5jaWVyLCB1bmUgcGnDqGNlIGQnaWRlbnRpdMOpIHZvdXMgc2VyYSBkZW1hbmTDqWUgYXZhbnQgY2hhcXVlIHZpc2l0ZS48L3A+CiAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBuZXcgQXJyYXkoJ0NldHRlIGFubm9uY2UgYSDDqXTDqSBham91dMOpZSDDoCB2b3RyZSBzw6lsZWN0aW9uLicsJ0NldHRlIGFubm9uY2UgZXN0IGTDqWrDoCBkYW5zIHZvdHJlIHPDqWxlY3Rpb24uJyk7CiAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb3JtLWFtaSIgbmFtZT0iY29udGFjdF9hbWkiIG1ldGhvZD0iUE9TVCIgYWN0aW9uPSIvZnIvYW1pLyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaWRiaWVuIiBpZD0iaWRiaWVuIiB2YWx1ZT0iNzU4IiAvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImJpZW5fcmVmIiBpZD0iYmllbl9yZWYiIHZhbHVlPSJMQTItNzg2IiAvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImJpZW5fdXJsIiBpZD0iYmllbl91cmwiIHZhbHVlPSIvZnIvdmVudGUtbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllci1wYXJpcy1sYXJnaWVyL3JlZi1sYTItNzg2L3ZlbnRlLWFwcGFydGVtZW50LTUtcGllY2VzLTMtY2hhbWJyZXMtcGFyaXMtNzUwMTYvIiAvPgoJCQkJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im5vX3JlZGlyZWN0IiB2YWx1ZT0iMSIgLz4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGV0YWlsX2xpbmtfb3V0aWxzIj4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJham91dF9zZWxlY3Rpb24iIGRhdGEtYmllbmlkPSI3NTgiIGhyZWY9IiMiIHRpdGxlPSJBam91dGVyIMOgIG1hIHPDqWxlY3Rpb24iPkFqb3V0ZXIgw6AgbWEgc8OpbGVjdGlvbjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImVudm9pX2FtaSIgaHJlZj0iIyIgdGl0bGU9IkVudm95ZXIgw6AgdW4gYW1pIj5FbnZveWVyIMOgIHVuIGFtaTwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoJCQkJCTxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNoYXJlX2J1dHRvbnMgYUxpa2UiIHRpdGxlPSJQYXJ0YWdlciBjZXR0ZSBvZmZyZSBzdXIgbGVzIHLDqXNlYXV4IHNvY2lhdXgiPlBhcnRhZ2VyIGNlIGxpZW48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImxpbmtfaW1wcmVzc2lvbiIgdGl0bGU9IkltcHJpbWVyIGxlIGTDqXRhaWwgZGUgY2UgYmllbiIgaHJlZj0iL2ZyL2ltcHJlc3Npb24vZGV0YWlscy83NTgvIiB0YXJnZXQ9Il9ibGFuayI+SW1wcmltZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0cmlnZ2VyX21lbnRpb24iIGhyZWY9Ii9mci9tZW50aW9ucy1sZWdhbGVzLWFnZW5jZS1sYXJnaWVyLyIgdGl0bGU9IkluZm9ybWF0aW9ucyBqdXJpZGlxdWVzIExhcmdpZXIgYWdlbmNlIGRlcyBBbWJhc3NhZGVzIj5Db25zdWx0ZXIgbGUgYmFyw6htZSBkZXMgaG9ub3JhaXJlczwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImludGVybG9jdXRldXIiIGl0ZW1wcm9wPSJzZWxsZXIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5Wb3RyZSBpbnRlcmxvY3V0ZXVyPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9ImxlZ2FsTmFtZSI+QWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXM8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0ibG9jYXRpb24iPjMyIEJvdWxldmFyZCBNYWxlc2hlcmJlcyAtIDc1MDA4IFBhcmlzPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VMOpbCA6IDxzcGFuIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPjAxIDQyIDY1IDE4IDgzPC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX2RldGFpbCI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9ImFubm9uY2VfZm9ybSIgY2xhc3M9InZhbGlkYXRlX2Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvZnIvdmVudGUtbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllci1wYXJpcy1sYXJnaWVyL3JlZi1sYTItNzg2L3ZlbnRlLWFwcGFydGVtZW50LTUtcGllY2VzLTMtY2hhbWJyZXMtcGFyaXMtNzUwMTYvI2NvbnRhY3RfYW5ub25jZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsZWdlbmQ+RGVtYW5kZSBkZSByZW5zZWlnbmVtZW50czwvbGVnZW5kPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImhvbmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ3ZWJzaXRlIj5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IndlYnNpdGUiIGlkPSJ3ZWJzaXRlIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV90d29yb3dzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Imxhc3RfbmFtZSI+Tm9tIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0ibGFzdF9uYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJsYXN0X25hbWUiIGNsYXNzPSJyZXF1aXJlZCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJsYXN0X25hbWUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJmaXJzdF9uYW1lIj5QcsOpbm9tIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iZmlyc3RfbmFtZSIgdHlwZT0idGV4dCIgbmFtZT0iZmlyc3RfbmFtZSIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJmaXJzdF9uYW1lIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbWFpbCI+RW1haWwgPHNwYW4+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJlbWFpbCIgdHlwZT0idGV4dCIgbmFtZT0iZW1haWwiIHZhbHVlPSIiIGNsYXNzPSJyZXF1aXJlZCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJlbWFpbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InBob25lIj5Uw6lsw6lwaG9uZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9InBob25lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJwaG9uZSIgdmFsdWU9IiIgY2xhc3M9InJlcXVpcmVkIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0YXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJsYWJlbF9tZXNzYWdlLWFubm9uY2UiIGZvcj0ibWVzc2FnZSI+TWVzc2FnZSA8c3Bhbj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSJtZXNzYWdlIiBuYW1lPSJtZXNzYWdlIiBjbGFzcz0icmVxdWlyZWQiPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9Im1lc3NhZ2UiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaG9uZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IjRpMjdwM2hqbzVvYjE4NWxzOWdpcTMyc3YzIj5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IjRpMjdwM2hqbzVvYjE4NWxzOWdpcTMyc3YzIiBpZD0iNGkyN3AzaGpvNW9iMTg1bHM5Z2lxMzJzdjMiIHZhbHVlPSI0aTI3cDNoam81b2IxODVsczlnaXEzMnN2MyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlkIiBpZD0iaWQiIHZhbHVlPSI3NTgiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiB2YWx1ZT0iTEEyLTc4NiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jZV9pZCIgaWQ9ImFnZW5jZV9pZCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdWJqZWN0IiBpZD0ic3ViamVjdCIgdmFsdWU9IkNvbnRhY3RBbm5vbmNlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiBuYW1lPSJzZW5kX2VtYWlsIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJFbnZveWVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgPHNlY3Rpb24+CiAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJvZmZlcnMiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGNsYXNzPSJwcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGl0ZW1wcm9wPSJwcmljZSIgY2xhc3M9ImFubm9uY2VfcHJpY2UiPlByaXggOiA8c3Bhbj4xIDAwMCAwMDAgJmV1cm87IDwvc3Bhbj48L3A+CgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpY2VfZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgSG9ub3JhaXJlcyBpbmNsdXMKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpY2VfZGV0YWlsIHRhbGxNYXJnaW4gc2l6ZSI+OTYwIDAwMCAmZXVybzsgSG9ub3JhaXJlcyBleGNsdXM8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZV9kZXRhaWwgc2l6ZSI+SG9ub3JhaXJlcyBkZSA0LDE3JSBUVEMgw6AgbGEgY2hhcmdlIGRlIGwnYWNxdcOpcmV1cjwvcD4KCgkJCQkJCTxwIGNsYXNzPSJwcmljZV9kZXRhaWwiPjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGgyPkTDqXRhaWxzPC9oMj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGV0YWlsX2xpc3RlIj4KICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9InR5cGVPZkdvb2QiIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgICAgICAgICAgICAgYXBwYXJ0ZW1lbnQKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5TdXJmYWNlIDogPHNwYW4gaXRlbXByb3A9IndpZHRoIj44MSBtwrI8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+Tm9tYnJlIGRlIHBpw6hjZXMgOiA8c3Bhbj41PC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPk5vbWJyZSBkZSBjaGFtYnJlcyA6IDxzcGFuPjM8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIDogPHNwYW4+TEEyLTc4Njwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImNvcHJvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRW4gY29wcm9wcmnDqXTDqQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAzMCBsb3RzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vbnRhbnQgbW95ZW4gYW5udWVsIGRlIGxhIHF1b3RlLXBhcnQgZGUgY2hhcmdlcyBjb3VyYW50ZXMgOjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMyAzMDAgJmV1cm87CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVwX2RldGFpbCI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nX2RwZSIgc3JjPSJodHRwczovL3d3dy5hZ2VuY2UtcGx1cy5uZXQvc2tpbnMvX2RlZmF1bHQvbGliL0FnZW5jZVBsdXMvd3MvaW1nRFBFLmFzaHg/dmFsdWU9dmllcmdlJnNpemU9MjA2eDIxMSZwaWN0bz1kcGVfb21icmVfdHJhbnNwYXJlbnQiIGFsdD0iRGlhZ25vc3RpYyBkZSBwZXJmb3JtYW5jZSDDqW5lcmfDqXRpcXVlIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibGlua19iYWNrIj4KICAgICAgICA8L2Rpdj4KICAgIDwvc2VjdGlvbj4KICAgIDwhLS0gUm9vdCBlbGVtZW50IG9mIFBob3RvU3dpcGUuIE11c3QgaGF2ZSBjbGFzcyBwc3dwLiAtLT4KICAgIDxkaXYgY2xhc3M9InBzd3AiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgPCEtLSBCYWNrZ3JvdW5kIG9mIFBob3RvU3dpcGUuCiAgICAgICAgSXQncyBhIHNlcGFyYXRlIGVsZW1lbnQsIGFzIGFuaW1hdGluZyBvcGFjaXR5IGlzIGZhc3RlciB0aGFuIHJnYmEoKS4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fYmciPjwvZGl2PgogICAgICAgIDwhLS0gU2xpZGVzIHdyYXBwZXIgd2l0aCBvdmVyZmxvdzpoaWRkZW4uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3Njcm9sbC13cmFwIj4KICAgICAgICAgICAgPCEtLSBDb250YWluZXIgdGhhdCBob2xkcyBzbGlkZXMuCiAgICAgICAgICAgICAgICBQaG90b1N3aXBlIGtlZXBzIG9ubHkgMyBvZiB0aGVtIGluIERPTSB0byBzYXZlIG1lbW9yeS4KICAgICAgICAgICAgICAgIERvbid0IG1vZGlmeSB0aGVzZSAzIHBzd3BfX2l0ZW0gZWxlbWVudHMsIGRhdGEgaXMgYWRkZWQgbGF0ZXIgb24uIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19jb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSBEZWZhdWx0IChQaG90b1N3aXBlVUlfRGVmYXVsdCkgaW50ZXJmYWNlIG9uIHRvcCBvZiBzbGlkaW5nIGFyZWEuIENhbiBiZSBjaGFuZ2VkLiAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fdWkgcHN3cF9fdWktLWhpZGRlbiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX190b3AtYmFyIj4KICAgICAgICAgICAgICAgICAgICA8IS0tICBDb250cm9scyBhcmUgc2VsZi1leHBsYW5hdG9yeS4gT3JkZXIgY2FuIGJlIGNoYW5nZWQuIC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NvdW50ZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWNsb3NlIiB0aXRsZT0iQ2xvc2UgKEVzYykiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLXNoYXJlIiB0aXRsZT0iU2hhcmUiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWZzIiB0aXRsZT0iVG9nZ2xlIGZ1bGxzY3JlZW4iPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLXpvb20iIHRpdGxlPSJab29tIGluL291dCI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBQcmVsb2FkZXIgZGVtbyBodHRwOi8vY29kZXBlbi5pby9kaW1zZW1lbm92L3Blbi95eUJXb1IgLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBlbGVtZW50IHdpbGwgZ2V0IGNsYXNzIHBzd3BfX3ByZWxvYWRlci0tYWN0aXZlIHdoZW4gcHJlbG9hZGVyIGlzIHJ1bm5pbmcgLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19pY24iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fY3V0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fZG9udXQiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2hhcmUtbW9kYWwgcHN3cF9fc2hhcmUtbW9kYWwtLWhpZGRlbiBwc3dwX19zaW5nbGUtdGFwIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19zaGFyZS10b29sdGlwIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLWxlZnQiIHRpdGxlPSJQcmV2aW91cyAoYXJyb3cgbGVmdCkiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLXJpZ2h0IiB0aXRsZT0iTmV4dCAoYXJyb3cgcmlnaHQpIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb24iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb25fX2NlbnRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICQoJy5ham91dF9zZWxlY3Rpb24nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHsKCiAgICAgICAgdmFyIGlkID0gJCh0aGlzKS5hdHRyKCdkYXRhLWJpZW5pZCcpOwoKICAgICAgICBtYXNlbGVjdGlvbignJywgaWQsICdhZGQnLCBmdW5jdGlvbihyZXRvdXIpIHsKCiAgICAgICAgICAgIHZhciBhbmltX3RpbWVvdXQ7CiAgICAgICAgICAgIHZhciBhbmltMl90aW1lb3V0OwogICAgICAgICAgICB2YXIgcmVtb3ZlX3RpbWVvdXQ7CgogICAgICAgICAgICBjbGVhclRpbWVvdXQoYW5pbV90aW1lb3V0KTsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW0yX3RpbWVvdXQpOwogICAgICAgICAgICBjbGVhclRpbWVvdXQocmVtb3ZlX3RpbWVvdXQpOwoKICAgICAgICAgICAgaWYgKHJldG91cikgewoKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFwcGVuZFRvKCdib2R5JykuYWRkQ2xhc3MoJ2FsZXJ0IG9uY2UnKS5hcHBlbmQoJzxwPicgKyBtZXNzYWdlWzBdICsgJzwvcD4nKTsKCiAgICAgICAgICAgICAgICB2YXIgbmJfc2VsZWN0aW9uID0gcGFyc2VJbnQoJCgnLm5iX3NlbGVjdGlvbicpLnRleHQoKSkgKyAxOwogICAgICAgICAgICAgICAgJCgnLm5iX3NlbGVjdGlvbicpLnRleHQobmJfc2VsZWN0aW9uKTsKCiAgICAgICAgICAgICAgICBhbmltX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5hZGRDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICBhbmltMl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnb25jZScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDApOwoKICAgICAgICAgICAgICAgICAgICB9LCAxNTAwKTsKCiAgICAgICAgICAgICAgICB9LCAxMDApOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFwcGVuZFRvKCdib2R5JykuYWRkQ2xhc3MoJ2FsZXJ0IGRvbmUnKS5hcHBlbmQoJzxwPicgKyBtZXNzYWdlWzFdICsgJzwvcD4nKTsKCiAgICAgICAgICAgICAgICBhbmltX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5hZGRDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICBhbmltMl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnZG9uZScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDApOwoKICAgICAgICAgICAgICAgICAgICB9LCAxNTAwKTsKCiAgICAgICAgICAgICAgICB9LCAxMDApOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBmYWxzZTsKCiAgICB9KTsKCgkkKCcuZW52b2lfYW1pJykub24oJ2NsaWNrJyxmdW5jdGlvbigpewoJCSQoJy5mb3JtLWFtaScpLnN1Ym1pdCgpOwoJCXJldHVybiBmYWxzZTsKCX0pOwoKCSQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CgkJJCgnLnNoYXJlX2J1dHRvbnMnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CgkJCXZhciB2b2lsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJCQkkKHZvaWxlKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdib3hfc2hhcmUnKTsKCQkJdmFyIG5ld05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCQkJdmFyIG5ld05vZGUyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgkJCXZhciB2ZXJ0aWNhbF9jZW50ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CgkJCXZhciB2ZXJ0aWNhbF9jZW50ZXIyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwoJCQl2YXIgY2xvc2Vfc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKCQkJJChuZXdOb2RlKS5hcHBlbmRUbyh2b2lsZSkuYXBwZW5kKCc8aDE+UGFydGFnZXIgY2UgbGllbjwvaDE+Jyk7CgkJCSQobmV3Tm9kZTIpLmFwcGVuZFRvKG5ld05vZGUpLmF0dHIoJ2lkJywnc2hhcmVtZScpLmFkZENsYXNzKCdzaGFycnJlJyk7CgkJCSQodmVydGljYWxfY2VudGVyKS5hcHBlbmRUbyh2b2lsZSkuYWRkQ2xhc3MoJ3ZlcnRpY2FsX2NlbnRlcicpOwoJCQkkKGNsb3NlX3NwYW4pLmFwcGVuZFRvKG5ld05vZGUpLmFkZENsYXNzKCdjbG9zZV9zaGFyZSBpY29fY2xvc2UnKTsKCQkJJCh2ZXJ0aWNhbF9jZW50ZXIyKS5hcHBlbmRUbyhuZXdOb2RlKS5hZGRDbGFzcygndmVydGljYWxfY2VudGVyJyk7CgkJCSQoJy5ib3hfc2hhcmUnKS5mYWRlSW4oMzAwKTsKCgkJCSQoJyNzaGFyZW1lJykuc2hhcnJyZSh7CgkJCQlzaGFyZTogewoJCQkJCXR3aXR0ZXI6IHRydWUsCgkJCQkJZmFjZWJvb2s6IHRydWUsCgkJCQkJZ29vZ2xlUGx1czogdHJ1ZSwKCQkJCQlwaW50ZXJlc3Q6dHJ1ZQoJCQkJfSwKICAgICAgICAgICAgICAgIGJ1dHRvbnM6IHsKICAgICAgICAgICAgICAgICAgICBwaW50ZXJlc3Q6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWE6ICdodHRwczovL3d3dy5sYXJnaWVyLmZyLycucmVwbGFjZSgvXC8kLywgJycpICsgJy8nICsgJy9kYXRhcy9iaWVucy90aHVtYnMvNzU4Lzc1OF8wMC0yMDIwLTAyLTI4LTE0MDYuanBlZycucmVwbGFjZSgvXlwvLywgJycpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKCQkJCXRlbXBsYXRlOiAgICc8dWw+XG5cCgkJCQkJCQkJPGxpPlxuXAoJCQkJCQkJCQk8YSBocmVmPSIjIiBjbGFzcz0iZmFjZWJvb2siPlxuXAoJCQkJCQkJCQkJPHNwYW4gY2xhc3M9Imljb19mYWNlYm9vayI+PC9zcGFuPlxuXAoJCQkJCQkJCQkJPHNwYW4+RmFjZWJvb2s8L3NwYW4+XG5cCgkJCQkJCQkJCTwvYT5cblwKCQkJCQkJCQk8L2xpPlxuXAoJCQkJCQkJCTxsaT5cblwKCQkJCQkJCQkJPGEgaHJlZj0iIyIgY2xhc3M9InR3aXR0ZXIiPlxuXAoJCQkJCQkJCQkJPHNwYW4gY2xhc3M9Imljb190d2l0dGVyIj48L3NwYW4+XG5cCgkJCQkJCQkJCQk8c3Bhbj5Ud2l0dGVyPC9zcGFuPlxuXAoJCQkJCQkJCQk8L2E+XG5cCgkJCQkJCQkJPC9saT5cblwKCQkJCQkJCQk8bGk+XG5cCgkJCQkJCQkJCTxhIGhyZWY9IiMiIGNsYXNzPSJnb29nbGVwbHVzIj5cblwKCQkJCQkJCQkJCTxzcGFuIGNsYXNzPSJpY29fZ29vZ2xlcGx1cyI+PC9zcGFuPlxuXAoJCQkJCQkJCQkJPHNwYW4+R29vZ2xlICs8L3NwYW4+XG5cCgkJCQkJCQkJCTwvYT5cblwKCQkJCQkJCQk8L2xpPlxuXAoJCQkJCQkJCTxsaT5cblwKCQkJCQkJCQkJPGEgaHJlZj0iIyIgY2xhc3M9InBpbnRlcmVzdCI+XG5cCgkJCQkJCQkJCQk8c3BhbiBjbGFzcz0iaWNvX3BpbnRlcmVzdCI+PC9zcGFuPlxuXAoJCQkJCQkJCQkJPHNwYW4+UGludGVyZXN0PC9zcGFuPlxuXAoJCQkJCQkJCQk8L2E+XG5cCgkJCQkJCQkJPC9saT5cblwKCQkJCQkJCTwvdWw+JywKCQkJCXVybEN1cmw6ICcnLCAgICAvLyAgZGlzYWJsZSBzaGFycnJlLnBocAoJCQkJZW5hYmxlSG92ZXI6IGZhbHNlLAoJCQkJZW5hYmxlVHJhY2tpbmc6IGZhbHNlLAoJCQkJcmVuZGVyOiBmdW5jdGlvbihhcGksIG9wdGlvbnMpewoJCQkJCSQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcudHdpdHRlcicsIGZ1bmN0aW9uKCkgewoJCQkJCQl0cnkgewoJCQkJCQkJYXBpLm9wZW5Qb3B1cCgndHdpdHRlcicpOwoJCQkJCQl9CgkJCQkJCWZpbmFsbHkgewoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQl9CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9KTsKCQkJCQkkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLmZhY2Vib29rJywgZnVuY3Rpb24oKSB7CgkJCQkJCXRyeSB7CgkJCQkJCQlhcGkub3BlblBvcHVwKCdmYWNlYm9vaycpOwoJCQkJCQl9CgkJCQkJCWZpbmFsbHkgewoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQl9CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9KTsKCQkJCQkkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLmdvb2dsZXBsdXMnLCBmdW5jdGlvbigpIHsKCQkJCQkJdHJ5IHsKCQkJCQkJCWFwaS5vcGVuUG9wdXAoJ2dvb2dsZVBsdXMnKTsKCQkJCQkJfQoJCQkJCQlmaW5hbGx5IHsKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfSk7CgkJCQkJJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy5waW50ZXJlc3QnLCBmdW5jdGlvbigpIHsKCQkJCQkJdHJ5IHsKCQkJCQkJCWFwaS5vcGVuUG9wdXAoJ3BpbnRlcmVzdCcpOwoJCQkJCQl9CgkJCQkJCWZpbmFsbHkgewoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQl9CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9KTsKCQkJCX0KCQkJfSk7CgoJCQkkKCdib2R5LGh0bWwnKS5jc3MoewoJCQkJJ292ZXJmbG93JzonaGlkZGVuJwoJCQl9KTsKCgkJCSQoJy5jbG9zZV9zaGFyZScpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKCgkJCQkkKCcuYm94X3NoYXJlJykuZmFkZU91dCgzMDApOwoKCQkJCSQoJ2JvZHksaHRtbCcpLmNzcyh7CgkJCQkJJ292ZXJmbG93JzondmlzaWJsZScKCQkJCX0pOwoJCQkJJCgnLmJveF9zaGFyZScpLnJlbW92ZSgpOwoJCQl9KTsKCgkJCXJldHVybiBmYWxzZTsKCQl9KTsKCX0pOwoKICAgIDwvc2NyaXB0PgoKICAgIDxmb290ZXI+CiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl90b3AiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2dvRm9vdGVyIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci8iIHRpdGxlPSJBZ2VuY2UgTGFyZ2llciBJbW1vYmlsaWVyIGRlIFByZXN0aWdlIGRhbnMgbGUgOGUgZXQgT3Vlc3QgUGFyaXNpZW4iPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvbG9nby5wbmciIGFsdD0iQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMgLSBBY2hhdCBhcHBhcnRlbWVudHMgcGFyaXMgOMOobWUiPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWdlbmNlc19mb290ZXIiPgogICAgICAgICAgICAgICAgPGEgaXRlbXNjb3BlPSJpdGVtc2NvcGUiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9SZWFsRXN0YXRlQWdlbnQiIGhyZWY9Ii9mci9hZ2VuY2UtaW1tb2JpbGllcmUtcHJlc3RpZ2UtbGFyZ2llci1wYXJpcy8iIHRpdGxlPSJBZ2VuY2VzIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIHVuZSBIaXN0b2lyZSBQYXJpc2llbm5lIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnJhbmQiIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzPC9zcGFuPjxzcGFuIGNsYXNzPSJ0aXJldCI+Jm5ic3A7LSZuYnNwOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibG9jYXRpb24iPjMyIEJvdWxldmFyZCBNYWxlc2hlcmJlcyZuYnNwOwogICAgICAgICAgICAgICAgICAgIDc1MDA4Jm5ic3A7UGFyaXM8c3BhbiBjbGFzcz0idGlyZXQiPiZuYnNwOy0mbmJzcDs8L3NwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPjAxIDQyIDY1IDE4IDgzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPGEgaXRlbXNjb3BlPSJpdGVtc2NvcGUiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9SZWFsRXN0YXRlQWdlbnQiIGhyZWY9Ii9mci9hZ2VuY2UtaW1tb2JpbGllcmUtcHJlc3RpZ2UtbGFyZ2llci1wYXJpcy8iIHRpdGxlPSJBZ2VuY2VzIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIHVuZSBIaXN0b2lyZSBQYXJpc2llbm5lIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnJhbmQiIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzPC9zcGFuPjxzcGFuIGNsYXNzPSJ0aXJldCI+Jm5ic3A7LSZuYnNwOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibG9jYXRpb24iPjcxLCBydWUgZGUgbGEgUG9tcGUmbmJzcDsKICAgICAgICAgICAgICAgICAgICA3NTExNiZuYnNwO1BhcmlzPHNwYW4gY2xhc3M9InRpcmV0Ij4mbmJzcDstJm5ic3A7PC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0idGVsZXBob25lIj4wMSA4NiA5NSAyMyA3Njwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGNsYXNzPSJtZW50aW9uc19mb290ZXIiIGhyZWY9Imh0dHBzOi8vbS5sYXJnaWVyLmZyLyZtb2JpbGU9MSIgdGl0bGU9IlNpdGUgbW9iaWxlIj5TaXRlIG1vYmlsZTwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InNlbyI+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzb2NpYWxMaW5rcyI+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImZhY2Vib29rIiBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vTGFyZ2llci1BZ2VuY2UtRGVzLUFtYmFzc2FkZXMtUGFyaXMtMTQ5MjQxMjc5MDk5NjgzOC8iIHRpdGxlPSJGYWNlYm9vayAtIEFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzLCBBY2hhdCBhcHBhcnRlbWVudHMgcGFyaXMgOMOobWUiPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ0d2l0dGVyIiBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2xhcmdpZXJhZ2VuY2UiIHRpdGxlPSJUd2l0dGVyIC0gQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMsIEFnZW5jZSBpbW1vYmlsacOocmUgZGUgcHJlc3RpZ2UgNzUwMDggcGFyaXMiPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJpbnN0YWdyYW0iIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vbGFyZ2llcmFnZW5jZS8iIHRpdGxlPSJJbnN0YWdyYW0gLSBBZ2VuY2UgTGFyZ2llciAtIEFnZW5jZSBkZXMgQW1iYXNzYWRlcywgQXBwYXJ0ZW1lbnRzIG1haXNvbnMgaMO0dGVscyBwYXJ0aWN1bGllcnMgcGFyaXMgNzUiPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzEiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci8iIHRpdGxlPSJBZ2VuY2UgTGFyZ2llciBJbW1vYmlsaWVyIGRlIFByZXN0aWdlIGRhbnMgbGUgOGUgZXQgT3Vlc3QgUGFyaXNpZW4iPkFjY3VlaWw8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvYWdlbmNlLWltbW9iaWxpZXJlLXByZXN0aWdlLWxhcmdpZXItcGFyaXMvIiB0aXRsZT0iQWdlbmNlcyBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyB1bmUgSGlzdG9pcmUgUGFyaXNpZW5uZSI+RGVwdWlzIDE4NTk8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci92ZW50ZS1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWxzLXBhcnRpY3VsaWVyLXBhcmlzLWxhcmdpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iSW1tb2JpbGllciBlbiBWZW50ZSBhdmVjIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIj5Ob3MgYmllbnM8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci92ZW5kcmUtZXN0aW1hdGlvbi1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWxzLXBhcnRpY3VsaWVycy1wYXJpcy8iIHRpdGxlPSJWZW5kcmUgdm90cmUgYmllbiBzdXIgUGFyaXMgZXQgw45sZSBkZSBGcmFuY2UiPlZlbmRyZSBhdmVjIExhcmdpZXI8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9hY3F1ZXJpci1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWwtcGFydGljdWxpZXItcGFyaXMvIiB0aXRsZT0iQWNoZXRlciB2b3RyZSBiaWVuIHN1ciBQYXJpcyBldCDDj2xlIGRlIEZyYW5jZSI+QWNxdcOpcmlyIGF2ZWMgTGFyZ2llcjwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ic2VvMiI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL21hLXNlbGVjdGlvbi1pbW1vYmlsaWVyLWxhcmdpZXItcGFyaXMvIiB0aXRsZT0iU8OpbGVjdGlvbm5lciBhbm5vbmNlIGltbW9iaWxpw6hyZSI+TWEgc8OpbGVjdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9leHBlcnRpc2UtaW1tb2JpbGllci1wYXJpcy1sYXJnaWVyLyIgdGl0bGU9IkV4cGVydGlzZXIgdm90cmUgYmllbiBQYXJpcyBldCDDj2xlIGRlIEZyYW5jZSI+RXhwZXJ0aXNlIExhcmdpZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvYWN0dWFsaXRlcy1pbW1vYmlsaWVyLXBhcmlzLWxhcmdpZXIvIiB0aXRsZT0iTOKAmWFjdHVhbGl0w6kgTGFyZ2llciI+QWN0dWFsaXTDqXMgTGFyZ2llcjwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzMiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci92ZW50ZS1hY2hhdC1hcHBhcnRlbWVudHMtcGFyaXNpZW5zLXBhcmlzLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkFwcGFydGVtZW50cyBQYXJpc2llbnMgZW4gdmVudGUgcGFyIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIj5BcHBhcnRlbWVudHMgUGFyaXNpZW5zPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3ZlbnRlLXByb3ByaWV0ZXMtbWFpc29ucy1ob3RlbHMtcGFydGljdWxpZXItY2hhdGVhdXgtbGFyZ2llci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBQcm9wcmnDqXTDqXMsIE1haXNvbnMsIEjDtHRlbHMgUGFydGljdWxpZXIgZXQgQ2jDonRlYXV4IExhcmdpZXIiPlByb3ByacOpdMOpcywgTWFpc29ucywgQ2jDonRlYXV4IGV0IEjDtHRlbHMgUGFydGljdWxpZXJzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL2JpZW5zLXZlbmR1cy1hZ2VuY2UtaW1tb2JpbGllcmUtbGFyZ2llci8iIHRpdGxlPSJCaWVucyB2ZW5kdXMgcGFyIGzigJlBZ2VuY2UgTGFyZ2llciBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMiPlNpZ27DqSBwYXIgTGFyZ2llcjwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzQiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9hY2hhdC1hcHBhcnRlbWVudC1wYXJpcy03NTAwOC03NTAwMS8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudHMgUGFyaXMgNzUwMDgtNzUwMDEiPkFjaGF0IC8gQXBwYXJ0ZW1lbnRzIC8gUGFyaXMgLyA3NTAwOCAvIDc1MDAxPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3ZlbnRlLWhvdGVscy1wYXJ0aWN1bGllcnMtbWFpc29ucy1wYXJpcy03NTAwOC03NTAxNi03NTAxNy8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSAgSMO0dGVscyBQYXJ0aWN1bGllcnMgZXQgTWFpc29ucyA3NTAwOC03NTAxNi03NTAxNyI+SMO0dGVsIHBhcnRpY3VsaWVyIC8gTWFpc29uIC8gUGFyaXMgLyA3NTAwOCAvIDc1MDE2IC8gNzUwMTc8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvdmVudGUtYXBwYXJ0ZW1lbnRzLXBhcmlzLTE2ZW1lLTE3ZW1lLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50cyBQYXJpcyAxNsOobWUgTm9yZCBldCAxN8OobWUiPkFwcGFydGVtZW50IC8gUGFyaXMgMTbDqG1lIE5vcmQgLyAxN8OobWU8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvYWNoYXQtaW1tb2JpbGllci1kZS1wcmVzdGlnZS03NTAwOC03NTAxNi03NTAxNy8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJJbW1vYmlsaWVyIGRlIHByZXN0aWdlIFBhcmlzIE91ZXN0Ij5BY2hhdCAvIEltbW9iaWxpZXIgZGUgcHJlc3RpZ2UgLyA3NTAwOCAvIFBhcmlzIDE2w6htZSBub3JkIC8gMTfDqG1lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3ZlbnRlLW1haXNvbnMtaG90ZWxzLXBhcnRpY3VsaWVycy1wcm9wcmlldGVzLWNoYXRlYXV4LW9pc2UvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgTWFpc29ucywgSMO0dGVscyBQYXJ0aWN1bGllcnMsIFByb3ByacOpdMOpcyBldCBDaMOidGVhdXggZGFucyBs4oCZT2lzZSI+TWFpc29uIC8gSMO0dGVsIFBhcnRpY3VsaWVyIC8gUHJvcHJpw6l0w6kgLyBDaMOidGVhdSAvIE9pc2U8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvdmVudGUtbWFpc29ucy1oYXV0cy1kZS1zZWluZS15dmVsaW5lcy1lc3Nvbm5lLXNlaW5lLWV0LW1hcm5lLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIG1haXNvbnMgSGF1dHMgZGUgc2VpbmUsIFl2ZWxpbmVzLCBFc3Nvbm5lIGV0IFNlaW5lIGV0IE1hcm5lIj5NYWlzb24gLyBIYXV0cy1kZS1TZWluZSAvIFl2ZWxpbmVzIC8gRXNzb25uZSAvIFNlaW5lIGV0IE1hcm5lPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWwiPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvbWVudGlvbnMtbGVnYWxlcy1hZ2VuY2UtbGFyZ2llci8iIHRpdGxlPSJNZW50aW9ucyBsw6lnYWxlcyI+TWVudGlvbnMgbMOpZ2FsZXMgLyBCYXLDqG1lPC9hPiAtCiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9wYXJ0ZW5haXJlcy1pbW1vYmlsaWVycy1hZ2VuY2UtbGFyZ2llci8iIHRpdGxlPSJQYXJ0ZW5haXJlcyBkZSAgbOKAmUFnZW5jZSBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyI+UGFydGVuYWlyZXM8L2E+IC0KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5hZ2VuY2UtcGx1cy5mciIgdGl0bGU9IkFnZW5jZSBQbHVzLCBzb2x1dGlvbnMgcG91ciBsZXMgcHJvZmVzc2lvbm5lbHMgZGUgbCdpbW1vYmlsaWVyIj5Sw6lhbGlzYXRpb24gQWdlbmNlIFBsdXM8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9mb290ZXI+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgbGlzdF9saSA9ICQoJ2Zvb3RlciB1bC5zZW8xIGxpJyk7CgogICAgZm9yKHZhciBpPTA7aTxsaXN0X2xpLmxlbmd0aDtpKyspewoKICAgICAgICB2YXIgY3VycmVudF9lbGVtID0gbGlzdF9saVtpXTsKCiAgICAgICAgaWYoaSA9PSA0KXsKICAgICAgICAgICAgJChjdXJyZW50X2VsZW0pLnByZXBlbmRUbygnZm9vdGVyIC5zZW8yJyk7CiAgICAgICAgfSBlbHNlIGlmKGkgPT0gNSl7CiAgICAgICAgICAgICQoY3VycmVudF9lbGVtKS5pbnNlcnRBZnRlcignZm9vdGVyIC5zZW8yIGxpOm50aC1jaGlsZCgxKScpOwogICAgICAgIH1lbHNlIGlmKGkgPT0gNil7CiAgICAgICAgICAgICQoY3VycmVudF9lbGVtKS5pbnNlcnRBZnRlcignZm9vdGVyIC5zZW8yIGxpOm50aC1jaGlsZCgyKScpOwogICAgICAgIH0KICAgIH0KPC9zY3JpcHQ+Cgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKICAgIChmdW5jdGlvbigpewogICAgICAgIHZhciBmbkZvb3RlciA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBmID0gJCgnZm9vdGVyJyk7CiAgICAgICAgICAgIGlmIChmLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHZhciBtaW5IZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCkgLSBmLmlubmVySGVpZ2h0KCk7CiAgICAgICAgICAgICAgICBmLmNzcyh7cG9zaXRpb246J3N0YXRpYyd9KTsKICAgICAgICAgICAgICAgIGlmKGYub2Zmc2V0KCkudG9wIDwgbWluSGVpZ2h0KXsKICAgICAgICAgICAgICAgICAgICBmLmNzcyh7cG9zaXRpb246J2Fic29sdXRlJywgJ2JvdHRvbSc6JzAnfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZuRm9vdGVyKTsKICAgICAgICAkKHdpbmRvdykucmVzaXplKGZuRm9vdGVyKTsKICAgIH0pKCk7Cgo8L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPgo=
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:35 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-788/vente-appartement-1-piece-paris-75008/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:35 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=rupgf5baeopfl66k276jovp7p2; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:35 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-778/vente-appartement-5-pieces-3-chambres-paris-75008/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:35 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=jik4evb7p02ca4h10pkkhio8n3; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:35 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-773/vente-appartement-5-pieces-3-chambres-paris-75008/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:35 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=spmiqt1kl2ld4uif02bi2o3643; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:35 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la3-234/vente-appartement-4-pieces-2-chambres-paris-75116/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:35 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=603vq7jm9eivcou3pus4t6klj7; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:35 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-780/vente-appartement-7-pieces-5-chambres-paris-75009/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:36 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=7qb31f2d5hslq1e1en20ci4pl3; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:36 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-757/vente-appartement-3-pieces-1-chambre-paris-75008/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:36 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=f615iu40406m82mumius8likb2; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4KPGhlYWQ+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiLz4KCiAgICA8dGl0bGU+VmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgOCBNYWRlbGVpbmUvIHN0IGF1Z3VzdGluIC0gQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXM8L3RpdGxlPgoKICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJEw6l0YWlscyBkZSBsJ2Fubm9uY2UgaW1tb2JpbGnDqHJlIHZlbnRlIGFwcGFydGVtZW50IDMgcGnDqGNlcyBQQVJJUyA3NTAwOCAxIGNoYW1icmUgNTcuMjMgbcKyIFByaXggNjMwIDAwMCDigqwgUsOpZsOpcmVuY2UgTEEyLTc1NyIvPgogICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9IkFnZW5jZSBpbW1vYmlsacOocmUgZGUgcHJlc3RpZ2UsYWNoYXQsdmVudGUsYXBwYXJ0ZW1lbnRzIHBhcmlzaWVucyxoYXVzc21hbm5pZW4sbWFpc29ucyxow7R0ZWxzIHBhcnRpY3VsaWVycyxwcm9wcmnDqXTDqXMsY2jDonRlYXV4LGxvZnQsZHVwbGV4LGltbWV1YmxlcyxjYWJpbmV0IGxhcmdpZXIgNzUwMDgscGFyaXMsaWxlIGRlIGZyYW5jZSxhZ2VuY2UgZGVzIGFtYmFzc2FkZXMsZXN0aW1hdGlvbixleHBlcnRpc2UsaW1tb2JpbGllcixiaWVucyBpbW1vYmlsaWVycyxyw6lzaWRlbnRpZWwiIC8+CiAgICA8bWV0YSBuYW1lPSJyZXZpc2l0LWFmdGVyIiBjb250ZW50PSIxMCBkYXlzIiAvPgogICAgPG1ldGEgbmFtZSA9ImZvcm1hdC1kZXRlY3Rpb24iIGNvbnRlbnQgPSAidGVsZXBob25lPW5vIiAvPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZSIgY29udGVudD0ieWVzIi8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZSIgY29udGVudD0iQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMiLz4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgiLz4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSIgLz4KCiAgICA8YmFzZSBocmVmPSJodHRwczovL3d3dy5sYXJnaWVyLmZyLyIgLz4KCiAgICA8IS0tPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvanF1ZXJ5LTIuMS4xLm1pbi5qcyI+PC9zY3JpcHQ+LS0+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9qcXVlcnkuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL1NjYWxlSW1hZ2UubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL2pxdWVyeS5jeWNsZTIubWluLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9qcXVlcnkubXVsdGlwbGUuc2VsZWN0LmpzIj48L3NjcmlwdD4KCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL2pxdWVyeS5zaGFycnJlLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9tc2Ryb3AuY3NzIiAvPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fZGVmYXVsdC9yZXNldC5jc3MiIC8+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvcGhvdG9zd2lwZS5jc3MiIC8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9kZWZhdWx0LXNraW4uY3NzIiAvPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL3N0eWxlLmNzcz8yMDE3MDQyND0iLz4KCiAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImVuIiBocmVmPSJodHRwczovL3d3dy5sYXJnaWVyLmZyL2VuL3NhbGUtaG91c2UtYXBhcnRtZW50LW1hbnNpb24tcGFyaXMtbGFyZ2llci9yZWYtbGEyLTc1Ny9zYWxlLWFwYXJ0bWVudC0zLXJvb21zLTEtYmVkcm9vbS1wYXJpcy03NTAwOC9pbmRleC5waHAiIC8+CiAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9IiIgaHJlZj0iaHR0cHM6Ly9tLmxhcmdpZXIuZnIvZnIvdmVudGUtbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllci1wYXJpcy1sYXJnaWVyL3JlZi1sYTItNzU3L3ZlbnRlLWFwcGFydGVtZW50LTMtcGllY2VzLTEtY2hhbWJyZS1wYXJpcy03NTAwOC8iIC8+CgogICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9mYXZpY29uLmljbyIgLz4KCiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjYwLnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSI3Nng3NiIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL2FwcGxlVG91Y2hJY29uNzYucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjEyMHgxMjAiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjEyMC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTUyeDE1MiIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL2FwcGxlVG91Y2hJY29uMTUyLnBuZyI+CgogICAgPG1ldGEgbmFtZT0iYXBwbGljYXRpb24tbmFtZSIgY29udGVudD0iQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMiIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIgY29udGVudD0iIzAzNDY4YSIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlNzB4NzBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvbXNUb3VjaC9zbWFsbHRpbGUtNzB4NzAucG5nIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1zcXVhcmUxNTB4MTUwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL21zVG91Y2gvbWVkaXVtdGlsZS0xNTB4MTUwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24td2lkZTMxMHgxNTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9pbWFnZXMvbXNUb3VjaC93aWRldGlsZS0zMTB4MTUwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlMzEweDMxMGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9tc1RvdWNoL2xhcmdldGlsZS0zMTB4MzEwLnBuZyIgLz4KCiAgICA8IS0tW2lmIElFIF0+PHNjcmlwdCBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL21vZGVybml6ci5jdXN0b20uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdGUgSUUgOV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvcGxhY2Vob2xkZXJzLm1pbi5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIChndGUgSUUgNikmKGx0ZSBJRSA4KV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvc2VsZWN0aXZpenItbWluLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHQgSUUgOV0+PHNjcmlwdCBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL2NzczMtbWVkaWFxdWVyaWVzLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KCiAgICA8bGluayBocmVmPSdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9QWxlZ3JleWEnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPgoKCgo8L2hlYWQ+CjwhLS1baWYgbHQgSUUgN10+IDxib2R5IGNsYXNzPSJpZSBpZTYgaWU3XyBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU3IGllN18gaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA4XT4gICAgPGJvZHkgY2xhc3M9ImllIGllOCBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDldPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU5IGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDldPiA8Ym9keT48IVtlbmRpZl0tLT4KPCEtLVtpZiAhSUVdPjwhLS0+PGJvZHk+PCEtLTwhW2VuZGlmXS0tPgoJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgaWYgKCAkKHdpbmRvdykud2lkdGgoKSA8PSA3NjgpIHsKICAgICAgICAkKCdtZXRhW25hbWU9dmlld3BvcnRdJykuYXR0cignY29udGVudCcsJ3dpZHRoPTc2OCcpOwogICAgfQo8L3NjcmlwdD4KPGRpdiBpZD0ibWFpbiIgY2xhc3M9ImFubm9uY2VzLWRlZmF1bHQiPgogICAgPGhlYWRlcj4KICAgIDxkaXYgY2xhc3M9InRvcF9oZWFkZXIiPgogICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvZ28iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxhcmdpZXIuZnIvIiB0aXRsZT0iQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL2xvZ28ucG5nIiBhbHQ9IkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzIC0gQWNoYXQgYXBwYXJ0ZW1lbnRzIHBhcmlzIDjDqG1lIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPG5hdj4KICAgIDx1bCBjbGFzcz0ibWFpbk1lbnUiPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyLyIgdGl0bGU9IkFnZW5jZSBMYXJnaWVyIEltbW9iaWxpZXIgZGUgUHJlc3RpZ2UgZGFucyBsZSA4ZSBldCBPdWVzdCBQYXJpc2llbiIgY2xhc3M9Imljb0FjY3VlaWwiPjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL2FnZW5jZS1pbW1vYmlsaWVyZS1wcmVzdGlnZS1sYXJnaWVyLXBhcmlzLyIgdGl0bGU9IkFnZW5jZXMgTGFyZ2llciBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMgdW5lIEhpc3RvaXJlIFBhcmlzaWVubmUiIGNsYXNzPSIiPkRlcHVpcyAxODU5PC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvdmVudGUtbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllci1wYXJpcy1sYXJnaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkltbW9iaWxpZXIgZW4gVmVudGUgYXZlYyBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyIgY2xhc3M9ImN1cnJlbnQiPk5vcyBiaWVuczwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3ZlbmRyZS1lc3RpbWF0aW9uLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbHMtcGFydGljdWxpZXJzLXBhcmlzLyIgdGl0bGU9IlZlbmRyZSB2b3RyZSBiaWVuIHN1ciBQYXJpcyBldCDDjmxlIGRlIEZyYW5jZSIgY2xhc3M9IiI+VmVuZHJlIGF2ZWMgTGFyZ2llcjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL2FjcXVlcmlyLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbC1wYXJ0aWN1bGllci1wYXJpcy8iIHRpdGxlPSJBY2hldGVyIHZvdHJlIGJpZW4gc3VyIFBhcmlzIGV0IMOPbGUgZGUgRnJhbmNlIiBjbGFzcz0iIj5BY3F1w6lyaXIgYXZlYyBMYXJnaWVyPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJmbGFnTGFuZyI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9lbi9zYWxlLWhvdXNlLWFwYXJ0bWVudC1tYW5zaW9uLXBhcmlzLWxhcmdpZXIvcmVmLWxhMi03NTcvc2FsZS1hcGFydG1lbnQtMy1yb29tcy0xLWJlZHJvb20tcGFyaXMtNzUwMDgvIiB0aXRsZT0iZW5nbGlzaCIgY2xhc3M9ImZsYWdTbGlkZU1lbnUiPmVuZ2xpc2g8L2E+PGltZyBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9mbGFncy9lbi5wbmciIGFsdD0iZW5nbGlzaCIgdGl0bGU9ImVuZ2xpc2giIC8+CiAgICAgICAgPC9saT4KICAgIDwvdWw+CiAgICA8dWwgY2xhc3M9InNlY29uZE1lbnUiPgogICAgICAgIDxsaSBjbGFzcz0ibW90ZXVyX2hlYWRlciI+CiAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VsZWN0aW9uX2hlYWRlciI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9tYS1zZWxlY3Rpb24taW1tb2JpbGllci1sYXJnaWVyLXBhcmlzLyIgdGl0bGU9IlPDqWxlY3Rpb25uZXIgYW5ub25jZSBpbW1vYmlsacOocmUiIGNsYXNzPSJzZWxlY3Rpb24iPgogICAgICAgICAgICAgICAgTWEgc8OpbGVjdGlvbiA6CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmJfc2VsZWN0aW9uIj4wPC9zcGFuPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL2VuL3NhbGUtaG91c2UtYXBhcnRtZW50LW1hbnNpb24tcGFyaXMtbGFyZ2llci9yZWYtbGEyLTc1Ny9zYWxlLWFwYXJ0bWVudC0zLXJvb21zLTEtYmVkcm9vbS1wYXJpcy03NTAwOC8iIHRpdGxlPSJlbmdsaXNoIiBjbGFzcz0iZmxhZyI+PGltZyBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2ltYWdlcy9mbGFncy9lbi5wbmciIGFsdD0iZW5nbGlzaCIgdGl0bGU9ImVuZ2xpc2giIC8+PC9hPgoKCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgPC91bD4KICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KPC9uYXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgKGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAkKCcuaWNvX21lbnUnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKCdoZWFkZXIgPiBkaXYgbmF2IHVsLm1haW5NZW51Jykuc2xpZGVUb2dnbGUoMjAwKTsKICAgICAgICAgICAgfSk7CgogICAgICAgIH0pKCk7CiAgICB9KTsKPC9zY3JpcHQ+CgoKCgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX21lbnUiPjwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJmb3JtX2hlYWRlciI+CiAgICA8ZGl2PgogICAgICAgIDxzcGFuIGNsYXNzPSJpY29fY2xvc2VfaGVhZGVyIj48L3NwYW4+CiAgICAgICAgPGZvcm0gaWQ9Im1vdGV1cl9mb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2ZyL3ZlbnRlLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbHMtcGFydGljdWxpZXItcGFyaXMtbGFyZ2llci8iPgogICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9Im11bHRpIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Imdlb19tdWx0aSI+VmlsbGVzPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9Imdlb19zZWN0ZXVyIiBtdWx0aXBsZT0ibXVsdGlwbGUiIG5hbWU9Imdlb19zZWN0ZXVyW10iPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InBhcmlzX3JpdmVfZHJvaXRlIiA+UGFyaXMgcml2ZSBkcm9pdGU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJwYXJpc19yaXZlX2dhdWNoZSIgPlBhcmlzIHJpdmUgZ2F1Y2hlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iaWxlX2RlX2ZyYW5jZSIgPsOObGUtZGUtRnJhbmNlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0icHJvdmluY2UiID5Qcm92aW5jZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkiPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZ2VvX211bHRpIj5WaWxsZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9Imdlb19tdWx0aSIgbmFtZT0iZ2VvX211bHRpW10iIG11bHRpcGxlPSJtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NjAyNzA7Z291dmlldXgiID5HT1VWSUVVWCAtIDYwMjcwPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7ODQxNjA7bG91cm1hcmluIiA+TE9VUk1BUklOIC0gODQxNjA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwODtwYXJpcyIgPlBBUklTIC0gNzUwMDg8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwOTtwYXJpcyIgPlBBUklTIC0gNzUwMDk8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAxNDtwYXJpcyIgPlBBUklTIC0gNzUwMTQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAxNTtwYXJpcyIgPlBBUklTIC0gNzUwMTU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAxNjtwYXJpcyIgPlBBUklTIC0gNzUwMTY8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTExNjtwYXJpcyIgPlBBUklTIC0gNzUxMTY8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyX3NlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZsZWNoZV9zZWxlY3QiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0eXBlIj5UeXBlIGRlIGJpZW48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9InR5cGUiIG5hbWU9InR5cGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPlR5cGUgZGUgYmllbjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJBcHBhcnRtZW50IiA+QXBwYXJ0ZW1lbnQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iSG91c2UiID5NYWlzb248L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmbGVjaGVfc2VsZWN0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY2hhbWJyZXMiIGlkPSJjaGFtYnJlcyIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9InNlbGVjdF9uYl9jaGFtYnJlcyIgbmFtZT0ibmJfY2hhbWJyZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPkNoYW1icmVzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEsMiI+MSAtIDIgY2hhbWJyZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMywiPisgMyBjaGFtYnJlczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmbGVjaGVfc2VsZWN0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1pbiIgaWQ9ImJ1ZGdldF9taW4iIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1heCIgaWQ9ImJ1ZGdldF9tYXgiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImJ1ZGdldCI+QnVkZ2V0PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0ic2VsZWN0X2J1ZGdldCIgbmFtZT0iYnVkZ2V0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+QnVkZ2V0PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwLDUwMDAwMCI+JmxzYXF1bzsgNTAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjUwMDAwMCwxMDAwMDAwIj41MDAgMDAwIOKCrCAtIDEgMDAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwMDAwMDAsMjAwMDAwMCI+MSAwMDAgMDAwIOKCrCAtIDIgMDAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMDAwMDAsIj4mcnNhcXVvOyAyIDAwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0icmVmZXJlbmNlIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJiaWVuX3JlZiI+UsOpZsOpcmVuY2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiBwbGFjZWhvbGRlcj0iUsOpZsOpcmVuY2UiIHZhbHVlPSIiIGNsYXNzPSJ2YWxldXIiLz4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icCIgaWQ9InAiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im5ld19yZXNlYXJjaCIgaWQ9Im5ld19yZXNlYXJjaCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlY2hhcmdlTVIiIGlkPSJyZWNoYXJnZU1SIiB2YWx1ZT0iMCIgLz4KICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJSZWNoZXJjaGVyIiAvPgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgIDwvZm9ybT4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL21vdGV1cl94aHJfbGlzdGNpdGllcy5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiAgICAkKCcjc2VsZWN0X2J1ZGdldCcpLm9uKCdjaGFuZ2UnLGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgdmFyIHZhbGV1ciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLnNlbGVjdF9idWRnZXQudmFsdWU7CiAgICAgICAgICAgIGlmICh2YWxldXIuaW5kZXhPZignLCcsMCkgPiAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgdGFidmFsID0gdmFsZXVyLnNwbGl0KCcsJyk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5idWRnZXRfbWluLnZhbHVlID0gdGFidmFsWzBdOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuYnVkZ2V0X21heC52YWx1ZSA9IHRhYnZhbFsxXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9taW4udmFsdWUgPSAnJzsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9tYXgudmFsdWUgPSAnJzsKICAgICAgICAgICAgfQoKICAgIH0pOwoKICAgIHZhciBuYl9jaGFtYnJlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmNoYW1icmVzLnZhbHVlOwogICAgdmFyIHZhbGV1ciA9IG5iX2NoYW1icmVzOwoKICAgIGlmIChuYl9jaGFtYnJlcyAhPSAnMCcpCiAgICB7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuc2VsZWN0X25iX2NoYW1icmVzLnZhbHVlID0gdmFsZXVyOwogICAgfQoKICAgIChmdW5jdGlvbigpewoKICAgICAgICAkKCcjc2VsZWN0X25iX2NoYW1icmVzJykub24oJ2NoYW5nZScsZnVuY3Rpb24oKSB7CgogICAgICAgICAgICB2YXIgdmFsZXVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuc2VsZWN0X25iX2NoYW1icmVzLnZhbHVlOwogICAgICAgICAgICBpZiAodmFsZXVyLmluZGV4T2YoJywnLDApID4gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuY2hhbWJyZXMudmFsdWUgPSB2YWxldXI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5jaGFtYnJlcy52YWx1ZSA9IHZhbGV1cjsKICAgICAgICAgICAgfQoKICAgICAgICB9KS5jaGFuZ2UoKTsKCiAgICB9KSgpOwoKICAgIHZhciBtb3RldXJPcGVuID0gZmFsc2U7CgogICAgJCgnLm1vdGV1cl9oZWFkZXInKS5vbignY2xpY2snLCBmdW5jdGlvbigpewogICAgICAgIGlmKG1vdGV1ck9wZW4gPT0gZmFsc2UpewoKICAgICAgICAgICAgbW90ZXVyT3BlbiA9IHRydWU7CgogICAgICAgICAgICAkKCcuZm9ybV9oZWFkZXInKS5zbGlkZURvd24oMjAwLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzondmlzaWJsZScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAgICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlVXAoMjAwLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzonaGlkZGVuJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9CgogICAgfSk7CgogICAgJCgnLmljb19jbG9zZV9oZWFkZXInKS5vbignY2xpY2snLCBmdW5jdGlvbigpewoKICAgICAgICBtb3RldXJPcGVuID0gZmFsc2U7CgogICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlVXAoMjAwKTsKCiAgICB9KTsKCiAgICAkKCcjZ2VvX211bHRpJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgIHBsYWNlaG9sZGVyOiAiTG9jYWxpc2F0aW9uIiwKICAgICAgICBzZWxlY3RBbGw6IGZhbHNlCiAgICB9KTsKCiAgICAgJCgnI2dlb19zZWN0ZXVyJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgIHBsYWNlaG9sZGVyOiAiU2VjdGV1ciIsCiAgICAgICAgc2VsZWN0QWxsOiBmYWxzZQogICAgfSk7CgogICAgIG1vdGV1cl94aHJfbGlzdGNpdGllcygiZ2VvX3NlY3RldXI7dHJhbnNhYzt0eXBlX2ltbW87YWRkcmVzc19kZXBhcnRlbWVudDthZGRyZXNzX3BheXMiLCB0cnVlLCAiIik7CgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKCgkJLy9idWRnZXQKICAgICAgICB2YXIgYnVkZ2V0X21pbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmJ1ZGdldF9taW4udmFsdWU7CiAgICAgICAgdmFyIGJ1ZGdldF9tYXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5idWRnZXRfbWF4LnZhbHVlOwogICAgICAgIGlmIChidWRnZXRfbWluID09ICcnKSBidWRnZXRfbWluID0gJzAnOwogICAgICAgIHZhciB2YWxldXIgPSBidWRnZXRfbWluICsgJywnICsgYnVkZ2V0X21heDsKICAgICAgICBpZiAoYnVkZ2V0X21pbiAhPSAnMCcgfHwgYnVkZ2V0X21heCAhPSAnJykKICAgICAgICB7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnNlbGVjdF9idWRnZXQudmFsdWUgPSB2YWxldXI7CiAgICAgICAgfQoKICAgIH0pOwoKCgoKPC9zY3JpcHQ+Cgo8L2hlYWRlcj4KCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmxhcmdpZXJmci9qcy9qcXVlcnkuamNhcm91c2VsLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYubGFyZ2llcmZyL2pzL3Bob3Rvc3dpcGUubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvanMvcGhvdG9zd2lwZS11aS1kZWZhdWx0Lm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9tYWpfc2VsZWN0aW9uLmpzIj48L3NjcmlwdD4KICAgIDxzZWN0aW9uIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUHJvZHVjdCIgaWQ9ImFubm9uY2VfcHJvZmlsIj4KCQk8aDEgaXRlbXByb3A9Im5hbWUiPlZlbnRlIEFwcGFydGVtZW50IFBhcmlzIDggTWFkZWxlaW5lLyBzdCBhdWd1c3RpbjwvaDE+CiAgICAgICAgPGRpdiBjbGFzcz0iZGlhcG9yYW1hX3RodW1icyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpYXBvcmFtYV9wcm9maWwiIGRhdGEtY3ljbGUtcGFnZXItdGVtcGxhdGU9IiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZSI+CgkJCQkJPGltZyBjbGFzcz0iYXV0b1NjYWxlIiBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iL2RhdGFzL2JpZW5zL2ltYWdlcy83MTUvNzE1XzAwLTIwMjAtMDItMTMtMTc0My5qcGciIGFsdD0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIi8+PHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYnNfY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImpjYXJvdXNlbC1wcmV2IGluYWN0aXZlIGljb19kZXRhaWxfcHJldiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN5Y2xlIiBkYXRhLWpjYXJvdXNlbD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRodW1icyBjeWNsZS1wYWdlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CgkJCQkJCQkJCTxpbWcgY2xhc3M9ImF1dG9TY2FsZSIgaXRlbXByb3A9ImltYWdlIiBzcmM9Ii9kYXRhcy9iaWVucy9pbWFnZXMvNzE1LzcxNV8wMC0yMDIwLTAyLTEzLTE3NDMuanBnIiBhbHQ9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA4KSIgdGl0bGU9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA4KSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqY2Fyb3VzZWwtbmV4dCBpbmFjdGl2ZSBpY29fZGV0YWlsX25leHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgoJCQkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJCS8vICBBZGRMb2FkRXZlbnQKCQkJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCQlmdW5jdGlvbiBBZGRMb2FkRXZlbnQoZnVuYykgewoJCQkJdmFyIG9sZG9ubG9hZCA9IHdpbmRvdy5vbmxvYWQ7CgkJCQlpZiAodHlwZW9mIHdpbmRvdy5vbmxvYWQgIT0gJ2Z1bmN0aW9uJykKCQkJCXsgd2luZG93Lm9ubG9hZCA9IGZ1bmM7IH0KCQkJCWVsc2UgewoJCQkJCXdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHsKCQkJCQkJaWYgKG9sZG9ubG9hZCkKCQkJCQkJeyBvbGRvbmxvYWQoKTsgfQoJCQkJCQlmdW5jKCk7CgkJCQkJfQoJCQkJfQoJCQl9CgogICAgICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbihlKSB7CgoJCQkJKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLndpZHRoKCkvMS41OwoKICAgICAgICAgICAgICAgICAgICAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOncrJ3B4JwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAkKCcudGh1bWJzX2NvbnRhaW5lcicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOncrJ3B4JwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIH0pKCk7CgogICAgICAgICAgICAgICAgLy8kKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmVtcHR5KCkuYXBwZW5kKCQoJy50aHVtYnMgPiBkaXYgPiBhJykuY2xvbmUoKSk7CgogICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jeWNsZSh7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzOic+IGRpdi5zbGlkZScsCiAgICAgICAgICAgICAgICAgICAgcGFnZXI6Jy5jeWNsZS1wYWdlcicsCiAgICAgICAgICAgICAgICAgICAgbWFudWFsU3BlZWQ6NDAwLAogICAgICAgICAgICAgICAgICAgIGZ4OiAnZmFkZScsCiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6MjAwMCwKICAgICAgICAgICAgICAgICAgICBzd2lwZTp0cnVlCiAgICAgICAgICAgICAgICB9KTsKCgkJCQkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgkJCQkvKioqKioqKkFERCBESUFQTyAxU1QgU0xJREUgVEhFTiBSRVNUIE9GIFRIRU0gQUZURVIgTE9BRCoqKioqKioqKiovCgkJCQkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgkJCQkoZnVuY3Rpb24oKXsKCgkJCQkJdmFyIHNsaWRlcyA9IFtdOwoKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDAtMjAyMC0wMi0xMy0xNzQzLmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDEtMjAyMC0wMi0xMy0xNzQzLmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDItMjAyMC0wMi0xMy0xNzQzLmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDMtMjAyMC0wMi0xMy0xNzQzLmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDQtMjAyMC0wMi0xMy0xNzQzLmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDUtMjAyMC0wMi0xMy0xNzQzLmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDYtMjAyMC0wMi0xMy0xNzQzLmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDctMjAyMC0wMi0xMy0xNzQzLmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDgtMjAyMC0wMi0xMy0xNzQzLmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpIiB9KTsKCgkJCQkJaWYoc2xpZGVzLmxlbmd0aCA+IDApewoJCQkJCQlzbGlkZXMuc2hpZnQoKTsKCQkJCQl9CgoJCQkJCWZ1bmN0aW9uIGltZ1ByZWxvYWQoc2xpZGVzLCBpZHgsIGNhbGxiYWNrKXsKCgkJCQkJCXZhciB0ZW1wSW1nID0gbmV3IEltYWdlKCk7CgkJCQkJCXZhciBPYmpTbGlkZSA9IHNsaWRlc1tpZHhdOwoJCQkJCQlpZihPYmpTbGlkZSA9PSBudWxsKXsKCQkJCQkJCXJldHVybjsKCQkJCQkJfQoKCQkJCQkJJCh0ZW1wSW1nKS5sb2FkKGZ1bmN0aW9uKCl7CgkJCQkJCQl2YXIgbmV3U2xpZGUgPSAnPGRpdiBjbGFzcz0ic2xpZGUiIGRhdGEtY3ljbGUtcGFnZXItdGVtcGxhdGU9IjxkaXY+PGRpdj48aW1nIGFsdD1cJycrT2JqU2xpZGUuYWx0KydcJyBzcmM9XCcnK09ialNsaWRlLnNyYysnXCcvPjwvZGl2PjwvZGl2PiI+PGltZyBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iJytPYmpTbGlkZS5zcmMrJyIgYWx0PSInK09ialNsaWRlLmFsdCsnIi8+PHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPjwvZGl2Pic7CgkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKCdhZGQnLCBuZXdTbGlkZSk7CgkJCQkJCQlJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzIGltZycpKTsKCQkJCQkJCS8vICBnbyBuZXh0CgkJCQkJCQlpZiAoaWR4ICsgMSA8IHNsaWRlcy5sZW5ndGgpewoJCQkJCQkJCWltZ1ByZWxvYWQoc2xpZGVzLCBpZHggKyAxLCBjYWxsYmFjayk7CgkJCQkJCQl9CgkJCQkJCQllbHNlIHsKCQkJCQkJCQlpZiAoY2FsbGJhY2sgIT0gbnVsbCl7CgkJCQkJCQkJCWNhbGxiYWNrKCk7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9KTsKCgkJCQkJCXRlbXBJbWcuc3JjID0gT2JqU2xpZGUuc3JjOwoJCQkJCX0KCgkJCQkJQWRkTG9hZEV2ZW50KGZ1bmN0aW9uKCl7CgoJCQkJCQlpbWdQcmVsb2FkKHNsaWRlcywwLCBmdW5jdGlvbigpewoKCQkJCQkJCSQoJy50aHVtYnMnKS5hZGRDbGFzcygnY3ljbGUtcGFnZXInKTsKCQkJCQkJCUltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgaW1nJykpOwoKCQkJCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkJCQkkKCcuY3ljbGUnKS5hZGRDbGFzcygnamNhcm91c2VsLW1hbicpOwoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbWFuJykuamNhcm91c2VsKHsKCQkJCQkJCQkJdmVydGljYWw6IHRydWUKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipDT05UUk9MIEJUTiBORVhUIFBSRVYgQ0FST1VTRUwqKioqLwoKCQkJCQkJCQkkKCcuamNhcm91c2VsLXByZXYnKS5vbignamNhcm91c2VsY29udHJvbDphY3RpdmUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJJCh0aGlzKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTsKCQkJCQkJCQl9KQoJCQkJCQkJCS5vbignamNhcm91c2VsY29udHJvbDppbmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLmFkZENsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLmpjYXJvdXNlbENvbnRyb2woewoJCQkJCQkJCQl0YXJnZXQ6ICctPTEnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbmV4dCcpLm9uKCdqY2Fyb3VzZWxjb250cm9sOmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLm9uKCdqY2Fyb3VzZWxjb250cm9sOmluYWN0aXZlJywgZnVuY3Rpb24oKSB7CgkJCQkJCQkJCSQodGhpcykuYWRkQ2xhc3MoJ2luYWN0aXZlJyk7CgkJCQkJCQkJfSkKCQkJCQkJCQkuamNhcm91c2VsQ29udHJvbCh7CgkJCQkJCQkJCXRhcmdldDogJys9MScKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipDT05UUk9MIENBUk9VU0VMIFZJQSBTTElERSBESUFQT1JBTUEqKioqLwoKCQkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLm9uKCdjeWNsZS1pbml0aWFsaXplZCcsIGZ1bmN0aW9uKCBldmVudCwgb3B0cyApIHsKCQkJCQkJCQkJJCgnLnRodW1icyA+IGRpdicpLnJlbW92ZUNsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKS5lcShvcHRzLmN1cnJTbGlkZSkuYWRkQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpOwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLm9uKCdjeWNsZS1iZWZvcmUnLCBmdW5jdGlvbiggZXZlbnQsIG9wdHMgKSB7CgkJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5yZW1vdmVDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJykuZXEob3B0cy5uZXh0U2xpZGUpLmFkZENsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKTsKCQkJCQkJCQkJJCgnLmpjYXJvdXNlbC1tYW4nKS5qY2Fyb3VzZWwoJ3Njcm9sbCcsIG9wdHMubmV4dFNsaWRlKTsKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipTRVQgVVAgQ0FST1VTRUwgQU5EIEhJUyBDSElMRFJFTiBXSURUSCoqKiovCgoJCQkJCQkJCXZhciB4ID0gJCgnLmpjYXJvdXNlbC1tYW4nKS5oZWlnaHQoKS80OwoJCQkJCQkJCXZhciB5ID0gJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aDsKCgkJCQkJCQkJJCgnLmpjYXJvdXNlbC1tYW4gLnRodW1icycpLmNzcyh7CgkJCQkJCQkJCSdoZWlnaHQnOngqeSsncHgnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5jc3MoewoJCQkJCQkJCQknaGVpZ2h0JzoxMDAveSsnJScKCQkJCQkJCQl9KTsKCgkJCQkJCQl9CgoJCQkJCQl9KTsKCQkJCQl9KTsKCgkJCQl9KSgpOwoKICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqSU5TVEFOQ0UgT1BFTlNXSVBFIERFVEFJTCBQSE9UTyoqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKICAgICAgICAgICAgICAgIHZhciBvcGVuUGhvdG9Td2lwZSA9IGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICAgICAgICAgICAgIHZhciBwc3dwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wc3dwJylbMF07CgogICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzE1LzcxNV8wMC0yMDIwLTAyLTEzLTE3NDMuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA4KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy83MTUvNzE1XzAxLTIwMjAtMDItMTMtMTc0My5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDItMjAyMC0wMi0xMy0xNzQzLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwOCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzE1LzcxNV8wMy0yMDIwLTAyLTEzLTE3NDMuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA4KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy83MTUvNzE1XzA0LTIwMjAtMDItMTMtMTc0My5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDUtMjAyMC0wMi0xMy0xNzQzLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwOCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvNzE1LzcxNV8wNi0yMDIwLTAyLTEzLTE3NDMuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA4KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy83MTUvNzE1XzA3LTIwMjAtMDItMTMtMTc0My5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDgpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzcxNS83MTVfMDgtMjAyMC0wMi0xMy0xNzQzLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwOCknLHc6JycsaDonJ30pOwoKICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBiZ09wYWNpdHk6JzAuOTUnLAogICAgICAgICAgICAgICAgICAgICAgICBjbG9zZU9uU2Nyb2xsOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0FuaW1hdGlvbkR1cmF0aW9uOiAzMDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVBbmltYXRpb25EdXJhdGlvbjogMzAwLAogICAgICAgICAgICAgICAgICAgICAgICAvL2NhcHRpb25FbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlRWw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBwaW5jaFRvQ2xvc2U6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBjbG9zZU9uVmVydGljYWxEcmFnOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIHZhciBnYWxsZXJ5ID0gbmV3IFBob3RvU3dpcGUocHN3cEVsZW1lbnQsIFBob3RvU3dpcGVVSV9EZWZhdWx0LCBpdGVtcywgb3B0aW9ucyk7CgogICAgICAgICAgICAgICAgICAgIGdhbGxlcnkuaW5pdCgpOwogICAgICAgICAgICAgICAgICAgIGdhbGxlcnkuZ29UbyhpbmRleCk7CgogICAgICAgICAgICAgICAgICAgIGdhbGxlcnkubGlzdGVuKCdjbG9zZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKCdyZXN1bWUnKTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykub24oICdjbGljaycsJ2RpdicsIGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICQodGhpcykuZGF0YSgiY3ljbGUub3B0cyIpLnNsaWRlTnVtIC0xOwoKICAgICAgICAgICAgICAgICAgICBvcGVuUGhvdG9Td2lwZShpbmRleCk7CgogICAgICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3ljbGUoJ3BhdXNlJyk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvL0lOU1RBTkNFIERJQVBPUkFNQSBGSUNIRSBCSUVOCiAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzIGltZycpKTsKCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB3ID0gJCgnLmRpYXBvcmFtYV9wcm9maWwnKS53aWR0aCgpLzEuNTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLnRodW1ic19jb250YWluZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9KSgpOwoKCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkvKioqKlNFVCBVUCBDQVJPVVNFTCBBTkQgSElTIENISUxEUkVOIFdJRFRIKioqKi8KCgkJCQkJdmFyIHggPSAkKCcuamNhcm91c2VsLW1hbicpLmhlaWdodCgpLzQ7CgkJCQkJdmFyIHkgPSAkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoOwoKCQkJCQkkKCcuamNhcm91c2VsLW1hbiAudGh1bWJzJykuY3NzKHsKCQkJCQkJJ2hlaWdodCc6eCp5KydweCcKCQkJCQl9KTsKCgkJCQkJJCgnLnRodW1icyA+IGRpdicpLmNzcyh7CgkJCQkJCSdoZWlnaHQnOjEwMC95KyclJwoJCQkJCX0pOwoKCQkJCX0KCiAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzID4gZGl2ID4gYSA+IGltZycpKTsKCiAgICAgICAgICAgIH0pOwoKICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IGNsYXNzPSJhbm5vbmNlX2RldGFpbCI+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgPGgyIGl0ZW1zY29wZSBpdGVtcHJvcD0iYXZhaWxhYmxlQXRPckZyb20iIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9QbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+TG9jYWxpc2F0aW9uIDogPHNwYW4gaXRlbXByb3A9ImFkZHJlc3MiPlBBUklTIDg8L3NwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlF1YXJ0aWVyIDogPHNwYW4gaXRlbXByb3A9ImFkZHJlc3MiPk1hZGVsZWluZS8gc3QgYXVndXN0aW48L3NwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgIDxwIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiIgY2xhc3M9ImRlc2NyaXB0aWYiPkwnYWdlbmNlIExBUkdJRVIgdm91cyBwcm9wb3NlLCBkYW5zIGxlIHF1YXJ0aWVyIGRlIGxhIE1hZGVsZWluZS0gU2FpbnQgYXVndXN0aW4sIGRhbnMgdW4gYmVsIGltbWV1YmxlIEhhdXNzbWFubmllbiBzaXR1w6kgYXUgZGVybmllciDDqXRhZ2Ugc2FucyBhc2NlbnNldXIsIHVuIGFwcGFydGVtZW50IGRlIDU3LjIzbcKyIENhcnJleiAoNjEuNjQgbcKyIGF1IHNvbCkgZGUgMyBwacOoY2VzLCB0cmF2ZXJzYW50LCBsdW1pbmV1eCBldCBzYW5zIHZpcyDDoCB2aXMgY29tcHJlbmFudCA6IHVuIHPDqWpvdXIsIHVuZSBjdWlzaW5lIFVTLCB1bmUgY2hhbWJyZSwgdW5lIHNhbGxlIGRlIGJhaW5zIGF2ZWMgV0MsIHVuIEJ1cmVhdSBldCB1biBlc3BhY2UgZHJlc3NpbmcuIEzigJlhcHBhcnRlbWVudCBlc3Qgw6AgdXNhZ2UgbWl4dGUuIMOAIHZpc2l0ZXIgcmFwaWRlbWVudC4gTm91cyB2b3VzIGluZm9ybW9ucyBxdWUgY29uZm9ybcOpbWVudCDDoCBs4oCZYXJ0aWNsZSBMLjU2MS01IGR1IENvZGUgTW9uw6l0YWlyZSBldCBGaW5hbmNpZXIsIHVuZSBwacOoY2UgZOKAmWlkZW50aXTDqSB2b3VzIHNlcmEgZGVtYW5kw6llIGF2YW50IGNoYXF1ZSB2aXNpdGUuIExlIHN5bmRpY2F0IGRlcyBjb3Byb3ByacOpdGFpcmVzIG5lIGZhaXQgbOKAmW9iamV0IGTigJlhdWN1bmUgcHJvY8OpZHVyZSBtZW7DqWUgc3VyIGxlcyBmb25kZW1lbnRzIGRlcyBhcnRpY2xlcyAyOS0xQSBldCAyOS0xIGRlIGxhIGxvaSBkdSAxMCBqdWlsbGV0IDE5NjUgZXQgbCdhcnRpY2xlIEwuNjE1LTYgZHUgY29kZSBkZSBsYSBjb25zdHJ1Y3Rpb24gZXQgZGUgbCdoYWJpdGF0aW9uLiA8L3A+CiAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBuZXcgQXJyYXkoJ0NldHRlIGFubm9uY2UgYSDDqXTDqSBham91dMOpZSDDoCB2b3RyZSBzw6lsZWN0aW9uLicsJ0NldHRlIGFubm9uY2UgZXN0IGTDqWrDoCBkYW5zIHZvdHJlIHPDqWxlY3Rpb24uJyk7CiAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb3JtLWFtaSIgbmFtZT0iY29udGFjdF9hbWkiIG1ldGhvZD0iUE9TVCIgYWN0aW9uPSIvZnIvYW1pLyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaWRiaWVuIiBpZD0iaWRiaWVuIiB2YWx1ZT0iNzE1IiAvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImJpZW5fcmVmIiBpZD0iYmllbl9yZWYiIHZhbHVlPSJMQTItNzU3IiAvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImJpZW5fdXJsIiBpZD0iYmllbl91cmwiIHZhbHVlPSIvZnIvdmVudGUtbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllci1wYXJpcy1sYXJnaWVyL3JlZi1sYTItNzU3L3ZlbnRlLWFwcGFydGVtZW50LTMtcGllY2VzLTEtY2hhbWJyZS1wYXJpcy03NTAwOC8iIC8+CgkJCQkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibm9fcmVkaXJlY3QiIHZhbHVlPSIxIiAvPgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkZXRhaWxfbGlua19vdXRpbHMiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFqb3V0X3NlbGVjdGlvbiIgZGF0YS1iaWVuaWQ9IjcxNSIgaHJlZj0iIyIgdGl0bGU9IkFqb3V0ZXIgw6AgbWEgc8OpbGVjdGlvbiI+QWpvdXRlciDDoCBtYSBzw6lsZWN0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZW52b2lfYW1pIiBocmVmPSIjIiB0aXRsZT0iRW52b3llciDDoCB1biBhbWkiPkVudm95ZXIgw6AgdW4gYW1pPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgkJCQkJPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2hhcmVfYnV0dG9ucyBhTGlrZSIgdGl0bGU9IlBhcnRhZ2VyIGNldHRlIG9mZnJlIHN1ciBsZXMgcsOpc2VhdXggc29jaWF1eCI+UGFydGFnZXIgY2UgbGllbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxici8+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlua19pbXByZXNzaW9uIiB0aXRsZT0iSW1wcmltZXIgbGUgZMOpdGFpbCBkZSBjZSBiaWVuIiBocmVmPSIvZnIvaW1wcmVzc2lvbi9kZXRhaWxzLzcxNS8iIHRhcmdldD0iX2JsYW5rIj5JbXByaW1lcjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRyaWdnZXJfbWVudGlvbiIgaHJlZj0iL2ZyL21lbnRpb25zLWxlZ2FsZXMtYWdlbmNlLWxhcmdpZXIvIiB0aXRsZT0iSW5mb3JtYXRpb25zIGp1cmlkaXF1ZXMgTGFyZ2llciBhZ2VuY2UgZGVzIEFtYmFzc2FkZXMiPkNvbnN1bHRlciBsZSBiYXLDqG1lIGRlcyBob25vcmFpcmVzPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW50ZXJsb2N1dGV1ciIgaXRlbXByb3A9InNlbGxlciIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9SZWFsRXN0YXRlQWdlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlZvdHJlIGludGVybG9jdXRldXI8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0ibGVnYWxOYW1lIj5BZ2VuY2UgTGFyZ2llciAtIEFnZW5jZSBkZXMgQW1iYXNzYWRlczwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJsb2NhdGlvbiI+MzIgQm91bGV2YXJkIE1hbGVzaGVyYmVzIC0gNzUwMDggUGFyaXM8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Uw6lsIDogPHNwYW4gaXRlbXByb3A9InRlbGVwaG9uZSI+MDEgNDIgNjUgMTggODM8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8Zm9ybSBpZD0iYW5ub25jZV9mb3JtIiBjbGFzcz0idmFsaWRhdGVfZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9mci92ZW50ZS1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWxzLXBhcnRpY3VsaWVyLXBhcmlzLWxhcmdpZXIvcmVmLWxhMi03NTcvdmVudGUtYXBwYXJ0ZW1lbnQtMy1waWVjZXMtMS1jaGFtYnJlLXBhcmlzLTc1MDA4LyNjb250YWN0X2Fubm9uY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGVnZW5kPkRlbWFuZGUgZGUgcmVuc2VpZ25lbWVudHM8L2xlZ2VuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJob25leSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0id2Vic2l0ZSI+VmV1aWxsZXogbGFpc3NlciBsYSB2YWxldXIgaW5pdGlhbGUgZGUgY2UgY2hhbXA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ3ZWJzaXRlIiBpZD0id2Vic2l0ZSIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fdHdvcm93cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsYXN0X25hbWUiPk5vbSA8c3Bhbj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9Imxhc3RfbmFtZSIgdHlwZT0idGV4dCIgbmFtZT0ibGFzdF9uYW1lIiBjbGFzcz0icmVxdWlyZWQiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0ibGFzdF9uYW1lIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZmlyc3RfbmFtZSI+UHLDqW5vbSA8c3Bhbj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImZpcnN0X25hbWUiIHR5cGU9InRleHQiIG5hbWU9ImZpcnN0X25hbWUiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0iZmlyc3RfbmFtZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZW1haWwiPkVtYWlsIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iZW1haWwiIHR5cGU9InRleHQiIG5hbWU9ImVtYWlsIiB2YWx1ZT0iIiBjbGFzcz0icmVxdWlyZWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0iZW1haWwiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwaG9uZSI+VMOpbMOpcGhvbmU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJwaG9uZSIgdHlwZT0idGV4dCIgbmFtZT0icGhvbmUiIHZhbHVlPSIiIGNsYXNzPSJyZXF1aXJlZCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dGFyZWEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibGFiZWxfbWVzc2FnZS1hbm5vbmNlIiBmb3I9Im1lc3NhZ2UiPk1lc3NhZ2UgPHNwYW4+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0ibWVzc2FnZSIgbmFtZT0ibWVzc2FnZSIgY2xhc3M9InJlcXVpcmVkIj48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJtZXNzYWdlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImhvbmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJmNjE1aXU0MDQwNm04Mm11bWl1czhsaWtiMiI+VmV1aWxsZXogbGFpc3NlciBsYSB2YWxldXIgaW5pdGlhbGUgZGUgY2UgY2hhbXA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJmNjE1aXU0MDQwNm04Mm11bWl1czhsaWtiMiIgaWQ9ImY2MTVpdTQwNDA2bTgybXVtaXVzOGxpa2IyIiB2YWx1ZT0iZjYxNWl1NDA0MDZtODJtdW1pdXM4bGlrYjIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpZCIgaWQ9ImlkIiB2YWx1ZT0iNzE1IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYmllbl9yZWYiIGlkPSJiaWVuX3JlZiIgdmFsdWU9IkxBMi03NTciIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY2VfaWQiIGlkPSJhZ2VuY2VfaWQiIHZhbHVlPSIxIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3ViamVjdCIgaWQ9InN1YmplY3QiIHZhbHVlPSJDb250YWN0QW5ub25jZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iYm91dG9uIHN1Ym1pdCIgbmFtZT0ic2VuZF9lbWFpbCIgdHlwZT0ic3VibWl0IiB2YWx1ZT0iRW52b3llciIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgPGRpdiBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIiBjbGFzcz0icHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0icHJpY2UiIGNsYXNzPSJhbm5vbmNlX3ByaWNlIj5Qcml4IDogPHNwYW4+NjMwIDAwMCAmZXVybzsgPC9zcGFuPjwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZV9kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgICAgICBIb25vcmFpcmVzIGluY2x1cwogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZV9kZXRhaWwgdGFsbE1hcmdpbiBzaXplIj42MDYgMDAwICZldXJvOyBIb25vcmFpcmVzIGV4Y2x1czwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlX2RldGFpbCBzaXplIj5Ib25vcmFpcmVzIGRlIDMsOTYlIFRUQyDDoCBsYSBjaGFyZ2UgZGUgbCdhY3F1w6lyZXVyPC9wPgoKCQkJCQkJPHAgY2xhc3M9InByaWNlX2RldGFpbCI+PC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8aDI+RMOpdGFpbHM8L2gyPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkZXRhaWxfbGlzdGUiPgogICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0idHlwZU9mR29vZCIgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAgICAgICAgICAgICBhcHBhcnRlbWVudAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPlN1cmZhY2UgOiA8c3BhbiBpdGVtcHJvcD0id2lkdGgiPjU3LjIzIG3Csjwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5Ob21icmUgZGUgcGnDqGNlcyA6IDxzcGFuPjM8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+Tm9tYnJlIGRlIGNoYW1icmVzIDogPHNwYW4+MTwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgUsOpZsOpcmVuY2UgOiA8c3Bhbj5MQTItNzU3PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iY29wcm8iPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbiBjb3Byb3ByacOpdMOpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDU0IGxvdHMKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9udGFudCBtb3llbiBhbm51ZWwgZGUgbGEgcXVvdGUtcGFydCBkZSBjaGFyZ2VzIGNvdXJhbnRlcyA6PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIDAwOCAmZXVybzsKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXBfZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWdfZHBlIiBzcmM9Imh0dHBzOi8vd3d3LmFnZW5jZS1wbHVzLm5ldC9za2lucy9fZGVmYXVsdC9saWIvQWdlbmNlUGx1cy93cy9pbWdEUEUuYXNoeD92YWx1ZT0yNTcmc2l6ZT0yMDZ4MjExJnBpY3RvPWRwZV9vbWJyZV90cmFuc3BhcmVudCIgYWx0PSJEaWFnbm9zdGljIGRlIHBlcmZvcm1hbmNlIMOpbmVyZ8OpdGlxdWUiPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJsaW5rX2JhY2siPgogICAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgogICAgPCEtLSBSb290IGVsZW1lbnQgb2YgUGhvdG9Td2lwZS4gTXVzdCBoYXZlIGNsYXNzIHBzd3AuIC0tPgogICAgPGRpdiBjbGFzcz0icHN3cCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICA8IS0tIEJhY2tncm91bmQgb2YgUGhvdG9Td2lwZS4KICAgICAgICBJdCdzIGEgc2VwYXJhdGUgZWxlbWVudCwgYXMgYW5pbWF0aW5nIG9wYWNpdHkgaXMgZmFzdGVyIHRoYW4gcmdiYSgpLiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19iZyI+PC9kaXY+CiAgICAgICAgPCEtLSBTbGlkZXMgd3JhcHBlciB3aXRoIG92ZXJmbG93OmhpZGRlbi4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2Nyb2xsLXdyYXAiPgogICAgICAgICAgICA8IS0tIENvbnRhaW5lciB0aGF0IGhvbGRzIHNsaWRlcy4KICAgICAgICAgICAgICAgIFBob3RvU3dpcGUga2VlcHMgb25seSAzIG9mIHRoZW0gaW4gRE9NIHRvIHNhdmUgbWVtb3J5LgogICAgICAgICAgICAgICAgRG9uJ3QgbW9kaWZ5IHRoZXNlIDMgcHN3cF9faXRlbSBlbGVtZW50cywgZGF0YSBpcyBhZGRlZCBsYXRlciBvbi4gLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIERlZmF1bHQgKFBob3RvU3dpcGVVSV9EZWZhdWx0KSBpbnRlcmZhY2Ugb24gdG9wIG9mIHNsaWRpbmcgYXJlYS4gQ2FuIGJlIGNoYW5nZWQuIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX191aSBwc3dwX191aS0taGlkZGVuIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3RvcC1iYXIiPgogICAgICAgICAgICAgICAgICAgIDwhLS0gIENvbnRyb2xzIGFyZSBzZWxmLWV4cGxhbmF0b3J5LiBPcmRlciBjYW4gYmUgY2hhbmdlZC4gLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY291bnRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tY2xvc2UiIHRpdGxlPSJDbG9zZSAoRXNjKSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tc2hhcmUiIHRpdGxlPSJTaGFyZSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tZnMiIHRpdGxlPSJUb2dnbGUgZnVsbHNjcmVlbiI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tem9vbSIgdGl0bGU9Ilpvb20gaW4vb3V0Ij48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8IS0tIFByZWxvYWRlciBkZW1vIGh0dHA6Ly9jb2RlcGVuLmlvL2RpbXNlbWVub3YvcGVuL3l5QldvUiAtLT4KICAgICAgICAgICAgICAgICAgICA8IS0tIGVsZW1lbnQgd2lsbCBnZXQgY2xhc3MgcHN3cF9fcHJlbG9hZGVyLS1hY3RpdmUgd2hlbiBwcmVsb2FkZXIgaXMgcnVubmluZyAtLT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19wcmVsb2FkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19wcmVsb2FkZXJfX2ljbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19jdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19kb251dCI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19zaGFyZS1tb2RhbCBwc3dwX19zaGFyZS1tb2RhbC0taGlkZGVuIHBzd3BfX3NpbmdsZS10YXAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3NoYXJlLXRvb2x0aXAiPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1hcnJvdy0tbGVmdCIgdGl0bGU9IlByZXZpb3VzIChhcnJvdyBsZWZ0KSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1hcnJvdy0tcmlnaHQiIHRpdGxlPSJOZXh0IChhcnJvdyByaWdodCkiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY2FwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY2FwdGlvbl9fY2VudGVyIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgJCgnLmFqb3V0X3NlbGVjdGlvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkgewoKICAgICAgICB2YXIgaWQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtYmllbmlkJyk7CgogICAgICAgIG1hc2VsZWN0aW9uKCcnLCBpZCwgJ2FkZCcsIGZ1bmN0aW9uKHJldG91cikgewoKICAgICAgICAgICAgdmFyIGFuaW1fdGltZW91dDsKICAgICAgICAgICAgdmFyIGFuaW0yX3RpbWVvdXQ7CiAgICAgICAgICAgIHZhciByZW1vdmVfdGltZW91dDsKCiAgICAgICAgICAgIGNsZWFyVGltZW91dChhbmltX3RpbWVvdXQpOwogICAgICAgICAgICBjbGVhclRpbWVvdXQoYW5pbTJfdGltZW91dCk7CiAgICAgICAgICAgIGNsZWFyVGltZW91dChyZW1vdmVfdGltZW91dCk7CgogICAgICAgICAgICBpZiAocmV0b3VyKSB7CgogICAgICAgICAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYXBwZW5kVG8oJ2JvZHknKS5hZGRDbGFzcygnYWxlcnQgb25jZScpLmFwcGVuZCgnPHA+JyArIG1lc3NhZ2VbMF0gKyAnPC9wPicpOwoKICAgICAgICAgICAgICAgIHZhciBuYl9zZWxlY3Rpb24gPSBwYXJzZUludCgkKCcubmJfc2VsZWN0aW9uJykudGV4dCgpKSArIDE7CiAgICAgICAgICAgICAgICAkKCcubmJfc2VsZWN0aW9uJykudGV4dChuYl9zZWxlY3Rpb24pOwoKICAgICAgICAgICAgICAgIGFuaW1fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLmFkZENsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgIGFuaW0yX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdvbmNlJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDYwMCk7CgogICAgICAgICAgICAgICAgICAgIH0sIDE1MDApOwoKICAgICAgICAgICAgICAgIH0sIDEwMCk7CgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYXBwZW5kVG8oJ2JvZHknKS5hZGRDbGFzcygnYWxlcnQgZG9uZScpLmFwcGVuZCgnPHA+JyArIG1lc3NhZ2VbMV0gKyAnPC9wPicpOwoKICAgICAgICAgICAgICAgIGFuaW1fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLmFkZENsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgIGFuaW0yX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdkb25lJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDYwMCk7CgogICAgICAgICAgICAgICAgICAgIH0sIDE1MDApOwoKICAgICAgICAgICAgICAgIH0sIDEwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgIH0pOwoKCSQoJy5lbnZvaV9hbWknKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CgkJJCgnLmZvcm0tYW1pJykuc3VibWl0KCk7CgkJcmV0dXJuIGZhbHNlOwoJfSk7CgoJJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKCQkkKCcuc2hhcmVfYnV0dG9ucycpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKCQkJdmFyIHZvaWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgkJCSQodm9pbGUpLmFwcGVuZFRvKCdib2R5JykuYWRkQ2xhc3MoJ2JveF9zaGFyZScpOwoJCQl2YXIgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJCQl2YXIgbmV3Tm9kZTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCQkJdmFyIHZlcnRpY2FsX2NlbnRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKCQkJdmFyIHZlcnRpY2FsX2NlbnRlcjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CgkJCXZhciBjbG9zZV9zcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwoJCQkkKG5ld05vZGUpLmFwcGVuZFRvKHZvaWxlKS5hcHBlbmQoJzxoMT5QYXJ0YWdlciBjZSBsaWVuPC9oMT4nKTsKCQkJJChuZXdOb2RlMikuYXBwZW5kVG8obmV3Tm9kZSkuYXR0cignaWQnLCdzaGFyZW1lJykuYWRkQ2xhc3MoJ3NoYXJycmUnKTsKCQkJJCh2ZXJ0aWNhbF9jZW50ZXIpLmFwcGVuZFRvKHZvaWxlKS5hZGRDbGFzcygndmVydGljYWxfY2VudGVyJyk7CgkJCSQoY2xvc2Vfc3BhbikuYXBwZW5kVG8obmV3Tm9kZSkuYWRkQ2xhc3MoJ2Nsb3NlX3NoYXJlIGljb19jbG9zZScpOwoJCQkkKHZlcnRpY2FsX2NlbnRlcjIpLmFwcGVuZFRvKG5ld05vZGUpLmFkZENsYXNzKCd2ZXJ0aWNhbF9jZW50ZXInKTsKCQkJJCgnLmJveF9zaGFyZScpLmZhZGVJbigzMDApOwoKCQkJJCgnI3NoYXJlbWUnKS5zaGFycnJlKHsKCQkJCXNoYXJlOiB7CgkJCQkJdHdpdHRlcjogdHJ1ZSwKCQkJCQlmYWNlYm9vazogdHJ1ZSwKCQkJCQlnb29nbGVQbHVzOiB0cnVlLAoJCQkJCXBpbnRlcmVzdDp0cnVlCgkJCQl9LAogICAgICAgICAgICAgICAgYnV0dG9uczogewogICAgICAgICAgICAgICAgICAgIHBpbnRlcmVzdDogewogICAgICAgICAgICAgICAgICAgICAgICBtZWRpYTogJ2h0dHBzOi8vd3d3LmxhcmdpZXIuZnIvJy5yZXBsYWNlKC9cLyQvLCAnJykgKyAnLycgKyAnL2RhdGFzL2JpZW5zL3RodW1icy83MTUvNzE1XzAwLTIwMjAtMDItMTMtMTc0My5qcGcnLnJlcGxhY2UoL15cLy8sICcnKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCgkJCQl0ZW1wbGF0ZTogICAnPHVsPlxuXAoJCQkJCQkJCTxsaT5cblwKCQkJCQkJCQkJPGEgaHJlZj0iIyIgY2xhc3M9ImZhY2Vib29rIj5cblwKCQkJCQkJCQkJCTxzcGFuIGNsYXNzPSJpY29fZmFjZWJvb2siPjwvc3Bhbj5cblwKCQkJCQkJCQkJCTxzcGFuPkZhY2Vib29rPC9zcGFuPlxuXAoJCQkJCQkJCQk8L2E+XG5cCgkJCQkJCQkJPC9saT5cblwKCQkJCQkJCQk8bGk+XG5cCgkJCQkJCQkJCTxhIGhyZWY9IiMiIGNsYXNzPSJ0d2l0dGVyIj5cblwKCQkJCQkJCQkJCTxzcGFuIGNsYXNzPSJpY29fdHdpdHRlciI+PC9zcGFuPlxuXAoJCQkJCQkJCQkJPHNwYW4+VHdpdHRlcjwvc3Bhbj5cblwKCQkJCQkJCQkJPC9hPlxuXAoJCQkJCQkJCTwvbGk+XG5cCgkJCQkJCQkJPGxpPlxuXAoJCQkJCQkJCQk8YSBocmVmPSIjIiBjbGFzcz0iZ29vZ2xlcGx1cyI+XG5cCgkJCQkJCQkJCQk8c3BhbiBjbGFzcz0iaWNvX2dvb2dsZXBsdXMiPjwvc3Bhbj5cblwKCQkJCQkJCQkJCTxzcGFuPkdvb2dsZSArPC9zcGFuPlxuXAoJCQkJCQkJCQk8L2E+XG5cCgkJCQkJCQkJPC9saT5cblwKCQkJCQkJCQk8bGk+XG5cCgkJCQkJCQkJCTxhIGhyZWY9IiMiIGNsYXNzPSJwaW50ZXJlc3QiPlxuXAoJCQkJCQkJCQkJPHNwYW4gY2xhc3M9Imljb19waW50ZXJlc3QiPjwvc3Bhbj5cblwKCQkJCQkJCQkJCTxzcGFuPlBpbnRlcmVzdDwvc3Bhbj5cblwKCQkJCQkJCQkJPC9hPlxuXAoJCQkJCQkJCTwvbGk+XG5cCgkJCQkJCQk8L3VsPicsCgkJCQl1cmxDdXJsOiAnJywgICAgLy8gIGRpc2FibGUgc2hhcnJyZS5waHAKCQkJCWVuYWJsZUhvdmVyOiBmYWxzZSwKCQkJCWVuYWJsZVRyYWNraW5nOiBmYWxzZSwKCQkJCXJlbmRlcjogZnVuY3Rpb24oYXBpLCBvcHRpb25zKXsKCQkJCQkkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLnR3aXR0ZXInLCBmdW5jdGlvbigpIHsKCQkJCQkJdHJ5IHsKCQkJCQkJCWFwaS5vcGVuUG9wdXAoJ3R3aXR0ZXInKTsKCQkJCQkJfQoJCQkJCQlmaW5hbGx5IHsKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfSk7CgkJCQkJJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy5mYWNlYm9vaycsIGZ1bmN0aW9uKCkgewoJCQkJCQl0cnkgewoJCQkJCQkJYXBpLm9wZW5Qb3B1cCgnZmFjZWJvb2snKTsKCQkJCQkJfQoJCQkJCQlmaW5hbGx5IHsKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfSk7CgkJCQkJJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy5nb29nbGVwbHVzJywgZnVuY3Rpb24oKSB7CgkJCQkJCXRyeSB7CgkJCQkJCQlhcGkub3BlblBvcHVwKCdnb29nbGVQbHVzJyk7CgkJCQkJCX0KCQkJCQkJZmluYWxseSB7CgkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCX0KCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCX0pOwoJCQkJCSQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcucGludGVyZXN0JywgZnVuY3Rpb24oKSB7CgkJCQkJCXRyeSB7CgkJCQkJCQlhcGkub3BlblBvcHVwKCdwaW50ZXJlc3QnKTsKCQkJCQkJfQoJCQkJCQlmaW5hbGx5IHsKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfSk7CgkJCQl9CgkJCX0pOwoKCQkJJCgnYm9keSxodG1sJykuY3NzKHsKCQkJCSdvdmVyZmxvdyc6J2hpZGRlbicKCQkJfSk7CgoJCQkkKCcuY2xvc2Vfc2hhcmUnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CgoJCQkJJCgnLmJveF9zaGFyZScpLmZhZGVPdXQoMzAwKTsKCgkJCQkkKCdib2R5LGh0bWwnKS5jc3MoewoJCQkJCSdvdmVyZmxvdyc6J3Zpc2libGUnCgkJCQl9KTsKCQkJCSQoJy5ib3hfc2hhcmUnKS5yZW1vdmUoKTsKCQkJfSk7CgoJCQlyZXR1cm4gZmFsc2U7CgkJfSk7Cgl9KTsKCiAgICA8L3NjcmlwdD4KCiAgICA8Zm9vdGVyPgogICAgPGRpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfdG9wIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nb0Zvb3RlciI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvIiB0aXRsZT0iQWdlbmNlIExhcmdpZXIgSW1tb2JpbGllciBkZSBQcmVzdGlnZSBkYW5zIGxlIDhlIGV0IE91ZXN0IFBhcmlzaWVuIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5sYXJnaWVyZnIvaW1hZ2VzL2xvZ28ucG5nIiBhbHQ9IkFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzIC0gQWNoYXQgYXBwYXJ0ZW1lbnRzIHBhcmlzIDjDqG1lIj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFnZW5jZXNfZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxhIGl0ZW1zY29wZT0iaXRlbXNjb3BlIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50IiBocmVmPSIvZnIvYWdlbmNlLWltbW9iaWxpZXJlLXByZXN0aWdlLWxhcmdpZXItcGFyaXMvIiB0aXRsZT0iQWdlbmNlcyBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyB1bmUgSGlzdG9pcmUgUGFyaXNpZW5uZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJyYW5kIiBpdGVtcHJvcD0ibGVnYWxOYW1lIj5BZ2VuY2UgTGFyZ2llciAtIEFnZW5jZSBkZXMgQW1iYXNzYWRlczwvc3Bhbj48c3BhbiBjbGFzcz0idGlyZXQiPiZuYnNwOy0mbmJzcDs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9ImxvY2F0aW9uIj4zMiBCb3VsZXZhcmQgTWFsZXNoZXJiZXMmbmJzcDsKICAgICAgICAgICAgICAgICAgICA3NTAwOCZuYnNwO1BhcmlzPHNwYW4gY2xhc3M9InRpcmV0Ij4mbmJzcDstJm5ic3A7PC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0idGVsZXBob25lIj4wMSA0MiA2NSAxOCA4Mzwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDxhIGl0ZW1zY29wZT0iaXRlbXNjb3BlIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50IiBocmVmPSIvZnIvYWdlbmNlLWltbW9iaWxpZXJlLXByZXN0aWdlLWxhcmdpZXItcGFyaXMvIiB0aXRsZT0iQWdlbmNlcyBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyB1bmUgSGlzdG9pcmUgUGFyaXNpZW5uZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJyYW5kIiBpdGVtcHJvcD0ibGVnYWxOYW1lIj5BZ2VuY2UgTGFyZ2llciAtIEFnZW5jZSBkZXMgQW1iYXNzYWRlczwvc3Bhbj48c3BhbiBjbGFzcz0idGlyZXQiPiZuYnNwOy0mbmJzcDs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9ImxvY2F0aW9uIj43MSwgcnVlIGRlIGxhIFBvbXBlJm5ic3A7CiAgICAgICAgICAgICAgICAgICAgNzUxMTYmbmJzcDtQYXJpczxzcGFuIGNsYXNzPSJ0aXJldCI+Jm5ic3A7LSZuYnNwOzwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InRlbGVwaG9uZSI+MDEgODYgOTUgMjMgNzY8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBjbGFzcz0ibWVudGlvbnNfZm9vdGVyIiBocmVmPSJodHRwczovL20ubGFyZ2llci5mci8mbW9iaWxlPTEiIHRpdGxlPSJTaXRlIG1vYmlsZSI+U2l0ZSBtb2JpbGU8L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZW8iPgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic29jaWFsTGlua3MiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJmYWNlYm9vayIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0xhcmdpZXItQWdlbmNlLURlcy1BbWJhc3NhZGVzLVBhcmlzLTE0OTI0MTI3OTA5OTY4MzgvIiB0aXRsZT0iRmFjZWJvb2sgLSBBZ2VuY2UgTGFyZ2llciAtIEFnZW5jZSBkZXMgQW1iYXNzYWRlcywgQWNoYXQgYXBwYXJ0ZW1lbnRzIHBhcmlzIDjDqG1lIj48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0idHdpdHRlciIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9sYXJnaWVyYWdlbmNlIiB0aXRsZT0iVHdpdHRlciAtIEFnZW5jZSBMYXJnaWVyIC0gQWdlbmNlIGRlcyBBbWJhc3NhZGVzLCBBZ2VuY2UgaW1tb2JpbGnDqHJlIGRlIHByZXN0aWdlIDc1MDA4IHBhcmlzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iaW5zdGFncmFtIiBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2xhcmdpZXJhZ2VuY2UvIiB0aXRsZT0iSW5zdGFncmFtIC0gQWdlbmNlIExhcmdpZXIgLSBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMsIEFwcGFydGVtZW50cyBtYWlzb25zIGjDtHRlbHMgcGFydGljdWxpZXJzIHBhcmlzIDc1Ij48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW8xIj4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvIiB0aXRsZT0iQWdlbmNlIExhcmdpZXIgSW1tb2JpbGllciBkZSBQcmVzdGlnZSBkYW5zIGxlIDhlIGV0IE91ZXN0IFBhcmlzaWVuIj5BY2N1ZWlsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL2FnZW5jZS1pbW1vYmlsaWVyZS1wcmVzdGlnZS1sYXJnaWVyLXBhcmlzLyIgdGl0bGU9IkFnZW5jZXMgTGFyZ2llciBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMgdW5lIEhpc3RvaXJlIFBhcmlzaWVubmUiPkRlcHVpcyAxODU5PC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvdmVudGUtbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllci1wYXJpcy1sYXJnaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkltbW9iaWxpZXIgZW4gVmVudGUgYXZlYyBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyI+Tm9zIGJpZW5zPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvdmVuZHJlLWVzdGltYXRpb24tbWFpc29uLWFwcGFydGVtZW50LWhvdGVscy1wYXJ0aWN1bGllcnMtcGFyaXMvIiB0aXRsZT0iVmVuZHJlIHZvdHJlIGJpZW4gc3VyIFBhcmlzIGV0IMOObGUgZGUgRnJhbmNlIj5WZW5kcmUgYXZlYyBMYXJnaWVyPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvYWNxdWVyaXItbWFpc29uLWFwcGFydGVtZW50LWhvdGVsLXBhcnRpY3VsaWVyLXBhcmlzLyIgdGl0bGU9IkFjaGV0ZXIgdm90cmUgYmllbiBzdXIgUGFyaXMgZXQgw49sZSBkZSBGcmFuY2UiPkFjcXXDqXJpciBhdmVjIExhcmdpZXI8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzIiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9tYS1zZWxlY3Rpb24taW1tb2JpbGllci1sYXJnaWVyLXBhcmlzLyIgdGl0bGU9IlPDqWxlY3Rpb25uZXIgYW5ub25jZSBpbW1vYmlsacOocmUiPk1hIHPDqWxlY3Rpb248L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvZXhwZXJ0aXNlLWltbW9iaWxpZXItcGFyaXMtbGFyZ2llci8iIHRpdGxlPSJFeHBlcnRpc2VyIHZvdHJlIGJpZW4gUGFyaXMgZXQgw49sZSBkZSBGcmFuY2UiPkV4cGVydGlzZSBMYXJnaWVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL2FjdHVhbGl0ZXMtaW1tb2JpbGllci1wYXJpcy1sYXJnaWVyLyIgdGl0bGU9IkzigJlhY3R1YWxpdMOpIExhcmdpZXIiPkFjdHVhbGl0w6lzIExhcmdpZXI8L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW8zIj4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvdmVudGUtYWNoYXQtYXBwYXJ0ZW1lbnRzLXBhcmlzaWVucy1wYXJpcy8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJBcHBhcnRlbWVudHMgUGFyaXNpZW5zIGVuIHZlbnRlIHBhciBMYXJnaWVyIEFnZW5jZSBkZXMgQW1iYXNzYWRlcyI+QXBwYXJ0ZW1lbnRzIFBhcmlzaWVuczwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci92ZW50ZS1wcm9wcmlldGVzLW1haXNvbnMtaG90ZWxzLXBhcnRpY3VsaWVyLWNoYXRlYXV4LWxhcmdpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgUHJvcHJpw6l0w6lzLCBNYWlzb25zLCBIw7R0ZWxzIFBhcnRpY3VsaWVyIGV0IENow6J0ZWF1eCBMYXJnaWVyIj5Qcm9wcmnDqXTDqXMsIE1haXNvbnMsIENow6J0ZWF1eCBldCBIw7R0ZWxzIFBhcnRpY3VsaWVyczwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9iaWVucy12ZW5kdXMtYWdlbmNlLWltbW9iaWxpZXJlLWxhcmdpZXIvIiB0aXRsZT0iQmllbnMgdmVuZHVzIHBhciBs4oCZQWdlbmNlIExhcmdpZXIgQWdlbmNlIGRlcyBBbWJhc3NhZGVzIj5TaWduw6kgcGFyIExhcmdpZXI8L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW80Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvYWNoYXQtYXBwYXJ0ZW1lbnQtcGFyaXMtNzUwMDgtNzUwMDEvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnRzIFBhcmlzIDc1MDA4LTc1MDAxIj5BY2hhdCAvIEFwcGFydGVtZW50cyAvIFBhcmlzIC8gNzUwMDggLyA3NTAwMTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci92ZW50ZS1ob3RlbHMtcGFydGljdWxpZXJzLW1haXNvbnMtcGFyaXMtNzUwMDgtNzUwMTYtNzUwMTcvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgIEjDtHRlbHMgUGFydGljdWxpZXJzIGV0IE1haXNvbnMgNzUwMDgtNzUwMTYtNzUwMTciPkjDtHRlbCBwYXJ0aWN1bGllciAvIE1haXNvbiAvIFBhcmlzIC8gNzUwMDggLyA3NTAxNiAvIDc1MDE3PC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3ZlbnRlLWFwcGFydGVtZW50cy1wYXJpcy0xNmVtZS0xN2VtZS8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudHMgUGFyaXMgMTbDqG1lIE5vcmQgZXQgMTfDqG1lIj5BcHBhcnRlbWVudCAvIFBhcmlzIDE2w6htZSBOb3JkIC8gMTfDqG1lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL2FjaGF0LWltbW9iaWxpZXItZGUtcHJlc3RpZ2UtNzUwMDgtNzUwMTYtNzUwMTcvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iSW1tb2JpbGllciBkZSBwcmVzdGlnZSBQYXJpcyBPdWVzdCI+QWNoYXQgLyBJbW1vYmlsaWVyIGRlIHByZXN0aWdlIC8gNzUwMDggLyBQYXJpcyAxNsOobWUgbm9yZCAvIDE3w6htZTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci92ZW50ZS1tYWlzb25zLWhvdGVscy1wYXJ0aWN1bGllcnMtcHJvcHJpZXRlcy1jaGF0ZWF1eC1vaXNlLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIE1haXNvbnMsIEjDtHRlbHMgUGFydGljdWxpZXJzLCBQcm9wcmnDqXTDqXMgZXQgQ2jDonRlYXV4IGRhbnMgbOKAmU9pc2UiPk1haXNvbiAvIEjDtHRlbCBQYXJ0aWN1bGllciAvIFByb3ByacOpdMOpIC8gQ2jDonRlYXUgLyBPaXNlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3ZlbnRlLW1haXNvbnMtaGF1dHMtZGUtc2VpbmUteXZlbGluZXMtZXNzb25uZS1zZWluZS1ldC1tYXJuZS8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBtYWlzb25zIEhhdXRzIGRlIHNlaW5lLCBZdmVsaW5lcywgRXNzb25uZSBldCBTZWluZSBldCBNYXJuZSI+TWFpc29uIC8gSGF1dHMtZGUtU2VpbmUgLyBZdmVsaW5lcyAvIEVzc29ubmUgLyBTZWluZSBldCBNYXJuZTwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImxlZ2FsIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL21lbnRpb25zLWxlZ2FsZXMtYWdlbmNlLWxhcmdpZXIvIiB0aXRsZT0iTWVudGlvbnMgbMOpZ2FsZXMiPk1lbnRpb25zIGzDqWdhbGVzIC8gQmFyw6htZTwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSIvZnIvcGFydGVuYWlyZXMtaW1tb2JpbGllcnMtYWdlbmNlLWxhcmdpZXIvIiB0aXRsZT0iUGFydGVuYWlyZXMgZGUgIGzigJlBZ2VuY2UgTGFyZ2llciBBZ2VuY2UgZGVzIEFtYmFzc2FkZXMiPlBhcnRlbmFpcmVzPC9hPiAtCiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYWdlbmNlLXBsdXMuZnIiIHRpdGxlPSJBZ2VuY2UgUGx1cywgc29sdXRpb25zIHBvdXIgbGVzIHByb2Zlc3Npb25uZWxzIGRlIGwnaW1tb2JpbGllciI+UsOpYWxpc2F0aW9uIEFnZW5jZSBQbHVzPC9hPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZm9vdGVyPgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgdmFyIGxpc3RfbGkgPSAkKCdmb290ZXIgdWwuc2VvMSBsaScpOwoKICAgIGZvcih2YXIgaT0wO2k8bGlzdF9saS5sZW5ndGg7aSsrKXsKCiAgICAgICAgdmFyIGN1cnJlbnRfZWxlbSA9IGxpc3RfbGlbaV07CgogICAgICAgIGlmKGkgPT0gNCl7CiAgICAgICAgICAgICQoY3VycmVudF9lbGVtKS5wcmVwZW5kVG8oJ2Zvb3RlciAuc2VvMicpOwogICAgICAgIH0gZWxzZSBpZihpID09IDUpewogICAgICAgICAgICAkKGN1cnJlbnRfZWxlbSkuaW5zZXJ0QWZ0ZXIoJ2Zvb3RlciAuc2VvMiBsaTpudGgtY2hpbGQoMSknKTsKICAgICAgICB9ZWxzZSBpZihpID09IDYpewogICAgICAgICAgICAkKGN1cnJlbnRfZWxlbSkuaW5zZXJ0QWZ0ZXIoJ2Zvb3RlciAuc2VvMiBsaTpudGgtY2hpbGQoMiknKTsKICAgICAgICB9CiAgICB9Cjwvc2NyaXB0PgoKPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiAgICAoZnVuY3Rpb24oKXsKICAgICAgICB2YXIgZm5Gb290ZXIgPSBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgZiA9ICQoJ2Zvb3RlcicpOwogICAgICAgICAgICBpZiAoZi5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICB2YXIgbWluSGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpIC0gZi5pbm5lckhlaWdodCgpOwogICAgICAgICAgICAgICAgZi5jc3Moe3Bvc2l0aW9uOidzdGF0aWMnfSk7CiAgICAgICAgICAgICAgICBpZihmLm9mZnNldCgpLnRvcCA8IG1pbkhlaWdodCl7CiAgICAgICAgICAgICAgICAgICAgZi5jc3Moe3Bvc2l0aW9uOidhYnNvbHV0ZScsICdib3R0b20nOicwJ30pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmbkZvb3Rlcik7CiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmbkZvb3Rlcik7CiAgICB9KSgpOwoKPC9zY3JpcHQ+Cgo8L2JvZHk+CjwvaHRtbD4K
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:36 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-772/vente-maison-12-pieces-lourmarin-84160/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:36 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=kucnbv7n98e0jtvk4d07f7fjj4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:36 GMT
- request:
    method: get
    uri: https://www.largier.fr/fr/vente-maison-appartement-hotels-particulier-paris-largier/ref-la2-749/vente-appartement-6-pieces-3-chambres-paris-75008/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 13 Apr 2020 12:41:36 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=298fe333gvjfs93j8gd0hi0dh0; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 13 Apr 2020 12:41:36 GMT
recorded_with: VCR 5.1.0
