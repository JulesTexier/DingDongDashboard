---
http_interactions:
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:24 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=rjutt7pb1aohkpr005qmdsjhk7; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:24 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-ow1-486/vente-loft-5-pieces-paris-75018/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:24 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=0psgg7bjulgstk1ls01547cch2; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:24 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-ow1-403/vente-appartement-5-pieces-3-chambres-paris-75019/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:24 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=njo9paot1jnai2gepkqq6cbab4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:24 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-ow1-494/vente-appartement-4-pieces-3-chambres-paris-75019/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:24 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=584a16mv0mm8jk581bcelof8m1; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:24 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-xi1-1105/vente-loft-3-pieces-paris-75020/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=67ug2nuvmohmq6a18tamspj0g7; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:25 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-en108-1728/vente-appartement-3-pieces-2-chambres-paris-75020/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=ihcnniul8qi1kvlcrqdapdtgr0; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:25 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-ow1-489/vente-appartement-3-pieces-2-chambres-paris-75019/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=n9phjodt9h45uvfu4t9bfm6r05; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgICAgICA8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD11dGYtOCIgLz4KCiAgICA8dGl0bGU+VmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgMTkgKDc1MDE5KSBNYWlyaWUgWElYw6htZSAtIENhcGl0YWxlIEltbW9iaWxpZXI8L3RpdGxlPgoKICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJEw6l0YWlscyBkZSBsJ2Fubm9uY2UgaW1tb2JpbGnDqHJlIHZlbnRlIGFwcGFydGVtZW50IDMgcGnDqGNlcyBQQVJJUyA3NTAxOSAyIGNoYW1icmVzIDY0IG3CsiBQcml4IDc1NSAwMDAg4oKsIFLDqWbDqXJlbmNlIE9XMS00ODkiIC8+CiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iYWNoZXRlcixiaWVuLENhcGl0YWxlIGltbW9iaWxpZXIsUGFyaXMsSW1tb2JpbGllcixhZ2VuY2UgaW1tb2JpbGnDqHJlLGFjaGF0LCAgdmVudGUsbG9jYXRpb24sYXBwYXJ0ZW1lbnRzLHRlcnJhaW4sbWFpc29uLE1BSVNPTiwsQVBQQVJURU1FTlQsVkVORFJFLCBMT1VFUixiaWVucyxpbW1vYmlsaWVycyIgLz4KICAgIDxtZXRhIG5hbWU9InJldmlzaXQtYWZ0ZXIiIGNvbnRlbnQ9IjEwIGRheXMiIC8+CiAgICA8bWV0YSBuYW1lID0gImZvcm1hdC1kZXRlY3Rpb24iIGNvbnRlbnQgPSAidGVsZXBob25lPW5vIiAvPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZSIgY29udGVudD0ieWVzIi8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZSIgY29udGVudD0iQ2FwaXRhbGUgSW1tb2JpbGllciIvPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCIvPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIiAvPgoKCTwhLS0gLyoqKkdvb2dsZSBBbmFseXRpY3MqKiovIC0tPgoKPHNjcmlwdD4KICAoZnVuY3Rpb24oaSxzLG8sZyxyLGEsbSl7aVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J109cjtpW3JdPWlbcl18fGZ1bmN0aW9uKCl7CiAgKGlbcl0ucT1pW3JdLnF8fFtdKS5wdXNoKGFyZ3VtZW50cyl9LGlbcl0ubD0xKm5ldyBEYXRlKCk7YT1zLmNyZWF0ZUVsZW1lbnQobyksCiAgbT1zLmdldEVsZW1lbnRzQnlUYWdOYW1lKG8pWzBdO2EuYXN5bmM9MTthLnNyYz1nO20ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxtKQogIH0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnLy93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpzJywnZ2EnKTsKCiAgZ2EoJ2NyZWF0ZScsICdVQS01MTg4MTMxNS0xJywgJ2NhcGl0YWxlLWltbW9iaWxpZXIuY29tJyk7CiAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsKPC9zY3JpcHQ+CgoKCgogICAgPGJhc2UgaHJlZj0iaHR0cHM6Ly93d3cuY2FwaXRhbGUtaW1tb2JpbGllci5jb20vIiAvPgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby9qcy9qcXVlcnktMS4xMS4wLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvU2NhbGVJbWFnZS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlRlMuY2FwaXRhbGVpbW1vL2pzL2Zsb3d0eXBlLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby9qcy9qcXVlcnkubXVsdGlwbGUuc2VsZWN0LmpzIj48L3NjcmlwdD4KICAgIDwhLS1baWYgbHRlIElFIDldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby9qcy9wbGFjZWhvbGRlcnMubWluLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgSUVdPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby9qcy9tb2Rlcm5penIuanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiAoZ3RlIElFIDYpJihsdGUgSUUgOCldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby9qcy9zZWxlY3Rpdml6ci1taW4uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdCBJRSA5XT48c2NyaXB0IHNyYz0iL3RoZW1lL19zaXRlRlMuY2FwaXRhbGVpbW1vL2pzL2NzczMtbWVkaWFxdWVyaWVzLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby9qcy9zaXRlMmZvdS5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVGUy5jYXBpdGFsZWltbW8vanMvanF1ZXJ5LmN5Y2xlMi5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2pxdWVyeS5jb2xvcmJveC1BUC5qcyI+PC9zY3JpcHQ+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVGUy5jYXBpdGFsZWltbW8vY29sb3Jib3guY3NzIiAvPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fZGVmYXVsdC9yZXNldC5jc3MiIC8+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlRlMuY2FwaXRhbGVpbW1vL3N0eWxlLmNzcz8yMDE4MDYxNT0iIC8+CgogICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Ii90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby9pbWFnZXMvZmF2aWNvbi5pY28iIC8+CgogICAgPGxpbmsgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUNhYmluOjQwMCw1MDAsNDAwaXRhbGljJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJy8+CgoKCjwvaGVhZD4KPCEtLVtpZiBsdCBJRSA3XT4gPGJvZHkgY2xhc3M9ImllIGllNiBpZTdfIGllOF8gaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgN10+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTcgaWU3XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTggaWU4XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOV0+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTkgaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgZ3QgSUUgOV0+IDxib2R5PjwhW2VuZGlmXS0tPgo8IS0tW2lmICFJRV0+PCEtLT48Ym9keT48IS0tPCFbZW5kaWZdLS0+Cgk8ZGl2IGlkPSJia2dkIiBjbGFzcz0iYW5ub25jZXMtZGVmYXVsdCI+CiAgICA8aGVhZGVyPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyX2hlYWRlciI+CiAgICAgICAgPGEgY2xhc3M9ImxvZ28iIGhyZWY9Imh0dHBzOi8vd3d3LmNhcGl0YWxlLWltbW9iaWxpZXIuY29tLyI+CiAgICAgICAgICAgIDxpbWcgYWx0PSIiIHNyYz0iL3RoZW1lL19zaXRlRlMuY2FwaXRhbGVpbW1vL2ltYWdlcy9sb2dvLnBuZyIgLz4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgIDwvYT4KICAgICAgICA8bmF2PgogICAgPHVsPgogICAgICAgIDxsaSBjbGFzcz0ibWVudV9ob21lIj4KICAgICAgICAgICAgPGEgY2xhc3M9Imljb19ob21lIiBocmVmPSIiPjwvYT4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJhbmltX25hdiBvbmdsZXRfZnIiPgogICAgICAgICAgICA8YSBocmVmPSIvYWNoZXRlci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSIiIGNsYXNzPSIiPkFjaGV0ZXI8L2E+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iYW5pbV9uYXYgb25nbGV0X2ZyIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2VzdGltYXRpb24vIiB0aXRsZT0iIiBjbGFzcz0iIj5Fc3RpbWVyPC9hPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImFuaW1fbmF2IG9uZ2xldF9mciI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW5kdS8iIHRpdGxlPSIiIGNsYXNzPSIiPlZlbmR1PC9hPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImFuaW1fbmF2IG9uZ2xldF9mciI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9jb250YWN0LyIgdGl0bGU9IiIgY2xhc3M9IiI+Q29udGFjdDwvYT4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJhbmltX25hdiBvbmdsZXRfZnIiPgogICAgICAgICAgICA8YSBocmVmPSIvYWdlbmNlcy8iIHRpdGxlPSIiIGNsYXNzPSIiPk5vcyBhZ2VuY2VzPC9hPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImFuaW1fbmF2IG9uZ2xldF9mciI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9yZWNydXRlbWVudC1hZ2VuY2UtaW1tb2JpbGllcmUtbmVnb2NpYXRldXItbmVnb2NpYXRyaWNlLWNhcGl0YWxlLWltbW9iaWxpZXIvIiB0aXRsZT0iT2ZmcmUgZOKAmWVtcGxvaSDDoCBQYXJpcyIgY2xhc3M9IiI+UmVjcnV0ZW1lbnQ8L2E+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ibWVudV9zZWxlY3Rpb24iPgogICAgICAgICAgICA8YSBjbGFzcz0iaWNvX3NlbGVjdGlvbiIgaHJlZj0ic2VsZWN0aW9uLyI+PC9hPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuYl9zZWxlY3Rpb24iPjA8L3NwYW4+CiAgICAgICAgPC9saT4KICAgIDwvdWw+CjwvbmF2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBpZiggJCgnLm5iX3NlbGVjdGlvbicpLnRleHQoKSA+IDAgKXsKCiAgICAgICAgJCgnLm5iX3NlbGVjdGlvbicpLmNzcyh7CiAgICAgICAgICAgICdib3JkZXInOicxcHggc29saWQgIzAwNkIyRCcsCiAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzonIzAwNkIyRCcsCiAgICAgICAgICAgICdjb2xvcic6JyNmZmYnCiAgICAgICAgfSk7CgogICAgfQo8L3NjcmlwdD4KCiAgICA8L2Rpdj4KPC9oZWFkZXI+CgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby9qcy9qcXVlcnkuamNhcm91c2VsLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9tYWpfc2VsZWN0aW9uLmpzIj48L3NjcmlwdD4KICAgIDxkaXYgY2xhc3M9ImxpbmtfYmFjayI+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAkKCcuYmllbl9wcmVjZWRlbnQgc3BhbicpLm9uKCdtb3VzZWVudGVyJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdpbWcnKS5hdHRyKCdzcmMnLCcvdGhlbWUvX3NpdGVGUy5jYXBpdGFsZWltbW8vL2ltYWdlcy9pY29fZmxlY2hlX2hvdmVyLnBuZycpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICQoJy5iaWVuX3ByZWNlZGVudCBzcGFuJykub24oJ21vdXNlbGVhdmUnLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2ltZycpLmF0dHIoJ3NyYycsJy90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby8vaW1hZ2VzL2ljb19mbGVjaGUucG5nJyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCgnLmJpZW5fc3VpdmFudCBzcGFuJykub24oJ21vdXNlZW50ZXInLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2ltZycpLmF0dHIoJ3NyYycsJy90aGVtZS9fc2l0ZUZTLmNhcGl0YWxlaW1tby8vaW1hZ2VzL2ljb19mbGVjaGUyX2hvdmVyLnBuZycpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICQoJy5iaWVuX3N1aXZhbnQgc3BhbicpLm9uKCdtb3VzZWxlYXZlJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdpbWcnKS5hdHRyKCdzcmMnLCcvdGhlbWUvX3NpdGVGUy5jYXBpdGFsZWltbW8vL2ltYWdlcy9pY29fZmxlY2hlMi5wbmcnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImFubm9uY2VfZGV0YWlscyI+CiAgICAgICAgPHNlY3Rpb24+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9pbWciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyX2RpYXBvcmFtYSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZGlhcG9yYW1hIiBkYXRhLWN5Y2xlLXBhZ2VyLXRlbXBsYXRlPSIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzE2NTIvMTY1Ml8wMC0yMDIwLTAyLTI4LTAxNDUuanBnIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTkpIiBjbGFzcz0ibGlnaHRib3giID4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMTY1Mi8xNjUyXzAwLTIwMjAtMDItMjgtMDE0NS5qcGciIGFsdD0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTkpIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTkpIiBjbGFzcz0iaW1nLWdyYW5kZSIgaWQ9ImFubm9uY2VfaW1nX3Byb2ZpbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBpZD0iY29udGFpbmVyX3ZpZ25ldHRlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJ0aHVtYnNfY2Fyb3VzZWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjeWNsZSIgZGF0YS1qY2Fyb3VzZWw9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGh1bWJzIGN5Y2xlLXBhZ2VyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzE2NTIvMTY1Ml8wMC0yMDIwLTAyLTI4LTAxNDUuanBnIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTkpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzE2NTIvMTY1Ml8wMC0yMDIwLTAyLTI4LTAxNDUuanBnIiBhbHQ9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE5KSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2RhdGFzL2JpZW5zL2ltYWdlcy8xNjUyLzE2NTJfMDEtMjAyMC0wMi0yOC0wMTQ1LmpwZyIgdGl0bGU9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE5KSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2RhdGFzL2JpZW5zL2ltYWdlcy8xNjUyLzE2NTJfMDEtMjAyMC0wMi0yOC0wMTQ1LmpwZyIgYWx0PSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxOSkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMTY1Mi8xNjUyXzAyLTIwMjAtMDItMjgtMDE0NS5qcGciIHRpdGxlPSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxOSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMTY1Mi8xNjUyXzAyLTIwMjAtMDItMjgtMDE0NS5qcGciIGFsdD0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTkpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzE2NTIvMTY1Ml8wMy0yMDIwLTAyLTI4LTAxNDUuanBnIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTkpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzE2NTIvMTY1Ml8wMy0yMDIwLTAyLTI4LTAxNDUuanBnIiBhbHQ9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE5KSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2RhdGFzL2JpZW5zL2ltYWdlcy8xNjUyLzE2NTJfMDQtMjAyMC0wMi0yOC0wMTQ1LmpwZyIgdGl0bGU9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE5KSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2RhdGFzL2JpZW5zL2ltYWdlcy8xNjUyLzE2NTJfMDQtMjAyMC0wMi0yOC0wMTQ1LmpwZyIgYWx0PSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxOSkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMTY1Mi8xNjUyXzA1LTIwMjAtMDItMjgtMDE0NS5qcGciIHRpdGxlPSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxOSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMTY1Mi8xNjUyXzA1LTIwMjAtMDItMjgtMDE0NS5qcGciIGFsdD0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTkpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzE2NTIvMTY1Ml8wNi0yMDIwLTAyLTI4LTAxNDUuanBnIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTkpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzE2NTIvMTY1Ml8wNi0yMDIwLTAyLTI4LTAxNDUuanBnIiBhbHQ9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE5KSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2RhdGFzL2JpZW5zL2ltYWdlcy8xNjUyLzE2NTJfMDctMjAyMC0wMi0yOC0wMTQ1LmpwZyIgdGl0bGU9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE5KSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2RhdGFzL2JpZW5zL2ltYWdlcy8xNjUyLzE2NTJfMDctMjAyMC0wMi0yOC0wMTQ1LmpwZyIgYWx0PSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxOSkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMTY1Mi8xNjUyXzA4LTIwMjAtMDItMjgtMDE0NS5qcGciIHRpdGxlPSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxOSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMTY1Mi8xNjUyXzA4LTIwMjAtMDItMjgtMDE0NS5qcGciIGFsdD0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTkpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImpjYXJvdXNlbC1wcmV2IGljb192aWduZXR0ZV9wcmV2IiBocmVmPSIjIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJqY2Fyb3VzZWwtbmV4dCBpY29fdmlnbmV0dGVfbmV4dCIgaHJlZj0iIyI+PC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvc2VjdGlvbj4KICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhbm5vbmNlX3ByaWNlX2hvbm9yYWlyZXMiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJhbm5vbmNlX3ByaWNlIj43NTUgMDAwICZldXJvOzwvcD4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2hhcmdlcyI+CiAgICAgICAgICAgICAgICAgICAgSG9ub3JhaXJlcyDDoCBsYSBjaGFyZ2UgZHUgdmVuZGV1cgogICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgIAk8bGkgY2xhc3M9ImFubm9uY2VfbGlldV9xdWFydGllciI+CiAgICAgICAgICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgICAgICBQQVJJUyAxOQogICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgIE1haXJpZSBYSVjDqG1lCiAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFubm9uY2VfdHlwZSI+CiAgICAgICAgICAgICAgICAgICAgPHA+YXBwYXJ0ZW1lbnQ8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhbm5vbmNlX3N1cmZhY2UiPgogICAgICAgICAgICAgICAgICAgIDxwPjY0IG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFubm9uY2VfaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fcGllY2VzMiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4zICBwacOoY2VzJm5ic3A7PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAtJm5ic3A7CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fY2hhbWJyZXMiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+MiAgY2hhbWJyZXMmbmJzcDs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIC0mbmJzcDsKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb19iYWluIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjEgIHNhbGxlIGRlIGJhaW4mbmJzcDs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYW5ub25jZV9jaGFyZ2VfcmVmIj4KCQkJCQk8cCBjbGFzcz0iYW5ub25jZV9wcm9jZWR1cmUiPk1vbnRhbnQgbW95ZW4gYW5udWVsIGRlIGxhIHF1b3RlLXBhcnQgZGUgY2hhcmdlcyBjb3VyYW50ZXMgOiAxIDg0OCAmZXVybzs8L3A+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImFubm9uY2VfcmVmIj5SZWY6IE9XMS00ODk8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbm5vbmNlX2Rlc2NyaXB0aW9uX2RwZSI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZ19kcGUiIHNyYz0iaHR0cHM6Ly93d3cuYWdlbmNlLXBsdXMubmV0L3NraW5zL19kZWZhdWx0L2xpYi9BZ2VuY2VQbHVzL3dzL2ltZ0RQRS5hc2h4P3ZhbHVlPXZpZXJnZSZzaXplPTI2MHgyNjAmcGljdG89ZHBlX29tYnJlX3RyYW5zcGFyZW50IiBhbHQ9IkRpYWdub3N0aWMgZGUgcGVyZm9ybWFuY2Ugw6luZXJnw6l0aXF1ZSI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxwPkEgcHJveGltaXTDqSBpbW3DqWRpYXRlIGRlIGxhIE1haXJpZSBkdSBYSVjDqG1lIGV0IGR1IFBhcmMgZGVzIEJ1dHRlcyBDaGF1bW9udCwgZGFucyB1bmUgcsOpc2lkZW5jZSBkZSBzdGFuZGluZyBhdmVjIGdhcmRpZW4gZXQgYXNjZW5zZXVyLCBhcHBhcnRlbWVudCAzIHBpw6hjZXMgZGUgNjRtwrIgY29tcHJlbmFudCB1bmUgZW50csOpZSwgdW4gc8Opam91ciBvdXZyYW50IHN1ciB1biBncmFuZCBiYWxjb24gZGUgMTZtwrIgZXhwb3PDqSBzdWQtb3Vlc3QsIHVuZSBjdWlzaW5lIHPDqXBhcsOpZSAocG9zc2libGUgdXMpLCB1biBkw6lnYWdlbWVudCBhdmVjIHBsYWNhcmQsIDIgY2hhbWJyZXMsIHVuZSBzYWxsZSBkZSBiYWlucyBldCB1biB3YyBzw6lwYXLDqS4gVW4gZW1wbGFjZW1lbnQgZGUgcGFya2luZyBldCB1bmUgY2F2ZSBjb21wbMOodGVudCBsJ2Vuc2VtYmxlLiBDYWxtZSBhYnNvbHUgcG91ciBjZSBiaWVuIGx1bWluZXV4IGV0IGlkw6lhbGVtZW50IHNpdHXDqS48L3A+CiAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9ybS1hbWkiIG5hbWU9ImNvbnRhY3RfYW1pIiBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iYW1pLyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaWRiaWVuIiBpZD0iaWRiaWVuIiB2YWx1ZT0iMTY1MiIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiB2YWx1ZT0iT1cxLTQ4OSIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3VybCIgaWQ9ImJpZW5fdXJsIiB2YWx1ZT0iL2Fubm9uY2VzL3JlZi1vdzEtNDg5L3ZlbnRlLWFwcGFydGVtZW50LTMtcGllY2VzLTItY2hhbWJyZXMtcGFyaXMtNzUwMTkvIiAvPgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDwhLS08bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpY29faW1wcmltIiB0aXRsZT0iSW1wcmltZXIiICBocmVmPSIvZnIvaW1wcmVzc2lvbi9kZXRhaWxzLzE2NTIvIiB0YXJnZXQ9Il9ibGFuayI+PC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+LS0+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX2FtaSBlbnZvaV9hbWkiIGRhdGEtYmllbmlkPSIxNjUyIiB0aXRsZT0iIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgLy88IVtDREFUQVsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmVudm9pX2FtaScpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8Zm9ybSBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iL2FtaS9kZXRhaWxzLycrJCh0aGlzKS5hdHRyKCdkYXRhLWJpZW5pZCcpKycvIj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idXJsX3NsdWciIHZhbHVlPSJhbm5vbmNlcyIgLz5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icmVkaXJlY3QiIHZhbHVlPSIxIiAvPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4nKS5hcHBlbmRUbygnYm9keScpLnN1Ym1pdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAvL11dPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFqb3V0X3NlbGVjdGlvbiBpY29fc2VsZWN0aW9uIiB0aXRsZT0iQWpvdXRlciDDoCBtYSBzw6lsZWN0aW9uIj48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCQk8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5ub25jZV9mb3JtX2NvbnRhY3QiPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJhbm5vbmNlX2Zvcm1fdGl0cmUiPkRFTUFOREUgREUgUkVOU0VJR05FTUVOVFM8L2gyPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9InRyaWdnZXJfbWVudGlvbiIgaHJlZj0iL21lbnRpb25zLyIgdGl0bGU9Ik1lbnRpb25zIGzDqWdhbGVzIGV0IGJhcsOobWUgZGVzIGhvbm9yYWlyZXMgZGUgbCdhZ2VuY2UgaW1tb2JpbGnDqHJlIENhcGl0YWxlIGltbW9iaWxpZXIiPkNvbnN1bHRlciBsZSBiYXLDqG1lIGRlcyBob25vcmFpcmVzPC9hPgogICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5ub25jZV9mb3JtX2ludGVybG9jdXRldXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkFnZW5jZSBTZWNyw6l0YW48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+MDEgODEgNjkgNTkgODA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5jb250YWN0QGNhcGl0YWxlLWltbW9iaWxpZXIuY29tPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGZvcm0gaWQ9ImFubm9uY2VfZm9ybSIgY2xhc3M9InZhbGlkYXRlX2Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvYW5ub25jZXMvcmVmLW93MS00ODkvdmVudGUtYXBwYXJ0ZW1lbnQtMy1waWVjZXMtMi1jaGFtYnJlcy1wYXJpcy03NTAxOS8jY29udGFjdF9hbm5vbmNlIj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaG9uZXkiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ3ZWJzaXRlIj5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ3ZWJzaXRlIiBpZD0id2Vic2l0ZSIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VsZl9pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGFzdF9uYW1lIj5Ob20gPHNwYW4gY2xhc3M9InNtYWxsIj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJsYXN0X25hbWUiIHR5cGU9InRleHQiIG5hbWU9Imxhc3RfbmFtZSIgcGxhY2Vob2xkZXI9Ik5vbSoiIGNsYXNzPSJyZXF1aXJlZCBpY29fcHJvZmlsIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJsYXN0X25hbWUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJmaXJzdF9uYW1lIj5QcsOpbm9tIDxzcGFuIGNsYXNzPSJzbWFsbCI+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iZmlyc3RfbmFtZSIgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IlByw6lub20qIiBuYW1lPSJmaXJzdF9uYW1lIiBjbGFzcz0iaWNvX3Byb2ZpbCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0iZmlyc3RfbmFtZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IiBwYXJfZW1haWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImVtYWlsIj5FbWFpbCA8c3BhbiBjbGFzcz0ic21hbGwiPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImVtYWlsIiB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iRW1haWwqIiBuYW1lPSJlbWFpbCIgdmFsdWU9IiIgY2xhc3M9InJlcXVpcmVkIGVtYWlsIGljb19tYWlsIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJlbWFpbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSIgcF90ZWxlcGhvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InBob25lIj5Uw6lsw6lwaG9uZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJwaG9uZSIgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IlTDqWzDqXBob25lIiBuYW1lPSJwaG9uZSIgdmFsdWU9IiIgY2xhc3M9InJlcXVpcmVkIGljb190ZWwiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSIgIG1zZ19mb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb19tc2cyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibGFiZWxfbWVzc2FnZS1hbm5vbmNlIiBmb3I9Im1lc3NhZ2UiPk1lc3NhZ2UgPHNwYW4gY2xhc3M9InNtYWxsIj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0ibWVzc2FnZSIgcGxhY2Vob2xkZXI9Ik1lc3NhZ2UqIiBuYW1lPSJtZXNzYWdlIiBjbGFzcz0icmVxdWlyZWQiPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJtZXNzYWdlIiAvPgogICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJob25leSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im45cGhqb2R0OWg0NXV2ZnU0dDliZm02cjA1Ij5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJuOXBoam9kdDloNDV1dmZ1NHQ5YmZtNnIwNSIgaWQ9Im45cGhqb2R0OWg0NXV2ZnU0dDliZm02cjA1IiB2YWx1ZT0ibjlwaGpvZHQ5aDQ1dXZmdTR0OWJmbTZyMDUiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpZCIgaWQ9ImlkIiB2YWx1ZT0iMTY1MiIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiB2YWx1ZT0iT1cxLTQ4OSIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhZ2VuY2VfaWQiIGlkPSJhZ2VuY2VfaWQiIHZhbHVlPSI0IiAvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InN1YmplY3QiIGlkPSJzdWJqZWN0IiB2YWx1ZT0iQ29udGFjdEFubm9uY2UiIC8+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiBuYW1lPSJzZW5kX2VtYWlsIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJFbnZveWVyIi8+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9Im1hbmRhdG9yeVR4dCI+TGVzIGluZm9ybWF0aW9ucyByZWN1ZWlsbGllcyBzdXIgY2UgZm9ybXVsYWlyZSBzb250IGVucmVnaXN0ciZlYWN1dGU7ZXMgZGFucyB1biBmaWNoaWVyIGluZm9ybWF0aXMmZWFjdXRlOyBwYXIgbGEgc29jaSZlYWN1dGU7dCZlYWN1dGU7IDxzcGFuIGNsYXNzPSJhZ2VuY2VOYW1lIj4gQWdlbmNlIE5hbWU8L3NwYW4+IHBvdXIgbGEgZ2VzdGlvbiBldCBsZSBzdWl2aSBkZSB2b3RyZSBkZW1hbmRlLiBDb25mb3JtJmVhY3V0ZTttZW50ICZhZ3JhdmU7IGxhIGxvaSAmbGFxdW87IGluZm9ybWF0aXF1ZSBldCBsaWJlcnQmZWFjdXRlO3MgJnJhcXVvOywgVm91cyBwb3V2ZXogZXhlcmNlciB2b3RyZSBkcm9pdCBkJiMzOTthY2MmZWdyYXZlO3MgYXV4IGRvbm4mZWFjdXRlO2VzIHZvdXMgY29uY2VybmFudCBldCBsZXMgZmFpcmUgcmVjdGlmaWVyIGVuIGNvbnRhY3RhbnQgOiA8c3BhbiBjbGFzcz0iYWdlbmNlTmFtZSI+IEFnZW5jZSBOYW1lPC9zcGFuPiwgQ29ycmVzcG9uZGFudCBJbmZvcm1hdGlxdWUgZXQgbGliZXJ0JmVhY3V0ZTtzLCA8c3BhbiBjbGFzcz0iYWdlbmNlQWRkcmVzcyI+YWdlbmNlIGFkcmVzc2U8L3NwYW4+IG91ICZhZ3JhdmU7IDxhIGNsYXNzPSJhZ2VuY2VNYWlsIiBocmVmPSJtYWlsdG86Ij5hZ2VuY2UgbWFpbDwvYT4sIGVuIHByJmVhY3V0ZTtjaXNhbnQgZGFucyBsJnJzcXVvO29iamV0IGR1IGNvdXJyaWVyICZsYXF1bzsgRHJvaXQgZGVzIHBlcnNvbm5lcyAmcmFxdW87IGV0IGVuIGpvaWduYW50IGxhIGNvcGllIGRlIHZvdHJlIGp1c3RpZmljYXRpZiBkJnJzcXVvO2lkZW50aXQmZWFjdXRlOy48L2FydGljbGU+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkvLzwhW0NEQVRBWwoKCXZhciBhZ2VuY3kgPSBbXTsKCglmdW5jdGlvbiBhZmZpY2hhZ2VUeHQoYXJyYXlBZ2VuY3kpewogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VOYW1lJykuZWFjaChmdW5jdGlvbigpeyQodGhpcykudGV4dChhcnJheUFnZW5jeVswXS5uYW1lKTt9KTsKICAgICAgICAkKCdhcnRpY2xlLm1hbmRhdG9yeVR4dCAuYWdlbmNlQWRkcmVzcycpLnRleHQoYXJyYXlBZ2VuY3lbMF0uYWRkcmVzcyk7CiAgICAgICAgJCgnYXJ0aWNsZS5tYW5kYXRvcnlUeHQgLmFnZW5jZU1haWwnKS50ZXh0KGFycmF5QWdlbmN5WzBdLm1haWwpOwogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VNYWlsJykuYXR0cignaHJlZicsJ21haWx0bzonK2FycmF5QWdlbmN5WzBdLm1haWwpOwoKICAgICAgICBhZ2VuY3kgPSBbXTsgLy8gb24gdmlkZSBsZSB0YWJsZWF1Cgl9CgoJZnVuY3Rpb24gYWdlbmNlTWFueSgpewoJCWFnZW5jeS5wdXNoKHsKCQkJbmFtZTokKCdzZWxlY3QjYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbmFtZScpLCBhZGRyZXNzOiQoJ3NlbGVjdCNhZ2VuY2VfaWQgb3B0aW9uW3ZhbHVlPTFdJykuYXR0cignZGF0YS1sb2NhbGlzYXRpb24nKSwgbWFpbDokKCdzZWxlY3QjYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbWFpbCcpCgkJfSk7CgoJCWFmZmljaGFnZVR4dChhZ2VuY3kpOwoKCQkkKCdzZWxlY3QjYWdlbmNlX2lkJykub24oJ2NoYW5nZScsZnVuY3Rpb24oKXsKCQkJYWdlbmN5LnB1c2goewoJCQkJbmFtZTokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLW5hbWUnKSwgYWRkcmVzczokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLWxvY2FsaXNhdGlvbicpLCBtYWlsOiQodGhpcykuY2hpbGRyZW4oIjpzZWxlY3RlZCIpLmF0dHIoJ2RhdGEtbWFpbCcpCgkJCX0pOwoJCQlhZmZpY2hhZ2VUeHQoYWdlbmN5KTsKCQl9KTsKCX0KCgkvL11dPgo8L3NjcmlwdD4KCgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkJLy88IVtDREFUQVsKCgkJYWdlbmN5LnB1c2goewoJCQluYW1lOiJBZ2VuY2UgU2VjcsOpdGFuICIsIGFkZHJlc3M6IjE4LCBhdmVudWUgU2VjcsOpdGFuIDc1MDE5IFBhcmlzIiwgbWFpbDoiY29udGFjdEBjYXBpdGFsZS1pbW1vYmlsaWVyLmNvbSIKCQl9KTsKCgkJYWZmaWNoYWdlVHh0KGFnZW5jeSk7CgoJCS8vXV0+Cgk8L3NjcmlwdD4KCgoKCgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgPHNwYW4gY2xhc3M9ImNsZWFyIj48L3NwYW4+CiAgICA8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgLyoqKioqKipBSk9VVCBTRUxFQ1RJT04qKioqKioqKi8KCnZhciBtZXNzYWdlID0gbmV3IEFycmF5KCdDZXR0ZSBhbm5vbmNlIGEgw6l0w6kgYWpvdXTDqWUgw6Agdm90cmUgc8OpbGVjdGlvbi4nLCdDZXR0ZSBhbm5vbmNlIGVzdCBkw6lqw6AgZGFucyB2b3RyZSBzw6lsZWN0aW9uLicpOwoKJCgnLmFqb3V0X3NlbGVjdGlvbicpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgIG1hc2VsZWN0aW9uKCcnLCcxNjUyJywnYWRkJyxmdW5jdGlvbihyZXRvdXIpewoKICAgICAgICB2YXIgYW5pbV90aW1lb3V0OwogICAgICAgIHZhciBhbmltMl90aW1lb3V0OwogICAgICAgIHZhciByZW1vdmVfdGltZW91dDsKCiAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1fdGltZW91dCk7CiAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW0yX3RpbWVvdXQpOwogICAgICAgIGNsZWFyVGltZW91dChyZW1vdmVfdGltZW91dCk7CgogICAgICAgIGlmKHJldG91cil7CgogICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBvbmNlJykuYXBwZW5kKCc8cD4nK21lc3NhZ2VbMF0rJzwvcD4nKTsKCiAgICAgICAgICAgIHZhciBuYl9zZWxlY3Rpb24gPSBwYXJzZUludCgkKCcubmJfc2VsZWN0aW9uJykudGV4dCgpKSsxOwogICAgICAgICAgICAkKCcubmJfc2VsZWN0aW9uJykudGV4dChuYl9zZWxlY3Rpb24pOwoKICAgICAgICAgICAgaWYoICQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KCkgPiAwICl7CgogICAgICAgICAgICAgICAgJCgnLm5iX3NlbGVjdGlvbicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcic6JzFweCBzb2xpZCAjMDA2QjJEJywKICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6JyMwMDZCMkQnLAogICAgICAgICAgICAgICAgICAgICdjb2xvcic6JyNmZmYnCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFuaW1fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5hZGRDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgIGFuaW0yX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgIHJlbW92ZV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnb25jZScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgIH0sNjAwKTsKCiAgICAgICAgICAgICAgICB9LCAxNTAwKTsKCiAgICAgICAgICAgIH0sIDEwMCk7CgogICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYXBwZW5kVG8oJ2JvZHknKS5hZGRDbGFzcygnYWxlcnQgZG9uZScpLmFwcGVuZCgnPHA+JyttZXNzYWdlWzFdKyc8L3A+Jyk7CgogICAgICAgICAgICBhbmltX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICBhbmltMl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICByZW1vdmVfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2RvbmUnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICB9LDYwMCk7CgogICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICB9LCAxMDApOwogICAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBmYWxzZTsKCn0pOwo8L3NjcmlwdD4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKGUpIHsKCiAgICAvKioqKkNMT05FIElNRydzIEZST00gVklHTkVUVEUgVE8gRElBUE9SQU1BKioqKi8KCiAgICAkKCcjZGlhcG9yYW1hJykuZW1wdHkoKS5hcHBlbmQoJCgnLnRodW1icyA+IGRpdicpLmNsb25lKCkpOwogICAgJCgnI2RpYXBvcmFtYScpLmZpbmQoJ2EnKS5hZGRDbGFzcygnbGlnaHRib3gnKTsKCiAgICAkKCdhLmxpZ2h0Ym94JykuY29sb3Jib3goe3JlbDonbGlnaHRib3gnLCB0cmFuc2l0aW9uOiJmYWRlIixtYXhXaWR0aDoiMTA3NHB4IixtYXhIZWlnaHQ6IjkwJSJ9KTsKCiAgICAvKioqKklOU1RBTkNFIENBUk9VU0VMIElGIENPTkRJVElPTiBWQUxJREFURSoqKiovCgogICAgaWYgKCQoJy50aHVtYnMgPiBkaXYnKS5sZW5ndGggPiA0KSB7CgogICAgICAgICQoJy5jeWNsZScpLmFkZENsYXNzKCdqY2Fyb3VzZWwtbWFuJyk7CiAgICAgICAgJCgnLmpjYXJvdXNlbC1tYW4nKS5qY2Fyb3VzZWwoKTsKICAgICAgICAkKCcuamNhcm91c2VsLXByZXYsLmpjYXJvdXNlbC1uZXh0Jykuc2hvdygpOwoKICAgICAgICAvKioqKkNPTlRST0wgQlROIE5FWFQgUFJFViBDQVJPVVNFTCoqKiovCgogICAgICAgICQoJy5qY2Fyb3VzZWwtcHJldicpLm9uKCdqY2Fyb3VzZWxjb250cm9sOmFjdGl2ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpOwogICAgICAgIH0pCiAgICAgICAgLm9uKCdqY2Fyb3VzZWxjb250cm9sOmluYWN0aXZlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2luYWN0aXZlJyk7CiAgICAgICAgfSkKICAgICAgICAuamNhcm91c2VsQ29udHJvbCh7CiAgICAgICAgICAgIHRhcmdldDogJy09MScKICAgICAgICB9KTsKCiAgICAgICAgJCgnLmpjYXJvdXNlbC1uZXh0Jykub24oJ2pjYXJvdXNlbGNvbnRyb2w6YWN0aXZlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2luYWN0aXZlJyk7CiAgICAgICAgfSkKICAgICAgICAub24oJ2pjYXJvdXNlbGNvbnRyb2w6aW5hY3RpdmUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnaW5hY3RpdmUnKTsKICAgICAgICB9KQogICAgICAgIC5qY2Fyb3VzZWxDb250cm9sKHsKICAgICAgICAgICAgdGFyZ2V0OiAnKz0xJwogICAgICAgIH0pOwoKICAgICAgICAvKioqKkNPTlRST0wgQ0FST1VTRUwgVklBIFNMSURFIERJQVBPUkFNQSoqKiovCgogICAgICAgICQoJy5hbm5vbmNlX2RldGFpbHMgI2RpYXBvcmFtYScpLm9uKCdjeWNsZS1pbml0aWFsaXplZCcsIGZ1bmN0aW9uKCBldmVudCwgb3B0cyApIHsKICAgICAgICAgICAgJCgnI3RodW1ic19jYXJvdXNlbCAudGh1bWJzID4gZGl2JykucmVtb3ZlQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpLmVxKG9wdHMuY3VyclNsaWRlKS5hZGRDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJyk7CiAgICAgICAgfSk7CgogICAgICAgICQoJy5hbm5vbmNlX2RldGFpbHMgI2RpYXBvcmFtYScpLm9uKCdjeWNsZS1iZWZvcmUnLCBmdW5jdGlvbiggZXZlbnQsIG9wdHMgKSB7CiAgICAgICAgICAgICQoJyN0aHVtYnNfY2Fyb3VzZWwgLnRodW1icyA+IGRpdicpLnJlbW92ZUNsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKS5lcShvcHRzLm5leHRTbGlkZSkuYWRkQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpOwogICAgICAgICAgICAkKCcuamNhcm91c2VsLW1hbicpLmpjYXJvdXNlbCgnc2Nyb2xsJywgb3B0cy5uZXh0U2xpZGUpOwogICAgICAgIH0pOwoKICAgICAgICAvKioqKlNFVCBVUCBDQVJPVVNFTCBBTkQgSElTIENISUxEUkVOIFdJRFRIKioqKi8KCiAgICAgICAgdmFyIHggPSAkKCcuamNhcm91c2VsLW1hbicpLndpZHRoKCkvNDsKICAgICAgICB2YXIgeSA9ICQoJy50aHVtYnMgPiBkaXYnKS5sZW5ndGg7CgogICAgICAgICQoJy5qY2Fyb3VzZWwtbWFuIC50aHVtYnMnKS5jc3MoewogICAgICAgICAgICAnd2lkdGgnOngqeSsncHgnCiAgICAgICAgfSk7CgogICAgICAgICQoJy50aHVtYnMgPiBkaXYnKS5jc3MoewogICAgICAgICAgICAnd2lkdGgnOjEwMC95KyclJwogICAgICAgIH0pOwoKICAgIH0KCiAgICAvL0lOU1RBTkNFIERJQVBPUkFNQSBGSUNIRSBCSUVOCgogICAgJCgnLmFubm9uY2VfZGV0YWlscyAjZGlhcG9yYW1hJykuY3ljbGUoewogICAgICAgIHNsaWRlczonZGl2JywKICAgICAgICBwYWdlcjonLmN5Y2xlLXBhZ2VyJywKICAgICAgICBtYW51YWxTcGVlZDo0MDAsCiAgICAgICAgZng6ICdmYWRlJywKICAgICAgICBzcGVlZDoyMDAwLAogICAgICAgIHN3aXBlOnRydWUKICAgIH0pOwoKICAgIC8qKioqQVVUT1NDQUxFIE9OIElNRyBWSUdORVRURVMqKioqLwoKICAgIEltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgPiBkaXYgPiBhID4gaW1nJykpOwoKICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKXsKCiAgICAgICAgLyoqKipJTlNUQU5DRSBDQVJPVVNFTCBJRiBDT05ESVRJT04gVkFMSURBVEUqKioqLwoKICAgICAgICBpZiAoJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aCA+IDQpIHsKCiAgICAgICAgICAgIC8qKioqU0VUIFVQIENBUk9VU0VMIEFORCBISVMgQ0hJTERSRU4gV0lEVEggKioqKi8KCiAgICAgICAgICAgIHZhciB4ID0gJCgnLmpjYXJvdXNlbC1tYW4nKS53aWR0aCgpLzQ7CiAgICAgICAgICAgIHZhciB5ID0gJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aDsKCiAgICAgICAgICAgICQoJy5qY2Fyb3VzZWwtbWFuIC50aHVtYnMnKS5jc3MoewogICAgICAgICAgICAgICAgJ3dpZHRoJzp4KnkrJ3B4JwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICQoJy50aHVtYnMgPiBkaXYnKS5jc3MoewogICAgICAgICAgICAgICAgJ3dpZHRoJzoxMDAveSsnJScKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvKioqKkFVVE9TQ0FMRSBPTiBJTUcgVklHTkVUVEVTKioqKi8KCiAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnLnRodW1icyA+IGRpdiA+IGEgPiBpbWcnKSk7CgogICAgfSk7CgoKICAgIC8vQU5JTSBGT09URVIgRklDSEUgQklFTgogICAgKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgdmFyIGlzT3BlbiA9IGZhbHNlOwogICAgICAgIHZhciBoZWlnaHQgPSAkKCdmb290ZXInKS5pbm5lckhlaWdodCgpOwogICAgICAgICQoJ2Zvb3RlcicpLmFkZENsYXNzKCdmaXhlZCcpOwogICAgICAgICQoJ2Zvb3RlcicpLmNzcyh7CiAgICAgICAgICAgICdib3R0b20nOi1oZWlnaHQrJ3B4JwogICAgICAgIH0pOwoKICAgICAgICAkKCcuYnV0dG9uX2Zvb3RlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7CgogICAgICAgICAgICBpZiggaXNPcGVuID09IGZhbHNlICl7CgogICAgICAgICAgICAgICAgaXNPcGVuID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24nOidjZW50ZXIgLTI1cHgnLAogICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzonI2ZmZicKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICQoJ2Zvb3RlcicpLmFuaW1hdGUoeydib3R0b20nOicwJ30sMjAwKTsKCiAgICAgICAgICAgIH1lbHNlewoKICAgICAgICAgICAgICAgIGlzT3BlbiA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1wb3NpdGlvbic6J2NlbnRlciAzcHgnLAogICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzonIzMzMycKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICQoJ2Zvb3RlcicpLmFuaW1hdGUoeydib3R0b20nOi1oZWlnaHR9LDIwMCk7CgogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIH0pOwoKICAgIH0pKCk7Cgp9KTsKPC9zY3JpcHQ+CgoKICAgIDxmb290ZXI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfZm9vdGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2x1bW5fZm9vdGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9ImxvZ29fZm9vdGVyIiBocmVmPSJodHRwczovL3d3dy5jYXBpdGFsZS1pbW1vYmlsaWVyLmNvbS8iPgogICAgICAgICAgICAgICAgPGltZyBhbHQ9IiIgc3JjPSIvdGhlbWUvX3NpdGVGUy5jYXBpdGFsZWltbW8vaW1hZ2VzL2xvZ29fZm9vdGVyLnBuZyIgLz4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbHVtbl9mb290ZXIgYWdlbmNlX2Zvb3RlciI+CiAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5jYXBpdGFsZS1pbW1vYmlsaWVyLmNvbS9mci9hZ2VuY2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QWdlbmNlIEpvdXJkYWluPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgIDIgYmlzLCBydWUgZHUgSm91cmRhaW4KICAgICAgICAgICAgICAgICAgICAgICAgNzUwMjAKICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmNhcGl0YWxlLWltbW9iaWxpZXIuY29tL2ZyL2FnZW5jZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5BZ2VuY2UgR2FtYmV0dGE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgMTEsIHBsYWNlIEdhbWJldHRhCiAgICAgICAgICAgICAgICAgICAgICAgIDc1MDIwCiAgICAgICAgICAgICAgICAgICAgICAgIFBhcmlzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5jYXBpdGFsZS1pbW1vYmlsaWVyLmNvbS9mci9hZ2VuY2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QWdlbmNlIFB5csOpbsOpZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgNjMsIHJ1ZSBkZXMgUHlyw6luw6llcwogICAgICAgICAgICAgICAgICAgICAgICA3NTAyMAogICAgICAgICAgICAgICAgICAgICAgICBQYXJpcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuY2FwaXRhbGUtaW1tb2JpbGllci5jb20vZnIvYWdlbmNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkFnZW5jZSBTZWNyw6l0YW48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgMTgsIGF2ZW51ZSBTZWNyw6l0YW4KICAgICAgICAgICAgICAgICAgICAgICAgNzUwMTkKICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sdW1uX2Zvb3RlciI+CiAgICAgICAgICAgIDxuYXY+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9hY2hldGVyLyI+QUNIRVRFUjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvZXN0aW1hdGlvbi8iPkVTVElNRVI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3ZlbmR1LyI+VkVORFU8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL2NvbnRhY3QvIj5DT05UQUNUPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgICAgICA8L25hdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2x1bW5fZm9vdGVyIGxhc3QiPgogICAgICAgICAgICA8bmF2PgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvYWdlbmNlcy8iPk5PUyBBR0VOQ0VTPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9yZWNydXRlbWVudC1hZ2VuY2UtaW1tb2JpbGllcmUtbmVnb2NpYXRldXItbmVnb2NpYXRyaWNlLWNhcGl0YWxlLWltbW9iaWxpZXIvIiB0aXRsZT0iT2ZmcmUgZOKAmWVtcGxvaSDDoCBQYXJpcyI+UmVjcnV0ZW1lbnQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3NlbGVjdGlvbi8iPk1BIFPDiUxFQ1RJT048L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL2xpZW5zLyI+TElFTlMgVVRJTEVTPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgICAgICA8L25hdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8c3BhbiBjbGFzcz0iY2xlYXIiPjwvc3Bhbj4KICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvc19sZWdhbGVzIj4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0idHJpZ2dlcl9tZW50aW9uIiBocmVmPSIvbWVudGlvbnMvIiB0aXRsZT0iTWVudGlvbnMgbMOpZ2FsZXMgZXQgYmFyw6htZSBkZXMgaG9ub3JhaXJlcyBkZSBsJ2FnZW5jZSBpbW1vYmlsacOocmUgQ2FwaXRhbGUgaW1tb2JpbGllciI+TWVudGlvbnMgbMOpZ2FsZXMgLyBCYXLDqG1lPC9hPgogICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgQWdlbmNlIFBsdXMKICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYWdlbmNlLXBsdXMuZnIiIHRpdGxlPSJBZ2VuY2UgUGx1cywgc29sdXRpb25zIHBvdXIgbGVzIHByb2Zlc3Npb25uZWxzIGRlIGwnaW1tb2JpbGllciI+TG9naWNpZWwgaW1tb2JpbGllciwgY3LDqWF0aW9uIGRlIHNpdGUgd2ViPC9hPgogICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5hZ2VuY2UtcGx1cy5mci9jcmVhdGlvbi1zaXRlLWludGVybmV0LWltbW9iaWxpZXIvIiB0aXRsZT0iQWdlbmNlIFBsdXMsIHNvbHV0aW9ucyBwb3VyIGxlcyBwcm9mZXNzaW9ubmVscyBkZSBsJ2ltbW9iaWxpZXIiPlLDqWFsaXNhdGlvbiBkZSBzaXRlIGludGVybmV0IGltbW9iaWxpZXI8L2E+CgkJCQktCgkJCQk8YSBocmVmPSJodHRwczovL3d3dy5jYXBpdGFsZS1pbW1vYmlsaWVyLmNvbS8mbW9iaWxlPTEiIHRpdGxlPSJTaXRlIG1vYmlsZSI+U2l0ZSBtb2JpbGU8L2E+CiAgICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Zvb3Rlcj4KPGRpdiBjbGFzcz0iYnV0dG9uX2Zvb3RlciI+PC9kaXY+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKCiAgICAgICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICQoJy50cmlnZ2VyX21lbnRpb24nKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgdmFyIHZvaWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAkKHZvaWxlKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdib3hfbWVudGlvbnMnKTsKICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICB2YXIgbmV3Tm9kZTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgIHZhciB2ZXJ0aWNhbF9jZW50ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgICAgICAgICB2YXIgY2xvc2Vfc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgICAgICAgICAgICQobmV3Tm9kZSkuYXBwZW5kVG8odm9pbGUpOwogICAgICAgICAgICAgICAgJChuZXdOb2RlMikuYXBwZW5kVG8obmV3Tm9kZSk7CiAgICAgICAgICAgICAgICAkKHZlcnRpY2FsX2NlbnRlcikuYXBwZW5kVG8odm9pbGUpLmFkZENsYXNzKCd2ZXJ0aWNhbF9jZW50ZXInKTsKICAgICAgICAgICAgICAgICQoY2xvc2Vfc3BhbikuYXBwZW5kVG8obmV3Tm9kZSkuYWRkQ2xhc3MoJ2Nsb3NlX21lbnRpb25zIGljb19jbG9zZScpOwogICAgICAgICAgICAgICAgdmFyIG5ld0ZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7CiAgICAgICAgICAgICAgICAkKG5ld0ZyYW1lKS5hcHBlbmRUbyhuZXdOb2RlMik7CiAgICAgICAgICAgICAgICBuZXdGcmFtZS5zcmMgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKSsnJmhlYWRlcj0wJmZvb3Rlcj0wJzsKICAgICAgICAgICAgICAgIG5ld0ZyYW1lLnNjcm9sbGluZyA9ICdubyc7CiAgICAgICAgICAgICAgICAkKCcuYm94X21lbnRpb25zJykuZmFkZUluKDMwMCk7CgogICAgICAgICAgICAgICAgJCgnLmJveF9tZW50aW9ucyBpZnJhbWUnKS5sb2FkKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICQodGhpcykuY29udGVudHMoKS5maW5kKCcjYmtnZCcpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdmb250LXNpemUnOicyZW0nCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQuYm9keS5zdHlsZS5oZWlnaHQgPSAkKHRoaXMpLmNvbnRlbnRzKCkuZmluZCgnLmNvbnRlbnRfbWVudGlvbnMnKS5pbm5lckhlaWdodCgpICsgJ3B4JzsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICQoJ2JvZHksaHRtbCcpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzonaGlkZGVuJwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgJCgnLmNsb3NlX21lbnRpb25zJykub24oJ2NsaWNrJyxmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgICAgICAkKCcuYm94X21lbnRpb25zJykuZmFkZU91dCgzMDApOwoKICAgICAgICAgICAgICAgICAgICAkKCdib2R5LGh0bWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOid2aXNpYmxlJwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgfSk7CgogICAgICAgIH0pKCk7CgogICAgfSk7Cgo8L3NjcmlwdD4KCiAgICA8ZGl2IGNsYXNzPSJwb3B1cC1jb250ZW50Ij4KICAgICAgICA8c3Bhbj5FbiBwb3Vyc3VpdmFudCB2b3RyZSBuYXZpZ2F0aW9uIHN1ciBjZSBzaXRlLCB2b3VzIGFjY2VwdGV6IGwndXRpbGlzYXRpb24gZGUgY29va2llcyBkZXN0aW7DqXMgw6AgbGEgcsOpYWxpc2F0aW9uIGRlIHN0YXRpc3RpcXVlcyBkZSB2aXNpdGVzLjxhIGhyZWY9Ii9tZW50aW9ucy8jY29va2llcyIgY2xhc3M9Im1vcmUtYnV0dG9uIj5FbiBzYXZvaXIgcGx1czwvYT48L3NwYW4+CiAgICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImFncmVlLWJ1dHRvbiIgdmFsdWU9IkNvbnRpbnVlciIvPgogICAgPC9kaXY+CjwvZGl2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvY29uZmlybV9jb29raWUubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKCgkkKCdib2R5JykuZmxvd3R5cGUoewogICAgICAgICAgICBmb250UmF0aW86IDgwLAogICAgICAgICAgICBtaW5Gb250OjEwCgl9KTsKCglpZiAoICQod2luZG93KS53aWR0aCgpIDwgNzY4KSB7CiAgICAgICAgICAgICQoJ21ldGFbbmFtZT12aWV3cG9ydF0nKS5hdHRyKCdjb250ZW50Jywnd2lkdGg9NzIwLHVzZXItc2NhbGFibGU9bm8nKTsKCX0KICAgICAgICAkKCcuYWdyZWUtYnV0dG9uJykub24oJ2NsaWNrJyxmdW5jdGlvbigpewogICAgICAgICAgIGNvbmZpcm1jb29raWUoJycsZnVuY3Rpb24ocmV0b3VyKXsKICAgICAgICAgICAgICAgaWYgKHJldG91cikgeyQoJy5wb3B1cC1jb250ZW50JykuaGlkZSgpO30KICAgICAgICAgICB9KTsKICAgICAgICB9KTsKPC9zY3JpcHQ+CgoKPC9ib2R5Pgo8L2h0bWw+Cg==
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:25 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-en108-1726/vente-appartement-4-pieces-3-chambres-paris-75020/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=s7e5q09t86mkrd06oq9s8ga3d4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:25 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-xi1-1098/vente-appartement-2-pieces-1-chambre-paris-75020/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=cr26ksvne31g1kkel802kqrsn5; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:25 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-en108-1732/vente-appartement-2-pieces-1-chambre-paris-75020/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=n88oi2ddec3oqq4v6qf6tm26l0; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:25 GMT
- request:
    method: get
    uri: https://www.capitale-immobilier.com/annonces/ref-ow1-493/vente-appartement-1-piece-paris-75019/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 16 Apr 2020 10:00:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=jethmlo8bc2dk9195h88faf840; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 10:00:26 GMT
recorded_with: VCR 5.1.0
