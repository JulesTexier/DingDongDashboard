---
http_interactions:
- request:
    method: get
    uri: https://www.paris20-arthurimmo.com/immobilier/pays/achat/france.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - User-Agent
      Server:
      - Microsoft-IIS/10.0
      X-Aspnet-Version:
      - 4.0.30319
      X-S:
      - PRD-IIS-ID3X-04
      - PRD-IIS-ID3X-04
      Cache:
      - max-age=10
      - max-age=10
      P3p:
      - policyref="http://v2.cnxweb.com/w3c/p3p.xml", CP="NOI DSP COR IND ADMa DEVa
        OUR UNI COM NAV"
      Set-Cookie:
      - ASP.NET_SessionId=dfst2jtag5geizbit30hsdj1; path=/; HttpOnly; SameSite=Lax
      - PolirisPREStats=lBxbRWK72eBcFV1HC9Y; domain=.paris20-arthurimmo.com; path=/
      X-Powered-By:
      - ASP.NET
      Access-Control-Allow-Origin:
      - "*"
      Date:
      - Thu, 16 Apr 2020 12:56:00 GMT
      Content-Length:
      - '53454'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 12:56:01 GMT
- request:
    method: get
    uri: https://www.paris20-arthurimmo.com/annonces/achat/appartement/paris-20eme-75/28400.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - User-Agent
      Server:
      - Microsoft-IIS/10.0
      X-Aspnet-Version:
      - 4.0.30319
      X-S:
      - PRD-IIS-ID3X-04
      - PRD-IIS-ID3X-04
      Cache:
      - max-age=10
      - max-age=10
      Set-Cookie:
      - ASP.NET_SessionId=zlohcxeac1mvr1ydm10fdcyr; path=/; HttpOnly; SameSite=Lax
      X-Powered-By:
      - ASP.NET
      Access-Control-Allow-Origin:
      - "*"
      Date:
      - Thu, 16 Apr 2020 12:56:02 GMT
      Content-Length:
      - '58195'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 12:56:02 GMT
recorded_with: VCR 5.1.0
