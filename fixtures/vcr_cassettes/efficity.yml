---
http_interactions:
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/results/?inputed_location=8075056&max_price=&min_nb_of_rooms=1&property_type=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Origin
      Cache-Control:
      - max-age=
      X-Varnish:
      - '492862'
      - '872888'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:25 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_87-m2_paris_75011_1248466/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      Vary:
      - Cookie, Origin
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - max-age=
      X-Varnish:
      - '1035831'
      - '462279'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:25 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_20-m2_paris_75015_19101578/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Cookie, Origin
      Cache-Control:
      - max-age=
      X-Varnish:
      - '1114478'
      - '492868'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:25 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_26-m2_paris_75018_19098235/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      Vary:
      - Cookie, Origin
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - max-age=
      X-Varnish:
      - '492879'
      - '872891'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:25 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_27-m2_paris_75010_18472449/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      Vary:
      - Cookie, Origin
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - max-age=
      X-Varnish:
      - '131834'
      - '456091'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CgoKPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIj4KICAgIDxoZWFkPgogICAgICAgIDwhLS0gQ29weSAmIFBhc3RlIFJlYWwgRmF2aWNvbiBHZWVuZXJhdG9yIGNvZGUgOiBodHRwOi8vcmVhbGZhdmljb25nZW5lcmF0b3IubmV0IC0tPgogICAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE4MHgxODAiIGhyZWY9Ii8vZDI1YndtejJjaG53Z3ouY2xvdWRmcm9udC5uZXQvaW1nL2FwcGxlLXRvdWNoLWljb24ucG5nIj4KICAgICAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIHR5cGU9ImltYWdlL3gtaWNvbiIgaHJlZj0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9pbWcvZmF2aWNvbi5pY28iPgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBocmVmPSIvL2QyNWJ3bXoyY2hud2d6LmNsb3VkZnJvbnQubmV0L2ltZy9mYXZpY29uLTMyeDMyLnBuZyIgc2l6ZXM9IjMyeDMyIj4KICAgICAgICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3BuZyIgaHJlZj0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9pbWcvZmF2aWNvbi0xNngxNi5wbmciIHNpemVzPSIxNngxNiI+CiAgICAgICAgPGxpbmsgcmVsPSJtYW5pZmVzdCIgaHJlZj0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9zaXRlLndlYm1hbmlmZXN0Ij4KICAgICAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iI0ZGRkZGRiI+CiAgICAgICAgPCEtLSBBcHBsZSBNb2JpbGUgLS0+CiAgICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBocmVmPSIiPgogICAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtc3RhcnR1cC1pbWFnZSIgaHJlZj0icGF0aC90by9zdGFydHVwLnBuZyI+CiAgICAgICAgPG1ldGEgbmFtZT0nSGFuZGhlbGRGcmllbmRseScgY29udGVudD0ndHJ1ZScgLz4KICAgICAgICA8bWV0YSBuYW1lPSdmb3JtYXQtZGV0ZWN0aW9uJyBjb250ZW50PSd0ZWxlcGhvbmU9bm8nIC8+CiAgICAgICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi10YXAtaGlnaGxpZ2h0IiBjb250ZW50PSJubyI+CiAgICAgICAgPCEtLSBBZGQgdG8gSG9tZSBTY3JlZW4gLS0+CiAgICAgICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtdGl0bGUiIGNvbnRlbnQ9IiIgLz4KICAgICAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIiBjb250ZW50PSJubyIgLz4KICAgICAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1zdGF0dXMtYmFyLXN0eWxlIiBjb250ZW50PSJibGFjayIgLz4KICAgICAgICA8IS0tIFNtYXJ0IEFwcCBCYW5uZXIgLSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9zYWZhcmkvZG9jdW1lbnRhdGlvbi9BcHBsZUFwcGxpY2F0aW9ucy9SZWZlcmVuY2UvU2FmYXJpSFRNTFJlZi9BcnRpY2xlcy9NZXRhVGFncy5odG1sIC0tPgogICAgICAgIDxtZXRhIG5hbWU9ImFwcGxlLWl0dW5lcy1hcHAiIGNvbnRlbnQ9ImFwcC1pZD1BUFBfSUQsYWZmaWxpYXRlLWRhdGE9QUZGSUxJQVRFX0lELGFwcC1hcmd1bWVudD1TT01FX1RFWFQiPgoKICAgICAgICAKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgIDwhLS0gRmFjZWJvb2sgT3BlbiBHcmFwaAogICAgICAgICAgICAgICAgaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS90b29scy9kZWJ1Zy9zaGFyaW5nLwogICAgICAgICAgICAgICAgaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9kb2NzL3NoYXJpbmcvd2VibWFzdGVycyNtYXJrdXAgLS0+CiAgICAgICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0iZmI6YXBwX2lkIiBjb250ZW50PSIyMDAzMjg1NjA2NDQ3NTk1Ij4KICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJ3ZWJzaXRlIj4KICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJhcnRpY2xlOmF1dGhvciIgY29udGVudD0iIj4KICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzpsb2NhbGUiIGNvbnRlbnQ9ImZyX0ZSIj4KICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9ImVmZmlDaXR5Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cHM6Ly9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTg0NzI0NDkvcGhvdG9zL2wvcDEwNzA2OTEuSlBHIj4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iNzUwMTAgUEFSSVMgLSBHT05DT1VSVCAtIENIQVJNQU5UIFNUVURJTyBBVkVDIEJFTExFIFRFUlJBU1NFIFZFTkRVIExPVUUgIC0gZWZmaUMiPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJBY2hhdCBhcHBhcnRlbWVudCAyNyBtMiBQYXJpcyAoNzUwMTApLCAxIHBpw6hjZSI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL2NsYXNzaWZpZWRzLmVmZmlzdHVkaW8uY29tOjk1MDEvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF8yNy1tMl9wYXJpc183NTAxMF8xODQ3MjQ0OS8iPgoKICAgICAgICAKCiAgICAgICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0ieC1kbnMtcHJlZmV0Y2gtY29udHJvbCIgY29udGVudD0ib24iPgogICAgICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICAgICAgPCEtLSBUaGUgYWJvdmUgbWV0YSB0YWdzICptdXN0KiBjb21lIGZpcnN0IGluIHRoZSBoZWFkOyBhbnkgb3RoZXIgaGVhZCBjb250ZW50IG11c3QgY29tZSAqYWZ0ZXIqIHRoZXNlIHRhZ3MgLS0+CiAgICAgICAgCiAgICAKICAgICAgICA8bGluayByZWw9ImRucy1wcmVmZXRjaCIgaHJlZj0iLy9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0IiAvPgogICAgICAgIDxsaW5rIHJlbD0iZG5zLXByZWZldGNoIiBocmVmPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0IiAvPgogICAgICAgIDxsaW5rIHJlbD0iZG5zLXByZWZldGNoIiBocmVmPSIvL2FrYXRyYWNraW5nLmVzZWFyY2h2aXNpb24uY29tIiAvPgogICAgICAgIDxsaW5rIHJlbD0iZG5zLXByZWZldGNoIiBocmVmPSIvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbSIgLz4KICAgICAgICA8bGluayByZWw9ImRucy1wcmVmZXRjaCIgaHJlZj0iLy93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20iIC8+CiAgICAgICAgPGxpbmsgcmVsPSJkbnMtcHJlZmV0Y2giIGhyZWY9Ii8vc3RhdHMuZy5kb3VibGVjbGljay5uZXQiIC8+CiAgICAgICAgCiAgICA8bGluayByZWw9ImRucy1wcmVmZXRjaCIgaHJlZj0iaHR0cHM6Ly9lMWlzaTZmczBna2tjci5jbG91ZGZyb250Lm5ldCIgLz4KICAgIDxsaW5rIHJlbD0iZG5zLXByZWZldGNoIiBocmVmPSJodHRwczovL2Uxc2ZheGVrZms3OXpoLmNsb3VkZnJvbnQubmV0IiAvPgogICAgPGxpbmsgcmVsPSJkbnMtcHJlZmV0Y2giIGhyZWY9Imh0dHBzOi8vZWF2Z2dhOHdjZ2VzdS5jbG91ZGZyb250Lm5ldCIgLz4KCgogICAgICAgIAogICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+dmFyIGRhdGFMYXllciA9IFt7J2V0YXR1c2VyJzogJ05vbiBMb2d1ZScsICdpZHVzZXInOiAnJywgJ3ZlcnNpb24nOiAnbmV3U2l0ZScsICdvcHRpR3JvdXAnOiAnQ2xhc3NpZmllZERldGFpbDInIH1dPC9zY3JpcHQ+CiAgICAgICAgICAgIAogICAgICAgICAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KPG5vc2NyaXB0PjxpZnJhbWUgc3JjPSIvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS01NUw0V1YiCmhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KKGZ1bmN0aW9uKHcsZCxzLGwsaSl7d1tsXT13W2xdfHxbXTt3W2xdLnB1c2goeydndG0uc3RhcnQnOgpuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCmo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQonLy93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7Cn0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnZGF0YUxheWVyJywnR1RNLTU1TDRXVicpOwo8L3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgoKICAgICAgICAKCiAgICAgICAgPCEtLSBBbnRpLWZsaWNrZXIgc25pcHBldCAocmVjb21tZW5kZWQpICAtLT4KICAgICAgICA8c3R5bGU+LmFzeW5jLWhpZGUgeyBvcGFjaXR5OiAwICFpbXBvcnRhbnR9IDwvc3R5bGU+CiAgICAgICAgPHNjcmlwdD4oZnVuY3Rpb24oYSxzLHksbixjLGgsaSxkLGUpe3MuY2xhc3NOYW1lKz0nICcreTtoLnN0YXJ0PTEqbmV3IERhdGU7CiAgICAgICAgaC5lbmQ9aT1mdW5jdGlvbigpe3MuY2xhc3NOYW1lPXMuY2xhc3NOYW1lLnJlcGxhY2UoUmVnRXhwKCcgPycreSksJycpfTsKICAgICAgICAoYVtuXT1hW25dfHxbXSkuaGlkZT1oO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpKCk7aC5lbmQ9bnVsbH0sYyk7aC50aW1lb3V0PWM7CiAgICAgICAgfSkod2luZG93LGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwnYXN5bmMtaGlkZScsJ2RhdGFMYXllcicsNDAwMCwKICAgICAgICB7J0dUTS1OVzdNTk5HJzp0cnVlfSk7PC9zY3JpcHQ+CgogICAgICAgIAogICAgICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICAoZnVuY3Rpb24oaSxzLG8sZyxyLGEsbSl7aVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J109cjtpW3JdPWlbcl18fGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIChpW3JdLnE9aVtyXS5xfHxbXSkucHVzaChhcmd1bWVudHMpfSxpW3JdLmw9MSpuZXcgRGF0ZSgpO2E9cy5jcmVhdGVFbGVtZW50KG8pLAogICAgICAgICAgICBtPXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07YS5hc3luYz0xO2Euc3JjPWc7bS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLG0pCiAgICAgICAgICAgIH0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnaHR0cHM6Ly93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpzJywnZ2EnKTsKCiAgICAgICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtMjUwNTczMy0xJywgJ2F1dG8nKTsKICAgICAgICAgICAgZ2EoJ3JlcXVpcmUnLCAnR1RNLU5XN01OTkcnKTsKICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgCgogICAgICAgIDx0aXRsZT5BY2hhdCBhcHBhcnRlbWVudCAyNyBtMiBQYXJpcyAoNzUwMTApLCAxIHBpw6hjZTwvdGl0bGU+CiAgICAgICAgPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Imh0dHBzOi8vd3d3LmVmZmljaXR5LmNvbS9hY2hhdC1pbW1vYmlsaWVyL2FwcGFydGVtZW50XzI3LW0yX3BhcmlzXzc1MDEwXzE4NDcyNDQ5LyI+CiAgICAgICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9Ijc1MDEwIFBBUklTIC0gR09OQ09VUlQgLSBDSEFSTUFOVCBTVFVESU8gQVZFQyBCRUxMRSBURVJSQVNTRSBWRU5EVSBMT1VFICAtIGVmZmlDIi8+CiAgICAgICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9IiIvPgogICAgICAgIDxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0iaW5kZXgsIGZvbGxvdyIvPgogICAgICAgIAogICAgCiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9wbHVnaW5zL2Jvb3RzdHJhcC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiPgogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9wbHVnaW5zL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiPgogICAgICAgIAogICAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9wbHVnaW5zL2N1YmVwb3J0Zm9saW8vY3NzL2N1YmVwb3J0Zm9saW8ubWluLmNzcyI+CiAgICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvL2QyNWJ3bXoyY2hud2d6LmNsb3VkZnJvbnQubmV0L2pzL2xlYWZsZXQvbGVhZmxldC5jc3MiIC8+CiAgICAKICAgICAgICA8bGluayBocmVmPSIvL2QyNWJ3bXoyY2hud2d6LmNsb3VkZnJvbnQubmV0L2Nzcy9jbGFzc2lmaWVkX2RldGFpbC4zY2FiNDY1MS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiLz4KICAgIAoKICAgIDwvaGVhZD4KPGJvZHkgcm9sZT0iZG9jdW1lbnQiPgoKCiAgICA8ZGl2IGlkPSJfbG1fcGl4Ij48L2Rpdj4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vZWZmaWNpdHktMS5sZWFkc21vbml0b3IuaW8vdHJhY2suanMiIGFzeW5jPjwvc2NyaXB0PgoKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHsKICAgIHZhciBjb29raWVWYWx1ZSA9IG51bGw7CiAgICBpZiAoZG9jdW1lbnQuY29va2llICYmIGRvY3VtZW50LmNvb2tpZSAhPT0gJycpIHsKICAgICAgICB2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgY29va2llID0gY29va2llc1tpXS50b1N0cmluZygpLnJlcGxhY2UoL15ccysvLCAiIikucmVwbGFjZSgvXHMrJC8sICIiKTsKICAgICAgICAgICAgLy8gRG9lcyB0aGlzIGNvb2tpZSBzdHJpbmcgYmVnaW4gd2l0aCB0aGUgbmFtZSB3ZSB3YW50PwogICAgICAgICAgICBpZiAoY29va2llLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCArIDEpID09PSAobmFtZSArICc9JykpIHsKICAgICAgICAgICAgICAgIGNvb2tpZVZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcobmFtZS5sZW5ndGggKyAxKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBjb29raWVWYWx1ZTsKfQpmdW5jdGlvbiByZXBsYWNlQ1NSRlRva2VuKGNzcmZ0b2tlbikgewogICAgdmFyIGNzcmZJbnB1dExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPWNzcmZtaWRkbGV3YXJldG9rZW5dJyk7CiAgICBmb3IgKGkgPSAwOyBpIDwgY3NyZklucHV0TGlzdC5sZW5ndGg7IGkrKykgewogICAgICAgIGNzcmZJbnB1dExpc3RbaV0udmFsdWUgPSBjc3JmdG9rZW47CiAgICB9Cn0KZnVuY3Rpb24gcmVzZXRDU1JGVG9rZW4oKSB7CiAgICB2YXIgaTsKICAgIHZhciBjc3JmdG9rZW4gPSBnZXRDb29raWUoJ2NzcmZ0b2tlbicpOwogICAgaWYgKGNzcmZ0b2tlbiA9PT0gbnVsbCkgewogICAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgIHhoci5vcGVuKCdIRUFEJywgJy9jc3JmJyk7CiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgICBjc3JmdG9rZW4gPSBnZXRDb29raWUoJ2NzcmZ0b2tlbicpOwogICAgICAgICAgICAgICAgcmVwbGFjZUNTUkZUb2tlbihjc3JmdG9rZW4pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICB4aHIuc2VuZCgpOwogICAgfSBlbHNlIHsKICAgICAgICByZXBsYWNlQ1NSRlRva2VuKGNzcmZ0b2tlbik7CiAgICB9Cgp9CmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCByZXNldENTUkZUb2tlbiwgZmFsc2UpOwo8L3NjcmlwdD4KCgo8aGVhZGVyIGNsYXNzPSJoZWFkZXIiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJoZWFkZXItd3JhcHBlciI+CiAgICAgIDxhIGhyZWY9Ii8iIGNsYXNzPSIgbG9nby1lZmZpY2l0eSI+RWZmaWNpdHk8L2E+CiAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1uYXZpZ2F0aW9uIj4KICAgICAgICA8dWwgY2xhc3M9Im1haW4tbWVudSI+CiAgICAgICAgICA8bGkgY2xhc3M9ImQtbWQtbm9uZSI+PGEgaHJlZj0iLyI+QWNjdWVpbDwvYT48L2xpPgogICAgICAgICAgPGxpPjxhIGhyZWY9IiAvcHJpeC1pbW1vYmlsaWVyLW0yLyI+UHJpeCBpbW1vYmlsaWVyIGF1IG08c3VwPjI8L3N1cD48L2E+PC9saT4KICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVuZHJlLWFwcGFydGVtZW50LW1haXNvbi8iPlZlbmRyZSBhdmVjIGVmZmlDaXR5PC9hPjwvbGk+CiAgICAgICAgICA8bGk+PGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXIvIj5BY2hhdCBpbW1vYmlsaWVyPC9hPjwvbGk+CiAgICAgICAgPC91bD4KICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItYWN0aW9ucyBkLW1kLWZsZXgganVzdGlmeS1jb250ZW50LW1kLWNlbnRlciI+CiAgICAgICAgICA8YSBocmVmPSIvZXN0aW1hdGlvbi1pbW1vYmlsaWVyZS8iIGNsYXNzPSIgYnRuIGJ0bi1ib3JkZXIgb3JkZXItbWQtMiI+RXN0aW1lciBtb24gYmllbjwvYT4KICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmVmZmljaXR5LXJlY3J1dGVtZW50LmNvbS8iIGNsYXNzPSJidG4gb3JkZXItbWQtMSI+RGV2ZW5pciBjb25zdWx0YW50IGltbW9iaWxpZXI8L2E+CiAgICAgICAgICA8YSBpZD0ibWVudS1jb250YWN0LWJ0biIgaHJlZj0iIyIgY2xhc3M9ImJ0biBkLWxnLW5vbmUiPkNvbnRhY3Rlei1ub3VzPC9hPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGJ1dHRvbiBjbGFzcz0ibWFpbi1tZW51LXRvZ2dsZSI+PHNwYW4+TWVudTwvc3Bhbj48L2J1dHRvbj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2hlYWRlcj4KCgoKCiAgICA8c2VjdGlvbiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzICI+CiAgICAgICAgCgoKCgo8ZGl2IGNsYXNzPSJwcm9ncmFtcy1kZXRhaWxzLXRvZ2dsZS1zdGlja3kiPgogICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBtb2RhbC1wcm9ncmFtLWluZm9zLWJ1dHRvbiI+RGVtYW5kZXIgZGVzIGluZm9zIHN1ciBjZSBiaWVuPC9hPgo8L2Rpdj4KCjxkaXYgY2xhc3M9InByb2dyYW0tZGV0YWlscy1oZWFkZXIiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiI+CiAgICA8ZGl2PgogICAgICAgIDxwIGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtbG9jYXRpb24iPlBhcmlzICg3NTAxMCk8L3A+CiAgICAgICAgPGgxIGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtdGl0bGUiPgogICAgICAgIEFwcGFydGVtZW50CiAgICAgICAgIDEgcGnDqGNlCiAgICAgICAgLSAyNyBtwrIgPHNwYW4gY2xhc3M9ImxhYmVsICBkLW5vbmUgZC1sZy1mbGV4IG1sLWxnLTIiPjwvc3Bhbj48L2gxPgogICAgICAgIDxwIGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtcHJpY2UiPjMzMsKgODUwIOKCrCA8c21hbGw+SC5BLkk8L3NtYWxsPjwvcD4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxhYmVsICBkLWxnLW5vbmUiPjwvc3Bhbj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLWNvbnRhY3QgZC1ub25lIGQtbGctYmxvY2siPgogICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgbW9kYWwtcHJvZ3JhbS1pbmZvcy1idXR0b24iPkRlbWFuZGVyIGRlcyBpbmZvcyBzdXIgY2UgYmllbjwvYT4KICAgICAgICA8ZGl2IGNsYXNzPSJkLWxnLWZsZXgiPgogICAgICAgIDxhIGhyZWY9Im1haWx0bzphZG9tZW5naWVAZWZmaWNpdHkuY29tIiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLWNvbnRhY3QtbWFpbCI+YWRvbWVuZ2llQGVmZmljaXR5LmNvbTwvYT4KICAgICAgICA8YSBocmVmPSJ0ZWw6KzMzNzg1NDY4OTgwIiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLWNvbnRhY3QtcGhvbmUiPiszMzc4NTQ2ODk4MDwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAKPC9kaXY+CjwvZGl2PgogICAgICAgIAoKCgoKCgo8ZGl2IGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtdmlzdWFscyI+CiAgPGRpdiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLXZpc3VhbHMtcHJldmlld3MgdHJpbyI+CiAgICA8YSBocmVmPSIjIiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLXZpc3VhbHMtdHJpZ2dlciIgZGF0YS1zbGlkZT0iMCIgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybCgvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xODQ3MjQ0OS9waG90b3MveHhsL3AxMDcwNjkxLkpQRykiPjwvYT4KICAgIAogICAgICA8YSBocmVmPSIjIiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLXZpc3VhbHMtdHJpZ2dlciIgZGF0YS1zbGlkZT0iMSIgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybCgvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xODQ3MjQ0OS9waG90b3MvbC9wMTA3MDY5NC5KUEcpIj48L2E+CiAgICAKICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtdmlzdWFscy10cmlnZ2VyIiBkYXRhLXNsaWRlPSIyIiBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKC8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzE4NDcyNDQ5L3Bob3Rvcy9sL3AxMDcwNjk1LkpQRykiPjwvYT4KICA8L2Rpdj4KCiAgPGRpdiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLXZpc3VhbHMtYWN0aW9ucyI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtdmlzdWFscy1hY3Rpb25zLWJ0bnMiPgogICAgICAgIAogICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJwaG90b3MgcHJvZ3JhbS1kZXRhaWxzLXZpc3VhbHMtdHJpZ2dlciBkLW5vbmUgZC1tZC1mbGV4IiBkYXRhLXNsaWRlPSIwIj48aW1nIHNyYz0iaHR0cHM6Ly9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2ltZy9pY29uLXBob3RvLnN2ZyIgYWx0PSJUb3V0ZXMgbGVzIHBob3RvcyBkdSBiaWVuIj4gVm9pciB0b3V0ZXMgbGVzIHBob3RvczwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPGRpdiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLXZpc3VhbHMtc2xpZGVyLXdyYXBwZXIiPgogICAgPGEgaHJlZj0iIyIgY2xhc3M9ImQtbm9uZSBkLW1kLWJsb2NrIG1vZGFsLXByb2dyYW0taW5mb3MtY2xvc2UiPkZlcm1lcjwvYT4KICAgIDxkaXYgY2xhc3M9InByb2dyYW0tZGV0YWlscy12aXN1YWxzLXNsaWRlciI+CiAgICAgIDxkaXY+CiAgICAgICAgPGltZyBzcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzE4NDcyNDQ5L3Bob3Rvcy9sL3AxMDcwNjkxLkpQRyIgY2xhc3M9ImQtc20tbm9uZSBpbWctZmx1aWQiIGFsdD0iQWNoYXQgaW1tb2JpbGllciBBcHBhcnRlbWVudCAxIHBpw6hjZXMgIDI3bTIgw6AgUGFyaXMgKDc1MDEwKSAtIFBob3RvIG7CsDEiPgogICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xODQ3MjQ0OS9waG90b3MveGwvcDEwNzA2OTEuSlBHIiBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2sgaW1nLWZsdWlkIiBhbHQ9IkFjaGF0IGltbW9iaWxpZXIgQXBwYXJ0ZW1lbnQgMSBwacOoY2VzICAyN20yIMOgIFBhcmlzICg3NTAxMCkgLSBQaG90byBuwrAxIj4KICAgICAgPC9kaXY+CiAgICAgIAogICAgICAgIDxkaXY+CiAgICAgICAgICA8aW1nIHNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTg0NzI0NDkvcGhvdG9zL2wvcDEwNzA2OTQuSlBHIiBjbGFzcz0iZC1zbS1ub25lIGltZy1mbHVpZCIgYWx0PSJBY2hhdCBpbW1vYmlsaWVyIEFwcGFydGVtZW50IDEgcGnDqGNlcyAgMjdtMiDDoCBQYXJpcyAoNzUwMTApIC0gUGhvdG8gbsKwMiI+CiAgICAgICAgICA8aW1nIHNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTg0NzI0NDkvcGhvdG9zL3hsL3AxMDcwNjk0LkpQRyIgY2xhc3M9ImQtbm9uZSBkLXNtLWJsb2NrIGltZy1mbHVpZCIgYWx0PSJBY2hhdCBpbW1vYmlsaWVyIEFwcGFydGVtZW50IDEgcGnDqGNlcyAgMjdtMiDDoCBQYXJpcyAoNzUwMTApIC0gUGhvdG8gbsKwMiI+CiAgICAgICAgPC9kaXY+CiAgICAgIAogICAgICAKICAgICAgICA8ZGl2PgogICAgICAgICAgPGltZyBzcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzE4NDcyNDQ5L3Bob3Rvcy9sL3AxMDcwNjk1LkpQRyIgY2xhc3M9ImQtc20tbm9uZSBpbWctZmx1aWQiIGFsdD0iQWNoYXQgaW1tb2JpbGllciBBcHBhcnRlbWVudCAxIHBpw6hjZXMgIDI3bTIgw6AgUGFyaXMgKDc1MDEwKSAtIFBob3RvIG7CsDMiPgogICAgICAgICAgPGltZyBzcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzE4NDcyNDQ5L3Bob3Rvcy94bC9wMTA3MDY5NS5KUEciIGNsYXNzPSJkLW5vbmUgZC1zbS1ibG9jayBpbWctZmx1aWQiIGFsdD0iQWNoYXQgaW1tb2JpbGllciBBcHBhcnRlbWVudCAxIHBpw6hjZXMgIDI3bTIgw6AgUGFyaXMgKDc1MDEwKSAtIFBob3RvIG7CsDMiPgogICAgICAgIDwvZGl2PgogICAgICAKICAgICAgICA8ZGl2PgogICAgICAgICAgPGltZyBzcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzE4NDcyNDQ5L3Bob3Rvcy9sL3AxMDcwNjk0LkpQRyIgY2xhc3M9ImQtc20tbm9uZSBpbWctZmx1aWQiIGFsdD0iQWNoYXQgaW1tb2JpbGllciBBcHBhcnRlbWVudCAxIHBpw6hjZXMgIDI3bTIgw6AgUGFyaXMgKDc1MDEwKSAtIFBob3RvIG7CsDQiPgogICAgICAgICAgPGltZyBzcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzE4NDcyNDQ5L3Bob3Rvcy94bC9wMTA3MDY5NC5KUEciIGNsYXNzPSJkLW5vbmUgZC1zbS1ibG9jayBpbWctZmx1aWQiIGFsdD0iQWNoYXQgaW1tb2JpbGllciBBcHBhcnRlbWVudCAxIHBpw6hjZXMgIDI3bTIgw6AgUGFyaXMgKDc1MDEwKSAtIFBob3RvIG7CsDQiPgogICAgICAgIDwvZGl2PgogICAgICAKICAgICAgICA8ZGl2PgogICAgICAgICAgPGltZyBzcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzE4NDcyNDQ5L3Bob3Rvcy9sL3BsYW4uSlBHIiBjbGFzcz0iZC1zbS1ub25lIGltZy1mbHVpZCIgYWx0PSJBY2hhdCBpbW1vYmlsaWVyIEFwcGFydGVtZW50IDEgcGnDqGNlcyAgMjdtMiDDoCBQYXJpcyAoNzUwMTApIC0gUGhvdG8gbsKwNSI+CiAgICAgICAgICA8aW1nIHNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTg0NzI0NDkvcGhvdG9zL3hsL3BsYW4uSlBHIiBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2sgaW1nLWZsdWlkIiBhbHQ9IkFjaGF0IGltbW9iaWxpZXIgQXBwYXJ0ZW1lbnQgMSBwacOoY2VzICAyN20yIMOgIFBhcmlzICg3NTAxMCkgLSBQaG90byBuwrA1Ij4KICAgICAgICA8L2Rpdj4KICAgICAgCiAgICAgICAgPGRpdj4KICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xODQ3MjQ0OS9waG90b3MvbC9wMTA3MDY5OC5KUEciIGNsYXNzPSJkLXNtLW5vbmUgaW1nLWZsdWlkIiBhbHQ9IkFjaGF0IGltbW9iaWxpZXIgQXBwYXJ0ZW1lbnQgMSBwacOoY2VzICAyN20yIMOgIFBhcmlzICg3NTAxMCkgLSBQaG90byBuwrA2Ij4KICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xODQ3MjQ0OS9waG90b3MveGwvcDEwNzA2OTguSlBHIiBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2sgaW1nLWZsdWlkIiBhbHQ9IkFjaGF0IGltbW9iaWxpZXIgQXBwYXJ0ZW1lbnQgMSBwacOoY2VzICAyN20yIMOgIFBhcmlzICg3NTAxMCkgLSBQaG90byBuwrA2Ij4KICAgICAgICA8L2Rpdj4KICAgICAgCiAgICAgICAgPGRpdj4KICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xODQ3MjQ0OS9waG90b3MvbC9wMTA3MDY4Ni5KUEciIGNsYXNzPSJkLXNtLW5vbmUgaW1nLWZsdWlkIiBhbHQ9IkFjaGF0IGltbW9iaWxpZXIgQXBwYXJ0ZW1lbnQgMSBwacOoY2VzICAyN20yIMOgIFBhcmlzICg3NTAxMCkgLSBQaG90byBuwrA3Ij4KICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xODQ3MjQ0OS9waG90b3MveGwvcDEwNzA2ODYuSlBHIiBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2sgaW1nLWZsdWlkIiBhbHQ9IkFjaGF0IGltbW9iaWxpZXIgQXBwYXJ0ZW1lbnQgMSBwacOoY2VzICAyN20yIMOgIFBhcmlzICg3NTAxMCkgLSBQaG90byBuwrA3Ij4KICAgICAgICA8L2Rpdj4KICAgICAgCiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgCgoKCgoKCgoKCjxkaXYgY2xhc3M9InByb2dyYW0tZGV0YWlscy1jb250ZW50Ij4KPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNyI+CiAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIj4KICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtYWdlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtYWdlbnQtcGhvdG8iPgogICAgICAgICAgICA8aW1nIHdpZHRoPSIxMDAlIiBzcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2NvbnN1bHRhbnQvYWRvbWVuZ2llL3Bob3Rvcy94cy9jb25zdWx0YW50LnBuZyIgYWx0PSJBbm5lIERvbWVuZ2llIGNvbnN1bHRhbnQgaW1tb2JpbGllciBjaGV6IGVmZmlDaXR5Ij4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW0tZGV0YWlscy1hZ2VudC1pbmZvIHByLTIiPgogICAgICAgICAgICA8cD5BcHBhcnRlbWVudCBwcm9wb3PDqSBwYXIKICAgICAgICAgICAgPHN0cm9uZz5Bbm5lIERvbWVuZ2llPC9zdHJvbmc+CiAgICAgICAgICAgIENvbnN1bHRhbnQgaW1tb2JpbGllciDDoCBQYXJpcyAxMMOobWUgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJkLW5vbmUgZC1sZy1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLWJvcmRlciBtb2RhbC1wcm9ncmFtLWluZm9zLWJ1dHRvbiI+RW52b3llciB1biBtZXNzYWdlPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW0tZGV0YWlscy1jb250YWN0IGQtbGctbm9uZSI+CiAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBtb2RhbC1wcm9ncmFtLWluZm9zLWJ1dHRvbiI+RGVtYW5kZXIgZGVzIGluZm9zIHN1ciBjZSBiaWVuPC9hPgogICAgICAgIDxkaXYgY2xhc3M9ImQtbGctZmxleCI+CiAgICAgICAgICAgIDxhIGhyZWY9Im1haWx0bzphZG9tZW5naWVAZWZmaWNpdHkuY29tIiBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLWNvbnRhY3QtbWFpbCI+YWRvbWVuZ2llQGVmZmljaXR5LmNvbTwvYT4KICAgICAgICAgICAgPGEgaHJlZj0idGVsOiszMzc4NTQ2ODk4MCIgY2xhc3M9InByb2dyYW0tZGV0YWlscy1jb250YWN0LXBob25lIj4rMzM3ODU0Njg5ODA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGhyPgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8aDIgY2xhc3M9InByb2dyYW0tZGV0YWlscy1zZWN0aW9uLXRpdGxlIj5FcXVpcGVtZW50cyBkZSBjZXQgYXBwYXJ0ZW1lbnQ8L2gyPgogICAgICAgICAgICA8dWwgY2xhc3M9InByb2dyYW0tZGV0YWlscy1mZWF0dXJlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvaWNvbi1yb29tLnN2ZyIgYWx0PSIxIGNoYW1icmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDEgY2hhbWJyZQogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPGhyPgogICAgICAgIAoKICAgICAgICA8aDIgY2xhc3M9InByb2dyYW0tZGV0YWlscy1zZWN0aW9uLXRpdGxlIj5QcsOpc2VudGF0aW9uIGRlIGNldCBhcHBhcnRlbWVudDwvaDI+CiAgICAgICAgPHAgaWQ9ImRlZmF1bHQtcHJlc2VudGF0aW9uIj4KICAgICAgICAKICAgICAgICAgICAgNzUwMTAgUEFSSVMgLSBHT05DT1VSVCAtIENIQVJNQU5UIFNUVURJTyBBVkVDIEJFTExFIFRFUlJBU1NFIFZFTkRVIExPVUUgIC0gZWZmaUNpdHksIGwmIzM5O0FnZW5jZSBxdWkgZXN0aW1lIHZvdHJlIGJpZW4gZW4gbGlnbmUsIHZvdXMgcHJvcG9zZSBjZSB0csOocyBiZWF1IHN0dWRpbyBMT1VFIGQmIzM5O3VuZSBzdXBlcmZpY2llIGRlIDI3LDI1IG0yIGxvaSBjYXJyZXosIG91dmVydCBzdXIgdW5lIEpPTElFIFRFUlJBU1NFLiBJbCBlc3Qgc2l0dcOpIGF1IHNlaW4gZCYjMzk7dW5lIHBldGl0ZSBjb3Byb3ByacOpdMOpLiBJbCBzZSBjb21wb3NlIGQmIzM5O3VuZSBlbnRyw6llLCBkJiMzOTt1bmUgc2FsbGUgZCYjMzk7ZWF1IGF2ZWMgV0MsIGQmIzM5O3VuZSB2YXN0ZSBwacOoY2UgZGUgdmllIExVTUlORVVTRSBhdmVjIHVuIGNvaW4gY3Vpc2luZSBhaW5zaSBxdSYjMzk7dW4gY29pbiBudWl0LiBGYWlibGVzIGNoYXJnZXMgZXQgYXVjdW4gdHJhdmF1eCDDoCBwcsOpdm9pci4gSWTDqWFsZW1lbnQgc2l0dcOpIGF1IHBpZWQgZGVzIHRyYW5zcG9ydOKApgogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIDwvcD4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2FyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2FyLWNvbnRlbnQiPgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDc1MDEwIFBBUklTIC0gR09OQ09VUlQgLSBDSEFSTUFOVCBTVFVESU8gQVZFQyBCRUxMRSBURVJSQVNTRSBWRU5EVSBMT1VFICAtIGVmZmlDaXR5LCBsJiMzOTtBZ2VuY2UgcXVpIGVzdGltZSB2b3RyZSBiaWVuIGVuIGxpZ25lLCB2b3VzIHByb3Bvc2UgY2UgdHLDqHMgYmVhdSBzdHVkaW8gTE9VRSBkJiMzOTt1bmUgc3VwZXJmaWNpZSBkZSAyNywyNSBtMiBsb2kgY2FycmV6LCBvdXZlcnQgc3VyIHVuZSBKT0xJRSBURVJSQVNTRS4gSWwgZXN0IHNpdHXDqSBhdSBzZWluIGQmIzM5O3VuZSBwZXRpdGUgY29wcm9wcmnDqXTDqS4gSWwgc2UgY29tcG9zZSBkJiMzOTt1bmUgZW50csOpZSwgZCYjMzk7dW5lIHNhbGxlIGQmIzM5O2VhdSBhdmVjIFdDLCBkJiMzOTt1bmUgdmFzdGUgcGnDqGNlIGRlIHZpZSBMVU1JTkVVU0UgYXZlYyB1biBjb2luIGN1aXNpbmUgYWluc2kgcXUmIzM5O3VuIGNvaW4gbnVpdC4gRmFpYmxlcyBjaGFyZ2VzIGV0IGF1Y3VuIHRyYXZhdXggw6AgcHLDqXZvaXIuIElkw6lhbGVtZW50IHNpdHXDqSBhdSBwaWVkIGRlcyB0cmFuc3BvcnRzIGV0IGRlcyBjb21tZXJjZXMuIFBvdXIgcGx1cyBkJiMzOTtpbmZvcm1hdGlvbnMsIGNvbnRhY3RleiBBbm5lIERvbWVuZ2llIHBhciB0w6lsw6lwaG9uZSBvdSBwYXIgbWFpbC4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGEgaHJlZj0iIyIgaWQ9ImNsYXNzaWZpZWQtZGV0YWlsLW1vYXIiIGNsYXNzPSJtb2FyLWRpc3BsYXkiPkVuIHNhdm9pciBwbHVzIHN1ciBjZSBsb2dlbWVudDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8aHI+CiAgICAgICAgPGgyIGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtc2VjdGlvbi10aXRsZSI+TG9jYWxpc2F0aW9uIGR1IGxvZ2VtZW50PC9oMj4KICAgICAgICA8cCBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLWxvY2F0aW9uIj5QYXJpcyAoNzUwMTApPC9wPgogICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW0tZGV0YWlscy1tYXAiPgogICAgICAgICAgICA8ZGl2IGlkPSJwcm9ncmFtLWRldGFpbHMtbWFwIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgb2Zmc2V0LWxnLTEiPgogICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW0tZGV0YWlscy1zaWRlYmFyIj4KICAgICAgICA8aDIgY2xhc3M9InByb2dyYW0tZGV0YWlscy1zZWN0aW9uLXRpdGxlIj5DYXJhY3TDqXJpc3RpcXVlcyBkdSBiaWVuPC9oMj4KICAgICAgICAKICAgICAgICA8aDMgY2xhc3M9InByb2dyYW0tZGV0YWlscy1zZWN0aW9uLXN1YnRpdGxlIj5DYXJhY3TDqXJpc3RpcXVlcyB0ZWNobmlxdWVzPC9oMz4KICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpPk9yaWdpbmUgZHUgY2hhdWZmYWdlJm5ic3A7OiBFbGVjdHJpY2l0w6k8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpPlR5cGUgZHUgY2hhdWZmYWdlJm5ic3A7OiBJbmRpdmlkdWVsPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaT5FbmVyZ2llIHBvdXIgY2hhdWZmZXIgOiBDb252ZWN0ZXVyPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaT5PcmlnaW5lIGRlIGwnZWF1IGNoYXVkZSZuYnNwOzogRWxlY3RyaWNpdMOpPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaT5UeXBlIGQnZWF1IGNoYXVkZSZuYnNwOzogSW5kaXZpZHVlbDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGk+w4luZXJnaWUgcG91ciBsYSBjaGF1ZmZlIGRlIGzigJllYXUmbmJzcDs6IEJhbGxvbjwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC91bD4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGgzIGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtc2VjdGlvbi1zdWJ0aXRsZSI+Q2FyYWN0w6lyaXN0aXF1ZXMganVyaWRpcXVlcyBldCBmaW5hbmNpw6hyZXM8L2gzPgogICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGk+VGF4ZSBmb25jacOocmUgZGUgMzE1IGV1cm9zPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaT5DaGFyZ2VzIG1lbnN1ZWxsZXMgZGUgODAgZXVyb3M8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpPkVuIGNvcHJvcHJpw6l0w6kmbmJzcDs6IE91aTwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGk+MzggbG90cyBkYW5zIGxhIGNvcHJvcHJpw6l0w6k8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgCgogICAgICAgIAoKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAgIDxoMyBjbGFzcz0icHJvZ3JhbS1kZXRhaWxzLXNlY3Rpb24tc3VidGl0bGUiPkNhcmFjdMOpcmlzdGlxdWVzIGRlIGxhIHByb3ByacOpdMOpPC9oMz4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFwcGFydGVtZW50IGNvbnN0cnVpdCBlbiAxODcwPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZhw6dhZGUgZW4gQsOpdG9uPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzY2Vuc2V1cjwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HYXJkaWVuPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgCiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW0tZGV0YWlscy1zaGFyZSI+CiAgICAgICAgPHAgY2xhc3M9Im1iLTIgbWItbGctMCI+UGFydGFnZXIgOjwvcD4KICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICA8YSBpZD0iZmItc2hhcmUtYnRuIiBocmVmPSIjIiBjbGFzcz0iZmFjZWJvb2siPkZhY2Vib29rPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgPGEgaWQ9Im1haWwtc2hhcmUtYnRuIiBocmVmPSIjIiBjbGFzcz0iZW1haWwiPkVtYWlsPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjwvZGl2PgogICAgICAgIAoKPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtLWRldGFpbHMtcHJpY2UtY3RhIGQtbGctZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiIgY2xhc3M9ImNhcnRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvaW1nL2lsbHVzdHJhdGlvbi5wbmciIHNyY3NldD0iaHR0cHM6Ly9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2ltZy9pbGx1c3RyYXRpb25AMngucG5nIDJ4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCIgYWx0PSJDYXJ0ZSBkZSBGcmFuY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5RdWVsIGVzdCBsZSBwcml4IG1veWVuIGF1IG0yID88L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByaXgtaW1tb2JpbGllci1tMi92X3BhcmlzXzc1LyI+UHJpeCBpbW1vYmlsaWVyIMOgIFBhcmlzIDxzcGFuPjwvc3Bhbj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUvIj5Fc3RpbWF0aW9uIGltbW9iaWxpw6hyZSDDoCBQYXJpcyA8c3Bhbj48L3NwYW4+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW0tZGV0YWlscy1wYXJ0bmVycy1jdGEiPgogICAgICAgICAgICAgICAgPHA+UmV0cm91dmV6IGNldHRlIGFubm9uY2Ugc3VyIC4uLjwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBmbGV4LXdyYXAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im0tMiI+PGltZyBzcmM9Imh0dHBzOi8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvc2Vsb2dlci5zdmciIGFsdD0ic2Vsb2dlciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibS0yIj48aW1nIHNyYz0iaHR0cHM6Ly9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2ltZy9ib25jb2luLnN2ZyIgYWx0PSJsZWJvbmNvaW4iPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im0tMiI+PGltZyBzcmM9Imh0dHBzOi8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvZmlnYXJvLnN2ZyIgYWx0PSJsZSBmaWdhcm8iPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im0tMiI+PGltZyBzcmM9Imh0dHBzOi8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvYXZlbmRyZS5zdmciIGFsdD0iYXZlbmRyZWFsb3Vlci5mciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L3NlY3Rpb24+CiAgICAKCgoKCjxzZWN0aW9uIGNsYXNzPSJzZWN0aW9uLXByb2R1Y3RzIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InNlY3Rpb24tdGl0bGUiPkNlcyBiaWVucyBwb3VycmFpZW50IMOpZ2FsZW1lbnQgdm91cyBpbnTDqXJlc3NlcjwvaDI+CiAgICAgICAgICAgICAgICA8cD48L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0Ij4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3JhbXMtbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW1zLWxpc3QtaXRlbS12aXN1YWwiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF8yMC1tMl9wYXJpc183NTAxNV8xOTEwMTU3OC8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vZDFxOTY3NjA2Z2E3dzIuY2xvdWRmcm9udC5uZXQvY29tbW9uL2hvdXNlLzE5MTAxNTc4L3Bob3Rvcy9zLzQuanBnIiBjbGFzcz0iaW1nLWZsdWlkIiBhbHQ9ImFwcGFydGVtZW50IDEgcGnDqGNlcyAtIDIwbTIgw6AgUGFyaXMgKDc1MDE1KSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFiZWwiPkV4Y2x1c2l2aXTDqSBlZmZpQ2l0eTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3JhbXMtbGlzdC1pdGVtLWluZm9zIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF8yMC1tMl9wYXJpc183NTAxNV8xOTEwMTU3OC8iPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibG9jYXRpb24gdGV4dC10cnVuY2F0ZSI+UGFyaXMgKDc1MDE1KTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5hbWUgdGV4dC10cnVuY2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMCBtwrI8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZSI+NDE2wqA2MjYgJm5ic3A7JmV1cm87PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZ2VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vY29uc3VsdGFudC9nYnJvc3NhdWQvcGhvdG9zL3hzL2NvbnN1bHRhbnQucG5nIiBhbHQ9IkdhZWwgQnJvc3NhdWQgY29uc3VsdGFudCBpbW1vYmlsaWVyIGNoZXogZWZmaUNpdHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+R2FlbDwvc3Bhbj48c3Bhbj5Ccm9zc2F1ZDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW1zLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0LWl0ZW0tdmlzdWFsIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXIvYXBwYXJ0ZW1lbnRfMjYtbTJfcGFyaXNfNzUwMThfMTkwOTgyMzUvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xOTA5ODIzNS9waG90b3Mvcy9zZWpvdXIuanBnIiBjbGFzcz0iaW1nLWZsdWlkIiBhbHQ9ImFwcGFydGVtZW50IDEgcGnDqGNlcyAtIDI2bTIgw6AgUGFyaXMgKDc1MDE4KSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3JhbXMtbGlzdC1pdGVtLWluZm9zIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF8yNi1tMl9wYXJpc183NTAxOF8xOTA5ODIzNS8iPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibG9jYXRpb24gdGV4dC10cnVuY2F0ZSI+UGFyaXMgKDc1MDE4KTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5hbWUgdGV4dC10cnVuY2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNiBtwrI8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZSI+Mjk0wqAwMDAgJm5ic3A7JmV1cm87PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZ2VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vY29uc3VsdGFudC91ZmFjb3JhdC9waG90b3MveHMvY29uc3VsdGFudC5wbmciIGFsdD0iVWxyaWNoIEZhY29yYXQgY29uc3VsdGFudCBpbW1vYmlsaWVyIGNoZXogZWZmaUNpdHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+VWxyaWNoPC9zcGFuPjxzcGFuPkZhY29yYXQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3JhbXMtbGlzdC1pdGVtLXZpc3VhbCI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyL2FwcGFydGVtZW50Xzg0LW0yX3BhcmlzXzc1MDAzXzE5MDk3NTExLyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTkwOTc1MTEvcGhvdG9zL3MvYXBwYXJ0ZW1lbnQtcnVlLW1lc2xheS1hbm5vbmNlMS5qcGciIGNsYXNzPSJpbWctZmx1aWQiIGFsdD0iYXBwYXJ0ZW1lbnQgNSBwacOoY2VzIC0gODRtMiDDoCBQYXJpcyAoNzUwMDMpIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsYWJlbCI+RXhjbHVzaXZpdMOpIGVmZmlDaXR5PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0LWl0ZW0taW5mb3MiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyL2FwcGFydGVtZW50Xzg0LW0yX3BhcmlzXzc1MDAzXzE5MDk3NTExLyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJsb2NhdGlvbiB0ZXh0LXRydW5jYXRlIj5QYXJpcyAoNzUwMDMpPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibmFtZSB0ZXh0LXRydW5jYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDg0IG3CsjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlIj45OTDCoDAwMCAmbmJzcDsmZXVybzs8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFnZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9jb25zdWx0YW50L2lsZWNoYW1waW9uL3Bob3Rvcy94cy9jb25zdWx0YW50LnBuZyIgYWx0PSJJc2FiZWxsZSBMZSBDaGFtcGlvbiBjb25zdWx0YW50IGltbW9iaWxpZXIgY2hleiBlZmZpQ2l0eSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Jc2FiZWxsZTwvc3Bhbj48c3Bhbj5MZSBDaGFtcGlvbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW1zLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0LWl0ZW0tdmlzdWFsIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXIvYXBwYXJ0ZW1lbnRfMTYxLW0yX3BhcmlzXzc1MDE3XzE5MDg5NDEyLyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTkwODk0MTIvcGhvdG9zL3MvcGhvdG8tbWFsZXNoZXJiZXMtNS5qcGciIGNsYXNzPSJpbWctZmx1aWQiIGFsdD0iYXBwYXJ0ZW1lbnQgNyBwacOoY2VzIC0gMTYxbTIgw6AgUGFyaXMgKDc1MDE3KSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3JhbXMtbGlzdC1pdGVtLWluZm9zIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF8xNjEtbTJfcGFyaXNfNzUwMTdfMTkwODk0MTIvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImxvY2F0aW9uIHRleHQtdHJ1bmNhdGUiPlBhcmlzICg3NTAxNyk8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJuYW1lIHRleHQtdHJ1bmNhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTYxIG3CsjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlIj4ywqA2NTDCoDAwMCAmbmJzcDsmZXVybzs8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFnZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9jb25zdWx0YW50L2J6YW5hL3Bob3Rvcy94cy9jb25zdWx0YW50LnBuZyIgYWx0PSJCcmlnaXR0ZSBaYW5hIGNvbnN1bHRhbnQgaW1tb2JpbGllciBjaGV6IGVmZmlDaXR5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkJyaWdpdHRlPC9zcGFuPjxzcGFuPlphbmE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3JhbXMtbGlzdC1pdGVtLXZpc3VhbCI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyL2FwcGFydGVtZW50XzQyLW0yX3BhcmlzXzc1MDIwXzE5MDYxNzI0LyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vaG91c2UvMTkwNjE3MjQvcGhvdG9zL3MvMi5qcGciIGNsYXNzPSJpbWctZmx1aWQiIGFsdD0iYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIC0gNDJtMiDDoCBQYXJpcyAoNzUwMjApIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsYWJlbCI+RXhjbHVzaXZpdMOpIGVmZmlDaXR5PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0LWl0ZW0taW5mb3MiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyL2FwcGFydGVtZW50XzQyLW0yX3BhcmlzXzc1MDIwXzE5MDYxNzI0LyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJsb2NhdGlvbiB0ZXh0LXRydW5jYXRlIj5QYXJpcyAoNzUwMjApPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibmFtZSB0ZXh0LXRydW5jYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQyIG3CsjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlIj41MjDCoDAwMCAmbmJzcDsmZXVybzs8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFnZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9jb25zdWx0YW50L2pmZXJuYW5kZXMvcGhvdG9zL3hzL2NvbnN1bHRhbnQucG5nIiBhbHQ9IkrDqXLDqW1pZSBGZXJuYW5kZXMgY29uc3VsdGFudCBpbW1vYmlsaWVyIGNoZXogZWZmaUNpdHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+SsOpcsOpbWllPC9zcGFuPjxzcGFuPkZlcm5hbmRlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW1zLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0LWl0ZW0tdmlzdWFsIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXIvYXBwYXJ0ZW1lbnRfMjYtbTJfcGFyaXNfNzUwMTZfMTkwNTg3OTMvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xOTA1ODc5My9waG90b3Mvcy9kc2MwMjAyMS1oZHIuanBnIiBjbGFzcz0iaW1nLWZsdWlkIiBhbHQ9ImFwcGFydGVtZW50IDIgcGnDqGNlcyAtIDI2bTIgw6AgUGFyaXMgKDc1MDE2KSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3JhbXMtbGlzdC1pdGVtLWluZm9zIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF8yNi1tMl9wYXJpc183NTAxNl8xOTA1ODc5My8iPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibG9jYXRpb24gdGV4dC10cnVuY2F0ZSI+UGFyaXMgKDc1MDE2KTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5hbWUgdGV4dC10cnVuY2F0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNiBtwrI8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZSI+MzgwwqAwMDAgJm5ic3A7JmV1cm87PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZ2VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9kMXE5Njc2MDZnYTd3Mi5jbG91ZGZyb250Lm5ldC9jb21tb24vY29uc3VsdGFudC9jYWJpa2hhbGlsL3Bob3Rvcy94cy9jb25zdWx0YW50LnBuZyIgYWx0PSJDb3Jpbm5lIEFiaS1LaGFsaWwgY29uc3VsdGFudCBpbW1vYmlsaWVyIGNoZXogZWZmaUNpdHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29yaW5uZTwvc3Bhbj48c3Bhbj5BYmktS2hhbGlsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3JhbXMtbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW1zLWxpc3QtaXRlbS12aXN1YWwiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF8yNDQtbTJfcGFyaXNfNzUwMTZfMTkwNDg4NDMvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xOTA0ODg0My9waG90b3Mvcy9pbWdfMzU4OC5qcGciIGNsYXNzPSJpbWctZmx1aWQiIGFsdD0iYXBwYXJ0ZW1lbnQgNyBwacOoY2VzIC0gMjQ0bTIgw6AgUGFyaXMgKDc1MDE2KSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3JhbXMtbGlzdC1pdGVtLWluZm9zIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF8yNDQtbTJfcGFyaXNfNzUwMTZfMTkwNDg4NDMvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImxvY2F0aW9uIHRleHQtdHJ1bmNhdGUiPlBhcmlzICg3NTAxNik8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJuYW1lIHRleHQtdHJ1bmNhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjQ1IG3CsjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlIj4zwqAyNjXCoDAwMCAmbmJzcDsmZXVybzs8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFnZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9jb25zdWx0YW50L2FsZWJlYy9waG90b3MveHMvY29uc3VsdGFudC5wbmciIGFsdD0iQXN0cmlkIExlYmVjIGNvbnN1bHRhbnQgaW1tb2JpbGllciBjaGV6IGVmZmlDaXR5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkFzdHJpZDwvc3Bhbj48c3Bhbj5MZWJlYzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyYW1zLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0LWl0ZW0tdmlzdWFsIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXIvYXBwYXJ0ZW1lbnRfNDgtbTJfcGFyaXNfNzUwMTdfMTkwMzc3OTAvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9ob3VzZS8xOTAzNzc5MC9waG90b3Mvcy9rdDdiNjY2NS5qcGciIGNsYXNzPSJpbWctZmx1aWQiIGFsdD0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIC0gNDhtMiDDoCBQYXJpcyAoNzUwMTcpIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmFtcy1saXN0LWl0ZW0taW5mb3MiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyL2FwcGFydGVtZW50XzQ4LW0yX3BhcmlzXzc1MDE3XzE5MDM3NzkwLyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJsb2NhdGlvbiB0ZXh0LXRydW5jYXRlIj5QYXJpcyAoNzUwMTcpPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibmFtZSB0ZXh0LXRydW5jYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IC0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ5IG3CsjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlIj42MzXCoDAwMCAmbmJzcDsmZXVybzs8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFnZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2QxcTk2NzYwNmdhN3cyLmNsb3VkZnJvbnQubmV0L2NvbW1vbi9jb25zdWx0YW50L2JqYW5ldnNraS9waG90b3MveHMvY29uc3VsdGFudC5wbmciIGFsdD0iQm9iYW4gSmFuZXZza2kgY29uc3VsdGFudCBpbW1vYmlsaWVyIGNoZXogZWZmaUNpdHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Qm9iYW48L3NwYW4+PHNwYW4+SmFuZXZza2k8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyLyIgY2xhc3M9ImJ0biBidG4tYm9yZGVyIHRleHQtd3JhcCI+RMOpY291dnJleiB0b3VzIG5vcyBiaWVucyBzdXIgZWZmaUNpdHk8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC9kaXY+Cjwvc2VjdGlvbj4KCiAgICAKCjxkaXYgaWQ9Imdsb2JhbC1jb250YWN0LW1vZGFsIiBjbGFzcz0ibW9kYWwgbW9kYWwtcHJvZ3JhbS1pbmZvcyI+CiAgICA8YSBocmVmPSIjIiBjbGFzcz0ibW9kYWwtcHJvZ3JhbS1pbmZvcy1jbG9zZSI+RmVybWVyPC9hPgogICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgPHAgY2xhc3M9Im1vZGFsLXByb2dyYW0taW5mb3MtdGl0bGUiPkNvbnRhY3Rlei1ub3VzIHBvdXIgcGx1cyBk4oCZaW5mb3JtYXRpb25zPC9wPgogICAgPHA+UsOpcG9uc2Ugc291cyAyNGggbGVzIGpvdXJzIG91dnLDqXM8L3A+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1wcm9ncmFtLWluZm9zLWZvcm0iPgogICAgPGZvcm0gYWN0aW9uPSIvbm91cy1jb250YWN0ZXIvIiBtZXRob2Q9J3Bvc3QnIGlkPSdjb250YWN0LXVzLWZvcm0nIG5vdmFsaWRhdGU9Im5vdmFsaWRhdGUiID4KICAgICAgICA8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdjc3JmbWlkZGxld2FyZXRva2VuJyB2YWx1ZT0nTnVDZDZ1Qm9jUGhRMlg3dERhWEtTT0JRQkpMeU1Yek53YjhscHNMdmpvalFLVnFZN20yT1ExQ2hrYzNqTWxEZCcgLz4KICAgICAgICA8aW5wdXQgbmFtZT0idXJsX2Zyb20iIHR5cGU9ImhpZGRlbiIgdmFsdWU9Imh0dHBzOi8vd3d3LmVmZmljaXR5LmNvbS9hY2hhdC1pbW1vYmlsaWVyL2FwcGFydGVtZW50XzI3LW0yX3BhcmlzXzc1MDEwXzE4NDcyNDQ5LyI+CiAgICAgICAgPGlucHV0IG5hbWU9ImV4cGVydF9sb2dpbiIgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iYWRvbWVuZ2llIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1lbGVtZW50IGN1c3RvbS1wbGFjZWhvbGRlciI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1lbGVtZW50LWxhYmVsIiBmb3I9ImlkX2ZpcnN0bmFtZSI+Vm90cmUgcHLDqW5vbTwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJmaXJzdG5hbWUiIG1heGxlbmd0aD0iNTAwIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIgcmVxdWlyZWQgaWQ9ImlkX2ZpcnN0bmFtZSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWVsZW1lbnQgY3VzdG9tLXBsYWNlaG9sZGVyIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWVsZW1lbnQtbGFiZWwiIGZvcj0iaWRfbmFtZSI+Vm90cmUgbm9tPC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Im5hbWUiIG1heGxlbmd0aD0iNTAwIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIgcmVxdWlyZWQgaWQ9ImlkX25hbWUiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWVsZW1lbnQgY3VzdG9tLXBsYWNlaG9sZGVyIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWVsZW1lbnQtbGFiZWwiIGZvcj0iaWRfZW1haWwiPlZvdHJlIGVtYWlsPC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBuYW1lPSJlbWFpbCIgYXV0b2NvcnJlY3Q9Im9mZiIgc3BlbGxjaGVjaz0iZmFsc2UiIHJlcXVpcmVkIGlkPSJpZF9lbWFpbCIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWVsZW1lbnQgZmxhZ3MiPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0ic2VsZWN0MSIgY2xhc3M9IiIgbmFtZT0iIiB0YWJpbmRleD0iIj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEiIGRhdGEtaW1nPSJodHRwczovL2Rpc3psbjdmdDFjY3guY2xvdWRmcm9udC5uZXQvaW1nL2xhbmcvRlIuc3ZnIj4rMzM8L29wdGlvbj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWVsZW1lbnQgY3VzdG9tLXBsYWNlaG9sZGVyIHBob25lIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1lbGVtZW50LWxhYmVsIiBmb3I9ImlkX3RlbCI+Vm90cmUgbnVtw6lybyBkZSB0w6lsw6lwaG9uZTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idGVsIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIgcmVxdWlyZWQgaWQ9ImlkX3RlbCIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZWxlbWVudCI+CiAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImJlaGF2aW9yIiBpZD0iaWRfYmVoYXZpb3IiIGNsYXNzPSJmb3JtLWNvbnRyb2wiPgogIDxvcHRpb24gdmFsdWU9IjEiPlByb3ByacOpdGFpcmUgVmVuZGV1cjwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSIyIj5BY2hldGV1cjwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSIzIj5BIGxhIHJlY2hlcmNoZSBkJiMzOTt1bmUgYWN0aXZpdMOpIGTigJlpbmTDqXBlbmRhbnQgZW4gaW1tb2JpbGllcjwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSI0Ij5Kb3VybmFsaXN0ZTwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSI1Ij5BdXRyZTwvb3B0aW9uPgoKPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZWxlbWVudCBjdXN0b20tcGxhY2Vob2xkZXIiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1lbGVtZW50LWxhYmVsIiBmb3I9ImlkX3ppcGNvZGUiPlZvdHJlIGNvZGUgcG9zdGFsPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ibnVtYmVyIiBuYW1lPSJ6aXBjb2RlIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIgaWQ9ImlkX3ppcGNvZGUiIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWVsZW1lbnQgY3VzdG9tLXBsYWNlaG9sZGVyIGFjdGl2ZSAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tZWxlbWVudC1sYWJlbCIgZm9yPSJpZF9tZXNzYWdlIj5Wb3RyZSBtZXNzYWdlPC9sYWJlbD4KICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9Im1lc3NhZ2UiIGNvbHM9IjQwIiByb3dzPSIxMCIgaWQ9ImlkX21lc3NhZ2UiIHJlcXVpcmVkPgpCb25qb3VyLApKZSBzb3VoYWl0ZSBwbHVzIGTigJlpbmZvcm1hdGlvbnMgYXUgc3VqZXQgZGUgY2UgYmllbi4KTWVyY2kgZGUgbWUgcmVjb250YWN0ZXIuPC90ZXh0YXJlYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgIDxidXR0b24gaWQ9Im1vZGFsLXN1Ym1pdC1idG4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgbW9kYWwtc3VibWl0LWJ0biI+PGltZyBzcmM9Imh0dHBzOi8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvaWNvbi1zZW5kLnN2ZyIgY2xhc3M9Im1yLTIiIGFsdD0iIj4gRW52b3llcjwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgPC9mb3JtPgogICAgPC9kaXY+CgogICAgPHAgY2xhc3M9Im1vZGFsLXByb2dyYW0taW5mb3MtbWVudGlvbnMiPkFmaW4gZGUgdm91cyByw6lwb25kcmUsIGxlcyBpbmZvcm1hdGlvbnMgcmVjdWVpbGxpZXMgc29udCBhZHJlc3PDqWVzIGF1eCBjb25zdWx0YW50cyBpbW1vYmlsaWVycyBlZmZpQ2l0eSBvdSBGb25jaWEgZXhwZXJ0cyBkZSB2b3RyZSB2aWxsZS4gVm91cyBiw6luw6lmaWNpZXogZOKAmXVuIGRyb2l0IGTigJlhY2PDqHMsIGRlIHJlY3RpZmljYXRpb24sIGTigJllZmZhY2VtZW50IGRlIGNlcyBpbmZvcm1hdGlvbnMgbWFpcyDDqWdhbGVtZW50IGTigJlvcHBvc2l0aW9uIMOgIGNlIHRyYWl0ZW1lbnQuIETDqWNvdXZyZXogPGEgaHJlZj0iL3Zvc2Rvbm5lZXMvIj5ub3MgZW5nYWdlbWVudHMgZW4gdGVybWVzIGRlIHByb3RlY3Rpb24gZGVzIGRvbm7DqWVzPC9hPi48L3A+CjwvZGl2PgogCiAgICAKCjxkaXYgaWQ9ImFzay1mb3ItbW9yZS1pbmZvcyIgY2xhc3M9Im1vZGFsIG1vZGFsLXByb2dyYW0taW5mb3MiPgogICAgPGEgaHJlZj0iIyIgY2xhc3M9Im1vZGFsLXByb2dyYW0taW5mb3MtY2xvc2UiPkZlcm1lcjwvYT4KICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgIDxwIGNsYXNzPSJtb2RhbC1wcm9ncmFtLWluZm9zLXRpdGxlIj5EZW1hbmRlciBkZXMgaW5mb3Mgc3VyIGNlIGJpZW48L3A+CiAgICA8cD5Sw6lwb25zZSBzb3VzIDI0aCBsZXMgam91cnMgb3V2csOpczwvcD4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Im1vZGFsLXByb2dyYW0taW5mb3MtZm9ybSI+CiAgICA8Zm9ybSBhY3Rpb249Ii9ub3VzLWNvbnRhY3Rlci8iIG1ldGhvZD0ncG9zdCcgaWQ9J2NvbnRhY3QtdXMtZm9ybScgbm92YWxpZGF0ZT0ibm92YWxpZGF0ZSIgPgogICAgICAgIDxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2NzcmZtaWRkbGV3YXJldG9rZW4nIHZhbHVlPSd1VVpCdmsxdVJYVDBmb2YyWGZvdmxRTW15NUpld0h2WjN6WUxTOFZpdU9BNXgydDVnS3BzdENKSmdYTVREZktxJyAvPgogICAgICAgIDxpbnB1dCBuYW1lPSJ1cmxfZnJvbSIgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iaHR0cHM6Ly93d3cuZWZmaWNpdHkuY29tL2FjaGF0LWltbW9iaWxpZXIvYXBwYXJ0ZW1lbnRfMjctbTJfcGFyaXNfNzUwMTBfMTg0NzI0NDkvIj4KICAgICAgICA8aW5wdXQgbmFtZT0iZXhwZXJ0X2xvZ2luIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJhZG9tZW5naWUiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWVsZW1lbnQgY3VzdG9tLXBsYWNlaG9sZGVyIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWVsZW1lbnQtbGFiZWwiIGZvcj0iaWRfZmlyc3RuYW1lIj5Wb3RyZSBwcsOpbm9tPC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImZpcnN0bmFtZSIgYXV0b2NvcnJlY3Q9Im9mZiIgcmVxdWlyZWQgaWQ9ImlkX2ZpcnN0bmFtZSIgbWF4bGVuZ3RoPSI1MDAiIHNwZWxsY2hlY2s9ImZhbHNlIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZWxlbWVudCBjdXN0b20tcGxhY2Vob2xkZXIiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tZWxlbWVudC1sYWJlbCIgZm9yPSJpZF9uYW1lIj5Wb3RyZSBub208L2xhYmVsPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ibmFtZSIgYXV0b2NvcnJlY3Q9Im9mZiIgcmVxdWlyZWQgaWQ9ImlkX25hbWUiIG1heGxlbmd0aD0iNTAwIiBzcGVsbGNoZWNrPSJmYWxzZSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZWxlbWVudCBjdXN0b20tcGxhY2Vob2xkZXIiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tZWxlbWVudC1sYWJlbCIgZm9yPSJpZF9lbWFpbCI+Vm90cmUgZW1haWw8L2xhYmVsPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIG5hbWU9ImVtYWlsIiBhdXRvY29ycmVjdD0ib2ZmIiByZXF1aXJlZCBpZD0iaWRfZW1haWwiIHNwZWxsY2hlY2s9ImZhbHNlIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZWxlbWVudCBmbGFncyI+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJzZWxlY3QxIiBjbGFzcz0iIiBuYW1lPSIiIHRhYmluZGV4PSIiPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMSIgZGF0YS1pbWc9Imh0dHBzOi8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9pbWcvbGFuZy9GUi5zdmciPiszMzwvb3B0aW9uPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZWxlbWVudCBjdXN0b20tcGxhY2Vob2xkZXIgcGhvbmUiPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWVsZW1lbnQtbGFiZWwiIGZvcj0iaWRfdGVsIj5Wb3RyZSBudW3DqXJvIGRlIHTDqWzDqXBob25lPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ0ZWwiIGF1dG9jb3JyZWN0PSJvZmYiIHJlcXVpcmVkIGlkPSJpZF90ZWwiIHNwZWxsY2hlY2s9ImZhbHNlIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZWxlbWVudCI+CiAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImJlaGF2aW9yIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iaWRfYmVoYXZpb3IiPgogIDxvcHRpb24gdmFsdWU9IjEiPlByb3ByacOpdGFpcmUgVmVuZGV1cjwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSIyIiBzZWxlY3RlZD5BY2hldGV1cjwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSIzIj5BIGxhIHJlY2hlcmNoZSBkJiMzOTt1bmUgYWN0aXZpdMOpIGTigJlpbmTDqXBlbmRhbnQgZW4gaW1tb2JpbGllcjwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSI0Ij5Kb3VybmFsaXN0ZTwvb3B0aW9uPgoKICA8b3B0aW9uIHZhbHVlPSI1Ij5BdXRyZTwvb3B0aW9uPgoKPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWVsZW1lbnQgY3VzdG9tLXBsYWNlaG9sZGVyIGFjdGl2ZSAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tZWxlbWVudC1sYWJlbCIgZm9yPSJpZF9tZXNzYWdlIj5Wb3RyZSBtZXNzYWdlPC9sYWJlbD4KICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9Im1lc3NhZ2UiIHJlcXVpcmVkIGlkPSJpZF9tZXNzYWdlIiByb3dzPSIxMCIgY29scz0iNDAiPgpCb25qb3VyLApKZSBzb3VoYWl0ZSBwbHVzIGTigJlpbmZvcm1hdGlvbnMgYXUgc3VqZXQgZGUgY2UgYmllbi4KTWVyY2kgZGUgbWUgcmVjb250YWN0ZXIuPC90ZXh0YXJlYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgIDxidXR0b24gaWQ9Im1vZGFsLWNsYXNzaWZpZWQtc3VibWl0LWJ0biIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBtb2RhbC1zdWJtaXQtYnRuIj48aW1nIHNyYz0iaHR0cHM6Ly9kaXN6bG43ZnQxY2N4LmNsb3VkZnJvbnQubmV0L2ltZy9pY29uLXNlbmQuc3ZnIiBjbGFzcz0ibXItMiIgYWx0PSIiPiBFbnZveWVyPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KCiAgICA8cCBjbGFzcz0ibW9kYWwtcHJvZ3JhbS1pbmZvcy1tZW50aW9ucyI+QWZpbiBkZSB2b3VzIHLDqXBvbmRyZSwgbGVzIGluZm9ybWF0aW9ucyByZWN1ZWlsbGllcyBzb250IGFkcmVzc8OpZXMgYXV4IGNvbnN1bHRhbnRzIGltbW9iaWxpZXJzIGVmZmlDaXR5IG91IEZvbmNpYSBleHBlcnRzIGRlIHZvdHJlIHZpbGxlLiBWb3VzIGLDqW7DqWZpY2lleiBk4oCZdW4gZHJvaXQgZOKAmWFjY8OocywgZGUgcmVjdGlmaWNhdGlvbiwgZOKAmWVmZmFjZW1lbnQgZGUgY2VzIGluZm9ybWF0aW9ucyBtYWlzIMOpZ2FsZW1lbnQgZOKAmW9wcG9zaXRpb24gw6AgY2UgdHJhaXRlbWVudC4gRMOpY291dnJleiA8YSBocmVmPSIvdm9zZG9ubmVlcy8iPm5vcyBlbmdhZ2VtZW50cyBlbiB0ZXJtZXMgZGUgcHJvdGVjdGlvbiBkZXMgZG9ubsOpZXM8L2E+LjwvcD4KPC9kaXY+CgoKCgo8ZGl2IGNsYXNzPSJmb290ZXItY3RhIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPHAgY2xhc3M9ImZvb3Rlci1jdGEtdGl0bGUiPlZvdXMgYXZleiB1bmUgcXVlc3Rpb24gPyBWb3VzIHNvdWhhaXRleiBjb25uYWl0cmUgbGUgcHJpeCBkZSB2b3RyZSBiaWVuID88L3A+CiAgICAgICAgPHA+Tm91cyBzb21tZXMgw6Agdm90cmUgZGlzcG9zaXRpb24uPC9wPgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1jdGEtYWN0aW9ucyBkLW1kLWZsZXgganVzdGlmeS1jb250ZW50LW1kLWNlbnRlciBhbGlnbi1pdGVtcy1tZC1jZW50ZXIiPgogICAgICAgICAgICA8YSBocmVmPSIvZXN0aW1hdGlvbi1pbW1vYmlsaWVyZS8iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgIj5Fc3RpbWVyIG1vbiBiaWVuPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gZ2xvYmFsLWNvbnRhY3QtdXMiPk5vdXMgY29udGFjdGVyPC9hPgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYnJlYWRjcnVtYnMiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxwPgogICAgICAgIDxhIGhyZWY9Ii8iPmVmZmlDaXR5PC9hPiAvCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci8iPgogICAgICAgICAgICAgICAgPHNwYW4+QWNoYXQgaW1tb2JpbGllcjwvc3Bhbj4KICAgICAgICAgICAgPC9hPiAvIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyL3JfYXBwYXJ0ZW1lbnRfaWxlLWRlLWZyYW5jZV8xMS8iPgogICAgICAgICAgICAgICAgPHNwYW4+w45sZS1kZS1GcmFuY2U8L3NwYW4+CiAgICAgICAgICAgIDwvYT4gLyAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF9wYXJpc183NS8iPgogICAgICAgICAgICAgICAgPHNwYW4+UGFyaXM8L3NwYW4+CiAgICAgICAgICAgIDwvYT4gLyAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF9wYXJpc183NTAxMC8iPgogICAgICAgICAgICAgICAgPHNwYW4+UGFyaXMgMTDDqG1lPC9zcGFuPgogICAgICAgICAgICA8L2E+IC8gCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxzcGFuPkFwcGFydGVtZW50IDI3IG0yPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAKICAgIDwvcD4KICAgIDwvZGl2Pgo8L2Rpdj4KCgoKCjxmb290ZXIgY2xhc3M9ImZvb3RlciI+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLXRvcCI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1sZy0zIj4KICAgICAgICAgIDxhIGhyZWY9Ii8iIGNsYXNzPSJsb2dvLWVmZmljaXR5Ij5FZmZpY2l0eTwvYT4KICAgICAgICAgIDxwIGNsYXNzPSJmb290ZXItZGVzYyI+ZWZmaUNpdHkgZXN0IHVuZSBwbGF0ZWZvcm1lIGRlIHNlcnZpY2VzIG5vdXZlbGxlIGfDqW7DqXJhdGlvbiBwZXJtZXR0YW50IMOgIGRlcyBpbmTDqXBlbmRhbnRzIGRlIGNyw6llciBsZXVyIGVudHJlcHJpc2UgZW4gaW1tb2JpbGllci4gPGEgaHJlZj0iL3F1aS1zb21tZXMtbm91cy8iPkVuIHNhdm9pciBwbHVzPC9hPjwvcD4KICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmVmZmljaXR5LXJlY3J1dGVtZW50LmNvbSIgY2xhc3M9ImJ0biByZWNydXRlbWVudCI+RGV2ZW5pciBjb25zdWx0YW50IGltbW9iaWxpZXI8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgb2Zmc2V0LWxnLTEgIj4KICAgICAgICAgIDxwIGNsYXNzPSJmb290ZXItdGl0bGUiPk5vcyBzZXJ2aWNlczwvcD4KICAgICAgICAgIDx1bD4KICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9lc3RpbWF0aW9uLWltbW9iaWxpZXJlLyI+RXN0aW1hdGlvbiBpbW1vYmlsacOocmU8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9lc3RpbWF0aW9uLWltbW9iaWxpZXJlL21haXNvbi8iPkVzdGltYXRpb24gbWFpc29uPC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZXN0aW1hdGlvbi1pbW1vYmlsaWVyZS9hcHBhcnRlbWVudC8iPkVzdGltYXRpb24gYXBwYXJ0ZW1lbnQ8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wcml4LWltbW9iaWxpZXItbTIvIj5Qcml4IG08c3VwPjI8L3N1cD48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyLyI+TWFpc29uIC0gYXBwYXJ0ZW1lbnQgw6AgdmVuZHJlPC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVuZHJlLWFwcGFydGVtZW50LW1haXNvbi8iPlZlbmRyZSBzYSBtYWlzb24sIHNvbiBhcHBhcnRlbWVudDwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvbnN1bHRhbnRzLWltbW9iaWxpZXIvIj5Ob3MgY29uc3VsdGFudHMgaW1tb2JpbGllcnM8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9iaWVuLWFjaGV0ZXIvIj5CaWVuIGFjaGV0ZXI8L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9iaWVuLXZlbmRyZS8iPkJpZW4gdmVuZHJlPC9hPjwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtbGctMyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItY29udGFjdCI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJmb290ZXItdGl0bGUiPk5vdHJlIHNlcnZpY2UgY2xpZW50PC9wPgogICAgICAgICAgICA8YSBocmVmPSJ0ZWw6MDEgNzYgNzAgMzkgODAiPjAxIDc2IDcwIDM5IDgwPC9hPgogICAgICAgICAgICA8cD5EdSBsdW5kaSBhdSB2ZW5kcmVkaSBkZSA5aDMwIMOgIDE4aDMwLjxiciAvPlByaXggZOKAmXVuIGFwcGVsIGxvY2FsPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItc29jaWFsIj4KICAgICAgICAgICAgPHAgY2xhc3M9ImZvb3Rlci10aXRsZSI+UmV0cm91dmV6LW5vdXMgc3VyPC9wPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9lZmZpY2l0eSIgY2xhc3M9ImZhY2Vib29rIj5GYWNlYm9vazwvYT4KICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2VmZmljaXR5X29mZmljaWVsLyIgY2xhc3M9Imluc3RhZ3JhbSI+SW5zdGFncmFtPC9hPgogICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZnIubGlua2VkaW4uY29tL2NvbXBhbnkvZWZmaWNpdHkiIGNsYXNzPSJsaW5rZWRpbiI+TGlua2VkaW48L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWJvdHRvbSI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8dWw+CiAgICAgICAgPGxpPjxhIGhyZWY9Ii9tZW50aW9ucy1sZWdhbGVzLyI+TWVudGlvbnMgbMOpZ2FsZXM8L2E+PC9saT4KICAgICAgICA8bGk+PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vZGlzemxuN2Z0MWNjeC5jbG91ZGZyb250Lm5ldC9wZGYvQkFSRU1FX05BVElPTkFMLnBkZiI+Tm9zIGJhcsOobWVzPC9hPjwvbGk+CiAgICAgICAgPGxpPjxhIGhyZWY9Ii92b3Nkb25uZWVzLyI+UG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6k8L2E+PC9saT4KICAgICAgPC91bD4KICAgICAgPHA+CiAgICAgIGVmZmlDaXR5IFNBIFJDUyBQYXJpcyA0OTcgNjE3IDc0NiAtIFRpdHVsYWlyZSBkZSBsYSBDYXJ0ZSBwcm9mZXNzaW9ubmVsbGUgQ1BJIDc1MDEgMjAxNSAwMDAgMDAyIDAyNQogICAgICBDQ0kgUGFyaXMgSURGIC0gQ2Fpc3NlIGRlIEdhcmFudGllIEZpbmFuY2nDqHJlIGRlIDEgMTYwIDAwMCBldXJvcyBhc3N1csOpZSBwYXIgR0FMSUFOIEFzc3VyYW5jZXMKICAgICAgKDg5IHJ1ZSBkZSBsYSBCb8OpdGllIDc1MDA4IFBhcmlzKSBlZmZpQ2l0eSBlc3QgdW5lIG1hcnF1ZSBkw6lwb3PDqWUuIGVmZmlDaXR5IMKpIENvcHlyaWdodCAyMDA2LTIwMjAsIHRvdXMgZHJvaXRzIHLDqXNlcnbDqXMuCiAgICAgIDwvcD4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Zvb3Rlcj4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii8vZDI1YndtejJjaG53Z3ouY2xvdWRmcm9udC5uZXQvcGx1Z2lucy9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KIAoKCiAgICAKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9wbHVnaW5zL2Jvb3RzdHJhcC9qcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9qcy93ZWJjb21wb25lbnRzL0hUTUxJbXBvcnRzLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPiAKKGZ1bmN0aW9uICgpIHsgCiAgICB2YXIgdSA9ICJodHRwIiArICgoImh0dHBzOiIgPT0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wpID8gInMiIDogIiIpICsgIjovL3RyYWNraW5nLmVzZWFyY2h2aXNpb24uY29tLzEwMDY5L3RhZ18xMDA2OV80LmpzIjsgCiAgICB2YXIgZCA9IGRvY3VtZW50LCBnID0gZC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwgcyA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdOyAKICAgIGcudHlwZSAgPSAndGV4dC9qYXZhc2NyaXB0JzsgZy5kZWZlciA9IHRydWU7IGcuYXN5bmMgPSB0cnVlOyBnLnNyYyA9IHU7IHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZywgcyk7IAp9KSgpOyAKPC9zY3JpcHQ+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9qcy9sZWFmbGV0L2xlYWZsZXQuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9kMjVid216MmNobndnei5jbG91ZGZyb250Lm5ldC9qcy9saWIvanF1ZXJ5LnZhbGlkYXRlLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgdmFyIG1hcCwgcHJvcGVydHlJY29uOwogICAgICAgIHZhciBob3VzZV90eXBlID0gJ2FwcGFydGVtZW50JzsKICAgICAgICAKICAgICAgICAgICAgdmFyIGlzX2V4Y2x1c2l2ZSA9IGZhbHNlOwogICAgICAgIAogICAgICAgIAogICAgICAgICAgICB2YXIgbGF0ID0gNDguODY4NDAxOwogICAgICAgICAgICB2YXIgbG9uID0gMi4zNzEwNTg7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIHZhciBzaG93X21vYmlsZSA9IGZhbHNlOwogICAgICAgIAogICAgPC9zY3JpcHQ+CiAgICAKICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvL2QyNWJ3bXoyY2hud2d6LmNsb3VkZnJvbnQubmV0L2pzL2NsYXNzaWZpZWRfZGV0YWlsLjJiYmJmNGQyLmpzIj48L3NjcmlwdD4KICAgIAogICAgPHNjcmlwdD4KICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICB0YWcuc3JjID0gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGkiOwogICAgICB2YXIgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07CiAgICAgIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhZywgZmlyc3RTY3JpcHRUYWcpOwoKICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAkKCcjbWFpbC1zaGFyZS1idG4nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgIHZhciB1cmwgPSAkKCdsaW5rW3JlbD1jYW5vbmljYWxdJykuYXR0cignaHJlZicpOwogICAgICAgICAgICB2YXIgZGVzYyA9ICc3NTAxMCBQQVJJUyAtIEdPTkNPVVJUIC0gQ0hBUk1BTlQgU1RVRElPIEFWRUMgQkVMTEUgVEVSUkFTU0UgVkVORFUgTE9VRSAgLSBlZmZpQ2l0eSwgbCYjMzk7QWdlbmNlIHF1aSBlc3RpbWUgdm90cmUgYmllbiBlbiBsaWduZSwgdm91cyBwcm9wb3NlIGNlIHRyw6hzIGJlYXUgc3R1ZGlvIExPVUUgZCYjMzk7dW5lIHN1cGVyZmljaWUgZGUgMjcsMjUgbTIgbG9pIGNhcnJleiwgb3V2ZXJ0IHN1ciB1bmUgSk9MSUUgVEVSUkFTU0UuIElsIGVzdCBzaXR1w6kgYXUgc2VpbiBkJiMzOTt1bmUgcGV0aXRlIGNvcHJvcHJpw6l0w6kuIElsIHNlIGNvbXBvc2UgZCYjMzk7dW5lIGVudHLDqWUsIGQmIzM5O3VuZSBzYWxsZSBkJiMzOTtlYXUgYXZlYyBXQywgZCYjMzk7dW5lIHZhc3RlIHBpw6hjZSBkZSB2aWUgTFVNSU5FVVNFIGF2ZWMgdW4gY29pbiBjdWlzaW5lIGFpbnNpIHF1JiMzOTt1biBjb2luIG51aXQuIEZhaWJsZXMgY2hhcmdlcyBldCBhdWN1biB0cmF2YXV4IMOgIHByw6l2b2lyLiBJZMOpYWxlbWVudCBzaXR1w6kgYXUgcGllZCBkZXMgdHJhbnNwb3J04oCmJwogICAgICAgICAgICB2YXIgY2hhcmFjdGVyaXN0aWNzID0gJ0FwcGFydGVtZW50IDEgcGnDqGNlIDI3IG3CsiwgUGFyaXMgLSAzMzLCoDg1MCDigqwnCiAgICAgICAgICAgIHZhciBsaW5rID0gIkxpZW4gcG91ciB2b2lyIGzigJlhbm5vbmNlwqA6ICIrICIvYWNoYXQtaW1tb2JpbGllci9hcHBhcnRlbWVudF8yNy1tMl9wYXJpc183NTAxMF8xODQ3MjQ0OS8iCgogICAgICAgICAgICB2YXIgZW1haWwgPSAnJzsKICAgICAgICAgICAgdmFyIHN1YmplY3QgPSAnVW5lIGFubm9uY2UgaW50w6lyZXNzYW50ZSBzdXIgZWZmaUNpdHknOwogICAgICAgICAgICB2YXIgZW1haWxCb2R5ID0gYEJvbmpvdXIsICUwRCUwQQolMEQlMEEKSuKAmWFpIHZ1IGNldHRlIGFubm9uY2UgaW1tb2JpbGnDqHJlIGV0IGplIHBlbnNlIHF14oCZZWxsZSBwb3VycmFpdCB04oCZaW50w6lyZXNzZXLCoDogJTBEJTBBCiUwRCUwQQoke2NoYXJhY3RlcmlzdGljc30KJTBEJTBBCiUwRCUwQQoke2Rlc2N9CiUwRCUwQQolMEQlMEEKJHtsaW5rfQolMEQlMEEKJTBEJTBBCsOAIGJpZW50w7R0YDsKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gJ21haWx0bzonICsgZW1haWwgKyAnP3N1YmplY3Q9JyArIHN1YmplY3QgKyAnJmJvZHk9JyArICAgZW1haWxCb2R5OwogICAgICAgIH0pOwogICAgICB9KQogICAgPC9zY3JpcHQ+Cgo8L2JvZHk+CjwvaHRtbD4K
  recorded_at: Thu, 02 Jul 2020 07:52:25 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_91-m2_paris_75014_18708530/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Cookie, Origin
      Cache-Control:
      - max-age=
      X-Varnish:
      - '1035834'
      - '462291'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:26 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_161-m2_paris_75017_19089412/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Cookie, Origin
      Cache-Control:
      - max-age=
      X-Varnish:
      - '330329'
      - '750950'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:26 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_58-m2_paris_75006_18233992/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      Vary:
      - Cookie, Origin
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - max-age=
      X-Varnish:
      - '492890'
      - '872894'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:26 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_84-m2_paris_75003_19097511/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      Vary:
      - Cookie, Origin
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - max-age=
      X-Varnish:
      - '131846'
      - '456094'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:26 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_41-m2_paris_75016_18151324/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Cookie, Origin
      Cache-Control:
      - max-age=
      X-Varnish:
      - '1035837'
      - '462303'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:26 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_26-m2_paris_75016_19058793/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      Vary:
      - Cookie, Origin
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - max-age=
      X-Varnish:
      - '330340'
      - '750953'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:26 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_42-m2_paris_75020_19061724/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      Vary:
      - Cookie, Origin
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - max-age=
      X-Varnish:
      - '1035840'
      - '462315'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:26 GMT
- request:
    method: get
    uri: https://www.efficity.com/achat-immobilier/appartement_48-m2_paris_75014_18598332/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Jul 2020 07:52:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - gunicorn/19.7.1
      X-Frame-Options:
      - SAMEORIGIN
      Vary:
      - Cookie, Origin
      Cache-Control:
      - max-age=
      X-Varnish:
      - '330351'
      - '750956'
      Age:
      - '0'
      Accept-Ranges:
      - bytes
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Jul 2020 07:52:27 GMT
recorded_with: VCR 6.0.0
