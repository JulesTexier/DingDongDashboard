---
http_interactions:
- request:
    method: get
    uri: http://www.immo-land.fr/recherche/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 09:27:38 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=m867gu7moect7f52aj4fn5clt1; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '10491'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 09:27:39 GMT
- request:
    method: get
    uri: http://www.immo-land.fr/573-STUDETTE-16-M-QUARTIER-MICHEL-BIZOT-210-000.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 09:27:39 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=2og34ihgvcqc68lqn9creu07gq; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '11330'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 09:27:39 GMT
- request:
    method: get
    uri: http://www.immo-land.fr/578-2-PIECES-BALCONS-VUE-PANORAMIQUE-44-m2.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 09:27:39 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=qbepnpsuk2rkjfds20p06520fh; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12807'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIiBjbGFzcz0ibm8tanMiPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICAgICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wIj4KICAgICAgICA8dGl0bGU+dmVudGUgMiBQSUVDRVMgLyBCQUxDT05TIC8gVlVFIFBBTk9SQU1JUVVFIC8gNDQgbTI8L3RpdGxlPgogICAgICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJ2ZW50ZSBhcHBhcnRlbWVudCAyIHBpw6hjZXMgUGFyaXMgOiAyIFBJRUNFUyAvIEJBTENPTlMgLyBWVUUgUEFOT1JBTUlRVUUgLyA0NCBtMiI+CiAgICAgICAgPG1ldGEgbmFtZT0iYXV0aG9yIiBjb250ZW50PSIiPgogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBuYW1lPSJnZW5lcmF0b3IiIGNvbnRlbnQ9InRyeXB0eWsiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmsgIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwOi8vd3d3LmltbW8tbGFuZC5mci81NzgtMi1QSUVDRVMtQkFMQ09OUy1WVUUtUEFOT1JBTUlRVUUtNDQtbTIuaHRtbCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0iZ2VuZXJhdG9yIiBjb250ZW50PSJiT2JjYXQiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgaHJlZj0iaW1hZ2VzL2Zhdmljb24ucG5nIiB0eXBlPSJpbWFnZS9wbmciIC8+CiAgICAgICAgICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iaW1hZ2VzL2Zhdmljb24ucG5nIiB0eXBlPSJpbWFnZS9wbmciIC8+CiAgICAgICAgCiAgICAgICAgPGJhc2UgaHJlZj0iaHR0cDovL3d3dy5pbW1vLWxhbmQuZnIvIj4KCiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgIAogICAgCiAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSIyIFBJRUNFUyAvIEJBTENPTlMgLyBWVUUgUEFOT1JBTUlRVUUgLyA0NCBtMiIgLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0iV2Vic2l0ZSIgLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwOi8vd3d3LmltbW8tbGFuZC5mci81NzgtMi1QSUVDRVMtQkFMQ09OUy1WVUUtUEFOT1JBTUlRVUUtNDQtbTIuaHRtbCIgLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Imh0dHA6Ly93d3cuaW1tby1sYW5kLmZyL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL29yaWdpbmFsL3Bob3RvX2ltcG9ydF82ODBjNGI4ZDcxODQyYzA3M2UxNDlkYTI5M2VjNTQzMS5qcGciIC8+CiAgICAKCiAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJhbGV3YXk6NDAwLDMwMCw1MDAsNjAwLDIwMCw3MDAuY3NzIiAvPgogICAgICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1MYXRvOjQwMCwzMDAsNzAwJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iLy9jb2RlLmpxdWVyeS5jb20vdWkvMS4xMC40L3RoZW1lcy9zbW9vdGhuZXNzL2pxdWVyeS11aS5jc3MiIC8+CiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii9jc3MvYnVpbGRfYWU0YzFlNDAxMzcxN2YzMjU4ZTZiYzEyYzMyMDg0MzIuY3NzIiAvPgogICAgICAgIAogICAgICAgICAKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvY3NzL2ZvbnRzL3N0eWxlLmNzcyIgLz4KICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvY3NzL2V4cHJlLmNzcyIgLz4KICAgICAgICAgCiAgICAgICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPgogICAgICAgIDwhLS1baWYgbHQgSUUgOV0+CiAgICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0PgogICAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4KICAgICAgICA8IVtlbmRpZl0tLT4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CjxzY3JpcHQ+KGZ1bmN0aW9uKHcsZCxzLGwsaSl7IHdbbF09d1tsXXx8W107d1tsXS5wdXNoKCB7ICdndG0uc3RhcnQnOgogICAgbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLAogICAgICAgICAgICBqPWQuY3JlYXRlRWxlbWVudChzKSxkbD1sIT0nZGF0YUxheWVyJz8nJmw9JytsOicnO2ouYXN5bmM9dHJ1ZTtqLnNyYz0KICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nK2krZGw7Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLGYpOwogICAgICAgICAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1LWFFRWldaJyk7PC9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgIDwvaGVhZD4KCiAgICA8Ym9keSBpZD0icGFnZURldGFpbCIgY2xhc3M9IiI+CgogICAgICAgICAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgo8bm9zY3JpcHQ+PGlmcmFtZSBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLUtYUVFaV1oiCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCgoKCiAgICAKICAgIAogICAgICAgICAgICAKICAgICAgICAKCgoKCiAgICAKCiAgICAKCgoKICAgIAogICAgCiAgICAgICAgICAgIAogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCgoKCgogICAgCgogCiAgICAgICAgCiAgICAgICAgCgoKICAgIAogICAgCiAgICAgICAgICAgIAogICAgICAgIAoKCgoKICAgIAoKICAgIAoKCgogICAgCiAgICAKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKCgoKCiAgICAKCiAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXJUb3AgIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgDQogICAgCiAgICAgICAgICAgICAgICAgICAgDQogICAgPGRpdiBjbGFzcz0icm93IGFjdGlvbnNUb3AgIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyICBwMCAiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibWFfd193cmFwcGVyIiBjbGFzcz0ibWEtd2lkZ2V0LWZlZWRiYWNrIG1hLXdpZGdldC1mZWVkYmFjay12MiBtYS13aWRnZXQtZmVlZGJhY2stdHlwZTIgbWEtd2lkZ2V0LWZlZWRiYWNrLS1zbWFsbCIgZGF0YS12ZXJzaW9uPSJ2MiIgZGF0YS1zY3JpcHQtdXJsPSJodHRwczovL3dpZGdldHMubWVpbGxldXJzYWdlbnRzLmNvbS9mZWVkYmFjay5qcyI+PGRpdiBpZD0ibWFfd19jb250ZW50Ij48L2Rpdj48YSBpZD0ibWFfd19mZWVkYmFja19saWNlbmNlIiBjbGFzcz0ibWEtd2lkZ2V0LWZlZWRiYWNrX19sb2dvIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9hZ2VuY2UtaW1tb2JpbGllcmUvYWdlbmNlLWltbW9sYW5kLTUzNDc1Ij48aW1nIHNyYz0iaHR0cHM6Ly9zdGF0aWMwLm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL215cHJvL2ltYWdlcy93aWRnZXQtbG9nby0xNDQucG5nIiB3aWR0aD0iMTQ0IiBhbHQ9IkFnZW5jZSBJbW1vbGFuZCIvPjwvYT48L2Rpdj48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3dpZGdldHMubWVpbGxldXJzYWdlbnRzLmNvbS9mZWVkYmFjay5qcz92ZXJzaW9uPXYyJnR5cGU9MiZzaXplPXNtYWxsJmlkPTUzNDc1Ij48L3NjcmlwdD4NCg0KICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXBpbGxzICBwdWxsLXJpZ2h0IG1sMTAgIj4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2VsZWN0aW9uLmh0bWwiIGNsYXNzPSJwdWxsLWxlZnQgYWN0aW9uTGluayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvdHJlIHPDqWxlY3Rpb248YnI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1cHBlciI+RGUgYmllbnM8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQgYmFja0JhZGdlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRyaWFuZ2xlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSBuYlNlbGVjdGlvbiI+MDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wLWRvd24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtbGVmdCBhY3Rpb25MaW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hvaXNpciBsYTxicj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVwcGVyIj5MYW5ndWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHVsbC1yaWdodCBiYWNrQmFkZ2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHJpYW5nbGUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZsYWcgZmxhZ19mciBhY3RpdmVMYW5nIGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnIGZsYWdfZnIgZmxhZ19mcl9mYWRlZCBoaWRlIHJpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvL3d3dy5pbW1vLWxhbmQuZnIvNTc4LTItUElFQ0VTLUJBTENPTlMtVlVFLVBBTk9SQU1JUVVFLTQ0LW0yLmh0bWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImxhbmciIHZhbHVlPSJmciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IiAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxhZyBmbGFnX2VuIGZsYWdfZW5fZmFkZWQgIHJpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvL3d3dy5pbW1vLWxhbmQuZnIvNTc4LTItUElFQ0VTLUJBTENPTlMtVlVFLVBBTk9SQU1JUVVFLTQ0LW0yLmh0bWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImxhbmciIHZhbHVlPSJlbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IiAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC91bD4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHByaWNpcGFsSGVhZCAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLXNtLTEyIGhlYWRMZWZ0ICB0ZXh0LWNlbnRlciI+DQogICAgICAgIDxhIGhyZWY9Ii8iIGlkPSJsb2dvU2l0ZSIgPjxpbWcgc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvbG9nb1NpdGUucG5nIiAvPjwvYT4NCiAgICA8L2Rpdj4NCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04ICBjb2wtc20tMTIgIGhlYWRSaWdodCI+DQogICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC14cy0xMiBwMCB0ZXh0LWNlbnRlciI+PHNwYW4gY2xhc3M9ImVsZW1lbnQiPjAxIDU2IDk1IDA3IDA3PC9zcGFuPiA8c3BhbiBjbGFzcz0iaWNvbi10ZWxlcGhvbmUgaWNvbnMgZnMtMzUiPjwvc3Bhbj48L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wteHMtMTIgcDAgdGV4dC1jZW50ZXIgIj48c3BhbiBjbGFzcz0iZWxlbWVudCBtYWlsIj48YSBocmVmPSJtYWlsdG86YWdlbmNlcy5pbW1vbGFuZEBnbWFpbC5jb20iPmFnZW5jZXMuaW1tb2xhbmRAZ21haWwuY29tPC9hPiA8L3NwYW4+PHNwYW4gY2xhc3M9Imljb24tZW1haWwgaWNvbnMgZnMtMzUgbWw1Ij48L3NwYW4+PC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC14cy0xMiBwMCB0ZXh0LWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJlbGVtZW50IHRleHQtcmlnaHQgY29sLW1kLTExIHAwIj48YSBocmVmPSIvY29udGFjdC5odG1sIiA+ICAgMjU5IEF2ZW51ZSBEYXVtZXNuaWwgLSA3NTAxMiBQYXJpczwvYT48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWxvY2FsaXNhdGlvbiAgY29sLW1kLTEgcDAgaWNvbnMgZnMtMzUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgIA0KICAgICAgICA8L2Rpdj4NCiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtYWluIG10MjAgbWIyMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIHBsMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpeGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoZWFkZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgcDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWNvbGxhcHNlIHAwIGNvbGxhcHNlICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBwdWxsLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvIiB0YXJnZXQ9IiIgPkFjY3VlaWw8L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvYS12ZW5kcmUvMSIgdGFyZ2V0PSIiID5WZW50ZTwvYT4KICAgIAogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxsaSBjbGFzcz0iICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hLWxvdWVyLzEiIHRhcmdldD0iIiA+TG9jYXRpb248L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvZXN0aW1hdGlvbi5odG1sIiB0YXJnZXQ9IiIgPkVzdGltYXRpb248L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvcmVjcnV0ZW1lbnQuaHRtbCIgdGFyZ2V0PSIiID5SZWNydXRlbWVudDwvYT4KICAgIAogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxsaSBjbGFzcz0iICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9jb250YWN0Lmh0bWwiIHRhcmdldD0iIiA+Q29udGFjdGV6LW5vdXM8L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvYWxlcnRlLWVtYWlsLmh0bWwiIHRhcmdldD0iIiA+QWxlcnRlIEUtbWFpbDwvYT4KICAgIAogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmF2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaGVhZGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNpZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlNlYXJjaCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRoZW1UaXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVm90cmUgcmVjaGVyY2hlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBjbGFzcz0iY29udGFpbmVyU2VhcmNoIiBhY3Rpb249Ii9yZWNoZXJjaGUvIiByb2xlPSJmb3JtIj4KICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iZGF0YVtTZWFyY2hdW29mZnJlZGVtXSIgaWQ9ImlucHV0T2ZmcmVkZW0iIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0cGlja2VyIiAgIGRhdGEtc3R5bGU9ImJ0bi1zZWxlY3RwaWNrZXIiPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMCIgc2VsZWN0ZWQ9InNlbGVjdGVkIj4KICAgICAgICAgICAgVmVudGUKICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTAiID4KICAgICAgICAgICAgVmVudGUgSW1tb2JpbGllciBQcm9mZXNzaW9ubmVsCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIiID4KICAgICAgICAgICAgTG9jYXRpb24KICAgICAgICA8L29wdGlvbj4KICAgIDwvc2VsZWN0PgoKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iZGF0YVtTZWFyY2hdW3N1cmZdIiBpZD0iaW5wdXRTdXJmYWNlIiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdHBpY2tlciIgICBkYXRhLXN0eWxlPSJidG4tc2VsZWN0cGlja2VyIj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idm9pZCI+U3VyZmFjZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMC01MCIgPgogICAgICAgICAgICA8IDUwCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjUwLTEwMCIgPgogICAgICAgICAgICA1MCAtIDEwMAogICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMDAtMTUwIiA+CiAgICAgICAgICAgIDEwMCAtIDE1MAogICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxNTAtMCIgPgogICAgICAgICAgICA+IDE1MAogICAgICAgIDwvb3B0aW9uPgogICAgPC9zZWxlY3Q+CgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImRhdGFbU2VhcmNoXVt0eXBldHJhbnNhY10iIGlkPSJpbnB1dFR5cGV0cmFuc2FjIiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdHBpY2tlciIgICBkYXRhLXN0eWxlPSJidG4tc2VsZWN0cGlja2VyIj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idm9pZCI+Tm9tYnJlIGRlIHBpw6hjZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE2IiA+CiAgICAgICAgICAgIExvY2FsIGQnYWN0aXZpdMOpCiAgICAgICAgPC9vcHRpb24+CiAgICA8L3NlbGVjdD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iZGF0YVtTZWFyY2hdW2dlb2RlcGFydGVtZW50XSIgaWQ9ImlucHV0RGVwYXJ0ZW1lbnRzIiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdHBpY2tlciIgICBkYXRhLXN0eWxlPSJidG4tc2VsZWN0cGlja2VyIj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idm9pZCI+RMOpcGFydGVtZW50PC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI3NSIgPgogICAgICAgICAgICBQYXJpcwogICAgICAgIDwvb3B0aW9uPgogICAgPC9zZWxlY3Q+CgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IkxvY2FsaXNhdGlvbiIgbmFtZT0iZGF0YVtTZWFyY2hdW2lkdmlsbGVdIiBpZD0iaW5wdXRMb2NhbGlzYXRpb24iIHZhbHVlPSIiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbG9jcmVxdWV0dGUiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBjbGFzcz0ibG9jYWxpc2F0aW9uIiBuYW1lPSJkYXRhW1NlYXJjaF1baWR2aWxsZV0iICB2YWx1ZT0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIHNsaWRlckVsdCB0ZXh0LWNlbnRlciI+QnVkZ2V0PC9kaXY+CjxkaXYgY2xhc3M9ImNvbC1zbS0xMiBtdGIxMCIgaWQ9InNsaWRlci1wcml4Ij48L2Rpdj4KPGRpdiBjbGFzcz0icm93Ij4gICAgCiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIHNsaWRlckVsdCI+RW50cmU8L2xhYmVsPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBwMCI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImRhdGFbU2VhcmNoXVtwcml4bWluXSIgcGxhY2Vob2xkZXI9IlByaXggbWluIiBpZD0iaW5wdXRQcml4TWluIiB2YWx1ZT0iIiBjbGFzcz0iZm9ybS1jb250cm9sIHNsaWRlcklucHV0IG51bWVyaWNJbnB1dCI+IAogICAgICA8L2Rpdj4KICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMSBjb250cm9sLWxhYmVsIHNsaWRlckVsdCI+ZXQ8L2xhYmVsPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBwMCI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImRhdGFbU2VhcmNoXVtwcml4bWF4XSIgcGxhY2Vob2xkZXI9IlByaXggbWF4IiBpZD0iaW5wdXRQcml4TWF4IiB2YWx1ZT0iIiBjbGFzcz0iZm9ybS1jb250cm9sIHNsaWRlcklucHV0IG51bWVyaWNJbnB1dCI+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0blNlYXJjaCAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiPlJlY2hlcmNoZXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAKPC9mb3JtPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc2lkZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz0iY29udGVudCAgY29sLW1kLTkgcDAgIj48IS0tIHByaW5jaXBhbCBjb250ZW50ICAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCgogICAKICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iQ2FsY3VsZXR0ZSIgY2xhc3M9Im1vZGFsIGZhZGUiICB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1sYWJlbGxlZGJ5PSJteUxhcmdlTW9kYWxMYWJlbCIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLW1kIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb3JtLWhvcml6b250YWwiIHJvbGU9ImZvcm0iIGFjdGlvbj0iIiBvbnN1Ym1pdD0icmV0dXJuIGNhbGN1bGF0ZUNyZWRpdCh0aGlzKTsiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUgdGhlbVRpdGxlIj5DYWxjdWxldHRlPC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im1vbnRhbnQiIGNsYXNzPSJjb2wtbWQtNCBjb250cm9sLWxhYmVsIj5Nb250YW50ICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBudW1lcmljSW5wdXQiIG5hbWU9Im1vbnRhbnQiIGlkPSJtb250YW50IiB2YWx1ZT0iNDg1MDAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0YXV4IiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCI+VGF1eCAoJSkgKiA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ibnVtYmVyIiBzdGVwPSIwLjAxIiBtaW49IjAiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9InRhdXgiIGlkPSJ0YXV4IiByZXF1aXJlZD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJhcHBvcnQiIGNsYXNzPSJjb2wtbWQtNCBjb250cm9sLWxhYmVsIj5BcHBvcnQgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIG51bWVyaWNJbnB1dCIgbmFtZT0iYXBwb3J0IiBpZD0iYXBwb3J0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkdXJlZSIgY2xhc3M9ImNvbC1tZC00IGNvbnRyb2wtbGFiZWwiPkR1csOpZSAoQW5uw6llcykgKiA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBudW1lcmljSW5wdXQiIG5hbWU9ImR1cmVlIiBpZD0iZHVyZWUiIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZHVyZWUiIGNsYXNzPSJjb2wtbWQtNCBjb250cm9sLWxhYmVsIHRleHQtbGVmdCI+TWVuc3VhbGl0w6lzIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlc3VsdCI+IDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIG9ibGlnQ2hhbXAgcHVsbC1sZWZ0Ij4qQ2hhbXBzIG9ibGlnYXRvaXJlczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCByaWdodCI+Q2FsY3VsZXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtY29udGVudCAtLT4KICAgICAgICAgICAgICAgIDwvZGl2PjwhLS0gLy5tb2RhbC1kaWFsb2cgLS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJzZW5kRnJpZW5kIiBjbGFzcz0ibW9kYWwgZmFkZSIgIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im15TGFyZ2VNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbWQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvcm0taG9yaXpvbnRhbCIgcm9sZT0iZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii81NzgtMi1QSUVDRVMtQkFMQ09OUy1WVUUtUEFOT1JBTUlRVUUtNDQtbTIuaHRtbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhY3Rpb24iIHZhbHVlPSJzZW5kRnJpZW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRhdGFbQ29udGFjdF1bdXJsXSIgdmFsdWU9Imh0dHA6Ly93d3cuaW1tby1sYW5kLmZyLzU3OC0yLVBJRUNFUy1CQUxDT05TLVZVRS1QQU5PUkFNSVFVRS00NC1tMi5odG1sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIHRoZW1UaXRsZSI+UGFydGFnZXI8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0YVtDb250YWN0XVtub21dIiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgbm9tICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iZGF0YVtDb250YWN0XVtub21dIiByZXF1aXJlZD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRhdGFbQ29udGFjdF1bZnJvbV0iIGNsYXNzPSJjb2wtbWQtNCBjb250cm9sLWxhYmVsIj5Wb3RyZSBhZHJlc3NlIG1haWwgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iZGF0YVtDb250YWN0XVtmcm9tXSIgcmVxdWlyZWQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkYXRhW0NvbnRhY3RdW3RvXSIgY2xhc3M9ImNvbC1tZC00IGNvbnRyb2wtbGFiZWwiPk1haWwgZGUgdm90cmUgYW1pICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9ImRhdGFbQ29udGFjdF1bdG9dIiByZXF1aXJlZD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXNicnl3IiBzdHlsZT0iZGlzcGxheTpub25lIj4KPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImFzX2R5bmEiIGRhdGEtd2FpdD0iNTk3YzljZDc3NDFiMjhhZDQyODcxYWY1ZWNiMDBkMGUiIGRhdGEtb3JpZz0iMzczNzk0ZTM4MzM4YjdmMWVjNDhmNGM3MTBmNGQyZjgiIGNsYXNzPSJhc19maWVsZCBhc19maWVsZC0yIDIiIHZhbHVlPSIzNzM3OTRlMzgzMzhiN2YxZWM0OGY0YzcxMGY0ZDJmOCIvPgo8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXNfc3RhdCIgY2xhc3M9ImFzX2ZpZWxkIGFzX2ZpZWxkLTEgMSIgdmFsdWU9IiIvPgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRhdGFbQ29udGFjdF1bbWVzc2FnZV0iIGNsYXNzPSJjb2wtbWQtNCBjb250cm9sLWxhYmVsIj5Wb3RyZSBtZXNzYWdlPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0ibWVzc2FnZSIgbmFtZT0iZGF0YVtDb250YWN0XVttZXNzYWdlXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic21hbGwgb2JsaWdDaGFtcCBwdWxsLWxlZnQiPipDaGFtcHMgb2JsaWdhdG9pcmVzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCByaWdodCI+RW52b3llcjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtY29udGVudCAtLT4KICAgICAgICAgICAgICAgIDwvZGl2PjwhLS0gLy5tb2RhbC1kaWFsb2cgLS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJDb250YWN0IiBjbGFzcz0ibW9kYWwgZmFkZSIgIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im15TGFyZ2VNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbWQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvcm0taG9yaXpvbnRhbCIgcm9sZT0iZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii81NzgtMi1QSUVDRVMtQkFMQ09OUy1WVUUtUEFOT1JBTUlRVUUtNDQtbTIuaHRtbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB2YWx1ZT0id3d3LmltbW8tbGFuZC5mci81NzgtMi1QSUVDRVMtQkFMQ09OUy1WVUUtUEFOT1JBTUlRVUUtNDQtbTIuaHRtbCIgbmFtZT0iZGF0YVtDb250YWN0XVtvcmlnaW5lbWFpbF0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdmFsdWU9ImFnZW5jZXMuaW1tb2xhbmRAZ21haWwuY29tIiAgbmFtZT0iZGF0YVtDb250YWN0XVt0b10iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSB0aGVtVGl0bGUiPkNvbnRhY3RlcjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIG5vbSAgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiICAgcGxhY2Vob2xkZXI9IiIgIG5hbWU9ImRhdGFbQ29udGFjdF1bbm9tXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVxdWlyZWQgb25pbnZhbGlkPSJzZXRDdXN0b21WYWxpZGl0eSgnVmV1aWxsZXogcmVuc2VpZ25lciBjZSBjaGFtcHMnKSIgb25pbnB1dD0ic2V0Q3VzdG9tVmFsaWRpdHkoJycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIGFkcmVzc2UgbWFpbCAgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW2VtYWlsXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVxdWlyZWQgb25pbnZhbGlkPSJzZXRDdXN0b21WYWxpZGl0eSgnVmV1aWxsZXogcmVuc2VpZ25lciBjZSBjaGFtcHMnKSIgb25pbnB1dD0ic2V0Q3VzdG9tVmFsaWRpdHkoJycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIFTDqWzDqXBob25lICAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgICBwbGFjZWhvbGRlcj0iIiAgbmFtZT0iZGF0YVtDb250YWN0XVt0ZWxdIiBjbGFzcz0iZm9ybS1jb250cm9sIiByZXF1aXJlZCBvbmludmFsaWQ9InNldEN1c3RvbVZhbGlkaXR5KCdWZXVpbGxleiByZW5zZWlnbmVyIGNlIGNoYW1wcycpIiBvbmlucHV0PSJzZXRDdXN0b21WYWxpZGl0eSgnJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgIGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgdmlsbGUgICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtc20tOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW3ZpbGxlXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVxdWlyZWQgb25pbnZhbGlkPSJzZXRDdXN0b21WYWxpZGl0eSgnVmV1aWxsZXogcmVuc2VpZ25lciBjZSBjaGFtcHMnKSIgb25pbnB1dD0ic2V0Q3VzdG9tVmFsaWRpdHkoJycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIG1lc3NhZ2UgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0iZGF0YVtDb250YWN0XVttZXNzYWdlXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IiIgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTggY29sLXNtLXB1c2gtNCBjb250cm9sLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZTogNDkxNgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRhdGFbaWRiaWVuXVtdIiB2YWx1ZT0iNTc4IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhc2JyeXciIHN0eWxlPSJkaXNwbGF5Om5vbmUiPgo8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXNfZHluYSIgZGF0YS13YWl0PSI1OTdjOWNkNzc0MWIyOGFkNDI4NzFhZjVlY2IwMGQwZSIgZGF0YS1vcmlnPSIzNzM3OTRlMzgzMzhiN2YxZWM0OGY0YzcxMGY0ZDJmOCIgY2xhc3M9ImFzX2ZpZWxkIGFzX2ZpZWxkLTIgMiIgdmFsdWU9IjM3Mzc5NGUzODMzOGI3ZjFlYzQ4ZjRjNzEwZjRkMmY4Ii8+CjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhc19zdGF0IiBjbGFzcz0iYXNfZmllbGQgYXNfZmllbGQtMSAxIiB2YWx1ZT0iIi8+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJncGQtY2hlY2tib3giPgogICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJyZ3BkLWFncmVlbWVudCIgaWQ9InJncGQtYWdyZWVtZW50bW9kYWwiIC8+CiAgICA8bGFiZWwgZm9yPSJyZ3BkLWFncmVlbWVudG1vZGFsIj5KJ2FjY2VwdGUgbGVzIGNvbmRpdGlvbnMgZCd1dGlsaXNhdGlvbiBkZXMgZG9ubsOpZXMgKCopPC9sYWJlbD4KPC9kaXY+CjxzY3JpcHQ+CiAgJ3VzZSBzdHJpY3QnOwoKICAoZnVuY3Rpb24gKCkgewogICAgdmFyIGFncmVlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZ3BkLWFncmVlbWVudG1vZGFsJyk7CiAgICB2YXIgZm9ybSA9IGFncmVlbWVudC5jbG9zZXN0KCdmb3JtJyk7CiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBpZiAoIWFncmVlbWVudC5jaGVja2VkKSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICBhbGVydCgiVmV1aWxsZXogYWNjZXB0ZXIgbCd1dGlsaXNhdGlvbiBkZSB2b3MgZG9ubsOpZXMgcG91ciBjb250aW51ZXIuIik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9KTsKICB9KSgpOwo8L3NjcmlwdD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIG9ibGlnQ2hhbXAgcHVsbC1sZWZ0Ij4qQ2hhbXBzIG9ibGlnYXRvaXJlczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgcmlnaHQiPkVudm95ZXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZ2FscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icmdwZC1sZWdhbHMiPiogOiBMZXMgaW5mb3JtYXRpb25zIHJlY3VlaWxsaWVzIHN1ciBjZSBmb3JtdWxhaXJlIHNvbnQgZW5yZWdpc3Ryw6llcyBkYW5zIHVuIGZpY2hpZXIgaW5mb3JtYXRpc8OpIHBhciBMYSBCb2l0ZSBJbW1vIHBvdXIgbGEgZ2VzdGlvbiBkZSBsYSBjbGllbnTDqGxlL3Byb3NwZWN0cyBkZSBBZ2VuY2UuCkVsbGVzIHNvbnQgY29uc2VydsOpZXMganVzcXUnw6AgZGVtYW5kZSBkZSBzdXBwcmVzc2lvbiBldCBzb250IGRlc3RpbsOpZXMgw6AgQWdlbmNlLgpDb25mb3Jtw6ltZW50IMOgIGxhIGxvaSDCqyBpbmZvcm1hdGlxdWUgZXQgbGliZXJ0w6lzIMK7LCB2b3VzIHBvdXZleiBleGVyY2VyIHZvdHJlIGRyb2l0IGQnYWNjw6hzIGF1eCBkb25uw6llcyB2b3VzIGNvbmNlcm5hbnQgZXQgbGVzIGZhaXJlIHJlY3RpZmllciBlbiBjb250YWN0YW50IEFnZW5jZS4KTm91cyB2b3VzIGluZm9ybW9ucyBkZSBs4oCZZXhpc3RlbmNlIGRlIGxhIGxpc3RlIGQnb3Bwb3NpdGlvbiBhdSBkw6ltYXJjaGFnZSB0w6lsw6lwaG9uaXF1ZSDCqyBCbG9jdGVsIMK7LCBzdXIgbGFxdWVsbGUgdm91cyBwb3V2ZXogdm91cyBpbnNjcmlyZSBpY2kgOiBodHRwczovL2NvbnNvLmJsb2N0ZWwuZnIvPC9wPiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PjwhLS0gLy5tb2RhbC1jb250ZW50IC0tPgogICAgICAgICAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWRpYWxvZyAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgIAogICAgCiAgICAKICAgICAgICA8ZGl2IGlkPSJWaXNpdGUiIGNsYXNzPSJtb2RhbCBmYWRlIiAgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0ibXlMYXJnZU1vZGFsTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIHRoZW1UaXRsZSI+VmlzaXRlIFZpcnR1ZWxsZTwvaDQ+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWZyYW1lIHNyYz0iIiB3aWR0aD0iODAwIiBoZWlnaHQ9IjUwMCIgZnJhbWVib3JkZXI9IjAiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PjwhLS0gLy5tb2RhbC1jb250ZW50IC0tPgogICAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtZGlhbG9nIC0tPgogICAgICAgIDwvZGl2PgogICAgCiAgICAKICAgIDxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvUHJvZHVjdCIgY2xhc3M9ImNvbnRhaW5lckRldGFpbCI+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRoZW1UaXRsZSI+CiAgICAgICAgICAgICAgICA8aDEgaXRlbXByb3A9Im5hbWUiPjIgUElFQ0VTIC8gQkFMQ09OUyAvIFZVRSBQQU5PUkFNSVFVRSAvIDQ0IG0yPC9oMT4KICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0nYXBwbGljYXRpb24vbGQranNvbic+CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIkBjb250ZXh0IjoiaHR0cHM6Ly9zY2hlbWEub3JnIiwKICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiJCcmVhZGNydW1iTGlzdCIsCiAgICAgICAgICAgICAgICAgICAgIml0ZW1MaXN0RWxlbWVudCI6CiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjoiTGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwb3NpdGlvbiI6MSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW0iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQGlkIjoiLyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IkFjY3VlaWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiJMaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBvc2l0aW9uIjoyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXRlbSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAaWQiOiIvMC1hY2hldGVyLTM4MTg1LVBhcmlzIDEyLzEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiJhY2hldGVyIHVuIGJpZW4gaW1tb2JpbGllciDDoCBQYXJpcyAxMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAdHlwZSI6Ikxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicG9zaXRpb24iOjMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpdGVtIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkBpZCI6Ii8wLWFjaGV0ZXItMzgxODUtUGFyaXMgMTIvMi1BcHBhcnRlbWVudC8xIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjoiQXBwYXJ0ZW1lbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiJMaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBvc2l0aW9uIjo0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW0iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQGlkIjoiLzU3OC0yLVBJRUNFUy1CQUxDT05TLVZVRS1QQU5PUkFNSVFVRS00NC1tMi5odG1sIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjoiMiBQSUVDRVMgLyBCQUxDT05TIC8gVlVFIFBBTk9SQU1JUVVFIC8gNDQgbTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgIDxvbCBjbGFzcz0iYnJlYWRjcnVtYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8iID5BY2N1ZWlsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8wLWFjaGV0ZXItMzgxODUtUGFyaXMgMTIvMSIgPkFjaGV0ZXIgdW4gYmllbiBpbW1vYmlsaWVyIMOgIFBhcmlzIDEyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8wLWFjaGV0ZXItMzgxODUtUGFyaXMgMTIvMi1BcHBhcnRlbWVudC8xIiA+QXBwYXJ0ZW1lbnQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLzAtYWNoZXRlci0zODE4NS1QYXJpcyAxMi8yLXBpZWNlcy8xIiA+MiBwacOoY2VzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjIgUElFQ0VTIC8gQkFMQ09OUyAvIFZVRSBQQU5PUkFNSVFVRSAvIDQ0IG0yPC9saT4KICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lckR0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBiYWNrbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBiYWNrIHB1bGwtbGVmdCI+IDwgUmV0b3VyPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImR0MiI+CiAgICAgICAgPGRpdiBjbGFzcz0idG9wQ29udGVudCI+CiAgICAgICAgICAgIAogICAgCgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCgogICAKICAgIDxkaXYgY2xhc3M9InJvdyBkdDJUb3BWMiBzbGlkZXJWMiI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbkltZyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtaW5saW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpeAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaT48c3BhbiBjbGFzcz0idHJpYW5nbGUgcHVsbC1sZWZ0Ij48L3NwYW4+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InByaWNlIiBjb250ZW50PSI0ODUwMDAiPjQ4NSAwMDA8L3NwYW4+IDxzcGFuIGl0ZW1wcm9wPSJwcmljZUN1cnJlbmN5Ij7igqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxvYWRlciI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvbG9hZGluZy5naWYiIGFsdD0iZ2FsbGVyeSBsb2FkZXIiLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8dWwgY2xhc3M9ImltYWdlR2FsbGVyeSAgbG9hZGluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWl0ZXJhdG9yPSIwIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRodW1iPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL3Bob3RvX2ltcG9ydF82ODBjNGI4ZDcxODQyYzA3M2UxNDlkYTI5M2VjNTQzMS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfNjgwYzRiOGQ3MTg0MmMwNzNlMTQ5ZGEyOTNlYzU0MzEuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYy1mb3J0aHVtYj0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMDljMTQyYjI3MjNhY2ZmZTMyNjYzOTk5ZjBkOWE0NmMvcGhvdG9faW1wb3J0XzY4MGM0YjhkNzE4NDJjMDczZTE0OWRhMjkzZWM1NDMxLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfNjgwYzRiOGQ3MTg0MmMwNzNlMTQ5ZGEyOTNlYzU0MzEuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aHVtYj0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfZDYyZTBhMzI5ZmUyY2U1NzNiMDAyNTQyYzg3YTRhNmUuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMDljMTQyYjI3MjNhY2ZmZTMyNjYzOTk5ZjBkOWE0NmMvcGhvdG9faW1wb3J0X2Q2MmUwYTMyOWZlMmNlNTczYjAwMjU0MmM4N2E0YTZlLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL3Bob3RvX2ltcG9ydF9kNjJlMGEzMjlmZTJjZTU3M2IwMDI1NDJjODdhNGE2ZS5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMDljMTQyYjI3MjNhY2ZmZTMyNjYzOTk5ZjBkOWE0NmMvcGhvdG9faW1wb3J0X2Q2MmUwYTMyOWZlMmNlNTczYjAwMjU0MmM4N2E0YTZlLmpwZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tLzIwMHgyMDAvaW1hZ2VzL2JpZW5zLzEvMDljMTQyYjI3MjNhY2ZmZTMyNjYzOTk5ZjBkOWE0NmMvcGhvdG9faW1wb3J0XzhlYjdmZDBkZDAyZjRlYTE3MGUzNGZiMWZiYjE4OTkzLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL3Bob3RvX2ltcG9ydF84ZWI3ZmQwZGQwMmY0ZWExNzBlMzRmYjFmYmIxODk5My5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjLWZvcnRodW1iPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfOGViN2ZkMGRkMDJmNGVhMTcwZTM0ZmIxZmJiMTg5OTMuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL3Bob3RvX2ltcG9ydF84ZWI3ZmQwZGQwMmY0ZWExNzBlMzRmYjFmYmIxODk5My5qcGciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWl0ZXJhdG9yPSIzIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRodW1iPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL3Bob3RvX2ltcG9ydF9jODJjODhiNzY1MzVhOTVkMTM2OGVhZGNkMGRkZWJmMS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfYzgyYzg4Yjc2NTM1YTk1ZDEzNjhlYWRjZDBkZGViZjEuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYy1mb3J0aHVtYj0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMDljMTQyYjI3MjNhY2ZmZTMyNjYzOTk5ZjBkOWE0NmMvcGhvdG9faW1wb3J0X2M4MmM4OGI3NjUzNWE5NWQxMzY4ZWFkY2QwZGRlYmYxLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfYzgyYzg4Yjc2NTM1YTk1ZDEzNjhlYWRjZDBkZGViZjEuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iNCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aHVtYj0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfNzFhNWVhMGU5ZTIwMzY4NzM1NDI3NjFlNTYxZjEwYjMuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMDljMTQyYjI3MjNhY2ZmZTMyNjYzOTk5ZjBkOWE0NmMvcGhvdG9faW1wb3J0XzcxYTVlYTBlOWUyMDM2ODczNTQyNzYxZTU2MWYxMGIzLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL3Bob3RvX2ltcG9ydF83MWE1ZWEwZTllMjAzNjg3MzU0Mjc2MWU1NjFmMTBiMy5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMDljMTQyYjI3MjNhY2ZmZTMyNjYzOTk5ZjBkOWE0NmMvcGhvdG9faW1wb3J0XzcxYTVlYTBlOWUyMDM2ODczNTQyNzYxZTU2MWYxMGIzLmpwZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tLzIwMHgyMDAvaW1hZ2VzL2JpZW5zLzEvMDljMTQyYjI3MjNhY2ZmZTMyNjYzOTk5ZjBkOWE0NmMvcGhvdG9faW1wb3J0Xzg4OTBmMDE5N2I3MzE5MmJmZDY1Njc4YTA3YjZkZTMxLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL3Bob3RvX2ltcG9ydF84ODkwZjAxOTdiNzMxOTJiZmQ2NTY3OGEwN2I2ZGUzMS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjLWZvcnRodW1iPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfODg5MGYwMTk3YjczMTkyYmZkNjU2NzhhMDdiNmRlMzEuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL3Bob3RvX2ltcG9ydF84ODkwZjAxOTdiNzMxOTJiZmQ2NTY3OGEwN2I2ZGUzMS5qcGciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWl0ZXJhdG9yPSI2IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRodW1iPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL3Bob3RvX2ltcG9ydF85MGUzNDIxYzA3NzEzMmFlMmFiMWE4OTg4MzlhOGQ0NC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfOTBlMzQyMWMwNzcxMzJhZTJhYjFhODk4ODM5YThkNDQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYy1mb3J0aHVtYj0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMDljMTQyYjI3MjNhY2ZmZTMyNjYzOTk5ZjBkOWE0NmMvcGhvdG9faW1wb3J0XzkwZTM0MjFjMDc3MTMyYWUyYWIxYTg5ODgzOWE4ZDQ0LmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8wOWMxNDJiMjcyM2FjZmZlMzI2NjM5OTlmMGQ5YTQ2Yy9waG90b19pbXBvcnRfOTBlMzQyMWMwNzcxMzJhZTJhYjFhODk4ODM5YThkNDQuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiaWVuVGl0bGUiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8aDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ0IG0mc3VwMjsgLSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgcGnDqGNlcyAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMgKDc1MDEyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWYiIGl0ZW1wcm9wPSJwcm9kdWN0SUQiPlJlZiA0OTE2PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjdGlvbkR0Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tZHQgYnRuLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1bGwtbGVmdCB0eHRCdG4iPlPDqWxlY3Rpb25uZXI8L3NwYW4+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLXNlbGVjdGlvbiBpY29ucyBwdWxsLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdmFsdWU9IjU3OCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tZHQiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNDb250YWN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWxsLWxlZnQgdHh0QnRuIj5Db250YWN0ZXI8L3NwYW4+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tY29udGFjdG1haWwgaWNvbnMgcHVsbC1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kdCIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI3NlbmRGcmllbmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1bGwtbGVmdCB0eHRCdG4iPkVudm95ZXIgbCdvZmZyZTwvc3Bhbj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1wYXJ0YWdlciBpY29ucyBwdWxsLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWR0IiBvbmNsaWNrPSJ3aW5kb3cub3BlbignL2FkbWluL3BkZi5waHA/bGFuZz1mciZpZGFubj01NzgmZmljaGVfdHlwZT12aXNpdGUmcGRmX29yaWVudGF0aW9uPVAmcGRmX3RlbXBsYXRlPTEnKTsgcmV0dXJuIGZhbHNlOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVsbC1sZWZ0IHR4dEJ0biI+SW1wcmltZXI8L3NwYW4+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24taW1wcmltZXIgaWNvbnMgcHVsbC1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tZHQiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNDYWxjdWxldHRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVsbC1sZWZ0IHR4dEJ0biI+Q2FsY3VsYXRyaWNlPC9zcGFuPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1jYWxjdWxldHRlIGljb25zIHB1bGwtcmlnaHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1haW5Db250ZW50Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBlbGVtZW50RHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUgcHVsbC1sZWZ0IG1yMzAiPlBhcnRhZ2VyIGNldHRlIG9mZnJlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhcnRhZ2UgcHVsbC1sZWZ0IG1sNSIgZGF0YS11cmw9Imh0dHA6Ly93d3cuaW1tby1sYW5kLmZyLzU3OC0yLVBJRUNFUy1CQUxDT05TLVZVRS1QQU5PUkFNSVFVRS00NC1tMi5odG1sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImZhY2Vib29rIiBjbGFzcz0icnN2RHQiIGRhdGEtdXJsPSJodHRwOi8vd3d3LmltbW8tbGFuZC5mci81NzgtMi1QSUVDRVMtQkFMQ09OUy1WVUUtUEFOT1JBTUlRVUUtNDQtbTIuaHRtbCIgZGF0YS10aXRsZT0iICI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJ0d2l0dGVyIiBjbGFzcz0icnN2RHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzaGFyZSBpY29ucy1kdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9vcmlnaW5hbF9yZWZlcmVyPWh0dHA6Ly93d3cuaW1tby1sYW5kLmZyLzU3OC0yLVBJRUNFUy1CQUxDT05TLVZVRS1QQU5PUkFNSVFVRS00NC1tMi5odG1sJnJlZl9zcmM9dHdzcmNedGZ3JnRleHQ9dmVudGUgMiBQSUVDRVMgLyBCQUxDT05TIC8gVlVFIFBBTk9SQU1JUVVFIC8gNDQgbTImdHdfcD10d2VldGJ1dHRvbiZ1cmw9aHR0cDovL3d3dy5pbW1vLWxhbmQuZnIvNTc4LTItUElFQ0VTLUJBTENPTlMtVlVFLVBBTk9SQU1JUVVFLTQ0LW0yLmh0bWwiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY291bnQiPisxPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJnb29nbGVwbHVzIiBjbGFzcz0icnN2RHQiIGNsYXNzPSJtcjAiIGRhdGEtdXJsPSJodHRwOi8vd3d3LmltbW8tbGFuZC5mci81NzgtMi1QSUVDRVMtQkFMQ09OUy1WVUUtUEFOT1JBTUlRVUUtNDQtbTIuaHRtbCIgZGF0YS10aXRsZT0iICI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgZWxlbWVudER0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGhlbVRpdGxlIj5EZXNjcmlwdGlvbiBkZSBsJ29mZnJlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiI+RGFucyBiZWwgaW1tZXVibGUgYW5jaWVuIHBpZXJyZSBkZSB0YWlsbGUgZXQgYnJpcXVlcywgYmVsIGFwcGFydGVtZW50IGRpc3RyaWJ1w6kgc3VyIGJhbGNvbnMgY29tcHJlbmFudCB1biBzdXBlcmJlIHPDqWpvdXIgZCdhbmdsZSBhdmVjIHZ1ZSBkw6lnYWfDqWUsIHVuZSBjdWlzaW5lIMOpcXVpcMOpZSBzw6lwYXLDqWUsIHVuZSBjaGFtYnJlICwgdW5lIHNhbGxlIGQnZWF1IGF2ZWMgd2MuIFRyw6hzIGx1bWluZXV4IGV0IGVuc29sZWlsbMOpLCB2dWUgcGFub3JhbWlxdWUuIEEgdmlzaXRlciBzYW5zIHRhcmRlckNvbnRhY3QgcGVuZGFudCBsZSBjb25maW5lbWVudCA6ICBKb2UgQU1PWUFMIDA2IDE2IDU2IDU0IDk3PC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgZWxlbWVudER0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRoZW1UaXRsZSI+RGlhZ25vc3RpY3MgZGUgcGVyZm9ybWFuY2Ugw6luZXJnw6l0aXF1ZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZW5lcmd5IHJvdyB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtc20tNiBkcGUgbWIxMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2FkbWluL2RwZS5waHA/bGFuZz1mciZhbXA7aWRhbm49NTc4IiBhbHQ9IkRQRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS02IGdlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2FkbWluL2RwZS5waHA/dHlwZT1HRVMmYW1wO2xhbmc9ZnImYW1wO2lkYW5uPTU3OCIgYWx0PSJEUEUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBlbGVtZW50RHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUgbWIxMCI+RGVzY3JpcHRpZiBkdSBiaWVuPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGFCaWVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBpZD0iZGF0YVRpdGxlIiBjbGFzcz0ibmF2IG5hdi10YWJzIiByb2xlPSJ0YWJsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+PGEgaHJlZj0iI2luZm9zIj5Hw6luw6lyYWw8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiI+PGEgaHJlZj0iI2RldGFpbHMiPkTDqXRhaWxzICs8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiI+PGEgaHJlZj0iI2NvcHJvIj5Db3Byb3ByacOpdMOpPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSIiPjxhIGhyZWY9IiNpbmZvc2ZpIj5GaW5hbmNpZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZGF0YUNvbnRlbnQiIGNsYXNzPSJ0YWItY29udGVudCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSAgYWN0aXZlIGluIiBpZD0iaW5mb3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPkNvZGUgcG9zdGFsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc1MDEyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+U3VyZmFjZSBoYWJpdGFibGUgKG3Csik8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDQgbcKyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+Tm9tYnJlIGRlIGNoYW1icmUocyk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPk5vbWJyZSBkZSBwacOoY2VzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGVybUluZm9zIj5Bc2NlbnNldXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1VJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iZGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+TmIgZGUgc2FsbGUgZCdlYXU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPlR5cGUgZGUgY3Vpc2luZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFUVVJUEVFICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+TW9kZSBkZSBjaGF1ZmZhZ2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR0FaICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+VHlwZSBkZSBjaGF1ZmZhZ2UgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJBRElBVEVVUiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPkZvcm1hdCBkZSBjaGF1ZmZhZ2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09MTEVDVElGICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+QW5uw6llIGRlIGNvbnN0cnVjdGlvbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOTMwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iY29wcm8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPlF1b3RlIFBhcnQgYW5udWVsbGUgZGVzIGNoYXJnZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCDigqwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSAiIGlkPSJpbmZvc2ZpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGVybUluZm9zIj5Qcml4IGRlIHZlbnRlIGhvbm9yYWlyZXMgVFRDIGluY2x1czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0ODUgMDAwIOKCrCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPkNoYXJnZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjcwIOKCrCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGVsZW1lbnREdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRoZW1UaXRsZSI+Q2V0dGUgYW5ub25jZSB2b3VzIGludMOpcmVzc2UgPzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgY2xhc3M9ImZvcm0taG9yaXpvbnRhbCIgaWQ9Im15Rm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii81NzgtMi1QSUVDRVMtQkFMQ09OUy1WVUUtUEFOT1JBTUlRVUUtNDQtbTIuaHRtbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCAgY2xhc3M9ImNvbC1zbS01IGNvbnRyb2wtbGFiZWwiPlZvdHJlIG5vbSAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW25vbV0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlcXVpcmVkIG9uaW52YWxpZD0ic2V0Q3VzdG9tVmFsaWRpdHkoJ1ZldWlsbGV6IHJlbnNlaWduZXIgY2UgY2hhbXBzJykiIG9uaW5wdXQ9InNldEN1c3RvbVZhbGlkaXR5KCcnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXNtLTUgY29udHJvbC1sYWJlbCI+Vm90cmUgYWRyZXNzZSBtYWlsICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS03Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW2VtYWlsXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVxdWlyZWQgb25pbnZhbGlkPSJzZXRDdXN0b21WYWxpZGl0eSgnVmV1aWxsZXogcmVuc2VpZ25lciBjZSBjaGFtcHMnKSIgb25pbnB1dD0ic2V0Q3VzdG9tVmFsaWRpdHkoJycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgIGNsYXNzPSJjb2wtc20tNSBjb250cm9sLWxhYmVsIj5Wb3RyZSBUw6lsw6lwaG9uZSAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW3RlbF0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlcXVpcmVkIG9uaW52YWxpZD0ic2V0Q3VzdG9tVmFsaWRpdHkoJ1ZldWlsbGV6IHJlbnNlaWduZXIgY2UgY2hhbXBzJykiIG9uaW5wdXQ9InNldEN1c3RvbVZhbGlkaXR5KCcnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXNtLTUgY29udHJvbC1sYWJlbCI+Vm90cmUgdmlsbGUgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgICBwbGFjZWhvbGRlcj0iIiAgbmFtZT0iZGF0YVtDb250YWN0XVt2aWxsZV0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlcXVpcmVkIG9uaW52YWxpZD0ic2V0Q3VzdG9tVmFsaWRpdHkoJ1ZldWlsbGV6IHJlbnNlaWduZXIgY2UgY2hhbXBzJykiIG9uaW5wdXQ9InNldEN1c3RvbVZhbGlkaXR5KCcnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXNtLTUgY29udHJvbC1sYWJlbCI+Vm90cmUgbWVzc2FnZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0iZGF0YVtDb250YWN0XVttZXNzYWdlXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IiIgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkYXRhW2lkYmllbl1bXSIgdmFsdWU9IjU3OCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFzYnJ5dyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+CjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhc19keW5hIiBkYXRhLXdhaXQ9IjU5N2M5Y2Q3NzQxYjI4YWQ0Mjg3MWFmNWVjYjAwZDBlIiBkYXRhLW9yaWc9IjM3Mzc5NGUzODMzOGI3ZjFlYzQ4ZjRjNzEwZjRkMmY4IiBjbGFzcz0iYXNfZmllbGQgYXNfZmllbGQtMiAyIiB2YWx1ZT0iMzczNzk0ZTM4MzM4YjdmMWVjNDhmNGM3MTBmNGQyZjgiLz4KPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImFzX3N0YXQiIGNsYXNzPSJhc19maWVsZCBhc19maWVsZC0xIDEiIHZhbHVlPSIiLz4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJncGQtY2hlY2tib3giPgogICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJyZ3BkLWFncmVlbWVudCIgaWQ9InJncGQtYWdyZWVtZW50IiAvPgogICAgPGxhYmVsIGZvcj0icmdwZC1hZ3JlZW1lbnQiPkonYWNjZXB0ZSBsZXMgY29uZGl0aW9ucyBkJ3V0aWxpc2F0aW9uIGRlcyBkb25uw6llcyAoKik8L2xhYmVsPgo8L2Rpdj4KPHNjcmlwdD4KICAndXNlIHN0cmljdCc7CgogIChmdW5jdGlvbiAoKSB7CiAgICB2YXIgYWdyZWVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JncGQtYWdyZWVtZW50Jyk7CiAgICB2YXIgZm9ybSA9IGFncmVlbWVudC5jbG9zZXN0KCdmb3JtJyk7CiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBpZiAoIWFncmVlbWVudC5jaGVja2VkKSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICBhbGVydCgiVmV1aWxsZXogYWNjZXB0ZXIgbCd1dGlsaXNhdGlvbiBkZSB2b3MgZG9ubsOpZXMgcG91ciBjb250aW51ZXIuIik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9KTsKICB9KSgpOwo8L3NjcmlwdD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvYmxpZyI+KiBDaGFtcHMgb2JsaWdhdG9pcmVzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCI+RW52b3llcjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icmdwZC1sZWdhbHMiPiogOiBMZXMgaW5mb3JtYXRpb25zIHJlY3VlaWxsaWVzIHN1ciBjZSBmb3JtdWxhaXJlIHNvbnQgZW5yZWdpc3Ryw6llcyBkYW5zIHVuIGZpY2hpZXIgaW5mb3JtYXRpc8OpIHBhciBMYSBCb2l0ZSBJbW1vIHBvdXIgbGEgZ2VzdGlvbiBkZSBsYSBjbGllbnTDqGxlL3Byb3NwZWN0cyBkZSBBZ2VuY2UuCkVsbGVzIHNvbnQgY29uc2VydsOpZXMganVzcXUnw6AgZGVtYW5kZSBkZSBzdXBwcmVzc2lvbiBldCBzb250IGRlc3RpbsOpZXMgw6AgQWdlbmNlLgpDb25mb3Jtw6ltZW50IMOgIGxhIGxvaSDCqyBpbmZvcm1hdGlxdWUgZXQgbGliZXJ0w6lzIMK7LCB2b3VzIHBvdXZleiBleGVyY2VyIHZvdHJlIGRyb2l0IGQnYWNjw6hzIGF1eCBkb25uw6llcyB2b3VzIGNvbmNlcm5hbnQgZXQgbGVzIGZhaXJlIHJlY3RpZmllciBlbiBjb250YWN0YW50IEFnZW5jZS4KTm91cyB2b3VzIGluZm9ybW9ucyBkZSBs4oCZZXhpc3RlbmNlIGRlIGxhIGxpc3RlIGQnb3Bwb3NpdGlvbiBhdSBkw6ltYXJjaGFnZSB0w6lsw6lwaG9uaXF1ZSDCqyBCbG9jdGVsIMK7LCBzdXIgbGFxdWVsbGUgdm91cyBwb3V2ZXogdm91cyBpbnNjcmlyZSBpY2kgOiBodHRwczovL2NvbnNvLmJsb2N0ZWwuZnIvPC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBiaWdEYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmllblNpbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+YXV0cmVzIGFubm9uY2VzIGltbW9iaWxpw6hyZXMgY29ycmVzcG9uZGFudCDDoMKgIHZvdHJlIHJlY2hlcmNoZTwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+TGVzIGJpZW5zIHNpbWlsYWlyZXMgcG91ciA6IDxzcGFuIGNsYXNzPSJ1cHBlciI+VmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgKDc1MDEyKTwvc3Bhbj4gPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNhcm91c2VsU2ltIiBjbGFzcz0iY2Fyb3VzZWwgc2xpZGUiIGRhdGEtcmlkZT0iY2Fyb3VzZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImNhcm91c2VsLWlubmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaXRlbSBhY3RpdmUgbGlzdC1pbmxpbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZ1NpbSBsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS8xNTB4MTUwL2ltYWdlcy9ub19iaWVuLmpwZyIgd2lkdGg9IjE1MCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcml4U2ltIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0OTAgMDAwIOKCrCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm9zU2ltIGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlBhcmlzPC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj48aT5BcHBhcnRlbWVudDwvaT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYmxvY2stbGluayIgaHJlZj0iLzUzMC1Mb2Z0LTMtUGllY2VzLmh0bWwiPiA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nU2ltIGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tLzE1MHgxNTAvaW1hZ2VzL2JpZW5zLzEvZmYyN2ZmMTY2MmQ5MWUwMTgwMzI2MTRiMTFjZGEzZTUvb3JpZ2luYWwvcGhvdG9faW1wb3J0XzQ0ZmViNWMzNTlkOTAzZjFlMjFlMjVhMTBlNWY5NjMxLmpwZyIgd2lkdGg9IjE1MCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcml4U2ltIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0OTAgMDAwIOKCrCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm9zU2ltIGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlBhcmlzPC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj48aT5BdXRyZTwvaT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYmxvY2stbGluayIgaHJlZj0iLzUzMS1CRUwtQUlSLVBJQ1BVUy1MT0ZULTc3LW0tcHJlc3RpZ2UuaHRtbCI+IDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsZWZ0IGNhcm91c2VsLWNvbnRyb2wiIGhyZWY9IiNjYXJvdXNlbFNpbSIgZGF0YS1zbGlkZT0icHJldiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1mbGVjaGVnYXVjaGUgZnMtMTkiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0icmlnaHQgY2Fyb3VzZWwtY29udHJvbCIgaHJlZj0iI2Nhcm91c2VsU2ltIiBkYXRhLXNsaWRlPSJuZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWZsZWNoZWRyb2l0ZSBmcy0xOSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgDQogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXN0ZXJpeCBtdDEwIj4qIEZyYWlzIGQnYWdlbmNlIGluY2x1czwvcD4NCiAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj48IS0tIEZpbiBwcmluY2lwYWwgY29udGVudCAgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj48IS0tIEZpbiBjb250YWluZXIgIC0tPgogICAgICAgIAogICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9Imp1bWJvdHJvbiBiYW5kZWF1Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIGNvbC1sZy0xMiBpbm5lckNvbHVtbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gYmxvY2sgcGFyIGRlZmF1bHQgY2Fyb3VzZWwgY291cCBkZSBjb2V1ciAtLT4KICAgIAogICAgICAgIDxzZWN0aW9uIGNsYXNzPSJhbGxDQyI+CiAgICAgICAgICAgIA0KICAgIDxoMT4gTm90cmUgc8OpbGVjdGlvbiBkZSBjb3VwcyBkZSBjb2V1cjwvaDE+DQoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbGUtc2xpZGVDQyI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGVmdCBjYXJvdXNlbC1jb250cm9sIiBocmVmPSIjY2Fyb3VzZWxDQyIgZGF0YS1zbGlkZT0icHJldiI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tZmxlY2hlZ2F1Y2hlIGZzLTE5Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0icmlnaHQgY2Fyb3VzZWwtY29udHJvbCIgaHJlZj0iI2Nhcm91c2VsQ0MiIGRhdGEtc2xpZGU9Im5leHQiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWZsZWNoZWRyb2l0ZSBmcy0xOSI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0iY2Fyb3VzZWxDQyIgY2xhc3M9ImNhcm91c2VsIHNsaWRlIiBkYXRhLXJpZGU9ImNhcm91c2VsIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWlubmVyIj4KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Iml0ZW0gYWN0aXZlIGxpc3QtaW5saW5lIGNvdXBDb2V1ciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY29sLW1kLTQgY29sLXNtLTYgY29sLXhzLTEyIGJsb2NrQ0MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvNTc4LTItUElFQ0VTLUJBTENPTlMtVlVFLVBBTk9SQU1JUVVFLTQ0LW0yLmh0bWwiIGNsYXNzPSJpbWdDQyIgPjxpbWcgc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS8zMDB4MzAwL2ltYWdlcy9iaWVucy8xLzA5YzE0MmIyNzIzYWNmZmUzMjY2Mzk5OWYwZDlhNDZjL29yaWdpbmFsL3Bob3RvX2ltcG9ydF82ODBjNGI4ZDcxODQyYzA3M2UxNDlkYTI5M2VjNTQzMS5qcGciIHdpZHRoPSIzMDAiIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9IndlbGwgd2VsbC1zbSI+PGEgaHJlZj0iLzU3OC0yLVBJRUNFUy1CQUxDT05TLVZVRS1QQU5PUkFNSVFVRS00NC1tMi5odG1sIj5Wb2lyICs8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Q0MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVsbC1sZWZ0Ij5BcHBhcnRlbWVudDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWxsLXJpZ2h0Ij40ODUgMDAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RGFucyBiZWwgaW1tZXVibGUgYW5jaWVuIHBpZXJyZSBkZSB0YWlsbGUgZXQgYnJpcXVlcywgYmVsIGFwcGFydGVtZW50IGRpc3RyaWJ1w6kgc3VyIGJhbGNvbnMgY29tcHJlbmFudCB1biBzLi4uPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtMTIgYmxvY2tDQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii81NzYtQXBwYXJ0ZW1lbnQtNC1waWVjZS1zLTgzLTUxLW0yLmh0bWwiIGNsYXNzPSJpbWdDQyIgPjxpbWcgc3JjPSJodHRwOi8vaW1tb2xhbmQuc3RhdGljbGJpLmNvbS8zMDB4MzAwL2ltYWdlcy9iaWVucy8xL2Q1OWYwOTg5NTdhYThkZGQ4Mzk4NjkzMjA1MjU5MDlkL29yaWdpbmFsL3Bob3RvX2ltcG9ydF80NTBhMWYyYzk0ZTVjNzMwNmZjNzUzNzBmM2NlZDUzMi5qcGciIHdpZHRoPSIzMDAiIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9IndlbGwgd2VsbC1zbSI+PGEgaHJlZj0iLzU3Ni1BcHBhcnRlbWVudC00LXBpZWNlLXMtODMtNTEtbTIuaHRtbCI+Vm9pciArPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudENDIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1bGwtbGVmdCI+QXBwYXJ0ZW1lbnQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVsbC1yaWdodCI+Mjc1IDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkltbW8nTGFuZCB2b3VzIHByb3Bvc2UgZW4gZXhjbHVzaXZpdMOpLCBkYW5zIHVuZSByw6lzaWRlbmNlIHLDqWNlbnRlIGR1IGNlbnRyZSBkZSBDaGFtcGlnbnkgc3VyIE1hcm5lLCB1biBiZWF1Li4uPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtMTIgYmxvY2tDQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii81NzQtTUFJU09OLUxPRlQuaHRtbCIgY2xhc3M9ImltZ0NDIiA+PGltZyBzcmM9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tLzMwMHgzMDAvaW1hZ2VzL2JpZW5zLzEvZDllMTQ2OGNiOTY5Yzg1NTBkNjU1YmU3MGJiMTMyMDAvb3JpZ2luYWwvcGhvdG9faW1wb3J0XzJjZjliMjM3N2FkMjI2N2EzNDczN2U1OGQ0NjNiYjE5LmpwZyIgd2lkdGg9IjMwMCIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0id2VsbCB3ZWxsLXNtIj48YSBocmVmPSIvNTc0LU1BSVNPTi1MT0ZULmh0bWwiPlZvaXIgKzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnRDQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdWxsLWxlZnQiPkFwcGFydGVtZW50PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB1bGwtcmlnaHQiPjEgNjI1IDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkNvbW1lIHVuZSBtYWlzb24sIHN1cGVyYmUgbG9mdCBkaXN0cmlidcOpIGVuIMKrIFUgwrsgYXV0b3VyIGQndW4gamFyZGluIGF2ZWMgY3Vpc2luZSBvdXZlcnRlIHN1ciB0cmlwbGUgcsOpY2VwdC4uLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3NlY3Rpb24+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPSJpbmRleGF0aW9uRnRyIj4KICAgICAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICANCiAgICA8ZGl2IGNsYXNzPSJyb3cgdGl0bGVGdHIgbWIzMCI+DQogICAgICAgIDxzcGFuIGNsYXNzPSJib3JkZXIiPjwvc3Bhbj4NCiAgICAgICAgPGgxPk5vcyBhbm5vbmNlcyBzdXIgUGFyaXMsIGRhbnMgbGUgMTLDqG1lIGFycm9uZGlzc2VtZW50PC9oMT4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImJvcmRlciI+PC9zcGFuPg0KICAgIDwvZGl2Pg0KCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIDxkaXYgY2xhc3M9InJvdyBtYjIwIHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJsb2NrSW5kZXhhdGlvbiBjb2wtY2VudGVyZWQiPg0KICAgICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRpdGxlIj48YSBocmVmPSIvMC1hY2hldGVyLTM4MTg1LVBhcmlzIDEyLzEiID48c3Bhbj4gKyA8L3NwYW4+IDxwPmFjaGV0ZXIgdW4gYmllbiBpbW1vYmlsaWVyIMOgIFBhcmlzIDEyPC9wPjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPiA8YSBocmVmPSIvMC1hY2hldGVyLTM4MTg1LVBhcmlzIDEyLzItQXBwYXJ0ZW1lbnQvMSIgPjxzcGFuPiArIDwvc3Bhbj4gIDxwPkFwcGFydGVtZW50PC9wPjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJsb2NrSW5kZXhhdGlvbiBjb2wtY2VudGVyZWQiPg0KICAgICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRpdGxlIj48YSBocmVmPSIvMC1hY2hldGVyLTM4MTg1LVBhcmlzIDEyLzEiID48c3Bhbj4gKyA8L3NwYW4+IDxwPmFjaGV0ZXIgw6AgUGFyaXMgMTIsIHBhciBub21icmUgZGUgcGnDqGNlczwvcD48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4gPGEgaHJlZj0iLzAtYWNoZXRlci0zODE4NS1QYXJpcyAxMi8yLXBpZWNlcy8xIiA+PHNwYW4+ICsgPC9zcGFuPiAgPHA+MiBwacOoY2VzPC9wPjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPiA8YSBocmVmPSIvMC1hY2hldGVyLTM4MTg1LVBhcmlzIDEyLzMtcGllY2VzLzEiID48c3Bhbj4gKyA8L3NwYW4+ICA8cD4zIHBpw6hjZXM8L3A+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+IDxhIGhyZWY9Ii8wLWFjaGV0ZXItMzgxODUtUGFyaXMgMTIvNC1waWVjZXMvMSIgPjxzcGFuPiArIDwvc3Bhbj4gIDxwPjQgcGnDqGNlczwvcD48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCgogICAgICAgICAgICAgICAgICAgIDwvbmF2PgogICAgICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGZvb3Rlcj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imp1bWJvdHJvbiBtYWluRnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBjb2wtbGctNCBlbGVtZW50RnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlRnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJvcmRlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+U3VpdmV6IG5vdXMgc3VyPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJvcmRlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICA8ZGl2IGNsYXNzPSJjb250ZW50RnRyIj4NCiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0ltbW9MYW5kLTE1ODc5Njk0NzE1MTU2ODQvYXBwLzE1Mjc3OTk0NDc2OTg2My8iIGNsYXNzPSJsaW5rcnN2IiB0YXJnZXQ9Il9ibGFuayIgPjxzcGFuIGNsYXNzPSJpY29uLWZhY2Vib29rIGljb25zIj48L3NwYW4+PC9hPg0KICAgICAgICA8YSBocmVmPSJodHRwczovL3BsdXMuZ29vZ2xlLmNvbS8xMDE4NTU5OTQwNTUyNDk3NTc5ODQvdmlkZW9zIiBjbGFzcz0ibGlua3JzdiIgdGFyZ2V0PSJfYmxhbmsiID48c3BhbiBjbGFzcz0iaWNvbi1nb29nbGVwbHVzIGljb25zIj48L3NwYW4+PC9hPg0KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDM0RjRVhVQjRKckVVUzRZYzZvaFNtQSIgY2xhc3M9Imxpbmtyc3YiIHRhcmdldD0iX2JsYW5rIiA+PHNwYW4gY2xhc3M9Imljb24teW91dHViZSBpY29ucyI+PC9zcGFuPjwvYT4NCiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9pbW1vbGFuZHBhcmlzMTIiIGNsYXNzPSJsaW5rcnN2IiB0YXJnZXQ9Il9ibGFuayIgPjxzcGFuIGNsYXNzPSJpY29uLXR3aXR0ZXIgaWNvbnMiPjwvc3Bhbj48L2E+DQogICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuZGFpbHltb3Rpb24uY29tL0ltbW8tTGFuZCIgY2xhc3M9Imxpbmtyc3YiIHRhcmdldD0iX2JsYW5rIiA+PHNwYW4gY2xhc3M9Imljb24tZGFpbHltb3Rpb24gaWNvbnMiPjwvc3Bhbj48L2E+DQoNCg0KICAgIDwvZGl2Pg0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBjb2wtbGctNCBlbGVtZW50RnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlRnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJvcmRlciI+IDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPk5vdXMgc29tbWVzIGFkaMOpcmVudHM8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYm9yZGVyIj4gPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50RnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9mbmFpbS5wbmciIGNsYXNzPSJtcjIwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cDovL2ltbW9sYW5kLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2dhbGlhbi5wbmciIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGNvbC1sZy00IGVsZW1lbnRGdHIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGVGdHIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYm9yZGVyIj4gPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+U2UgY29ubmVjdGVyPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJvcmRlciI+IDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudEZ0ciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImVzcGFjZVBybyIgb25jbGljaz0id2luZG93Lm9wZW4oJy9hZG1pbi9lc3BhY2VfcHJvcHJpZXRhaXJlLnBocCcpOyByZXR1cm4gZmFsc2U7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWVzcGFjZXByb3ByaWV0YWlyZSBwdWxsLWxlZnQgbXI1Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFc3BhY2UgcHJvcHJpw6l0YWlyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imp1bWJvdHJvbiBsYXN0RnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJPGRpdiBjbGFzcz0iY29sLW1kLTQgIj4NCgkJPHA+JmNvcHk7IDIwMjAgfCBUb3VzIGRyb2l0cyByw6lzZXJ2w6lzIHwgVHJhZHVjdGlvbiBwb3dlcmVkIGJ5IEdvb2dsZSA8YnIvPg0KCQkJPGEgaHJlZj0iL3BsYW4tZHUtc2l0ZS5odG1sIiA+UGxhbiBkdSBzaXRlPC9hPg0KCQkJLSA8YSBocmVmPSIvaS9yZWRhYy9sZWdhbHMiID5NZW50aW9ucyBsw6lnYWxlczwvYT4NCgkJCS0gPGEgaHJlZj0iL0hPTk9SQUlSRVMucGRmIiB0YXJnZXQ9Il9ibGFuayIgPk5vcyBob25vcmFpcmVzPC9hPg0KCQkJLSA8YSBocmVmPSIvbm9zLWxpZW5zLmh0bWwiID5MaWVuczwvYT4gDQoJCQktIDxhIGhyZWY9Ii9hZG1pbi8iIHRhcmdldD0iX2JsYW5rIiA+QWRtaW48L2E+IA0KCQkJDQoJCQkJCQkJLSA8YSBocmVmPSIvdG91dGVzLW5vcy1hbm5vbmNlcy5odG1sIiA+VG91dGVzIG5vcyBhbm5vbmNlczwvYT4NCgkJCQkJPC9wPg0KCTwvZGl2Pg0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb25SZXNwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9yZXNwb25zaXZlLnBuZyIgY2xhc3M9ImltZ1Jlc3AiIGFsdD0iQ29tcGF0aWJsZSBtdWx0aSBTdXBwb3J0Ij48cCBjbGFzcz0iY29udGVudFJlc3AiPlNpdGUgaW50ZXJuZXQgY29tcGF0aWJsZSBtdWx0aS1zdXBwb3J0cyw8YnIvPnVuIHNldWwgc2l0ZSBhZGFwdGFibGUgw6AgdG91cyBsZXMgdHlwZXMgZCfDqWNyYW5zLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9pbW1vbGFuZC5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9sb2dvTEJJLnBuZyIgYWx0PSJMYSBib2l0ZSBpbW1vIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Zvb3Rlcj4KICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8c2NyaXB0IHNyYz0iLy9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS4xMC4xL2pxdWVyeS5taW4uanMiID48L3NjcmlwdD4KICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5dWkvMS4xMC4zL2pxdWVyeS11aS5taW4uanMiID48L3NjcmlwdD4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9qcy9idWlsZF9kZTRiMDI5N2JiZTRjNTI4ZDc1OGU2ZjZmYjVjZGRkNS5qcyIgPjwvc2NyaXB0PgogICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgIAogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICQoICIuYmFjayIgKS5jbGljayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciB1cmwgPSAiLy93d3cuaW1tby1sYW5kLmZyIjsKICAgICAgICAgICAgICAgICQobG9jYXRpb24pLmF0dHIoJ2hyZWYnLHVybCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgPC9zY3JpcHQ+CgogICAgICAgIAogICAgICAgICAKICAgICAgICAKICAgICAgICAgCiAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvYnVpbGRfdHJ5cHRpay50aGVtZS5qcyIgPjwvc2NyaXB0PiAKICAgIAogICAgICAgIAogICAgCiAgICAgICAgICA8IS0tIMOgIHV0aWxpc2VyIHNpIG9uIHZldXQgYWpvdXRlciB1biBmaWNoaWVyIGpzIHNww6ljaWZpcXVlIGF1IHNpdGUgLS0+ICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgCiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAkKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKCQoJyNtYXBiaWVuJykubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgJC5nZXRTY3JpcHQoJy9pL2pzb24vZ2V0TGJpbWFwc0xpYicsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkLmFqYXgoJy9pL2pzb24vZ2V0QXBpS2V5cz90eXBlPWRldGFpbCcpLmRvbmUoZnVuY3Rpb24gKGFwaUtleXMpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm92aWRlciA9ICdqYXdnJzsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbSA6IDE0ICwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluWm9vbSA6IDEyICwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFuQ29udHJvbCA6IDEgLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZUNvbnRyb2wgOiAxICwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbUNvbnRyb2wgOiAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyB9LCBtYXBPcHRpb25zLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hcENvbnRhaW5lcjogJyNtYXBiaWVuJywKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IGFwaUtleXNbcHJvdmlkZXJdLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogd2luZG93LmdldE1hcEJpZW4KICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgbGJpbWFwcy5jYWxsYmFjayhsYmltYXBzLnByb3ZpZGVyc1twcm92aWRlcl0pKG9wdGlvbnMpCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmdW5jdGlvbiBnZXRNYXBCaWVuKE1hcCkgewogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0NpcmNsZSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogeyBsYXQgOiA0OC44MzI2MTQ1NjEzMzggLCBsbmc6ICAyLjM5ODQ0NjIwMDk3MjggfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTUwMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiAnI0IzRDEwMCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VPcGFjaXR5OiAwLjgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXZWlnaHQ6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjQjNEMTAwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjM1CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIE1hcC5zZXRDZW50ZXIoTWFwLm1hcCwgeyBsYXQ6ICwgbG5nOiAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGVzID0gTWFwLmNyZWF0ZUNpcmNsZShvcHRpb25zQ2lyY2xlLmNlbnRlciwgb3B0aW9uc0NpcmNsZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hcC5hZGRNYXJrZXIoTWFwLm1hcCwgY2lyY2xlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZExpc3RlbmVycyhNYXApOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMoTWFwKXsKICAgICAgICAgICAgICBNYXAuc2V0TWluWm9vbShNYXAubWFwLCAxMik7CiAgICAgICAgICAgIH0KICAgICAgIAo8L3NjcmlwdD4gICAgICAgICAgICAKPHNjcmlwdD4KalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewogICAgICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLm9uKCdzdWJtaXQnLCAnZm9ybScsIGZ1bmN0aW9uKCl7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIG15Zm9ybSA9IGpRdWVyeSh0aGlzKTsKICAgICAgICAgICAgICAgIHZhciBhcyA9IGpRdWVyeSgnLmFzYnJ5dycsIG15Zm9ybSk7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYoYXMubGVuZ3RoKXsgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHZhciBkeW5hbWljID0galF1ZXJ5KCcuMicsIGFzKTsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudHZhbHVlID0gZHluYW1pYy52YWwoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ3ZhbHVlID0gZHluYW1pYy5hdHRyKCdkYXRhLW9yaWcnKTsKICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50dmFsdWUgPT09IG9yaWd2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2FpdGVkdmFsdWUgPSBkeW5hbWljLmF0dHIoJ2RhdGEtd2FpdCcpOwogICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljLnZhbCh3YWl0ZWR2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwo8L3NjcmlwdD4KCgogICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgCiAgICAgICAgCiAgICA8L2JvZHk+CjwvaHRtbD4=
    http_version: null
  recorded_at: Thu, 16 Apr 2020 09:27:39 GMT
- request:
    method: get
    uri: http://www.immo-land.fr/531-BEL-AIR-PICPUS-LOFT-77-m-prestige.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 09:27:39 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=mlfq6262hrhfdvheqgin9tiqup; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13359'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 09:27:39 GMT
- request:
    method: get
    uri: http://www.immo-land.fr/528-BEL-AIR-PICPUS-MURS-COMMERCIAUX-56-m-cave-21m.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 09:27:39 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=6a041re49lhqshndkij3mn7naq; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12442'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 09:27:39 GMT
- request:
    method: get
    uri: http://www.immo-land.fr/542-Style-loft-3-pieces-en-etage-eleve-63-m-Porte-Dor.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 09:27:39 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=obnct7i43e8994gr31qbq3l5lu; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13379'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 09:27:39 GMT
- request:
    method: get
    uri: http://www.immo-land.fr/575-MAISON-LOFT-prestige.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 09:27:39 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=firvd29ejfbkunl0teqmdse7sd; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13057'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 09:27:39 GMT
recorded_with: VCR 5.1.0
