---
http_interactions:
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/recherche.html?TypeAnnonceL=&TypeAnnonceV=1&TypeBien=&bdgMax=&bdgMin=&departement=75&district=&enlarge_search=&keywords=&lang=fr&nb_piece=&setLocDep=&shortterm=&surfMax=&surfMin=&tri=DATE&ville_dep=&villes=
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:04 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - RI_Filter_dep=75; expires=Fri, 10-Jul-2020 16:05:04 GMT; Max-Age=2592000;
        path=/; httponly
      - XSRF-TOKEN=eyJpdiI6IlJcL2d4enhucThGZEh4Qm1kaTVcLzNUdz09IiwidmFsdWUiOiI4WU9nMWRKWFc2bjd5TlRxVXFYZXcwc0tBNE5udzgyZ2VEeXNDdW4zWHZNVnFacG5oMGpcL3ZUcDVxcEt4WFZSRCIsIm1hYyI6Ijc2NjZkNDViODAwYTJkN2U5M2FhMTk2YzcyMzhhY2Y1ODM0MTk5MTJiNzJhY2Y3ZDNhYjdkNzBiZGNkZGJlYmUifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:04 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6IjJzR1BpaHlKT0lEVkk2T053VXpEWXc9PSIsInZhbHVlIjoielwvVDc3WjZjSm5hVWZkY3krd3pOaExCRFFEZ0JvZ0NScFJ2ZXNqKzIxVG9HODV6Z2paalNPQTFXRUVxY3lXQUEiLCJtYWMiOiI2NDVlZGQ3MThhMWJmMDMxZTgxMmQ3YzQxMzhiMzBiZDliZWNlMzk0NThlOGE1YjBiMjMwOTNjOTViZTUzMTE4In0%3D;
        expires=Wed, 10-Jun-2020 18:05:04 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '21019'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:04 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-maison-paris-16eme-2078810.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:05 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IlQremJENk54dll6VTROdm5pZUc1eHc9PSIsInZhbHVlIjoibnNXQ21odVJIQzkxQjJUalcwcmpuZW84clNNOHRDYW9BWDJvY0dGUnh0aWZBQWNIc2g5dmE5YXFWN1wvREk1ZDciLCJtYWMiOiI4ZjhkZGQ2MzhjOWUyYWYzZDAxMzJiMzBmMTU3MDA5ZTAxMDQzNTQzZTM2OWU2MWU1MTc5OGJmYjg4YzlmNmM4In0%3D;
        expires=Wed, 10-Jun-2020 18:05:05 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6Ikx3Q01cL2hhd0RZSmlOTWxZUThUU2pnPT0iLCJ2YWx1ZSI6InhucWswb2lRMWdLbE5hY1RUVTVaMW9Iam5JODlaTnROZW9ySEF2NG1TUnFDdG12OHIzc2JPUURjTTM1aVwvQ3ZFIiwibWFjIjoiMDJmZWJkMTNjYmYxOTU4Mjk4Yzc5YzZiNGNjZDczODhkZTg0MjUxNDIwMzJkZWRiODljNzZiOGNmZDdiZGI0MyJ9;
        expires=Wed, 10-Jun-2020 18:05:05 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13729'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:05 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-16eme-2139887.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:06 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IktndjdBVlRyMDV4dUtVd3VaOU11N0E9PSIsInZhbHVlIjoib0JiN05zUWlZSXByaVwvRUJvS01tWVdlSVN1dU1mZHh1MGJIVERaT3Rvd0lWTW02cU0yclE4YTVWNnV2ZmxHUTAiLCJtYWMiOiIwNWI0NTZmNTdlODIxMDIwZDNiOThjOWU0ZThlYjI4MzgwMjA1MTczOGMzY2Q0MjRhYzIxNDc5ZDVmM2ExYzVlIn0%3D;
        expires=Wed, 10-Jun-2020 18:05:06 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6IkVcL1luWE81Ymw5UlwvKzUzNXhuT2xNUT09IiwidmFsdWUiOiI5SEZGYnU3NytGcEt3dHpDem9nXC9vMDdrYmszUUVrMjFBWG0wallWYkpOR0l6WlJkRjBZZWJcL3RkYU9SK3dcLzVIIiwibWFjIjoiY2ZhMDI4MzFlNGE5MjU2MmVkZTU5N2M2MzAyNGY4MGY4MGRjODM5ZTdjOTI3NmU0ZDJmN2ZhYWE3MzU5Mjc1OCJ9;
        expires=Wed, 10-Jun-2020 18:05:06 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13560'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:06 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-16eme-2002725.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:06 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IlhXVXJvclAzNTU2Nk5mRFgxNTl5VlE9PSIsInZhbHVlIjoiNGFMdCtnUngwNVZHckhjQjZFZitBcDc5c2hLYjJWUW9sUjVkQ3R1Wllubkh4QzNoMzBOZmtwWHJLVDFqWHdhRiIsIm1hYyI6IjQ2NWYyNzdhNDk4YTkyMWVlMTMyMTA1M2JlOTM3YjY5ZDY3NGEzODUyZmJiOTY4NjY5NTI0NGFiYTc4MjJiODcifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:06 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6ImdBSWtTamdcL0NRTkRaakJiMXRtWWRnPT0iLCJ2YWx1ZSI6IkNTcWthK3ZUNE5SWmhZWGVsTnlwdkZpWFl4WURqQVQ1QUJlQk5KNEQ0RjNjR1JQWENSeExvSHZsUkxPRndpS0giLCJtYWMiOiJlZWQ5NWY4YmFhMTg1OWNjNzZkMTg4MjhlYTEwNmIxYzhhMzc4ZDc5ZDI1ODA3ZjBkYTRlMGU2NmJhMjM0ZjY1In0%3D;
        expires=Wed, 10-Jun-2020 18:05:06 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12319'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:06 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-16eme-2151664.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:07 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6Ijh4QzlJcE90cUUxMHZzZlBsSXRneVE9PSIsInZhbHVlIjoieVJ4RTBpZ1l3aGt6OXgxTzVlaWNBbWpvbUtNMmIzODdzcVlhV2pyRVwvRnhHK2l2U0FGblJnZldnTWhNdlRrbysiLCJtYWMiOiJjYzFlMGNlMzYwNjFiM2VkNGYwZTQ3MmUwN2ZkYzI3NDhiMTg1MzhlZGNkMWVhYmRiZDRiMjMyOWQyMDkzNzhhIn0%3D;
        expires=Wed, 10-Jun-2020 18:05:07 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6Ilk4MXBuNm1FcGlqaWVkTkZTMmxFNXc9PSIsInZhbHVlIjoiNXlHdTh1NkpJdXJQSkJLQkRzT3lTaGxlK29KR1QyTUZ2VUoyRlBcL3MwMHFuQTlKbHA2SXZGYW1GT21oNmY0VmgiLCJtYWMiOiIyMmYzNTE0MmM5NzE3MjA1ODAyYzYyM2MwZWNlODhiYTg5NDFjZWY1ZWI4NDU1YmY0YjJjODVjMjE1NjU1OWI2In0%3D;
        expires=Wed, 10-Jun-2020 18:05:07 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12341'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:07 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-16eme-2151244.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:08 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6InJsZTNuRVVsaE90NmxRbncxSVdEN2c9PSIsInZhbHVlIjoiU3NpUng0XC9EZjFzQ0d1cnZmOFpaZFR0N1ZmK3dHdnFycnppQ2FKQlZUNVhCVTlaZUxwRnJhbWhcLzNUTElsOUxIIiwibWFjIjoiYzE2ZjMyOGM1ZDA4OThjYzlhYmM4NTFiYzRiZDVhMGU5NjI2OWQ4OGY1ODBmYzI1ZWViMDAyMDEzZDgzMDE0MCJ9;
        expires=Wed, 10-Jun-2020 18:05:08 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6Ik50UlpVRHdwQnBjK2ZDUCthbE5vSkE9PSIsInZhbHVlIjoid2pFTFhVRldKQWE0akswajlJNG42YUoxMTRTTGk2K2REdms1ZnlvV08wZGllUGFLanJDbTF6UEZGUURMYlU1ViIsIm1hYyI6ImQ1YWY4ZTVjMWVjMWNiMjk1YzdkOTUwYzE4NDAyNGIyODgwYmU1OWY0NTBmMjc2Y2Q0YzhlYTg2NDhiZTc1MTEifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:08 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12342'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:08 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-16eme-2151246.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:09 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IkxGbFZoY1FqSjFCUHlhazFrMlNTc3c9PSIsInZhbHVlIjoiWVNLU2NLOTJnMW1pdkNFSmV5Y3BRQno4VFpDc2RMTWZPcW50QnJ6XC9ERWFndlwvdUI1U0djSDFIQlYxMUQrWFZYIiwibWFjIjoiMWZiOThkMzM2NmMyYWRkZTA0ZGU3ZDMwYzY5Mjk2ZGQ1NWE3MjRlZDBhNGI0NmU2NTQzZmE0NGU5YjkyMGU5MSJ9;
        expires=Wed, 10-Jun-2020 18:05:09 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6ImZEanIrYXpER1g1VEtNNkFHNDFERUE9PSIsInZhbHVlIjoidWFJZlRxdVBIelJRREVzYU5TUlJyT0ZKYkt4R3QyVkFMc0Q4Q1djRWRTcU1ORG5Ebkd5N24yQlFCd2FHK2NXOCIsIm1hYyI6IjRjNjQ0OWQ0OGE2MjRiZDZlZmRkYzJmZTc5Y2ZmM2U5MTJmMTc0YThjOTcwYWIxZDRhNzM0NmY1YzE1MjU3ZGMifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:09 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12287'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:09 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-16eme-2016936.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:10 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IlQ4N0c5bWxIZkZcL0NNYVg2Um9QSWFnPT0iLCJ2YWx1ZSI6IlpQaHVOcHV3MTU1UzdhSXRIMmQ3dzc1ZjNjUVJ1bmJqaEd5b3F5R05YbkZ2UmVHQks5Vkk0UTVsQ1FYTmc5QlAiLCJtYWMiOiJjZTE5NmUzN2E0NzJiMDI5YjFkNThlNmVjZGQ0MmRhZDFmNTQ3MjEyZDdmZjdjN2Q4NTE2MzkxMzA3MzM4NWMxIn0%3D;
        expires=Wed, 10-Jun-2020 18:05:10 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6IlRNTjV4XC9oZnJTYzh2cXppS0lZZHlRPT0iLCJ2YWx1ZSI6IjhGTnp3S09wWUVrQlBnbDExVUZcL2FhRytjMWZJQ3ZOMFlpSGNPQWZ3bU01SllwQnQxVURcL0JEQTk0K0VHUmZNZSIsIm1hYyI6IjQzZDBmNDE0OGIzODdjM2NkZDVjMWFjZDI5MGJlM2I3OTNhMDE1Yjg3YzdmMTFjY2ZjOGU0ZGY0NWYwZGM0OTcifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:10 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13192'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFkb2N0eXBlIGh0bWw+DQo8aHRtbCBsYW5nPSJmciI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCIgLz4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkFwcGFydGVtZW50LCBsdXhlIGV0IHByZXN0aWdlLCDDoCB2ZW5kcmUgw6AgUEFSSVMgMTZFTUUgLSBEQU5JRUwgRkVBVSBDT01NRVJDSUFMSVNBVElPTiAtIDIwMTY5MzYiPg0KICAgIDxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0iaW5kZXgsZm9sbG93LGFsbCI+DQogICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9ImJlbGxlIG1haXNvbiDDoCB2ZW5kcmUsIGltbW9iaWxpZXIgcHJlc3RpZ2UgY8O0dGUgYXp1ciwgZGVtZXVyZXMgZGUgcsOqdmUgYSBsb3VlciwgUsOpc2lkZW5jZXMgSW1tb2JpbGllciwgaW1tb2JpbGllciBjw7R0ZSBkIGF6dXIsIGFnZW5jZXMgaW1tb2JpbGnDqHJlcywgcHJvcHJpw6l0w6lzIMOgIHZlbmRyZSwgdmlsbGEsIGFwcGFydGVtZW50LCBtYXMsIGJhc3RpZGVzLCByw6lzaWRlbmNlcyBzZWNvbmRhaXJlcywgbG9mdCwgbWFpc29uIGNvbnRlbXBvcmFpbmUsIHZpbGxhIGQgYXJjaGl0ZWN0ZSwgcGVudGhvdXNlLCBkZW1ldXJlLCBjaMOidGVhdSwgdmlsbGEgc3VyIGxlIHRvaXQsIHRlcnJhaW4sIHBpc2NpbmUsIHZ1ZSBtZXIsIHBpZWRzIGRhbnMgbCBlYXUsIHRlcnJhc3NlLCBtYWdhemluZSwgcHJlc3NlIGltbW9iaWxpw6hyZSwgbcOpZGl0ZXJyYW7DqWUsIHByb3ZlbmNlLCBzdWQgZGUgbGEgZnJhbmNlLCBhbHBlcyBtYXJpdGltZXMsIHZhciwgbmljZSwgbWVudG9uLCBtb25hY28sIHNhaW50LXRyb3BleiwgYW50aWJlcywgY2FubmVzLCBzYWludCBwYXVsLCBhcnJpw6hyZSBwYXlzLCBsdXhlLCBjaGFybWUsIj4NCiAgICAgICAgPG1ldGEgbmFtZT0iY3NyZi10b2tlbiIgY29udGVudD0iYndwQjc5NlVBUHU4UUhSUDBPVnVDOUxPcmVJemIzeVZKdld3dEF4ZCI+DQoNCiAgICAgICAgPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvNzUvYW5ub25jZS12ZW50ZS1hcHBhcnRlbWVudC1wYXJpcy0xNmVtZS0yMDE2OTM2Lmh0bWwiPg0KICAgIA0KICAgIA0KICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJmYjphcHBfaWQiIGNvbnRlbnQ9IjE1NzgyNzkwMTM3ODA5OSIgLz4NCiAgICAgICAgICAgICAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9InByb2R1Y3QiIC8+DQogICAgICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvNzUvYW5ub25jZS12ZW50ZS1hcHBhcnRlbWVudC1wYXJpcy0xNmVtZS0yMDE2OTM2Lmh0bWwiIC8+DQogICAgICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIFBBUklTIDE2RU1FIC0gNCBwacOoY2VzIDkybcKyIiAvPg0KICAgICAgICAgICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlNpdHXDqSBhdSBkZXV4acOobWUgw6l0YWdlIGQmIzAzOTt1biBpbW1ldWJsZSBlbWJsw6ltYXRpcXVlIGRlcyBhbm7DqWVzIHRyZW50ZSwgYXBwYXJ0ZW1lbnQgZGUgOTIuNCBtwrIgYWNjZXNzaWJsZSBwYXIgbGUgbWFqZXN0dWV1eCBoYWxsIGQmIzAzOTtlbnRyw6llLiBJbCBzZSBjb21wb3NlIGQmIzAzOTt1bmUgZW50csOpZSwgZCYjMDM5O3VuIHNhbG9uL3NhbGxlIMOgIG1hbmdlciBhdmVjIGN1aXNpbmUgb3V2ZXJ0ZSwgZCYjMDM5O3VuZSBjaGFtYnJlIHBhcmVudGFsZSBhdmVjIHNhbGxlIGRlIGRvdWNoZSBlbiBzdWl0ZSwgZCYjMDM5O3VuZSBhdXRyZSBjaGFtYnJlIGV0IGQmIzAzOTt1bmUgc2FsbGUgZGUgYmFpbnMuIA0KTCYjMDM5O2Vuc2VtYmxlIGRlcyBwcm9wcmnDqXRhaXJlcyBiw6luw6lmaWNpZSBkJiMwMzk7dW4gc2VydmljZSBkZSBjb25jaWVyZ2VyaWUgZXQgZGUgbm9tYnJldXggZXNwYWNlcyBjb21tdW5zIGFtw6luYWfDqXMgOiB1bmUgc2FsbGUgZGUgc3BvcnQsIHVuIGVzcGFjZSBkZSByw6ljZXB0aW9uIHByaXZhdGlzYWJsZSwgdW4gbG9jYWwgYnJpY29sYWdlIGV0IHVuZSBjaGFtYnJlIHByaXZhdGlzYWJsZS4gIiAvPg0KICAgICAgICAgICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vbWVkaWFzLnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vcGljdC9mNjAweDQwMC8yLzMvMy8wL2V4dF8wXzIzMzAzMzEuanBnIiAvPg0KICAgICAgICAgICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6d2lkdGgiIGNvbnRlbnQ9IjYwMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmhlaWdodCIgY29udGVudD0iNDAwIiAvPg0KICAgICAgICAgICAgDQogICAgPHRpdGxlPkFwcGFydGVtZW50LCBsdXhlIGV0IHByZXN0aWdlLCDDoCB2ZW5kcmUgUEFSSVMgMTZFTUUgLSA0IHBpw6hjZXMgOTJtwrIgLSAyMDE2OTM2PC90aXRsZT4NCg0KICAgIDxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vbGQranNvbiI+DQogICAgew0KICAgICJAY29udGV4dCI6ICJodHRwczovL3NjaGVtYS5vcmciLA0KICAgICJAdHlwZSI6ICJPcmdhbml6YXRpb24iLA0KICAgICJ1cmwiOiAiaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbSIsDQogICAgImxvZ28iOiAiaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9pbWFnZXMvbG9nb3MvTG9nby1HcmlzLTI5OC5wbmciDQogICAgfQ0KICAgIDwvc2NyaXB0Pg0KDQogICAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9tYWluLm1pbi5jc3M/aWQ9Zjc1MDM5OGI0MWFiMjc2YTZmMjQiPg0KICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2Nzcy9saWJzL3NsaWNrLmNzcz9pZD1mMzhiMmRiMTBlMDFiMTU3MjczMiIvPg0KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vY3NzL2ZvbnRhd2Vzb21lLWFsbC5jc3MiLz4NCiAgICA8c3R5bGU+DQogICAgICAgIA0KICAgICAgICBib2R5IHsNCiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDAgIWltcG9ydGFudDsNCiAgICAgICAgfQ0KICAgIDwvc3R5bGU+DQoNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgIDxzY3JpcHQgc3JjPSIvL3N0YXRpYy5jcml0ZW8ubmV0L2pzL2xkL2xkLmpzIiBhc3luYz0iYXN5bmMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0Pg0KICAgICAgICAgICAgLypvbmx5IGZpcnN0IHRoZSAzIGFyZSBzYXZlZCovDQogICAgICAgICAgICB3aW5kb3cuY3JpdGVvX3EgPSB3aW5kb3cuY3JpdGVvX3EgfHwgW107DQogICAgICAgICAgICB3aW5kb3cuY3JpdGVvX3EucHVzaCh7CiAgICAiZXZlbnQiOiAic2V0QWNjb3VudCIsCiAgICAiYWNjb3VudCI6IDE2MjgyCn0sewogICAgImV2ZW50IjogInNldFNpdGVUeXBlIiwKICAgICJ0eXBlIjogImQiCn0sewogICAgImV2ZW50IjogInZpZXdJdGVtIiwKICAgICJpdGVtIjogMjAxNjkzNgp9KTsNCiAgICAgICAgPC9zY3JpcHQ+DQogICAgDQogICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgICAgIC8vIFRyb3ZpdCBwaXhlbCBjb252ZXJzaW9uDQogICAgICAgICAgICAoZnVuY3Rpb24oaSxzLG8sZyxyLGEsbSl7aVsnVHJvdml0QW5hbHl0aWNzT2JqZWN0J109cjtpW3JdPWlbcl18fGZ1bmN0aW9uKCl7DQogICAgICAgICAgICAoaVtyXS5xPWlbcl0ucXx8W10pLnB1c2goYXJndW1lbnRzKX0saVtyXS5sPTEqbmV3IERhdGUoKTthPXMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgIG09cy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTthLmFzeW5jPTE7YS5zcmM9ZzttLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbSkNCiAgICAgICAgICAgIH0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnaHR0cHM6Ly9hbmFseXRpY3MudHJvdml0LmNvbS90cm92aXQtYW5hbHl0aWNzLmpzJywndGEnKTsNCg0KICAgICAgICAgICAgdGEoJ2luaXQnLCAnZnInLCAxLCAnZGZiMzNjMjJkZTZhMjM2ODQ1ODYwOWFmNjlkNjFkYjMnKTsNCiAgICAgICAgICAgIDwvc2NyaXB0Pg0KICAgIA0KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2pzL2xhbmcvZnIuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQ+DQogICAgICAgIC8vIFBvbHlmaWxsIGFkZEV2ZW50TGlzdGVuZXIgSUU4IG91IG1vaW5zDQogICAgICAgIGlmICghZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAmJiBkb2N1bWVudC5hdHRhY2hFdmVudCkgew0KICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIHsNCiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSAoZXZlbnROYW1lID09PSAnRE9NQ29udGVudExvYWRlZCcpID8gJ29ubG9hZCcgOiBldmVudE5hbWU7DQogICAgICAgICAgICAgICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoZXZlbnROYW1lLCBjYWxsYmFjayk7DQogICAgICAgICAgICB9Ow0KICAgICAgICB9DQoNCiAgICAgICAgLy8gRm9uY3Rpb24gaW5kaXNwZW5zYWJsZSDDoCBjaGFyZ2VyIGF1IHBsdXMgdml0ZQ0KICAgICAgICBmdW5jdGlvbiBpbWdGYWxsYmFjayhpbWcsIGlkQW5ub25jZSkgew0KICAgICAgICAgICAgaWYgKGlkQW5ub25jZSkgew0KICAgICAgICAgICAgICAgIHdpbmRvdy5zbWNQaG90b0Vycm9ycyA9IHdpbmRvdy5zbWNQaG90b0Vycm9ycyA/IHdpbmRvdy5zbWNQaG90b0Vycm9ycyA6IHt9Ow0KDQogICAgICAgICAgICAgICAgaWYgKCF3aW5kb3cuc21jUGhvdG9FcnJvcnNbaW1nLnNyY10pIHsNCiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNtY1Bob3RvRXJyb3JzW2ltZy5zcmNdID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgJ2lkQW5ub25jZSc6IGlkQW5ub25jZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICdzcmMnOiBpbWcuc3JjDQogICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSBudWxsOw0KICAgICAgICAgICAgaW1nLnNyYyA9ICcvaW1hZ2VzL3Bob3RvX3JlbXBsYWNlLmpwZyc7DQogICAgICAgIH0NCiAgICA8L3NjcmlwdD4NCiAgICA8c2NyaXB0Pg0KICAgICAgICAhZnVuY3Rpb24oZixiLGUsdixuLHQscykNCiAgICAgICAge2lmKGYuZmJxKXJldHVybjtuPWYuZmJxPWZ1bmN0aW9uKCl7bi5jYWxsTWV0aG9kPw0KICAgICAgICAgICAgbi5jYWxsTWV0aG9kLmFwcGx5KG4sYXJndW1lbnRzKTpuLnF1ZXVlLnB1c2goYXJndW1lbnRzKX07DQogICAgICAgICAgICBpZighZi5fZmJxKWYuX2ZicT1uO24ucHVzaD1uO24ubG9hZGVkPSEwO24udmVyc2lvbj0nMi4wJzsNCiAgICAgICAgICAgIG4ucXVldWU9W107dD1iLmNyZWF0ZUVsZW1lbnQoZSk7dC5hc3luYz0hMDsNCiAgICAgICAgICAgIHQuc3JjPXY7cz1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpWzBdOw0KICAgICAgICAgICAgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LHMpfSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsDQogICAgICAgICAgICAnaHR0cHM6Ly9jb25uZWN0LmZhY2Vib29rLm5ldC9lbl9VUy9mYmV2ZW50cy5qcycpOw0KICAgICAgICBmYnEoJ2luaXQnLCAnMzQ0NDExMDQ5NDc0NDI0Jyk7DQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICBmYnEoJ3RyYWNrJywgJ1ZpZXdDb250ZW50Jyk7DQogICAgPC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0Pg0KICAgICAgICB2YXIgZ2FKc0hvc3QgPSAoKCJodHRwczoiID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sKSA/ICJodHRwczovL3NzbC4iIDogImh0dHA6Ly93d3cuIik7DQogICAgICAgIGRvY3VtZW50LndyaXRlKCc8c2NyJyArICdpcHQgc3JjPSInICsgZ2FKc0hvc3QgKyAnZ29vZ2xlLWFuYWx5dGljcy5jb20vZ2EuanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3InICsgJ2lwdD4nKTsNCiAgICA8L3NjcmlwdD4NCiAgICA8c2NyaXB0Pg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgdmFyIHBhZ2VUcmFja2VyID0gX2dhdC5fZ2V0VHJhY2tlcigiVUEtMTI4MzY4NTItMSIpOw0KICAgICAgICAgICAgcGFnZVRyYWNrZXIuX3RyYWNrUGFnZXZpZXcoKTsNCiAgICAgICAgfSBjYXRjaChlcnIpIHt9DQogICAgPC9zY3JpcHQ+DQoNCjwvaGVhZD4NCg0KPGJvZHkgY2xhc3M9ImZpY2hlLWFubm9uY2UiPg0KDQogICAgPGRpdiBpZD0iZmItcm9vdCI+PC9kaXY+DQogICAgPHNjcmlwdD4oZnVuY3Rpb24oZCwgcywgaWQpIHsNCiAgICB2YXIganMsIGZqcyA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF07DQogICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSByZXR1cm47DQogICAganMgPSBkLmNyZWF0ZUVsZW1lbnQocyk7IGpzLmlkID0gaWQ7DQogICAganMuc3JjID0gImh0dHBzOi8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fVVMvc2RrLmpzI3hmYm1sPTEmdmVyc2lvbj12My4wIjsNCiAgICBmanMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIGZqcyk7DQogICAgfShkb2N1bWVudCwgJ3NjcmlwdCcsICdmYWNlYm9vay1qc3NkaycpKTs8L3NjcmlwdD4NCg0KICAgIDxoZWFkZXI+DQogICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1saWdodCI+DQogICAgICAgIA0KICAgICAgICA8ZGl2IGNsYXNzPSJkLW1kLW5vbmUiPg0KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibmF2YmFyLXRvZ2dsZXIiIHR5cGU9ImJ1dHRvbiIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI25hdmJhck5hdkFsdE1hcmt1cCINCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0ibmF2YmFyTmF2QWx0TWFya3VwIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1sYWJlbD0iVG9nZ2xlIG5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgIDxpbWcgYWx0PSJtZW51QnVyZ2VyIiBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2ljb25zL05hdi9NZW51V2hpdGUuc3ZnIj4NCiAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICANCiAgICAgICAgPGRpdiBjbGFzcz0iZC1ub25lIGQtbWQtYmxvY2sgbWVudURlc2t0b3AiPg0KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibmF2YmFyLXRvZ2dsZXIgYnRuTWVudSIgdHlwZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjbmF2YmFyTmF2QWx0TWFya3VwIg0KICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJuYXZiYXJOYXZBbHRNYXJrdXAiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWxhYmVsPSJUb2dnbGUgbmF2aWdhdGlvbiI+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImQtbm9uZSBkLW1kLWlubGluZS1ibG9jayI+PGkgY2xhc3M9InJpIHJpLWJhcnMgbXItMiI+PC9pPk1lbnU8L3NwYW4+DQogICAgICAgICAgICA8L2J1dHRvbj4NCg0KICAgICAgICAgICAgPGEgaWQ9ImhlYWRlclBvbHltb3JwaFRvcExlZnRMaW5rIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2FsZXJ0ZS1tYWlsLmh0bWwiPg0KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im5hdmJhci10b2dnbGVyICIgdHlwZT0iYnV0dG9uIj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImQtbm9uZSBkLWxnLWlubGluZS1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9pY29ucy9OYXYvTm90aWZXaGl0ZS5zdmciPkNyw6llciB1bmUgYWxlcnRlDQogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgIDwvYT4NCg0KICAgICAgICAgICAgPCEtLTxhIGlkPSJoZWFkZXJQb2x5bW9ycGhUb3BMZWZ0TGluayIgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9lc3RpbWF0aW9uLWltbW9iaWxpZXJlLmh0bWwiPg0KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im5hdmJhci10b2dnbGVyICBtbC0zIiB0eXBlPSJidXR0b24iPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZC1ub25lIGQtbGctaW5saW5lLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2ljb25zL2VzdGltYXRpb24uc3ZnIj5Fc3RpbWF0aW9uIGltbW9iaWxpw6hyZQ0KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICA8L2E+LS0+DQoNCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgDQoNCiAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mciI+PGltZyBhbHQ9ImxvZ29SSSIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9sb2dvcy9Mb2dvLVdoaXRlLnBuZyI+PC9hPg0KDQogICAgICAgIDxkaXY+DQogICAgICAgICAgICA8YSBocmVmPSJtYWlsdG86Y29udGFjdEByZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tIiBjbGFzcz0ibXItMyBzZWxlY3Rpb24taGVhZCI+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2ljb25zL01haWwtV2hpdGUuc3ZnIiBhbHQ9Ik1haWwiIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvbWEtc2VsZWN0aW9uLmh0bWwiIGNsYXNzPSJtci0zIHNlbGVjdGlvbi1oZWFkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS1oZWFydCIgaWQ9InNlbGVjdGlvbi1oZWFkLWljb24iPjwvaT4gDQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJ0b3RhbF9hbm5vbmNlc19mYXZvcmlzIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJzZWxlY3Rpb24taGVhZC1sYWJlbCI+PC9zcGFuPg0KICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9wcm9maWwuaHRtbCI+DQogICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLXVzZXIgbXItMyI+PC9pPg0KICAgICAgICAgICAgPC9hPg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93biBmbG9hdC1yaWdodCBkLW5vbmUgZC1tZC1ibG9jayI+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5IGRyb3Bkb3duLXRvZ2dsZSBzZWxlY3RMYW5nIiBocmVmPSIjIiByb2xlPSJidXR0b24iIGlkPSJkcm9wZG93bk1lbnVMaW5rIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4NCiAgICAgICAgICAgICAgICAgICAgZnINCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IiBhcmlhLWxhYmVsbGVkYnk9ImRyb3Bkb3duTWVudUxpbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9lbiI+RU48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KDQogICAgPC9uYXY+DQoNCiAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2UiIGlkPSJuYXZiYXJOYXZBbHRNYXJrdXAiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLW5hdiI+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1pdGVtIG5hdi1saW5rIG10LTUgIg0KICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tIj5SZWNoZXJjaGVyIHVuIGJpZW48L2E+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1pdGVtIG5hdi1saW5rICINCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hZ2VuY2VzLWltbW9iaWxpZXJlcy1wcmVzdGlnZS0xLmh0bWwiPg0KICAgICAgICAgICAgICAgICAgICBMZXMgYWdlbmNlczwvYT4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWl0ZW0gbmF2LWxpbmsgIg0KICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2Fubm9uY2VzLmh0bWwiPmFwcGFydGVtZW50cyBldCB2aWxsYXMgw6AgdmVuZHJlPC9hPg0KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtaXRlbSBuYXYtbGluayAiDQogICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvbWFnYXppbmUtaW1tb2JpbGllciI+TGUgTWFnYXppbmU8L2E+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1pdGVtIG5hdi1saW5rIiB0YXJnZXQ9Il9CbGFuayINCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1sdXh1cnlyZW50YWxzLmNvbS9mciI+TG9jYXRpb25zIHNhaXNvbm5pw6hyZXMgZGUgcHJlc3RpZ2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWl0ZW0gbmF2LWxpbmsgZC1ibG9jayBkLXhzLWJsb2NrIGQtc20tbm9uZSBkLW1kLW5vbmUgZC1sZy1ub25lIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2VuIj5BbmdsYWlzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudU1vYmlsZUJvdHRvbSI+DQogICAgICAgICAgICAgICAgPGltZyBhbHQ9InNlcGFyYXRvciIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9pY29ucy9OYXYvQ2FycmUtRGl2aWRlci5zdmciPg0KICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX0JMQU5LIiBocmVmPSJodHRwczovL3NlY3VyZS5zbWMtZnJhbmNlLmNvbS9jbGllbnRzL2xvZ2luX3JpLmFzcCI+TW9uIGVzcGFjZSBwcm9mZXNzaW9ubmVsPC9hPg0KICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICA8aW1nIGFsdD0ic2VwYXJhdG9yIiBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2ljb25zL05hdi9DYXJyZS1EaXZpZGVyLnN2ZyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0ibWFpbHRvOmNvbnRhY3RAcmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbSI+Tm91cyBjb250YWN0ZXI8L2E+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQo8L2hlYWRlcj4NCg0KICAgIA0KDQoNCiAgICANCiAgICAgICAgICANCiAgICAgICAgPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTt6LWluZGV4OjEwOyI+ICANCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tbGcgYnRuLXJpIHRleHQtbGVmdCBidG4tdmlzaXRlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIubW9kYWwtdmlzaXRlLXhsIj4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLXBsYXkgbXItc20tMiBmbG9hdC1sZWZ0Ij48L2k+DQogICAgICAgICAgICAgICAgICAgIFZpZMOpbyBkZSBsJiMwMzk7YW5ub25jZQ0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWNvdXZlcnR1cmVzIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF8wXzIzMzAzMzEuanBnIg0KICAgICAgICAgICAgICAgIGFsdD0iQ291dmVydHVyZSI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF8xXzIzMzAzMzEuanBnIg0KICAgICAgICAgICAgICAgIGFsdD0iQ291dmVydHVyZSI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF8yXzIzMzAzMzEuanBnIg0KICAgICAgICAgICAgICAgIGFsdD0iQ291dmVydHVyZSI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF8zXzIzMzAzMzEuanBnIg0KICAgICAgICAgICAgICAgIGFsdD0iQ291dmVydHVyZSI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF80XzIzMzAzMzEuanBnIg0KICAgICAgICAgICAgICAgIGFsdD0iQ291dmVydHVyZSI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF81XzIzMzAzMzEuanBnIg0KICAgICAgICAgICAgICAgIGFsdD0iQ291dmVydHVyZSI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF82XzIzMzAzMzEuanBnIg0KICAgICAgICAgICAgICAgIGFsdD0iQ291dmVydHVyZSI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIHAtMCBidC1pbnRlcmlldXJlIiBpZD0iYXBwIj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIG1vZGFsLWRvc3NpZXIiIGlkPSJtb2RhbERlbWFuZGVEb3NzaWVyMjAxNjkzNiIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIA0KICAgIGFyaWEtbGFiZWxsZWRieT0ibW9kYWxEZW1hbmRlRG9zc2llckxhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCBtb2RhbC1yaSIgDQogICAgICAgIHJvbGU9ImRvY3VtZW50Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUgdGV4dC11cHBlcmNhc2UiIA0KICAgICAgICAgICAgICAgICAgICBpZD0ibW9kYWxEZW1hbmRlRG9zc2llckxhYmVsIj5SZWNldm9pciBsZSBkb3NzaWVyIGNvbXBsZXQ8L2g1Pg0KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UgY2xvc2UtY29udGFjdCIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgDQogICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDxjb250YWN0LWZvcm0gOm9iamV0LXBhci1kZWZhdXQ9Iidkb3NzaWVyJyINCiAgICAgICAgICAgICAgICAgICAgOmFmZmljaGVyLW9iamV0LWRlbWFuZGU9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOmVudm9pLWF1dG9tYXRpcXVlPSInMCciDQogICAgICAgICAgICAgICAgICAgIDpkZW1hbmRlLWV4cHJlc3MtZGVzYWN0aXZlZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6cmVmZXJlbmNlPSInMzMwNjY2MiciDQogICAgICAgICAgICAgICAgICAgIDppZC1hZ2VuY2U9Iic2ODM1JyINCiAgICAgICAgICAgICAgICAgICAgOmlkLWFubm9uY2U9IicyMDE2OTM2JyINCiAgICAgICAgICAgICAgICAgICAgOnRlbGVwaG9uZS1vYmxpZ2F0b2lyZS1hbm5vbmNlPSInMCciDQogICAgICAgICAgICAgICAgICAgIDpub20tdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6cHJlbm9tLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOnBheXMtdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6dGVsZXBob25lLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOmVtYWlsLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOmxhbmd1ZT0iJ2ZyJyINCiAgICAgICAgICAgICAgICAgICAgOmhvcml6b250YWw9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOmFmZmljaGVyLW1vZGFsPSInMCciPjwvY29udGFjdC1mb3JtPg0KICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgIDxzbWFsbCBpZD0iZm9ybXVsYWlyZUNvbmZpZGVudGlhbGl0ZSIgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4NCiAgICAgICAgICAgICAgICAgICAgQ29uc3VsdGVyIG5vdHJlIDxhIHRhcmdldD0iYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvdmllLXByaXZlZS5odG1sIiB0aXRsZT0idmllIHByaXbDqWUiPnBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpPC9hPi4NCiAgICAgICAgICAgICAgICA8L3NtYWxsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIG1vZGFsLXJkdiIgaWQ9Im1vZGFsRGVtYW5kZVJlbmRlelZvdXMyMDE2OTM2IiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyINCiAgICBhcmlhLWxhYmVsbGVkYnk9Im1vZGFsRGVtYW5kZVJlbmRlelZvdXNMYWJlbCIgYXJpYS1oaWRkZW49InRydWUiPg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtcmkiIHJvbGU9ImRvY3VtZW50Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUgdGV4dC11cHBlcmNhc2UiIA0KICAgICAgICAgICAgICAgICAgICBpZD0ibW9kYWxEZW1hbmRlUmVuZGV6Vm91c0xhYmVsIj5PYnRlbmlyIHVuIHJlbmRlei12b3VzPC9oNT4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIGNsb3NlLWNvbnRhY3QiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIA0KICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4NCiAgICAgICAgICAgICAgICA8Y29udGFjdC1mb3JtIDpvYmpldC1wYXItZGVmYXV0PSIncmR2JyINCiAgICAgICAgICAgICAgICAgICAgOmVudm9pLWF1dG9tYXRpcXVlPSInMCciDQogICAgICAgICAgICAgICAgICAgIDpkZW1hbmRlLWV4cHJlc3MtZGVzYWN0aXZlZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6YWZmaWNoZXItb2JqZXQtZGVtYW5kZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6cmVmZXJlbmNlPSInMzMwNjY2MiciDQogICAgICAgICAgICAgICAgICAgIDppZC1hZ2VuY2U9Iic2ODM1JyINCiAgICAgICAgICAgICAgICAgICAgOmlkLWFubm9uY2U9IicyMDE2OTM2JyINCiAgICAgICAgICAgICAgICAgICAgOnRlbGVwaG9uZS1vYmxpZ2F0b2lyZS1hbm5vbmNlPSInMCciDQogICAgICAgICAgICAgICAgICAgIDpub20tdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6cHJlbm9tLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOnBheXMtdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6dGVsZXBob25lLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOmVtYWlsLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOmxhbmd1ZT0iJ2ZyJyINCiAgICAgICAgICAgICAgICAgICAgOmhvcml6b250YWw9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOmFmZmljaGVyLW1vZGFsPSInMCciPjwvY29udGFjdC1mb3JtPg0KICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgIDxzbWFsbCBpZD0iZm9ybXVsYWlyZUNvbmZpZGVudGlhbGl0ZSIgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4NCiAgICAgICAgICAgICAgICAgICAgQ29uc3VsdGVyIG5vdHJlIDxhIHRhcmdldD0iYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvdmllLXByaXZlZS5odG1sIiB0aXRsZT0idmllIHByaXbDqWUiPnBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpPC9hPi4NCiAgICAgICAgICAgICAgICA8L3NtYWxsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIG1vZGFsLXJhcHBlbCIgaWQ9Im1vZGFsRGVtYW5kZVJhcHBlbDIwMTY5MzYiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIg0KICAgIGFyaWEtbGFiZWxsZWRieT0ibW9kYWxEZW1hbmRlUmFwcGVsTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsLXJpIiByb2xlPSJkb2N1bWVudCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIHRleHQtdXBwZXJjYXNlIiANCiAgICAgICAgICAgICAgICAgICAgaWQ9Im1vZGFsRGVtYW5kZVJhcHBlbExhYmVsIj7DinRyZSBhcHBlbMOpIGF1IHBsdXMgdml0ZTwvaDU+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSBjbG9zZS1jb250YWN0IiBkYXRhLWRpc21pc3M9Im1vZGFsIiANCiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPGNvbnRhY3QtZm9ybSA6b2JqZXQtcGFyLWRlZmF1dD0iJ3JhcHBlbCciDQogICAgICAgICAgICAgICAgICAgIDplbnZvaS1hdXRvbWF0aXF1ZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6ZGVtYW5kZS1leHByZXNzLWRlc2FjdGl2ZWU9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOmFmZmljaGVyLW9iamV0LWRlbWFuZGU9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOnJlZmVyZW5jZT0iJzMzMDY2NjInIg0KICAgICAgICAgICAgICAgICAgICA6aWQtYWdlbmNlPSInNjgzNSciDQogICAgICAgICAgICAgICAgICAgIDppZC1hbm5vbmNlPSInMjAxNjkzNiciDQogICAgICAgICAgICAgICAgICAgIDp0ZWxlcGhvbmUtb2JsaWdhdG9pcmUtYW5ub25jZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6bm9tLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOnByZW5vbS11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDpwYXlzLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOnRlbGVwaG9uZS11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDplbWFpbC11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDpsYW5ndWU9IidmciciDQogICAgICAgICAgICAgICAgICAgIDpob3Jpem9udGFsPSInMCciDQogICAgICAgICAgICAgICAgICAgIDphZmZpY2hlci1tb2RhbD0iJzAnIj48L2NvbnRhY3QtZm9ybT4NCiAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICA8c21hbGwgaWQ9ImZvcm11bGFpcmVDb25maWRlbnRpYWxpdGUiIGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+DQogICAgICAgICAgICAgICAgICAgIENvbnN1bHRlciBub3RyZSA8YSB0YXJnZXQ9ImJsYW5rIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL3ZpZS1wcml2ZWUuaHRtbCIgdGl0bGU9InZpZSBwcml2w6llIj5wb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT4uDQogICAgICAgICAgICAgICAgPC9zbWFsbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZpZ2F0aW9uX2ZpY2hlIGh0aGluIj48L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC14bC04Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGZvb3Rlci1zbGlkZXItcGhvdG9zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZCBjb2wtMSBwdC0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWpvdXRlckZhdm9yaXMgYWRkLXNlbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS1oZWFydCBtci1zbS0yIGZsb2F0LWxlZnQgY29ldXJGYXZvcmkiIGRhdGEtaWQtYW5ub25jZT0iMjAxNjkzNiI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImQtbm9uZSBkLXNtLWJsb2NrIj5Bam91dGVyIGF1eCBmYXZvcmlzPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQgY29sLTIgcHQtMiI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAgZHJvcHVwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tbGluayBkcm9wZG93bi10b2dnbGUgcGFydGFnZXJBbm5vbmNlIiByb2xlPSJidXR0b24iIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLXNoYXJlLWFsdCBtci1zbS0yIGZsb2F0LWxlZnQiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkLW5vbmUgZC1zbS1ibG9jayI+UGFydGFnZXI8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgZGF0YS10b2dnbGU9Im1vZGFsIiBocmVmPSIjIiBkYXRhLXRhcmdldD0iI21vZGFsRW52b3llckFtaSI+RW1haWw8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgb25jbGljaz0idHdlZXRlckFubm9uY2UoKSIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj5QYXJ0YWdlciBzdXIgVHdpdHRlcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiB0YXJnZXQ9Il9CTEFOSyIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9aHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci83NS9hbm5vbmNlLXZlbnRlLWFwcGFydGVtZW50LXBhcmlzLTE2ZW1lLTIwMTY5MzYuaHRtbCI+UGFydGFnZXIgc3VyIEZhY2Vib29rPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiBjb2wtc20tMyB0ZXh0LXJpZ2h0IHB0LTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQSE9UTyA8c3BhbiBpZD0iaW5kZXgtaW1hZ2UtYWN0dWVsbGUiPjE8L3NwYW4+LzcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLWltYWdlIG1sLTIiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBjb2wtc20tMSBuYXYgcC0xIHB0LTMgaW1hZ2UtcHJlY2VkZW50ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LWF1dG8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0icmkgcmktY2hldnJvbi1sZWZ0Ij48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wgY29sLXNtLTEgbmF2IG5hdi1yaWdodCBwLTEgcHQtMyBjb21tYW5kZXMtc2xpZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtYXV0byI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGlkPSJldGF0LXNsaWRlciIgY2xhc3M9ImZhcyBmYS1wYXVzZSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIGNvbC1zbS0xIG5hdiBuYXYtcmlnaHQgcC0xIHB0LTMgaW1hZ2Utc3VpdmFudGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC1hdXRvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLWNoZXZyb24tcmlnaHQiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG10LXhsLTQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPg0KICAgICAgICAgICAgPG5hdiBhcmlhLWxhYmVsPSJicmVhZGNydW1iIj4NCiAgICAgICAgICAgICAgICA8b2wgIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0JyZWFkY3J1bWJMaXN0IiB0eXBlb2Y9IkJyZWFkY3J1bWJMaXN0IiBjbGFzcz0iYnJlYWRjcnVtYiBwbC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0iaXRlbUxpc3RFbGVtZW50IiBpdGVtc2NvcGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9MaXN0SXRlbSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGl0ZW1wcm9wPSJpdGVtIiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJuYW1lIj5BY2N1ZWlsPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJwb3NpdGlvbiIgY29udGVudD0iMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0iaXRlbUxpc3RFbGVtZW50IiBpdGVtc2NvcGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9MaXN0SXRlbSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGl0ZW1wcm9wPSJpdGVtIiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYW5ub25jZXMuaHRtbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiPkFubm9uY2VzPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJwb3NpdGlvbiIgY29udGVudD0iMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0iaXRlbUxpc3RFbGVtZW50IiBpdGVtc2NvcGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9MaXN0SXRlbSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGl0ZW1wcm9wPSJpdGVtIiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvcmVnaW9uLWlsZS1kZS1mcmFuY2UuaHRtbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiPklsZS1kZS1GcmFuY2U8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSIzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJpdGVtTGlzdEVsZW1lbnQiIGl0ZW1zY29wZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0xpc3RJdGVtIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaXRlbXByb3A9Iml0ZW0iIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9yZWdpb24taWxlLWRlLWZyYW5jZS9kZXBhcnRlbWVudC1wYXJpcy03NS5odG1sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibmFtZSI+UGFyaXM8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSI0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJpdGVtTGlzdEVsZW1lbnQiIGl0ZW1zY29wZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0xpc3RJdGVtIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaXRlbXByb3A9Iml0ZW0iIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9yZWdpb24taWxlLWRlLWZyYW5jZS9kZXBhcnRlbWVudC1wYXJpcy03NS92aWxsZS1wYXJpcy0xNmVtZS0zMjU2NC5odG1sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibmFtZSI+UGFyaXMgMTbDqG1lPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJwb3NpdGlvbiIgY29udGVudD0iNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0iaXRlbUxpc3RFbGVtZW50IiBpdGVtc2NvcGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9MaXN0SXRlbSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGl0ZW1wcm9wPSJpdGVtIiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvNzUvYXBwYXJ0ZW1lbnQvdmVudGUvbGlzdGluZy1iaWVucy1wYXJpcy0xNmVtZS0zMjU2NC5odG1sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibmFtZSI+QXBwYXJ0ZW1lbnRzIMOgIHZlbmRyZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icG9zaXRpb24iIGNvbnRlbnQ9IjYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9Iml0ZW1MaXN0RWxlbWVudCIgaXRlbXNjb3BlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvTGlzdEl0ZW0iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0gYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiPkZpY2hlIGFubm9uY2U8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJwb3NpdGlvbiIgY29udGVudD0iNyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+DQogICAgICAgICAgICA8L25hdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXNjb3BlDQogICAgICAgICAgICAgICAgICAgIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvQXBhcnRtZW50Ig0KICAgICAgICAgICAgICAgICAgICBjbGFzcz0icm93IG10LTUgbWItMyBtdC1tZC0xIG1iLW1kLTUgbXQteGwtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wgcHIteGwtNSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDEgaXRlbXNjb3BlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJhZGRyZXNzIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1Bvc3RhbEFkZHJlc3MiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtYi0wIj5BcHBhcnRlbWVudCDDoCB2ZW5kcmUgw6AgPHNwYW4gaXRlbXByb3A9ImFkZHJlc3NMb2NhbGl0eSI+UGFyaXMgMTZFbWU8L3NwYW4+PC9oMT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1ByaWNlU3BlY2lmaWNhdGlvbiIgY2xhc3M9InByaXggZC1ibG9jayBkLXNtLW5vbmUgbXQtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0icHJpY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgMzY3IDAwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InByaWNlQ3VycmVuY3kiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZldXJvOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtdC0yIG10LW1kLTEgbXQteGwtNCBtYi0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQgY29sLXNtLTIgbXQtc20tMiBwdC1zbS0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS1jbG9uZSBvLTUwIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGV0YWlscy1iaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0iZmxvb3JTaXplIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOTIgbcKyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCBjb2wtc20tMyBtdC1zbS0yIHB0LXNtLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLWRvb3Itb3BlbiBvLTUwIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGV0YWlscy1iaWVuIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJudW1iZXJPZlJvb21zIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zY29wZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvUXVhbnRpdGF0aXZlVmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwacOoY2VzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IGNvbC1zbS0yIHJlZmVyZW5jZSBtdC1zbS0yIHB0LXNtLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUsOJRiA6PGJyPjMzMDY2NjINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBjb2wtc20tNSB0ZXh0LXJpZ2h0IGQtbm9uZSBkLXNtLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9QcmljZVNwZWNpZmljYXRpb24iIGNsYXNzPSJwcml4IHByaXgtbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0icHJpY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSAzNjcgMDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InByaWNlQ3VycmVuY3kiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmV1cm87DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibXQtNSI+UGFyaXMgWFZJZSAtIFZpbGxhZ2UgZGUgUGFzc3kgLSBCZWwgYXBwYXJ0ZW1lbnQgcsOpbm92w6kgPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0dcOpIGF1IGRldXhpw6htZSDDqXRhZ2UgZCd1biBpbW1ldWJsZSBlbWJsw6ltYXRpcXVlIGRlcyBhbm7DqWVzIHRyZW50ZSwgYXBwYXJ0ZW1lbnQgZGUgOTIuNCBtwrIgYWNjZXNzaWJsZSBwYXIgbGUgbWFqZXN0dWV1eCBoYWxsIGQnZW50csOpZS4gSWwgc2UgY29tcG9zZSBkJ3VuZSBlbnRyw6llLCBkJ3VuIHNhbG9uL3NhbGxlIMOgIG1hbmdlciBhdmVjIGN1aXNpbmUgb3V2ZXJ0ZSwgZCd1bmUgY2hhbWJyZSBwYXJlbnRhbGUgYXZlYyBzYWxsZSBkZSBkb3VjaGUgZW4gc3VpdGUsIGQndW5lIGF1dHJlIGNoYW1icmUgZXQgZCd1bmUgc2FsbGUgZGUgYmFpbnMuIDxiciAvPg0KTCdlbnNlbWJsZSBkZXMgcHJvcHJpw6l0YWlyZXMgYsOpbsOpZmljaWUgZCd1biBzZXJ2aWNlIGRlIGNvbmNpZXJnZXJpZSBldCBkZSBub21icmV1eCBlc3BhY2VzIGNvbW11bnMgYW3DqW5hZ8OpcyA6IHVuZSBzYWxsZSBkZSBzcG9ydCwgdW4gZXNwYWNlIGRlIHLDqWNlcHRpb24gcHJpdmF0aXNhYmxlLCB1biBsb2NhbCBicmljb2xhZ2UgZXQgdW5lIGNoYW1icmUgcHJpdmF0aXNhYmxlLiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwci14bC01Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtYi0yIGNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZyBidG4tYmxvY2sgYnRuLXJpIHRleHQtbGVmdCBkdXNrLWJvdXRvbi1kb3NzaWVyIiANCiAgICAgICAgICAgIGhyZWY9IiMiIA0KICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiANCiAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbW9kYWxEZW1hbmRlRG9zc2llcjIwMTY5MzYiDQogICAgICAgICAgICBkYXRhLWlkYW5ub25jZT0iMjAxNjkzNiIgDQogICAgICAgICAgICBkYXRhLWlkYWdlbmNlPSI2ODM1IiANCiAgICAgICAgICAgIGRhdGEtcmVmZXJlbmNlPSIzMzA2NjYyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJvLTUwIiBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2ljb25zL01vcmUvRG93bmxvYWQtV2hpdGUuc3ZnIiBhbHQ9IlTDqWzDqWNoYXJnZW1lbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLXRleHQiPg0KICAgICAgICAgICAgICAgIFJlY2V2b2lyIGxlIGRvc3NpZXIgY29tcGxldA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtYi0yIGNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZyBidG4tYmxvY2sgYnRuLXJpIHRleHQtbGVmdCBkdXNrLWJvdXRvbi1yZHYiIA0KICAgICAgICAgICAgaHJlZj0iIyIgDQogICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIA0KICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNtb2RhbERlbWFuZGVSZW5kZXpWb3VzMjAxNjkzNiINCiAgICAgICAgICAgIGRhdGEtaWRhbm5vbmNlPSIyMDE2OTM2IiANCiAgICAgICAgICAgIGRhdGEtaWRhZ2VuY2U9IjY4MzUiIA0KICAgICAgICAgICAgZGF0YS1yZWZlcmVuY2U9IjMzMDY2NjIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9Im8tNTAiIHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9pbWFnZXMvaWNvbnMvQ29udGFjdC9UZWwtV2hpdGUuc3ZnIiBhbHQ9Ik9idGVuaXIgdW4gcmVuZGV6LXZvdXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLXRleHQiPg0KICAgICAgICAgICAgICAgIE9idGVuaXIgdW4gcmVuZGV6LXZvdXMNCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbWItMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tbGcgYnRuLWJsb2NrIGJ0bi1yaSB0ZXh0LWxlZnQgZHVzay1ib3V0b24tcmFwcGVsIiANCiAgICAgICAgICAgIGhyZWY9IiMiIA0KICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiANCiAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbW9kYWxEZW1hbmRlUmFwcGVsMjAxNjkzNiINCiAgICAgICAgICAgIGRhdGEtaWRhbm5vbmNlPSIyMDE2OTM2IiANCiAgICAgICAgICAgIGRhdGEtaWRhZ2VuY2U9IjY4MzUiIA0KICAgICAgICAgICAgZGF0YS1yZWZlcmVuY2U9IjMzMDY2NjIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9Im8tNTAiIHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9pbWFnZXMvaWNvbnMvQ29udGFjdC9DYWxlbmRhci1XaGl0ZS5zdmciIGFsdD0iRXRyZSByYXBwZWzDqSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tdGV4dCI+DQogICAgICAgICAgICAgICAgw4p0cmUgYXBwZWzDqSBhdSBwbHVzIHZpdGUNCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0ibW9kYWxFbnZveWVyQW1pIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgDQogICAgYXJpYS1sYWJlbGxlZGJ5PSJtb2RhbEVudm95ZXJBbWlMYWJlbCIgYXJpYS1oaWRkZW49InRydWUiPg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtcmkiIA0KICAgICAgICByb2xlPSJkb2N1bWVudCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIHRleHQtdXBwZXJjYXNlIiANCiAgICAgICAgICAgICAgICAgICAgaWQ9Im1vZGFsRW52b3llckFtaUxhYmVsIj5FbnZveWVyIMOgIHVuIGFtaTwvaDU+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSBjbG9zZS1jb250YWN0IiBkYXRhLWRpc21pc3M9Im1vZGFsIiANCiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPHNlbmQtZnJpZW5kIDpyZWZlcmVuY2U9IiczMzA2NjYyJyINCiAgICAgICAgICAgICAgICAgICAgOmlkLWFnZW5jZT0iJzY4MzUnIg0KICAgICAgICAgICAgICAgICAgICA6aWQtYW5ub25jZT0iJzIwMTY5MzYnIg0KICAgICAgICAgICAgICAgICAgICA6dGVsZXBob25lLW9ibGlnYXRvaXJlLWFubm9uY2U9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOm5vbS11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDpwcmVub20tdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6ZW1haWwtdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6bGFuZ3VlPSInZnInIj48L3NlbmQtZnJpZW5kPg0KICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgIDxzbWFsbCBpZD0iZm9ybXVsYWlyZUNvbmZpZGVudGlhbGl0ZSIgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4NCiAgICAgICAgICAgICAgICAgICAgQ29uc3VsdGVyIG5vdHJlIDxhIHRhcmdldD0iYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvdmllLXByaXZlZS5odG1sIiB0aXRsZT0idmllIHByaXbDqWUiPnBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpPC9hPi4NCiAgICAgICAgICAgICAgICA8L3NtYWxsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC14bC00IHBsLXhsLTAgbXQtNSBtdC14bC1uNCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgY2FyZC1ib3JkZXItYm90dG9tIGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItbGVmdC0wIGZvcm11bGFpcmUtY29udGVuZXVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9Im14LWF1dG8gbXQtbjQgcm91bmRlZC1jaXJjbGUgaW1hZ2UtY29uc2VpbGxlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2NvbnNlaWw0LnBuZyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgdGV4dC1jZW50ZXIgZmljaGUtYW5ub25jZS1mb3JtIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb3JtdWxhaXJlLXRpdHJlIj5EZW1hbmRleiBwbHVzIGQnaW5mb3JtYXRpb25zPGJyIC8+IMOgIGwnYWdlbmNlIGdyw6JjZSDDoCB2b3RyZSBpbnRlcmxvY3V0ZXVyLjwvc3Bhbj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxociBjbGFzcz0iaHItcmkgbXgtOCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb250YWN0LWZvcm0gOm9iamV0LXBhci1kZWZhdXQ9IidkZW1hbmRlSW5mb3MnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZW52b2ktYXV0b21hdGlxdWU9IicwJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmRlbWFuZGUtZXhwcmVzcy1kZXNhY3RpdmVlPSInMCciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDphZmZpY2hlci1vYmpldC1kZW1hbmRlPSInMSciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpyZWZlcmVuY2U9IiczMzA2NjYyJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkLWFnZW5jZT0iJzY4MzUnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQtYW5ub25jZT0iJzIwMTY5MzYnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGVsZXBob25lLW9ibGlnYXRvaXJlLWFubm9uY2U9IicwJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm5vbS11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpwcmVub20tdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cGF5cy11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0ZWxlcGhvbmUtdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZW1haWwtdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bGFuZ3VlPSInZnInIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aG9yaXpvbnRhbD0iJzAnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6YWZmaWNoZXItbW9kYWw9IicxJyI+PC9jb250YWN0LWZvcm0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGlkPSJmb3JtdWxhaXJlQ29uZmlkZW50aWFsaXRlIiBjbGFzcz0idGV4dC1sZWZ0IGZvcm0tdGV4dCB0ZXh0LW11dGVkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29uc3VsdGVyIG5vdHJlIDxhIHRhcmdldD0iYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvdmllLXByaXZlZS5odG1sIiB0aXRsZT0idmllIHByaXbDqWUiPnBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpPC9hPi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NtYWxsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIGNhcmQtd2hpdGUgdGV4dC1jZW50ZXIgYm9yZGVyLTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgaW1nTG9nb0FnZW5jZSIgc3JjPSJodHRwczovL21lZGlhcy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL3BpY3QvQWdlbmNlcy9Mb2dvcy9uZXdfbG9nbzkyNDcuanBnP2Q9MTU5MTgwNTExMCIgYWx0PSJMb2dvIGRlIGwmIzAzOTthZ2VuY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcmVzcz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5vbS1hZ2VuY2UiPkRBTklFTCBGRUFVIENPTU1FUkNJQUxJU0FUSU9OPC9zcGFuPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYWRyZXNzZSI+MjEgUlVFIEQgQVJUT0lTIDxicj4gNzUwMDggLSBQQVJJUyA4RU1FPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWRkcmVzcz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGllbi1hZmZpY2hlci10ZWxlcGhvbmUiPkFmZmljaGVyIGxlIHTDqWzDqXBob25lPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBhbGlnbi1zZWxmLWNlbnRlciBtdC01IG1iLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hZ2VuY2UtaW1tb2JpbGllcmUtcGFyaXMtOGVtZS03NS02ODM1Lmh0bWwiIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tYWx0LTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS1tYXAtbWFya2VyIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVm9pciBsYSBmaWNoZSBkZSBsJiMwMzk7YWdlbmNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIG10LXhsLTUgcHQteGwtNCBtdC1zbS01IG10LTQgcC0wIGZvbmQtYmxhbmMgcGItNSI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHgtMiBtYi14bC00IHB0LTUgdGV4dC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5MZXMgcGhvdG9zPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPGhyIGNsYXNzPSJoci1yaSBtdC01Ij4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzdHlsZT0ibWFyZ2luLXRvcDotMy44NXJlbTsiIHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9pbWFnZXMvcHVjZS5wbmciIGFsdD0iIj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB4LTIgYWxpZ24taXRlbXMtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTYgY29sLXhsLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNjYXJvdXNlbFNsaWRlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zbGlkZS10bz0iMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgZGF0YS10b2dnbGU9Im1vZGFsIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9Ii5tb2RhbC1waG90by14bCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQgbWItMyBwaG90by1taW5pYXR1cmUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWFzLnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vcGljdC9mNjAweDQwMC8yLzMvMy8wL2V4dF8wXzIzMzAzMzEuanBnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJwaG90byI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tNiBjb2wteGwtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2Nhcm91c2VsU2xpZGVyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNsaWRlLXRvPSIxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBkYXRhLXRvZ2dsZT0ibW9kYWwiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iLm1vZGFsLXBob3RvLXhsIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCBtYi0zIHBob3RvLW1pbmlhdHVyZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2Y2MDB4NDAwLzIvMy8zLzAvZXh0XzFfMjMzMDMzMS5qcGciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9InBob3RvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS02IGNvbC14bC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjY2Fyb3VzZWxTbGlkZXIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2xpZGUtdG89IjIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGRhdGEtdG9nZ2xlPSJtb2RhbCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIubW9kYWwtcGhvdG8teGwiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIG1iLTMgcGhvdG8tbWluaWF0dXJlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL21lZGlhcy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL3BpY3QvZjYwMHg0MDAvMi8zLzMvMC9leHRfMl8yMzMwMzMxLmpwZyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0icGhvdG8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tNiBjb2wteGwtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2Nhcm91c2VsU2xpZGVyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNsaWRlLXRvPSIzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBkYXRhLXRvZ2dsZT0ibW9kYWwiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iLm1vZGFsLXBob3RvLXhsIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCBtYi0zIHBob3RvLW1pbmlhdHVyZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2Y2MDB4NDAwLzIvMy8zLzAvZXh0XzNfMjMzMDMzMS5qcGciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9InBob3RvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS02IGNvbC14bC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjY2Fyb3VzZWxTbGlkZXIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2xpZGUtdG89IjQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGRhdGEtdG9nZ2xlPSJtb2RhbCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIubW9kYWwtcGhvdG8teGwiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIG1iLTMgcGhvdG8tbWluaWF0dXJlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL21lZGlhcy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL3BpY3QvZjYwMHg0MDAvMi8zLzMvMC9leHRfNF8yMzMwMzMxLmpwZyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0icGhvdG8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTYgY29sLXhsLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNjYXJvdXNlbFNsaWRlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zbGlkZS10bz0iNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgZGF0YS10b2dnbGU9Im1vZGFsIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9Ii5tb2RhbC1waG90by14bCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQgbWItMyBwaG90by1taW5pYXR1cmUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWFzLnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vcGljdC9mNjAweDQwMC8yLzMvMy8wL2V4dF81XzIzMzAzMzEuanBnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJwaG90byI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS02IGNvbC14bC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjY2Fyb3VzZWxTbGlkZXIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2xpZGUtdG89IjYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGRhdGEtdG9nZ2xlPSJtb2RhbCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIubW9kYWwtcGhvdG8teGwiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIG1iLTMgcGhvdG8tbWluaWF0dXJlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL21lZGlhcy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL3BpY3QvZjYwMHg0MDAvMi8zLzMvMC9leHRfNl8yMzMwMzMxLmpwZyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0icGhvdG8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTYgY29sLXhsLTQiIGlkPSJ2aWRlby1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwbGF5ZXIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tNiBjb2wteGwtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltYWdlLWJyb2NodXJlLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgbWItMyIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9mb25kX2Jyb2NodXJlLmpwZyIgYWx0PSJMZXMgZMOpdGFpbHMgZGUgbCYjMDM5O2Fubm9uY2UiIHN0eWxlPSJ3aWR0aDoxMDAlOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3AtbGVmdCI+TGEgZmljaGUgZHUgYmllbiBlbiBkw6l0YWlsPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3R0b20tbGVmdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hcHBhcnRlbWVudC9wYXJpcy0xNmVtZS9kYW5pZWwtZmVhdS1jb21tZXJjaWFsaXNhdGlvbi9hcHBhcnRlbWVudF9wYXJpcy0xNmVtZV8yMDE2OTM2LnBkZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLWxnIGJ0bi1ibG9jayBidG4tcmkgdGV4dC1sZWZ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvaWNvbnMvTW9yZS9Eb3dubG9hZC1XaGl0ZS5zdmciIGFsdD0iVMOpbMOpY2hhcmdlbWVudCIgY2xhc3M9Im8tNTAiPiA8ZGl2IGNsYXNzPSJidG4tdGV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUw6lsw6ljaGFyZ2VtZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCBtdC14bC00IHBiLTUiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB0LTUgcGItMyB0ZXh0LWNlbnRlciI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJkLW5vbmUgZC1tZC1ibG9jayI+TGVzIGTDqXRhaWxzIGRlIGwmIzAzOTthbm5vbmNlPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJkLW1kLW5vbmUgdGl0bGVEZXRhaWxzQW5uIj5MZXMgZMOpdGFpbHMgZGUgbCYjMDM5O2Fubm9uY2U8L2gzPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtdC14bC00Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTEyIGNvbC14bC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJmb250LXNpemU6MC44NzVlbTt0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO2ZvbnQtd2VpZ2h0OiBib2xkOyI+SU5GT1JNQVRJT05TPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InVsLXJpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SG9ub3JhaXJlcyDDoCBsYSBjaGFyZ2UgZHUgdmVuZGV1cjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJpZW4gZGFucyB1bmUgY29wb3ByacOpdMOpPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vbWJyZSBkZSBsb3RzIGRlIGxhIGNvcHJvcHJpw6l0w6kgOiAxMDY8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkF1Y3VuZSBwcm9jw6lkdXJlIGVuIGNvdXJzPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJmb250LXNpemU6MC44NzVlbTt0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO2ZvbnQtd2VpZ2h0OiBib2xkOyI+UsOpZsOpcmVuY2VzIGzDqWdhbGVzPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS00IGNvbC14bC0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHVsLXJpIHVsLXJpLXNvdWxpZ25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZWNvbG9naXF1ZS1zb2xpZGFpcmUuZ291di5mci9leGlnZW5jZXMtcmVnbGVtZW50YWlyZXMtY29uc3RydWN0aW9uLWRlcy1iYXRpbWVudHMiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiPlLDqGdsZW1lbnRhdGlvbiB0aGVybWlxdWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxlZ2lmcmFuY2UuZ291di5mci9hZmZpY2hUZXh0ZS5kbz9jaWRUZXh0ZT1KT1JGVEVYVDAwMDAyODc3MjI1NiZjYXRlZ29yaWVMaWVuPWlkIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIj5Mb2kgQWx1cjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZWNvbm9taWUuZ291di5mci9jZWRlZi9kdWZsb3QtaW52ZXN0aXNzZW1lbnQtbG9jYXRpZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayI+TG9pIER1ZmxvdDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tNiBjb2wteGwtNCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTEyIGNvbC14bC0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9ImZvbnQtc2l6ZTowLjg3NWVtO3RleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij5EaWFnbm9zdGljIMOpbmVyZ8OpdGlxdWU8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcGV0YWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9uIHNvdW1pcyBhdSBEUEUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tNiBjb2wteGwtNCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTEyIGNvbC14bC0xMiI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iZm9udC1zaXplOjAuODc1ZW07dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtmb250LXdlaWdodDogYm9sZDsiPkNhcmFjdMOpcmlzdGlxdWVzPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImJvcmRlciByb3VuZGVkLWNpcmNsZSBib3JkZXItZGFyayBwLTIgbWItMSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2ljb25zL1Rvb2xzL1Bob3Rvcy5zdmciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJJbnRlcnBob25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0ZS1jYXJhY3RlcmlzdGlxdWVzIj5JbnRlcnBob25lPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImJvcmRlciByb3VuZGVkLWNpcmNsZSBib3JkZXItZGFyayBwLTIgbWItMSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2ljb25zL1Rvb2xzL1Bob3Rvcy5zdmciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJOYi4gY2hhbWJyZXMgOiAyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0ZS1jYXJhY3RlcmlzdGlxdWVzIj5OYi4gY2hhbWJyZXMgOiAyPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIDwhLS0gUGx1cyBkJ2Fubm9uY2VzIGF1eCBhbGVudG91cnMgLS0+DQogICAgPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2VmZWNlNTsiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ic2xpZGVBcm91bmQiIGNsYXNzPSJjb2wtMTIiPjwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIDxkaXYgaWQ9ImJvdHRvbUFyb3VuZCIgY2xhc3M9ImxvYWRpbmciPjwvZGl2Pg0KDQogICAgPGRpdiBjbGFzcz0ibW9kYWwgbW9kYWwtcmktc2xpZGVyIGZhZGUgbW9kYWwtcGhvdG8teGwiDQogICAgICAgIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIg0KICAgICAgICBhcmlhLWxhYmVsbGVkYnk9ImxhcmdlTW9kYWwtcGhvdG9hbm5vbmNlIg0KICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwteGwiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIG1vZGFsLWhlYWRlci1yaSI+DQogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUiPkFwcGFydGVtZW50IMOgIHZlbmRyZSDDoCBQYXJpcyAxNkVtZTwvaDU+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjYXJvdXNlbFNsaWRlciIgY2xhc3M9ImNhcm91c2VsIHNsaWRlIiBkYXRhLXJpZGU9ImNhcm91c2VsIj4NCiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPSJjYXJvdXNlbC1pbmRpY2F0b3JzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10YXJnZXQ9IiNjYXJvdXNlbFNsaWRlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zbGlkZS10bz0iMCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJhY3RpdmUiID48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRhcmdldD0iI2Nhcm91c2VsU2xpZGVyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNsaWRlLXRvPSIxIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10YXJnZXQ9IiNjYXJvdXNlbFNsaWRlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zbGlkZS10bz0iMiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGFyZ2V0PSIjY2Fyb3VzZWxTbGlkZXIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2xpZGUtdG89IjMiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRhcmdldD0iI2Nhcm91c2VsU2xpZGVyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNsaWRlLXRvPSI0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10YXJnZXQ9IiNjYXJvdXNlbFNsaWRlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zbGlkZS10bz0iNSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGFyZ2V0PSIjY2Fyb3VzZWxTbGlkZXIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2xpZGUtdG89IjYiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pbm5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2Fyb3VzZWwtaXRlbSAgYWN0aXZlICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtYmxvY2sgdy0xMDAiIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF8wXzIzMzAzMzEuanBnIiBhbHQ9IjM2ODY0MzU1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtYmxvY2sgdy0xMDAiIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF8xXzIzMzAzMzEuanBnIiBhbHQ9IjM2ODY0NTY3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtYmxvY2sgdy0xMDAiIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF8yXzIzMzAzMzEuanBnIiBhbHQ9IjM2ODY0NTY4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtYmxvY2sgdy0xMDAiIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF8zXzIzMzAzMzEuanBnIiBhbHQ9IjM2ODY0NTY5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtYmxvY2sgdy0xMDAiIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF80XzIzMzAzMzEuanBnIiBhbHQ9IjM2ODY0NTcwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtYmxvY2sgdy0xMDAiIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF81XzIzMzAzMzEuanBnIiBhbHQ9IjM2ODY0NTcxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtYmxvY2sgdy0xMDAiIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2YxMjAweDgwMC8yLzMvMy8wL2V4dF82XzIzMzAzMzEuanBnIiBhbHQ9IjM2ODY0NTcyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjYXJvdXNlbC1jb250cm9sLXByZXYiIGhyZWY9IiNjYXJvdXNlbFNsaWRlciIgcm9sZT0iYnV0dG9uIiBkYXRhLXNsaWRlPSJwcmV2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJvdXNlbC1jb250cm9sLXByZXYtaWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5QcsOpY8OpZGVudGU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNhcm91c2VsLWNvbnRyb2wtbmV4dCIgaHJlZj0iI2Nhcm91c2VsU2xpZGVyIiByb2xlPSJidXR0b24iIGRhdGEtc2xpZGU9Im5leHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcm91c2VsLWNvbnRyb2wtbmV4dC1pY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlN1aXZhbnRlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIG1vZGFsLWZvb3Rlci1yaSByb3ciPg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsIG1vZGFsLXJpLXZpc2l0ZSBmYWRlIG1vZGFsLXZpc2l0ZS14bCINCiAgICAgICAgICAgIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIg0KICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PSJsYXJnZU1vZGFsLXZpc2l0ZSINCiAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwteGwiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIgbW9kYWwtaGVhZGVyLXJpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUiPkFwcGFydGVtZW50IMOgIHZlbmRyZSDDoCBQYXJpcyAxNkVtZTwvaDU+DQogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9hdTRLeUp5Mk9FcyIgd2lkdGg9IjEwMCUiIGhlaWdodD0iNjAwIiBmcmFtZWJvcmRlcj0iMCIgYWxsb3dmdWxsc2NyZWVuPSIiIGFsbG93PSJ2ciIgY2xhc3M9ImZyYW1lLXZpc2l0ZSI+PC9pZnJhbWU+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciBtb2RhbC1mb290ZXItcmkgcm93Ij4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICANCg0KICAgIDxmb290ZXIgY2xhc3M9InJpLWZvb3RlciBwdC14bC01IHB0LTUgcC1tZC01Ij4NCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC0zIHRleHQtc20tbGVmdCB0ZXh0LWNlbnRlciI+DQogICAgICAgICAgICAgICAgPGltZyBhbHQ9IkxvZ28iIHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9pbWFnZXMvbG9nb3MvTG9nby1XaGl0ZS5wbmciPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wgb2Zmc2V0LXhsLTQgbXQtNCBtdC1zbS0wIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnB1dC1ncm91cC1sZyBtdC0yIj4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiDQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIg0KICAgICAgICAgICAgICAgICAgICAgICAgaWQ9Im5ld3NsZXR0ZXJfZW1haWwiDQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJuZXdzbGV0dGVyX2VtYWlsIg0KICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkFib25uZXotdm91cyDDoCBub3RyZSBuZXdzbGV0dGVyIg0KICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQWRyZXNzZSBFbWFpbCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwLWFwcGVuZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBpZD0ibmV3c2xldHRlcl9zdWJtaXQiIGNsYXNzPSJidG4gYnRuLWxnIGJ0bi1wcmltYXJ5Ij5WYWxpZGVyPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0icm93IG10LTUiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS0zIj4NCiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdHJlIj5MaWVucyBpbnRlcm5lczwvaDQ+DQogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIj4NCiAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9zZWN1cmUuc21jLWZyYW5jZS5jb20vY2xpZW50cy9sb2dpbl9yaS5hc3AiIHRhcmdldD0iYmxhbmsiPkVzcGFjZSBwcm9mZXNzaW9ubmVsPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbSI+UmVjaGVyY2hlciB1bmUgcHJvcHJpw6l0w6kgZGUgcHJlc3RpZ2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9tYWdhemluZS1pbW1vYmlsaWVyIj5MZSBtYWdhemluZSBDw7R0ZSBkJiMwMzk7QXp1cjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2Fib25uZW1lbnQuaHRtbCI+UyYjMDM5O2Fib25uZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9saWVucyI+TGllbnM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS0zIj4NCiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdHJlIj5WaWxsYXMgZXQgcHJvcHJpw6l0w6lzPC9oND4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQiPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLWFudGliZXMtdmlsbGFzLW1haXNvbnMtMS5odG1sIj5BbnRpYmVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1jYW5uZXMtdmlsbGFzLW1haXNvbnMtMS5odG1sIj5DYW5uZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLWdyYXNzZS12aWxsYXMtbWFpc29ucy0xLmh0bWwiPkdyYXNzZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtbW9uYWNvLXZpbGxhcy1tYWlzb25zLTEuaHRtbCI+TW9uYWNvPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1uaWNlLXZpbGxhcy1tYWlzb25zLTEuaHRtbCI+TmljZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtc3QtcGF1bC1kZS12ZW5jZS12aWxsYXMtbWFpc29ucy0xLmh0bWwiPlN0LXBhdWwtZGUtdmVuY2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLXZhci12aWxsYXMtbWFpc29ucy0xLmh0bWwiPlZhcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtcHJvdmVuY2UtdmlsbGFzLW1haXNvbnMtMS5odG1sIj5Qcm92ZW5jZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtbGFuZ3VlZG9jLXJvdXNzaWxsb24tdmlsbGFzLW1haXNvbnMtMS5odG1sIj5MYW5ndWVkb2Mtcm91c3NpbGxvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtYXV0cmVzLXZpbGxhcy1tYWlzb25zLTEuaHRtbCI+QXV0cmVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTMiPg0KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0cmUiPkFwcGFydGVtZW50czwvaDQ+DQogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIj4NCiAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1hbnRpYmVzLWFwcGFydGVtZW50LTEuaHRtbCI+QW50aWJlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtY2FubmVzLWFwcGFydGVtZW50LTEuaHRtbCI+Q2FubmVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1ncmFzc2UtYXBwYXJ0ZW1lbnQtMS5odG1sIj5HcmFzc2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLW1vbmFjby1hcHBhcnRlbWVudC0xLmh0bWwiPk1vbmFjbzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtbmljZS1hcHBhcnRlbWVudC0xLmh0bWwiPk5pY2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLXN0LXBhdWwtZGUtdmVuY2UtYXBwYXJ0ZW1lbnQtMS5odG1sIj5TdC1wYXVsLWRlLXZlbmNlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy12YXItYXBwYXJ0ZW1lbnQtMS5odG1sIj5WYXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLXByb3ZlbmNlLWFwcGFydGVtZW50LTEuaHRtbCI+UHJvdmVuY2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLWxhbmd1ZWRvYy1yb3Vzc2lsbG9uLWFwcGFydGVtZW50LTEuaHRtbCI+TGFuZ3VlZG9jLXJvdXNzaWxsb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLWF1dHJlcy1hcHBhcnRlbWVudC0xLmh0bWwiPkF1dHJlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS0zIj4NCiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdHJlIj5MaWVuczwvaDQ+DQogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIj4NCiAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1sdXh1cnlyZW50YWxzLmNvbS9mciI+TFVYVVJZIFJFTlRBTFMgYnkgUmVzaWRlbmNlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubWFpc29uc2V0YXBwYXJ0ZW1lbnRzLmZyIj5JbW1vYmlsaWVyIEZyYW5jZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hZ2VuY2VzLWltbW9iaWxpZXJlcy1wcmVzdGlnZS0xLmh0bWwiPjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hZ2VuY2VzLWltbW9iaWxpZXJlcy1wcmVzdGlnZS0yLmh0bWwiPjI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hZ2VuY2VzLWltbW9iaWxpZXJlcy1wcmVzdGlnZS0zLmh0bWwiPjM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hZ2VuY2VzLWltbW9iaWxpZXJlcy1wcmVzdGlnZS00Lmh0bWwiPjQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hZ2VuY2VzLWltbW9iaWxpZXJlcy1wcmVzdGlnZS01Lmh0bWwiPjU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL3JlY2VudHMtbW90c2NsZXMtMS5odG1sIj5Nb3RzIENsw6lzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvbG9jYXRpb25zLXZpbGxhcy1hcHBhcnRlbWVudHMtMS5odG1sIj5Mb2NhdGlvbnMgc2Fpc29ubmnDqHJlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL3ZpZS1wcml2ZWUuaHRtbCI+dmllIHByaXbDqWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbXQtNSBtYi01IHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBjb2wgYWxpZ24tc2VsZi1jZW50ZXIiPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9yZXNpZGVuY2VzLmltbW9iaWxpZXIubWFnYXppbmUvIiBjbGFzcz0ic29jaWFsLWljb24iPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0icmkgcmktZmFjZWJvb2siPjwvaT4NCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9yZXNpZGVuY2VzaW1tb2JpbGllci8iIGNsYXNzPSJzb2NpYWwtaWNvbiI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS1pbnN0YWdyYW0iPjwvaT4NCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ1VPY2hSdDF1RnRFY1FxQk90ZnotZWciIGNsYXNzPSJzb2NpYWwtaWNvbiI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS15b3V0dWJlIj48L2k+DQogICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbXQtMSB0ZXh0LWNlbnRlciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPg0KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtZW50aW9ucy1sZWdhbGVzIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL3ZpZXdzL2luZm9zX2xlZ2FsZXMucGhwP2xhbmc9ZnIiPk1lbnRpb25zIGzDqWdhbGVzPC9hPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9mb290ZXI+DQoNCg0KICAgIDxzY3JpcHQgc3JjPSIvanMvbGlicy9qcXVlcnkubWluLmpzP2lkPTIyMGFmZDc0M2Q5ZTk2NDM4NTJlIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2pzL2xpYnMvanF1ZXJ5LTEuMTAuMi5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2pzL2xpYnMvanF1ZXJ5LXVpLTEuMTAuMy5jdXN0b20ubWluLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9qcy9saWJzL3NlcmlhbGl6ZS1qc29uL2pxdWVyeS5zZXJpYWxpemVqc29uLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvanMvbGlicy9wb3BwZXIubWluLmpzP2lkPWUyMWE2NjQ5MDQxZWY2ZjVmMWJmIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2xpYnMvYm9vdHN0cmFwLm1pbi5qcz9pZD1lMWQ5OGQ0NzY4OWUwMGY4ZWNiYyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9mb25jdGlvbnMuanM/aWQ9NmFkMGRjMTc3NTZkMGFmZDk3YzYiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSIvanMvc21jTWFuYWdlRm9ybS5qcz9pZD02N2RhYzg4ZDBiNzFlNzE3YzkwZiI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vanMvbGFuZy9mci5qcz8xNTkxODA1MTEwIj48L3NjcmlwdD4NCg0KICAgICAgICAgICAgDQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkuanM/cmVuZGVyPTZMZVpkN2NVQUFBQUFQaHlPUndYVDZ5RmtWQ0kxR1hLOE0zWXBhcFgiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0Pg0KICAgICAgICAgICAgd2luZG93LnJlQ2FwdGNoYVNpdGVLZXkgPSAnNkxlWmQ3Y1VBQUFBQVBoeU9Sd1hUNnlGa1ZDSTFHWEs4TTNZcGFwWCc7DQogICAgICAgIDwvc2NyaXB0Pg0KICAgIA0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaW50ZXJuYXV0ZUNvbm5lY3RlID0gZmFsc2U7DQogICAgICAgIA0KICAgICAgICB3aW5kb3cucm91dGVGYXZvcmlzID0gImh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYWpheC9mYXZvcmlzIjsNCiAgICAgICAgd2luZG93LnBhZ2VBY3R1ZWxsZSA9ICJmaWNoZV9hbm5vbmNlIjsNCg0KICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpew0KICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZ0KXsNCiAgICAgICAgICAgICAgICAgaWYoISQoJ2J1dHRvbi5uYXZiYXItdG9nZ2xlci5idG5NZW51JykuaGFzQ2xhc3MoJ2NvbGxhcHNlZCcpICYmICQoJyNuYXZiYXJOYXZBbHRNYXJrdXAnKS5oYXNDbGFzcygnc2hvdycpKXsNCiAgICAgICAgICAgICAgICAgICAgaWYoJChldnQudGFyZ2V0KS5hdHRyKCdpZCcpICE9ICduYXZiYXJOYXZBbHRNYXJrdXAnICYmDQogICAgICAgICAgICAgICAgICAgICAgICEkKGV2dC50YXJnZXQpLnBhcmVudCgnYnV0dG9uJykuaGFzQ2xhc3MoJ25hdmJhci10b2dnbGVyJykgJiYNCiAgICAgICAgICAgICAgICAgICAgICAgISQoZXZ0LnRhcmdldCkucGFyZW50KCdidXR0b24nKS5oYXNDbGFzcygnYnRuTWVudScpICYmDQogICAgICAgICAgICAgICAgICAgICAgICEkKGV2dC50YXJnZXQpLmhhc0NsYXNzKCdyaS1iYXJzJykpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2J1dHRvbi5uYXZiYXItdG9nZ2xlci5idG5NZW51JykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pDQoNCiAgICAgICAgICAgICQoIi5wcmljZS1yYW5nZSIpLnBvcG92ZXIoew0KICAgICAgICAgICAgICAgICJwbGFjZW1lbnQiOiAidG9wIiwNCiAgICAgICAgICAgICAgICAidHJpZ2dlciI6ICJob3ZlciINCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICA8c2NyaXB0IHNyYz0iL2pzL2FwcC5qcz9pZD0yY2E0ZmRmZjIyNTEzZGE0YTE2MyI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2pzL3NtY01hbmFnZVBvcHVwLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2pzL3NtY01hbmFnZUFubm9uY2UuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vanMvc21jTWFuYWdlRm9ybS5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9qcy9mb25jdGlvbnMuanMiPjwvc2NyaXB0Pg0KDQogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgJCgnI3ZpZGVvLWNvbnRhaW5lcicpLnNob3coKTsNCg0KICAgICAgICAvL0NoYXJnZW1lbnQgZGUgbCdhcGkNCiAgICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOw0KICAgICAgICB0YWcuc3JjID0gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGkiOw0KICAgICAgICB2YXIgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07DQogICAgICAgIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhZywgZmlyc3RTY3JpcHRUYWcpOw0KDQogICAgICAgIC8vY29uZmlnIHRhaWxsZSBsZWN0ZXVyDQogICAgICAgIHZhciBwbGF5ZXJIZWlnaHQgPSAnMjQycHgnOw0KICAgICAgICB2YXIgcGxheWVyV2lkdGggPSAnMTAwJSc7DQoNCiAgICAgICAgLy9Db25maWcgbGVjdGV1cg0KICAgICAgICB2YXIgcGxheWVyOw0KDQogICAgICAgIGZ1bmN0aW9uIG9uWW91VHViZUlmcmFtZUFQSVJlYWR5KCkNCiAgICAgICAgew0KICAgICAgICAgICAgcGxheWVyID0gbmV3IFlULlBsYXllcigncGxheWVyJywgew0KICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVySGVpZ2h0LA0KICAgICAgICAgICAgICAgIHdpZHRoOiBwbGF5ZXJXaWR0aCwNCiAgICAgICAgICAgICAgICB2aWRlb0lkOiAiYXU0S3lKeTJPRXMiLA0KICAgICAgICAgICAgICAgIGV2ZW50czogew0KICAgICAgICAgICAgICAgICAgICAnb25SZWFkeSc6IG9uUGxheWVyUmVhZHksDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBvblBsYXllclJlYWR5KGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIGUudGFyZ2V0Lm11dGUoKTsNCiAgICAgICAgICAgIGUudGFyZ2V0LnBhdXNlVmlkZW8oKTsNCg0KICAgICAgICAgICAgLy9QbGF5IG91IHBhdXNlIGVuIGZvbmN0aW9uIGR1IHNjcm9sbA0KICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdmFyIHBsYXllclBvc2l0aW9uID0gJCgnI3BsYXllcicpLnBvc2l0aW9uKCkudG9wOw0KICAgICAgICAgICAgICAgIHZhciBTY3JvbGxUb3AgPSBwYXJzZUludCgkKHdpbmRvdykuc2Nyb2xsVG9wKCkpOw0KDQogICAgICAgICAgICAgICAgaWYgKFNjcm9sbFRvcCA+IHBsYXllclBvc2l0aW9uIC0gNjAwICYmIFNjcm9sbFRvcCA8IHBsYXllclBvc2l0aW9uICsgMjAwKSB7DQogICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBsYXlWaWRlbygpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhdXNlVmlkZW8oKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgIDwvc2NyaXB0Pg0KICAgIA0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICQoIi5saWVuLWFmZmljaGVyLXRlbGVwaG9uZSIpLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpOw0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdsaWVuLWFmZmljaGVyLXRlbGVwaG9uZScpICYmICF3aW5kb3cuc21jQWpheEFmZmljaGVUZWxJblByb2dyZXNzKSB7DQogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zbWNBamF4QWZmaWNoZVRlbEluUHJvZ3Jlc3MgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAkLmdldCgiaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hamF4L2FnZW5jZS10ZWwtNjgzNS0yMDE2OTM2Lmh0bWwiLCBudWxsLCBmdW5jdGlvbiAoZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQuaHRtbChkYXRhLmpvaW4oJywgJykpOw0KICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MoImxpZW4tYWZmaWNoZXItdGVsZXBob25lIik7DQogICAgICAgICAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc21jQWpheEFmZmljaGVUZWxJblByb2dyZXNzID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkKCIubGllbi1hZmZpY2hlci10ZWxlcGhvbmUtc3BlY2lmIikuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyk7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2xpZW4tYWZmaWNoZXItdGVsZXBob25lLXNwZWNpZicpICYmICF3aW5kb3cuc21jQWpheEFmZmljaGVUZWxJblByb2dyZXNzKSB7DQogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zbWNBamF4QWZmaWNoZVRlbEluUHJvZ3Jlc3MgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAkLmdldCgiaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hamF4L2Fubm9uY2UtdGVsLTIwMTY5MzYuaHRtbCIsIG51bGwsIGZ1bmN0aW9uIChkYXRhKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5odG1sKGRhdGEgPyBkYXRhIDogJycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MoImxpZW4tYWZmaWNoZXItdGVsZXBob25lLXNwZWNpZiIpOw0KICAgICAgICAgICAgICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNtY0FqYXhBZmZpY2hlVGVsSW5Qcm9ncmVzcyA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgPC9zY3JpcHQ+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9qcy9saWJzL3NsaWNrLm1pbi5qcz9pZD1kNWE2MWM3NDllNDRlNDcxNTlhZiI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdD4NCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsNCiAgICAgICAgICAgIGZ1bmN0aW9uIHN3aW5nUGFnZSgpIHsNCiAgICAgICAgICAgICAgICB2YXIgJHBvbGVQb3NpdGlvbiA9ICQoIiNzbGlkZUFnZW5jZS5sb2FkZWQiKS5wYXJlbnRzKCJkaXYubWItNSIpLA0KICAgICAgICAgICAgICAgICAgICAkYXJvdW5kID0gICQoIiNzbGlkZUFyb3VuZC5sb2FkZWQiKS5wYXJlbnRzKCJkaXYubWItNSIpOw0KDQogICAgICAgICAgICAgICAgaWYgKCRwb2xlUG9zaXRpb24ubGVuZ3RoID4gMCAmJiAkYXJvdW5kLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgJHBvbGVQb3NpdGlvbi5uZXh0KCJkaXYuY29udGFpbmVyIikuZmluZCgiZGl2LnJvdy5zZWFyY2gtcmVzdWx0cyIpLnJlbW92ZUNsYXNzKCJibG9jay1ldmVuIikuYWRkQ2xhc3MoImJsb2NrLW9kZCIpOw0KICAgICAgICAgICAgICAgICAgICAkYXJvdW5kLm5leHQoImRpdi5jb250YWluZXIiKS5maW5kKCJkaXYucm93LnNlYXJjaC1yZXN1bHRzIikucmVtb3ZlQ2xhc3MoImJsb2NrLW9kZCIpLmFkZENsYXNzKCJibG9jay1ldmVuIik7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkcG9sZVBvc2l0aW9uLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgJHBvbGVQb3NpdGlvbi5uZXh0QWxsKCJkaXYuY29udGFpbmVyIikuZmluZCgiZGl2LnJvdy5zZWFyY2gtcmVzdWx0cyIpLnJlbW92ZUNsYXNzKCJibG9jay1ldmVuIikuYWRkQ2xhc3MoImJsb2NrLW9kZCIpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJGFyb3VuZC5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICRhcm91bmQubmV4dCgiZGl2LmNvbnRhaW5lciIpLmZpbmQoImRpdi5yb3cuc2VhcmNoLXJlc3VsdHMiKS5yZW1vdmVDbGFzcygiYmxvY2stZXZlbiIpLmFkZENsYXNzKCJibG9jay1vZGQiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICQuYWpheCh7DQogICAgICAgICAgICAgICAgdXJsOiAiaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hamF4L2Fubm9uY2VzLW1lbWUtdmlsbGUtbWVtZS1hdHRyaWJ1dHMvMjAxNjkzNiIsDQogICAgICAgICAgICAgICAgdHlwZTogIkdFVCIsDQogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgJCgiI3NsaWRlQXJvdW5kIikuaHRtbChkYXRhKTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICQoIiNzbGlkZUFyb3VuZCIpLnJlbW92ZSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkLmFqYXgoew0KICAgICAgICAgICAgICAgIHVybDogImh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYW5ub25jZXMtYWxlbnRvdXJzLmh0bWwiLA0KICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLA0KICAgICAgICAgICAgICAgIGRhdGE6IHsNCiAgICAgICAgICAgICAgICAgICAgdmlsbGVzOiAzMjU2NCwNCiAgICAgICAgICAgICAgICAgICAgcGluQ29sb3I6ICdibGFjaycNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBtaWRkbGVIdG1sID0gZGF0YS5taWRkbGUgfHwgIiI7DQogICAgICAgICAgICAgICAgICAgIHZhciBib3R0b21IdG1sID0gZGF0YS5ib3R0b20gfHwgIiI7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGJvdHRvbUh0bWwgIT0gIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoIiNib3R0b21Bcm91bmQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygibG9hZGluZyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJsb2FkZWQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoYm90dG9tSHRtbCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJyNlZmVjZTUnKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoIiNib3R0b21Bcm91bmQiKS5yZW1vdmUoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgJCgiI3NsaWRlQXJvdW5kIikucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgICAgICQoIiNib3R0b21Bcm91bmQiKS5yZW1vdmUoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJCgnLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcycpLnNsaWNrKHsNCiAgICAgICAgICAgICAgICBwcmV2QXJyb3c6ICQoIi5pbWFnZS1wcmVjZWRlbnRlIiksDQogICAgICAgICAgICAgICAgbmV4dEFycm93OiAkKCIuaW1hZ2Utc3VpdmFudGUiKSwNCiAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsDQogICAgICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsDQogICAgICAgICAgICAgICAgY2VudGVyTW9kZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICBmYWRlOiB0cnVlLA0KICAgICAgICAgICAgICAgIGNzc0Vhc2U6ICdsaW5lYXInLA0KICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDYwMDANCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgJCgnLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcycpLm9uKCdhZnRlckNoYW5nZScsIGZ1bmN0aW9uKGV2ZW50LCBzbGljaywgZGlyZWN0aW9uKSB7DQogICAgICAgICAgICAgICAgJCgnI2luZGV4LWltYWdlLWFjdHVlbGxlJykudGV4dCgNCiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoJCgnLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcycpLnNsaWNrKCdzbGlja0N1cnJlbnRTbGlkZScpKSArIDENCiAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAvLyBQYXIgZMOpZmF1dCBsZSBzbGlkZXIgZXN0IGVuIGxlY3R1cmUNCiAgICAgICAgICAgIHZhciBldGF0U2xpZGVyID0gJ3BsYXknOw0KICAgICAgICAgICAgdmFyIGxvZ29FdGF0U2xpZGVyID0gJ3BhdXNlJzsNCiAgICAgICAgICAgICQoJy5jb21tYW5kZXMtc2xpZGVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgaWYgKGV0YXRTbGlkZXIgPT0gJ3BsYXknKSB7DQogICAgICAgICAgICAgICAgICAgICQoJyNldGF0LXNsaWRlcicpLnJlbW92ZUNsYXNzKCdmYS0nICsgbG9nb0V0YXRTbGlkZXIpOw0KICAgICAgICAgICAgICAgICAgICAkKCcuY29udGFpbmVyLWNvdXZlcnR1cmVzJykuc2xpY2soJ3NsaWNrUGF1c2UnKQ0KICAgICAgICAgICAgICAgICAgICBldGF0U2xpZGVyID0gJ3BhdXNlJzsNCiAgICAgICAgICAgICAgICAgICAgbG9nb0V0YXRTbGlkZXIgPSAncGxheSc7DQogICAgICAgICAgICAgICAgICAgICQoJyNldGF0LXNsaWRlcicpLmFkZENsYXNzKCdmYS0nICsgbG9nb0V0YXRTbGlkZXIpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICQoJyNldGF0LXNsaWRlcicpLnJlbW92ZUNsYXNzKCdmYS0nICsgbG9nb0V0YXRTbGlkZXIpOw0KICAgICAgICAgICAgICAgICAgICAkKCcuY29udGFpbmVyLWNvdXZlcnR1cmVzJykuc2xpY2soJ3NsaWNrUGxheScpDQogICAgICAgICAgICAgICAgICAgIGV0YXRTbGlkZXIgPSAncGxheSc7DQogICAgICAgICAgICAgICAgICAgIGxvZ29FdGF0U2xpZGVyID0gJ3BhdXNlJzsNCiAgICAgICAgICAgICAgICAgICAgJCgnI2V0YXQtc2xpZGVyJykuYWRkQ2xhc3MoJ2ZhLScgKyBsb2dvRXRhdFNsaWRlcik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGlmKCQoJCgnLmZpY2hlLWFubm9uY2UgLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcyBpbWcnKVswXSkuaGVpZ2h0KCkgPiAkKCcuY29udGFpbmVyLWNvdXZlcnR1cmVzJykuaGVpZ2h0KCkpew0KICAgICAgICAgICAgICAgIHZhciBoZWlnaHRDb250YWluZXIgPSAkKCcuY29udGFpbmVyLWNvdXZlcnR1cmVzJykuaGVpZ2h0KCk7DQogICAgICAgICAgICAgICAgdmFyIGltZ0hlaWdodCA9ICQoJCgnLmZpY2hlLWFubm9uY2UgLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcyBpbWcnKVswXSkuaGVpZ2h0KCk7DQogICAgICAgICAgICAgICAgdmFyIG1hcmdpbiA9IChpbWdIZWlnaHQqMSAtIGhlaWdodENvbnRhaW5lcioxKSAvIDI7DQogICAgICAgICAgICAgICAgJCgnLmZpY2hlLWFubm9uY2UgLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcyBpbWcnKS5jc3MoJ21hcmdpbi10b3AnLCAnLScgKyBtYXJnaW4gKyAncHgnKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICAgICQod2luZG93KS5yZXNpemUoIGZ1bmN0aW9uKCl7DQogICAgICAgICAgICBpZigkKCQoJy5maWNoZS1hbm5vbmNlIC5jb250YWluZXItY291dmVydHVyZXMgaW1nJylbMF0pLmhlaWdodCgpID4gJCgnLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcycpLmhlaWdodCgpKXsNCiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0Q29udGFpbmVyID0gJCgnLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcycpLmhlaWdodCgpOw0KICAgICAgICAgICAgICAgIHZhciBpbWdIZWlnaHQgPSAkKCQoJy5maWNoZS1hbm5vbmNlIC5jb250YWluZXItY291dmVydHVyZXMgaW1nJylbMF0pLmhlaWdodCgpOw0KICAgICAgICAgICAgICAgIHZhciBtYXJnaW4gPSAoaW1nSGVpZ2h0KjEgLSBoZWlnaHRDb250YWluZXIqMSkgLyAyOw0KICAgICAgICAgICAgICAgICQoJy5maWNoZS1hbm5vbmNlIC5jb250YWluZXItY291dmVydHVyZXMgaW1nJykuY3NzKCdtYXJnaW4tdG9wJywgJy0nICsgbWFyZ2luICsgJ3B4Jyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIDwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgd2luZG93Lm9wZW5fZnJvbV92aXNpdGUgPSBmYWxzZTsNCg0KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkNCiAgICAgICAgew0KICAgICAgICAgICAgJCgiLm5hdmlnYXRpb25fZmljaGUiKS5zbWNNYW5hZ2VBbm5vbmNlKHsNCiAgICAgICAgICAgICAgICBmaWNoZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICBJZEFubm9uY2U6IDIwMTY5MzYsDQogICAgICAgICAgICAgICAgbGFuZzogJ2ZyJywNCiAgICAgICAgICAgICAgICB0ZXh0ZUxpZW5SZXRvdXJBdXhBbm5vbmNlczogJ1JldG91ciBhdXggcsOpc3VsdGF0cycNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBpZiAobW9iaWxlX2RldGVjdChmYWxzZSkgIT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAkKHdpbmRvdykuYmluZCgiY2xpY2siLCBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7DQogICAgICAgICAgICAgICAgICAgIGlmICghJCh0YXJnZXQpLmhhc0NsYXNzKCJjb2xvbm5lIikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoIi50cmFuY2hlIikucmVtb3ZlQ2xhc3MoIm9wZW4iKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCg0KICAgICAgICBmdW5jdGlvbiBjb3VudEZhY2Vib29rKGlkQW5ub25jZSwgdHlwZSkNCiAgICAgICAgew0KICAgICAgICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgICAgICB1cmw6ICcvdmlld3MvYWpheC9jb3VudEZhY2Vib29rLnBocD9JZEFubm9uY2U9JyArIGlkQW5ub25jZSArICcmdHlwZT0nICsgdHlwZSwNCiAgICAgICAgICAgICAgICB0eXBlOiAnR0VUJywNCiAgICAgICAgICAgICAgICBkYXRhOiAnSWRBbm5vbmNlPScgKyBpZEFubm9uY2UgKyAnJnR5cGU9JyArIHR5cGUNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgZnVuY3Rpb24gdHdlZXRlckFubm9uY2UoKQ0KICAgICAgICB7DQogICAgICAgICAgICB2YXIgc3JjID0gImh0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0Lz91cmw9IiArIHdpbmRvdy5sb2NhdGlvbi5ocmVmOw0KICAgICAgICAgICAgY291bnRGYWNlYm9vaygyMDE2OTM2LCAnTmJUd2l0dGVyJyk7DQogICAgICAgICAgICB3aW5kb3cub3BlbihzcmMsIGZhbHNlKTsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIHBhcnRhZ2VyQW5ub25jZUZiKCkNCiAgICAgICAgew0KICAgICAgICAgICAgY291bnRGYWNlYm9vaygyMDE2OTM2LCAnTmJGYWNlYm9vaycpOw0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgIDxzY3JpcHQ+DQogICAgICAgICAgICANCiAgICAgICAgICAgICQoJy5tb2RhbC1yaS12aXNpdGUnKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cub3Blbl9mcm9tX3Zpc2l0ZSA9IHRydWU7DQogICAgICAgICAgICAgICAgJCgnLm1vZGFsLWRvc3NpZXInKS5tb2RhbCgnc2hvdycpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoJy5tb2RhbC1kb3NzaWVyJykub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgaWYod2luZG93Lm9wZW5fZnJvbV92aXNpdGUgPT0gdHJ1ZSl7DQogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuX2Zyb21fdmlzaXRlID0gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSkNCiAgICAgICAgPC9zY3JpcHQ+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgew0KICAgICAgICAkKCcjbmV3c2xldHRlcl9zdWJtaXQnKS5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkgew0KICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgIHZhciB0ZXh0ZUluaXRpYWxCb3V0b24gPSAkKHRoaXMpLnRleHQoKTsNCiAgICAgICAgICAgICQodGhpcykudGV4dCgnRW52b2kgZW4gY291cnMuLi4nKQ0KICAgICAgICAgICAgICAgIC5wcm9wKCJkaXNhYmxlZCIsIHRydWUpOw0KICAgICAgICAgICAgJCgnI25ld3NsZXR0ZXJfc3VibWl0JykuYWRkQ2xhc3MoJ2Rpc2FibGVkJykNCiAgICAgICAgICAgICQucG9zdCgiaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9uZXdzbGV0dGVyL2ZyIiwgew0KICAgICAgICAgICAgICAgICAgICBlbWFpbDogJCgnI25ld3NsZXR0ZXJfZW1haWwnKS52YWwoKQ0KICAgICAgICAgICAgICAgIH0pLmRvbmUoZnVuY3Rpb24oZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjbmV3c2xldHRlcl9zdWJtaXQnKS50ZXh0KHRleHRlSW5pdGlhbEJvdXRvbikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKQ0KICAgICAgICAgICAgICAgICAgICBhbGVydChkYXRhLm1lc3NhZ2UpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoZmJxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBmYnEoJ3RyYWNrJywgJ0xlYWQnKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjbmV3c2xldHRlcl9zdWJtaXQnKS50ZXh0KHRleHRlSW5pdGlhbEJvdXRvbikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKQ0KICAgICAgICAgICAgICAgICAgICBhbGVydChKU09OLnBhcnNlKGRhdGEucmVzcG9uc2VUZXh0KS5lcnJvcnMuZW1haWxbMF0pOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9KTsNCjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vanMvbGlicy9zbWMvbXktc2VsZWN0aW9uLmpzIj48L3NjcmlwdD4NCg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJhamF4TW9kYWwiIHJvbGU9ImRpYWxvZyI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIiBpZD0iZXhhbXBsZU1vZGFsTG9uZ1RpdGxlIj5Sw6lzaWRlbmNlcyBJbW1vYmlsaWVyPC9oNT4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJhamF4TW9kYWwtYm9keSIgY2xhc3M9Im1vZGFsLWJvZHkiPjwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:10 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-16eme-2146147.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:11 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6Ik5vd0lXQXdGdUN1eFZ4cmNSa2s5K1E9PSIsInZhbHVlIjoiZEZJVEdRaitVUnZQUU8zYkdCS01EVmZuRTR3VWQ2VjJmakhiMG41YWg1XC9rQVwvbjZvV3Fwa1JnWE9mWWs3MEZVIiwibWFjIjoiZGIyN2RjMjI5MDI0NGQ5MWM4YmQyYTQwZjgxMjgxNzgzODZmZjdhNTE5NWJhM2I2YzZiNWExZGUxMjIwMmQ3NCJ9;
        expires=Wed, 10-Jun-2020 18:05:11 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6IldSWXVGT2Jaak9aY1wvTHdhelFhU1pRPT0iLCJ2YWx1ZSI6Iml1OFlFZkwzQnRQdjNIZkZocFc5STA0WnRjVHBxeUpLNENtUThUSmxFZHo0VHZKY0VNcW5QXC9nQ2ltZlp1TnJFIiwibWFjIjoiNzdhNzNhZmE0M2ZiMjAzNjNiNDE3ZjliNmNhMjk5OWY2Y2NhYWVkNjEzZjBmNDYwY2UzMmM3ZGU4M2JlYjE4NCJ9;
        expires=Wed, 10-Jun-2020 18:05:11 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13630'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:11 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-17eme-2151248.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:11 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IkxmZDFYZUdGbXdMRUhDOEQxQWtVRUE9PSIsInZhbHVlIjoieDdBZHZzMWxENzd2azhER0s5R0lSM0ZcLzlEemVOelNRQnEzdDFoYVwvUXZzek5zMExvVEQ3NUljUSs1UjN6OGNzIiwibWFjIjoiYWI0MGMyNzc2M2I2MDZkM2ZlMGExNWQ2MGQyYWYxMTNjNWEyYTk0Y2E5MjdmNWFmNmM1NWYxZTI2MGUxZTA4ZiJ9;
        expires=Wed, 10-Jun-2020 18:05:11 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6ImhnaDNkV1h0UWRaQ085OFFpd0RyR2c9PSIsInZhbHVlIjoiU1R1U2hCWFBUY3FoNDV2cnpLNkpKZ1YwNlA4dmZXQjFwTDVUeUJuS1Z5NlV6YkJ2Q1lWeXRKVXV6MkFiaWUxayIsIm1hYyI6ImE3NzVmYzcxYzAwMTI4NTg3MzY0Mzc1OTMxNmI1OGMzYWY3Zjc5N2U3OTJlMzYxMzlmMGQ4NWExMDMxMGM0ZTMifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:11 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12289'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:11 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-17eme-2023354.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IldRb2FVWHU4RkZ5aGNpSis5MTVDb3c9PSIsInZhbHVlIjoiZXc5MVNcLzlhc3psRk14RFk1K2VqVkZWN2hDc1lZUXVhMjZseFM3Z1lOYm44TFF2anlZUnNSdFZhZnlIenNTVlYiLCJtYWMiOiIyZGIwM2JhYjcyZmY1MWUxNjBlYzU5OGMzOGY0ZTYyYzMyMDFhMmE4NTRlNWQzYTkxOTUxZjZkN2ExNTdhYjE3In0%3D;
        expires=Wed, 10-Jun-2020 18:05:12 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6IitLaXVtRkRRQWJnd08wVGl4QkJ1NGc9PSIsInZhbHVlIjoidGhFbEduelptRFNWNVdRQmxmQ1htY0NkNVhDQ3ZCQTdFdHF0NWJOaUNcL2hZTlwvRDkwcTlQcUpoRDk2QmdIOHF4IiwibWFjIjoiZWZiZjlhNDgxOTM4YWEyMTcyMzI5NTQxYTE0NWE3OWJlNjhiMzIxNjQwZjczOWE4NGFjMTg0OWU4MzdjZGM4MyJ9;
        expires=Wed, 10-Jun-2020 18:05:12 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13500'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:12 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-18eme-2151239.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:13 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IkFUYUY3a2V1TEZwcU5BbVA5RTJhUWc9PSIsInZhbHVlIjoiTzFlUUl6Z0VqZmRkNm8zRUlrMlwvY3BwOXZkb3lwODV0U21nbmkzQm5DMEJmTmpZdjNyY0NCc2l1eThoYWcyekUiLCJtYWMiOiIxM2M2ZDk2Njk5MTE2N2RhYjE5MzMyZDA5M2E2YTlkMmI0MWZiZDI2ODQ3MjU4MWRjMjFlNDcyNzcyMDI0NzBlIn0%3D;
        expires=Wed, 10-Jun-2020 18:05:13 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6ImU1XC9qeXhNS25RcnBTcFIydHZra2NnPT0iLCJ2YWx1ZSI6InpcL2J4S3d4RFBoaUpYVDUzcEJ1QVZDXC9sN1hUSWdlSTlaTzl5alM3dHk3d2FoUXVkaDMyRDd4KzNYeTd5RFY5WSIsIm1hYyI6IjRlY2ZmOTZmYjRkOTE0YTJlZTc1NzFjYTlhMDVmOGQyYWViMWQ2MzA5ZmIwODhmODhmMmJjZmM3YWI5NWQ3MTkifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:13 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12291'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:13 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-maison-paris-20eme-2145587.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:14 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IlNkbktBdE43SERqeGJyNkQ1Y3FqUHc9PSIsInZhbHVlIjoielRWSFwvVCtsbmpCa0FnZzA1djdwczNkaVNZcjB2YmN3QWVYVVBacWJNTjZKbElwM1dDdUVcL1FGbEhyZ0xBdGUyIiwibWFjIjoiYzRlNjMxNWRlNzc1MDQ1MjA1OTVmZmIxNzIyMjUzYzU1YThlNDIyMmFjNWQyZjg5YTk1Y2NjZmVkYTMxOTg3YiJ9;
        expires=Wed, 10-Jun-2020 18:05:14 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6IlQ5SDh0QU1lRWpib0picHJmZXZ6NlE9PSIsInZhbHVlIjoiNjFlbkhENW5Kcm9KRHNNVEhLWlU3ektkdW5CRjIzaW1CdXlraWV2VGNCSFhBVHhrVjdcL0dJaXU3QjIwcm1QeVEiLCJtYWMiOiIwNTI0ZWMxZjY2YzM0NjJiMDJmOTVhNmU1YjgzNGQyMmE4ZTgwZTExYzJmZjM1YTI5MjJjYWY2OWE4ZjMxOTVhIn0%3D;
        expires=Wed, 10-Jun-2020 18:05:14 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12144'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:14 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-1er-2158039.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:15 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6ImVkUzk2TEZmYWZ2VnBVcGNiWUZqY2c9PSIsInZhbHVlIjoicnUzak1HaWVoc2xVQmFUaENnKzVpNGc1dlVFXC9YU0dNTXllb0w2eEpvM2NVZkw4eDR1NmZGSHJLUDZpXC96TTl0IiwibWFjIjoiODkwMDAyNmYxNDIxNzgwODRhN2JhZTYwNWRjNGEzNGFhZjZiYjNmMmFkYmI1MzU1NWVhNzk4YzE0MGIwMTVhZiJ9;
        expires=Wed, 10-Jun-2020 18:05:15 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6ImVsZ3Y5Q1hxaEk1ZnJRMFplSEZObXc9PSIsInZhbHVlIjoiQ0F0NXVEV09mOHJNNmVuNlhocXhlNlpLZXZYcjRONm5CVTR1cjhwREk3TEpyNFZIalo1dGlIdUNRc3VoUlwvcGwiLCJtYWMiOiJhMzhhNjhlOGEyNTI1MjYyYTNkNTU0NWQ0MDRmMzBhMTMwNTFiNjM5MGUwOTYyNmVhNWZmMjQ3YjQ4YmI3MTQ2In0%3D;
        expires=Wed, 10-Jun-2020 18:05:15 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12351'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:15 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-1er-2158071.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:15 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6Ik02aTEweG1DczJrZ2NKbk51VG5ycVE9PSIsInZhbHVlIjoib3dOQXU1ZGZZR0YxU0VsenBHYTNoTTRSTTZabWhTR2thSStvQ0d5ejJ6dlVhRzVaTjJBRjNqdXdlaG9UaGNvdiIsIm1hYyI6ImVjNTUyODNhYjM5ZTc4N2ZhYWViMTQyZTcyMGYyMTQ2YzRhNTYxYjJhZWJkYWE5MzI0Y2Y1YTViYWFhZWVlMzMifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:15 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6ImVBczRLcGhMMDhZT3A4dnBad2o0WUE9PSIsInZhbHVlIjoieTY3T1lsZU1IamJCMnBwNUlcL0dsMlZ0RFRDQVwvWlRzVWhTRlcwR2F3MnV0dVdKQkZVQnRmUlN4bnJrXC9jcG15NyIsIm1hYyI6ImMzYTBmOTNjZWMzYmQ1YzgxODJjYWVlNDM1MjU1MjQ5MTUyNWZjYzJiNDg2YzdjYWJjYzQ2YzA0YjRlNjFlNmUifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:15 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12305'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFkb2N0eXBlIGh0bWw+DQo8aHRtbCBsYW5nPSJmciI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCIgLz4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkFwcGFydGVtZW50LCBsdXhlIGV0IHByZXN0aWdlLCDDoCB2ZW5kcmUgw6AgUEFSSVMgMUVSIC0gUEhJTElQUEUgTUVOQUdFUiAmIE5JQ09MQVMgSFVHIC0gMjE1ODA3MSI+DQogICAgPG1ldGEgbmFtZT0icm9ib3RzIiBjb250ZW50PSJpbmRleCxmb2xsb3csYWxsIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iYmVsbGUgbWFpc29uIMOgIHZlbmRyZSwgaW1tb2JpbGllciBwcmVzdGlnZSBjw7R0ZSBhenVyLCBkZW1ldXJlcyBkZSByw6p2ZSBhIGxvdWVyLCBSw6lzaWRlbmNlcyBJbW1vYmlsaWVyLCBpbW1vYmlsaWVyIGPDtHRlIGQgYXp1ciwgYWdlbmNlcyBpbW1vYmlsacOocmVzLCBwcm9wcmnDqXTDqXMgw6AgdmVuZHJlLCB2aWxsYSwgYXBwYXJ0ZW1lbnQsIG1hcywgYmFzdGlkZXMsIHLDqXNpZGVuY2VzIHNlY29uZGFpcmVzLCBsb2Z0LCBtYWlzb24gY29udGVtcG9yYWluZSwgdmlsbGEgZCBhcmNoaXRlY3RlLCBwZW50aG91c2UsIGRlbWV1cmUsIGNow6J0ZWF1LCB2aWxsYSBzdXIgbGUgdG9pdCwgdGVycmFpbiwgcGlzY2luZSwgdnVlIG1lciwgcGllZHMgZGFucyBsIGVhdSwgdGVycmFzc2UsIG1hZ2F6aW5lLCBwcmVzc2UgaW1tb2JpbGnDqHJlLCBtw6lkaXRlcnJhbsOpZSwgcHJvdmVuY2UsIHN1ZCBkZSBsYSBmcmFuY2UsIGFscGVzIG1hcml0aW1lcywgdmFyLCBuaWNlLCBtZW50b24sIG1vbmFjbywgc2FpbnQtdHJvcGV6LCBhbnRpYmVzLCBjYW5uZXMsIHNhaW50IHBhdWwsIGFycmnDqHJlIHBheXMsIGx1eGUsIGNoYXJtZSwiPg0KICAgICAgICA8bWV0YSBuYW1lPSJjc3JmLXRva2VuIiBjb250ZW50PSJ5STAzd2x0Z2t1eDhXSzFQeTlHZ29kQWRSMmNiNXZEa1Z2ZkJqd3c5Ij4NCg0KICAgICAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci83NS9hbm5vbmNlLXZlbnRlLWFwcGFydGVtZW50LXBhcmlzLTFlci0yMTU4MDcxLmh0bWwiPg0KICAgIA0KICAgIA0KICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJmYjphcHBfaWQiIGNvbnRlbnQ9IjE1NzgyNzkwMTM3ODA5OSIgLz4NCiAgICAgICAgICAgICAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9InByb2R1Y3QiIC8+DQogICAgICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvNzUvYW5ub25jZS12ZW50ZS1hcHBhcnRlbWVudC1wYXJpcy0xZXItMjE1ODA3MS5odG1sIiAvPg0KICAgICAgICAgICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IkFwcGFydGVtZW50IMOgIHZlbmRyZSBQQVJJUyAxRVIgLSA0IHBpw6hjZXMgOTNtwrIiIC8+DQogICAgICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iUHLDqHMgZGUgbGEgcGxhY2UgZGUgbGEgQ29uY29yZGUsIGRhbnMgdW4gYmVsIGltbWV1YmxlIGRlIDE4NDAsIGF1IDRlIMOpdGFnZSBhdmVjIGFzY2Vuc2V1ciDDoCBwYXJ0aXIgZHUgMWVyLCB1biBiZWwgYXBwYXJ0ZW1lbnQgZGUgOTMgbcKyIGVudGnDqHJlbWVudCByw6lub3bDqSwgY29tcHJlbmFudCA6IHNhbG9uLCBzYWxsZSDDoCBtYW5nZXIgYXZlYyBjdWlzaW5lIG91dmVydGUsIGNoYW1icmUgcHJpbmNpcGFsZSBzdXIgY291ciBhdmVjIHNhbGxlIGRlIGRvdWNoZSBldCBkcmVzc2luZywgMmUgY2hhbWJyZSBhdmVjIHNhbGxlIGRlIGJhaW5zLiBDYXZlLiBDaGVtaW7DqWVzLCBwb3V0cmVzIGFwcGFyZW50ZXMuIFVuIHBhcmZhaXQgcGllZC3DoC10ZXJyZSBkYW5zIHVuIHF1YXJ0aWVyIHJlY2hlcmNow6kuIiAvPg0KICAgICAgICAgICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vbWVkaWFzLnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vcGljdC9mNjAweDQwMC8yLzQvNi82L2V4dF8wXzI0NjY1MzYuanBnIiAvPg0KICAgICAgICAgICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6d2lkdGgiIGNvbnRlbnQ9IjYwMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmhlaWdodCIgY29udGVudD0iNDAwIiAvPg0KICAgICAgICAgICAgDQogICAgPHRpdGxlPkFwcGFydGVtZW50LCBsdXhlIGV0IHByZXN0aWdlLCDDoCB2ZW5kcmUgUEFSSVMgMUVSIC0gNCBwacOoY2VzIDkzbcKyIC0gMjE1ODA3MTwvdGl0bGU+DQoNCiAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPg0KICAgIHsNCiAgICAiQGNvbnRleHQiOiAiaHR0cHM6Ly9zY2hlbWEub3JnIiwNCiAgICAiQHR5cGUiOiAiT3JnYW5pemF0aW9uIiwNCiAgICAidXJsIjogImh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20iLA0KICAgICJsb2dvIjogImh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2xvZ29zL0xvZ28tR3Jpcy0yOTgucG5nIg0KICAgIH0NCiAgICA8L3NjcmlwdD4NCg0KICAgIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9jc3MvbWFpbi5taW4uY3NzP2lkPWY3NTAzOThiNDFhYjI3NmE2ZjI0Ij4NCiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9jc3MvbGlicy9zbGljay5jc3M/aWQ9ZjM4YjJkYjEwZTAxYjE1NzI3MzIiLz4NCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2Nzcy9mb250YXdlc29tZS1hbGwuY3NzIi8+DQogICAgPHN0eWxlPg0KICAgICAgICANCiAgICAgICAgYm9keSB7DQogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7DQogICAgICAgIH0NCiAgICA8L3N0eWxlPg0KDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICA8c2NyaXB0IHNyYz0iLy9zdGF0aWMuY3JpdGVvLm5ldC9qcy9sZC9sZC5qcyIgYXN5bmM9ImFzeW5jIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdD4NCiAgICAgICAgICAgIC8qb25seSBmaXJzdCB0aGUgMyBhcmUgc2F2ZWQqLw0KICAgICAgICAgICAgd2luZG93LmNyaXRlb19xID0gd2luZG93LmNyaXRlb19xIHx8IFtdOw0KICAgICAgICAgICAgd2luZG93LmNyaXRlb19xLnB1c2goewogICAgImV2ZW50IjogInNldEFjY291bnQiLAogICAgImFjY291bnQiOiAxNjI4Mgp9LHsKICAgICJldmVudCI6ICJzZXRTaXRlVHlwZSIsCiAgICAidHlwZSI6ICJkIgp9LHsKICAgICJldmVudCI6ICJ2aWV3SXRlbSIsCiAgICAiaXRlbSI6IDIxNTgwNzEKfSk7DQogICAgICAgIDwvc2NyaXB0Pg0KICAgIA0KICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgICAgICAvLyBUcm92aXQgcGl4ZWwgY29udmVyc2lvbg0KICAgICAgICAgICAgKGZ1bmN0aW9uKGkscyxvLGcscixhLG0pe2lbJ1Ryb3ZpdEFuYWx5dGljc09iamVjdCddPXI7aVtyXT1pW3JdfHxmdW5jdGlvbigpew0KICAgICAgICAgICAgKGlbcl0ucT1pW3JdLnF8fFtdKS5wdXNoKGFyZ3VtZW50cyl9LGlbcl0ubD0xKm5ldyBEYXRlKCk7YT1zLmNyZWF0ZUVsZW1lbnQobyksDQogICAgICAgICAgICBtPXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07YS5hc3luYz0xO2Euc3JjPWc7bS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLG0pDQogICAgICAgICAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2h0dHBzOi8vYW5hbHl0aWNzLnRyb3ZpdC5jb20vdHJvdml0LWFuYWx5dGljcy5qcycsJ3RhJyk7DQoNCiAgICAgICAgICAgIHRhKCdpbml0JywgJ2ZyJywgMSwgJ2RmYjMzYzIyZGU2YTIzNjg0NTg2MDlhZjY5ZDYxZGIzJyk7DQogICAgICAgICAgICA8L3NjcmlwdD4NCiAgICANCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9qcy9sYW5nL2ZyLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0Pg0KICAgICAgICAvLyBQb2x5ZmlsbCBhZGRFdmVudExpc3RlbmVyIElFOCBvdSBtb2lucw0KICAgICAgICBpZiAoIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgJiYgZG9jdW1lbnQuYXR0YWNoRXZlbnQpIHsNCiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudE5hbWUsIGNhbGxiYWNrKSB7DQogICAgICAgICAgICAgICAgZXZlbnROYW1lID0gKGV2ZW50TmFtZSA9PT0gJ0RPTUNvbnRlbnRMb2FkZWQnKSA/ICdvbmxvYWQnIDogZXZlbnROYW1lOw0KICAgICAgICAgICAgICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KGV2ZW50TmFtZSwgY2FsbGJhY2spOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEZvbmN0aW9uIGluZGlzcGVuc2FibGUgw6AgY2hhcmdlciBhdSBwbHVzIHZpdGUNCiAgICAgICAgZnVuY3Rpb24gaW1nRmFsbGJhY2soaW1nLCBpZEFubm9uY2UpIHsNCiAgICAgICAgICAgIGlmIChpZEFubm9uY2UpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cuc21jUGhvdG9FcnJvcnMgPSB3aW5kb3cuc21jUGhvdG9FcnJvcnMgPyB3aW5kb3cuc21jUGhvdG9FcnJvcnMgOiB7fTsNCg0KICAgICAgICAgICAgICAgIGlmICghd2luZG93LnNtY1Bob3RvRXJyb3JzW2ltZy5zcmNdKSB7DQogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zbWNQaG90b0Vycm9yc1tpbWcuc3JjXSA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICdpZEFubm9uY2UnOiBpZEFubm9uY2UsDQogICAgICAgICAgICAgICAgICAgICAgICAnc3JjJzogaW1nLnNyYw0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGltZy5vbmVycm9yID0gbnVsbDsNCiAgICAgICAgICAgIGltZy5zcmMgPSAnL2ltYWdlcy9waG90b19yZW1wbGFjZS5qcGcnOw0KICAgICAgICB9DQogICAgPC9zY3JpcHQ+DQogICAgPHNjcmlwdD4NCiAgICAgICAgIWZ1bmN0aW9uKGYsYixlLHYsbix0LHMpDQogICAgICAgIHtpZihmLmZicSlyZXR1cm47bj1mLmZicT1mdW5jdGlvbigpe24uY2FsbE1ldGhvZD8NCiAgICAgICAgICAgIG4uY2FsbE1ldGhvZC5hcHBseShuLGFyZ3VtZW50cyk6bi5xdWV1ZS5wdXNoKGFyZ3VtZW50cyl9Ow0KICAgICAgICAgICAgaWYoIWYuX2ZicSlmLl9mYnE9bjtuLnB1c2g9bjtuLmxvYWRlZD0hMDtuLnZlcnNpb249JzIuMCc7DQogICAgICAgICAgICBuLnF1ZXVlPVtdO3Q9Yi5jcmVhdGVFbGVtZW50KGUpO3QuYXN5bmM9ITA7DQogICAgICAgICAgICB0LnNyYz12O3M9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShlKVswXTsNCiAgICAgICAgICAgIHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCxzKX0od2luZG93LGRvY3VtZW50LCdzY3JpcHQnLA0KICAgICAgICAgICAgJ2h0dHBzOi8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fVVMvZmJldmVudHMuanMnKTsNCiAgICAgICAgZmJxKCdpbml0JywgJzM0NDQxMTA0OTQ3NDQyNCcpOw0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgZmJxKCd0cmFjaycsICdWaWV3Q29udGVudCcpOw0KICAgIDwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdD4NCiAgICAgICAgdmFyIGdhSnNIb3N0ID0gKCgiaHR0cHM6IiA9PSBkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCkgPyAiaHR0cHM6Ly9zc2wuIiA6ICJodHRwOi8vd3d3LiIpOw0KICAgICAgICBkb2N1bWVudC53cml0ZSgnPHNjcicgKyAnaXB0IHNyYz0iJyArIGdhSnNIb3N0ICsgJ2dvb2dsZS1hbmFseXRpY3MuY29tL2dhLmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyJyArICdpcHQ+Jyk7DQogICAgPC9zY3JpcHQ+DQogICAgPHNjcmlwdD4NCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIHZhciBwYWdlVHJhY2tlciA9IF9nYXQuX2dldFRyYWNrZXIoIlVBLTEyODM2ODUyLTEiKTsNCiAgICAgICAgICAgIHBhZ2VUcmFja2VyLl90cmFja1BhZ2V2aWV3KCk7DQogICAgICAgIH0gY2F0Y2goZXJyKSB7fQ0KICAgIDwvc2NyaXB0Pg0KDQo8L2hlYWQ+DQoNCjxib2R5IGNsYXNzPSJmaWNoZS1hbm5vbmNlIj4NCg0KICAgIDxkaXYgaWQ9ImZiLXJvb3QiPjwvZGl2Pg0KICAgIDxzY3JpcHQ+KGZ1bmN0aW9uKGQsIHMsIGlkKSB7DQogICAgdmFyIGpzLCBmanMgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdOw0KICAgIGlmIChkLmdldEVsZW1lbnRCeUlkKGlkKSkgcmV0dXJuOw0KICAgIGpzID0gZC5jcmVhdGVFbGVtZW50KHMpOyBqcy5pZCA9IGlkOw0KICAgIGpzLnNyYyA9ICJodHRwczovL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qcyN4ZmJtbD0xJnZlcnNpb249djMuMCI7DQogICAgZmpzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGpzLCBmanMpOw0KICAgIH0oZG9jdW1lbnQsICdzY3JpcHQnLCAnZmFjZWJvb2stanNzZGsnKSk7PC9zY3JpcHQ+DQoNCiAgICA8aGVhZGVyPg0KICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItbGlnaHQiPg0KICAgICAgICANCiAgICAgICAgPGRpdiBjbGFzcz0iZC1tZC1ub25lIj4NCiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im5hdmJhci10b2dnbGVyIiB0eXBlPSJidXR0b24iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNuYXZiYXJOYXZBbHRNYXJrdXAiDQogICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9Im5hdmJhck5hdkFsdE1hcmt1cCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtbGFiZWw9IlRvZ2dsZSBuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICA8aW1nIGFsdD0ibWVudUJ1cmdlciIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9pY29ucy9OYXYvTWVudVdoaXRlLnN2ZyI+DQogICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgDQogICAgICAgIDxkaXYgY2xhc3M9ImQtbm9uZSBkLW1kLWJsb2NrIG1lbnVEZXNrdG9wIj4NCiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im5hdmJhci10b2dnbGVyIGJ0bk1lbnUiIHR5cGU9ImJ1dHRvbiIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI25hdmJhck5hdkFsdE1hcmt1cCINCiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0ibmF2YmFyTmF2QWx0TWFya3VwIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1sYWJlbD0iVG9nZ2xlIG5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkLW5vbmUgZC1tZC1pbmxpbmUtYmxvY2siPjxpIGNsYXNzPSJyaSByaS1iYXJzIG1yLTIiPjwvaT5NZW51PC9zcGFuPg0KICAgICAgICAgICAgPC9idXR0b24+DQoNCiAgICAgICAgICAgIDxhIGlkPSJoZWFkZXJQb2x5bW9ycGhUb3BMZWZ0TGluayIgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hbGVydGUtbWFpbC5odG1sIj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJuYXZiYXItdG9nZ2xlciAiIHR5cGU9ImJ1dHRvbiI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkLW5vbmUgZC1sZy1pbmxpbmUtYmxvY2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvaWNvbnMvTmF2L05vdGlmV2hpdGUuc3ZnIj5DcsOpZXIgdW5lIGFsZXJ0ZQ0KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICA8L2E+DQoNCiAgICAgICAgICAgIDwhLS08YSBpZD0iaGVhZGVyUG9seW1vcnBoVG9wTGVmdExpbmsiIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvZXN0aW1hdGlvbi1pbW1vYmlsaWVyZS5odG1sIj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJuYXZiYXItdG9nZ2xlciAgbWwtMyIgdHlwZT0iYnV0dG9uIj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImQtbm9uZSBkLWxnLWlubGluZS1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9pY29ucy9lc3RpbWF0aW9uLnN2ZyI+RXN0aW1hdGlvbiBpbW1vYmlsacOocmUNCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9hPi0tPg0KDQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIA0KDQogICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIiPjxpbWcgYWx0PSJsb2dvUkkiIHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9pbWFnZXMvbG9nb3MvTG9nby1XaGl0ZS5wbmciPjwvYT4NCg0KICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgPGEgaHJlZj0ibWFpbHRvOmNvbnRhY3RAcmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbSIgY2xhc3M9Im1yLTMgc2VsZWN0aW9uLWhlYWQiPg0KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9pY29ucy9NYWlsLVdoaXRlLnN2ZyIgYWx0PSJNYWlsIiB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICA8L2E+DQogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL21hLXNlbGVjdGlvbi5odG1sIiBjbGFzcz0ibXItMyBzZWxlY3Rpb24taGVhZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0icmkgcmktaGVhcnQiIGlkPSJzZWxlY3Rpb24taGVhZC1pY29uIj48L2k+IA0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0idG90YWxfYW5ub25jZXNfZmF2b3JpcyI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0ic2VsZWN0aW9uLWhlYWQtbGFiZWwiPjwvc3Bhbj4NCiAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvcHJvZmlsLmh0bWwiPg0KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS11c2VyIG1yLTMiPjwvaT4NCiAgICAgICAgICAgIDwvYT4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24gZmxvYXQtcmlnaHQgZC1ub25lIGQtbWQtYmxvY2siPg0KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSBkcm9wZG93bi10b2dnbGUgc2VsZWN0TGFuZyIgaHJlZj0iIyIgcm9sZT0iYnV0dG9uIiBpZD0iZHJvcGRvd25NZW51TGluayIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+DQogICAgICAgICAgICAgICAgICAgIGZyDQogICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCIgYXJpYS1sYWJlbGxlZGJ5PSJkcm9wZG93bk1lbnVMaW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZW4iPkVOPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCg0KICAgIDwvbmF2Pg0KDQogICAgPGRpdiBjbGFzcz0iY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIiBpZD0ibmF2YmFyTmF2QWx0TWFya3VwIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1uYXYiPg0KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtaXRlbSBuYXYtbGluayBtdC01ICINCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbSI+UmVjaGVyY2hlciB1biBiaWVuPC9hPg0KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtaXRlbSBuYXYtbGluayAiDQogICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYWdlbmNlcy1pbW1vYmlsaWVyZXMtcHJlc3RpZ2UtMS5odG1sIj4NCiAgICAgICAgICAgICAgICAgICAgTGVzIGFnZW5jZXM8L2E+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1pdGVtIG5hdi1saW5rICINCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hbm5vbmNlcy5odG1sIj5hcHBhcnRlbWVudHMgZXQgdmlsbGFzIMOgIHZlbmRyZTwvYT4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWl0ZW0gbmF2LWxpbmsgIg0KICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL21hZ2F6aW5lLWltbW9iaWxpZXIiPkxlIE1hZ2F6aW5lPC9hPg0KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtaXRlbSBuYXYtbGluayIgdGFyZ2V0PSJfQmxhbmsiDQogICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtbHV4dXJ5cmVudGFscy5jb20vZnIiPkxvY2F0aW9ucyBzYWlzb25uacOocmVzIGRlIHByZXN0aWdlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1pdGVtIG5hdi1saW5rIGQtYmxvY2sgZC14cy1ibG9jayBkLXNtLW5vbmUgZC1tZC1ub25lIGQtbGctbm9uZSIgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9lbiI+QW5nbGFpczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lbnVNb2JpbGVCb3R0b20iPg0KICAgICAgICAgICAgICAgIDxpbWcgYWx0PSJzZXBhcmF0b3IiIHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9pbWFnZXMvaWNvbnMvTmF2L0NhcnJlLURpdmlkZXIuc3ZnIj4NCiAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9CTEFOSyIgaHJlZj0iaHR0cHM6Ly9zZWN1cmUuc21jLWZyYW5jZS5jb20vY2xpZW50cy9sb2dpbl9yaS5hc3AiPk1vbiBlc3BhY2UgcHJvZmVzc2lvbm5lbDwvYT4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPGltZyBhbHQ9InNlcGFyYXRvciIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9pY29ucy9OYXYvQ2FycmUtRGl2aWRlci5zdmciPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Im1haWx0bzpjb250YWN0QHJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20iPk5vdXMgY29udGFjdGVyPC9hPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KPC9oZWFkZXI+DQoNCiAgICANCg0KDQogICAgDQogICAgICAgICAgDQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1jb3V2ZXJ0dXJlcyI+DQogICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vbWVkaWFzLnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vcGljdC9mMTIwMHg4MDAvMi80LzYvNi9leHRfMF8yNDY2NTM2LmpwZyINCiAgICAgICAgICAgICAgICBhbHQ9IkNvdXZlcnR1cmUiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vbWVkaWFzLnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vcGljdC9mMTIwMHg4MDAvMi80LzYvNi9leHRfMV8yNDY2NTM2LmpwZyINCiAgICAgICAgICAgICAgICBhbHQ9IkNvdXZlcnR1cmUiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vbWVkaWFzLnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vcGljdC9mMTIwMHg4MDAvMi80LzYvNi9leHRfMl8yNDY2NTM2LmpwZyINCiAgICAgICAgICAgICAgICBhbHQ9IkNvdXZlcnR1cmUiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCBwLTAgYnQtaW50ZXJpZXVyZSIgaWQ9ImFwcCI+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSBtb2RhbC1kb3NzaWVyIiBpZD0ibW9kYWxEZW1hbmRlRG9zc2llcjIxNTgwNzEiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiANCiAgICBhcmlhLWxhYmVsbGVkYnk9Im1vZGFsRGVtYW5kZURvc3NpZXJMYWJlbCIgYXJpYS1oaWRkZW49InRydWUiPg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtcmkiIA0KICAgICAgICByb2xlPSJkb2N1bWVudCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIHRleHQtdXBwZXJjYXNlIiANCiAgICAgICAgICAgICAgICAgICAgaWQ9Im1vZGFsRGVtYW5kZURvc3NpZXJMYWJlbCI+UmVjZXZvaXIgbGUgZG9zc2llciBjb21wbGV0PC9oNT4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIGNsb3NlLWNvbnRhY3QiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIA0KICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4NCiAgICAgICAgICAgICAgICA8Y29udGFjdC1mb3JtIDpvYmpldC1wYXItZGVmYXV0PSInZG9zc2llciciDQogICAgICAgICAgICAgICAgICAgIDphZmZpY2hlci1vYmpldC1kZW1hbmRlPSInMCciDQogICAgICAgICAgICAgICAgICAgIDplbnZvaS1hdXRvbWF0aXF1ZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6ZGVtYW5kZS1leHByZXNzLWRlc2FjdGl2ZWU9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOnJlZmVyZW5jZT0iJzI0NjY1MzYnIg0KICAgICAgICAgICAgICAgICAgICA6aWQtYWdlbmNlPSInNjYzOCciDQogICAgICAgICAgICAgICAgICAgIDppZC1hbm5vbmNlPSInMjE1ODA3MSciDQogICAgICAgICAgICAgICAgICAgIDp0ZWxlcGhvbmUtb2JsaWdhdG9pcmUtYW5ub25jZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6bm9tLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOnByZW5vbS11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDpwYXlzLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOnRlbGVwaG9uZS11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDplbWFpbC11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDpsYW5ndWU9IidmciciDQogICAgICAgICAgICAgICAgICAgIDpob3Jpem9udGFsPSInMCciDQogICAgICAgICAgICAgICAgICAgIDphZmZpY2hlci1tb2RhbD0iJzAnIj48L2NvbnRhY3QtZm9ybT4NCiAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICA8c21hbGwgaWQ9ImZvcm11bGFpcmVDb25maWRlbnRpYWxpdGUiIGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+DQogICAgICAgICAgICAgICAgICAgIENvbnN1bHRlciBub3RyZSA8YSB0YXJnZXQ9ImJsYW5rIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL3ZpZS1wcml2ZWUuaHRtbCIgdGl0bGU9InZpZSBwcml2w6llIj5wb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT4uDQogICAgICAgICAgICAgICAgPC9zbWFsbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSBtb2RhbC1yZHYiIGlkPSJtb2RhbERlbWFuZGVSZW5kZXpWb3VzMjE1ODA3MSIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciDQogICAgYXJpYS1sYWJlbGxlZGJ5PSJtb2RhbERlbWFuZGVSZW5kZXpWb3VzTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsLXJpIiByb2xlPSJkb2N1bWVudCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIHRleHQtdXBwZXJjYXNlIiANCiAgICAgICAgICAgICAgICAgICAgaWQ9Im1vZGFsRGVtYW5kZVJlbmRlelZvdXNMYWJlbCI+T2J0ZW5pciB1biByZW5kZXotdm91czwvaDU+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSBjbG9zZS1jb250YWN0IiBkYXRhLWRpc21pc3M9Im1vZGFsIiANCiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPGNvbnRhY3QtZm9ybSA6b2JqZXQtcGFyLWRlZmF1dD0iJ3JkdiciDQogICAgICAgICAgICAgICAgICAgIDplbnZvaS1hdXRvbWF0aXF1ZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6ZGVtYW5kZS1leHByZXNzLWRlc2FjdGl2ZWU9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOmFmZmljaGVyLW9iamV0LWRlbWFuZGU9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOnJlZmVyZW5jZT0iJzI0NjY1MzYnIg0KICAgICAgICAgICAgICAgICAgICA6aWQtYWdlbmNlPSInNjYzOCciDQogICAgICAgICAgICAgICAgICAgIDppZC1hbm5vbmNlPSInMjE1ODA3MSciDQogICAgICAgICAgICAgICAgICAgIDp0ZWxlcGhvbmUtb2JsaWdhdG9pcmUtYW5ub25jZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6bm9tLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOnByZW5vbS11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDpwYXlzLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOnRlbGVwaG9uZS11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDplbWFpbC11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDpsYW5ndWU9IidmciciDQogICAgICAgICAgICAgICAgICAgIDpob3Jpem9udGFsPSInMCciDQogICAgICAgICAgICAgICAgICAgIDphZmZpY2hlci1tb2RhbD0iJzAnIj48L2NvbnRhY3QtZm9ybT4NCiAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICA8c21hbGwgaWQ9ImZvcm11bGFpcmVDb25maWRlbnRpYWxpdGUiIGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+DQogICAgICAgICAgICAgICAgICAgIENvbnN1bHRlciBub3RyZSA8YSB0YXJnZXQ9ImJsYW5rIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL3ZpZS1wcml2ZWUuaHRtbCIgdGl0bGU9InZpZSBwcml2w6llIj5wb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT4uDQogICAgICAgICAgICAgICAgPC9zbWFsbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSBtb2RhbC1yYXBwZWwiIGlkPSJtb2RhbERlbWFuZGVSYXBwZWwyMTU4MDcxIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyINCiAgICBhcmlhLWxhYmVsbGVkYnk9Im1vZGFsRGVtYW5kZVJhcHBlbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCBtb2RhbC1yaSIgcm9sZT0iZG9jdW1lbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtb2RhbC10aXRsZSB0ZXh0LXVwcGVyY2FzZSIgDQogICAgICAgICAgICAgICAgICAgIGlkPSJtb2RhbERlbWFuZGVSYXBwZWxMYWJlbCI+w4p0cmUgYXBwZWzDqSBhdSBwbHVzIHZpdGU8L2g1Pg0KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UgY2xvc2UtY29udGFjdCIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgDQogICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDxjb250YWN0LWZvcm0gOm9iamV0LXBhci1kZWZhdXQ9IidyYXBwZWwnIg0KICAgICAgICAgICAgICAgICAgICA6ZW52b2ktYXV0b21hdGlxdWU9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOmRlbWFuZGUtZXhwcmVzcy1kZXNhY3RpdmVlPSInMCciDQogICAgICAgICAgICAgICAgICAgIDphZmZpY2hlci1vYmpldC1kZW1hbmRlPSInMCciDQogICAgICAgICAgICAgICAgICAgIDpyZWZlcmVuY2U9IicyNDY2NTM2JyINCiAgICAgICAgICAgICAgICAgICAgOmlkLWFnZW5jZT0iJzY2MzgnIg0KICAgICAgICAgICAgICAgICAgICA6aWQtYW5ub25jZT0iJzIxNTgwNzEnIg0KICAgICAgICAgICAgICAgICAgICA6dGVsZXBob25lLW9ibGlnYXRvaXJlLWFubm9uY2U9IicwJyINCiAgICAgICAgICAgICAgICAgICAgOm5vbS11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDpwcmVub20tdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6cGF5cy11dGlsaXNhdGV1cj0iJyciDQogICAgICAgICAgICAgICAgICAgIDp0ZWxlcGhvbmUtdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6ZW1haWwtdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6bGFuZ3VlPSInZnInIg0KICAgICAgICAgICAgICAgICAgICA6aG9yaXpvbnRhbD0iJzAnIg0KICAgICAgICAgICAgICAgICAgICA6YWZmaWNoZXItbW9kYWw9IicwJyI+PC9jb250YWN0LWZvcm0+DQogICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgPHNtYWxsIGlkPSJmb3JtdWxhaXJlQ29uZmlkZW50aWFsaXRlIiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPg0KICAgICAgICAgICAgICAgICAgICBDb25zdWx0ZXIgbm90cmUgPGEgdGFyZ2V0PSJibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci92aWUtcHJpdmVlLmh0bWwiIHRpdGxlPSJ2aWUgcHJpdsOpZSI+cG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6k8L2E+Lg0KICAgICAgICAgICAgICAgIDwvc21hbGw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibmF2aWdhdGlvbl9maWNoZSBodGhpbiI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wteGwtOCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBmb290ZXItc2xpZGVyLXBob3RvcyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQgY29sLTEgcHQtMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFqb3V0ZXJGYXZvcmlzIGFkZC1zZWxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0icmkgcmktaGVhcnQgbXItc20tMiBmbG9hdC1sZWZ0IGNvZXVyRmF2b3JpIiBkYXRhLWlkLWFubm9uY2U9IjIxNTgwNzEiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkLW5vbmUgZC1zbS1ibG9jayI+QWpvdXRlciBhdXggZmF2b3Jpczwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kIGNvbC0yIHB0LTIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIGRyb3B1cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLWxpbmsgZHJvcGRvd24tdG9nZ2xlIHBhcnRhZ2VyQW5ub25jZSIgcm9sZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS1zaGFyZS1hbHQgbXItc20tMiBmbG9hdC1sZWZ0Ij48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2siPlBhcnRhZ2VyPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaHJlZj0iIyIgZGF0YS10YXJnZXQ9IiNtb2RhbEVudm95ZXJBbWkiPkVtYWlsPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIG9uY2xpY2s9InR3ZWV0ZXJBbm5vbmNlKCkiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+UGFydGFnZXIgc3VyIFR3aXR0ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgdGFyZ2V0PSJfQkxBTksiIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PWh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvNzUvYW5ub25jZS12ZW50ZS1hcHBhcnRlbWVudC1wYXJpcy0xZXItMjE1ODA3MS5odG1sIj5QYXJ0YWdlciBzdXIgRmFjZWJvb2s8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IGNvbC1zbS0zIHRleHQtcmlnaHQgcHQtMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBIT1RPIDxzcGFuIGlkPSJpbmRleC1pbWFnZS1hY3R1ZWxsZSI+MTwvc3Bhbj4vMw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0icmkgcmktaW1hZ2UgbWwtMiI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIGNvbC1zbS0xIG5hdiBwLTEgcHQtMyBpbWFnZS1wcmVjZWRlbnRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtYXV0byI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS1jaGV2cm9uLWxlZnQiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBjb2wtc20tMSBuYXYgbmF2LXJpZ2h0IHAtMSBwdC0zIGNvbW1hbmRlcy1zbGlkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC1hdXRvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgaWQ9ImV0YXQtc2xpZGVyIiBjbGFzcz0iZmFzIGZhLXBhdXNlIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wgY29sLXNtLTEgbmF2IG5hdi1yaWdodCBwLTEgcHQtMyBpbWFnZS1zdWl2YW50ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LWF1dG8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0icmkgcmktY2hldnJvbi1yaWdodCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbXQteGwtNCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+DQogICAgICAgICAgICA8bmF2IGFyaWEtbGFiZWw9ImJyZWFkY3J1bWIiPg0KICAgICAgICAgICAgICAgIDxvbCAgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvQnJlYWRjcnVtYkxpc3QiIHR5cGVvZj0iQnJlYWRjcnVtYkxpc3QiIGNsYXNzPSJicmVhZGNydW1iIHBsLTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJpdGVtTGlzdEVsZW1lbnQiIGl0ZW1zY29wZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0xpc3RJdGVtIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaXRlbXByb3A9Iml0ZW0iIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiPkFjY3VlaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSIxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJpdGVtTGlzdEVsZW1lbnQiIGl0ZW1zY29wZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0xpc3RJdGVtIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaXRlbXByb3A9Iml0ZW0iIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hbm5vbmNlcy5odG1sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibmFtZSI+QW5ub25jZXM8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSIyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJpdGVtTGlzdEVsZW1lbnQiIGl0ZW1zY29wZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0xpc3RJdGVtIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaXRlbXByb3A9Iml0ZW0iIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9yZWdpb24taWxlLWRlLWZyYW5jZS5odG1sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibmFtZSI+SWxlLWRlLUZyYW5jZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icG9zaXRpb24iIGNvbnRlbnQ9IjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9Iml0ZW1MaXN0RWxlbWVudCIgaXRlbXNjb3BlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvTGlzdEl0ZW0iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpdGVtcHJvcD0iaXRlbSIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL3JlZ2lvbi1pbGUtZGUtZnJhbmNlL2RlcGFydGVtZW50LXBhcmlzLTc1Lmh0bWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJuYW1lIj5QYXJpczwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icG9zaXRpb24iIGNvbnRlbnQ9IjQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9Iml0ZW1MaXN0RWxlbWVudCIgaXRlbXNjb3BlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvTGlzdEl0ZW0iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpdGVtcHJvcD0iaXRlbSIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL3JlZ2lvbi1pbGUtZGUtZnJhbmNlL2RlcGFydGVtZW50LXBhcmlzLTc1L3ZpbGxlLXBhcmlzLTFlci0zMjU0OS5odG1sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibmFtZSI+UGFyaXMgMWVyPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJwb3NpdGlvbiIgY29udGVudD0iNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0iaXRlbUxpc3RFbGVtZW50IiBpdGVtc2NvcGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9MaXN0SXRlbSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGl0ZW1wcm9wPSJpdGVtIiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvNzUvYXBwYXJ0ZW1lbnQvdmVudGUvbGlzdGluZy1iaWVucy1wYXJpcy0xZXItMzI1NDkuaHRtbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiPkFwcGFydGVtZW50cyDDoCB2ZW5kcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSI2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJpdGVtTGlzdEVsZW1lbnQiIGl0ZW1zY29wZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0xpc3RJdGVtIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIGFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJuYW1lIj5GaWNoZSBhbm5vbmNlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icG9zaXRpb24iIGNvbnRlbnQ9IjciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQoNCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1zY29wZQ0KICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0FwYXJ0bWVudCINCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJvdyBtdC01IG1iLTMgbXQtbWQtMSBtYi1tZC01IG10LXhsLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIHByLXhsLTUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGl0ZW1zY29wZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iYWRkcmVzcyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9Qb3N0YWxBZGRyZXNzIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWItMCI+QXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIMOgIDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzTG9jYWxpdHkiPlBhcmlzIDFFcjwvc3Bhbj48L2gxPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvUHJpY2VTcGVjaWZpY2F0aW9uIiBjbGFzcz0icHJpeCBkLWJsb2NrIGQtc20tbm9uZSBtdC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJwcmljZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSA2ODAgMDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0icHJpY2VDdXJyZW5jeSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmV1cm87DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG10LTIgbXQtbWQtMSBtdC14bC00IG1iLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCBjb2wtc20tMiBtdC1zbS0yIHB0LXNtLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLWNsb25lIG8tNTAiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXRhaWxzLWJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJmbG9vclNpemUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA5MyBtwrINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IGNvbC1zbS0zIG10LXNtLTIgcHQtc20tMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0icmkgcmktZG9vci1vcGVuIG8tNTAiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXRhaWxzLWJpZW4iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9Im51bWJlck9mUm9vbXMiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNjb3BlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9RdWFudGl0YXRpdmVWYWx1ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0idmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpw6hjZXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQgY29sLXNtLTIgcmVmZXJlbmNlIG10LXNtLTIgcHQtc20tMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw4lGIDo8YnI+MjQ2NjUzNg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIGNvbC1zbS01IHRleHQtcmlnaHQgZC1ub25lIGQtc20tYmxvY2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1ByaWNlU3BlY2lmaWNhdGlvbiIgY2xhc3M9InByaXggcHJpeC1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJwcmljZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIDY4MCAwMDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0icHJpY2VDdXJyZW5jeSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmZXVybzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJtdC01Ij5VTiBBUFBBUlRFTUVOVCBSw4lOT1bDiSDDgCBERVVYIFBBUyBERVMgVFVJTEVSSUVTPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHLDqHMgZGUgbGEgcGxhY2UgZGUgbGEgQ29uY29yZGUsIGRhbnMgdW4gYmVsIGltbWV1YmxlIGRlIDE4NDAsIGF1IDRlIMOpdGFnZSBhdmVjIGFzY2Vuc2V1ciDDoCBwYXJ0aXIgZHUgMWVyLCB1biBiZWwgYXBwYXJ0ZW1lbnQgZGUgOTMgbcKyIGVudGnDqHJlbWVudCByw6lub3bDqSwgY29tcHJlbmFudCA6IHNhbG9uLCBzYWxsZSDDoCBtYW5nZXIgYXZlYyBjdWlzaW5lIG91dmVydGUsIGNoYW1icmUgcHJpbmNpcGFsZSBzdXIgY291ciBhdmVjIHNhbGxlIGRlIGRvdWNoZSBldCBkcmVzc2luZywgMmUgY2hhbWJyZSBhdmVjIHNhbGxlIGRlIGJhaW5zLiBDYXZlLiBDaGVtaW7DqWVzLCBwb3V0cmVzIGFwcGFyZW50ZXMuIFVuIHBhcmZhaXQgcGllZC3DoC10ZXJyZSBkYW5zIHVuIHF1YXJ0aWVyIHJlY2hlcmNow6kuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHIteGwtNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbWItMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tbGcgYnRuLWJsb2NrIGJ0bi1yaSB0ZXh0LWxlZnQgZHVzay1ib3V0b24tZG9zc2llciIgDQogICAgICAgICAgICBocmVmPSIjIiANCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgDQogICAgICAgICAgICBkYXRhLXRhcmdldD0iI21vZGFsRGVtYW5kZURvc3NpZXIyMTU4MDcxIg0KICAgICAgICAgICAgZGF0YS1pZGFubm9uY2U9IjIxNTgwNzEiIA0KICAgICAgICAgICAgZGF0YS1pZGFnZW5jZT0iNjYzOCIgDQogICAgICAgICAgICBkYXRhLXJlZmVyZW5jZT0iMjQ2NjUzNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iby01MCIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9pY29ucy9Nb3JlL0Rvd25sb2FkLVdoaXRlLnN2ZyIgYWx0PSJUw6lsw6ljaGFyZ2VtZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi10ZXh0Ij4NCiAgICAgICAgICAgICAgICBSZWNldm9pciBsZSBkb3NzaWVyIGNvbXBsZXQNCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbWItMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tbGcgYnRuLWJsb2NrIGJ0bi1yaSB0ZXh0LWxlZnQgZHVzay1ib3V0b24tcmR2IiANCiAgICAgICAgICAgIGhyZWY9IiMiIA0KICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiANCiAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbW9kYWxEZW1hbmRlUmVuZGV6Vm91czIxNTgwNzEiDQogICAgICAgICAgICBkYXRhLWlkYW5ub25jZT0iMjE1ODA3MSIgDQogICAgICAgICAgICBkYXRhLWlkYWdlbmNlPSI2NjM4IiANCiAgICAgICAgICAgIGRhdGEtcmVmZXJlbmNlPSIyNDY2NTM2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJvLTUwIiBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2ljb25zL0NvbnRhY3QvVGVsLVdoaXRlLnN2ZyIgYWx0PSJPYnRlbmlyIHVuIHJlbmRlei12b3VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi10ZXh0Ij4NCiAgICAgICAgICAgICAgICBPYnRlbmlyIHVuIHJlbmRlei12b3VzDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIG1iLTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLWxnIGJ0bi1ibG9jayBidG4tcmkgdGV4dC1sZWZ0IGR1c2stYm91dG9uLXJhcHBlbCIgDQogICAgICAgICAgICBocmVmPSIjIiANCiAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgDQogICAgICAgICAgICBkYXRhLXRhcmdldD0iI21vZGFsRGVtYW5kZVJhcHBlbDIxNTgwNzEiDQogICAgICAgICAgICBkYXRhLWlkYW5ub25jZT0iMjE1ODA3MSIgDQogICAgICAgICAgICBkYXRhLWlkYWdlbmNlPSI2NjM4IiANCiAgICAgICAgICAgIGRhdGEtcmVmZXJlbmNlPSIyNDY2NTM2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJvLTUwIiBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vaW1hZ2VzL2ljb25zL0NvbnRhY3QvQ2FsZW5kYXItV2hpdGUuc3ZnIiBhbHQ9IkV0cmUgcmFwcGVsw6kiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLXRleHQiPg0KICAgICAgICAgICAgICAgIMOKdHJlIGFwcGVsw6kgYXUgcGx1cyB2aXRlDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9Im1vZGFsRW52b3llckFtaSIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIA0KICAgIGFyaWEtbGFiZWxsZWRieT0ibW9kYWxFbnZveWVyQW1pTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsLXJpIiANCiAgICAgICAgcm9sZT0iZG9jdW1lbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtb2RhbC10aXRsZSB0ZXh0LXVwcGVyY2FzZSIgDQogICAgICAgICAgICAgICAgICAgIGlkPSJtb2RhbEVudm95ZXJBbWlMYWJlbCI+RW52b3llciDDoCB1biBhbWk8L2g1Pg0KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UgY2xvc2UtY29udGFjdCIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgDQogICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDxzZW5kLWZyaWVuZCA6cmVmZXJlbmNlPSInMjQ2NjUzNiciDQogICAgICAgICAgICAgICAgICAgIDppZC1hZ2VuY2U9Iic2NjM4JyINCiAgICAgICAgICAgICAgICAgICAgOmlkLWFubm9uY2U9IicyMTU4MDcxJyINCiAgICAgICAgICAgICAgICAgICAgOnRlbGVwaG9uZS1vYmxpZ2F0b2lyZS1hbm5vbmNlPSInMCciDQogICAgICAgICAgICAgICAgICAgIDpub20tdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICA6cHJlbm9tLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOmVtYWlsLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgOmxhbmd1ZT0iJ2ZyJyI+PC9zZW5kLWZyaWVuZD4NCiAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICA8c21hbGwgaWQ9ImZvcm11bGFpcmVDb25maWRlbnRpYWxpdGUiIGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+DQogICAgICAgICAgICAgICAgICAgIENvbnN1bHRlciBub3RyZSA8YSB0YXJnZXQ9ImJsYW5rIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL3ZpZS1wcml2ZWUuaHRtbCIgdGl0bGU9InZpZSBwcml2w6llIj5wb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT4uDQogICAgICAgICAgICAgICAgPC9zbWFsbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wteGwtNCBwbC14bC0wIG10LTUgbXQteGwtbjQiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIGNhcmQtYm9yZGVyLWJvdHRvbSBib3JkZXItdG9wLTAgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWxlZnQtMCBmb3JtdWxhaXJlLWNvbnRlbmV1ciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJteC1hdXRvIG10LW40IHJvdW5kZWQtY2lyY2xlIGltYWdlLWNvbnNlaWxsZXIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9jb25zZWlsMS5wbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IHRleHQtY2VudGVyIGZpY2hlLWFubm9uY2UtZm9ybSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZm9ybXVsYWlyZS10aXRyZSI+RGVtYW5kZXogcGx1cyBkJ2luZm9ybWF0aW9uczxiciAvPiDDoCBsJ2FnZW5jZSBncsOiY2Ugw6Agdm90cmUgaW50ZXJsb2N1dGV1ci48L3NwYW4+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9ImhyLXJpIG14LTgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29udGFjdC1mb3JtIDpvYmpldC1wYXItZGVmYXV0PSInZGVtYW5kZUluZm9zJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmVudm9pLWF1dG9tYXRpcXVlPSInMCciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkZW1hbmRlLWV4cHJlc3MtZGVzYWN0aXZlZT0iJzAnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6YWZmaWNoZXItb2JqZXQtZGVtYW5kZT0iJzEnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVmZXJlbmNlPSInMjQ2NjUzNiciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZC1hZ2VuY2U9Iic2NjM4JyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkLWFubm9uY2U9IicyMTU4MDcxJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRlbGVwaG9uZS1vYmxpZ2F0b2lyZS1hbm5vbmNlPSInMCciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpub20tdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cHJlbm9tLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnBheXMtdXRpbGlzYXRldXI9IicnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGVsZXBob25lLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmVtYWlsLXV0aWxpc2F0ZXVyPSInJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmxhbmd1ZT0iJ2ZyJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmhvcml6b250YWw9IicwJyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmFmZmljaGVyLW1vZGFsPSInMSciPjwvY29udGFjdC1mb3JtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBpZD0iZm9ybXVsYWlyZUNvbmZpZGVudGlhbGl0ZSIgY2xhc3M9InRleHQtbGVmdCBmb3JtLXRleHQgdGV4dC1tdXRlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnN1bHRlciBub3RyZSA8YSB0YXJnZXQ9ImJsYW5rIiBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL3ZpZS1wcml2ZWUuaHRtbCIgdGl0bGU9InZpZSBwcml2w6llIj5wb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT4uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zbWFsbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBjYXJkLXdoaXRlIHRleHQtY2VudGVyIGJvcmRlci0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLWZsdWlkIGltZ0xvZ29BZ2VuY2UiIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L0FnZW5jZXMvTG9nb3MvbmV3X2xvZ285MDUyLmpwZz9kPTE1OTE4MDUxMTUiIGFsdD0iTG9nbyBkZSBsJiMwMzk7YWdlbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHJlc3M+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJub20tYWdlbmNlIj5QSElMSVBQRSBNRU5BR0VSICZhbXA7IE5JQ09MQVMgSFVHPC9zcGFuPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYWRyZXNzZSI+MzEgUlVFIERFIFRPVVJOT04gPGJyPiA3NTAwNiAtIFBBUklTIDZFTUU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyZXNzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaWVuLWFmZmljaGVyLXRlbGVwaG9uZSI+QWZmaWNoZXIgbGUgdMOpbMOpcGhvbmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIGFsaWduLXNlbGYtY2VudGVyIG10LTUgbWItMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2FnZW5jZS1pbW1vYmlsaWVyZS1wYXJpcy02ZW1lLTc1LTY2MzguaHRtbCIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1hbHQtMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLW1hcC1tYXJrZXIiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWb2lyIGxhIGZpY2hlIGRlIGwmIzAzOTthZ2VuY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgbXQteGwtNSBwdC14bC00IG10LXNtLTUgbXQtNCBwLTAgZm9uZC1ibGFuYyBwYi01Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBweC0yIG1iLXhsLTQgcHQtNSB0ZXh0LWNlbnRlciI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkxlcyBwaG90b3M8L2gzPg0KICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9ImhyLXJpIG10LTUiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHN0eWxlPSJtYXJnaW4tdG9wOi0zLjg1cmVtOyIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9wdWNlLnBuZyIgYWx0PSIiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHgtMiBhbGlnbi1pdGVtcy1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tNiBjb2wteGwtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2Nhcm91c2VsU2xpZGVyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNsaWRlLXRvPSIwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBkYXRhLXRvZ2dsZT0ibW9kYWwiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iLm1vZGFsLXBob3RvLXhsIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCBtYi0zIHBob3RvLW1pbmlhdHVyZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYXMucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9waWN0L2Y2MDB4NDAwLzIvNC82LzYvZXh0XzBfMjQ2NjUzNi5qcGciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9InBob3RvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS02IGNvbC14bC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjY2Fyb3VzZWxTbGlkZXIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2xpZGUtdG89IjEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGRhdGEtdG9nZ2xlPSJtb2RhbCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIubW9kYWwtcGhvdG8teGwiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIG1iLTMgcGhvdG8tbWluaWF0dXJlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL21lZGlhcy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL3BpY3QvZjYwMHg0MDAvMi80LzYvNi9leHRfMV8yNDY2NTM2LmpwZyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0icGhvdG8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTYgY29sLXhsLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNjYXJvdXNlbFNsaWRlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zbGlkZS10bz0iMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgZGF0YS10b2dnbGU9Im1vZGFsIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9Ii5tb2RhbC1waG90by14bCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQgbWItMyBwaG90by1taW5pYXR1cmUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWFzLnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vcGljdC9mNjAweDQwMC8yLzQvNi82L2V4dF8yXzI0NjY1MzYuanBnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJwaG90byI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tNiBjb2wteGwtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltYWdlLWJyb2NodXJlLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgbWItMyIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9mb25kX2Jyb2NodXJlLmpwZyIgYWx0PSJMZXMgZMOpdGFpbHMgZGUgbCYjMDM5O2Fubm9uY2UiIHN0eWxlPSJ3aWR0aDoxMDAlOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3AtbGVmdCI+TGEgZmljaGUgZHUgYmllbiBlbiBkw6l0YWlsPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3R0b20tbGVmdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hcHBhcnRlbWVudC9wYXJpcy0xZXIvcGhpbGlwcGUtbWVuYWdlci1uaWNvbGFzLWh1Zy9hcHBhcnRlbWVudF9wYXJpcy0xZXJfMjE1ODA3MS5wZGYiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZyBidG4tYmxvY2sgYnRuLXJpIHRleHQtbGVmdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2ljb25zL01vcmUvRG93bmxvYWQtV2hpdGUuc3ZnIiBhbHQ9IlTDqWzDqWNoYXJnZW1lbnQiIGNsYXNzPSJvLTUwIj4gPGRpdiBjbGFzcz0iYnRuLXRleHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVMOpbMOpY2hhcmdlbWVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgbXQteGwtNCBwYi01Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdC01IHBiLTMgdGV4dC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+DQogICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZC1ub25lIGQtbWQtYmxvY2siPkxlcyBkw6l0YWlscyBkZSBsJiMwMzk7YW5ub25jZTwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZC1tZC1ub25lIHRpdGxlRGV0YWlsc0FubiI+TGVzIGTDqXRhaWxzIGRlIGwmIzAzOTthbm5vbmNlPC9oMz4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbXQteGwtNCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS0xMiBjb2wteGwtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iZm9udC1zaXplOjAuODc1ZW07dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtmb250LXdlaWdodDogYm9sZDsiPklORk9STUFUSU9OUzwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ1bC1yaSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhvbm9yYWlyZXMgw6AgbGEgY2hhcmdlIGR1IHZlbmRldXI8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BdWN1bmUgcHJvY8OpZHVyZSBlbiBjb3VyczwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iZm9udC1zaXplOjAuODc1ZW07dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtmb250LXdlaWdodDogYm9sZDsiPlLDqWbDqXJlbmNlcyBsw6lnYWxlczwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tNCBjb2wteGwtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCB1bC1yaSB1bC1yaS1zb3VsaWduZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmVjb2xvZ2lxdWUtc29saWRhaXJlLmdvdXYuZnIvZXhpZ2VuY2VzLXJlZ2xlbWVudGFpcmVzLWNvbnN0cnVjdGlvbi1kZXMtYmF0aW1lbnRzIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIj5Sw6hnbGVtZW50YXRpb24gdGhlcm1pcXVlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5sZWdpZnJhbmNlLmdvdXYuZnIvYWZmaWNoVGV4dGUuZG8/Y2lkVGV4dGU9Sk9SRlRFWFQwMDAwMjg3NzIyNTYmY2F0ZWdvcmllTGllbj1pZCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayI+TG9pIEFsdXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmVjb25vbWllLmdvdXYuZnIvY2VkZWYvZHVmbG90LWludmVzdGlzc2VtZW50LWxvY2F0aWYiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiPkxvaSBEdWZsb3Q8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTYgY29sLXhsLTQiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS0xMiBjb2wteGwtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJmb250LXNpemU6MC44NzVlbTt0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO2ZvbnQtd2VpZ2h0OiBib2xkOyI+RGlhZ25vc3RpYyDDqW5lcmfDqXRpcXVlPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkcGV0YWIiIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCIgYm9yZGVyPSIwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHJvd3NwYW49IjciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJkcGVpbWciIHdpZHRoPSIyMzMiIGhlaWdodD0iMjQ3IiBhbHQ9IiIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9kcGUvZHBlX2ZyLnBuZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZHBlQSIgc3R5bGU9ImhlaWdodDogMzZweDsgY29sb3I6ICNGRkZGRkY7IGZvbnQtd2VpZ2h0OmJvbGQ7IHRleHQtYWxpZ246IGNlbnRlcjsgd2lkdGg6IDUwcHg7IHZlcnRpY2FsLWFsaWduOiB0b3A7IHBhZGRpbmctdG9wOiAwcHg7cGFkZGluZy1sZWZ0OiAyMHB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9pbWFnZXMvZHBlL2Fycm93X2RwZV9mci5naWYpIG5vLXJlcGVhdDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOL0MNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJkcGVCIiBzdHlsZT0iaGVpZ2h0OiAzNnB4OyBjb2xvcjogI0ZGRkZGRjsgZm9udC13ZWlnaHQ6Ym9sZDsgdGV4dC1hbGlnbjogY2VudGVyOyB3aWR0aDogNTBweDsgdmVydGljYWwtYWxpZ246IHRvcDsgcGFkZGluZy10b3A6IDBweDtwYWRkaW5nLWxlZnQ6IDIwcHg7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZHBlQyIgc3R5bGU9ImhlaWdodDogMzZweDsgY29sb3I6ICNGRkZGRkY7IGZvbnQtd2VpZ2h0OmJvbGQ7IHRleHQtYWxpZ246IGNlbnRlcjsgd2lkdGg6IDUwcHg7IHZlcnRpY2FsLWFsaWduOiB0b3A7IHBhZGRpbmctdG9wOiAwcHg7cGFkZGluZy1sZWZ0OiAyMHB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRwZUQiIHN0eWxlPSJoZWlnaHQ6IDM2cHg7IGNvbG9yOiAjRkZGRkZGOyBmb250LXdlaWdodDpib2xkOyB0ZXh0LWFsaWduOiBjZW50ZXI7IHdpZHRoOiA1MHB4OyB2ZXJ0aWNhbC1hbGlnbjogdG9wOyBwYWRkaW5nLXRvcDogMHB4O3BhZGRpbmctbGVmdDogMjBweDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJkcGVFIiBzdHlsZT0iaGVpZ2h0OiAzNnB4OyBjb2xvcjogI0ZGRkZGRjsgZm9udC13ZWlnaHQ6Ym9sZDsgdGV4dC1hbGlnbjogY2VudGVyOyB3aWR0aDogNTBweDsgdmVydGljYWwtYWxpZ246IHRvcDsgcGFkZGluZy10b3A6IDBweDtwYWRkaW5nLWxlZnQ6IDIwcHg7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZHBlRiIgc3R5bGU9ImhlaWdodDogMzZweDsgY29sb3I6ICNGRkZGRkY7IGZvbnQtd2VpZ2h0OmJvbGQ7IHRleHQtYWxpZ246IGNlbnRlcjsgd2lkdGg6IDUwcHg7IHZlcnRpY2FsLWFsaWduOiB0b3A7IHBhZGRpbmctdG9wOiAwcHg7cGFkZGluZy1sZWZ0OiAyMHB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRwZUciIHN0eWxlPSJoZWlnaHQ6IDM2cHg7IGNvbG9yOiAjRkZGRkZGOyBmb250LXdlaWdodDpib2xkOyB0ZXh0LWFsaWduOiBjZW50ZXI7IHdpZHRoOiA1MHB4OyB2ZXJ0aWNhbC1hbGlnbjogdG9wOyBwYWRkaW5nLXRvcDogMHB4O3BhZGRpbmctbGVmdDogMjBweDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS02IGNvbC14bC00Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tMTIgY29sLXhsLTEyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJmb250LXNpemU6MC44NzVlbTt0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO2ZvbnQtd2VpZ2h0OiBib2xkOyI+Q2FyYWN0w6lyaXN0aXF1ZXM8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPCEtLSBQbHVzIGQnYW5ub25jZXMgYXV4IGFsZW50b3VycyAtLT4NCiAgICA8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZWZlY2U1OyI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGlkPSJzbGlkZUFyb3VuZCIgY2xhc3M9ImNvbC0xMiI+PC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0iYm90dG9tQXJvdW5kIiBjbGFzcz0ibG9hZGluZyI+PC9kaXY+DQoNCiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBtb2RhbC1yaS1zbGlkZXIgZmFkZSBtb2RhbC1waG90by14bCINCiAgICAgICAgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciDQogICAgICAgIGFyaWEtbGFiZWxsZWRieT0ibGFyZ2VNb2RhbC1waG90b2Fubm9uY2UiDQogICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCBtb2RhbC14bCI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIgbW9kYWwtaGVhZGVyLXJpIj4NCiAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtb2RhbC10aXRsZSI+QXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIMOgIFBhcmlzIDFFcjwvaDU+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjYXJvdXNlbFNsaWRlciIgY2xhc3M9ImNhcm91c2VsIHNsaWRlIiBkYXRhLXJpZGU9ImNhcm91c2VsIj4NCiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPSJjYXJvdXNlbC1pbmRpY2F0b3JzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10YXJnZXQ9IiNjYXJvdXNlbFNsaWRlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zbGlkZS10bz0iMCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJhY3RpdmUiID48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRhcmdldD0iI2Nhcm91c2VsU2xpZGVyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNsaWRlLXRvPSIxIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10YXJnZXQ9IiNjYXJvdXNlbFNsaWRlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zbGlkZS10bz0iMiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWlubmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICBhY3RpdmUgIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZC1ibG9jayB3LTEwMCIgc3JjPSJodHRwczovL21lZGlhcy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL3BpY3QvZjEyMDB4ODAwLzIvNC82LzYvZXh0XzBfMjQ2NjUzNi5qcGciIGFsdD0iMzcxNjE3ODIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWl0ZW0gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZC1ibG9jayB3LTEwMCIgc3JjPSJodHRwczovL21lZGlhcy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL3BpY3QvZjEyMDB4ODAwLzIvNC82LzYvZXh0XzFfMjQ2NjUzNi5qcGciIGFsdD0iMzcxNjE3ODMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWl0ZW0gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZC1ibG9jayB3LTEwMCIgc3JjPSJodHRwczovL21lZGlhcy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL3BpY3QvZjEyMDB4ODAwLzIvNC82LzYvZXh0XzJfMjQ2NjUzNi5qcGciIGFsdD0iMzcxNjE3ODQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNhcm91c2VsLWNvbnRyb2wtcHJldiIgaHJlZj0iI2Nhcm91c2VsU2xpZGVyIiByb2xlPSJidXR0b24iIGRhdGEtc2xpZGU9InByZXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlByw6ljw6lkZW50ZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iY2Fyb3VzZWwtY29udHJvbC1uZXh0IiBocmVmPSIjY2Fyb3VzZWxTbGlkZXIiIHJvbGU9ImJ1dHRvbiIgZGF0YS1zbGlkZT0ibmV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2Fyb3VzZWwtY29udHJvbC1uZXh0LWljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+U3VpdmFudGU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIgbW9kYWwtZm9vdGVyLXJpIHJvdyI+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIA0KDQogICAgPGZvb3RlciBjbGFzcz0icmktZm9vdGVyIHB0LXhsLTUgcHQtNSBwLW1kLTUiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTMgdGV4dC1zbS1sZWZ0IHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICA8aW1nIGFsdD0iTG9nbyIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ltYWdlcy9sb2dvcy9Mb2dvLVdoaXRlLnBuZyI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBvZmZzZXQteGwtNCBtdC00IG10LXNtLTAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGlucHV0LWdyb3VwLWxnIG10LTIiPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCINCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiDQogICAgICAgICAgICAgICAgICAgICAgICBpZD0ibmV3c2xldHRlcl9lbWFpbCINCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9Im5ld3NsZXR0ZXJfZW1haWwiDQogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQWJvbm5lei12b3VzIMOgIG5vdHJlIG5ld3NsZXR0ZXIiDQogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJBZHJlc3NlIEVtYWlsIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYXBwZW5kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGlkPSJuZXdzbGV0dGVyX3N1Ym1pdCIgY2xhc3M9ImJ0biBidG4tbGcgYnRuLXByaW1hcnkiPlZhbGlkZXI8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbXQtNSI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTMiPg0KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0cmUiPkxpZW5zIGludGVybmVzPC9oND4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQiPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3NlY3VyZS5zbWMtZnJhbmNlLmNvbS9jbGllbnRzL2xvZ2luX3JpLmFzcCIgdGFyZ2V0PSJibGFuayI+RXNwYWNlIHByb2Zlc3Npb25uZWw8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tIj5SZWNoZXJjaGVyIHVuZSBwcm9wcmnDqXTDqSBkZSBwcmVzdGlnZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL21hZ2F6aW5lLWltbW9iaWxpZXIiPkxlIG1hZ2F6aW5lIEPDtHRlIGQmIzAzOTtBenVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYWJvbm5lbWVudC5odG1sIj5TJiMwMzk7YWJvbm5lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2xpZW5zIj5MaWVuczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTMiPg0KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0cmUiPlZpbGxhcyBldCBwcm9wcmnDqXTDqXM8L2g0Pg0KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtYW50aWJlcy12aWxsYXMtbWFpc29ucy0xLmh0bWwiPkFudGliZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLWNhbm5lcy12aWxsYXMtbWFpc29ucy0xLmh0bWwiPkNhbm5lczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtZ3Jhc3NlLXZpbGxhcy1tYWlzb25zLTEuaHRtbCI+R3Jhc3NlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1tb25hY28tdmlsbGFzLW1haXNvbnMtMS5odG1sIj5Nb25hY288L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLW5pY2UtdmlsbGFzLW1haXNvbnMtMS5odG1sIj5OaWNlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1zdC1wYXVsLWRlLXZlbmNlLXZpbGxhcy1tYWlzb25zLTEuaHRtbCI+U3QtcGF1bC1kZS12ZW5jZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtdmFyLXZpbGxhcy1tYWlzb25zLTEuaHRtbCI+VmFyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1wcm92ZW5jZS12aWxsYXMtbWFpc29ucy0xLmh0bWwiPlByb3ZlbmNlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1sYW5ndWVkb2Mtcm91c3NpbGxvbi12aWxsYXMtbWFpc29ucy0xLmh0bWwiPkxhbmd1ZWRvYy1yb3Vzc2lsbG9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1hdXRyZXMtdmlsbGFzLW1haXNvbnMtMS5odG1sIj5BdXRyZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tMyI+DQogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRyZSI+QXBwYXJ0ZW1lbnRzPC9oND4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQiPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLWFudGliZXMtYXBwYXJ0ZW1lbnQtMS5odG1sIj5BbnRpYmVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1jYW5uZXMtYXBwYXJ0ZW1lbnQtMS5odG1sIj5DYW5uZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLWdyYXNzZS1hcHBhcnRlbWVudC0xLmh0bWwiPkdyYXNzZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtbW9uYWNvLWFwcGFydGVtZW50LTEuaHRtbCI+TW9uYWNvPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYmllbnMtaW1tb2JpbGllcnMtcmVjZW50cy1uaWNlLWFwcGFydGVtZW50LTEuaHRtbCI+TmljZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtc3QtcGF1bC1kZS12ZW5jZS1hcHBhcnRlbWVudC0xLmh0bWwiPlN0LXBhdWwtZGUtdmVuY2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJteC0yIj58PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9iaWVucy1pbW1vYmlsaWVycy1yZWNlbnRzLXZhci1hcHBhcnRlbWVudC0xLmh0bWwiPlZhcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtcHJvdmVuY2UtYXBwYXJ0ZW1lbnQtMS5odG1sIj5Qcm92ZW5jZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtbGFuZ3VlZG9jLXJvdXNzaWxsb24tYXBwYXJ0ZW1lbnQtMS5odG1sIj5MYW5ndWVkb2Mtcm91c3NpbGxvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2JpZW5zLWltbW9iaWxpZXJzLXJlY2VudHMtYXV0cmVzLWFwcGFydGVtZW50LTEuaHRtbCI+QXV0cmVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTMiPg0KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0cmUiPkxpZW5zPC9oND4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQiPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWx1eHVyeXJlbnRhbHMuY29tL2ZyIj5MVVhVUlkgUkVOVEFMUyBieSBSZXNpZGVuY2VzPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tYWlzb25zZXRhcHBhcnRlbWVudHMuZnIiPkltbW9iaWxpZXIgRnJhbmNlPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2FnZW5jZXMtaW1tb2JpbGllcmVzLXByZXN0aWdlLTEuaHRtbCI+MTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2FnZW5jZXMtaW1tb2JpbGllcmVzLXByZXN0aWdlLTIuaHRtbCI+MjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2FnZW5jZXMtaW1tb2JpbGllcmVzLXByZXN0aWdlLTMuaHRtbCI+MzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2FnZW5jZXMtaW1tb2JpbGllcmVzLXByZXN0aWdlLTQuaHRtbCI+NDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2FnZW5jZXMtaW1tb2JpbGllcmVzLXByZXN0aWdlLTUuaHRtbCI+NTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvcmVjZW50cy1tb3RzY2xlcy0xLmh0bWwiPk1vdHMgQ2zDqXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXgtMiI+fDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9sb2NhdGlvbnMtdmlsbGFzLWFwcGFydGVtZW50cy0xLmh0bWwiPkxvY2F0aW9ucyBzYWlzb25uacOocmVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im14LTIiPnw8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvdmllLXByaXZlZS5odG1sIj52aWUgcHJpdsOpZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InJvdyBtdC01IG1iLTUgdGV4dC1jZW50ZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIGNvbCBhbGlnbi1zZWxmLWNlbnRlciI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Jlc2lkZW5jZXMuaW1tb2JpbGllci5tYWdhemluZS8iIGNsYXNzPSJzb2NpYWwtaWNvbiI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJyaSByaS1mYWNlYm9vayI+PC9pPg0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3Jlc2lkZW5jZXNpbW1vYmlsaWVyLyIgY2xhc3M9InNvY2lhbC1pY29uIj4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLWluc3RhZ3JhbSI+PC9pPg0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDVU9jaFJ0MXVGdEVjUXFCT3Rmei1lZyIgY2xhc3M9InNvY2lhbC1pY29uIj4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpIHJpLXlvdXR1YmUiPjwvaT4NCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InJvdyBtdC0xIHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1lbnRpb25zLWxlZ2FsZXMiIGhyZWY9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vdmlld3MvaW5mb3NfbGVnYWxlcy5waHA/bGFuZz1mciI+TWVudGlvbnMgbMOpZ2FsZXM8L2E+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2Zvb3Rlcj4NCg0KDQogICAgPHNjcmlwdCBzcmM9Ii9qcy9saWJzL2pxdWVyeS5taW4uanM/aWQ9MjIwYWZkNzQzZDllOTY0Mzg1MmUiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vanMvbGlicy9qcXVlcnktMS4xMC4yLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vanMvbGlicy9qcXVlcnktdWktMS4xMC4zLmN1c3RvbS5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2pzL2xpYnMvc2VyaWFsaXplLWpzb24vanF1ZXJ5LnNlcmlhbGl6ZWpzb24uanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9qcy9saWJzL3BvcHBlci5taW4uanM/aWQ9ZTIxYTY2NDkwNDFlZjZmNWYxYmYiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSIvanMvbGlicy9ib290c3RyYXAubWluLmpzP2lkPWUxZDk4ZDQ3Njg5ZTAwZjhlY2JjIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2ZvbmN0aW9ucy5qcz9pZD02YWQwZGMxNzc1NmQwYWZkOTdjNiI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9zbWNNYW5hZ2VGb3JtLmpzP2lkPTY3ZGFjODhkMGI3MWU3MTdjOTBmIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9qcy9sYW5nL2ZyLmpzPzE1OTE4MDUxMTUiPjwvc2NyaXB0Pg0KDQogICAgICAgICAgICANCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcz9yZW5kZXI9NkxlWmQ3Y1VBQUFBQVBoeU9Sd1hUNnlGa1ZDSTFHWEs4TTNZcGFwWCI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQ+DQogICAgICAgICAgICB3aW5kb3cucmVDYXB0Y2hhU2l0ZUtleSA9ICc2TGVaZDdjVUFBQUFBUGh5T1J3WFQ2eUZrVkNJMUdYSzhNM1lwYXBYJzsNCiAgICAgICAgPC9zY3JpcHQ+DQogICAgDQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5pbnRlcm5hdXRlQ29ubmVjdGUgPSBmYWxzZTsNCiAgICAgICAgDQogICAgICAgIHdpbmRvdy5yb3V0ZUZhdm9yaXMgPSAiaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9mci9hamF4L2Zhdm9yaXMiOw0KICAgICAgICB3aW5kb3cucGFnZUFjdHVlbGxlID0gImZpY2hlX2Fubm9uY2UiOw0KDQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7DQogICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBmdW5jdGlvbihldnQpew0KICAgICAgICAgICAgICAgICBpZighJCgnYnV0dG9uLm5hdmJhci10b2dnbGVyLmJ0bk1lbnUnKS5oYXNDbGFzcygnY29sbGFwc2VkJykgJiYgJCgnI25hdmJhck5hdkFsdE1hcmt1cCcpLmhhc0NsYXNzKCdzaG93Jykpew0KICAgICAgICAgICAgICAgICAgICBpZigkKGV2dC50YXJnZXQpLmF0dHIoJ2lkJykgIT0gJ25hdmJhck5hdkFsdE1hcmt1cCcgJiYNCiAgICAgICAgICAgICAgICAgICAgICAgISQoZXZ0LnRhcmdldCkucGFyZW50KCdidXR0b24nKS5oYXNDbGFzcygnbmF2YmFyLXRvZ2dsZXInKSAmJg0KICAgICAgICAgICAgICAgICAgICAgICAhJChldnQudGFyZ2V0KS5wYXJlbnQoJ2J1dHRvbicpLmhhc0NsYXNzKCdidG5NZW51JykgJiYNCiAgICAgICAgICAgICAgICAgICAgICAgISQoZXZ0LnRhcmdldCkuaGFzQ2xhc3MoJ3JpLWJhcnMnKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnYnV0dG9uLm5hdmJhci10b2dnbGVyLmJ0bk1lbnUnKS5jbGljaygpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSkNCg0KICAgICAgICAgICAgJCgiLnByaWNlLXJhbmdlIikucG9wb3Zlcih7DQogICAgICAgICAgICAgICAgInBsYWNlbWVudCI6ICJ0b3AiLA0KICAgICAgICAgICAgICAgICJ0cmlnZ2VyIjogImhvdmVyIg0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgIDxzY3JpcHQgc3JjPSIvanMvYXBwLmpzP2lkPTJjYTRmZGZmMjI1MTNkYTRhMTYzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vanMvc21jTWFuYWdlUG9wdXAuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vanMvc21jTWFuYWdlQW5ub25jZS5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9qcy9zbWNNYW5hZ2VGb3JtLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2pzL2ZvbmN0aW9ucy5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCIubGllbi1hZmZpY2hlci10ZWxlcGhvbmUiKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdmFyICRlbGVtZW50ID0gJCh0aGlzKTsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnbGllbi1hZmZpY2hlci10ZWxlcGhvbmUnKSAmJiAhd2luZG93LnNtY0FqYXhBZmZpY2hlVGVsSW5Qcm9ncmVzcykgew0KICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc21jQWpheEFmZmljaGVUZWxJblByb2dyZXNzID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgJC5nZXQoImh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYWpheC9hZ2VuY2UtdGVsLTY2MzgtMjE1ODA3MS5odG1sIiwgbnVsbCwgZnVuY3Rpb24gKGRhdGEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRlbGVtZW50Lmh0bWwoZGF0YS5qb2luKCcsICcpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICRlbGVtZW50LnJlbW92ZUNsYXNzKCJsaWVuLWFmZmljaGVyLXRlbGVwaG9uZSIpOw0KICAgICAgICAgICAgICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNtY0FqYXhBZmZpY2hlVGVsSW5Qcm9ncmVzcyA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJCgiLmxpZW4tYWZmaWNoZXItdGVsZXBob25lLXNwZWNpZiIpLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpOw0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdsaWVuLWFmZmljaGVyLXRlbGVwaG9uZS1zcGVjaWYnKSAmJiAhd2luZG93LnNtY0FqYXhBZmZpY2hlVGVsSW5Qcm9ncmVzcykgew0KICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc21jQWpheEFmZmljaGVUZWxJblByb2dyZXNzID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgJC5nZXQoImh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYWpheC9hbm5vbmNlLXRlbC0yMTU4MDcxLmh0bWwiLCBudWxsLCBmdW5jdGlvbiAoZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQuaHRtbChkYXRhID8gZGF0YSA6ICcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICRlbGVtZW50LnJlbW92ZUNsYXNzKCJsaWVuLWFmZmljaGVyLXRlbGVwaG9uZS1zcGVjaWYiKTsNCiAgICAgICAgICAgICAgICAgICAgfSkuYWx3YXlzKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zbWNBamF4QWZmaWNoZVRlbEluUHJvZ3Jlc3MgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIDwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vanMvbGlicy9zbGljay5taW4uanM/aWQ9ZDVhNjFjNzQ5ZTQ0ZTQ3MTU5YWYiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQ+DQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7DQogICAgICAgICAgICBmdW5jdGlvbiBzd2luZ1BhZ2UoKSB7DQogICAgICAgICAgICAgICAgdmFyICRwb2xlUG9zaXRpb24gPSAkKCIjc2xpZGVBZ2VuY2UubG9hZGVkIikucGFyZW50cygiZGl2Lm1iLTUiKSwNCiAgICAgICAgICAgICAgICAgICAgJGFyb3VuZCA9ICAkKCIjc2xpZGVBcm91bmQubG9hZGVkIikucGFyZW50cygiZGl2Lm1iLTUiKTsNCg0KICAgICAgICAgICAgICAgIGlmICgkcG9sZVBvc2l0aW9uLmxlbmd0aCA+IDAgJiYgJGFyb3VuZC5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICRwb2xlUG9zaXRpb24ubmV4dCgiZGl2LmNvbnRhaW5lciIpLmZpbmQoImRpdi5yb3cuc2VhcmNoLXJlc3VsdHMiKS5yZW1vdmVDbGFzcygiYmxvY2stZXZlbiIpLmFkZENsYXNzKCJibG9jay1vZGQiKTsNCiAgICAgICAgICAgICAgICAgICAgJGFyb3VuZC5uZXh0KCJkaXYuY29udGFpbmVyIikuZmluZCgiZGl2LnJvdy5zZWFyY2gtcmVzdWx0cyIpLnJlbW92ZUNsYXNzKCJibG9jay1vZGQiKS5hZGRDbGFzcygiYmxvY2stZXZlbiIpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHBvbGVQb3NpdGlvbi5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICRwb2xlUG9zaXRpb24ubmV4dEFsbCgiZGl2LmNvbnRhaW5lciIpLmZpbmQoImRpdi5yb3cuc2VhcmNoLXJlc3VsdHMiKS5yZW1vdmVDbGFzcygiYmxvY2stZXZlbiIpLmFkZENsYXNzKCJibG9jay1vZGQiKTsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRhcm91bmQubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAkYXJvdW5kLm5leHQoImRpdi5jb250YWluZXIiKS5maW5kKCJkaXYucm93LnNlYXJjaC1yZXN1bHRzIikucmVtb3ZlQ2xhc3MoImJsb2NrLWV2ZW4iKS5hZGRDbGFzcygiYmxvY2stb2RkIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkLmFqYXgoew0KICAgICAgICAgICAgICAgIHVybDogImh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vZnIvYWpheC9hbm5vbmNlcy1tZW1lLXZpbGxlLW1lbWUtYXR0cmlidXRzLzIxNTgwNzEiLA0KICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLA0KICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7DQogICAgICAgICAgICAgICAgICAgICQoIiNzbGlkZUFyb3VuZCIpLmh0bWwoZGF0YSk7DQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAkKCIjc2xpZGVBcm91bmQiKS5yZW1vdmUoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgICAgICB1cmw6ICJodHRwczovL3d3dy5yZXNpZGVuY2VzLWltbW9iaWxpZXIuY29tL2ZyL2Fubm9uY2VzLWFsZW50b3Vycy5odG1sIiwNCiAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwNCiAgICAgICAgICAgICAgICBkYXRhOiB7DQogICAgICAgICAgICAgICAgICAgIHZpbGxlczogMzI1NDksDQogICAgICAgICAgICAgICAgICAgIHBpbkNvbG9yOiAnYmxhY2snDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgbWlkZGxlSHRtbCA9IGRhdGEubWlkZGxlIHx8ICIiOw0KICAgICAgICAgICAgICAgICAgICB2YXIgYm90dG9tSHRtbCA9IGRhdGEuYm90dG9tIHx8ICIiOw0KDQogICAgICAgICAgICAgICAgICAgIGlmIChib3R0b21IdG1sICE9ICIiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCIjYm90dG9tQXJvdW5kIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoImxvYWRpbmciKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygibG9hZGVkIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGJvdHRvbUh0bWwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNzcygnYmFja2dyb3VuZC1jb2xvcicsICcjZWZlY2U1Jyk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCIjYm90dG9tQXJvdW5kIikucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICQoIiNzbGlkZUFyb3VuZCIpLnJlbW92ZSgpOw0KICAgICAgICAgICAgICAgICAgICAkKCIjYm90dG9tQXJvdW5kIikucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoJy5jb250YWluZXItY291dmVydHVyZXMnKS5zbGljayh7DQogICAgICAgICAgICAgICAgcHJldkFycm93OiAkKCIuaW1hZ2UtcHJlY2VkZW50ZSIpLA0KICAgICAgICAgICAgICAgIG5leHRBcnJvdzogJCgiLmltYWdlLXN1aXZhbnRlIiksDQogICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IHRydWUsDQogICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLA0KICAgICAgICAgICAgICAgIGF1dG9wbGF5OiB0cnVlLA0KICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IHRydWUsDQogICAgICAgICAgICAgICAgZmFkZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICBjc3NFYXNlOiAnbGluZWFyJywNCiAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiA2MDAwDQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICQoJy5jb250YWluZXItY291dmVydHVyZXMnKS5vbignYWZ0ZXJDaGFuZ2UnLCBmdW5jdGlvbihldmVudCwgc2xpY2ssIGRpcmVjdGlvbikgew0KICAgICAgICAgICAgICAgICQoJyNpbmRleC1pbWFnZS1hY3R1ZWxsZScpLnRleHQoDQogICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KCQoJy5jb250YWluZXItY291dmVydHVyZXMnKS5zbGljaygnc2xpY2tDdXJyZW50U2xpZGUnKSkgKyAxDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgLy8gUGFyIGTDqWZhdXQgbGUgc2xpZGVyIGVzdCBlbiBsZWN0dXJlDQogICAgICAgICAgICB2YXIgZXRhdFNsaWRlciA9ICdwbGF5JzsNCiAgICAgICAgICAgIHZhciBsb2dvRXRhdFNsaWRlciA9ICdwYXVzZSc7DQogICAgICAgICAgICAkKCcuY29tbWFuZGVzLXNsaWRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIGlmIChldGF0U2xpZGVyID09ICdwbGF5Jykgew0KICAgICAgICAgICAgICAgICAgICAkKCcjZXRhdC1zbGlkZXInKS5yZW1vdmVDbGFzcygnZmEtJyArIGxvZ29FdGF0U2xpZGVyKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcycpLnNsaWNrKCdzbGlja1BhdXNlJykNCiAgICAgICAgICAgICAgICAgICAgZXRhdFNsaWRlciA9ICdwYXVzZSc7DQogICAgICAgICAgICAgICAgICAgIGxvZ29FdGF0U2xpZGVyID0gJ3BsYXknOw0KICAgICAgICAgICAgICAgICAgICAkKCcjZXRhdC1zbGlkZXInKS5hZGRDbGFzcygnZmEtJyArIGxvZ29FdGF0U2xpZGVyKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkKCcjZXRhdC1zbGlkZXInKS5yZW1vdmVDbGFzcygnZmEtJyArIGxvZ29FdGF0U2xpZGVyKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcycpLnNsaWNrKCdzbGlja1BsYXknKQ0KICAgICAgICAgICAgICAgICAgICBldGF0U2xpZGVyID0gJ3BsYXknOw0KICAgICAgICAgICAgICAgICAgICBsb2dvRXRhdFNsaWRlciA9ICdwYXVzZSc7DQogICAgICAgICAgICAgICAgICAgICQoJyNldGF0LXNsaWRlcicpLmFkZENsYXNzKCdmYS0nICsgbG9nb0V0YXRTbGlkZXIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBpZigkKCQoJy5maWNoZS1hbm5vbmNlIC5jb250YWluZXItY291dmVydHVyZXMgaW1nJylbMF0pLmhlaWdodCgpID4gJCgnLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcycpLmhlaWdodCgpKXsNCiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0Q29udGFpbmVyID0gJCgnLmNvbnRhaW5lci1jb3V2ZXJ0dXJlcycpLmhlaWdodCgpOw0KICAgICAgICAgICAgICAgIHZhciBpbWdIZWlnaHQgPSAkKCQoJy5maWNoZS1hbm5vbmNlIC5jb250YWluZXItY291dmVydHVyZXMgaW1nJylbMF0pLmhlaWdodCgpOw0KICAgICAgICAgICAgICAgIHZhciBtYXJnaW4gPSAoaW1nSGVpZ2h0KjEgLSBoZWlnaHRDb250YWluZXIqMSkgLyAyOw0KICAgICAgICAgICAgICAgICQoJy5maWNoZS1hbm5vbmNlIC5jb250YWluZXItY291dmVydHVyZXMgaW1nJykuY3NzKCdtYXJnaW4tdG9wJywgJy0nICsgbWFyZ2luICsgJ3B4Jyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgICAgICAkKHdpbmRvdykucmVzaXplKCBmdW5jdGlvbigpew0KICAgICAgICAgICAgaWYoJCgkKCcuZmljaGUtYW5ub25jZSAuY29udGFpbmVyLWNvdXZlcnR1cmVzIGltZycpWzBdKS5oZWlnaHQoKSA+ICQoJy5jb250YWluZXItY291dmVydHVyZXMnKS5oZWlnaHQoKSl7DQogICAgICAgICAgICAgICAgdmFyIGhlaWdodENvbnRhaW5lciA9ICQoJy5jb250YWluZXItY291dmVydHVyZXMnKS5oZWlnaHQoKTsNCiAgICAgICAgICAgICAgICB2YXIgaW1nSGVpZ2h0ID0gJCgkKCcuZmljaGUtYW5ub25jZSAuY29udGFpbmVyLWNvdXZlcnR1cmVzIGltZycpWzBdKS5oZWlnaHQoKTsNCiAgICAgICAgICAgICAgICB2YXIgbWFyZ2luID0gKGltZ0hlaWdodCoxIC0gaGVpZ2h0Q29udGFpbmVyKjEpIC8gMjsNCiAgICAgICAgICAgICAgICAkKCcuZmljaGUtYW5ub25jZSAuY29udGFpbmVyLWNvdXZlcnR1cmVzIGltZycpLmNzcygnbWFyZ2luLXRvcCcsICctJyArIG1hcmdpbiArICdweCcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgIHdpbmRvdy5vcGVuX2Zyb21fdmlzaXRlID0gZmFsc2U7DQoNCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpDQogICAgICAgIHsNCiAgICAgICAgICAgICQoIi5uYXZpZ2F0aW9uX2ZpY2hlIikuc21jTWFuYWdlQW5ub25jZSh7DQogICAgICAgICAgICAgICAgZmljaGU6IHRydWUsDQogICAgICAgICAgICAgICAgSWRBbm5vbmNlOiAyMTU4MDcxLA0KICAgICAgICAgICAgICAgIGxhbmc6ICdmcicsDQogICAgICAgICAgICAgICAgdGV4dGVMaWVuUmV0b3VyQXV4QW5ub25jZXM6ICdSZXRvdXIgYXV4IHLDqXN1bHRhdHMnDQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgaWYgKG1vYmlsZV9kZXRlY3QoZmFsc2UpICE9IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgJCh3aW5kb3cpLmJpbmQoImNsaWNrIiwgZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0Ow0KICAgICAgICAgICAgICAgICAgICBpZiAoISQodGFyZ2V0KS5oYXNDbGFzcygiY29sb25uZSIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCIudHJhbmNoZSIpLnJlbW92ZUNsYXNzKCJvcGVuIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQoNCiAgICAgICAgZnVuY3Rpb24gY291bnRGYWNlYm9vayhpZEFubm9uY2UsIHR5cGUpDQogICAgICAgIHsNCiAgICAgICAgICAgICQuYWpheCh7DQogICAgICAgICAgICAgICAgdXJsOiAnL3ZpZXdzL2FqYXgvY291bnRGYWNlYm9vay5waHA/SWRBbm5vbmNlPScgKyBpZEFubm9uY2UgKyAnJnR5cGU9JyArIHR5cGUsDQogICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsDQogICAgICAgICAgICAgICAgZGF0YTogJ0lkQW5ub25jZT0nICsgaWRBbm5vbmNlICsgJyZ0eXBlPScgKyB0eXBlDQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIHR3ZWV0ZXJBbm5vbmNlKCkNCiAgICAgICAgew0KICAgICAgICAgICAgdmFyIHNyYyA9ICJodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldC8/dXJsPSIgKyB3aW5kb3cubG9jYXRpb24uaHJlZjsNCiAgICAgICAgICAgIGNvdW50RmFjZWJvb2soMjE1ODA3MSwgJ05iVHdpdHRlcicpOw0KICAgICAgICAgICAgd2luZG93Lm9wZW4oc3JjLCBmYWxzZSk7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBwYXJ0YWdlckFubm9uY2VGYigpDQogICAgICAgIHsNCiAgICAgICAgICAgIGNvdW50RmFjZWJvb2soMjE1ODA3MSwgJ05iRmFjZWJvb2snKTsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIDwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgew0KICAgICAgICAkKCcjbmV3c2xldHRlcl9zdWJtaXQnKS5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkgew0KICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgIHZhciB0ZXh0ZUluaXRpYWxCb3V0b24gPSAkKHRoaXMpLnRleHQoKTsNCiAgICAgICAgICAgICQodGhpcykudGV4dCgnRW52b2kgZW4gY291cnMuLi4nKQ0KICAgICAgICAgICAgICAgIC5wcm9wKCJkaXNhYmxlZCIsIHRydWUpOw0KICAgICAgICAgICAgJCgnI25ld3NsZXR0ZXJfc3VibWl0JykuYWRkQ2xhc3MoJ2Rpc2FibGVkJykNCiAgICAgICAgICAgICQucG9zdCgiaHR0cHM6Ly93d3cucmVzaWRlbmNlcy1pbW1vYmlsaWVyLmNvbS9uZXdzbGV0dGVyL2ZyIiwgew0KICAgICAgICAgICAgICAgICAgICBlbWFpbDogJCgnI25ld3NsZXR0ZXJfZW1haWwnKS52YWwoKQ0KICAgICAgICAgICAgICAgIH0pLmRvbmUoZnVuY3Rpb24oZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjbmV3c2xldHRlcl9zdWJtaXQnKS50ZXh0KHRleHRlSW5pdGlhbEJvdXRvbikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKQ0KICAgICAgICAgICAgICAgICAgICBhbGVydChkYXRhLm1lc3NhZ2UpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoZmJxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBmYnEoJ3RyYWNrJywgJ0xlYWQnKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjbmV3c2xldHRlcl9zdWJtaXQnKS50ZXh0KHRleHRlSW5pdGlhbEJvdXRvbikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKQ0KICAgICAgICAgICAgICAgICAgICBhbGVydChKU09OLnBhcnNlKGRhdGEucmVzcG9uc2VUZXh0KS5lcnJvcnMuZW1haWxbMF0pOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9KTsNCjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3LnJlc2lkZW5jZXMtaW1tb2JpbGllci5jb20vanMvbGlicy9zbWMvbXktc2VsZWN0aW9uLmpzIj48L3NjcmlwdD4NCg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJhamF4TW9kYWwiIHJvbGU9ImRpYWxvZyI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIiBpZD0iZXhhbXBsZU1vZGFsTG9uZ1RpdGxlIj5Sw6lzaWRlbmNlcyBJbW1vYmlsaWVyPC9oNT4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJhamF4TW9kYWwtYm9keSIgY2xhc3M9Im1vZGFsLWJvZHkiPjwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:15 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-3eme-2151853.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:16 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6ImI1MFhkMW9Gb3BDbEx2VUJoSXlUXC9RPT0iLCJ2YWx1ZSI6IkFmeGZBOGJnOHJCNzZFajBaY05TRHh6VXpEUzhMc3dBYnlBUTh3WDJoQXBhOWZvdlFsbHg3M3lRakhsc1FSQmkiLCJtYWMiOiI5ODJkMGU1Zjk3YzU2ZDQ3NzZkZTMzM2M0MjAwN2Y0OGM3NjZkN2RlYmMwYWI5YTM4YWJlY2ZlZWI3OTA0ODA5In0%3D;
        expires=Wed, 10-Jun-2020 18:05:16 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6IlNrbGJDOEQyUlo3aVpQbTdWa1wvN0FnPT0iLCJ2YWx1ZSI6IjdFYmtVZ2RuaFwvN1dPa0FcL2RWNmZGWHAwNEZkOCtJZDhVVHA3QndyWDJtT1Q4RFBDK1dHYTVOR3pCSGxGSEtyNiIsIm1hYyI6Ijc4ZDZmNDFjM2NjZWY3YWU0MTQ5MjE5NWVhMjZkY2ZkOWM4YmFiNDU4ZjY3YWI1YjliMTYyNWU1YmFjNmNjOTEifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:16 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12418'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:16 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-3eme-2149527.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:17 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IlFMbTdXUUJvbzBiM1wvd2taZzR0SkxnPT0iLCJ2YWx1ZSI6IlkxaXBsUnk3cHNDOCtrWUFpYzU5eG5wZ1I2NU9oR09mWHhKQjVMWTE4ait1dnNxZUlvcTZ4bFwvWkJ6dStcL3J0OSIsIm1hYyI6IjdmOTJmNTMxMTc1ZmNmNzBlNzVhYTE1OTY1MDAzM2Q2YjBiMGUwOTUyMmVmNTQyNWIzZGRkNWEwYjU3MmY1OGQifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:17 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6IlR2MmNwYnJIbzgyXC9ZcUlwUndoTnhnPT0iLCJ2YWx1ZSI6IjJiajdHWlNucWp2MW9QbWFlQm00RjlUZnlJaFp6NGcyaEE0b2Y4bGlDeTBMYVZMNDVSN054Z2QxVGJ6aEUxekUiLCJtYWMiOiJhZjQ2MzhjNjA4ZjQ1NzNkN2IzNjA2YWJiZDljYzI1ZGI3NmFhZjA2ZDgxMmE2NmVjNTQxZTk2MWQ3MzkwNzJlIn0%3D;
        expires=Wed, 10-Jun-2020 18:05:17 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13041'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:17 GMT
- request:
    method: get
    uri: https://www.residences-immobilier.com/fr/75/annonce-vente-appartement-paris-4eme-2139902.html?fromRecherche=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 10 Jun 2020 16:05:18 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Cache-Control:
      - no-cache, private
      Set-Cookie:
      - XSRF-TOKEN=eyJpdiI6IkVOYjN5cWtPbkxQVUVINnptVG04NWc9PSIsInZhbHVlIjoiQ2p5QmdnSVZ6Wk04bEpRbkFuMjFUMGM4bmZWTHBrTHhMZGJTU3VrcmF3YkRjU3hlbHJsMGIyTHpWWmdRaUF5QiIsIm1hYyI6IjRhNTNmMzNjMGI3YTg0MmMwOWI5ZWFjZWVhZWM3YTg2N2NlYjYzOGIxZWIzNzE2OTIyZWI5OTlkOWZlMWU1NzAifQ%3D%3D;
        expires=Wed, 10-Jun-2020 18:05:18 GMT; Max-Age=7200; path=/
      - ri_session=eyJpdiI6IkxSOGtNUXdsdVFHSVBSd1FpMXI1d0E9PSIsInZhbHVlIjoicEpGK0I1dnBQdURFZFVcL1NGU3lrZktabWZLeWZmUTkwZzF0aTNvdHlsbTRmcVwvSytUZTBPemNsYjU5K1pObTJkIiwibWFjIjoiMWU4MzQzZThiOGJjM2RiZjU5ZGNlYmI4OWJiMzE1MWFkM2VjMTM0MzhkZTY1ZmJmZGRkMGQ0OTUwMzhlZWZjYyJ9;
        expires=Wed, 10-Jun-2020 18:05:18 GMT; Max-Age=7200; path=/; httponly
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12679'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 10 Jun 2020 16:05:18 GMT
recorded_with: VCR 5.1.0
