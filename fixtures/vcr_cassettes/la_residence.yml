---
http_interactions:
- request:
    method: get
    uri: https://www.laresidence.fr/nos-annonces?CodesType=20,1&CodesVille=1862,21759,650,554,21952,682,493,21996,654,680,21967,21787,661,21660,21756,22022,573,21861,45938,45937&Etats=Bac&autosave=true
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - ASP.NET_SessionId=f2izmlyruru5oaoicbm3syro; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=5459a875-31f9-49fb-a612-80ca778bdb6e; expires=Wed, 31-Mar-2021 16:38:51
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26CodesVille%3d1862%2c21759%2c650%2c554%2c21952%2c682%2c493%2c21996%2c654%2c680%2c21967%2c21787%2c661%2c21660%2c21756%2c22022%2c573%2c21861%2c45938%2c45937%26CodesType%3d20%2c1%26autosave%3dtrue;
        expires=Wed, 31-Mar-2021 16:38:51 GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 31 Mar 2020 16:38:51 GMT
      Content-Length:
      - '27774'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:50 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-05/appartement/1000142610
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-05/appartement/1000142610
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 31 Mar 2020 16:38:51 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTA1L2FwcGFydGVtZW50LzEwMDAxNDI2MTAiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:50 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-05/appartement/1000142610
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=qx34jtisre43wiw0ethjphq5; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=685b4a62-91e8-473b-a877-911113329f1a; expires=Wed, 31-Mar-2021 16:38:52
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Wed, 31-Mar-2021 16:38:52
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 31 Mar 2020 16:38:52 GMT
      Content-Length:
      - '38865'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:51 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-05/appartement/1000137161
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-05/appartement/1000137161
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 31 Mar 2020 16:38:52 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTA1L2FwcGFydGVtZW50LzEwMDAxMzcxNjEiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:51 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-05/appartement/1000137161
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=zgh4jsirfsfm3cjlli4opu30; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=362a09e7-e22f-4637-8ee6-ac65593bcdc5; expires=Wed, 31-Mar-2021 16:38:52
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Wed, 31-Mar-2021 16:38:52
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 31 Mar 2020 16:38:53 GMT
      Content-Length:
      - '39441'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:52 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-19/appartement/1000143421
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-19/appartement/1000143421
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 31 Mar 2020 16:38:53 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxNDM0MjEiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:52 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-19/appartement/1000143421
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=3zrsl33fcqrejfawdsgnevjp; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=8b27ac06-c937-412d-a9d6-00279b1115da; expires=Wed, 31-Mar-2021 16:38:54
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Wed, 31-Mar-2021 16:38:54
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 31 Mar 2020 16:38:53 GMT
      Content-Length:
      - '36026'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:53 GMT
recorded_with: VCR 5.1.0
