---
http_interactions:
- request:
    method: get
    uri: https://www.iadfrance.fr/rechercher/annonces?departments=Paris&frequency=Journali%C3%A8re&generic_type%5B%5D=AP&generic_type%5B%5D=MV&id=&price_max=&price_min=&surface_max=&surface_min=&tags_list=%5B%7B%22type%22:%22departments%22,%22value%22:%22Paris%22,%22name%22:%22Paris%20%22%7D%5D&transaction_type=Vente
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:14 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=934fd2b8744cf73eebf7fd207fd4dace; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:14 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:14 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:14 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-5-pieces-paris-177m2/r750957?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:16 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=f4f94b2f484e6b685bc74323d5c7eb61; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:16 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:16 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:16 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:16 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-3-pieces-paris-54m2/r781585?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:20 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=4f65e3635d86b3a8c450b63ac44d88ce; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:20 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:20 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:20 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ICAgIDwhRE9DVFlQRSBodG1sPgoKICAgIDxoZWFkPgogICAgICAgIDwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIChmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzogbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPScvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JytpK2RsO2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaixmKTt9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1XUEtOU0Q5Jyk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ii8+CiAgICAgICAgPHRpdGxlPmlhZCAtICAgIEFwcGFydGVtZW50IGRlIDU0IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUwo8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9IiAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBDYW1pbGxlIERPTEZVUyAgdm91cyBwcm9wb3NlIDogQklFTiBDT1VQIERFIENPRVVSIC8gQVRZUElRVUUgLSBCZWwgYXBwYXJ0ZW1lbnQgMi8zIHBpw6hjZXMgZGUgY2FyYWN0w6hyZSwgc2l0dcOpIGF1IGNvZXVyIGR1IHF1YXJ0aWVyIHByaXPDqSBMZWRydSBSb2xsLi4uCiAgICAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iaWFkIGltbW9iaWxpZXIiLz4KICAgICAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgbWluaW11bS1zY2FsZT0xIj4KICAgICAgICA8bWV0YSBuYW1lPSJnb29nbGUtc2l0ZS12ZXJpZmljYXRpb24iIGNvbnRlbnQ9Ik0zQ1VpcHpwZEFkTXpMWmdvS0tYWU9JOHp5cm1uVGxubTJfMVFFZzJRanMiLz4KICAgICAgICAgICAgPG1ldGEgbmFtZT0icm9ib3RzIiBjb250ZW50PSJpbmRleCwgZm9sbG93Ii8+CiAgICAgICAgPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTU0bTIvcjc4MTU4NT9fbG9jYWxlPWZyIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6c2l0ZV9uYW1lIiBjb250ZW50PSJJQUQiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQgZGUgNTQgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6bG9jYWxlIiBjb250ZW50PSJmcl9GUiIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmxvY2FsZTphbHRlcm5hdGUiIGNvbnRlbnQ9ImVuX1VTIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0id2Vic2l0ZSIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSIgICAgCiAgICAgICAgaWFkIEZyYW5jZSAtIENhbWlsbGUgRE9MRlVTICgwNiA2MSA2MiAwMCA4Nikgdm91cyBwcm9wb3NlIDogQklFTiBDT1VQIERFIENPRVVSIC8gQVRZUElRVUUgLSBCZWwgYXBwYXJ0ZW1lbnQgMi8zIHBpw6hjZXMgZGUgY2FyYWN0w6hyZSwgc2l0dcOpIGF1IGNvZXVyIGR1IHF1YXJ0aWVyIHByaXPDqSBMZWRydSBSb2xsaW4gLSBSdWUgZHUgRmF1Ym91cmcgU2FpbnQgQW50b2luZSwgw6AgcXVlbHF1ZXMgbWludXRlcyDDoCBwaWVkcyBkZSBsYSBQbGFjZSBkZSBsYSBCYXN0aWxsZS4gQSBwcm94aW1pdMOpIGltbcOpZGlhdGUgZGUgdG91dGVzIGNvbW1vZGl0w6lzLi4uCiAgICAiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTU0bTIvcjc4MTU4NSIvPgogICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiCiAgICAgICAgICAgICAgY29udGVudD0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL21lZGlhL2NhY2hlL3Jlc29sdmUvYWRfcGhvdG9fdGh1bWIvcGhvdG8vNzQ3NTYwMzIuanBnIi8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9InR3aXR0ZXI6aW1hZ2UiCiAgICAgICAgICAgICAgY29udGVudD0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL21lZGlhL2NhY2hlL3Jlc29sdmUvYWRfcGhvdG9fdGh1bWIvcGhvdG8vNzQ3NTYwMzIuanBnIi8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9InR3aXR0ZXI6c2l0ZSIgY29udGVudD0iaWFkIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5Ii8+CiAgICA8bWV0YSBwcm9wZXJ0eT0idHdpdHRlcjp0aXRsZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQgZGUgNTQgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0idHdpdHRlcjpkZXNjcmlwdGlvbiIgY29udGVudD0iICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBDYW1pbGxlIERPTEZVUyAoMDYgNjEgNjIgMDAgODYpIHZvdXMgcHJvcG9zZSA6IEJJRU4gQ09VUCBERSBDT0VVUiAvIEFUWVBJUVVFIC0gQmVsIGFwcGFydGVtZW50IDIvMyBwacOoY2VzIGRlIGNhcmFjdMOocmUsIHNpdHXDqSBhdSBjb2V1ciBkdSBxdWFydGllciBwcmlzw6kgTGVkcnUgUm9sbGluIC0gUnVlIGR1IEZhdWJvdXJnIFNhaW50IEFudG9pbmUsIMOgIHF1ZWxxdWVzIG1pbnV0ZXMgw6AgcGllZHMgZGUgbGEgUGxhY2UgZGUgbGEgQmFzdGlsbGUuIEEgcHJveGltaXTDqSBpbW3DqWRpYXRlIGRlIHRvdXRlcyBjb21tb2RpdMOpcy4uLgogICAgIi8+CgoKICAgICAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iY2FjaGUtY29udHJvbCIgY29udGVudD0ibWF4LWFnZT0wIi8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iY2FjaGUtY29udHJvbCIgY29udGVudD0ibm8tY2FjaGUiLz4KICAgICAgICA8bWV0YSBodHRwLWVxdWl2PSJleHBpcmVzIiBjb250ZW50PSIwIi8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iZXhwaXJlcyIgY29udGVudD0iVHVlLCAwMSBKYW4gMTk4MCAxOjAwOjAwIEdNVCIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9InByYWdtYSIgY29udGVudD0ibm8tY2FjaGUiLz4KCiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS9wbmciIHNpemVzPSIzMngzMiIgaHJlZj0iL2ltZy9mYXZpY29ucy9mYXZpY29uLTMyeDMyLnBuZz92MS4yMC4xIj4KICAgICAgICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3BuZyIgc2l6ZXM9IjE2eDE2IiBocmVmPSIvaW1nL2Zhdmljb25zL2Zhdmljb24tMTZ4MTYucG5nP3YxLjIwLjEiPgogICAgICAgIDxsaW5rIHJlbD0ibWFuaWZlc3QiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvbWFuaWZlc3QuanNvbj92MS4yMC4xIj4KICAgICAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIgY29udGVudD0iI2ZmZmZmZiI+CiAgICAgICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2UiIGNvbnRlbnQ9Ii9pbWcvZmF2aWNvbnMvbXMtaWNvbi0xNDR4MTQ0LnBuZz92MS4yMC4xIj4KICAgICAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iI2ZmZmZmZiAiPgoKICAgICAgICAgICAgICAgICAgICA8IS0tICoqIEdPT0dMRSBGT05UUyAqKiAtLT4KICAgICAgICAgICAgPGxpbmsgaHJlZj0iLy9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUdsb3JpYStIYWxsZWx1amFoIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KICAgICAgICAgICAgPGxpbmsgaHJlZj0iLy9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUxhdG86MzAwLDQwMCw3MDAsMzAwaXRhbGljLDQwMGl0YWxpYyw3MDBpdGFsaWMiCiAgICAgICAgICAgICAgICAgIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9RHJvaWQrU2Fuczo0MDAsNzAwIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KICAgICAgICAgICAgPGxpbmsgaHJlZj0iLy9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvdWdlK1NjcmlwdCIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CgogICAgICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9jc3MvdmVuZG9yLWExNTE1ODliZTgubWluLmNzcz92MS4yMC4xIj4KICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvYWxsLmNzcz92MS4yMC4xIj4KICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvY3NzL21haW4tNDIxMWQ3NTYxZi5taW4uY3NzP3YxLjIwLjEiPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgIGRpdi5jYy13aW5kb3cuY2MtYmFubmVyIHsKICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAwcHg7CiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogMHB4OwogICAgICAgICAgICB9CgogICAgICAgICAgICBhLmNjLWJ0biB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuN2VtOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzcGFuLmNjLW1lc3NhZ2UgewogICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMXB4OwogICAgICAgICAgICB9CgogICAgICAgICAgICBhLmNjLWJ0bi5jYy1kaXNtaXNzOmhvdmVyIHsKICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZSAhaW1wb3J0YW50OwogICAgICAgICAgICB9CgogICAgICAgICAgICBhLmNjLWJ0bi5jYy1hbGxvdzpob3ZlciB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZmY1OwogICAgICAgICAgICB9CgogICAgICAgICAgICAuaGlkZVB0IHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7CiAgICAgICAgICAgIH0KICAgICAgICA8L3N0eWxlPgoKCiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2ZvbnQtYXdlc29tZS80LjUuMC9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiPgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiBocmVmPSIvaW1nL2Zhdmljb25zL2Zhdmljb24uaWNvP3YxLjIwLjEiLz4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgc3JjPSIvYWxsLmpzP3YxLjIwLjEiPjwvc2NyaXB0PgogICAgICAgIAogICAgCiAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvcG9wdXAtY292aWQxOS9jc3Mvc3R5bGUuY3NzP3YxLjIwLjEiPiAgICAgPC9oZWFkPgoKCgo8Ym9keSAgY2xhc3M9IiIgaXRlbXNjb3BlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9XZWJQYWdlIj4KPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+Cjxub3NjcmlwdD4KICAgIDxpZnJhbWUgc3JjPSIvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1XUEtOU0Q5IiBoZWlnaHQ9IjAiIHdpZHRoPSIwIiBzdHlsZT0iZGlzcGxheTpub25lO3Zpc2liaWxpdHk6aGlkZGVuIj48L2lmcmFtZT4KPC9ub3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgoKPGRpdiBpZD0iZmItcm9vdCI+PC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcmUtaGVhZGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgUG91ciB1bmUgbWVpbGxldXJlIGV4cMOpcmllbmNlIHN1ciBub3RyZSBzaXRlIDogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluIj48L2k+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtIGZvcm1fX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgTG9jYWxpc2V6LXZvdXMgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iZm9ybV9fbG9jYWxpemF0aW9uIiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19hcnJvdy0xIiB2YWx1ZT0iIiB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsPSIvZ2VvLXNlYXJjaC8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXNlcmNvdW50cnk9IiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY291bnRyeT0iZnIiPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fY2xvc2UiPjxzcGFuIGNsYXNzPSJoaWRkZW4teHMiPkZlcm1lcjwvc3Bhbj4gPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWNyb3NzIj48L2k+PC9hPgogICAgICAgIDwvZGl2PgogICAgCjxkaXYgaWQ9ImpzLWZsYXNoYmFnIiBjbGFzcz0iYWxlcnQgYWxlcnQtZXJyb3IgYWxlcnQtZGlzbWlzc2libGUiIHJvbGU9ImFsZXJ0IiBkYXRhLXR5cGU9ImZsYXNoIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgogICAgPGJ1dHRvbiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0iYWxlcnQiPgogICAgICAgIDxzcGFuPiZ0aW1lczs8L3NwYW4+CiAgICA8L2J1dHRvbj4KICAgIENlIGJpZW4gbidlc3QgcGx1cyBkaXNwb25pYmxlLCB2b3VzIGF2ZXogw6l0w6kgcmVkaXJpZ8OpIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWw8L2Rpdj4KCjxkaXYgY2xhc3M9Im1haW4taGVhZGVyLXdyYXBwZXIiPgogICAgPGRpdiBpZD0ibWFpbiIgY2xhc3M9Im1haW4tY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9uX19tZW51LWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbl9fbWVudS1vcGVuIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24tbWVudSI+PC9pPjwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b25fX21lbnUtY2xvc2UiPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1jcm9zcyI+PC9pPjwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoZWFkZXIgaWQ9ImhlYWRlciIgY2xhc3M9IiBoZWFkZXIiIGl0ZW1zY29wZQogICAgICAgICAgICAgICAgICAgIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9XUEhlYWRlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXJfX2xvZ28iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci8iIGNsYXNzPSJoZWFkZXJfX2xvZ28tbGluayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2lhZC1sb2dvLnBuZz92MS4yMC4xIiBhbHQ9IklBRCA6IExvY2F0aW9uIGV0IHZlbnRlIGVuIGltbW9iaWxpZXIiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPG5hdiBpZD0ibWVudSIgY2xhc3M9Im1lbnUgbWVudV9fbW9iaWxlICIKICAgICAgICAgICAgICAgICAgICAgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9TaXRlTmF2aWdhdGlvbkVsZW1lbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaXJzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hhdC9saXN0ZS9hbm5vbmNlcz9zb3J0PWFkLmZpcnN0UHVibGlzaERhdGUmYW1wO2Rpcj1kZXNjIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIEFjaGV0ZXIKCiAgICAgICAgPGkgY2xhc3M9Im1lbnUtaWNvbjIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9sb2NhdGlvbi9saXN0ZS9hbm5vbmNlcz9zb3J0PWFkLmZpcnN0UHVibGlzaERhdGUmYW1wO2Rpcj1kZXNjIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIExvdWVyCgogICAgICAgIDxpIGNsYXNzPSJtZW51LWljb24zIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvdmVuZHJlIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIFZlbmRyZQoKICAgICAgICA8aSBjbGFzcz0ibWVudS1pY29uMyI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2VzdGltZXItdm90cmUtYmllbiIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBFc3RpbWVyCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Iml0ZW0taGlnaGxpZ2h0ZWQiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvdmVudGUvYW5ub25jZXMvaW1tb2JpbGllci1wcmVzdGlnZS9saXN0ZS1yZXN1bHRhdD9yYWRpdXM9MjAmYW1wO3RyYW5zYWN0aW9uX3R5cGU9VmVudGUmYW1wO3RhZ3MlNUIwJTVEPXByZXN0aWdlIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIFBSRVNUSUdFCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNob3cteHMiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvdHJvdXZlci11bi1jb25zZWlsbGVyIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIFRyb3V2ZXIgdW4gY29uc2VpbGxlcgoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzaG93LXhzIGxhc3QiIGljb249ImRlbW8taWNvbiBpY29uLXVzZXJfem9vbSI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGV2ZW5pci1jb25zZWlsbGVyLmlhZGZyYW5jZS5mciIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBOb3VzIHJlam9pbmRyZQoKICAgICAgICA8aSBjbGFzcz0iLyI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCgogICAgPC91bD4KCiAgICAgICAgICAgICAgICA8L25hdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51X19zZWNvbmQgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhpZGRlbi14cyBmaXJzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci90cm91dmVyLXVuLWNvbnNlaWxsZXIiICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX3NlY29uZCBidXR0b25fX21lZGl1bSI+CiAgICAgICAgICAgIFRyb3V2ZXIgdW4gY29uc2VpbGxlcioKCiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXVzZXJfem9vbSI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGlkZGVuLXhzIiBpY29uPSJkZW1vLWljb24gaWNvbi11c2VyX3pvb20iPiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RldmVuaXItY29uc2VpbGxlci5pYWRmcmFuY2UuZnIiICAgICB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX19tYWluIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICAgICAgTm91cyByZWpvaW5kcmUKCiAgICAgICAgPGkgY2xhc3M9Ii8iPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhcy1jaGlsZCBjb3VudHJ5LWNob3Nlbi1mciBsaW5rLWlhZCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcHJvZmlsIj4KICAgICAgICAgICAgaWFkIEZyYW5jZQoKICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctZG93biI+PC9pPgogICAgPC9hPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJtZW51X2xldmVsXzEiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmlyc3QiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvL3d3dy5pYWRlc3BhbmEuZXMiICAgICBjbGFzcz0idGV4dC1jZW50ZXIgbWVudS1pdGVtLXVuY2VudGVyZWQgaWFkLWZyYW5jZSI+CiAgICAgICAgICAgIGlhZCBFc3Bhw7FhCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vd3d3LmlhZC1pdGFsaWEuaXQiICAgICBjbGFzcz0idGV4dC1jZW50ZXIgbWVudS1pdGVtLXVuY2VudGVyZWQgaWFkLWZyYW5jZSI+CiAgICAgICAgICAgIGlhZCBJdGFsaWEKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGFzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vd3d3LmlhZHBvcnR1Z2FsLnB0IiAgICAgY2xhc3M9InRleHQtY2VudGVyIG1lbnUtaXRlbS11bmNlbnRlcmVkIGlhZC1mcmFuY2UiPgogICAgICAgICAgICBpYWQgUG9ydHVnYWwKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCgogICAgPC91bD4KCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoYXMtY2hpbGQgdXNlci1tZW51IGxhc3QiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiAgICAgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3Byb2ZpbCI+CiAgICAgICAgICAgIAoKICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdXNlci00Ij48L2k+CiAgICA8L2E+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im1lbnVfbGV2ZWxfMSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGlkPSJsb2dpbl9idG4iIGNsYXNzPSJkZW1vLWljb24gaWNvbi11c2VyLTMgd2lkZSBmaXJzdCIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0ibG9naW4tdGFiIj4gICAgICAgIDxzcGFuPiAgICBTZSBjb25uZWN0ZXIKPC9zcGFuPiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGlkPSJjcmVhdGVfYnRuIiBjbGFzcz0iZGVtby1pY29uIGljb24tdXNlci0yIHdpZGUgbGFzdCIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4gICAgICAgIDxzcGFuPiAgICBDcsOpZXIgdW4gY29tcHRlCjwvc3Bhbj4gICAgICAgIAogICAgPC9saT4KCgogICAgPC91bD4KCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oZWFkZXI+CiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCgo8bWFpbiBpZD0ibWFpbl9fY29udGVudCIgY2xhc3M9Im1haW5fX2NvbnRlbnQiIGl0ZW1zY29wZSBpdGVtcHJvcD0ibWFpbkNvbnRlbnRPZlBhZ2UiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9CbG9nIj4KICAgIDxzZWN0aW9uIGlkPSJjb250ZW50IiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9InNlYXJjaEZvcm0iIGNsYXNzPSJzZWFyY2hfX2JhciIgYWN0aW9uPSIvcmVjaGVyY2hlci9hbm5vbmNlcyIgbWV0aG9kPSJHRVQiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19maWx0ZXJzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1zZWxlY3QiIGRhdGEtbmFtZT0iQWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5BY3Rpb248L2E+CiAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0idHJhbnNhY3Rpb25fdHlwZSIgaWQ9InNlYXJjaC1uYXYiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlbGVjdGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IlZlbnRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjaGV0ZXIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iTG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG91ZXIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJWaWFnZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlhZ2VyICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4tLT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJMaWV1KHgpIgogICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCAgbXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4gTGlldSh4KTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iZ2VvX3ZhbHVlIiBjbGFzcz0ic2VsZWN0X19pbnB1dCB3aGVyZVRvQnV5X19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9IndoZXJlVG9CdXkiIGNsYXNzPSJ3aGVyZVRvQnV5U2VhcmNoQmFyIHNlYXJjaC1iaWctZmllbGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJPw7kgPyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9hdXRvY29tcGxldGUtZ2MvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcnNsZXktZXJyb3JzLW1lc3NhZ2VzLWRpc2FibGVkPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWdzX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJUeXBlKHMpIGRlIGJpZW4iCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0aW9ubmVzPSJzw6lsZWN0aW9ubsOpcyIgZGF0YS1hbGxzZWxlY3Rpb25uZXM9IlRvdXMgc8OpbGVjdGlvbm7DqXMiCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCBtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VHlwZShzKSBkZSBiaWVuPC9hPgogICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImdlbmVyaWNfdHlwZVtdIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSJBUCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXBwYXJ0ZW1lbnQtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iTVYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1haXNvbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJQQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZ2FyYWdlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdhcmFnZSAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJGQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tY29tbWVyY2UtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVyY2UgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iSU0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFwcGFydGVtZW50LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIELDonRpbWVudCAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJCVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYnVyZWF1LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1cmVhdSAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0idGVycmFpbiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJURSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXJyYWluICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbmFtZT0iU3VyZmFjZSBtaW4vbWF4IiBkYXRhLXN0YXJ0X2F0PSJkZSIgIGRhdGEtc3RhcnRfdG89IsOgIiBjbGFzcz0iYy1zZWxlY3QgbWluX19tYXgKICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlN1cmZhY2UgbWluL21heDwvYT4KICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pbiA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJzdXJmYWNlX21pbiIgbmFtZT0ic3VyZmFjZV9taW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyc2xleS1yZXF1aXJlZD0iZmFsc2UiIGRhdGEtcGFyc2xleS10eXBlPSJudW1iZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPm3Csjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF4IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9InN1cmZhY2VfbWF4IiBuYW1lPSJzdXJmYWNlX21heCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJmYWxzZSIgZGF0YS1wYXJzbGV5LXR5cGU9Im51bWJlciIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZSI+bcKyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLXVzZS1uYW1lPSJmYWxzZSIgZGF0YS1uYW1lPSJQacOoY2UocykiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InBpZWNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlBpw6hjZShzKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0icm9vbXNbXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGRhdGEtdmFsdWU9IjEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBwacOoY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzIHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1IHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTYiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA2IHBpw6hjZXMgZXQgcGx1cyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1uYW1lPSJQcml4IG1pbi9tYXgiIGRhdGEtc3RhcnRfYXQ9ImRlIiAgZGF0YS1zdGFydF90bz0iw6AiIGNsYXNzPSJjLXNlbGVjdCAgbWluX19tYXgKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+UHJpeCBtaW4vbWF4PC9hPgogICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdHJhbnNhY3Rpb24tdHlwZT0iVmVudGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXByaWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaW4gOiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0icHJpY2VfbWluIiB0eXBlPSJ0ZXh0IiB0aXRsZT0iUHJpeCBtaW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdHJhbnNhY3Rpb24tdHlwZT0iTG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXByaWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXggOiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0icHJpY2VfbWF4IiB0eXBlPSJ0ZXh0IiB0aXRsZT0iUHJpeCBtYXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fYm94X19tb3JlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9ImZhbHNlIiBpZD0iY2hhbWJyZXMiIGRhdGEtbmFtZT0iQ2hhbWJyZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYy1zZWxlY3QgbXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+IENoYW1icmVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iYmVkcm9vbXNbXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBjaGFtYnJlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgY2hhbWJyZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBjaGFtYnJlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSI0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IGNoYW1icmVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUgY2hhbWJyZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNiBjaGFtYnJlcyBldCBwbHVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJUYWcocykiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VGFnKHMpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJ0YWdzW10iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9ImV4Y2x1c2l2ZSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGNsdXNpdml0w6kgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJ0b3AiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ291cCBkZSBjb2V1ciAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Im5ldyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3V2ZWF1ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0icHJpY2VfZG93biIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYWlzc2UgZGUgcHJpeCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9ImNvbXByb21pcyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb3VzIGNvbXByb21pcyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Im5ld19idWlsZGluZyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXVmICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJEUEUiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+RFBFPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJjbGFzc19kX3BfZVtdIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkErIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEErCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJBIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iQi0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQi0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iRCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBECiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iRyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLW5hbWU9IlR5cGUgZGUgbWFuZGF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VHlwZSBkZSBtYW5kYXQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImV4Y2x1c2l2ZSIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iMSI+RXhjbHVzaWY8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpICBkYXRhLXZhbHVlPSIwIj5Ob24tZXhjbHVzaWY8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1zZWxlY3QiIGRhdGEtbmFtZT0iw4l0ZW5kcmUgbGEgcmVjaGVyY2hlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+w4l0ZW5kcmUgbGEgcmVjaGVyY2hlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJyYWRpdXMiIGNsYXNzPSJzZWxlY3RfX2lucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1a208L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMGttPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTVrbTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwa208L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImlkIiBpZD0ibWlkIiBwbGFjZWhvbGRlcj0iTsKwIGRlIG1hbmRhdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VhcmNoLXNtYWxsLWZpZWxkIiBkYXRhLXBhcnNsZXktcmVxdWlyZWQ9ImZhbHNlIiBkYXRhLXBhcnNsZXktdHlwZT0ibnVtYmVyIi8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC0zIHJpZ2h0X19pbmZvIj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0YSBhbGlnbi1jb2x1bW4tY2VudGVyIj4KCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NlY29uZCBidXR0b25fX2FjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXNlYXJjaC0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjaGVyY2hlPC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fYWxlcnQgYnV0dG9uX19tZWRpdW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWI9ImxvZ2luLXRhYiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNyw6llciB1bmUgYWxlcnRlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8IS0tPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19hY3Rpb24gYnV0dG9uX19zZWNvbmQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc2VhcmNoLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjaGVyY2hlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPi0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBpZD0icGFyYW1zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImV4Y2x1c2l2ZSIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ0YWdzX2xpc3QiIHZhbHVlPSIiLz4KICAgIDwvZGl2PgogICAgPGEgY2xhc3M9Im1vcmUgbW9yZS0taG9tZSIgaHJlZj0iIyI+CiAgICAgICAgZGUgY3JpdMOocmVzICAgIDwvYT4KPC9mb3JtPgoKPGRpdiBjbGFzcz0iZm9vdGVyLW1vYmlsZSI+CiAgICAgICAgICAgICAgICAgICAgPGNlbnRlcj4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJjb250YWN0LW1vYmlsZS1hZC1zaG93IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX3NlY29uZCAiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWVudmVsb3BlIj48L2k+CiAgICAgICAgICAgICAgICA8c3Bhbj5Db250YWN0ZXIgbGUgY29uc2VpbGxlcjwvc3Bhbj4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9jZW50ZXI+CiAgICAgICAgPC9kaXY+CgoKCiAgICA8ZGl2IGNsYXNzPSJicmVhZGNydW1iIj4KICAgIDx1bD4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iPgogICAgICAgICAgICAgICAgVmVudGUsIGFjaGF0LCBsb2NhdGlvbiwgbCdpbW1vYmlsaWVyIGRlIHByb3hpbWl0w6kgICAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImFycm93Ij4mZ3Q7PC9saT4KCiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvcmVjaGVyY2hlci9hbm5vbmNlcz90cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDthcmVhcz1GUkE4JmFtcDt0YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmFyZWFzJTIyJTJDJTIydmFsdWUlMjIlM0ElMjJGUkE4JTIyJTJDJTIybmFtZSUyMiUzQSUyMiU1Q3UwMGNlbGUtZGUtRnJhbmNlJTIyJTdEJTVEIj4KICAgICAgICAgICAgICAgIFZlbnRlCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iYXJyb3ciPiZndDs8L2xpPgogICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/YXJlYXM9RlJBOCZhbXA7dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJhcmVhcyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyRlJBOCUyMiUyQyUyMm5hbWUlMjIlM0ElMjIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCI+CiAgICAgICAgICAgICAgICAgICAgw45sZS1kZS1GcmFuY2UKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhcnJvdyI+Jmd0OzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvcmVjaGVyY2hlci9hbm5vbmNlcz90cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDtkZXBhcnRtZW50cz1QYXJpcyZhbXA7dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJkZXBhcnRtZW50cyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyUGFyaXMlMjIlMkMlMjJuYW1lJTIyJTNBJTIyUGFyaXMlMjg3NSUyOSUyMiU3RCU1RCI+CiAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhcnJvdyI+Jmd0OzwvbGk+CiAgICAgICAgICAgICAgICAgICAgCQkJCTxsaT4KCQk8YSBocmVmPSIjIj4KICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgNTQgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTCiAgICAgICAgICAgIAkJCTwvYT4JCQkJCiAgICAgICAgPC9saT4KICAgIDwvdWw+CjwvZGl2PgoKPGRpdiBjbGFzcz0ib2ZmZXJfX290aGVyIj4KICAgIDxkaXYgY2xhc3M9ImxlZnQiPgogICAgICAgICAgICAgPGEgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/Z3BfaWQ9MjA0MzMyNDI2NCZhbXA7dGFnc19saXN0PSU1QiU1RCI+CgogICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy0xIj48L2k+IFJldG91ciDDoCBsYSBwYWdlIGRlIHJlY2hlcmNoZSA8L2E+CjwvZGl2Pgo8L2Rpdj4KCiAgICAJPGRpdiBpZD0iZmljaGUtYmllbiI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fbmV3Ij5Ob3V2ZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX3ByaWNlIj5CYWlzc2UgZGUgcHJpeDwvc3Bhbj4KICAgIDwvZGl2PgogICAgPHNwYW4gY2xhc3M9ImMtb2ZmZXJfX2ZhdiI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICA8L3NwYW4+CiAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlciI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL21lZGlhL2NhY2hlL3Jlc29sdmUvYWRfcGhvdG9fdGh1bWIvcGhvdG8vNzQ3NTYwMzIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSA1NCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMiIGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZ3JhbmRpciIgaHJlZj0iI2xpZ2h0Ym94LWltYWdlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmVzaXplLWZ1bGwiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19zbGlkZXItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9tZWRpYS9jYWNoZS9yZXNvbHZlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzc0NzU2MDM0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgNTQgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTIiBjbGFzcz0iaW1nIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWdyYW5kaXIiIGhyZWY9IiNsaWdodGJveC1pbWFnZSIgZGF0YS10b2dnbGU9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXJlc2l6ZS1mdWxsIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fc2xpZGVyLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvbWVkaWEvY2FjaGUvcmVzb2x2ZS9hZF9waG90b190aHVtYi9waG90by83NDc1NjAzNi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDU0IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL21lZGlhL2NhY2hlL3Jlc29sdmUvYWRfcGhvdG9fdGh1bWIvcGhvdG8vNzQ3NTYwMzguanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSA1NCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMiIGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZ3JhbmRpciIgaHJlZj0iI2xpZ2h0Ym94LWltYWdlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmVzaXplLWZ1bGwiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19zbGlkZXItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9tZWRpYS9jYWNoZS9yZXNvbHZlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzc0NzU2MDQwLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgNTQgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTIiBjbGFzcz0iaW1nIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWdyYW5kaXIiIGhyZWY9IiNsaWdodGJveC1pbWFnZSIgZGF0YS10b2dnbGU9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXJlc2l6ZS1mdWxsIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fc2xpZGVyLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvbWVkaWEvY2FjaGUvcmVzb2x2ZS9hZF9waG90b190aHVtYi9waG90by83NDc1NjA0Mi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDU0IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgICAgIDxkaXYgaWQ9ImxpZ2h0Ym94LWltYWdlIiBjbGFzcz0ibW9kYWxEaWFsb2ciIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIj4KICAgICAgICAgICAgPGRpdiBpZD0iY2xvc2UtYnRuIiBjbGFzcz0iY2xvc2UtYnRuIj5YPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGVyX19saWdodGJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvbWVkaWEvY2FjaGUvcmVzb2x2ZS9hZF9waG90by9waG90by83NDc1NjAzMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgNTQgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nIGNlbnRlci1zbGlkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9tZWRpYS9jYWNoZS9yZXNvbHZlL2FkX3Bob3RvL3Bob3RvLzc0NzU2MDM0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSA1NCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWcgY2VudGVyLXNsaWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL21lZGlhL2NhY2hlL3Jlc29sdmUvYWRfcGhvdG8vcGhvdG8vNzQ3NTYwMzYuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDU0IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyBjZW50ZXItc2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvbWVkaWEvY2FjaGUvcmVzb2x2ZS9hZF9waG90by9waG90by83NDc1NjAzOC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgNTQgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nIGNlbnRlci1zbGlkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9tZWRpYS9jYWNoZS9yZXNvbHZlL2FkX3Bob3RvL3Bob3RvLzc0NzU2MDQwLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSA1NCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWcgY2VudGVyLXNsaWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL21lZGlhL2NhY2hlL3Jlc29sdmUvYWRfcGhvdG8vcGhvdG8vNzQ3NTYwNDIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDU0IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyBjZW50ZXItc2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19pbmZvcm1hdGlvbi0xIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSBkZSBsJ2Fubm9uY2UgOiAgICAgICAgICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3ODE1ODUKICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0Ij4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zZW5kLXRvLWZyaWVuZC8xODkxMjAyIgogICAgICAgICAgICAgICAgICAgdGl0bGU9IkVudm95ZXIgY2UgYmllbiDDoCB1biBhbWkiCiAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3NlbmRUb0ZyaWVuZE1vZGFsIiAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgRW52b2kgcGFyIGVtYWlsICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZW52ZWxvcGUiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FkLzE4OTEyMDIvcHJpbnQiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkltcHJpbWVyIGxhIGZpY2hlIGRlIGNlIGJpZW4iIHRhcmdldD0iX2JsYW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgSW1wcmltZXIgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcHJpbnRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsLXNoYXJlIj4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5QYXJ0YWdlciA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJmYi14ZmJtbC1wYXJzZS1pZ25vcmUgY2lyY2xlLWZhY2Vib29rIiBkYXRhLXNoYXJlLXRpdGxlPSJQYXJ0YWdlIEZhY2Vib29rIgogICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PWh0dHBzJTNBJTJGJTJGd3d3LmlhZGZyYW5jZS5mciUyRmFubm9uY2UlMkZhcHBhcnRlbWVudC12ZW50ZS0zLXBpZWNlcy1wYXJpcy01NG0yJTJGcjc4MTU4NSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gZmIgaWNvbi1mYi1yb25kIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjaXJjbGUtdHdpdHRlciIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL3NoYXJlP3VybD1odHRwcyUzQSUyRiUyRnd3dy5pYWRmcmFuY2UuZnIlMkZhbm5vbmNlJTJGYXBwYXJ0ZW1lbnQtdmVudGUtMy1waWVjZXMtcGFyaXMtNTRtMiUyRnI3ODE1ODUiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlBhcnRhZ2UgVHdpdHRlciIgZGF0YS10eXBlPSJzaGFyZS1saW5rIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2hhcmUtdGl0bGU9IlBhcnRhZ2UgVHdpdHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gdHcgaWNvbi10d2l0dGVyLXJvbmQiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNpcmNsZS13aGF0c2FwcCB3aGF0c2FwcF9saW5rIgogICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93YS5tZT90ZXh0PWh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTU0bTIvcjc4MTU4NSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hY3Rpb249InNoYXJlL3doYXRzYXBwL3NoYXJlIgogICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iV2hhdHNhcHAgc2hhcmUiIGRhdGEtdHlwZT0ic2hhcmUtbGluayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zaGFyZS10aXRsZT0iV2hhdHNhcHAgc2hhcmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvc29jaWFsL3doYXRzYXBwX2dyZWVuLnBuZz92MS4yMC4xIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2hlYWRlciI+CiAgICAgICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtOCI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlX19tYWluIj4KICAgICAgICAgICAgICAgICAgICAgICAgVmVudGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKAoiBQQVJJUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoNzUwMTEpICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0iaDEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgNTQgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvaDE+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3ByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCBncmFwaCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGVzYyI+QXUgcHJpeCBkZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNjIwIDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMSA0ODEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZldXJvOy9twrIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9Imxpbmstc2VsZWN0aW9uIGJ1dHRvbiBidXR0b25fX21haW4gYnV0dG9uX19tZWRpdW0gYnV0dG9uX19yb3VuZGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWl2cmUgY2UgYmllbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTgiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9faW5mb3JtYXRpb24tMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlIj5TdXJmYWNlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZWxlbWVudC1pY29uZSI+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTQgbcKyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSI+TmIgZGUgcGnDqGNlczwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGllY2UtMyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGl0bGUiPk5iIGRlIGNoYW1icmVzPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4gMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fY29udGVudCBvZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoMiI+RGVzY3JpcHRpZjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPmlhZCBGcmFuY2UgLSBDYW1pbGxlIERPTEZVUyAgdm91cyBwcm9wb3NlIDogQklFTiBDT1VQIERFIENPRVVSIC8gQVRZUElRVUUgLSBCZWwgYXBwYXJ0ZW1lbnQgMi8zIHBpw6hjZXMgZGUgY2FyYWN0w6hyZSwgc2l0dcOpIGF1IGNvZXVyIGR1IHF1YXJ0aWVyIHByaXPDqSBMZWRydSBSb2xsaW4gLSBSdWUgZHUgRmF1Ym91cmcgU2FpbnQgQW50b2luZSwgw6AgcXVlbHF1ZXMgbWludXRlcyDDoCBwaWVkcyBkZSBsYSBQbGFjZSBkZSBsYSBCYXN0aWxsZS4gPGJyPkEgcHJveGltaXTDqSBpbW3DqWRpYXRlIGRlIHRvdXRlcyBjb21tb2RpdMOpcyBldCB0cmFuc3BvcnRzIGVuIGNvbW11biwgZMOpY291dnJleiBjZSBjb2NvbiBkZSA1NG0yIGVudmlyb24gbmljaMOpIGF1IDXDqG1lIMOpdGFnZSBkJ3VuIGltbWV1YmxlIGRlIHR5cGUgZmF1Ym91cmcsIGNvbXBvc8OpIGNvbW1lIHN1aXQgOiBsJ2VudHLDqWUgZGVzc2VydCBkJ3VuZSBwYXJ0LCB1bmUgc2FsbGUgZCdlYXUgYXZlYyBjYWJpbmUgZGUgZG91Y2hlLCBsYXZhYm8gZXQgV0MsIHVuZSBwcmVtacOocmUgY2hhbWJyZSBldCBkJ2F1dHJlIHBhcnQsIHVuZSBjdWlzaW5lIGRpbmF0b2lyZSBzZW1pLW91dmVydGUgYW3DqW5hZ8OpZSBldCDDqXF1aXDDqWUgKG9yaWVudGF0aW9uIG5vcmQgZXQgc2FucyB2aXMtw6AtdmlzKSwgdW5lIHNlY29uZGUgY2hhbWJyZSBldCB1bmUgYmVsbGUgcGnDqGNlIGRlIHZpZSAob3JpZW50w6llIHN1ZCBldCB2dWUgZMOpZ2Fnw6llKS4gPGJyPkwnYXBwYXJ0ZW1lbnQgZXN0IHRyYXZlcnNhbnQgbm9yZC1zdWQgZXQgYsOpbsOpZmljaWUgZG9uYyBkJ3VuZSB0csOocyBiZWxsZSBsdW1pbm9zaXTDqS4gVm91cyBzZXJleiBzw6lkdWl0cyBwYXIgc29uIGNoYXJtZSBldCBzb24gY2FyYWN0w6hyZSwgc2VzIHBvdXRyZXMgYXBwYXJlbnRlcywgc29uIHBhcnF1ZXQgZXQgc2VzIHRvbWV0dGVzIGQnb3JpZ2luZS4gVW5lIGNhdmUgY29tcGzDqHRlIGNlIGJpZW4uIDxicj5Qb3NzaWJpbGl0w6kgZ3JhbmQgMiBwacOoY2VzLjxicj5MRVMgKyA6IHNhIGxvY2FsaXNhdGlvbiB0csOocyByZWNoZXJjaMOpZSwgc2EgZG91YmxlIG9yaWVudGF0aW9uLCBzYSBsdW1pbm9zaXTDqSwgc29uIGNoYXJtZSBldCBzZXMgcHJlc3RhdGlvbnMuIMOAIHZpc2l0ZXIgc2FucyB0YXJkZXIgISA8YnI+SmUgc3VpcyBkaXNwb25pYmxlIDdKLzcgcG91ciByw6lwb25kcmUgw6Agdm9zIHF1ZXN0aW9ucy48YnI+PGJyPkxhIHByw6lzZW50ZSBhbm5vbmNlIGltbW9iaWxpw6hyZSB2aXNlIDEgbG90IHByaW5jaXBhbCBzaXR1w6kgZGFucyB1bmUgY29wcm9wcmnDqXTDqSBmb3JtYW50IDMwIGxvdHMgYXUgdG90YWwgbmUgZmFpc2FudCBsJ29iamV0IGQnYXVjdW5lIHByb2PDqWR1cmUgZW4gY291cnMgZXQgZCd1biBtb250YW50IGRlIGNoYXJnZXMgZOKAmWVudmlyb24gMTYzLjMzIOKCrCBwYXIgbW9pcyAoc29pdCAxOTYwIOKCrCBhbm51ZWwpIGTDqWNsYXLDqSBwYXIgbGUgdmVuZGV1ci5Ib25vcmFpcmVzIGTigJlhZ2VuY2Ugw6AgbGEgY2hhcmdlIGR1IHZlbmRldXIuSW5mb3JtYXRpb24gZCdhZmZpY2hhZ2Ugw6luZXJnw6l0aXF1ZSBzdXIgY2UgYmllbiA6IERQRSBDIGluZGljZSAxMzIgZXQgR0VTIEEgaW5kaWNlIDQuIExhIHByw6lzZW50ZSBhbm5vbmNlIGltbW9iaWxpw6hyZSBhIMOpdMOpIHLDqWRpZ8OpZSBzb3VzIGxhIHJlc3BvbnNhYmlsaXTDqSDDqWRpdG9yaWFsZSBkZSBNbGxlIENhbWlsbGUgRE9MRlVTIChJRCAzNjU2NCksIEFnZW50IENvbW1lcmNpYWwgbWFuZGF0YWlyZSBlbiBpbW1vYmlsaWVyIGltbWF0cmljdWzDqSBhdSBSZWdpc3RyZSBTcMOpY2lhbCBkZXMgQWdlbnRzIENvbW1lcmNpYXV4IChSU0FDKSBkdSBUcmlidW5hbCBkZSBDb21tZXJjZSBkZSBQQVJJUyBzb3VzIGxlIG51bcOpcm8gODQ4ODA1NjkzLiA8YnI+UmV0cm91dmV6IHRvdXMgbm9zIGJpZW5zIHN1ciBub3RyZSBzaXRlIGludGVybmV0LiB3d3cuaWFkZnJhbmNlLmNvbTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2NvbnRlbnQgb2ZmZXJfX2luZm9ybWF0aW9uLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19lcXVpcGVtZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaDIiPkVxdWlwZW1lbnQ8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXRhZ2U8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2F2ZTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaWdpY29kZTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JbnRlcnBob25lPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19lbmVyZ3kiPgogICAgPGgyIGNsYXNzPSJoMiI+QmlsYW4gw6luZXJnZXRpcXVlPC9oMj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlIj5Db25zb21tYXRpb24gZCfDqW5lcmdpZTwvcD4KICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlX19zZWNvbmQiPkxvZ2VtZW50IMOpY29ub21lPC9wPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fZ3JhcGgiPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+Jmx0OyA1MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+QTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxzcGFuPjUxIMOgIDkwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5CPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3VycmVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxzcGFuPjkxIMOgIDE1MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+Qzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY3VycmVudF9fYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMzIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+MTUxIMOgIDIzMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+RDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxzcGFuPjIzMSDDoCAzMzA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48c3Bhbj4zMzEgw6AgNDUwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5GPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+Jmd0OyA0NTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8cCBjbGFzcz0idGl0bGVfX3NlY29uZCI+TG9nZW1lbnQgZW5lcmdpdm9yZTwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlIj5FbWlzc2lvbiBkZSBnYXogw6AgZWZmZXQgZGUgc2VycmU8L3A+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZV9fc2Vjb25kIj5GYWlibGUgw6ltaXNzaW9uIGRlIEdFUzwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2dyYXBoIG9mZmVyX19ncmFwaC0yIj4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjdXJyZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiZsdDsgNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5BPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0iY3VycmVudF9fYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj42IMOgIDEwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4xMSDDoCAyMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5DPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+MjEgw6AgMzU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+RDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjM2IMOgIDU1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj41NiDDoCA4MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5GPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Jmd0OyA4MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5HPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8cCBjbGFzcz0idGl0bGVfX3NlY29uZCI+Rm9ydGUgw6ltaXNzaW9uIGRlIEdFUzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2NvbnRlbnQgb2ZmZXJfX3BlcnNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iaDMiPkplIHN1aXMgaW50w6lyZXNzw6koZSkgcGFyIGNlIGJpZW48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCjxmb3JtIG5hbWU9ImNvbnRhY3QiIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0zLXBpZWNlcy1wYXJpcy01NG0yL3I3ODE1ODU/X2xvY2FsZT1mciIgY2xhc3M9ImZvcm1fX29mZmVyIiBkYXRhLXBhcnNsZXktdmFsaWRhdGU9InRydWUiPgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLXRpdGxlPSJOwrA3ODE1ODUiPgogICAgICAgICAgICA8YSBocmVmPSIjIj5Nb3RpZjwvYT4KICAgICAgICAgICAgPHVsIGlkPSJtb3RpZl9hZ2VudCIgZGF0YS10eXBlPSJjb250YWN0W21vdGlmcHRdIiBkYXRhLW5hbWU9Im1vdGlmIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxIiBjbGFzcz0ic2VsZWN0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICBKZSBzdWlzIGludMOpcsOpc3PDqShlKSBwYXIgdW4gYmllbgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlcmFpcyBhdm9pciBwbHVzIGQmIzAzOTtpbmZvcm1hdGlvbnMKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMyIgPgogICAgICAgICAgICAgICAgICAgICAgICBKZSBzb3VoYWl0ZXJhaXMgdmlzaXRlciBjZSBiaWVuCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjQiID4KICAgICAgICAgICAgICAgICAgICAgICAgSmUgc291aGFpdGVyYWlzIG1lIHJlbnNlaWduZXIgc3VyIGxlcyBiaWVucyBhdXggYWxlbnRvdXJzCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RbbW90aWZwdF0iLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJjb250YWN0X2xhc3RfbmFtZSIgbmFtZT0iY29udGFjdFtsYXN0X25hbWVdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJOb20gKiIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9maXJzdF9uYW1lIiBuYW1lPSJjb250YWN0W2ZpcnN0X25hbWVdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJQcsOpbm9tICoiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgaWQ9ImNvbnRhY3RfZW1haWwiIG5hbWU9ImNvbnRhY3RbZW1haWxdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJFbWFpbCAqIiBwYXR0ZXJuPSIuKkAuKihcLlthLXpBLVowLTkuLV0rKSskIiBkYXRhLXBhcnNsZXktdHlwZT0iZW1haWwiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCTxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9waG9uZSIgbmFtZT0iY29udGFjdFtwaG9uZV0iIHBsYWNlaG9sZGVyPSJUw6lsw6lwaG9uZSIgbWluTGVuZ3RoPSI2IiBwYXR0ZXJuPSJcZCoiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgIDx0ZXh0YXJlYSBpZD0iY29udGFjdF9tZXNzYWdlIiBuYW1lPSJjb250YWN0W21lc3NhZ2VdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJNZXNzYWdlIj48L3RleHRhcmVhPgogICAgPC9kaXY+CgkKPC9kaXY+CjxkaXYgaWQ9ImNhcHRjaGEiIGNsYXNzPSJnLXJlY2FwdGNoYSIgZGF0YS1zaXRla2V5PSI2TGNIVURNVUFBQUFBRkJYeDk1LVFEWWszNXhmc3hXMmpYLXZ4Y1N4Ij48L2Rpdj4KPGRpdiBjbGFzcz0iZm9ybV9fZm9vdGVyIj4KICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX193aGl0ZSBidXR0b25fX21lZGl1bSI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgIDxzcGFuPkNvbnRhY3RlciB2b3RyZSBjb25zZWlsbGVyPC9zcGFuPgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPgogICAgPC9idXR0b24+CjwvZGl2Pgo8L2Zvcm0+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8YXNpZGUgY2xhc3M9InNpZGViYXIgY29sLTQiIGlkPSJzaWRlYmFyIiByb2xlPSJjb21wbGVtZW50YXJ5IiBpdGVtc2NvcGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1dQU2lkZUJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImwtZm9ybV9fcGVyc29uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBlcnNvbl9faW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9DQU1JTExFLkRPTEZVUyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImFkQWdlbnRDb250YWN0Rm9ybSIgY2xhc3M9InBlcnNvbl9faGVhZGVyIGMtb2ZmZXJfX3Byb2ZpbF9pbWdfYWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzI4Mzg2MjQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkNhbWlsbGUgRE9MRlVTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwZXJzb25fX2JvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FtaWxsZSBET0xGVVMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9iYXJlbWUuaWFkZnJhbmNlLmZyL2RldGFpbC8zNjU2NCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4tYmFyZW1lLWRlc2t0b3AgYnRuLWJhcmVtZS1hZCIgc3R5bGU9ImNvbG9yOiAjZmZmIiB0YXJnZXQ9Il9ibGFuayI+QmFyw6htZSBkJ2hvbm9yYWlyZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHNyYz0iLy93aWRnZXQuaW1tb2R2aXNvci5jb20vanMvd2lkZ2V0LmpzIj48L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vd2lkZ2V0LmltbW9kdmlzb3IuY29tIiBpZD0iaW1tb2R2aXNvci13aWRnZXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWltLWFwaWtleT0iRkpMRDQtVjBYOFYxLUdEMDVKLUJUQ1MtNEg2NCIgZGF0YS1pbS10aGVtZT0iYmx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaW0tcmV2aWV3cz0iZmFsc2UiIGRhdGEtaW0td2lkdGg9IjEyNSIgZGF0YS1pbS1oZWlnaHQ9IjI0NSI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNhbGxfdHJhY2tpbmcgYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnRhY3QgYnV0dG9uX19zZWNvbmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL2FnZW50Q2FsbEV2ZW50LzQ2MTYxLzc4MTU4NT9wYWdlPWFubm9uY2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbW9kYWwtc2hvdy1udW1iZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1tb2JpbGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iY2FsbF90cmFja2luZ190ZXh0Ij5BZmZpY2hlciBsZSBudW3DqXJvPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKPGZvcm0gbmFtZT0iY29udGFjdF9hZ2VudCIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTU0bTIvcjc4MTU4NT9fbG9jYWxlPWZyIiBjbGFzcz0iZm9ybV9fcGVyc29uIiBkYXRhLXBhcnNsZXktdmFsaWRhdGU9InRydWUiPgo8ZGl2IGNsYXNzPSJjLXNlbGVjdCIgZGF0YS1uYW1lPSJNb3RpZiIgZGF0YS10aXRsZT0iTsKwNzgxNTg1Ij4KICAgIDxhIGhyZWY9IiMiPk1vdGlmPC9hPgogICAgPHVsIGRhdGEtdHlwZT0iY29udGFjdF9hZ2VudFttb3RpZnB0XSIgZGF0YS1uYW1lPSJtb3RpZiIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxIj4KICAgICAgICAgICAgICAgIEplIHN1aXMgaW50w6lyw6lzc8OpKGUpIHBhciB1biBiaWVuCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjIiPgogICAgICAgICAgICAgICAgSmUgc291aGFpdGVyYWlzIGF2b2lyIHBsdXMgZCYjMDM5O2luZm9ybWF0aW9ucwogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIzIj4KICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlcmFpcyB2aXNpdGVyIGNlIGJpZW4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNCI+CiAgICAgICAgICAgICAgICBKZSBzb3VoYWl0ZXJhaXMgbWUgcmVuc2VpZ25lciBzdXIgbGVzIGJpZW5zIGF1eCBhbGVudG91cnMKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RfYWdlbnRbbW90aWZwdF0iLz4KPC9kaXY+CjxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbnRhY3RfYWdlbnRfZmlyc3RfbmFtZSIgbmFtZT0iY29udGFjdF9hZ2VudFtmaXJzdF9uYW1lXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iUHLDqW5vbSAqIiAvPgogICAgPC9kaXY+CjxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbnRhY3RfYWdlbnRfbGFzdF9uYW1lIiBuYW1lPSJjb250YWN0X2FnZW50W2xhc3RfbmFtZV0iIHJlcXVpcmVkPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9Ik5vbSAqIiAvPgogICAgPC9kaXY+CjxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgaWQ9ImNvbnRhY3RfYWdlbnRfZW1haWwiIG5hbWU9ImNvbnRhY3RfYWdlbnRbZW1haWxdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJFbWFpbCAqIiBwYXR0ZXJuPSIuKkAuKihcLlthLXpBLVowLTkuLV0rKSskIiBkYXRhLXBhcnNsZXktdHlwZT0iZW1haWwiIC8+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbnRhY3RfYWdlbnRfcGhvbmUiIG5hbWU9ImNvbnRhY3RfYWdlbnRbcGhvbmVdIiBwbGFjZWhvbGRlcj0iVMOpbMOpcGhvbmUiIG1pbkxlbmd0aD0iNiIgcGF0dGVybj0iXGQqIiAvPgo8L2Rpdj4KCjx0ZXh0YXJlYSBpZD0iY29udGFjdF9hZ2VudF9tZXNzYWdlIiBuYW1lPSJjb250YWN0X2FnZW50W21lc3NhZ2VdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJNZXNzYWdlIj48L3RleHRhcmVhPgo8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCByb3cgIj4KPGlucHV0IGNsYXNzPSJjb2wtMSIgdHlwZT0iY2hlY2tib3giIHN0eWxlPSJ0b3A6MnB4O2xlZnQ6OHB4IiBuYW1lPSJyZWdpc3Rlcl9uZXdzbGV0dGVyIiBpZD0icmVnaXN0ZXJfbmV3c2xldHRlciIvPgo8bGFiZWwgY2xhc3M9ImNvbC0xMCBhY2NlcHRfbmV3c2xldHRlciIgc3R5bGU9ImNvbG9yOndoaXRlO2ZvbnQtc2l6ZToxMnB4IiBmb3I9InJlZ2lzdGVyX25ld3NsZXR0ZXIiPgogICAgSmUgc291aGFpdGUgcmVjZXZvaXIgcGFyIG5ld3NsZXR0ZXIgZGVzIGFubm9uY2VzIHN1c2NlcHRpYmxlcyBkZSBt4oCZaW50w6lyZXNzZXIgZXQgZGVzIGNvbnNlaWxzIMOgIGzigJlhY2hhdCBkZSBsYSBwYXJ0IGTigJlpYWQuCjwvbGFiZWw+CjwvZGl2Pgo8ZGl2IGlkPSJhc2lkZS1jYXB0Y2hhIiBjbGFzcz0iZy1yZWNhcHRjaGEiIGRhdGEtc2l0ZWtleT0iNkxjSFVETVVBQUFBQUZCWHg5NS1RRFlrMzV4ZnN4VzJqWC12eGNTeCI+PC9kaXY+Cgo8ZGl2IGNsYXNzPSJmb3JtX19mb290ZXIiPgogICAgPGJ1dHRvbiBpZD0iYnRuLWFjaGF0IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX3doaXRlIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgPHNwYW4+TWUgY29udGFjdGVyPC9zcGFuPgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPgogICAgPC9idXR0b24+CjwvZGl2Pgo8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvQ0FNSUxMRS5ET0xGVVMiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLTIiPjwvaT4gTWVzIGFubm9uY2VzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJibHVlLWdyYWRpZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1jYWxjdWxhdG9yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FsY3VsYXRldXIgZGUgbWVuc3VhbGl0w6kgZGUgYmllbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWZyYW1lIGlkPSJjYWxjdWxhdG9yLWlmcmFtZSIgc3JjPSJodHRwczovL3d3dy5ldXJvcGVhbi1zb2Z0LmNvbS9zZXJ2aWNlcy13ZWIvY2FwYWNpdGUtYWNoYXQucGhwP2lkX3NpdGU9NTAmdGV4dGU9b3VpJmltcHJpbWVyPW91aSZjc3M9aHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2Nzcy9jYWxjdWxhdG9yLWQ1ZjIwMTY3YzUubWluLmNzcz92MS4yMC4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZWJvcmRlcj0iMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2lmcmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FzaWRlPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIDwvZGl2PgoKCiAgICAgICAgICAgIDxkaXYgaWQ9InNpbWlsYXJBZHMiIGNsYXNzPSJ3cmFwcGVyIG9mZmVyX19zbGlkZXItMiIgc3R5bGU9InBhZGRpbmctdG9wOiA1MHB4Ij4KICAgICAgICAgICAgPGgzIGNsYXNzPSJoMyB0aXRsZV9fbWFpbiI+PGI+QW5ub25jZXMgc2ltaWxhaXJlczwvYj4gw6AgICAgICAgICAgICAgICAgUEFSSVMKICAgICAgICAgICAgICAgIDxwPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX19hbGVydCBidXR0b25fX21lZGl1bSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYj0ibG9naW4tdGFiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAuOTM3NXJlbTsgcG9zaXRpb246IHJlbGF0aXZlOyBmb250LXdlaWdodDo2MDAgO3BhZGRpbmc6IDEwcHggMTVweDtkaXNwbGF5OiBpbmxpbmUtYmxvY2s7YmFja2dyb3VuZDogIzAwNDk3NjsgYm9yZGVyOiAwOyBjb2xvcjogI2ZmZjsgZm9udC1zaXplOiAxNXB4OzsgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWYsJ1NvdXJjZSBDb2RlIFBybyciPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DcsOpZXIgdW5lIGFsZXJ0ZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgIDwvaDM+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgc2xpZGVyX19hbm5vbmNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXN0YXRlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ltZyBjLW9mZmVyX19pbWdfZnIiICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTQ4bTIvcjc3MjQ3OD9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctaG9sZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzQ3MTg0MDguanBnIgogICAgICAgICAgICAgICAgICAgICBhbHQ9IlBBUklTIgogICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzQ3MTg0MDguanBnIiBjbGFzcz0ibGF6eSIvPgoJCQkJCTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2NvbXByb21pcyI+U291cyBjb21wcm9taXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2V4Y2x1c2l2aXRlIj5FeGNsdXNpdml0w6k8L3NwYW4+CiAgICAKICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX3Byb2ZpbCBjLW9mZmVyX19wcm9maWxfaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL01BUklPTi5DQVJHTkVMTE8iCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9Ik1hcmlvbiBDQVJHTkVMTE8iIGl0ZW1wcm9wPSJzYW1lQXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FnZW50X3Bob3RvX3RodW1iL2F2YXRhci8yODM2Mzg2LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9Ik1hcmlvbiBDQVJHTkVMTE8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkgaW1nIiBpdGVtcHJvcD0iaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19uYW1lIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImMtb2ZmZXJfX3RpdGxlIiBocmVmPSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTQ4bTIvcjc3MjQ3OD9fbG9jYWxlPWZyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSA0OCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fZmF2b3JpdGVzIGhpZGVmYXZvcmkiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjQyNjQlMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMSUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjQyNjQiPlBBUklTICg3NTAxMSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc3MjQ3OAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTEwIDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBNYXJpb24gQ0FSR05FTExPICgwNiAyNSA3NiAzNSA5Nikgdm91cyBwcm9wb3NlIDogUGxhY2UgZGUgbGEgTmF0aW9uLCBBVSBDQUxNRSBTVVIgQ09VUiwgQmVhdSAzIHBpw6hjZXMgZW4gw6l0YWdlIGNvbXBvc8OpIGQmIzAzOTt1biBzcGFjaWV1eCBzw6lqb3VyIGF2ZWMgY3Vpc2luZSDDqXF1aXDDqWUgb3V2ZXJ0ZSBkZSAyMm0yIGVudmlyb24sIGRldXggY2hhbWJyZXMsIHVuZSBzYWxsZSBkJiMwMzk7ZWF1IGF2ZWMgZG91Y2hlIHR5cGUgaXRhLi4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiA0OCBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0zIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPiA8c3Bhbj4yPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL01BUklPTi5DQVJHTkVMTE8iIGNsYXNzPSJidXR0b24gYnV0dG9uX19tZWRpdW0gYnV0dG9uX19jb25zZWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0ZXogdm90cmUgY29uc2VpbGxlcjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlc3RhdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW1nIGMtb2ZmZXJfX2ltZ19mciIgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMi1waWVjZXMtcGFyaXMtNTBtMi9yNjk5NTQ2P19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1ob2xkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9tZWRpYS9jYWNoZS9yZXNvbHZlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcxNzI5Mjg3LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL21lZGlhL2NhY2hlL3Jlc29sdmUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzE3MjkyODcuanBnIiBjbGFzcz0ibGF6eSIvPgoJCQkJCTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2NvbXByb21pcyI+U291cyBjb21wcm9taXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2V4Y2x1c2l2aXRlIj5FeGNsdXNpdml0w6k8L3NwYW4+CiAgICAKICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX3Byb2ZpbCBjLW9mZmVyX19wcm9maWxfaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL0pPSE4tRVJXQU5OLkRVVEhFSUwiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkpvaG4tRXJ3YW5uIERVVEhFSUwiIGl0ZW1wcm9wPSJzYW1lQXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FnZW50X3Bob3RvX3RodW1iL2F2YXRhci8yODIzNzU1LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkpvaG4tRXJ3YW5uIERVVEhFSUwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkgaW1nIiBpdGVtcHJvcD0iaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19uYW1lIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImMtb2ZmZXJfX3RpdGxlIiBocmVmPSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTItcGllY2VzLXBhcmlzLTUwbTIvcjY5OTU0Nj9fbG9jYWxlPWZyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSA1MCBtwrIgLSAxIGNoYW1icmUgLSBQQVJJUwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uX19mYXZvcml0ZXMgaGlkZWZhdm9yaSIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4tMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGlzdHJpY3Q/dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJncF9pZCUyMiUyQyUyMnZhbHVlJTIyJTNBMjA0MzMyNDI2NCUyQyUyMm5hbWUlMjIlM0ElMjJQQVJJUyUyQiUyODc1MDExJTI5JTJCUGFyaXMlMkIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCZhbXA7Z3BfaWQ9MjA0MzMyNDI2NCI+UEFSSVMgKDc1MDExKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Sw6lmw6lyZW5jZSA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNjk5NTQ2CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1MTggMDAwIDxzcGFuPiZldXJvOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCBjLW9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWFkIEZyYW5jZSAtIEpvaG4tRXJ3YW5uIERVVEhFSUwgKDA2IDc1IDg2IDM1IDUzKSB2b3VzIHByb3Bvc2UgOiBFWENMVVNJVklUw4kgLSBSVUUgREUgQ0hBUk9OTkUgLSBUMi8zIGRlIDUwIG3CsiBlbnZpcm9uIEFVIENBTE1FLCBTQU5TIFZJUy3DgC1WSVMsIEVOIMOJVEFHRSBTVVIgSkFSRElOIGF2ZWMgQkFMQ09OTkVULCBQUk9DSEUgVE9VVEVTIENPTU1PRElUw4lTIChNw6l0cm8gMSwgMiwgNiBldCA5ICkuIMOAIDEwIG1pbnV0ZXMgZGUgUGxhY2UuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDUwIG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+IDxzcGFuPjE8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvSk9ITi1FUldBTk4uRFVUSEVJTCIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnNlaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3RleiB2b3RyZSBjb25zZWlsbGVyPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy01Mm0yL3I3NTU2NDc/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL21lZGlhL2NhY2hlL3Jlc29sdmUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI1NjEyNTIuanBnIgogICAgICAgICAgICAgICAgICAgICBhbHQ9IlBBUklTIgogICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvbWVkaWEvY2FjaGUvcmVzb2x2ZS9hZF9waG90b19zbWFsbC9waG90by83MjU2MTI1Mi5qcGciIGNsYXNzPSJsYXp5Ii8+CgkJCQkJPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fZXhjbHVzaXZpdGUiPkV4Y2x1c2l2aXTDqTwvc3Bhbj4KICAgIAogICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fcHJvZmlsIGMtb2ZmZXJfX3Byb2ZpbF9pbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvVkFORVNTQS5MRVNBR0UtQk9VWkVSIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJWYW5lc3NhIExFU0FHRS1CT1VaRVIiIGl0ZW1wcm9wPSJzYW1lQXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FnZW50X3Bob3RvX3RodW1iL2F2YXRhci8yODQyOTI0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IlZhbmVzc2EgTEVTQUdFLUJPVVpFUiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMi1waWVjZXMtcGFyaXMtNTJtMi9yNzU1NjQ3P19sb2NhbGU9ZnIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IGRlIDUyIG3CsiAtIDEgY2hhbWJyZSAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjQyNjQlMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMSUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjQyNjQiPlBBUklTICg3NTAxMSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc1NTY0NwogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTkwIDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBWYW5lc3NhIExFU0FHRS1CT1VaRVIgKDA3IDg5IDUxIDMwIDA4KSB2b3VzIHByb3Bvc2UgOiBFbiBleGNsdXNpdml0w6kgZ3JhbmQgMiBwacOoY2VzIGlkw6lhbGVtZW50IHNpdHXDqSBldCBlbnRpw6hyZW1lbnQgcsOpbm92w6kgYXUgMWVyIMOpdGFnZSBkJiMwMzk7dW4gcGV0aXQgaW1tZXVibGUgZGFucyB1bmUgcnVlIGNhbG1lIMOgIDIgcGFzIGRlIGxhIHBsYWNlIGRlIGxhIFLDqXB1YmxpcXVlIGV0IGR1IE3DqXRybyBPYmVya2FtcGYgKGxpLi4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiA1MiBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPiA8c3Bhbj4xPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL1ZBTkVTU0EuTEVTQUdFLUJPVVpFUiIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnNlaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3RleiB2b3RyZSBjb25zZWlsbGVyPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy00OW0yL3I3OTcxNDM/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzc0NjcxMzc3LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzc0NjcxMzc3LmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19uZXciPk5vdXZlYXU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2V4Y2x1c2l2aXRlIj5FeGNsdXNpdml0w6k8L3NwYW4+CiAgICAKICAgIDwvZGl2PgogICAgPHNwYW4gY2xhc3M9ImMtb2ZmZXJfX2ZhdiI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fcHJvZmlsIGMtb2ZmZXJfX3Byb2ZpbF9pbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvQ0FNSUxMRS5ET0xGVVMiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkNhbWlsbGUgRE9MRlVTIiBpdGVtcHJvcD0ic2FtZUFzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZ2VudF9waG90b190aHVtYi9hdmF0YXIvMjgzODYyNC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJDYW1pbGxlIERPTEZVUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMi1waWVjZXMtcGFyaXMtNDltMi9yNzk3MTQzP19sb2NhbGU9ZnIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IGRlIDQ5IG3CsiAtIDEgY2hhbWJyZSAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjQyNjQlMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMSUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjQyNjQiPlBBUklTICg3NTAxMSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc5NzE0MwogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNjM1IDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBDYW1pbGxlIERPTEZVUyAoMDYgNjEgNjIgMDAgODYpIHZvdXMgcHJvcG9zZSA6IEFUWVBJUVVFIC8gREVSTklFUiDDiVRBR0UgLSBDaGFybWFudCBkdXBsZXggZGUgNDltMiBlbnZpcm9uIHNpdHXDqSBlbiBwbGVpbiBjb2V1ciBkdSAxMcOobWUgYXJyb25kaXNzZW1lbnQsIMOgIHF1ZWxxdWVzIHBhcyBkZSBsYSBNYWlyaWUgZXQgZGUgbGEgc3RhdGlvbiBkZSBtw6l0cm8gVm9sdGFpcmUuIEEgcHJveGltaXTDqSBpbW3DqWRpYXRlLi4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiA0OSBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPiA8c3Bhbj4xPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL0NBTUlMTEUuRE9MRlVTIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXN0YXRlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ltZyBjLW9mZmVyX19pbWdfZnIiICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTQ5bTIvcjcyMzI4Mz9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctaG9sZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzMzMjY1MjEuanBnIgogICAgICAgICAgICAgICAgICAgICBhbHQ9IlBBUklTIgogICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzMzMjY1MjEuanBnIiBjbGFzcz0ibGF6eSIvPgoJCQkJCTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2NvbXByb21pcyI+U291cyBjb21wcm9taXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2V4Y2x1c2l2aXRlIj5FeGNsdXNpdml0w6k8L3NwYW4+CiAgICAKICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX3Byb2ZpbCBjLW9mZmVyX19wcm9maWxfaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL0NBTUlMTEUuRE9MRlVTIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJDYW1pbGxlIERPTEZVUyIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzI4Mzg2MjQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQ2FtaWxsZSBET0xGVVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkgaW1nIiBpdGVtcHJvcD0iaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19uYW1lIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImMtb2ZmZXJfX3RpdGxlIiBocmVmPSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTQ5bTIvcjcyMzI4Mz9fbG9jYWxlPWZyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSA0OSBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fZmF2b3JpdGVzIGhpZGVmYXZvcmkiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjQyNjQlMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMSUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjQyNjQiPlBBUklTICg3NTAxMSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcyMzI4MwogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm91cyBjb25zdWx0ZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCBjLW9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWFkIEZyYW5jZSAtIENhbWlsbGUgRE9MRlVTICgwNiA2MSA2MiAwMCA4Nikgdm91cyBwcm9wb3NlIDogQVRZUElRVUUgZXQgUkFSRSAhIFN1cGVyYmUgZHVwbGV4ICgyLzMgY2hhbWJyZXMpIGVuIGV4Y2VsbGVudCDDqXRhdCwgZGFucyBsZSBxdWFydGllciBQYXJtZW50aWVyLkRhbnMgdW4gYmVsIGltbWV1YmxlIEhhdXNzbWFubmllbiwgbOKAmWFwcGFydGVtZW50IHNlIHNpdHVlIGF1IERFUk5JRVIgRVRBR0UgKDbDqG1lIGV0IDfDqG1lKSBhdmVjLi4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiA0OSBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0zIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPiA8c3Bhbj4yPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL0NBTUlMTEUuRE9MRlVTIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJtb2RhbC1zaG93LW51bWJlciIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxwPjA2NjE2MjAwODY8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiIHN0eWxlPSJiYWNrZ3JvdW5kOiBub25lO2NvbG9yOiBibGFjazsiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj5Bbm51bGVyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgb25jbGljaz0ibG9jYXRpb24uaHJlZj0ndGVsOjA2NjE2MjAwODYnOyIgdmFsdWU9IkFwcGVsZXIiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAKICAgICAgICA8L3NlY3Rpb24+CjwvbWFpbj4KCiAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIiIGlkPSJmb290ZXIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvV1BGb290ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBvdGhlcl9fbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpcnN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlL2Fubm9uY2VzL2V4Y2x1c2l2aXRlL2xpc3RlL2Fubm9uY2UtcmVzdWx0YXQ/ZXhjbHVzaXZlPTEiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgTGVzIGV4Y2x1c2l2aXTDqXMgaWFkCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lc3RpbWVyLXZvdHJlLWJpZW4iICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgRXN0aW1leiB2b3RyZSBiaWVuCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci90cm91dmVyLXVuLWNvbnNlaWxsZXIiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgVHJvdXZleiB1biBjb25zZWlsbGVyCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbWFjb25jaWVyZ2VyaWUtaWFkLmZyLyIgICAgIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iIj4KICAgICAgICAgICAgQ29uY2llcmdlcmllIGlhZAoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQvY291cC1kZS1jb2V1ci9saXN0ZS9hbm5vbmNlcyIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBOb3MgY291cHMgZGUgY29ldXIKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaXRlbS1oaWdobGlnaHRlZCBsYXN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlL2Fubm9uY2VzL2ltbW9iaWxpZXItcHJlc3RpZ2UvbGlzdGUtcmVzdWx0YXQ/cmFkaXVzPTIwJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDt0YWdzJTVCMCU1RD1wcmVzdGlnZSIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBBY2hhdCBkZSBwcmVzdGlnZQoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNvY2lhbCI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlX19sYXJnZS0xIj5TdWl2ZXogbm91cyA6PC9wPgogICAgICAgICAgICAgICAgICAgIDx1bCBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT3JnYW5pemF0aW9uIj4KCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0lBREZyYW5jZSIgaXRlbXByb3A9InNhbWVBcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmItcm9uZCI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9JQURGcmFuY2UiIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaW1tb2JpbGllci1kb21pY2lsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxpbmtlZGluLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvSUFERnJhbmNlIiBpdGVtcHJvcD0ic2FtZUFzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi15b3V0dWJlLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaWFkZnJhbmNlb2ZmaWNpZWwvIiBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkZW1vLWljb24gaWNvbi1pbnN0YWdyYW0tcm9uZCI+PC9pPjwvYT48L2xpPgoJCQkgICAgICAgIAkJCQkJCQkKICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCQkJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBwYXJ0bmVycyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPmlhZCBlc3QgbWVtYnJlIDogPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9VbmlzX0xvZ290eXBlX3NvbG9fQ291bGV1ci5wbmc/djEuMjAuMSIgd2lkdGg9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IiIgYWx0PSJVbmlzIj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51X190aGlyZCI+CiAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJmaXJzdCI+PGEgaHJlZj0iLyI+QWNjdWVpbDwvYT48L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pYWRpbnRlcm5hdGlvbmFsLmNvbS9mciIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJMZSBncm91cGUgaWFkIj4KICAgICAgICAgICAgICAgICAgIExlIGdyb3VwZSBpYWQgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvcXVpLXNvbW1lcy1ub3VzIj5RdWkgc29tbWVzLW5vdXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9lc3BhY2UtcHJlc3NlIj5Fc3BhY2UgUHJlc3NlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvbWVudGlvbnMtbGVnYWxlcyI+TWVudGlvbnMgbMOpZ2FsZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9Qb2xpdGlxdWUtZGUtY29uZmlkZW50aWFsaXRlIj5Qb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL21lZGlhdGlvbiI+TcOpZGlhdGlvbjwvYT48L2xpPgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY29udGFjdGV6LW5vdXMiPk5vdXMgY29udGFjdGVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly9iYXJlbWUuaWFkZnJhbmNlLmZyLyIgdGFyZ2V0PSJfYmxhbmsiPkJhcsOobWUgZCdob25vcmFpcmVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9pbWdzLzk5NjA3MTE0N2FjMWI4YjEzNWM2ODc1NGI3OWZkMTVkLnBkZj92MS4yMC4xIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmFyw6htZSBFJmFtcDtDCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZm9vdGVyPgoKICAgICAgICAgICAgPCEtLSBNb2RhbCAtLT4KICAgIDxkaXYgY2xhc3M9Im1vZGFsRGlhbG9nIG1vZGFsIGZhZGUiIGlkPSJtZXNzYWdlLW1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVzc2FnZSBtZXNzYWdlLWNvbnRlbnQiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJub19yZXN1bHQiIGNsYXNzPSJtb2RhbERpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIGZ1bGwtd2lkdGgiIGlkPSJhbGVydC1uby1yZXN1bHQtbW9kYWwiPgogICAgICAgIDxzcGFuIGNsYXNzPSJjbG9zZS1tb2RhbCB0ZXh0LXJpbmciIGlkPSJjbG9zZS1hbGVydC1uby1yZXN1bHQiPng8L3NwYW4+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0X3JpbmciPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yaW5nIj48L2k+IENyw6llciB1bmUgYWxlcnRlIHBvdXIgY2V0dGUgcmVjaGVyY2hlIDwvZGl2PgogICAgICAgICAgICA8cD48c3Ryb25nPkF1Y3VuZSBhbm5vbmNlIG5lIGNvcnJlc3BvbmQgw6Agdm90cmUgcmVjaGVyY2hlPzwvc3Ryb25nPjwvcD4KICAgICAgICAgICAgPHA+TW9kaWZpZXogdm9zIGNyaXTDqHJlcyBvdSBsYWlzc2V6IHZvdXMgZ3VpZGVyIHBhciBub3Mgc3VnZ2VzdGlvbnMuPC9wPgogICAgICAgICAgICA8cD48c3Ryb25nPlJhcHBlbCBkZSB2b3MgY3JpdMOocmVzIDo8L3N0cm9uZz48L3A+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNyaXRlcmlhcyI+CgkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgICAgICAgICAgPGZvcm0gaWQ9ImFsZXJ0Tm9SZXN1bHRGb3JtIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIHBsYWNlaG9sZGVyPSJFbWFpbCIgY2xhc3M9InRleHQtZGFuZ2VyIGZvcm0tY29udHJvbCBpbm5lci1idXR0b24iIGlkPSJhbGVydC1lbWFpbCI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJ0ZXh0LXJpbmcgbm8tYm9yZGVyIiBpZD0iYWxlcnQtZW1haWwtYnV0dG9uIiBocmVmPSIvcHJvZmlsZS9hbGVydC9hZGQiPk9LPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+ICAgIDxkaXYgaWQ9ImJ1c2luZXNzQ2FyZE1vZGFsIiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCBidXNpbmVzc0NhcmRDb250ZW50Ij48L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDxkaXYgaWQ9ImNvbnRhY3RBZ2VudE1vZGFsIiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+PC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8ZGl2IGlkPSJsb2dpbiIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9ImMtbW9kYWwgdGFiLWNvbm5lY3QiPgogICAgICAgIDx1bCBjbGFzcz0idGFicyI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0idGFiLWxpbmsgY3VycmVudCIgZGF0YS10YWI9ImxvZ2luLXRhYiI+U2UgY29ubmVjdGVyPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJ0YWItbGluayIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+Q3LDqWVyIHVuIGNvbXB0ZTwvbGk+CiAgICAgICAgPC91bD4KCiAgICAgICAgPGRpdiBpZD0ibG9naW4tdGFiIiBjbGFzcz0idGFiLWNvbnRlbnQgY3VycmVudCI+CiAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii9sb2dpbl9jaGVjayIKICAgICAgICAgIG5hbWU9ImNvbm5leGlvbiIgbWV0aG9kPSJwb3N0IiBjbGFzcz0iZm9ybV9fY29ubmV4aW9uIj4KICAgICAgICA8IS0tcCBjbGFzcz0idGl0bGUiPkNvbm5lY3Rlei12b3VzIGF2ZWMgbGVzIHLDqXNlYXV4IHNvY2lhdXg8L3A+CiAgICAgICAgPGRpdiBjbGFzcz0ibC1zb2NpYWwiPgogICAgICAgICAgICA8YSBocmVmPSIvY29ubmVjdC9mYWNlYm9vayIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJmYiI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmItcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L3R3aXR0ZXIiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0idHciPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L2dvb2dsZSIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ5dCI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZ29vZ2xlLXBsdXMtcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L2xpbmtlZGluIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImxrZCI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGlua2VkaW4tcm9uZCI+PC9pPgo8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIj4KICAgICAgICAgICAgPHA+T3U8L3A+CiAgICAgICAgPC9kaXYtLT4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfY3NyZl90b2tlbiIgdmFsdWU9IkQ5T1lrN09aaGFWY1JRQXV3X2NvM3dfS2NtVVBYUWg4czFDR2RTZ3o2NEkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IkVtYWlsIiBuYW1lPSJfdXNlcm5hbWUiPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgPGlucHV0IG5hbWU9Il9wYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiIHBsYWNlaG9sZGVyPSJNb3QgZGUgcGFzc2UiIGlkPSJwYXNzd29yZCI+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5mb3JtYXRpb25zIHJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InJlbWVtYmVyIiBuYW1lPSJfcmVtZW1iZXJfbWUiIHZhbHVlPSJvbiI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyZW1lbWJlciI+U2Ugc291dmVuaXIgZGUgbW9pPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNwYXNzX2ZvcmdldF9kaXYiIGNsYXNzPSJmb3JtX19mb3JnZXQiCiAgICAgICAgICAgICAgICAgICBpZD0iY29ubmVjdF9mb3JnZXRfcGFzc3dvcmQiPgogICAgICAgICAgICAgICAgICAgIE1vdCBkZSBwYXNzZSBwZXJkdSA/ICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fZm9vdGVyIj4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJzdWJtaXRfY29ubmVjdGlvbiIgbmFtZT0iX3N1Ym1pdCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICAgICAgICAgIENvbm5leGlvbiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgPC9mb3JtPgoKCiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgaWQ9InJlZ2lzdGVyLXRhYiIgY2xhc3M9InRhYi1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iL3JlZ2lzdGVyLyIKICAgICAgICAgIG5hbWU9InJlZ2lzdHJhdGlvbiIgbWV0aG9kPSJwb3N0IiBjbGFzcz0iZm9ybV9fcmVnaXN0ZXIiPgoJCSAgCiAgICAgICAgPHAgY2xhc3M9InRpdGxlX19tYWluIj4KCQkJCUNyw6lleiB2b3RyZSBjb21wdGUgcG91ciBiw6luw6lmaWNpZXIgZOKAmXVuIHN1aXZpIHBlcnNvbm5hbGlzw6kJCQkJPC9wPgogICAgICAgIDwhLS1wIGNsYXNzPSJ0aXRsZSI+Q29ubmVjdGV6LXZvdXMgYXZlYyBsZXMgcsOpc2VhdXggc29jaWF1eDwvcD4KICAgICAgICA8ZGl2IGNsYXNzPSJsLXNvY2lhbCI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25uZWN0L2ZhY2Vib29rIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImZiIj4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mYi1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvdHdpdHRlciIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ0dyI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdHdpdHRlci1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvZ29vZ2xlIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9Inl0Ij4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1nb29nbGUtcGx1cy1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvbGlua2VkaW4iIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0ibGtkIj4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1saW5rZWRpbi1yb25kIj48L2k+CjwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3IiPgogICAgICAgICAgICA8cD5PdTwvcD4KICAgICAgICA8L2Rpdi0tPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIGlkPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybV9lbWFpbCIgbmFtZT0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1bZW1haWxdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJTYWlzaXNzZXogdW5lIGFkcmVzc2UgZS1tYWlsIiBwYXR0ZXJuPSIuKkAuKihcLlthLXpBLVowLTkuLV0rKSskIiAvPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0IHJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX3BsYWluUGFzc3dvcmRfZmlyc3QiIG5hbWU9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtW3BsYWluUGFzc3dvcmRdW2ZpcnN0XSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iQ3LDqWV6IHVuIG1vdCBkZSBwYXNzZSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX3BsYWluUGFzc3dvcmRfc2Vjb25kIiBuYW1lPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybVtwbGFpblBhc3N3b3JkXVtzZWNvbmRdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJWYWxpZGV6IGxlIG1vdCBkZSBwYXNzZSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8ZGl2IGlkPSJyZWNhcHRjaGFSZWdpc3RlciI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1fY2d1IiBuYW1lPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybVtjZ3VdIiByZXF1aXJlZD0icmVxdWlyZWQiIHZhbHVlPSIxIiAvPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX2NndSI+CgkJCQkJICAgICAJCQkJCQlK4oCZYWNjZXB0ZSBsZXMgY29uZGl0aW9ucyBnw6luw6lyYWxlcyBk4oCZdXRpbGlzYXRpb24gZGUgaWFkPGJyPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3ViLXR4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIEVuIHZvdXMgZW5yZWdpc3RyYW50LCB2b3VzIGNvbnNlbnRleiDDoCBs4oCZaMOpYmVyZ2VtZW50IGV0IGF1IHRyYWl0ZW1lbnQgZGUgdm9zIGRvbm7DqWVzIMOgIGNhcmFjdMOocmUgcGVyc29ubmVsIHBhciBJQEQgRnJhbmNlIGRhbnMgbGVzIGNvbmRpdGlvbnMgZMOpY3JpdGVzIGRhbnMgbGEgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9mci9Qb2xpdGlxdWUtZGUtY29uZmlkZW50aWFsaXRlIj5Qb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqS48L2E+ICAoIE9ibGlnYXRvaXJlICkKICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InJlZ2lzdGVyX25ld3NsZXR0ZXJSIiBpZD0icmVnaXN0ZXJfbmV3c2xldHRlclIiLz4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyZWdpc3Rlcl9uZXdzbGV0dGVyUiI+CiAgICAgICAgICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlIHJlY2V2b2lyIHBhciBuZXdzbGV0dGVyIGRlcyBhbm5vbmNlcyBzdXNjZXB0aWJsZXMgZGUgbeKAmWludMOpcmVzc2VyIGV0IGRlcyBjb25zZWlscyDDoCBs4oCZYWNoYXQgZGUgbGEgcGFydCBk4oCZaWFkCiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJwcm9tbyIgbmFtZT0icHJvbW9QIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwcm9tbyI+CgkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIErigJlhY2NlcHRlIGRlIHJlY2V2b2lyIGRlcyBwcm9tb3MgZGVzIHBhcnRlbmFpcmVzIGRlIGlhZAkJCQkJCSAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Zvb3RlciI+CiAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIj5TJ2luc2NyaXJlPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX190b2tlbiIgbmFtZT0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1bX3Rva2VuXSIgdmFsdWU9InFMbjA3anA5VzljMHJXWTFWWDhuY280M2NTWkIzY3RncE9nemJhbElydzAiIC8+CiAgICA8L2Zvcm0+CgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBpZD0icGFzc19mb3JnZXRfZGl2IiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+PHNwYW4gY2xhc3M9ImN1c3RvbS1pY29uIG1vZGFsLWNsb3NlLWljb24iIGRhdGEtZGlzbWlzcz0ibW9kYWwiPjwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIGNsZWFyZml4Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlX19tYWluIj5Nb3QgZGUgcGFzc2Ugb3VibGnDqTwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0idGV4dCI+CiAgICAgICAgICAgICAgICA8cD5FbnRyZXogdm90cmUgYWRyZXNzZSBFbWFpbCBldCBub3VzIHZvdXMgZW52ZXJyb25zIGxhIG1hcmNoZSDDoCBzdWl2cmU8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii9yZXNldHRpbmcvc2VuZC1lbWFpbCIgbmFtZT0iY29ubmV4aW9uIiBtZXRob2Q9InBvc3QiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtX19wYXNzX2ZvcmdldCIgb25zdWJtaXQ9InN1Ym1taXRlZCgpIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Vycm9yIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIHBsYWNlaG9sZGVyPSJFbWFpbCIgaWQ9IiIgbmFtZT0idXNlcm5hbWUiIHJlcXVpcmVkPSJyZXF1aXJlZCI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Zvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJzdWJtaXRfcGFzc19mb3JnZXQiIG5hbWU9IiIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEVudm95ZXIgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdD4KICAgIGZ1bmN0aW9uIHN1Ym1taXRlZCgpIHsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGV4dCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICB9Cjwvc2NyaXB0PiAgICA8ZGl2IGlkPSJuZXdBbGVydE1vZGFsIiBjbGFzcz0ibW9kYWxEaWFsb2ciCiAgICAgZGF0YS1tZXNzYWdlPSJWb3VzIGRldmV6IHJlbnNlaWduZXIgYXUgbW9pbnMgdW4gbGlldSBwb3VyIHBvdXZvaXIgZW5yZWdpc3RyZXIgdW5lIGFsZXJ0ZSI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIGZ1bGwtd2lkdGgiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZV9fbWFpbiI+QWxlcnRlIEUtbWFpbDwvZGl2PgogICAgICAgICAgICA8cD5VbmUgYWxlcnRlIGUtbWFpbCBzZXJhIGNyw6nDqWUgw6AgcGFydGlyIGRlcyBjcml0w6hyZXMgZGUgdm90cmUgcmVjaGVyY2hlLjwvcD4KICAgICAgICAgICAgPHA+VmV1aWxsZXogY2hvaXNpciBsYSA8c3Ryb25nPmZyZXF1ZW5jZSBkZSBsJ2FsZXJ0ZTwvc3Ryb25nPiA6PC9wPgogICAgICAgICAgICA8Zm9ybSBpZD0idXNlckFsZXJ0Rm9ybSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPkZyw6lxdWVuY2UgZGUgbCdhbGVydGU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImZyZXF1ZW5jeSIgaWQ9ImFsZXJ0LXNlYXJjaC1uYXYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWxlY3RlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJKb3VybmFsacOocmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpvdXJuYWxpw6hyZSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IkhlYmRvbWFkYWlyZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGViZG9tYWRhaXJlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iTWVuc3VlbGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZW5zdWVsbGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiIgc3R5bGU9InBhZGRpbmctYm90dG9tOiAyMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fYWxlcnQgYnV0dG9uX19tZWRpdW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhZGQtYWxlcnQiIGhyZWY9Ii9wcm9maWxlL2FsZXJ0L2FkZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXJpbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DcsOpZXIgbCdhbGVydGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CiAgICA8IS0tIGVuZCBNb2RhbCAtLT4KICAgICAgICAgICAgICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIG1vZGFsRGlhbG9nIiBpZD0ic2VuZFRvRnJpZW5kTW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+PC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAKCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgdmFyIGdsb2JhbF9jdXJyZW50X2NvdW50cnkgPSAnZnInOwogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvYXBwLTY4NzgzMzc4NzcubWluLmpzP3YxLjIwLjEiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcz9vbmxvYWQ9b25sb2FkQ2FsbGJhY2smcmVuZGVyPWV4cGxpY2l0JmhsPWZyIgogICAgICAgICAgICBhc3luYyBkZWZlcj48L3NjcmlwdD4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIgogICAgICAgICAgaHJlZj0iLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvY29va2llY29uc2VudDIvMy4wLjMvY29va2llY29uc2VudC5taW4uY3NzIi8+CiAgICA8c2NyaXB0IHNyYz0iLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvY29va2llY29uc2VudDIvMy4wLjMvY29va2llY29uc2VudC5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJyZXF1aWVyZWRNZXNzYWdlIiB2YWx1ZT0iQ2UgY2hhbXAgZXN0IHJlcXVpcyI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iaW52YWxpZE1lc3NhZ2UiIHZhbHVlPSJWb3RyZSBhZHJlc3NlIGUtbWFpbCBlc3QgaW52YWxpZGUiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9InJlcXVpZXJlZE1lc3NhZ2VDQiIKICAgICAgICAgICB2YWx1ZT0iVmV1aWxsZXogY29jaGVyIGNldHRlIGNhc2Ugc2kgdm91cyBzb3VoYWl0ZXogY29udGludWVyIj4KCiAgICAgICAgPGRpdiBpZD0iaWFkLXBvcC11cC1jb3ZpZDE5IiBjbGFzcz0iaWFkLXBvcC11cC1jb3ZpZDE5IGlhZC1wb3AtdXAtY292aWQxOS1kbiIgZGF0YS1jb3VudHJ5PSJmciIgZGF0YS1sb2NhbGU9ImZyIj4KICAgIDxkaXYgY2xhc3M9ImlhZC1wb3AtdXAtY292aWQxOS1jb250YWluZXIgaWFkLXBvcC11cC1jb3ZpZDE5LWNvbnRhaW5lci1kZXNrdG9wIj4KICAgICAgICA8aW1nIGlkPSJpYWQtcG9wLXVwLWNvdmlkMTktaW1nIiBzcmM9Ii9wb3B1cC1jb3ZpZDE5L2ltZy9mci0tZGVza3RvcC1wb3B1cDJfZnIucG5nP3YxLjIwLjEiIGFsdD0iY292aWQxOSI+CiAgICAgICAgPGRpdiBpZD0iaWFkLXBvcC11cC1jb3ZpZDE5LWNsb3NlIj48c3Bhbj5GRVJNRVI8L3NwYW4+PGkgY2xhc3M9ImZhcyBmYS10aW1lcyI+PC9pPjwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3BvcHVwLWNvdmlkMTkvanMvc2NyaXB0LmpzP3YxLjIwLjEiPjwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K
  recorded_at: Thu, 09 Jul 2020 13:09:21 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-4-pieces-paris-86m2/r791383?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:23 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=07fe8ce3336cfbcc8b01712b30908a81; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:23 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:23 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:23 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:23 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-4-pieces-paris-112m2/r797610?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:26 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=67655b20c1eec452e9611f6c29e7bff9; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:26 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:26 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:26 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:26 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-piece-paris-14m2/r799352?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:27 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=779913580c58314d9c277d1a113bc3a3; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:27 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:27 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:27 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ICAgIDwhRE9DVFlQRSBodG1sPgoKICAgIDxoZWFkPgogICAgICAgIDwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIChmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzogbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPScvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JytpK2RsO2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaixmKTt9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1XUEtOU0Q5Jyk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ii8+CiAgICAgICAgPHRpdGxlPmlhZCAtICAgIEFwcGFydGVtZW50IGRlIDE0IG3CsiAtIFBBUklTCjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgY29udGVudD0iICAgICAgICAgICAgaWFkIEZyYW5jZSAtIERlbHBoaW5lIEdVSUxMT0NIRUFVICB2b3VzIHByb3Bvc2UgOiBQYXJpcyAxMMOobWUgLSBNw6l0cm8gTDcgUG9pc3Nvbm5pw6hyZSDDoCAyIG1pbiDDoCBwaWVkLiBRdWFydGllciBkZSBsYSBQb3J0ZSBkZSBTYWludC1EZW5pcyB0csOocyBwcmlzw6kgcG91ciBzZXMgY28uLi4KICAgICIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJpYWQgaW1tb2JpbGllciIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICAgICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtaW5pbXVtLXNjYWxlPTEiPgogICAgICAgIDxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0iTTNDVWlwenBkQWRNekxaZ29LS1hZT0k4enlybW5UbG5tMl8xUUVnMlFqcyIvPgogICAgICAgICAgICA8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9ImluZGV4LCBmb2xsb3ciLz4KICAgICAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtcGllY2UtcGFyaXMtMTRtMi9yNzk5MzUyP19sb2NhbGU9ZnIiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IklBRCIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJBcHBhcnRlbWVudCBkZSAxNCBtwrIgLSBQQVJJUyIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmxvY2FsZSIgY29udGVudD0iZnJfRlIiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpsb2NhbGU6YWx0ZXJuYXRlIiBjb250ZW50PSJlbl9VUyIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9IndlYnNpdGUiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iICAgIAogICAgICAgIGlhZCBGcmFuY2UgLSBEZWxwaGluZSBHVUlMTE9DSEVBVSAoMDYgODcgMDMgNjggNDkpIHZvdXMgcHJvcG9zZSA6IFBhcmlzIDEww6htZSAtIE3DqXRybyBMNyBQb2lzc29ubmnDqHJlIMOgIDIgbWluIMOgIHBpZWQuIFF1YXJ0aWVyIGRlIGxhIFBvcnRlIGRlIFNhaW50LURlbmlzIHRyw6hzIHByaXPDqSBwb3VyIHNlcyBjb21tZXJjZXMsIHNvbiBhbmltYXRpb24sIHNlcyB0cmFuc3BvcnRzLiBBdSAyw6htZSDDqXRhZ2UgZCd1biBpbW1ldWJsZSBhbmNpZW4gYmllbiBlbnRyZXRlbnUsIHZlbmV6IGTDqWNvdXZyaXIgY2V0dGUgc3R1ZGV0dGUgbWV1YmzDqWUuLi4KICAgICIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnVybCIgY29udGVudD0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtcGllY2UtcGFyaXMtMTRtMi9yNzk5MzUyIi8+CiAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIKICAgICAgICAgICAgICBjb250ZW50PSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fdGh1bWIvcGhvdG8vNzQ3NDk1NDYuanBnIi8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9InR3aXR0ZXI6aW1hZ2UiCiAgICAgICAgICAgICAgY29udGVudD0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzc0NzQ5NTQ2LmpwZyIvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJ0d2l0dGVyOnNpdGUiIGNvbnRlbnQ9ImlhZCIvPgogICAgPG1ldGEgcHJvcGVydHk9InR3aXR0ZXI6Y2FyZCIgY29udGVudD0ic3VtbWFyeSIvPgogICAgPG1ldGEgcHJvcGVydHk9InR3aXR0ZXI6dGl0bGUiIGNvbnRlbnQ9IkFwcGFydGVtZW50IGRlIDE0IG3CsiAtIFBBUklTIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0idHdpdHRlcjpkZXNjcmlwdGlvbiIgY29udGVudD0iICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBEZWxwaGluZSBHVUlMTE9DSEVBVSAoMDYgODcgMDMgNjggNDkpIHZvdXMgcHJvcG9zZSA6IFBhcmlzIDEww6htZSAtIE3DqXRybyBMNyBQb2lzc29ubmnDqHJlIMOgIDIgbWluIMOgIHBpZWQuIFF1YXJ0aWVyIGRlIGxhIFBvcnRlIGRlIFNhaW50LURlbmlzIHRyw6hzIHByaXPDqSBwb3VyIHNlcyBjb21tZXJjZXMsIHNvbiBhbmltYXRpb24sIHNlcyB0cmFuc3BvcnRzLiBBdSAyw6htZSDDqXRhZ2UgZCd1biBpbW1ldWJsZSBhbmNpZW4gYmllbiBlbnRyZXRlbnUsIHZlbmV6IGTDqWNvdXZyaXIgY2V0dGUgc3R1ZGV0dGUgbWV1YmzDqWUuLi4KICAgICIvPgoKCiAgICAgICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNhY2hlLWNvbnRyb2wiIGNvbnRlbnQ9Im1heC1hZ2U9MCIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNhY2hlLWNvbnRyb2wiIGNvbnRlbnQ9Im5vLWNhY2hlIi8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iZXhwaXJlcyIgY29udGVudD0iMCIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImV4cGlyZXMiIGNvbnRlbnQ9IlR1ZSwgMDEgSmFuIDE5ODAgMTowMDowMCBHTVQiLz4KICAgICAgICA8bWV0YSBodHRwLWVxdWl2PSJwcmFnbWEiIGNvbnRlbnQ9Im5vLWNhY2hlIi8+CgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMzJ4MzIiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi0zMngzMi5wbmc/djEuMjAuMSI+CiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS9wbmciIHNpemVzPSIxNngxNiIgaHJlZj0iL2ltZy9mYXZpY29ucy9mYXZpY29uLTE2eDE2LnBuZz92MS4yMC4xIj4KICAgICAgICA8bGluayByZWw9Im1hbmlmZXN0IiBocmVmPSIvaW1nL2Zhdmljb25zL21hbmlmZXN0Lmpzb24/djEuMjAuMSI+CiAgICAgICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiNmZmZmZmYiPgogICAgICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSIvaW1nL2Zhdmljb25zL21zLWljb24tMTQ0eDE0NC5wbmc/djEuMjAuMSI+CiAgICAgICAgPG1ldGEgbmFtZT0idGhlbWUtY29sb3IiIGNvbnRlbnQ9IiNmZmZmZmYgIj4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSAqKiBHT09HTEUgRk9OVFMgKiogLS0+CiAgICAgICAgICAgIDxsaW5rIGhyZWY9Ii8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1HbG9yaWErSGFsbGVsdWphaCIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICAgICAgICAgIDxsaW5rIGhyZWY9Ii8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1MYXRvOjMwMCw0MDAsNzAwLDMwMGl0YWxpYyw0MDBpdGFsaWMsNzAwaXRhbGljIgogICAgICAgICAgICAgICAgICByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KICAgICAgICAgICAgPGxpbmsgaHJlZj0iLy9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PURyb2lkK1NhbnM6NDAwLDcwMCIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICAgICAgICAgIDxsaW5rIGhyZWY9Ii8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb3VnZStTY3JpcHQiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgoKICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvY3NzL3ZlbmRvci1hMTUxNTg5YmU4Lm1pbi5jc3M/djEuMjAuMSI+CiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2FsbC5jc3M/djEuMjAuMSI+CiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9tYWluLTQyMTFkNzU2MWYubWluLmNzcz92MS4yMC4xIj4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHN0eWxlPgogICAgICAgICAgICBkaXYuY2Mtd2luZG93LmNjLWJhbm5lciB7CiAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMHB4OwogICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDBweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYS5jYy1idG4gewogICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjdlbTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3Bhbi5jYy1tZXNzYWdlIHsKICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTFweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYS5jYy1idG4uY2MtZGlzbWlzczpob3ZlciB7CiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmUgIWltcG9ydGFudDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYS5jYy1idG4uY2MtYWxsb3c6aG92ZXIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VkZWZmNTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmhpZGVQdCB7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lOwogICAgICAgICAgICB9CiAgICAgICAgPC9zdHlsZT4KCgogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9mb250LWF3ZXNvbWUvNC41LjAvY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzIj4KICAgICAgICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3gtaWNvbiIgaHJlZj0iL2ltZy9mYXZpY29ucy9mYXZpY29uLmljbz92MS4yMC4xIi8+CgogICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHNyYz0iL2FsbC5qcz92MS4yMC4xIj48L3NjcmlwdD4KICAgICAgICAKICAgIAogICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3BvcHVwLWNvdmlkMTkvY3NzL3N0eWxlLmNzcz92MS4yMC4xIj4gICAgIDwvaGVhZD4KCgoKPGJvZHkgIGNsYXNzPSIiIGl0ZW1zY29wZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvV2ViUGFnZSI+CjwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgo8bm9zY3JpcHQ+CiAgICA8aWZyYW1lIHNyYz0iLy93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vbnMuaHRtbD9pZD1HVE0tV1BLTlNEOSIgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+PC9pZnJhbWU+Cjwvbm9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KCjxkaXYgaWQ9ImZiLXJvb3QiPjwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJlLWhlYWRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGRlbi14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgIFBvdXIgdW5lIG1laWxsZXVyZSBleHDDqXJpZW5jZSBzdXIgbm90cmUgc2l0ZSA6ICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpbiI+PC9pPgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybSBmb3JtX19sb2NhbGl6YXRpb24iPgogICAgICAgICAgICAgICAgICAgIExvY2FsaXNlei12b3VzICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImZvcm1fX2xvY2FsaXphdGlvbiIgdHlwZT0ic3VibWl0IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fYXJyb3ctMSIgdmFsdWU9IiIgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL2dlby1zZWFyY2gvIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVzZXJjb3VudHJ5PSIgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNvdW50cnk9ImZyIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Nsb3NlIj48c3BhbiBjbGFzcz0iaGlkZGVuLXhzIj5GZXJtZXI8L3NwYW4+IDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1jcm9zcyI+PC9pPjwvYT4KICAgICAgICA8L2Rpdj4KICAgIAo8ZGl2IGlkPSJqcy1mbGFzaGJhZyIgY2xhc3M9ImFsZXJ0IGFsZXJ0LWVycm9yIGFsZXJ0LWRpc21pc3NpYmxlIiByb2xlPSJhbGVydCIgZGF0YS10eXBlPSJmbGFzaCIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgIDxidXR0b24gY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9ImFsZXJ0Ij4KICAgICAgICA8c3Bhbj4mdGltZXM7PC9zcGFuPgogICAgPC9idXR0b24+CiAgICBDZSBiaWVuIG4nZXN0IHBsdXMgZGlzcG9uaWJsZSwgdm91cyBhdmV6IMOpdMOpIHJlZGlyaWfDqSB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsPC9kaXY+Cgo8ZGl2IGNsYXNzPSJtYWluLWhlYWRlci13cmFwcGVyIj4KICAgIDxkaXYgaWQ9Im1haW4iIGNsYXNzPSJtYWluLWNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbl9fbWVudS1jb250YWluZXIiPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b25fX21lbnUtb3BlbiI+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLW1lbnUiPjwvaT48L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uX19tZW51LWNsb3NlIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24tY3Jvc3MiPjwvaT48L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aGVhZGVyIGlkPSJoZWFkZXIiIGNsYXNzPSIgaGVhZGVyIiBpdGVtc2NvcGUKICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvV1BIZWFkZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyX19sb2dvIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvIiBjbGFzcz0iaGVhZGVyX19sb2dvLWxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9pYWQtbG9nby5wbmc/djEuMjAuMSIgYWx0PSJJQUQgOiBMb2NhdGlvbiBldCB2ZW50ZSBlbiBpbW1vYmlsaWVyIj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxuYXYgaWQ9Im1lbnUiIGNsYXNzPSJtZW51IG1lbnVfX21vYmlsZSAiCiAgICAgICAgICAgICAgICAgICAgIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvU2l0ZU5hdmlnYXRpb25FbGVtZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci1uYXYiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmlyc3QiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQvbGlzdGUvYW5ub25jZXM/c29ydD1hZC5maXJzdFB1Ymxpc2hEYXRlJmFtcDtkaXI9ZGVzYyIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBBY2hldGVyCgogICAgICAgIDxpIGNsYXNzPSJtZW51LWljb24yIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvbG9jYXRpb24vbGlzdGUvYW5ub25jZXM/c29ydD1hZC5maXJzdFB1Ymxpc2hEYXRlJmFtcDtkaXI9ZGVzYyIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBMb3VlcgoKICAgICAgICA8aSBjbGFzcz0ibWVudS1pY29uMyI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbmRyZSIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBWZW5kcmUKCiAgICAgICAgPGkgY2xhc3M9Im1lbnUtaWNvbjMiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lc3RpbWVyLXZvdHJlLWJpZW4iICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgRXN0aW1lcgoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpdGVtLWhpZ2hsaWdodGVkIj4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlL2Fubm9uY2VzL2ltbW9iaWxpZXItcHJlc3RpZ2UvbGlzdGUtcmVzdWx0YXQ/cmFkaXVzPTIwJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDt0YWdzJTVCMCU1RD1wcmVzdGlnZSIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBQUkVTVElHRQoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzaG93LXhzIj4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3Ryb3V2ZXItdW4tY29uc2VpbGxlciIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBUcm91dmVyIHVuIGNvbnNlaWxsZXIKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2hvdy14cyBsYXN0IiBpY29uPSJkZW1vLWljb24gaWNvbi11c2VyX3pvb20iPiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RldmVuaXItY29uc2VpbGxlci5pYWRmcmFuY2UuZnIiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgTm91cyByZWpvaW5kcmUKCiAgICAgICAgPGkgY2xhc3M9Ii8iPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgoKICAgIDwvdWw+CgogICAgICAgICAgICAgICAgPC9uYXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudV9fc2Vjb25kICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoaWRkZW4teHMgZmlyc3QiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvdHJvdXZlci11bi1jb25zZWlsbGVyIiAgICAgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX19zZWNvbmQgYnV0dG9uX19tZWRpdW0iPgogICAgICAgICAgICBUcm91dmVyIHVuIGNvbnNlaWxsZXIqCgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi11c2VyX3pvb20iPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhpZGRlbi14cyIgaWNvbj0iZGVtby1pY29uIGljb24tdXNlcl96b29tIj4gICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kZXZlbmlyLWNvbnNlaWxsZXIuaWFkZnJhbmNlLmZyIiAgICAgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fbWFpbiBidXR0b25fX21lZGl1bSI+CiAgICAgICAgICAgIE5vdXMgcmVqb2luZHJlCgogICAgICAgIDxpIGNsYXNzPSIvIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoYXMtY2hpbGQgY291bnRyeS1jaG9zZW4tZnIgbGluay1pYWQiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiAgICAgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3Byb2ZpbCI+CiAgICAgICAgICAgIGlhZCBGcmFuY2UKCiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LWRvd24iPjwvaT4KICAgIDwvYT4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibWVudV9sZXZlbF8xIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpcnN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iLy93d3cuaWFkZXNwYW5hLmVzIiAgICAgY2xhc3M9InRleHQtY2VudGVyIG1lbnUtaXRlbS11bmNlbnRlcmVkIGlhZC1mcmFuY2UiPgogICAgICAgICAgICBpYWQgRXNwYcOxYQoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvL3d3dy5pYWQtaXRhbGlhLml0IiAgICAgY2xhc3M9InRleHQtY2VudGVyIG1lbnUtaXRlbS11bmNlbnRlcmVkIGlhZC1mcmFuY2UiPgogICAgICAgICAgICBpYWQgSXRhbGlhCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxhc3QiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvL3d3dy5pYWRwb3J0dWdhbC5wdCIgICAgIGNsYXNzPSJ0ZXh0LWNlbnRlciBtZW51LWl0ZW0tdW5jZW50ZXJlZCBpYWQtZnJhbmNlIj4KICAgICAgICAgICAgaWFkIFBvcnR1Z2FsCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgoKICAgIDwvdWw+CgogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGFzLWNoaWxkIHVzZXItbWVudSBsYXN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgICAgIGNsYXNzPSJidXR0b24gYnV0dG9uX19wcm9maWwiPgogICAgICAgICAgICAKCiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXVzZXItNCI+PC9pPgogICAgPC9hPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJtZW51X2xldmVsXzEiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBpZD0ibG9naW5fYnRuIiBjbGFzcz0iZGVtby1pY29uIGljb24tdXNlci0zIHdpZGUgZmlyc3QiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9ImxvZ2luLXRhYiI+ICAgICAgICA8c3Bhbj4gICAgU2UgY29ubmVjdGVyCjwvc3Bhbj4gICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBpZD0iY3JlYXRlX2J0biIgY2xhc3M9ImRlbW8taWNvbiBpY29uLXVzZXItMiB3aWRlIGxhc3QiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+ICAgICAgICA8c3Bhbj4gICAgQ3LDqWVyIHVuIGNvbXB0ZQo8L3NwYW4+ICAgICAgICAKICAgIDwvbGk+CgoKICAgIDwvdWw+CgogICAgPC9saT4KCgogICAgPC91bD4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaGVhZGVyPgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CgoKPG1haW4gaWQ9Im1haW5fX2NvbnRlbnQiIGNsYXNzPSJtYWluX19jb250ZW50IiBpdGVtc2NvcGUgaXRlbXByb3A9Im1haW5Db250ZW50T2ZQYWdlIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvQmxvZyI+CiAgICA8c2VjdGlvbiBpZD0iY29udGVudCIgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDxmb3JtIGlkPSJzZWFyY2hGb3JtIiBjbGFzcz0ic2VhcmNoX19iYXIiIGFjdGlvbj0iL3JlY2hlcmNoZXIvYW5ub25jZXMiIG1ldGhvZD0iR0VUIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fZmlsdGVycyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLW5hbWU9IkFjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+QWN0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9InRyYW5zYWN0aW9uX3R5cGUiIGlkPSJzZWFyY2gtbmF2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWxlY3RlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJWZW50ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY2hldGVyICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvdWVyICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iVmlhZ2VyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpYWdlciAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+LS0+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9InRydWUiIGRhdGEtbmFtZT0iTGlldSh4KSIKICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0aW9ubmVzPSJzw6lsZWN0aW9ubsOpcyIgZGF0YS1hbGxzZWxlY3Rpb25uZXM9IlRvdXMgc8OpbGVjdGlvbm7DqXMiCiAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYy1zZWxlY3QgIG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+IExpZXUoeCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9Imdlb192YWx1ZSIgY2xhc3M9InNlbGVjdF9faW5wdXQgd2hlcmVUb0J1eV9fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJ3aGVyZVRvQnV5IiBjbGFzcz0id2hlcmVUb0J1eVNlYXJjaEJhciBzZWFyY2gtYmlnLWZpZWxkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iT8O5ID8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsPSIvYXV0b2NvbXBsZXRlLWdjLyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyc2xleS1yZXF1aXJlZD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJzbGV5LWVycm9ycy1tZXNzYWdlcy1kaXNhYmxlZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFnc19fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9InRydWUiIGRhdGEtbmFtZT0iVHlwZShzKSBkZSBiaWVuIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYy1zZWxlY3QgbXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlR5cGUocykgZGUgYmllbjwvYT4KICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJnZW5lcmljX3R5cGVbXSIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0iQVAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFwcGFydGVtZW50LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9Ik1WIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS0zIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYWlzb24gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iUEEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWdhcmFnZS0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHYXJhZ2UgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iRkMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWNvbW1lcmNlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW1lcmNlICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IklNIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcHBhcnRlbWVudC0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCw6J0aW1lbnQgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iQlUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJ1cmVhdS0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdXJlYXUgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9InRlcnJhaW4iIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iVEUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGVycmFpbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgPGRpdiBkYXRhLW5hbWU9IlN1cmZhY2UgbWluL21heCIgZGF0YS1zdGFydF9hdD0iZGUiICBkYXRhLXN0YXJ0X3RvPSLDoCIgY2xhc3M9ImMtc2VsZWN0IG1pbl9fbWF4CiAgICAgICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5TdXJmYWNlIG1pbi9tYXg8L2E+CiAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaW4gOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0ic3VyZmFjZV9taW4iIG5hbWU9InN1cmZhY2VfbWluIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcnNsZXktcmVxdWlyZWQ9ImZhbHNlIiBkYXRhLXBhcnNsZXktdHlwZT0ibnVtYmVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlIj5twrI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1heCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJzdXJmYWNlX21heCIgbmFtZT0ic3VyZmFjZV9tYXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyc2xleS1yZXF1aXJlZD0iZmFsc2UiIGRhdGEtcGFyc2xleS10eXBlPSJudW1iZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPm3Csjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0iZmFsc2UiIGRhdGEtbmFtZT0iUGnDqGNlKHMpIgogICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCBtdWx0aXBsZSIKICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwaWVjZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5QacOoY2Uocyk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9InJvb21zW10iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpICBkYXRhLXZhbHVlPSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGllY2UtMSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgcGnDqGNlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMiBwacOoY2VzICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGRhdGEtdmFsdWU9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0zIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBwacOoY2VzICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS00Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNCBwacOoY2VzICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGRhdGEtdmFsdWU9IjUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS01Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNSBwacOoY2VzICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGRhdGEtdmFsdWU9IjYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS02Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNiBwacOoY2VzIGV0IHBsdXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbmFtZT0iUHJpeCBtaW4vbWF4IiBkYXRhLXN0YXJ0X2F0PSJkZSIgIGRhdGEtc3RhcnRfdG89IsOgIiBjbGFzcz0iYy1zZWxlY3QgIG1pbl9fbWF4CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlByaXggbWluL21heDwvYT4KICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRyYW5zYWN0aW9uLXR5cGU9IlZlbnRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1wcmljZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWluIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9InByaWNlX21pbiIgdHlwZT0idGV4dCIgdGl0bGU9IlByaXggbWluIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlIj7igqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRyYW5zYWN0aW9uLXR5cGU9IkxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1wcmljZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF4IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9InByaWNlX21heCIgdHlwZT0idGV4dCIgdGl0bGU9IlByaXggbWF4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlIj7igqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2JveF9fbW9yZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLXVzZS1uYW1lPSJmYWxzZSIgaWQ9ImNoYW1icmVzIiBkYXRhLW5hbWU9IkNoYW1icmVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0aW9ubmVzPSJzw6lsZWN0aW9ubsOpcyIgZGF0YS1hbGxzZWxlY3Rpb25uZXM9IlRvdXMgc8OpbGVjdGlvbm7DqXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPiBDaGFtYnJlczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImJlZHJvb21zW10iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgY2hhbWJyZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSIyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIGNoYW1icmVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMgY2hhbWJyZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNCBjaGFtYnJlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSI1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1IGNoYW1icmVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDYgY2hhbWJyZXMgZXQgcGx1cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9InRydWUiIGRhdGEtbmFtZT0iVGFnKHMpIgogICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCBtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlRhZyhzKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0idGFnc1tdIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJleGNsdXNpdmUiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhjbHVzaXZpdMOpICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0idG9wIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXRhZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvdXAgZGUgY29ldXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJuZXciID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm91dmVhdSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9InByaWNlX2Rvd24iID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmFpc3NlIGRlIHByaXggICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJjb21wcm9taXMiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU291cyBjb21wcm9taXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJuZXdfYnVpbGRpbmciID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV1ZiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9InRydWUiIGRhdGEtbmFtZT0iRFBFIgogICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCBtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPkRQRTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iY2xhc3NfZF9wX2VbXSIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJBKyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJCIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkItIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEItCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJDIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJGIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLXNlbGVjdCIgZGF0YS1uYW1lPSJUeXBlIGRlIG1hbmRhdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlR5cGUgZGUgbWFuZGF0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJleGNsdXNpdmUiIGNsYXNzPSJzZWxlY3RfX2lucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGRhdGEtdmFsdWU9IjEiPkV4Y2x1c2lmPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iMCI+Tm9uLWV4Y2x1c2lmPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLW5hbWU9IsOJdGVuZHJlIGxhIHJlY2hlcmNoZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPsOJdGVuZHJlIGxhIHJlY2hlcmNoZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0icmFkaXVzIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNWttPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTBrbTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE1a208L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMGttPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJpZCIgaWQ9Im1pZCIgcGxhY2Vob2xkZXI9Ik7CsCBkZSBtYW5kYXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaC1zbWFsbC1maWVsZCIgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJmYWxzZSIgZGF0YS1wYXJzbGV5LXR5cGU9Im51bWJlciIvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMyByaWdodF9faW5mbyI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdGEgYWxpZ24tY29sdW1uLWNlbnRlciI+CgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19zZWNvbmQgYnV0dG9uX19hY3Rpb24iPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zZWFyY2gtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlJlY2hlcmNoZTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX2FsZXJ0IGJ1dHRvbl9fbWVkaXVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFiPSJsb2dpbi10YWIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DcsOpZXIgdW5lIGFsZXJ0ZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPCEtLTxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fYWN0aW9uIGJ1dHRvbl9fc2Vjb25kIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXNlYXJjaC0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlJlY2hlcmNoZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4tLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgaWQ9InBhcmFtcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJleGNsdXNpdmUiIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idGFnc19saXN0IiB2YWx1ZT0iIi8+CiAgICA8L2Rpdj4KICAgIDxhIGNsYXNzPSJtb3JlIG1vcmUtLWhvbWUiIGhyZWY9IiMiPgogICAgICAgIGRlIGNyaXTDqHJlcyAgICA8L2E+CjwvZm9ybT4KCjxkaXYgY2xhc3M9ImZvb3Rlci1tb2JpbGUiPgogICAgICAgICAgICAgICAgICAgIDxjZW50ZXI+CiAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBpZD0iY29udGFjdC1tb2JpbGUtYWQtc2hvdyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX19zZWNvbmQgIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1lbnZlbG9wZSI+PC9pPgogICAgICAgICAgICAgICAgPHNwYW4+Q29udGFjdGVyIGxlIGNvbnNlaWxsZXI8L3NwYW4+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvY2VudGVyPgogICAgICAgIDwvZGl2PgoKCgogICAgPGRpdiBjbGFzcz0iYnJlYWRjcnVtYiI+CiAgICA8dWw+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvIj4KICAgICAgICAgICAgICAgIFZlbnRlLCBhY2hhdCwgbG9jYXRpb24sIGwnaW1tb2JpbGllciBkZSBwcm94aW1pdMOpICAgICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJhcnJvdyI+Jmd0OzwvbGk+CgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7YXJlYXM9RlJBOCZhbXA7dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJhcmVhcyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyRlJBOCUyMiUyQyUyMm5hbWUlMjIlM0ElMjIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCI+CiAgICAgICAgICAgICAgICBWZW50ZQogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImFycm93Ij4mZ3Q7PC9saT4KICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP2FyZWFzPUZSQTgmYW1wO3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyYXJlYXMlMjIlMkMlMjJ2YWx1ZSUyMiUzQSUyMkZSQTglMjIlMkMlMjJuYW1lJTIyJTNBJTIyJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQiPgogICAgICAgICAgICAgICAgICAgIMOObGUtZGUtRnJhbmNlCiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iYXJyb3ciPiZndDs8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7ZGVwYXJ0bWVudHM9UGFyaXMmYW1wO3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZGVwYXJ0bWVudHMlMjIlMkMlMjJ2YWx1ZSUyMiUzQSUyMlBhcmlzJTIyJTJDJTIybmFtZSUyMiUzQSUyMlBhcmlzJTI4NzUlMjklMjIlN0QlNUQiPgogICAgICAgICAgICAgICAgICAgIFBhcmlzCiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iYXJyb3ciPiZndDs8L2xpPgogICAgICAgICAgICAgICAgICAgIAkJCQk8bGk+CgkJPGEgaHJlZj0iIyI+CiAgICAgICAgICAgIEFwcGFydGVtZW50IGRlIDE0IG3CsiAtIFBBUklTCiAgICAgICAgICAgIAkJCTwvYT4JCQkJCiAgICAgICAgPC9saT4KICAgIDwvdWw+CjwvZGl2PgoKPGRpdiBjbGFzcz0ib2ZmZXJfX290aGVyIj4KICAgIDxkaXYgY2xhc3M9ImxlZnQiPgogICAgICAgICAgICAgPGEgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/Z3BfaWQ9MjA0MzMyNjgzMiZhbXA7dGFnc19saXN0PSU1QiU1RCI+CgogICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy0xIj48L2k+IFJldG91ciDDoCBsYSBwYWdlIGRlIHJlY2hlcmNoZSA8L2E+CjwvZGl2Pgo8L2Rpdj4KCiAgICAJPGRpdiBpZD0iZmljaGUtYmllbiI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fbmV3Ij5Ob3V2ZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fc2xpZGVyIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fc2xpZGVyLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fdGh1bWIvcGhvdG8vNzQ3NDk1NDYuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSAxNCBtwrIgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzc0NzQ5NTQ4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTQgbcKyIC0gUEFSSVMiIGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZ3JhbmRpciIgaHJlZj0iI2xpZ2h0Ym94LWltYWdlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmVzaXplLWZ1bGwiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19zbGlkZXItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b190aHVtYi9waG90by83NDc0OTU1MC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDE0IG3CsiAtIFBBUklTIiBjbGFzcz0iaW1nIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWdyYW5kaXIiIGhyZWY9IiNsaWdodGJveC1pbWFnZSIgZGF0YS10b2dnbGU9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXJlc2l6ZS1mdWxsIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fc2xpZGVyLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fdGh1bWIvcGhvdG8vNzQ3NDk1NTIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSAxNCBtwrIgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzc0NzQ5NTU0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTQgbcKyIC0gUEFSSVMiIGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZ3JhbmRpciIgaHJlZj0iI2xpZ2h0Ym94LWltYWdlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmVzaXplLWZ1bGwiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGlkPSJsaWdodGJveC1pbWFnZSIgY2xhc3M9Im1vZGFsRGlhbG9nIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNsb3NlLWJ0biIgY2xhc3M9ImNsb3NlLWJ0biI+WDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlcl9fbGlnaHRib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvL3Bob3RvLzc0NzQ5NTQ2LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSAxNCBtwrIgLSBQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyBjZW50ZXItc2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG8vcGhvdG8vNzQ3NDk1NDguanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDE0IG3CsiAtIFBBUklTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nIGNlbnRlci1zbGlkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90by9waG90by83NDc0OTU1MC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTQgbcKyIC0gUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWcgY2VudGVyLXNsaWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvL3Bob3RvLzc0NzQ5NTUyLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSAxNCBtwrIgLSBQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyBjZW50ZXItc2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG8vcGhvdG8vNzQ3NDk1NTQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDE0IG3CsiAtIFBBUklTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nIGNlbnRlci1zbGlkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2luZm9ybWF0aW9uLTEiPgogICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0Ij4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIGRlIGwnYW5ub25jZSA6ICAgICAgICAgICAgICAgICAgICA8c3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc5OTM1MgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NlbmQtdG8tZnJpZW5kLzE4OTA2NTAiCiAgICAgICAgICAgICAgICAgICB0aXRsZT0iRW52b3llciBjZSBiaWVuIMOgIHVuIGFtaSIKICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjc2VuZFRvRnJpZW5kTW9kYWwiICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICBFbnZvaSBwYXIgZW1haWwgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1lbnZlbG9wZSI+PC9pPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWQvMTg5MDY1MC9wcmludCIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iSW1wcmltZXIgbGEgZmljaGUgZGUgY2UgYmllbiIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgICAgICAgICAgICAgICBJbXByaW1lciAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1wcmludGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imwtc2hhcmUiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlBhcnRhZ2VyIDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImZiLXhmYm1sLXBhcnNlLWlnbm9yZSBjaXJjbGUtZmFjZWJvb2siIGRhdGEtc2hhcmUtdGl0bGU9IlBhcnRhZ2UgRmFjZWJvb2siCiAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9aHR0cHMlM0ElMkYlMkZ3d3cuaWFkZnJhbmNlLmZyJTJGYW5ub25jZSUyRmFwcGFydGVtZW50LXZlbnRlLXBpZWNlLXBhcmlzLTE0bTIlMkZyNzk5MzUyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBmYiBpY29uLWZiLXJvbmQiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNpcmNsZS10d2l0dGVyIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vc2hhcmU/dXJsPWh0dHBzJTNBJTJGJTJGd3d3LmlhZGZyYW5jZS5mciUyRmFubm9uY2UlMkZhcHBhcnRlbWVudC12ZW50ZS1waWVjZS1wYXJpcy0xNG0yJTJGcjc5OTM1MiIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUGFydGFnZSBUd2l0dGVyIiBkYXRhLXR5cGU9InNoYXJlLWxpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zaGFyZS10aXRsZT0iUGFydGFnZSBUd2l0dGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiB0dyBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iY2lyY2xlLXdoYXRzYXBwIHdoYXRzYXBwX2xpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3dhLm1lP3RleHQ9aHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtcGllY2UtcGFyaXMtMTRtMi9yNzk5MzUyIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFjdGlvbj0ic2hhcmUvd2hhdHNhcHAvc2hhcmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJXaGF0c2FwcCBzaGFyZSIgZGF0YS10eXBlPSJzaGFyZS1saW5rIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNoYXJlLXRpdGxlPSJXaGF0c2FwcCBzaGFyZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9zb2NpYWwvd2hhdHNhcHBfZ3JlZW4ucG5nP3YxLjIwLjEiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9faGVhZGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04Ij4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGl0bGVfX21haW4iPgogICAgICAgICAgICAgICAgICAgICAgICBWZW50ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4oCiIFBBUklTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICg3NTAxMCkgICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJoMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSAxNCBtwrIgLSBQQVJJUwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2gxPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQgZ3JhcGgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRlc2MiPkF1IHByaXggZGU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE3OSAwMDAgPHNwYW4+JmV1cm87PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTIgNzg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmZXVybzsvbcKyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJsaW5rLXNlbGVjdGlvbiBidXR0b24gYnV0dG9uX19tYWluIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fcm91bmRlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VpdnJlIGNlIGJpZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2luZm9ybWF0aW9uLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSI+U3VyZmFjZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImVsZW1lbnQtaWNvbmUiPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE0IG3CsgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGl0bGUiPk5iIGRlIHBpw6hjZXM8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fY29udGVudCBvZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoMiI+RGVzY3JpcHRpZjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPmlhZCBGcmFuY2UgLSBEZWxwaGluZSBHVUlMTE9DSEVBVSAgdm91cyBwcm9wb3NlIDogUGFyaXMgMTDDqG1lIC0gTcOpdHJvIEw3IFBvaXNzb25uacOocmUgw6AgMiBtaW4gw6AgcGllZC4gUXVhcnRpZXIgZGUgbGEgUG9ydGUgZGUgU2FpbnQtRGVuaXMgdHLDqHMgcHJpc8OpIHBvdXIgc2VzIGNvbW1lcmNlcywgc29uIGFuaW1hdGlvbiwgc2VzIHRyYW5zcG9ydHMuIEF1IDLDqG1lIMOpdGFnZSBkJ3VuIGltbWV1YmxlIGFuY2llbiBiaWVuIGVudHJldGVudSwgdmVuZXogZMOpY291dnJpciBjZXR0ZSBzdHVkZXR0ZSBtZXVibMOpZSBkZSAxNG3CsiBlbnZpcm9uIHJlZmFpdGUgw6AgbmV1ZiBlbiAyMDE5IGF1IGNhbG1lIHN1ciBjb3VyLiBUcsOocyBmb25jdGlvbm5lbGxlIGV0IGx1bWluZXVzZSwgZWxsZSBjb21wcmVuZCA6IHVuZSBlbnRyw6llLCBsYSBwacOoY2UgcHJpbmNpcGFsZSBhdmVjIHVuZSBncmFuZGUgZmVuw6p0cmUgZW4gZG91YmxlIHZpdHJhZ2UsIHVuZSBraXRjaGVuZXR0ZSBhbcOpbmFnw6llIGV0IMOpcXVpcMOpZSBhdmVjIGZlbsOqdHJlIGV0IHVuZSBzYWxsZSBkZSBiYWlucyBhdmVjIHdjLiBVbmUgcGV0aXRlIGNhdmUgZXN0IMOpZ2FsZW1lbnQgaW5jbHVzZS48YnI+PGJyPkxhIHByw6lzZW50ZSBhbm5vbmNlIGltbW9iaWxpw6hyZSB2aXNlIDEgbG90IHByaW5jaXBhbCBzaXR1w6kgZGFucyB1bmUgY29wcm9wcmnDqXTDqSBmb3JtYW50IDI5IGxvdHMgYXUgdG90YWwgbmUgZmFpc2FudCBsJ29iamV0IGQnYXVjdW5lIHByb2PDqWR1cmUgZW4gY291cnMgZXQgZCd1biBtb250YW50IGRlIGNoYXJnZXMgZOKAmWVudmlyb24gODEuNTcg4oKsIHBhciBtb2lzIChzb2l0IDk3OC44OCDigqwgYW5udWVsKSBkw6ljbGFyw6kgcGFyIGxlIHZlbmRldXIuSG9ub3JhaXJlcyBk4oCZYWdlbmNlIMOgIGxhIGNoYXJnZSBkdSB2ZW5kZXVyLkluZm9ybWF0aW9uIGQnYWZmaWNoYWdlIMOpbmVyZ8OpdGlxdWUgc3VyIGNlIGJpZW4gOiBEUEUgRSBpbmRpY2UgMjM3IGV0IEdFUyBCIGluZGljZSA3LiBMYSBwcsOpc2VudGUgYW5ub25jZSBpbW1vYmlsacOocmUgYSDDqXTDqSByw6lkaWfDqWUgc291cyBsYSByZXNwb25zYWJpbGl0w6kgw6lkaXRvcmlhbGUgZGUgTW1lIERlbHBoaW5lIEdVSUxMT0NIRUFVIChJRCAyNDI2KSwgQWdlbnQgQ29tbWVyY2lhbCBtYW5kYXRhaXJlIGVuIGltbW9iaWxpZXIgaW1tYXRyaWN1bMOpIGF1IFJlZ2lzdHJlIFNww6ljaWFsIGRlcyBBZ2VudHMgQ29tbWVyY2lhdXggKFJTQUMpIGR1IFRyaWJ1bmFsIGRlIENvbW1lcmNlIGRlIE5BTlRFUlJFIHNvdXMgbGUgbnVtw6lybyA1MzEwNDg2MzUuIDxicj5SZXRyb3V2ZXogdG91cyBub3MgYmllbnMgc3VyIG5vdHJlIHNpdGUgaW50ZXJuZXQuIHd3dy5pYWRmcmFuY2UuY29tPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fY29udGVudCBvZmZlcl9faW5mb3JtYXRpb24tMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2VxdWlwZW1lbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoMiI+RXF1aXBlbWVudDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FdGFnZTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYXZlPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpZ2ljb2RlPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19lbmVyZ3kiPgogICAgPGgyIGNsYXNzPSJoMiI+QmlsYW4gw6luZXJnZXRpcXVlPC9oMj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlIj5Db25zb21tYXRpb24gZCfDqW5lcmdpZTwvcD4KICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlX19zZWNvbmQiPkxvZ2VtZW50IMOpY29ub21lPC9wPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fZ3JhcGgiPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+Jmx0OyA1MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+QTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxzcGFuPjUxIMOgIDkwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5CPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+OTEgw6AgMTUwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5DPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+MTUxIMOgIDIzMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+RDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImN1cnJlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48c3Bhbj4yMzEgw6AgMzMwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5FPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjdXJyZW50X19ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIzNwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48c3Bhbj4zMzEgw6AgNDUwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5GPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+Jmd0OyA0NTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8cCBjbGFzcz0idGl0bGVfX3NlY29uZCI+TG9nZW1lbnQgZW5lcmdpdm9yZTwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlIj5FbWlzc2lvbiBkZSBnYXogw6AgZWZmZXQgZGUgc2VycmU8L3A+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZV9fc2Vjb25kIj5GYWlibGUgw6ltaXNzaW9uIGRlIEdFUzwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2dyYXBoIG9mZmVyX19ncmFwaC0yIj4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiZsdDsgNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5BPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImN1cnJlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+NiDDoCAxMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5CPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0iY3VycmVudF9fYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4xMSDDoCAyMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5DPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+MjEgw6AgMzU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+RDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjM2IMOgIDU1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj41NiDDoCA4MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5GPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Jmd0OyA4MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5HPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8cCBjbGFzcz0idGl0bGVfX3NlY29uZCI+Rm9ydGUgw6ltaXNzaW9uIGRlIEdFUzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2NvbnRlbnQgb2ZmZXJfX3BlcnNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iaDMiPkplIHN1aXMgaW50w6lyZXNzw6koZSkgcGFyIGNlIGJpZW48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCjxmb3JtIG5hbWU9ImNvbnRhY3QiIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS1waWVjZS1wYXJpcy0xNG0yL3I3OTkzNTI/X2xvY2FsZT1mciIgY2xhc3M9ImZvcm1fX29mZmVyIiBkYXRhLXBhcnNsZXktdmFsaWRhdGU9InRydWUiPgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLXRpdGxlPSJOwrA3OTkzNTIiPgogICAgICAgICAgICA8YSBocmVmPSIjIj5Nb3RpZjwvYT4KICAgICAgICAgICAgPHVsIGlkPSJtb3RpZl9hZ2VudCIgZGF0YS10eXBlPSJjb250YWN0W21vdGlmcHRdIiBkYXRhLW5hbWU9Im1vdGlmIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxIiBjbGFzcz0ic2VsZWN0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICBKZSBzdWlzIGludMOpcsOpc3PDqShlKSBwYXIgdW4gYmllbgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlcmFpcyBhdm9pciBwbHVzIGQmIzAzOTtpbmZvcm1hdGlvbnMKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMyIgPgogICAgICAgICAgICAgICAgICAgICAgICBKZSBzb3VoYWl0ZXJhaXMgdmlzaXRlciBjZSBiaWVuCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjQiID4KICAgICAgICAgICAgICAgICAgICAgICAgSmUgc291aGFpdGVyYWlzIG1lIHJlbnNlaWduZXIgc3VyIGxlcyBiaWVucyBhdXggYWxlbnRvdXJzCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RbbW90aWZwdF0iLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJjb250YWN0X2xhc3RfbmFtZSIgbmFtZT0iY29udGFjdFtsYXN0X25hbWVdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJOb20gKiIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9maXJzdF9uYW1lIiBuYW1lPSJjb250YWN0W2ZpcnN0X25hbWVdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJQcsOpbm9tICoiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgaWQ9ImNvbnRhY3RfZW1haWwiIG5hbWU9ImNvbnRhY3RbZW1haWxdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJFbWFpbCAqIiBwYXR0ZXJuPSIuKkAuKihcLlthLXpBLVowLTkuLV0rKSskIiBkYXRhLXBhcnNsZXktdHlwZT0iZW1haWwiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCTxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9waG9uZSIgbmFtZT0iY29udGFjdFtwaG9uZV0iIHBsYWNlaG9sZGVyPSJUw6lsw6lwaG9uZSIgbWluTGVuZ3RoPSI2IiBwYXR0ZXJuPSJcZCoiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgIDx0ZXh0YXJlYSBpZD0iY29udGFjdF9tZXNzYWdlIiBuYW1lPSJjb250YWN0W21lc3NhZ2VdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJNZXNzYWdlIj48L3RleHRhcmVhPgogICAgPC9kaXY+CgkKPC9kaXY+CjxkaXYgaWQ9ImNhcHRjaGEiIGNsYXNzPSJnLXJlY2FwdGNoYSIgZGF0YS1zaXRla2V5PSI2TGNIVURNVUFBQUFBRkJYeDk1LVFEWWszNXhmc3hXMmpYLXZ4Y1N4Ij48L2Rpdj4KPGRpdiBjbGFzcz0iZm9ybV9fZm9vdGVyIj4KICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX193aGl0ZSBidXR0b25fX21lZGl1bSI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgIDxzcGFuPkNvbnRhY3RlciB2b3RyZSBjb25zZWlsbGVyPC9zcGFuPgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPgogICAgPC9idXR0b24+CjwvZGl2Pgo8L2Zvcm0+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8YXNpZGUgY2xhc3M9InNpZGViYXIgY29sLTQiIGlkPSJzaWRlYmFyIiByb2xlPSJjb21wbGVtZW50YXJ5IiBpdGVtc2NvcGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1dQU2lkZUJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImwtZm9ybV9fcGVyc29uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBlcnNvbl9faW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9ERUxQSElORS5HVUlMTE9DSEVBVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImFkQWdlbnRDb250YWN0Rm9ybSIgY2xhc3M9InBlcnNvbl9faGVhZGVyIGMtb2ZmZXJfX3Byb2ZpbF9pbWdfYWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzI4NDA3NTQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkRlbHBoaW5lIEdVSUxMT0NIRUFVIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwZXJzb25fX2JvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVscGhpbmUgR1VJTExPQ0hFQVUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9iYXJlbWUuaWFkZnJhbmNlLmZyL2RldGFpbC8yNDI2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0bi1iYXJlbWUtZGVza3RvcCBidG4tYmFyZW1lLWFkIiBzdHlsZT0iY29sb3I6ICNmZmYiIHRhcmdldD0iX2JsYW5rIj5CYXLDqG1lIGQnaG9ub3JhaXJlczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9icj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgc3JjPSIvL3dpZGdldC5pbW1vZHZpc29yLmNvbS9qcy93aWRnZXQuanMiPjwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iLy93aWRnZXQuaW1tb2R2aXNvci5jb20iIGlkPSJpbW1vZHZpc29yLXdpZGdldCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaW0tYXBpa2V5PSI3TzJYLTNISVgtTko0OUQ2LVpTVFNYLU0xWjhUIiBkYXRhLWltLXRoZW1lPSJibHVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pbS1yZXZpZXdzPSJmYWxzZSIgZGF0YS1pbS13aWR0aD0iMTI1IiBkYXRhLWltLWhlaWdodD0iMjQ1Ij48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iY2FsbF90cmFja2luZyBidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29udGFjdCBidXR0b25fX3NlY29uZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsPSIvYWdlbnRDYWxsRXZlbnQvMTUzMDQvNzk5MzUyP3BhZ2U9YW5ub25jZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNtb2RhbC1zaG93LW51bWJlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLW1vYmlsZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJjYWxsX3RyYWNraW5nX3RleHQiPkFmZmljaGVyIGxlIG51bcOpcm88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8Zm9ybSBuYW1lPSJjb250YWN0X2FnZW50IiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtcGllY2UtcGFyaXMtMTRtMi9yNzk5MzUyP19sb2NhbGU9ZnIiIGNsYXNzPSJmb3JtX19wZXJzb24iIGRhdGEtcGFyc2xleS12YWxpZGF0ZT0idHJ1ZSI+CjxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLW5hbWU9Ik1vdGlmIiBkYXRhLXRpdGxlPSJOwrA3OTkzNTIiPgogICAgPGEgaHJlZj0iIyI+TW90aWY8L2E+CiAgICA8dWwgZGF0YS10eXBlPSJjb250YWN0X2FnZW50W21vdGlmcHRdIiBkYXRhLW5hbWU9Im1vdGlmIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEiPgogICAgICAgICAgICAgICAgSmUgc3VpcyBpbnTDqXLDqXNzw6koZSkgcGFyIHVuIGJpZW4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMiI+CiAgICAgICAgICAgICAgICBKZSBzb3VoYWl0ZXJhaXMgYXZvaXIgcGx1cyBkJiMwMzk7aW5mb3JtYXRpb25zCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjMiPgogICAgICAgICAgICAgICAgSmUgc291aGFpdGVyYWlzIHZpc2l0ZXIgY2UgYmllbgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI0Ij4KICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlcmFpcyBtZSByZW5zZWlnbmVyIHN1ciBsZXMgYmllbnMgYXV4IGFsZW50b3VycwogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY29udGFjdF9hZ2VudFttb3RpZnB0XSIvPgo8L2Rpdj4KPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9hZ2VudF9maXJzdF9uYW1lIiBuYW1lPSJjb250YWN0X2FnZW50W2ZpcnN0X25hbWVdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJQcsOpbm9tICoiIC8+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9hZ2VudF9sYXN0X25hbWUiIG5hbWU9ImNvbnRhY3RfYWdlbnRbbGFzdF9uYW1lXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iTm9tICoiIC8+CiAgICA8L2Rpdj4KPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgPGlucHV0IHR5cGU9ImVtYWlsIiBpZD0iY29udGFjdF9hZ2VudF9lbWFpbCIgbmFtZT0iY29udGFjdF9hZ2VudFtlbWFpbF0iIHJlcXVpcmVkPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9IkVtYWlsICoiIHBhdHRlcm49Ii4qQC4qKFwuW2EtekEtWjAtOS4tXSspKyQiIGRhdGEtcGFyc2xleS10eXBlPSJlbWFpbCIgLz4KPC9kaXY+CjxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9hZ2VudF9waG9uZSIgbmFtZT0iY29udGFjdF9hZ2VudFtwaG9uZV0iIHBsYWNlaG9sZGVyPSJUw6lsw6lwaG9uZSIgbWluTGVuZ3RoPSI2IiBwYXR0ZXJuPSJcZCoiIC8+CjwvZGl2PgoKPHRleHRhcmVhIGlkPSJjb250YWN0X2FnZW50X21lc3NhZ2UiIG5hbWU9ImNvbnRhY3RfYWdlbnRbbWVzc2FnZV0iIHJlcXVpcmVkPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9Ik1lc3NhZ2UiPjwvdGV4dGFyZWE+CjxkaXYgY2xhc3M9ImZvcm1fX2lucHV0IHJvdyAiPgo8aW5wdXQgY2xhc3M9ImNvbC0xIiB0eXBlPSJjaGVja2JveCIgc3R5bGU9InRvcDoycHg7bGVmdDo4cHgiIG5hbWU9InJlZ2lzdGVyX25ld3NsZXR0ZXIiIGlkPSJyZWdpc3Rlcl9uZXdzbGV0dGVyIi8+CjxsYWJlbCBjbGFzcz0iY29sLTEwIGFjY2VwdF9uZXdzbGV0dGVyIiBzdHlsZT0iY29sb3I6d2hpdGU7Zm9udC1zaXplOjEycHgiIGZvcj0icmVnaXN0ZXJfbmV3c2xldHRlciI+CiAgICBKZSBzb3VoYWl0ZSByZWNldm9pciBwYXIgbmV3c2xldHRlciBkZXMgYW5ub25jZXMgc3VzY2VwdGlibGVzIGRlIG3igJlpbnTDqXJlc3NlciBldCBkZXMgY29uc2VpbHMgw6AgbOKAmWFjaGF0IGRlIGxhIHBhcnQgZOKAmWlhZC4KPC9sYWJlbD4KPC9kaXY+CjxkaXYgaWQ9ImFzaWRlLWNhcHRjaGEiIGNsYXNzPSJnLXJlY2FwdGNoYSIgZGF0YS1zaXRla2V5PSI2TGNIVURNVUFBQUFBRkJYeDk1LVFEWWszNXhmc3hXMmpYLXZ4Y1N4Ij48L2Rpdj4KCjxkaXYgY2xhc3M9ImZvcm1fX2Zvb3RlciI+CiAgICA8YnV0dG9uIGlkPSJidG4tYWNoYXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fd2hpdGUgYnV0dG9uX19tZWRpdW0iPgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICA8c3Bhbj5NZSBjb250YWN0ZXI8L3NwYW4+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+CiAgICA8L2J1dHRvbj4KPC9kaXY+CjwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9ERUxQSElORS5HVUlMTE9DSEVBVSI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtMiI+PC9pPiBNZXMgYW5ub25jZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJsdWUtZ3JhZGllbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm91bmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWNhbGN1bGF0b3IiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYWxjdWxhdGV1ciBkZSBtZW5zdWFsaXTDqSBkZSBiaWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgaWQ9ImNhbGN1bGF0b3ItaWZyYW1lIiBzcmM9Imh0dHBzOi8vd3d3LmV1cm9wZWFuLXNvZnQuY29tL3NlcnZpY2VzLXdlYi9jYXBhY2l0ZS1hY2hhdC5waHA/aWRfc2l0ZT01MCZ0ZXh0ZT1vdWkmaW1wcmltZXI9b3VpJmNzcz1odHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY3NzL2NhbGN1bGF0b3ItZDVmMjAxNjdjNS5taW4uY3NzP3YxLjIwLjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lYm9yZGVyPSIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaWZyYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNpZGU+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgPC9kaXY+CgoKICAgICAgICA8ZGl2IGlkPSJtb2RhbC1zaG93LW51bWJlciIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxwPjA2ODcwMzY4NDk8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiIHN0eWxlPSJiYWNrZ3JvdW5kOiBub25lO2NvbG9yOiBibGFjazsiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj5Bbm51bGVyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgb25jbGljaz0ibG9jYXRpb24uaHJlZj0ndGVsOjA2ODcwMzY4NDknOyIgdmFsdWU9IkFwcGVsZXIiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAKICAgICAgICA8L3NlY3Rpb24+CjwvbWFpbj4KCiAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIiIGlkPSJmb290ZXIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvV1BGb290ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBvdGhlcl9fbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpcnN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlL2Fubm9uY2VzL2V4Y2x1c2l2aXRlL2xpc3RlL2Fubm9uY2UtcmVzdWx0YXQ/ZXhjbHVzaXZlPTEiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgTGVzIGV4Y2x1c2l2aXTDqXMgaWFkCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lc3RpbWVyLXZvdHJlLWJpZW4iICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgRXN0aW1leiB2b3RyZSBiaWVuCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci90cm91dmVyLXVuLWNvbnNlaWxsZXIiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgVHJvdXZleiB1biBjb25zZWlsbGVyCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbWFjb25jaWVyZ2VyaWUtaWFkLmZyLyIgICAgIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iIj4KICAgICAgICAgICAgQ29uY2llcmdlcmllIGlhZAoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQvY291cC1kZS1jb2V1ci9saXN0ZS9hbm5vbmNlcyIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBOb3MgY291cHMgZGUgY29ldXIKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaXRlbS1oaWdobGlnaHRlZCBsYXN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlL2Fubm9uY2VzL2ltbW9iaWxpZXItcHJlc3RpZ2UvbGlzdGUtcmVzdWx0YXQ/cmFkaXVzPTIwJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDt0YWdzJTVCMCU1RD1wcmVzdGlnZSIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBBY2hhdCBkZSBwcmVzdGlnZQoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNvY2lhbCI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlX19sYXJnZS0xIj5TdWl2ZXogbm91cyA6PC9wPgogICAgICAgICAgICAgICAgICAgIDx1bCBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT3JnYW5pemF0aW9uIj4KCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0lBREZyYW5jZSIgaXRlbXByb3A9InNhbWVBcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmItcm9uZCI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9JQURGcmFuY2UiIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaW1tb2JpbGllci1kb21pY2lsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxpbmtlZGluLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvSUFERnJhbmNlIiBpdGVtcHJvcD0ic2FtZUFzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi15b3V0dWJlLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaWFkZnJhbmNlb2ZmaWNpZWwvIiBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkZW1vLWljb24gaWNvbi1pbnN0YWdyYW0tcm9uZCI+PC9pPjwvYT48L2xpPgoJCQkgICAgICAgIAkJCQkJCQkKICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCQkJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBwYXJ0bmVycyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPmlhZCBlc3QgbWVtYnJlIDogPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9VbmlzX0xvZ290eXBlX3NvbG9fQ291bGV1ci5wbmc/djEuMjAuMSIgd2lkdGg9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IiIgYWx0PSJVbmlzIj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51X190aGlyZCI+CiAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJmaXJzdCI+PGEgaHJlZj0iLyI+QWNjdWVpbDwvYT48L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pYWRpbnRlcm5hdGlvbmFsLmNvbS9mciIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJMZSBncm91cGUgaWFkIj4KICAgICAgICAgICAgICAgICAgIExlIGdyb3VwZSBpYWQgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvcXVpLXNvbW1lcy1ub3VzIj5RdWkgc29tbWVzLW5vdXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9lc3BhY2UtcHJlc3NlIj5Fc3BhY2UgUHJlc3NlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvbWVudGlvbnMtbGVnYWxlcyI+TWVudGlvbnMgbMOpZ2FsZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9Qb2xpdGlxdWUtZGUtY29uZmlkZW50aWFsaXRlIj5Qb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL21lZGlhdGlvbiI+TcOpZGlhdGlvbjwvYT48L2xpPgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY29udGFjdGV6LW5vdXMiPk5vdXMgY29udGFjdGVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly9iYXJlbWUuaWFkZnJhbmNlLmZyLyIgdGFyZ2V0PSJfYmxhbmsiPkJhcsOobWUgZCdob25vcmFpcmVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9pbWdzLzk5NjA3MTE0N2FjMWI4YjEzNWM2ODc1NGI3OWZkMTVkLnBkZj92MS4yMC4xIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmFyw6htZSBFJmFtcDtDCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZm9vdGVyPgoKICAgICAgICAgICAgPCEtLSBNb2RhbCAtLT4KICAgIDxkaXYgY2xhc3M9Im1vZGFsRGlhbG9nIG1vZGFsIGZhZGUiIGlkPSJtZXNzYWdlLW1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVzc2FnZSBtZXNzYWdlLWNvbnRlbnQiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJub19yZXN1bHQiIGNsYXNzPSJtb2RhbERpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIGZ1bGwtd2lkdGgiIGlkPSJhbGVydC1uby1yZXN1bHQtbW9kYWwiPgogICAgICAgIDxzcGFuIGNsYXNzPSJjbG9zZS1tb2RhbCB0ZXh0LXJpbmciIGlkPSJjbG9zZS1hbGVydC1uby1yZXN1bHQiPng8L3NwYW4+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0X3JpbmciPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yaW5nIj48L2k+IENyw6llciB1bmUgYWxlcnRlIHBvdXIgY2V0dGUgcmVjaGVyY2hlIDwvZGl2PgogICAgICAgICAgICA8cD48c3Ryb25nPkF1Y3VuZSBhbm5vbmNlIG5lIGNvcnJlc3BvbmQgw6Agdm90cmUgcmVjaGVyY2hlPzwvc3Ryb25nPjwvcD4KICAgICAgICAgICAgPHA+TW9kaWZpZXogdm9zIGNyaXTDqHJlcyBvdSBsYWlzc2V6IHZvdXMgZ3VpZGVyIHBhciBub3Mgc3VnZ2VzdGlvbnMuPC9wPgogICAgICAgICAgICA8cD48c3Ryb25nPlJhcHBlbCBkZSB2b3MgY3JpdMOocmVzIDo8L3N0cm9uZz48L3A+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNyaXRlcmlhcyI+CgkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgICAgICAgICAgPGZvcm0gaWQ9ImFsZXJ0Tm9SZXN1bHRGb3JtIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIHBsYWNlaG9sZGVyPSJFbWFpbCIgY2xhc3M9InRleHQtZGFuZ2VyIGZvcm0tY29udHJvbCBpbm5lci1idXR0b24iIGlkPSJhbGVydC1lbWFpbCI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJ0ZXh0LXJpbmcgbm8tYm9yZGVyIiBpZD0iYWxlcnQtZW1haWwtYnV0dG9uIiBocmVmPSIvcHJvZmlsZS9hbGVydC9hZGQiPk9LPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+ICAgIDxkaXYgaWQ9ImJ1c2luZXNzQ2FyZE1vZGFsIiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCBidXNpbmVzc0NhcmRDb250ZW50Ij48L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDxkaXYgaWQ9ImNvbnRhY3RBZ2VudE1vZGFsIiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+PC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8ZGl2IGlkPSJsb2dpbiIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9ImMtbW9kYWwgdGFiLWNvbm5lY3QiPgogICAgICAgIDx1bCBjbGFzcz0idGFicyI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0idGFiLWxpbmsgY3VycmVudCIgZGF0YS10YWI9ImxvZ2luLXRhYiI+U2UgY29ubmVjdGVyPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJ0YWItbGluayIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+Q3LDqWVyIHVuIGNvbXB0ZTwvbGk+CiAgICAgICAgPC91bD4KCiAgICAgICAgPGRpdiBpZD0ibG9naW4tdGFiIiBjbGFzcz0idGFiLWNvbnRlbnQgY3VycmVudCI+CiAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii9sb2dpbl9jaGVjayIKICAgICAgICAgIG5hbWU9ImNvbm5leGlvbiIgbWV0aG9kPSJwb3N0IiBjbGFzcz0iZm9ybV9fY29ubmV4aW9uIj4KICAgICAgICA8IS0tcCBjbGFzcz0idGl0bGUiPkNvbm5lY3Rlei12b3VzIGF2ZWMgbGVzIHLDqXNlYXV4IHNvY2lhdXg8L3A+CiAgICAgICAgPGRpdiBjbGFzcz0ibC1zb2NpYWwiPgogICAgICAgICAgICA8YSBocmVmPSIvY29ubmVjdC9mYWNlYm9vayIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJmYiI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmItcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L3R3aXR0ZXIiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0idHciPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L2dvb2dsZSIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ5dCI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZ29vZ2xlLXBsdXMtcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L2xpbmtlZGluIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImxrZCI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGlua2VkaW4tcm9uZCI+PC9pPgo8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIj4KICAgICAgICAgICAgPHA+T3U8L3A+CiAgICAgICAgPC9kaXYtLT4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfY3NyZl90b2tlbiIgdmFsdWU9IngxYWd5TWV1Tzc2SnlkRkROMFRHX0tiS01fOUlyNks5bExNT1YwNm51c0kiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IkVtYWlsIiBuYW1lPSJfdXNlcm5hbWUiPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgPGlucHV0IG5hbWU9Il9wYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiIHBsYWNlaG9sZGVyPSJNb3QgZGUgcGFzc2UiIGlkPSJwYXNzd29yZCI+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5mb3JtYXRpb25zIHJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InJlbWVtYmVyIiBuYW1lPSJfcmVtZW1iZXJfbWUiIHZhbHVlPSJvbiI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyZW1lbWJlciI+U2Ugc291dmVuaXIgZGUgbW9pPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNwYXNzX2ZvcmdldF9kaXYiIGNsYXNzPSJmb3JtX19mb3JnZXQiCiAgICAgICAgICAgICAgICAgICBpZD0iY29ubmVjdF9mb3JnZXRfcGFzc3dvcmQiPgogICAgICAgICAgICAgICAgICAgIE1vdCBkZSBwYXNzZSBwZXJkdSA/ICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fZm9vdGVyIj4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJzdWJtaXRfY29ubmVjdGlvbiIgbmFtZT0iX3N1Ym1pdCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICAgICAgICAgIENvbm5leGlvbiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgPC9mb3JtPgoKCiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgaWQ9InJlZ2lzdGVyLXRhYiIgY2xhc3M9InRhYi1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iL3JlZ2lzdGVyLyIKICAgICAgICAgIG5hbWU9InJlZ2lzdHJhdGlvbiIgbWV0aG9kPSJwb3N0IiBjbGFzcz0iZm9ybV9fcmVnaXN0ZXIiPgoJCSAgCiAgICAgICAgPHAgY2xhc3M9InRpdGxlX19tYWluIj4KCQkJCUNyw6lleiB2b3RyZSBjb21wdGUgcG91ciBiw6luw6lmaWNpZXIgZOKAmXVuIHN1aXZpIHBlcnNvbm5hbGlzw6kJCQkJPC9wPgogICAgICAgIDwhLS1wIGNsYXNzPSJ0aXRsZSI+Q29ubmVjdGV6LXZvdXMgYXZlYyBsZXMgcsOpc2VhdXggc29jaWF1eDwvcD4KICAgICAgICA8ZGl2IGNsYXNzPSJsLXNvY2lhbCI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25uZWN0L2ZhY2Vib29rIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImZiIj4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mYi1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvdHdpdHRlciIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ0dyI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdHdpdHRlci1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvZ29vZ2xlIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9Inl0Ij4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1nb29nbGUtcGx1cy1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvbGlua2VkaW4iIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0ibGtkIj4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1saW5rZWRpbi1yb25kIj48L2k+CjwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3IiPgogICAgICAgICAgICA8cD5PdTwvcD4KICAgICAgICA8L2Rpdi0tPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIGlkPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybV9lbWFpbCIgbmFtZT0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1bZW1haWxdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJTYWlzaXNzZXogdW5lIGFkcmVzc2UgZS1tYWlsIiBwYXR0ZXJuPSIuKkAuKihcLlthLXpBLVowLTkuLV0rKSskIiAvPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0IHJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX3BsYWluUGFzc3dvcmRfZmlyc3QiIG5hbWU9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtW3BsYWluUGFzc3dvcmRdW2ZpcnN0XSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iQ3LDqWV6IHVuIG1vdCBkZSBwYXNzZSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX3BsYWluUGFzc3dvcmRfc2Vjb25kIiBuYW1lPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybVtwbGFpblBhc3N3b3JkXVtzZWNvbmRdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJWYWxpZGV6IGxlIG1vdCBkZSBwYXNzZSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8ZGl2IGlkPSJyZWNhcHRjaGFSZWdpc3RlciI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1fY2d1IiBuYW1lPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybVtjZ3VdIiByZXF1aXJlZD0icmVxdWlyZWQiIHZhbHVlPSIxIiAvPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX2NndSI+CgkJCQkJICAgICAJCQkJCQlK4oCZYWNjZXB0ZSBsZXMgY29uZGl0aW9ucyBnw6luw6lyYWxlcyBk4oCZdXRpbGlzYXRpb24gZGUgaWFkPGJyPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3ViLXR4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIEVuIHZvdXMgZW5yZWdpc3RyYW50LCB2b3VzIGNvbnNlbnRleiDDoCBs4oCZaMOpYmVyZ2VtZW50IGV0IGF1IHRyYWl0ZW1lbnQgZGUgdm9zIGRvbm7DqWVzIMOgIGNhcmFjdMOocmUgcGVyc29ubmVsIHBhciBJQEQgRnJhbmNlIGRhbnMgbGVzIGNvbmRpdGlvbnMgZMOpY3JpdGVzIGRhbnMgbGEgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9mci9Qb2xpdGlxdWUtZGUtY29uZmlkZW50aWFsaXRlIj5Qb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqS48L2E+ICAoIE9ibGlnYXRvaXJlICkKICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InJlZ2lzdGVyX25ld3NsZXR0ZXJSIiBpZD0icmVnaXN0ZXJfbmV3c2xldHRlclIiLz4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyZWdpc3Rlcl9uZXdzbGV0dGVyUiI+CiAgICAgICAgICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlIHJlY2V2b2lyIHBhciBuZXdzbGV0dGVyIGRlcyBhbm5vbmNlcyBzdXNjZXB0aWJsZXMgZGUgbeKAmWludMOpcmVzc2VyIGV0IGRlcyBjb25zZWlscyDDoCBs4oCZYWNoYXQgZGUgbGEgcGFydCBk4oCZaWFkCiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJwcm9tbyIgbmFtZT0icHJvbW9QIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwcm9tbyI+CgkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIErigJlhY2NlcHRlIGRlIHJlY2V2b2lyIGRlcyBwcm9tb3MgZGVzIHBhcnRlbmFpcmVzIGRlIGlhZAkJCQkJCSAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Zvb3RlciI+CiAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIj5TJ2luc2NyaXJlPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX190b2tlbiIgbmFtZT0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1bX3Rva2VuXSIgdmFsdWU9ImdDd0Y2RUU2eVE0a3RGd0txbTBSbk5HR1RXcUN2aWdGbDVOZmxtLWJId0EiIC8+CiAgICA8L2Zvcm0+CgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBpZD0icGFzc19mb3JnZXRfZGl2IiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+PHNwYW4gY2xhc3M9ImN1c3RvbS1pY29uIG1vZGFsLWNsb3NlLWljb24iIGRhdGEtZGlzbWlzcz0ibW9kYWwiPjwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIGNsZWFyZml4Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlX19tYWluIj5Nb3QgZGUgcGFzc2Ugb3VibGnDqTwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0idGV4dCI+CiAgICAgICAgICAgICAgICA8cD5FbnRyZXogdm90cmUgYWRyZXNzZSBFbWFpbCBldCBub3VzIHZvdXMgZW52ZXJyb25zIGxhIG1hcmNoZSDDoCBzdWl2cmU8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii9yZXNldHRpbmcvc2VuZC1lbWFpbCIgbmFtZT0iY29ubmV4aW9uIiBtZXRob2Q9InBvc3QiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtX19wYXNzX2ZvcmdldCIgb25zdWJtaXQ9InN1Ym1taXRlZCgpIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Vycm9yIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIHBsYWNlaG9sZGVyPSJFbWFpbCIgaWQ9IiIgbmFtZT0idXNlcm5hbWUiIHJlcXVpcmVkPSJyZXF1aXJlZCI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Zvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJzdWJtaXRfcGFzc19mb3JnZXQiIG5hbWU9IiIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEVudm95ZXIgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdD4KICAgIGZ1bmN0aW9uIHN1Ym1taXRlZCgpIHsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGV4dCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICB9Cjwvc2NyaXB0PiAgICA8ZGl2IGlkPSJuZXdBbGVydE1vZGFsIiBjbGFzcz0ibW9kYWxEaWFsb2ciCiAgICAgZGF0YS1tZXNzYWdlPSJWb3VzIGRldmV6IHJlbnNlaWduZXIgYXUgbW9pbnMgdW4gbGlldSBwb3VyIHBvdXZvaXIgZW5yZWdpc3RyZXIgdW5lIGFsZXJ0ZSI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIGZ1bGwtd2lkdGgiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZV9fbWFpbiI+QWxlcnRlIEUtbWFpbDwvZGl2PgogICAgICAgICAgICA8cD5VbmUgYWxlcnRlIGUtbWFpbCBzZXJhIGNyw6nDqWUgw6AgcGFydGlyIGRlcyBjcml0w6hyZXMgZGUgdm90cmUgcmVjaGVyY2hlLjwvcD4KICAgICAgICAgICAgPHA+VmV1aWxsZXogY2hvaXNpciBsYSA8c3Ryb25nPmZyZXF1ZW5jZSBkZSBsJ2FsZXJ0ZTwvc3Ryb25nPiA6PC9wPgogICAgICAgICAgICA8Zm9ybSBpZD0idXNlckFsZXJ0Rm9ybSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPkZyw6lxdWVuY2UgZGUgbCdhbGVydGU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImZyZXF1ZW5jeSIgaWQ9ImFsZXJ0LXNlYXJjaC1uYXYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWxlY3RlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJKb3VybmFsacOocmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpvdXJuYWxpw6hyZSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IkhlYmRvbWFkYWlyZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGViZG9tYWRhaXJlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iTWVuc3VlbGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZW5zdWVsbGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiIgc3R5bGU9InBhZGRpbmctYm90dG9tOiAyMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fYWxlcnQgYnV0dG9uX19tZWRpdW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhZGQtYWxlcnQiIGhyZWY9Ii9wcm9maWxlL2FsZXJ0L2FkZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXJpbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DcsOpZXIgbCdhbGVydGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CiAgICA8IS0tIGVuZCBNb2RhbCAtLT4KICAgICAgICAgICAgICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIG1vZGFsRGlhbG9nIiBpZD0ic2VuZFRvRnJpZW5kTW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+PC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAKCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgdmFyIGdsb2JhbF9jdXJyZW50X2NvdW50cnkgPSAnZnInOwogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvYXBwLTY4NzgzMzc4NzcubWluLmpzP3YxLjIwLjEiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcz9vbmxvYWQ9b25sb2FkQ2FsbGJhY2smcmVuZGVyPWV4cGxpY2l0JmhsPWZyIgogICAgICAgICAgICBhc3luYyBkZWZlcj48L3NjcmlwdD4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIgogICAgICAgICAgaHJlZj0iLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvY29va2llY29uc2VudDIvMy4wLjMvY29va2llY29uc2VudC5taW4uY3NzIi8+CiAgICA8c2NyaXB0IHNyYz0iLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvY29va2llY29uc2VudDIvMy4wLjMvY29va2llY29uc2VudC5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJyZXF1aWVyZWRNZXNzYWdlIiB2YWx1ZT0iQ2UgY2hhbXAgZXN0IHJlcXVpcyI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iaW52YWxpZE1lc3NhZ2UiIHZhbHVlPSJWb3RyZSBhZHJlc3NlIGUtbWFpbCBlc3QgaW52YWxpZGUiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9InJlcXVpZXJlZE1lc3NhZ2VDQiIKICAgICAgICAgICB2YWx1ZT0iVmV1aWxsZXogY29jaGVyIGNldHRlIGNhc2Ugc2kgdm91cyBzb3VoYWl0ZXogY29udGludWVyIj4KCiAgICAgICAgPGRpdiBpZD0iaWFkLXBvcC11cC1jb3ZpZDE5IiBjbGFzcz0iaWFkLXBvcC11cC1jb3ZpZDE5IGlhZC1wb3AtdXAtY292aWQxOS1kbiIgZGF0YS1jb3VudHJ5PSJmciIgZGF0YS1sb2NhbGU9ImZyIj4KICAgIDxkaXYgY2xhc3M9ImlhZC1wb3AtdXAtY292aWQxOS1jb250YWluZXIgaWFkLXBvcC11cC1jb3ZpZDE5LWNvbnRhaW5lci1kZXNrdG9wIj4KICAgICAgICA8aW1nIGlkPSJpYWQtcG9wLXVwLWNvdmlkMTktaW1nIiBzcmM9Ii9wb3B1cC1jb3ZpZDE5L2ltZy9mci0tZGVza3RvcC1wb3B1cDJfZnIucG5nP3YxLjIwLjEiIGFsdD0iY292aWQxOSI+CiAgICAgICAgPGRpdiBpZD0iaWFkLXBvcC11cC1jb3ZpZDE5LWNsb3NlIj48c3Bhbj5GRVJNRVI8L3NwYW4+PGkgY2xhc3M9ImZhcyBmYS10aW1lcyI+PC9pPjwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3BvcHVwLWNvdmlkMTkvanMvc2NyaXB0LmpzP3YxLjIwLjEiPjwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K
  recorded_at: Thu, 09 Jul 2020 13:09:27 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-3-pieces-paris-52m2/r799741?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:28 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=34f51736dc917600dd86f90dc3dfffeb; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:28 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:28 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:28 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:28 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-piece-paris-40m2/r799279?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:29 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=4dffc3fc6a6860576ae1ff4e51be9706; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:29 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:29 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:29 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:29 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-28m2/r798538?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:36 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=ee8d37b2cabe9b332259d26e878c9755; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:36 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:36 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:36 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:36 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-5-pieces-paris-140m2/r797326?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:38 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=619a5c6a6c3e1263897ea44d4883af75; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:38 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:38 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:38 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:38 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-36m2/r783605?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:40 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=b3bef5c7a8561e923f31ee14b1fca8d6; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:40 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:40 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:40 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:40 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-piece-paris-28m2/r786986?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:41 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=f61eed090ae1dfe2820b3cb81974102a; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:41 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:41 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:41 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:41 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-37m2/r798593?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:44 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=ad4514f7a50c0d19f69013118cdf4fab; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:44 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:44 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:44 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:44 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-57m2/r799063?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:45 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=803a7c3db70a7cbe24a5c7a0b711fb51; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:45 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:45 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:45 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:46 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-29m2/r779319?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:47 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=f28ec151c82be1496ad908ff1b8a6f3f; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:47 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:47 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:47 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:47 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-3-pieces-paris-48m2/r772478?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:49 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=44e2158a9f477ae9acc4809698918874; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:49 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:49 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:49 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:49 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/maison-villa-vente-5-pieces-paris-110m2/r799192?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:52 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=28a8b8b277a8c8cd2dddf42b19511bd9; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:52 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:52 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:52 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:52 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-3-pieces-paris-72m2/r798933?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.12.2
      Date:
      - Thu, 09 Jul 2020 13:09:54 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=80d786d46c9cac96fcf5676782afc057; path=/; HttpOnly
      - country=fr; expires=Fri, 09-Jul-2021 13:09:54 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Fri, 09-Jul-2021 13:09:54 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - public, s-maxage=600
      Pragma:
      - no-cache
      Expires:
      - Thu, 09 Jul 2020 13:19:54 GMT
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 09 Jul 2020 13:09:54 GMT
recorded_with: VCR 6.0.0
