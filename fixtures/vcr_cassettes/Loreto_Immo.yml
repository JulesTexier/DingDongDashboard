---
http_interactions:
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-studio-maison-appartement-hotel-particulier-loft-atelier-paris/tri=id&ordre=DESC
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:28:54 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=e956vahvehf9su8a9g3vqs6pb4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:28:54 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2568/vente-appartement-3-pieces-1-chambre-paris-75004/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:28:54 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=g7lmbcl798h82f3r4gqgt2beh7; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:28:54 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2341/vente-appartement-5-pieces-2-chambres-paris-75008/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:28:55 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=9ibu52fa5s62j4ou11ii31v3i1; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:28:55 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2215/vente-appartement-3-pieces-2-chambres-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:28:56 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=ckn31res48inj1b3ne0pbbt086; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:28:56 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2560/vente-appartement-3-pieces-2-chambres-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:28:56 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=ofr0m90ht0veskrlm029jeom53; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:28:56 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2402/vente-appartement-3-pieces-2-chambres-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:28:57 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=eperg06tq0lj8nrhpms9v6guh1; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:28:57 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2446/vente-appartement-3-pieces-2-chambres-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:28:58 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=4kkf5a1s8reau1iigjdfa0fil1; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:28:58 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2530/vente-appartement-2-pieces-1-chambre-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:28:59 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=algt0age06hd0jr4p11t7403p4; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4KPGhlYWQ+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiLz4KCiAgICA8dGl0bGU+VmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgNiAoNzUwMDYpIE1PTk5BSUUgT0RFT04gLSBMb3JldG8gSW1tb2JpbGllcjwvdGl0bGU+CgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkTDqXRhaWxzIGRlIGwnYW5ub25jZSBpbW1vYmlsacOocmUgdmVudGUgYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIFBBUklTIDc1MDA2IDEgY2hhbWJyZSA0NC4yNiBtwrIgUHJpeCA2NzAgMDAwIOKCrCBSw6lmw6lyZW5jZSBHQzkzLTI1MzAiLz4KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJBZ2VuY2UgaW1tb2JpbGnDqHJlIGRlIHByZXN0aWdlLHZlbnRlLGxvY2F0aW9uLGFwcGFydGVtZW50IGRlIHN0YW5kaW5nLGFwcGFydGVtZW50IGF0eXBpcXVlLGhvdGVsIHBhcnRpY3VsaWVyLGxvZnQsYXRlbGllcixwYXJpcyByaXZlIGdhdWNoZSxwYXJpcyBjZW50cmUgTG9yZXRvIGltbW9iaWxpZXIgNzUwMDYgUGFyaXMgaW1tb2JpbGllcnMsYmllbiBpbW1vYmlsaWVyLGFjaGV0ZXIsYWNoYXQsYXBwYXJ0ZW1lbnQsdmVuZHJlLGxvdWVyIiAvPgogICAgPG1ldGEgbmFtZT0icmV2aXNpdC1hZnRlciIgY29udGVudD0iMTAgZGF5cyIgLz4KICAgIDxtZXRhIG5hbWUgPSJmb3JtYXQtZGV0ZWN0aW9uIiBjb250ZW50ID0gInRlbGVwaG9uZT1ubyIgLz4KICAgIDxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLWNhcGFibGUiIGNvbnRlbnQ9InllcyIvPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtdGl0bGUiIGNvbnRlbnQ9IkxvcmV0byBJbW1vYmlsaWVyIi8+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoIi8+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+CgogICAgCgogICAgPCEtLTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9qcy9qcXVlcnktMi4xLjEubWluLmpzIj48L3NjcmlwdD4tLT4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9qcy9qcXVlcnkuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL1NjYWxlSW1hZ2UubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9qcy9qcXVlcnkuY3ljbGUyLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVEQjE2MDIubG9yZXRvaW0vanMvanF1ZXJ5Lm11bHRpcGxlLnNlbGVjdC5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9tc2Ryb3AubWluLmNzcyIgLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9yZXNldC5taW4uY3NzIiAvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL3Bob3Rvc3dpcGUubWluLmNzcyIgLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9kZWZhdWx0LXNraW4ubWluLmNzcyIgLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9zdHlsZS5taW4uY3NzPzIwMTYxMTI5PSIvPgoKICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiBocmVmPSIvdGhlbWUvX3NpdGVEQjE2MDIubG9yZXRvaW0vaW1hZ2VzL2Zhdmljb24uaWNvIiAvPgoKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3d3dy5sb3JldG9pbW1vYmlsaWVyLmNvbS9mci92ZW50ZS1sb2NhdGlvbi1tYWlzb24tYXBwYXJ0ZW1lbnQtcGFyaXMvcmVmLWdjOTMtMjUzMC92ZW50ZS1hcHBhcnRlbWVudC0yLXBpZWNlcy0xLWNoYW1icmUtcGFyaXMtNzUwMDYvIiAvPgogICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSJpdCIgaHJlZj0iaHR0cHM6Ly93d3cubG9yZXRvaW1tb2JpbGllci5jb20vaXQvdmVuZGl0YS1hZmZpdHRvLWNhc2EtYXBwYXJ0YW1lbnRvLXBhcmlnaS9yZWYtZ2M5My0yNTMwL3ZlbmRpdGEtYXBwYXJ0YW1lbnRvLTItc3RhbnplLTEtY2FtZXJhLWRhLWxldHRvLXBhcmlzLTc1MDA2L2luZGV4LnBocCIgLz4KICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy5sb3JldG9pbW1vYmlsaWVyLmNvbS9mci92ZW50ZS1sb2NhdGlvbi1tYWlzb24tYXBwYXJ0ZW1lbnQtcGFyaXMvcmVmLWdjOTMtMjUzMC92ZW50ZS1hcHBhcnRlbWVudC0yLXBpZWNlcy0xLWNoYW1icmUtcGFyaXMtNzUwMDYvIiBtZWRpYT0ib25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY0MHB4KSIgLz4KCiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIGhyZWY9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9pbWFnZXMvYXBwbGVUb3VjaEljb242MC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iNzZ4NzYiIGhyZWY9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9pbWFnZXMvYXBwbGVUb3VjaEljb243Ni5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTIweDEyMCIgaHJlZj0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjEyMC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTUyeDE1MiIgaHJlZj0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjE1Mi5wbmciPgoKICAgIDxtZXRhIG5hbWU9ImFwcGxpY2F0aW9uLW5hbWUiIGNvbnRlbnQ9IkxvcmV0byBJbW1vYmlsaWVyIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiMwMzQ2OGEiIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTcweDcwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2ltYWdlcy9tc1RvdWNoL3NtYWxsdGlsZS03MHg3MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTE1MHgxNTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVEQjE2MDIubG9yZXRvaW0vaW1hZ2VzL21zVG91Y2gvbWVkaXVtdGlsZS0xNTB4MTUwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24td2lkZTMxMHgxNTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVEQjE2MDIubG9yZXRvaW0vaW1hZ2VzL21zVG91Y2gvd2lkZXRpbGUtMzEweDE1MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTMxMHgzMTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVEQjE2MDIubG9yZXRvaW0vaW1hZ2VzL21zVG91Y2gvbGFyZ2V0aWxlLTMxMHgzMTAucG5nIiAvPgoKICAgIDwhLS1baWYgSUUgXT48c2NyaXB0IHNyYz0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2pzL21vZGVybml6ci5jdXN0b20uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdGUgSUUgOV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2pzL3BsYWNlaG9sZGVycy5taW4uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiAoZ3RlIElFIDYpJihsdGUgSUUgOCldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9qcy9zZWxlY3Rpdml6ci1taW4uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdCBJRSA5XT48c2NyaXB0IHNyYz0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2pzL2NzczMtbWVkaWFxdWVyaWVzLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KCiAgICA8bGluayBocmVmPSdodHRwOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1PcGVuK1NhbnM6NDAwaXRhbGljLDQwMCw2MDAsNzAwJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJy8+CgoKCjwvaGVhZD4KPCEtLVtpZiBsdCBJRSA3XT4gPGJvZHkgY2xhc3M9ImllIGllNiBpZTdfIGllOF8gaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgN10+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTcgaWU3XyBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDhdPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU4IGllOF8gaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOV0+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTkgaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgZ3QgSUUgOV0+IDxib2R5PjwhW2VuZGlmXS0tPgo8IS0tW2lmICFJRV0+PCEtLT48Ym9keT48IS0tPCFbZW5kaWZdLS0+Cgk8ZGl2IGlkPSJtYWluIiBjbGFzcz0iYW5ub25jZXMtZGVmYXVsdCI+Cgk8aGVhZGVyPgogICAgPGRpdiBjbGFzcz0idG9wX2hlYWRlciI+CiAgICAgICAgPGRpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nbyI+CgkJICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9yZXRvaW1tb2JpbGllci5jb20vIiB0aXRsZT0iTG9yZXRvIEltbW9iaWxpZXIiPgoJCSAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJMb3JldG8gSW1tb2JpbGllciAtIEFnZW5jZSBpbW1vYmlsacOocmUgZGUgcHJlc3RpZ2UgUGFyaXMgUml2ZSBHYXVjaGUiLz4KCQkgICAgICAgICAgICA8L2E+CgkJICAgIDwvZGl2PgogICAgICAgICAgICA8bmF2PgogICAgPHVsPgogICAgICAgIDxsaSBjbGFzcz0icGljdG9Ib21lIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2ZyLyIgdGl0bGU9IkltbW9iaWxpZXIgZGUgcHJlc3RpZ2UgUGFyaXMgTG9yZXRvIEltbW9iaWxpZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibm9ybWFsIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhvdmVyIj48L2Rpdj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvdmVudGUtc3R1ZGlvLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbC1wYXJ0aWN1bGllci1sb2Z0LWF0ZWxpZXItcGFyaXMvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iSW1tb2JpbGllciBlbiBWZW50ZSBMb3JldG8gaW1tb2JpbGllciIgY2xhc3M9IiI+VmVudGU8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9sb2NhdGlvbi1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWwtcGFydGljdWxpZXItbG9mdC1hdGVsaWVyLXBhcmlzLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkltbW9iaWxpZXIgZW4gTG9jYXRpb24gTG9yZXRvIEltbW9iaWxpZXIiIGNsYXNzPSIiPkxvY2F0aW9uPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvdmVudGUtc3R1ZGlvLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbC1wYXJ0aWN1bGllci1sb2Z0LWV0cmFuZ2VyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkltbW9iaWxpZXIgZW4gVmVudGUgw6l0cmFuZ2VyIExvcmV0byBpbW1vYmlsaWVyIiBjbGFzcz0iIj5JbnRlcm5hdGlvbmFsPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvZXN0aW1hdGlvbi1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWwtcGFydGljdWxpZXItYXRlbGllci1sb2Z0LXBhcmlzLyIgdGl0bGU9IkVzdGltZXIgdm90cmUgYmllbiBzdXIgUGFyaXMiIGNsYXNzPSIiPkVzdGltYXRpb248L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9hZ2VuY2UtaW1tb2JpbGllcmUtZGUtbHV4ZS1jb250YWN0LWxvcmV0by1pbW1vYmlsaWVyLyIgdGl0bGU9IkNvbnRhY3RleiBs4oCZYWdlbmNlIGltbW9iaWxpw6hyZSBMb3JldG8gSW1tb2JpbGllciIgY2xhc3M9IiI+Q29udGFjdDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ibW90ZXVyX2hlYWRlciIgdGl0bGU9IkFmZmljaGVyIGxlIG1vdGV1ciBkZSByZWNoZXJjaGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJub3JtYWwiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3ZlciI+PC9kaXY+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlbGVjdGlvbl9oZWFkZXIiPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvbWEtc2VsZWN0aW9uLWxvcmV0by1pbW1vYmlsaWVyLyIgdGl0bGU9IlPDqWxlY3Rpb25uZXIgYW5ub25jZSBpbW1vYmlsacOocmUgMCIgY2xhc3M9InNlbGVjdGlvbiI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvU2VsZWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJub3JtYWwiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhvdmVyIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuYl9zZWxlY3Rpb24iPjA8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcER3bkxhbmciPgoJPHNwYW4gY2xhc3M9ImFjdGl2ZUxhbmciPgoJPC9zcGFuPgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgovLzwhW0NEQVRBWwoJdmFyIGZsYWdIdG1sID0gJzx1bD5cblwKCQkJPGxpIGNsYXNzPSJzZWxlY3RlZCI+XG5cCgkJCQk8YSBocmVmPSIvZnIvdmVudGUtbG9jYXRpb24tbWFpc29uLWFwcGFydGVtZW50LXBhcmlzL3JlZi1nYzkzLTI1MzAvdmVudGUtYXBwYXJ0ZW1lbnQtMi1waWVjZXMtMS1jaGFtYnJlLXBhcmlzLTc1MDA2LyIgdGl0bGU9ImZyYW4mY2NlZGlsO2FpcyIgaHJlZmxhbmc9ImZyIj5cblwKCQkJCQk8aW1nIHNyYz0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2ltYWdlcy9mbGFncy9mci5wbmciIGFsdD0iZnJhbiZjY2VkaWw7YWlzIi8+XG5cCgkJCQk8L2E+XG5cCgkJCTwvbGk+XG5cCgkJCTxsaSBjbGFzcz0iIj5cblwKCQkJCTxhIGhyZWY9Ii9pdC92ZW5kaXRhLWFmZml0dG8tY2FzYS1hcHBhcnRhbWVudG8tcGFyaWdpL3JlZi1nYzkzLTI1MzAvdmVuZGl0YS1hcHBhcnRhbWVudG8tMi1zdGFuemUtMS1jYW1lcmEtZGEtbGV0dG8tcGFyaXMtNzUwMDYvIiB0aXRsZT0iaXRhbGlhbm8iIGhyZWZsYW5nPSJpdCI+XG5cCgkJCQkJPGltZyBzcmM9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9pbWFnZXMvZmxhZ3MvaXQucG5nIiBhbHQ9Iml0YWxpYW5vIi8+XG5cCgkJCQk8L2E+XG5cCgkJCTwvbGk+XG5cCgkJPC91bD4nOwoKCSQoJ2Rpdi5kcm9wRHduTGFuZycpLmFwcGVuZChmbGFnSHRtbCk7CgoJJCgnLmRyb3BEd25MYW5nIHVsIGxpLnNlbGVjdGVkIGEnKS5jaGlsZHJlbigpLmNsb25lKCkuYXBwZW5kVG8oJy5kcm9wRHduTGFuZyAuYWN0aXZlTGFuZycpOwoKCSQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CgoJCSQoJy5kcm9wRHduTGFuZyAuYWN0aXZlTGFuZycpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKCgkJCSQoJy5kcm9wRHduTGFuZyB1bCcpLnNsaWRlVG9nZ2xlKDIwMCk7CgoJCX0pOwoJfSk7Ci8vXV0+Cjwvc2NyaXB0PgoKICAgICAgICA8L2xpPgogICAgPC91bD4KPC9uYXY+CgoKCgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJmb3JtX2hlYWRlciI+CiAgICA8ZGl2PgogICAgICAgIDxzcGFuIGNsYXNzPSJpY29fY2xvc2VfaGVhZGVyIj48L3NwYW4+CiAgICAgICAgPGZvcm0gaWQ9Im1vdGV1cl9mb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2ZyL3ZlbnRlLXN0dWRpby1tYWlzb24tYXBwYXJ0ZW1lbnQtaG90ZWwtcGFydGljdWxpZXItbG9mdC1hdGVsaWVyLXBhcmlzLyI+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkgc2VjdGV1ciI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJnZW9fbXVsdGkiPkxvY2FsaXNhdGlvbjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJnZW9fc2VjdGV1ciIgbXVsdGlwbGU9Im11bHRpcGxlIiBuYW1lPSJnZW9fc2VjdGV1cltdIj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJyaXZlX2dhdWNoZSIgPlJpdmUgR2F1Y2hlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0icml2ZV9kcm9pdGUiID5SaXZlIERyb2l0ZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InBhcmlzX2NlbnRyZSIgPlBhcmlzIENlbnRyZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImludGVybmF0aW9uYWwiID5JbnRlcm5hdGlvbmFsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iYWlsbGV1cnMiID5BaWxsZXVyczwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkiPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZ2VvX211bHRpIj5Mb2NhbGlzYXRpb248L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9Imdlb19tdWx0aSIgbmFtZT0iZ2VvX211bHRpW10iIG11bHRpcGxlPSJtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDE7cGFyaXMiID5QQVJJUyAtIDc1MDAxPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDM7cGFyaXMiID5QQVJJUyAtIDc1MDAzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDQ7cGFyaXMiID5QQVJJUyAtIDc1MDA0PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDU7cGFyaXMiID5QQVJJUyAtIDc1MDA1PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDY7cGFyaXMiID5QQVJJUyAtIDc1MDA2PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDc7cGFyaXMiID5QQVJJUyAtIDc1MDA3PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDg7cGFyaXMiID5QQVJJUyAtIDc1MDA4PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iSVQ7OTYxMDA7c2lyYWN1c2EiID5TaXJhY3VzYSAtIDk2MTAwPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmbGVjaGVfc2VsZWN0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idHlwZSI+VHlwZSBkZSBiaWVuPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJ0eXBlIiBuYW1lPSJ0eXBlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj5UeXBlIGRlIGJpZW48L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iQXBwYXJ0bWVudCIgPkFwcGFydGVtZW50PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkR1cGxleCIgPkR1cGxleDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJIb3RlbFBhcnRpY3VsaWVyIiA+SMO0dGVsIHBhcnRpY3VsaWVyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IlZpbGxhIiA+VmlsbGE8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic3VyZmFjZSI+U3VyZmFjZSBtaW4uPC9sYWJlbD4gPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InN1cmZhY2UiIGlkPSJzdXJmYWNlX21pbiIgdmFsdWU9IiIgY2xhc3M9InNob3J0IiBwbGFjZWhvbGRlcj0iU3VyZmFjZSBtaW4uIiAvPgogICAgICAgICAgICAgICAgICAgIDwhLS08bGFiZWwgZm9yPSJzdXJmYWNlX21heCI+U3VyZmFjZSBtYXguPC9sYWJlbD4gPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InN1cmZhY2VfbWF4IiBpZD0ic3VyZmFjZV9tYXgiIHZhbHVlPSIiIGNsYXNzPSJzaG9ydCIgLz4tLT4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJpY29fYnVkZ2V0Ij4KICAgICAgICAgICAgICAgICAgICA8IS0tPGxhYmVsIGZvcj0ibWluIiBjbGFzcz0ibWluLWxhYmVsLXNlbGVjdCI+TWluLjwvbGFiZWw+IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJtaW4iIGlkPSJtaW4iIHZhbHVlPSIiIGNsYXNzPSJzaG9ydCIgLz4tLT4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtYXgiPkJ1ZGdldDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIHBsYWNlaG9sZGVyPSJCdWRnZXQiIG5hbWU9Im1heCIgaWQ9Im1heCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJyZWZlcmVuY2UiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImJpZW5fcmVmIj5Sw6lmw6lyZW5jZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImJpZW5fcmVmIiBpZD0iYmllbl9yZWYiIHBsYWNlaG9sZGVyPSJSw6lmw6lyZW5jZSIgdmFsdWU9IiIgY2xhc3M9InZhbGV1ciIvPgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwIiBpZD0icCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibmV3X3Jlc2VhcmNoIiBpZD0ibmV3X3Jlc2VhcmNoIiB2YWx1ZT0iMSIgLz4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icmVjaGFyZ2VNUiIgaWQ9InJlY2hhcmdlTVIiIHZhbHVlPSIwIiAvPgogICAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImJvdXRvbiBzdWJtaXQiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IlJlY2hlcmNoZXIiIC8+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgPC9mb3JtPgogICAgPC9kaXY+CjwvZGl2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvbW90ZXVyX3hocl9saXN0Y2l0aWVzLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgdmFyIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAkKCcubW90ZXVyX2hlYWRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7CiAgICAgICAgaWYobW90ZXVyT3BlbiA9PSBmYWxzZSl7CgogICAgICAgICAgICBtb3RldXJPcGVuID0gdHJ1ZTsKCiAgICAgICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlRG93bigyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOid2aXNpYmxlJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgbW90ZXVyT3BlbiA9IGZhbHNlOwoKICAgICAgICAgICAgJCgnLmZvcm1faGVhZGVyJykuc2xpZGVVcCgyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOidoaWRkZW4nCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgIH0KCiAgICB9KTsKCiAgICAkKCcuaWNvX2Nsb3NlX2hlYWRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7CgogICAgICAgIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAgICAgJCgnLmZvcm1faGVhZGVyJykuc2xpZGVVcCgyMDApOwoKICAgIH0pOwogICAgaWYgKCd2ZW50ZS1sb2NhdGlvbi1tYWlzb24tYXBwYXJ0ZW1lbnQtcGFyaXMvJyA9PSAnbG9jYXRpb24tbWFpc29uLWFwcGFydGVtZW50LWhvdGVsLXBhcnRpY3VsaWVyLWxvZnQtYXRlbGllci1wYXJpcy8nKSB7CiAgICAgICAgJCgnI2dlb19zZWN0ZXVyJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgICAgICBwbGFjZWhvbGRlcjogIk/DuSBsb3VlciA/IiwKICAgICAgICAgICAgY291bnRTZWxlY3RlZDonJywKICAgICAgICAgICAgbm9NYXRjaGVzRm91bmQ6JycsCiAgICAgICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICAgICAgc2VsZWN0QWxsOiAnJywKICAgICAgICAgICAgbm9NYXRjaGVzRm91bmQ6ICdBdWN1biByw6lzdWx0YXQnLAogICAgICAgIH0pOwogICAgfWVsc2V7CiAgICAgICAgJCgnI2dlb19zZWN0ZXVyJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgICAgICBwbGFjZWhvbGRlcjogIk/DuSBhY2hldGVyID8iLAogICAgICAgICAgICBjb3VudFNlbGVjdGVkOicnLAogICAgICAgICAgICBub01hdGNoZXNGb3VuZDonJywKICAgICAgICAgICAgYWxsU2VsZWN0ZWQ6ICcnLAogICAgICAgICAgICBzZWxlY3RBbGw6ICcnLAogICAgICAgICAgICBub01hdGNoZXNGb3VuZDogJ0F1Y3VuIHLDqXN1bHRhdCcsCiAgICAgICAgfSk7CiAgICB9CiAgICAkKCcjZ2VvX211bHRpJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgIHBsYWNlaG9sZGVyOiAiTG9jYWxpc2F0aW9uIiwKICAgICAgICBjb3VudFNlbGVjdGVkOicnLAogICAgICAgIG5vTWF0Y2hlc0ZvdW5kOicnLAogICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICBzZWxlY3RBbGw6ICcnLAogICAgICAgIG5vTWF0Y2hlc0ZvdW5kOiAnQXVjdW4gcsOpc3VsdGF0JywKICAgIH0pOwoKICAgIG1vdGV1cl94aHJfbGlzdGNpdGllcygiZ2VvX3NlY3RldXI7dHJhbnNhYzt0eXBlX2ltbW87YWRkcmVzc19kZXBhcnRlbWVudDthZGRyZXNzX3BheXMiLCB0cnVlLCAiIik7CgogICAgLyoqKioqKioqIE1PRElGSUNBVElPTiBEVSBTTFVHIERFIFNPVU1JU1NJT04gRFUgTU9URVVSICoqKioqKioqKioqLwoKICAgIGlmICgndmVudGUtbG9jYXRpb24tbWFpc29uLWFwcGFydGVtZW50LXBhcmlzLycgPT0gJ2xvY2F0aW9uLW1haXNvbi1hcHBhcnRlbWVudC1ob3RlbC1wYXJ0aWN1bGllci1sb2Z0LWF0ZWxpZXItcGFyaXMvJykgewogICAgICAgICQoJyNtb3RldXJfZm9ybScpLmF0dHIoImFjdGlvbiIsICIvZnIvbG9jYXRpb24tbWFpc29uLWFwcGFydGVtZW50LWhvdGVsLXBhcnRpY3VsaWVyLWxvZnQtYXRlbGllci1wYXJpcy8iKTsKICAgIH0KICAgIGVsc2UgaWYoJ3ZlbnRlLWxvY2F0aW9uLW1haXNvbi1hcHBhcnRlbWVudC1wYXJpcy8nID09ICcnKXsKICAgICAgICAkKCcjbW90ZXVyX2Zvcm0nKS5hdHRyKCJhY3Rpb24iLCAiL2ZyLyIpOwogICAgfQo8L3NjcmlwdD4KCjwvaGVhZGVyPgoKCgoKCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9qcy9waG90b3N3aXBlLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZURCMTYwMi5sb3JldG9pbS9qcy9waG90b3N3aXBlLXVpLWRlZmF1bHQubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2pzL21hal9zZWxlY3Rpb24ubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlREIxNjAyLmxvcmV0b2ltL2pzL2pxdWVyeS5zaGFycnJlLm1pbi5qcyI+PC9zY3JpcHQ+CjxzZWN0aW9uIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGNsYXNzPSJhbm5vbmNlX2RldGFpbF9jb250YWluZXIiPgogICAgPGgxIGNsYXNzPSJhbm5vbmNlIj5WZW50ZSBBcHBhcnRlbWVudCBQYXJpcyA2ICg3NTAwNikgTU9OTkFJRSBPREVPTjwvaDE+CiAgICA8ZGl2IGNsYXNzPSJkaWFwQ250Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJkdGxJbmZSaWdodCBzYXZvaXJfcGx1cyBhTGlrZSI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwbGFjZSI+PHNwYW4+UEFSSVMgNjwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHJpY2UiPjxzcGFuPjY3MCAwMDAgJmV1cm87IDwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGllY2VzIj4yIHBpw6hjZXM8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idHlwZSI+YXBwYXJ0ZW1lbnQ8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+PHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgaWQ9ImRpYXBvcmFtYV9kZXRhaWwiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2F2b2lyX3BsdXMiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImZ1bGxTY3JuIiB0aXRsZT0iUGxlaW4gw6ljcmFuIj48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGlkPSJjdHJsRGlhcCI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjeWNsZS1wcmV2Ij48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3ljbGUtcGF1c2UiPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjeWNsZS1uZXh0Ij48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8c2VjdGlvbiBpZD0icGFuZWxfZGV0YWlsIj4KICAgICAgICA8c3BhbiBjbGFzcz0iY2xvc2VfZGV0YWlsIj48L3NwYW4+CiAgICAgICAgPGRpdj4KICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0ZV9kZXRhaWwiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkZXRhaWxfcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYW5ub25jZV9wcmljZSI+UHJpeCA6IDxzcGFuIGNsYXNzPSJwcmljZUNvbG9yIj42NzAgMDAwICZldXJvOyA8L3NwYW4+PG1ldGEgaXRlbXByb3A9InByaWNlIiBjb250ZW50PSI2NzAwMDAuMDAiIC8+PG1ldGEgaXRlbXByb3A9InByaWNlQ3VycmVuY3kiIGNvbnRlbnQ9IiZldXJvOyIgLz48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZV9kZXRhaWwiPkhvbm9yYWlyZXMgZGUgNCw2OSU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZV9kZXRhaWwiPjwvcD4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGV0YWlsX3JlZiI+UsOpZsOpcmVuY2UgOiA8c3Bhbj5HQzkzLTI1MzA8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBpdGVtc2NvcGUgaXRlbXByb3A9ImF2YWlsYWJsZUF0T3JGcm9tIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUGxhY2UiPkxvY2FsaXNhdGlvbiA6IDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1Bvc3RhbEFkZHJlc3MiPlBBUklTPG1ldGEgaXRlbXByb3A9ImFkZHJlc3NMb2NhbGl0eSIgY29udGVudD0iUEFSSVMiLz48L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgIDxsaT5RdWFydGllciA6IDxzcGFuPk1PTk5BSUUgT0RFT048L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0iY2F0ZWdvcnkiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvU2luZ2xlRmFtaWx5UmVzaWRlbmNlIj5UeXBlIGRlIGJpZW4gOiA8c3Bhbj5hcHBhcnRlbWVudDwvc3Bhbj48bWV0YSBpdGVtcHJvcD0ibnVtYmVyT2ZSb29tcyIgY29udGVudD0iMiIvPjxtZXRhIGl0ZW1wcm9wPSJmbG9vclNpemUiIGNvbnRlbnQ9IjQ0LjI2IG3CsiIvPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+bcKyIDogPHNwYW4+NDQuMjYgbcKyPC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+cGnDqGNlcyA6IDxzcGFuPjI8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgIDxsaT5jaGFtYnJlIDogPHNwYW4+MTwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgPGxpPnNhbGxlIGRlIGJhaW4gOiA8c3Bhbj4xPC9zcGFuPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImNvcHJvIj4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIEVuIGNvcHJvcHJpw6l0w6kKICAgICAgICAgICAgICAgICAgICAgICAgOiAzMyBsb3RzCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIE1vbnRhbnQgbW95ZW4gYW5udWVsIGRlIGxhIHF1b3RlLXBhcnQgZGUgY2hhcmdlcyBjb3VyYW50ZXMgOiAyIDA0MCAmZXVybzsKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgICAgICA8cCBpdGVtcHJvcD0iZGVzY3JpcHRpb24iIGNsYXNzPSJkZXRhaWxfZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgTU9OTkFJRSAtIHJ1ZSBkZSBORVNMRVMuIERhbnMgdW4gYmVsIGltbWV1YmxlIFhWSUlJLCBjaGFybWFudCBhcHBhcnRlbWVudCBkJ2Vudmlyb24gNDVtMiAgc2UgY29tcG9zYW50IGQndW4gYWdyw6lhYmxlIHNhbG9uIGF2ZWMgZ3JhbmRlcyBmZW7DqnRyZXMgcXVpIGRvbm5lbnQgc3VyIHBldGl0ZSBydWUgY2FsbWUsIGQndW5lIGN1aXNpbmUgZW50acOocmVtZW50IMOpcXVpcMOpZSwgZCd1bmUgY2hhbWJyZSBjb25mb3J0YWJsZSwgZXQgZCd1bmUgc2FsbGUgZGUgYmFpbiBhdmVjIGJhaWdub2lyZSBldCB0b2lsZXR0ZXMuIEJlYXVjb3VwIGRlIHJhbmdlbWVudHMsIHZlbmR1IGVudGnDqHJlbWVudCBtZXVibMOpLgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IEFycmF5KCdDZXR0ZSBhbm5vbmNlIGEgw6l0w6kgYWpvdXTDqWUgw6Agdm90cmUgc8OpbGVjdGlvbi4nLCdDZXR0ZSBhbm5vbmNlIGVzdCBkw6lqw6AgZGFucyB2b3RyZSBzw6lsZWN0aW9uLicpOwogICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvcm0tYW1pIiBuYW1lPSJjb250YWN0X2FtaSIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Ii9mci9lbnZveWVyLWEtdW4tYW1pLWxvcmV0by1pbW1vYmlsaWVyL2RldGFpbHMvNTMwLyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpZGJpZW4iIGlkPSJpZGJpZW4iIHZhbHVlPSI1MzAiIC8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiB2YWx1ZT0iR0M5My0yNTMwIiAvPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYmllbl91cmwiIGlkPSJiaWVuX3VybCIgdmFsdWU9Ii9mci92ZW50ZS1sb2NhdGlvbi1tYWlzb24tYXBwYXJ0ZW1lbnQtcGFyaXMvcmVmLWdjOTMtMjUzMC92ZW50ZS1hcHBhcnRlbWVudC0yLXBpZWNlcy0xLWNoYW1icmUtcGFyaXMtNzUwMDYvIiAvPgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDx1bCBjbGFzcz0iZGV0YWlsX2xpbmtfb3V0aWxzIj4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYWpvdXRfc2VsZWN0aW9uIiBkYXRhLWJpZW5pZD0iNTMwIiBocmVmPSIjIiB0aXRsZT0iQWpvdXRlciDDoCBtYSBzw6lsZWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJlbnZvaV9hbWkiIGhyZWY9IiMiIHRpdGxlPSJFbnZveWVyIMOgIHVuIGFtaSI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlua19pbXByZXNzaW9uIiB0aXRsZT0iSW1wcmltZXIgbGUgZMOpdGFpbCBkZSBjZSBiaWVuIiBocmVmPSIvZnIvaW1wcmVzc2lvbi9kZXRhaWxzLzUzMC8iIHRhcmdldD0iX2JsYW5rIj48L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8ZGl2IGlkPSJzaGFyZW1lIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1faW50ZXJsb2N1dGV1ciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnRlcmxvY3V0ZXVyX2RwZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJzZWxsZXIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50IiBjbGFzcz0iaW50ZXJsb2N1dGV1ciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlZvdHJlIGludGVybG9jdXRldXI8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkxvcmV0byBpbW1vYmlsaWVyPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjMwIHJ1ZSBEYXVwaGluZTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0iYWRkcmVzcyIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9Qb3N0YWxBZGRyZXNzIj48bWV0YSBpdGVtcHJvcD0ic3RyZWV0QWRkcmVzcyIgY29udGVudD0iMzAgcnVlIERhdXBoaW5lIi8+PHNwYW4gaXRlbXByb3A9InBvc3RhbENvZGUiPjc1MDA2PC9zcGFuPiA8c3BhbiBpdGVtcHJvcD0iYWRkcmVzc0xvY2FsaXR5Ij5QQVJJUzwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VMOpbCA6IDxzcGFuIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPiszMyAoMCkxIDQ2IDM0IDI2IDAwPC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlcF9kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWdfZHBlIiBzcmM9Imh0dHBzOi8vd3d3LmFnZW5jZS1wbHVzLm5ldC9za2lucy9fZGVmYXVsdC9saWIvQWdlbmNlUGx1cy93cy9pbWdEUEUuYXNoeD92YWx1ZT0zMDQmc2l6ZT0yMDZ4MjExJnBpY3RvPWRwZV9vbWJyZV90cmFuc3BhcmVudCIgYWx0PSJEaWFnbm9zdGljIGRlIHBlcmZvcm1hbmNlIMOpbmVyZ8OpdGlxdWUiPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX2RldGFpbCI+CiAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9ImFubm9uY2VfZm9ybSIgY2xhc3M9InZhbGlkYXRlX2Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIjY29udGFjdF9hbm5vbmNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxlZ2VuZD5EZW1hbmRlIGRlIHJlbnNlaWduZW1lbnRzPC9sZWdlbmQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImhvbmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ3ZWJzaXRlIj5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IndlYnNpdGUiIGlkPSJ3ZWJzaXRlIiB2YWx1ZT0iIiBwbGFjZWhvbGRlcj0iVmV1aWxsZXogbGFpc3NlciBsYSB2YWxldXIgaW5pdGlhbGUgZGUgY2UgY2hhbXAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Imxhc3RfbmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJsYXN0X25hbWUiIHR5cGU9InRleHQiIG5hbWU9Imxhc3RfbmFtZSIgY2xhc3M9InJlcXVpcmVkIiB2YWx1ZT0iIiBwbGFjZWhvbGRlcj0iTm9tICoiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0ibGFzdF9uYW1lIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImZpcnN0X25hbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iZmlyc3RfbmFtZSIgdHlwZT0idGV4dCIgbmFtZT0iZmlyc3RfbmFtZSIgdmFsdWU9IiIgcGxhY2Vob2xkZXI9IlByw6lub20gKiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJmaXJzdF9uYW1lIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImVtYWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImVtYWlsIiB0eXBlPSJ0ZXh0IiBuYW1lPSJlbWFpbCIgdmFsdWU9IiIgY2xhc3M9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iRW1haWwgKiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJlbWFpbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwaG9uZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJwaG9uZSIgdHlwZT0idGV4dCIgbmFtZT0icGhvbmUiIHZhbHVlPSIiIGNsYXNzPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9IlTDqWzDqXBob25lIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJsYWJlbF9tZXNzYWdlLWFubm9uY2UgdGV4dGFyZWEiIGZvcj0ibWVzc2FnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSJtZXNzYWdlIiBuYW1lPSJtZXNzYWdlIiBjbGFzcz0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJNZXNzYWdlICoiPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9Im1lc3NhZ2UiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImhvbmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJhbGd0MGFnZTA2aGQwanI0cDExdDc0MDNwNCI+VmV1aWxsZXogbGFpc3NlciBsYSB2YWxldXIgaW5pdGlhbGUgZGUgY2UgY2hhbXA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhbGd0MGFnZTA2aGQwanI0cDExdDc0MDNwNCIgaWQ9ImFsZ3QwYWdlMDZoZDBqcjRwMTF0NzQwM3A0IiB2YWx1ZT0iYWxndDBhZ2UwNmhkMGpyNHAxMXQ3NDAzcDQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpZCIgaWQ9ImlkIiB2YWx1ZT0iNTMwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYmllbl9yZWYiIGlkPSJiaWVuX3JlZiIgdmFsdWU9IkdDOTMtMjUzMCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jZV9pZCIgaWQ9ImFnZW5jZV9pZCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdWJqZWN0IiBpZD0ic3ViamVjdCIgdmFsdWU9IkNvbnRhY3RBbm5vbmNlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiBuYW1lPSJzZW5kX2VtYWlsIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJFbnZveWVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgo8L3NlY3Rpb24+CjwhLS0gUm9vdCBlbGVtZW50IG9mIFBob3RvU3dpcGUuIE11c3QgaGF2ZSBjbGFzcyBwc3dwLiAtLT4KPGRpdiBjbGFzcz0icHN3cCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIDwhLS0gQmFja2dyb3VuZCBvZiBQaG90b1N3aXBlLgogICAgSXQncyBhIHNlcGFyYXRlIGVsZW1lbnQsIGFzIGFuaW1hdGluZyBvcGFjaXR5IGlzIGZhc3RlciB0aGFuIHJnYmEoKS4gLS0+CiAgICA8ZGl2IGNsYXNzPSJwc3dwX19iZyI+PC9kaXY+CiAgICA8IS0tIFNsaWRlcyB3cmFwcGVyIHdpdGggb3ZlcmZsb3c6aGlkZGVuLiAtLT4KICAgIDxkaXYgY2xhc3M9InBzd3BfX3Njcm9sbC13cmFwIj4KICAgICAgICA8IS0tIENvbnRhaW5lciB0aGF0IGhvbGRzIHNsaWRlcy4KICAgICAgICAgICAgUGhvdG9Td2lwZSBrZWVwcyBvbmx5IDMgb2YgdGhlbSBpbiBET00gdG8gc2F2ZSBtZW1vcnkuCiAgICAgICAgICAgIERvbid0IG1vZGlmeSB0aGVzZSAzIHBzd3BfX2l0ZW0gZWxlbWVudHMsIGRhdGEgaXMgYWRkZWQgbGF0ZXIgb24uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NvbnRhaW5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSBEZWZhdWx0IChQaG90b1N3aXBlVUlfRGVmYXVsdCkgaW50ZXJmYWNlIG9uIHRvcCBvZiBzbGlkaW5nIGFyZWEuIENhbiBiZSBjaGFuZ2VkLiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX191aSBwc3dwX191aS0taGlkZGVuIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fdG9wLWJhciI+CiAgICAgICAgICAgICAgICA8IS0tICBDb250cm9scyBhcmUgc2VsZi1leHBsYW5hdG9yeS4gT3JkZXIgY2FuIGJlIGNoYW5nZWQuIC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY291bnRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1jbG9zZSIgdGl0bGU9IkNsb3NlIChFc2MpIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLXNoYXJlIiB0aXRsZT0iU2hhcmUiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tZnMiIHRpdGxlPSJUb2dnbGUgZnVsbHNjcmVlbiI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS16b29tIiB0aXRsZT0iWm9vbSBpbi9vdXQiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPCEtLSBQcmVsb2FkZXIgZGVtbyBodHRwOi8vY29kZXBlbi5pby9kaW1zZW1lbm92L3Blbi95eUJXb1IgLS0+CiAgICAgICAgICAgICAgICA8IS0tIGVsZW1lbnQgd2lsbCBnZXQgY2xhc3MgcHN3cF9fcHJlbG9hZGVyLS1hY3RpdmUgd2hlbiBwcmVsb2FkZXIgaXMgcnVubmluZyAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19pY24iPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19jdXQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19wcmVsb2FkZXJfX2RvbnV0Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19zaGFyZS1tb2RhbCBwc3dwX19zaGFyZS1tb2RhbC0taGlkZGVuIHBzd3BfX3NpbmdsZS10YXAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2hhcmUtdG9vbHRpcCI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1hcnJvdy0tbGVmdCIgdGl0bGU9IlByZXZpb3VzIChhcnJvdyBsZWZ0KSI+PC9idXR0b24+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWFycm93LS1yaWdodCIgdGl0bGU9Ik5leHQgKGFycm93IHJpZ2h0KSI+PC9idXR0b24+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb24iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY2FwdGlvbl9fY2VudGVyIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9iYWNrZ3JvdW5kLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vICBBZGRMb2FkRXZlbnQKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpmdW5jdGlvbiBBZGRMb2FkRXZlbnQoZnVuYykgewogICAgdmFyIG9sZG9ubG9hZCA9IHdpbmRvdy5vbmxvYWQ7CiAgICBpZiAodHlwZW9mIHdpbmRvdy5vbmxvYWQgIT0gJ2Z1bmN0aW9uJykKICAgIHsgd2luZG93Lm9ubG9hZCA9IGZ1bmM7IH0KICAgIGVsc2UgewogICAgICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKG9sZG9ubG9hZCkKICAgICAgICAgICAgeyBvbGRvbmxvYWQoKTsgfQogICAgICAgICAgICBmdW5jKCk7CiAgICAgICAgfQogICAgfQp9CgokKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKICAgICQoJyNtYWluJykuYWRkQ2xhc3MoJ2Fubm9uY2VEZXRhaWwnKTsKCiAgICAvKioqKioqKklOU1RBTkNFIERJQVBPIERFVEFJTCoqKioqKi8KICAgICQoJ3NlY3Rpb24uYW5ub25jZV9kZXRhaWxfY29udGFpbmVyJykuaGVpZ2h0KCQod2luZG93KS5oZWlnaHQoKS0oJCgnaGVhZGVyJykuaGVpZ2h0KCkrJCgnZm9vdGVyJykub3V0ZXJIZWlnaHQodHJ1ZSkpKTsKICAgICQoJyNkaWFwb3JhbWFfZGV0YWlsJykuY3ljbGUoewogICAgICAgIHNsaWRlczonPmRpdi5zbGlkZScsCiAgICAgICAgZng6ICdmYWRlJywKICAgICAgICBzcGVlZDoxMDAwLAogICAgICAgIHRpbWVvdXQ6NTAwMCwKICAgICAgICBwcmV2OicuY3ljbGUtcHJldicsCiAgICAgICAgbmV4dDonLmN5Y2xlLW5leHQnCiAgICB9KTsKCiAgICBJbWFnZUF1dG9TY2FsZSgkKCcjZGlhcG9yYW1hX2RldGFpbCA+IGRpdiBpbWcnKSk7CgoKICAgIC8qKioqKioqTE9BRCBJTUFHRVMgQUZURVIgVEhFIFdIT0xFIFBBR0UqKioqKiovCgogICAgdmFyIHNsaWRlcyA9IFtdOwoKICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNTMwLzUzMF8wMC0yMDIwLTAyLTExLTIxNDUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAyIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNikiIH0pOwogICAgICAgICAgICBzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy81MzAvNTMwXzAxLTIwMjAtMDItMTEtMjE0NS5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDIgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA2KSIgfSk7CiAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzUzMC81MzBfMDItMjAyMC0wMi0xMS0yMTQ1LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDYpIiB9KTsKICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNTMwLzUzMF8wMy0yMDIwLTAyLTExLTIxNDUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAyIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNikiIH0pOwogICAgICAgICAgICBzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy81MzAvNTMwXzA0LTIwMjAtMDItMTEtMjE0NS5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDIgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA2KSIgfSk7CiAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzUzMC81MzBfMDUtMjAyMC0wMi0xMS0yMTQ1LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDYpIiB9KTsKICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNTMwLzUzMF8wNi0yMDIwLTAyLTExLTIxNDUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAyIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNikiIH0pOwogICAgICAgICAgICBzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy81MzAvNTMwXzA3LTIwMjAtMDItMTEtMjE0NS5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDIgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA2KSIgfSk7CiAgICAgICAgICAgIHNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzUzMC81MzBfMDgtMjAyMC0wMi0xMS0yMTQ1LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDYpIiB9KTsKICAgICAgICAgICAgc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNTMwLzUzMF8wOS0yMDIwLTAyLTExLTIxNDUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAyIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNikiIH0pOwoKICAgIGlmKHNsaWRlcy5sZW5ndGggPiAwKXsKICAgICAgICB2YXIgbmV3U2xpZGUgPSAnPGRpdiBjbGFzcz0ic2xpZGUiPjxpbWcgc3JjPSInK3NsaWRlc1swXS5zcmMrJyIgYWx0PSInK3NsaWRlc1swXS5hbHQrJyIgY2xhc3M9ImF1dG9TY2FsZSIgaXRlbXByb3A9ImltYWdlIi8+PC9kaXY+JzsKICAgICAgICAkKCcjZGlhcG9yYW1hX2RldGFpbCcpLmN5Y2xlKCdhZGQnLCBuZXdTbGlkZSk7CiAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnI2RpYXBvcmFtYV9kZXRhaWwgPiBkaXYgaW1nJykpOwogICAgICAgIHNsaWRlcy5zaGlmdCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGltZ1ByZWxvYWQoc2xpZGVzLCBpZHgsIGNhbGxiYWNrKXsKCiAgICAgICAgdmFyIHRlbXBJbWcgPSBuZXcgSW1hZ2UoKTsKICAgICAgICB2YXIgT2JqU2xpZGUgPSBzbGlkZXNbaWR4XTsKICAgICAgICBpZihPYmpTbGlkZSA9PSBudWxsKXsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgJCh0ZW1wSW1nKS5sb2FkKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBuZXdTbGlkZSA9ICc8ZGl2IGNsYXNzPSJzbGlkZSI+PGltZyBzcmM9IicrT2JqU2xpZGUuc3JjKyciIGFsdD0iJytPYmpTbGlkZS5hbHQrJyIgY2xhc3M9ImF1dG9TY2FsZSIgaXRlbXByb3A9ImltYWdlIi8+PC9kaXY+JzsKICAgICAgICAgICAgJCgnI2RpYXBvcmFtYV9kZXRhaWwnKS5jeWNsZSgnYWRkJywgbmV3U2xpZGUpOwogICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcjZGlhcG9yYW1hX2RldGFpbCA+IGRpdiBpbWcnKSk7CiAgICAgICAgICAgIC8vICBnbyBuZXh0CiAgICAgICAgICAgIGlmIChpZHggKyAxIDwgc2xpZGVzLmxlbmd0aCl7CiAgICAgICAgICAgICAgICBpbWdQcmVsb2FkKHNsaWRlcywgaWR4ICsgMSwgY2FsbGJhY2spOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdGVtcEltZy5zcmMgPSBPYmpTbGlkZS5zcmM7CgogICAgfQoKICAgIEFkZExvYWRFdmVudChmdW5jdGlvbigpewogICAgICAgIGltZ1ByZWxvYWQoc2xpZGVzLDAsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICQoJy5hbm5vbmNlX2RldGFpbF9jb250YWluZXIgPiAuZGlhcENudCA+ICNkaWFwb3JhbWFfZGV0YWlsICNmdWxsU2NybicpLmNzcyh7J2Rpc3BsYXknOidibG9jayd9KTsKICAgICAgICB9KTsKICAgIH0pOwoKICAgIC8qKioqKioqQlROIFBBVVNFIE9OIERJQVBPKioqKioqLwoKICAgIChmdW5jdGlvbigpewoKICAgICAgICB2YXIgaXNQYXVzZSA9IGZhbHNlOwoKICAgICAgICAkKCcuY3ljbGUtcGF1c2UnKS5vbignY2xpY2snLCBmdW5jdGlvbigpewoKICAgICAgICAgICBpZihpc1BhdXNlID09IGZhbHNlKXsKCiAgICAgICAgICAgICAgICBpc1BhdXNlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICQoJyNkaWFwb3JhbWFfZGV0YWlsJykuY3ljbGUoJ3BhdXNlJyk7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdjeWNsZS1wbGF5Jyk7CgogICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgaXNQYXVzZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgJCgnI2RpYXBvcmFtYV9kZXRhaWwnKS5jeWNsZSgncmVzdW1lJyk7CiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdjeWNsZS1wbGF5Jyk7CgogICAgICAgICAgIH0KCiAgICAgICB9KTsKCiAgICB9KSgpOwoKICAgIChmdW5jdGlvbigpewoKICAgICAgICB2YXIgaXNPcGVuOwoKICAgICAgICBpZiggd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignI2RldGFpbCcpID4gMCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjY29udGFjdF9hbm5vbmNlJykgPiAwICl7CgogICAgICAgICAgICBpc09wZW4gPSB0cnVlOwoKICAgICAgICAgICAgJCgnI3BhbmVsX2RldGFpbCcpLmFuaW1hdGUoewogICAgICAgICAgICAgICAgcmlnaHQ6JzAnCiAgICAgICAgICAgIH0sMjAwKTsKCiAgICAgICAgICAgICQoJy5jbG9zZV9kZXRhaWwnKS5zdG9wKCkuZmFkZUluKDIwMCk7CgogICAgICAgIH1lbHNlewoKICAgICAgICAgICAgaXNPcGVuID0gZmFsc2U7CgogICAgICAgIH0KCiAgICAgICAkKCcuc2F2b2lyX3BsdXMnKS5vbignY2xpY2snLCBmdW5jdGlvbigpewoKICAgICAgICAgICAgaWYoaXNPcGVuID09IGZhbHNlKSB7CgogICAgICAgICAgICAgICAgbW90ZXVyT3BlbiA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlVXAoMjAwLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOidoaWRkZW4nCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpc09wZW4gPSB0cnVlOwoKICAgICAgICAgICAgICAgICQoJyNwYW5lbF9kZXRhaWwnKS5jc3Moe3JpZ2h0OiAnLScrJCgnI3BhbmVsX2RldGFpbCcpLm91dGVyV2lkdGgoKSsncHgnfSk7CiAgICAgICAgICAgICAgICAkKCcjcGFuZWxfZGV0YWlsJykuYW5pbWF0ZSh7CiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6JzAnCiAgICAgICAgICAgICAgICB9LDIwMCk7CgogICAgICAgICAgICAgICAgJCgnLmNsb3NlX2RldGFpbCcpLnN0b3AoKS5mYWRlSW4oMjAwKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgaXNPcGVuID0gZmFsc2U7CgogICAgICAgICAgICAgICAgdmFyIHcgPSAkKCcjcGFuZWxfZGV0YWlsJykub3V0ZXJXaWR0aCgpOwoKCiAgICAgICAgICAgICAgICAkKCcjcGFuZWxfZGV0YWlsJykuYW5pbWF0ZSh7CiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6Jy0nK3crJ3B4JwogICAgICAgICAgICAgICAgfSwyMDApOwoKICAgICAgICAgICAgICAgICQoJy5jbG9zZV9kZXRhaWwnKS5zdG9wKCkuZmFkZU91dCgyMDApOwoKICAgICAgICAgICAgfQoKICAgICAgIH0pOwoKCiAgICAgICAkKCcuY2xvc2VfZGV0YWlsJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXsKCiAgICAgICAgICAgaXNPcGVuID0gZmFsc2U7CgogICAgICAgICAgICQodGhpcykuc3RvcCgpLmZhZGVPdXQoMjAwKTsKCiAgICAgICAgICAgdmFyIHcgPSAkKCcjcGFuZWxfZGV0YWlsJykuaW5uZXJXaWR0aCgpOwoKICAgICAgICAgICAgJCgnI3BhbmVsX2RldGFpbCcpLmFuaW1hdGUoewogICAgICAgICAgICAgICAgcmlnaHQ6Jy0nK3crJ3B4JwogICAgICAgICAgICB9LDIwMCwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHtyaWdodDonLScrKHcqMTAwKSsncHgnfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgIH0pOwoKICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgZnVuY3Rpb24oKXsKCiAgICAgICAgICAgaWYoaXNPcGVuID09IGZhbHNlKXsKCiAgICAgICAgICAgICAgICB2YXIgdyA9ICQoJyNwYW5lbF9kZXRhaWwnKS5pbm5lcldpZHRoKCk7CgogICAgICAgICAgICAgICAgJCgnI3BhbmVsX2RldGFpbCcpLmFuaW1hdGUoewogICAgICAgICAgICAgICAgICAgIHJpZ2h0OictJyt3KydweCcKICAgICAgICAgICAgICAgIH0sMjAwLCBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHtyaWdodDonLScrKHcqMTAwKSsncHgnfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgfQogICAgICAgICAgICQoJ3NlY3Rpb24uYW5ub25jZV9kZXRhaWxfY29udGFpbmVyJykuaGVpZ2h0KCQod2luZG93KS5oZWlnaHQoKS0oJCgnaGVhZGVyJykuaGVpZ2h0KCkrJCgnZm9vdGVyJykub3V0ZXJIZWlnaHQodHJ1ZSkpKTsKICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcjZGlhcG9yYW1hX2RldGFpbCA+IGRpdiBpbWcnKSk7CgogICAgICAgfSk7CgogICAgICAgJCgnLmFqb3V0X3NlbGVjdGlvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkgewoKICAgICAgICB2YXIgaWQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtYmllbmlkJyk7CgogICAgICAgIG1hc2VsZWN0aW9uKCcnLCBpZCwgJ2FkZCcsIGZ1bmN0aW9uKHJldG91cikgewoKICAgICAgICAgICAgdmFyIGFuaW1fdGltZW91dDsKICAgICAgICAgICAgdmFyIGFuaW0yX3RpbWVvdXQ7CiAgICAgICAgICAgIHZhciByZW1vdmVfdGltZW91dDsKCiAgICAgICAgICAgIGNsZWFyVGltZW91dChhbmltX3RpbWVvdXQpOwogICAgICAgICAgICBjbGVhclRpbWVvdXQoYW5pbTJfdGltZW91dCk7CiAgICAgICAgICAgIGNsZWFyVGltZW91dChyZW1vdmVfdGltZW91dCk7CgogICAgICAgICAgICBpZiAocmV0b3VyKSB7CgogICAgICAgICAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYXBwZW5kVG8oJ2JvZHknKS5hZGRDbGFzcygnYWxlcnQgb25jZScpLmFwcGVuZCgnPHA+JyArIG1lc3NhZ2VbMF0gKyAnPC9wPicpOwoKICAgICAgICAgICAgICAgIHZhciBuYl9zZWxlY3Rpb24gPSBwYXJzZUludCgkKCcubmJfc2VsZWN0aW9uJykudGV4dCgpKSArIDE7CiAgICAgICAgICAgICAgICAkKCcubmJfc2VsZWN0aW9uJykudGV4dChuYl9zZWxlY3Rpb24pOwoKICAgICAgICAgICAgICAgIGFuaW1fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLmFkZENsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgIGFuaW0yX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdvbmNlJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDYwMCk7CgogICAgICAgICAgICAgICAgICAgIH0sIDE1MDApOwoKICAgICAgICAgICAgICAgIH0sIDEwMCk7CgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYXBwZW5kVG8oJ2JvZHknKS5hZGRDbGFzcygnYWxlcnQgZG9uZScpLmFwcGVuZCgnPHA+JyArIG1lc3NhZ2VbMV0gKyAnPC9wPicpOwoKICAgICAgICAgICAgICAgIGFuaW1fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLmFkZENsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgIGFuaW0yX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdkb25lJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDYwMCk7CgogICAgICAgICAgICAgICAgICAgIH0sIDE1MDApOwoKICAgICAgICAgICAgICAgIH0sIDEwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgIH0pOwoKICAgICQoJy5lbnZvaV9hbWknKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAkKCcuZm9ybS1hbWknKS5zdWJtaXQoKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9KTsKCiAgICB9KSgpOwoKICAgIHZhciBvcGVuUGhvdG9Td2lwZSA9IGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgIHZhciBwc3dwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wc3dwJylbMF07CgogICAgICAgIHZhciBpdGVtcyA9IFtdOwogICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNTMwLzUzMF8wMC0yMDIwLTAyLTExLTIxNDUuanBnIiwgdGl0bGU6ImFwcGFydGVtZW50IDIgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA2KSIsdzoiIixoOiIifSk7CiAgICAgICAgaXRlbXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy81MzAvNTMwXzAxLTIwMjAtMDItMTEtMjE0NS5qcGciLCB0aXRsZToiYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDYpIix3OiIiLGg6IiJ9KTsKICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzUzMC81MzBfMDItMjAyMC0wMi0xMS0yMTQ1LmpwZyIsIHRpdGxlOiJhcHBhcnRlbWVudCAyIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNikiLHc6IiIsaDoiIn0pOwogICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNTMwLzUzMF8wMy0yMDIwLTAyLTExLTIxNDUuanBnIiwgdGl0bGU6ImFwcGFydGVtZW50IDIgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA2KSIsdzoiIixoOiIifSk7CiAgICAgICAgaXRlbXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy81MzAvNTMwXzA0LTIwMjAtMDItMTEtMjE0NS5qcGciLCB0aXRsZToiYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDYpIix3OiIiLGg6IiJ9KTsKICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzUzMC81MzBfMDUtMjAyMC0wMi0xMS0yMTQ1LmpwZyIsIHRpdGxlOiJhcHBhcnRlbWVudCAyIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNikiLHc6IiIsaDoiIn0pOwogICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNTMwLzUzMF8wNi0yMDIwLTAyLTExLTIxNDUuanBnIiwgdGl0bGU6ImFwcGFydGVtZW50IDIgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA2KSIsdzoiIixoOiIifSk7CiAgICAgICAgaXRlbXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy81MzAvNTMwXzA3LTIwMjAtMDItMTEtMjE0NS5qcGciLCB0aXRsZToiYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDYpIix3OiIiLGg6IiJ9KTsKICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzUzMC81MzBfMDgtMjAyMC0wMi0xMS0yMTQ1LmpwZyIsIHRpdGxlOiJhcHBhcnRlbWVudCAyIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNikiLHc6IiIsaDoiIn0pOwogICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvNTMwLzUzMF8wOS0yMDIwLTAyLTExLTIxNDUuanBnIiwgdGl0bGU6ImFwcGFydGVtZW50IDIgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA2KSIsdzoiIixoOiIifSk7CgogICAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgICAgICBoaXN0b3J5OiB0cnVlLAogICAgICAgICAgICBmb2N1czogZmFsc2UsCiAgICAgICAgICAgIGJnT3BhY2l0eTonMC45NScsCiAgICAgICAgICAgIGNsb3NlT25TY3JvbGw6IGZhbHNlLAogICAgICAgICAgICBzaG93QW5pbWF0aW9uRHVyYXRpb246IDMwMCwKICAgICAgICAgICAgaGlkZUFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsCiAgICAgICAgICAgIC8vY2FwdGlvbkVsOiBmYWxzZSwKICAgICAgICAgICAgc2hhcmVFbDogZmFsc2UsCiAgICAgICAgICAgIHBpbmNoVG9DbG9zZTogZmFsc2UsCiAgICAgICAgICAgIGNsb3NlT25WZXJ0aWNhbERyYWc6IGZhbHNlCiAgICAgICAgfTsKCiAgICAgICAgdmFyIGdhbGxlcnkgPSBuZXcgUGhvdG9Td2lwZShwc3dwRWxlbWVudCwgUGhvdG9Td2lwZVVJX0RlZmF1bHQsIGl0ZW1zLCBvcHRpb25zKTsKCiAgICAgICAgZ2FsbGVyeS5pbml0KCk7CiAgICAgICAgZ2FsbGVyeS5nb1RvKGluZGV4KTsKCiAgICAgICAgZ2FsbGVyeS5saXN0ZW4oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICQoJyNkaWFwb3JhbWFfZGV0YWlsJykuY3ljbGUoJ3Jlc3VtZScpOwogICAgICAgIH0pOwogICAgfTsKCiAgICAkKCcjZGlhcG9yYW1hX2RldGFpbCAjZnVsbFNjcm4nKS5vbiggJ2NsaWNrJywgZnVuY3Rpb24oKXsKCiAgICAgICAgdmFyIGluZGV4ID0gJCgnI2RpYXBvcmFtYV9kZXRhaWwnKS5kYXRhKCJjeWNsZS5vcHRzIikuY3VyclNsaWRlOwoKICAgICAgICBvcGVuUGhvdG9Td2lwZShpbmRleCk7CgogICAgICAgICQoJyNkaWFwb3JhbWFfZGV0YWlsJykuY3ljbGUoJ3BhdXNlJyk7CiAgICB9KTsKCiAgICAkKCcjc2hhcmVtZScpLnNoYXJycmUoewogICAgICAgICAgICAgICAgICAgIHNoYXJlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR3aXR0ZXI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2Vib29rOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBnb29nbGVQbHVzOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBwaW50ZXJlc3Q6dHJ1ZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogewogICAgICAgICAgICAgICAgICAgICAgICBwaW50ZXJlc3Q6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhOiAnaHR0cHM6Ly93d3cubG9yZXRvaW1tb2JpbGllci5jb20vJy5yZXBsYWNlKC9cLyQvLCAnJykgKyAnLycgKyAnL2RhdGFzL2JpZW5zL3RodW1icy81MzAvNTMwXzAwLTIwMjAtMDItMTEtMjE0NS5qcGcnLnJlcGxhY2UoL15cLy8sICcnKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogICAnPHVsPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iZmFjZWJvb2siIHRpdGxlPSJQYXJ0YWdlciBzdXIgRmFjZWJvb2siPjwvYT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InR3aXR0ZXIiIHRpdGxlPSJQYXJ0YWdlciBzdXIgVHdpdHRlciI+PC9hPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iZ29vZ2xlcGx1cyIgdGl0bGU9IlBhcnRhZ2VyIHN1ciBHb29nbGUgKyI+PC9hPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0icGludGVyZXN0IiB0aXRsZT0iUGFydGFnZXIgc3VyIFBpbnRlcmVzdCI+PC9hPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+JywKICAgICAgICAgICAgICAgICAgICB1cmxDdXJsOiAnJywgICAgLy8gIGRpc2FibGUgc2hhcnJyZS5waHAKICAgICAgICAgICAgICAgICAgICBlbmFibGVIb3ZlcjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgZW5hYmxlVHJhY2tpbmc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24oYXBpLCBvcHRpb25zKXsKICAgICAgICAgICAgICAgICAgICAgICAgJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy50d2l0dGVyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5vcGVuUG9wdXAoJ3R3aXR0ZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcuZmFjZWJvb2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLm9wZW5Qb3B1cCgnZmFjZWJvb2snKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcuZ29vZ2xlcGx1cycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkub3BlblBvcHVwKCdnb29nbGVQbHVzJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLnBpbnRlcmVzdCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkub3BlblBvcHVwKCdwaW50ZXJlc3QnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7Cgp9KTsKPC9zY3JpcHQ+Cjxmb290ZXIgY2xhc3M9InRoaW4iPgogICAgPGRpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3RvcCI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWdlbmNlc19mb290ZXIiIGhyZWY9Ii9mci9hZ2VuY2UtaW1tb2JpbGllcmUtZGUtbHV4ZS1jb250YWN0LWxvcmV0by1pbW1vYmlsaWVyLyIgdGl0bGU9IkxvcmV0byBJbW1vYmlsaWVyIj4KICAgICAgICAgICAgICAgICAgICBMb3JldG8gaW1tb2JpbGllcgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhZHJlc3NlIj4KICAgICAgICAgICAgICAgICAgICAzMCBydWUgRGF1cGhpbmUsIDc1MDA2IFBBUklTIC0gKzMzICgwKTEgNDYgMzQgMjYgMDAKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvcmV0b2ltbW9iaWxpZXIuY29tLyZtb2JpbGU9MSIgdGl0bGU9IlNpdGUgbW9iaWxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZSBtb2JpbGUKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4tCiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1lbnRpb25zX2Zvb3RlciIgaHJlZj0iL2ZyL21lbnRpb25zLWxlZ2FsZXMtbG9yZXRvLWltbW9iaWxpZXIvIiB0aXRsZT0iSW5mb3JtYXRpb25zIGp1cmlkaXF1ZXMgTG9yZXRvIGltbW9iaWxpZXIiPgogICAgICAgICAgICAgICAgICAgICAgICBNZW50aW9ucyBsw6lnYWxlcwogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPi0KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0aXRsZT0iIiBjbGFzcz0iZmFjZWJvb2sgcmVzZWF1eF9zb2NpYXV4IiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvdXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhvdmVyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIHRpdGxlPSIiIGNsYXNzPSJ0d2l0dGVyIHJlc2VhdXhfc29jaWF1eCIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib3V0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJob3ZlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0aXRsZT0iIiBjbGFzcz0iZ29vZ2xlIHJlc2VhdXhfc29jaWF1eCIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib3V0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJob3ZlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0aXRsZT0iIiBjbGFzcz0ieW91dHViZSByZXNlYXV4X3NvY2lhdXgiIHRhcmdldD0iX2JsYW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im91dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaG92ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9mb290ZXI+CgoJCjwvZGl2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBpZiAoICQod2luZG93KS53aWR0aCgpIDwgNzY4KSB7CiAgICAgICAgJCgnbWV0YVtuYW1lPXZpZXdwb3J0XScpLmF0dHIoJ2NvbnRlbnQnLCd3aWR0aD03MjAsdXNlci1zY2FsYWJsZT1ubycpOwogICAgfQo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGYgPSAkKCdmb290ZXInKTsKICAgICAgICBpZiAoZi5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHZhciBtaW5IZWlnaHQgPSAkKHdpbmRvdykub3V0ZXJIZWlnaHQodHJ1ZSktKCQoJ2hlYWRlcicpLm91dGVySGVpZ2h0KHRydWUpKyQoJ2Zvb3RlcicpLm91dGVySGVpZ2h0KHRydWUpKyQoJyNtYWluID4gc2VjdGlvbicpLm91dGVySGVpZ2h0KHRydWUpKTsKICAgICAgICAgICAgaWYobWluSGVpZ2h0ID4gMCl7CiAgICAgICAgICAgICAgICAkKCcjbWFpbicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6JCh3aW5kb3cpLm91dGVySGVpZ2h0KHRydWUpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgJCgnI2Vycm9yX2NvbnRlbnQnKS5jc3Moe2hlaWdodDokKHdpbmRvdykub3V0ZXJIZWlnaHQodHJ1ZSktJCgnaGVhZGVyJykub3V0ZXJIZWlnaHQodHJ1ZSktNDB9KTsKICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjonYWJzb2x1dGUnLCAnYm90dG9tJzonMCd9KTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAkKCcjbWFpbicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6J2luaGVyaXQnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjoncmVsYXRpdmUnfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJCgnLmFjY3VlaWwtZGVmYXVsdCcpLmxlbmd0aD4wKXsKICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjoncmVsYXRpdmUnfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBtaW5IZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCktKCQoJ2hlYWRlcicpLmhlaWdodCgpKyQoJ2Zvb3RlcicpLmhlaWdodCgpKyQoJyNtYWluID4gc2VjdGlvbicpLmhlaWdodCgpKTsKICAgICAgICAgICAgaWYobWluSGVpZ2h0ID4gMCl7CiAgICAgICAgICAgICAgICAkKCcjbWFpbicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6JCh3aW5kb3cpLmhlaWdodCgpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgJCgnI2Vycm9yX2NvbnRlbnQnKS5jc3Moe2hlaWdodDokKHdpbmRvdykuaGVpZ2h0KCktJCgnaGVhZGVyJykuaGVpZ2h0KCktNDB9KTsKICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjonYWJzb2x1dGUnLCAnYm90dG9tJzonMCd9KTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAkKCcjbWFpbicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6J2luaGVyaXQnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjoncmVsYXRpdmUnfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pOwoKPC9zY3JpcHQ+Cgo8L2JvZHk+CjwvaHRtbD4K
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:28:59 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2528/vente-appartement-3-pieces-2-chambres-paris-75005/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:28:59 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=9ljqm9947ktksql5v1118744r7; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:28:59 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2521/vente-appartement-4-pieces-2-chambres-paris-75008/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:29:00 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=uqtkscft52554u3polpdbvu8h3; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:29:00 GMT
- request:
    method: get
    uri: https://www.loretoimmobilier.com/fr/vente-location-maison-appartement-paris/ref-gc93-2444/vente-appartement-8-pieces-3-chambres-paris-75008/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 14 Apr 2020 12:29:00 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=d6l6ulqt6kr9s4589q35in25n5; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 14 Apr 2020 12:29:00 GMT
recorded_with: VCR 5.1.0
