---
http_interactions:
- request:
    method: get
    uri: http://www.hempton-paris.com/a-vendre/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:11 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=irv7itngs1991sete9r9267k3u; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com/a-vendre/1
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:11 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/a-vendre/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:11 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=5pp5qn6s4o3nbg3l7ae3hb1aa8; path=/
      - SRV=c36; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '10434'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:11 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/a-vendre/2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:11 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=jv5flg547p302gskuvnur13ooq; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com/a-vendre/2
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:11 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/a-vendre/2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:11 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=8geb3oi0tcp1ljfs9jao9oair0; path=/
      - SRV=c36; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '7975'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:11 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1374-paris-xvieme-muette-trocadero.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=7dct4sk0f36a2rim9emb0iit4h; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com/1374-paris-xvieme-muette-trocadero.html
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/1374-paris-xvieme-muette-trocadero.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=57pihsup8hfm5ei5920e5pmtrh; path=/
      - SRV=c36; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '15340'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1378-paris-xvi-passy-studette.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=l0lj5ad4i6v2c21vbm7ie1v9c1; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com/1378-paris-xvi-passy-studette.html
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/1378-paris-xvi-passy-studette.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=12m81cmj8hb3djfkpfn88p1c6e; path=/
      - SRV=c36; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14498'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1340-paris-11-vente-studio-40-m-avec-parking.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=292p9gurnjon9vtt9r5dgiv2fp; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com/1340-paris-11-vente-studio-40-m-avec-parking.html
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/1340-paris-11-vente-studio-40-m-avec-parking.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=j0spe4bs32hob6quon96976a0s; path=/
      - SRV=c36; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '15014'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1269-bastille-republique-locaux-commerciaux-530m.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=m4v6upp00p3j38vs2napeqqc7v; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com/1269-bastille-republique-locaux-commerciaux-530m.html
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/1269-bastille-republique-locaux-commerciaux-530m.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=rkhvf995osedru0mrqkd73bte7; path=/
      - SRV=c36; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14390'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1291-rare-paris-xvieme-5-pieces-3-chambres-prestige.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=n1p3g854o9imkskthj07hj4vqk; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com/1291-rare-paris-xvieme-5-pieces-3-chambres-prestige.html
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/1291-rare-paris-xvieme-5-pieces-3-chambres-prestige.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 302
      message: Found
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=obk002c35tlpjm0ehuomeduhri; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=7ckrs4jeejd7frl4e03jl6o4r7; path=/
      - SRV=c36; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '6170'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1223-paris-quartier-place-vendoeme-5-pieces-prestige.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=vgdd9jsng8rumnkjoj48efkb1v; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com/1223-paris-quartier-place-vendoeme-5-pieces-prestige.html
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:12 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/1223-paris-quartier-place-vendoeme-5-pieces-prestige.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:12 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=3f2v1nugli0b68mbdhgdjtcror; path=/
      - SRV=c36; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13754'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:13 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1326-superbe-appartement-4-pieces-auteuil-nord.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:13 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=7rnhj9qdgaghh1jsb9dcs8jqfd; path=/
      - SRV=c36; path=/
      Location:
      - https://www.hempton-paris.com/1326-superbe-appartement-4-pieces-auteuil-nord.html
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '0'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:13 GMT
- request:
    method: get
    uri: https://www.hempton-paris.com/1326-superbe-appartement-4-pieces-auteuil-nord.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jun 2020 14:57:13 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200612.rev2
      Set-Cookie:
      - PHPSESSID=ku4m1amc318hk2slolmgrcq2u8; path=/
      - SRV=c36; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13218'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Jun 2020 14:57:13 GMT
recorded_with: VCR 5.1.0
