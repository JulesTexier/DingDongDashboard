---
http_interactions:
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes?order=news%7Cdesc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:53 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=pn8ibecv02161rd498flt7r2m5; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '8624'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:53 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-2-pieces-paris-18eme-grandes-carrieres-75018-3645248
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:53 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=gegrhs2mint8dmoordeoograa6; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12110'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:53 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-3-pieces-paris-19eme-75019-3677720
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:53 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=3g04mslr9vcimd1en53phh0sj1; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12479'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:54 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-2-pieces-paris-20eme-charonne-75020-3671888
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:54 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=1g13bsa7688g6pin6luh2st4q2; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12581'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:54 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-3-pieces-paris-20eme-saint-fargeau-75020-3663078
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:54 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=f5kijspe5ni0lj2jfmrhvhdrt4; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12828'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:54 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-1-piece-paris-11eme-75011-3672521
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:54 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=sv73fo8rkrqr7ccbvjocln5065; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12203'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:54 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-1-piece-paris-18eme-grandes-carrieres-75018-3634844
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:54 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=vjvvopjt456182bsao4avlcb42; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12260'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:54 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-2-pieces-paris-3eme-arts-et-metiers-75003-3640093
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:54 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=cnbr4qqqp93iju0g0r83ujuhp0; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12497'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:54 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-4-pieces-paris-18eme-grandes-carrieres-75018-3678905
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:54 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=otceamo5q59gpr459i937hfae4; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '11976'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:54 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-4-pieces-paris-15eme-grenelle-75015
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:55 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=scvlud2tcsupkvdp79ntcp1ff0; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12292'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:55 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-4-pieces-paris-8eme-madeleine-75008-3665666
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:55 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=rccbanpigl6ffgephjamnbaai7; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12332'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:55 GMT
- request:
    method: get
    uri: http://www.terrasse-cie.com/fr/ventes/vente-appartement-3-pieces-paris-7eme-saint-thomas-d-aquin-75007-3615406
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Apr 2020 16:16:55 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=hva2q7n1ebrqbafjmho2gpnmv6; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '12793'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:16:55 GMT
recorded_with: VCR 5.1.0
