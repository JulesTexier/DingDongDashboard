---
http_interactions:
- request:
    method: get
    uri: https://www.assasimmobilier.com/vente-loft-hotel-particulier-appartement-paris-assas-immobilier/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:42 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=83p0l09ur8sgvs479p1beslu87; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:42 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-750/vente-appartement-2-pieces-1-chambre-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:42 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=bgtf0v7a6jcq9f6vs3o6j2et01; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:42 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-747/vente-appartement-5-pieces-3-chambres-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:42 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=m0r67ibqmlou29l3bmj0vguev3; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:42 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-748/vente-appartement-10-pieces-7-chambres-paris-75014/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:42 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=cdud9rsqa439rl4l42lg1rm2p5; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:42 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-720/vente-appartement-6-pieces-4-chambres-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:43 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=c8v5porq7ae95kq4ufm4l531l1; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:43 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-746/vente-appartement-3-pieces-1-chambre-paris-75007/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:43 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=2tdvtadliqj7ci0s7ptcbkh9u1; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCI+CjxoZWFkPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ii8+CgogICAgPHRpdGxlPlZlbnRlIEFwcGFydGVtZW50IFBhcmlzIDcgU09VUyBPRkZSRSAtIEdST1MgQ0FJTExPVSAtIEFzc2FzIEltbW9iaWxpZXI8L3RpdGxlPgoKICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJEw6l0YWlscyBkZSBsJ2Fubm9uY2UgaW1tb2JpbGnDqHJlIHZlbnRlIGFwcGFydGVtZW50IDMgcGnDqGNlcyBQQVJJUyA3NTAwNyAxIGNoYW1icmUgNjQgbcKyIFByaXggNzYwIDAwMCDigqwgUsOpZsOpcmVuY2UgRFQxLTc0NiIvPgogICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9IkFjaGF0LHZlbnRlLGFjaGV0ZXIsdmVuZHJlLGVzdGltZXIsYXBwYXJ0ZW1lbnQsbG9mdCxtYWlzb24saG90ZWwgcGFydGljdWxpZXIsZXN0aW1hdGlvbixncmF0dWl0ZSxob21lIHN0YWdpbmcsQXNzYXMgSW1tb2JpbGllcixwYXJpcyxyaXZlIGdhdWNoZSw3NTAwNiwgNzUwMDUsNzUwMDcsNzUwMTQsNzUwMTUsSW1tb2JpbGllcixhZ2VuY2UgaW1tb2JpbGnDqHJlLGltbW9iaWxpZXJzLGJpZW4gaW1tb2JpbGllciwgbW9udHBhcm5hc3NlLCB2YXZpbiwgcmFzcGFpbCIgLz4KICAgIDxtZXRhIG5hbWU9InJldmlzaXQtYWZ0ZXIiIGNvbnRlbnQ9IjEwIGRheXMiIC8+CiAgICA8bWV0YSBuYW1lID0iZm9ybWF0LWRldGVjdGlvbiIgY29udGVudCA9ICJ0ZWxlcGhvbmU9bm8iIC8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIiBjb250ZW50PSJ5ZXMiLz4KICAgIDxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLXRpdGxlIiBjb250ZW50PSJBc3NhcyBJbW1vYmlsaWVyIi8+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoIi8+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+CgoJPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CjxzY3JpcHQ+KGZ1bmN0aW9uKHcsZCxzLGwsaSl7d1tsXT13W2xdfHxbXTt3W2xdLnB1c2goeydndG0uc3RhcnQnOgpuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCmo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQonaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7Cn0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnZGF0YUxheWVyJywnR1RNLU40V1dQWksnKTs8L3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgoKCgogICAgPGJhc2UgaHJlZj0iaHR0cHM6Ly93d3cuYXNzYXNpbW1vYmlsaWVyLmNvbS8iIC8+CgogICAgPCEtLTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvanF1ZXJ5LTIuMS4xLm1pbi5qcyI+PC9zY3JpcHQ+LS0+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL2pxdWVyeS5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvU2NhbGVJbWFnZS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9qcXVlcnkuY3ljbGUyLm1pbi5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9qcXVlcnkubXVsdGlwbGUuc2VsZWN0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvanF1ZXJ5LnNoYXJycmUubWluLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vbXNkcm9wLmNzcyIgLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX2RlZmF1bHQvcmVzZXQuY3NzIiAvPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vcGhvdG9zd2lwZS5jc3MiIC8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2RlZmF1bHQtc2tpbi5jc3MiIC8+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9zdHlsZS5jc3M/MjAxODA2Mjg9Ii8+CgogICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSIiIGhyZWY9Imh0dHBzOi8vbS5hc3Nhc2ltbW9iaWxpZXIuY29tL2Fubm9uY2UtdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyL3JlZi1kdDEtNzQ2L3ZlbnRlLWFwcGFydGVtZW50LTMtcGllY2VzLTEtY2hhbWJyZS1wYXJpcy03NTAwNy8iIC8+CgogICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2Zhdmljb24uaWNvIiAvPgoKICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvYXBwbGVUb3VjaEljb242MC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iNzZ4NzYiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2FwcGxlVG91Y2hJY29uNzYucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjEyMHgxMjAiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2FwcGxlVG91Y2hJY29uMTIwLnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxNTJ4MTUyIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjE1Mi5wbmciPgoKICAgIDxtZXRhIG5hbWU9ImFwcGxpY2F0aW9uLW5hbWUiIGNvbnRlbnQ9IkFzc2FzIEltbW9iaWxpZXIiIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIgY29udGVudD0iIzAzNDY4YSIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlNzB4NzBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9tc1RvdWNoL3NtYWxsdGlsZS03MHg3MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTE1MHgxNTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9tc1RvdWNoL21lZGl1bXRpbGUtMTUweDE1MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXdpZGUzMTB4MTUwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvbXNUb3VjaC93aWRldGlsZS0zMTB4MTUwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlMzEweDMxMGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL21zVG91Y2gvbGFyZ2V0aWxlLTMxMHgzMTAucG5nIiAvPgoKICAgIDwhLS1baWYgSUUgXT48c2NyaXB0IHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9tb2Rlcm5penIuY3VzdG9tLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHRlIElFIDldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvcGxhY2Vob2xkZXJzLm1pbi5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIChndGUgSUUgNikmKGx0ZSBJRSA4KV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9zZWxlY3Rpdml6ci1taW4uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdCBJRSA5XT48c2NyaXB0IHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9jc3MzLW1lZGlhcXVlcmllcy5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CgogICAgPGxpbmsgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUFsZWdyZXlhJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4KCgoKPC9oZWFkPgo8IS0tW2lmIGx0IElFIDddPiA8Ym9keSBjbGFzcz0iaWUgaWU2IGllN18gaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA3XT4gICAgPGJvZHkgY2xhc3M9ImllIGllNyBpZTdfIGllOF8gaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTggaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA5XT4gICAgPGJvZHkgY2xhc3M9ImllIGllOSBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBndCBJRSA5XT4gPGJvZHk+PCFbZW5kaWZdLS0+CjwhLS1baWYgIUlFXT48IS0tPjxib2R5PjwhLS08IVtlbmRpZl0tLT4KCTwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+Cjxub3NjcmlwdD48aWZyYW1lIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vbnMuaHRtbD9pZD1HVE0tTjRXV1BaSyIgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+PC9pZnJhbWU+PC9ub3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+Cgo8ZGl2IGlkPSJtYWluIiBjbGFzcz0iYW5ub25jZXMtZGVmYXVsdCI+CiAgICA8aGVhZGVyPgogICAgPGRpdiBjbGFzcz0idG9wX2hlYWRlciI+CiAgICAgICAgPGRpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nbyI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuYXNzYXNpbW1vYmlsaWVyLmNvbS8iIHRpdGxlPSJBc3NhcyBJbW1vYmlsaWVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2xvZ28ucG5nIiBhbHQ9IkFzc2FzIEltbW9iaWxpZXIgLSBBY2hhdCB2ZW50ZSBhcHBhcnRlbWVudCBwYXJpcyByaXZlIGdhdWNoZSIvPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxuYXY+CiAgICA8dWwgY2xhc3M9Im1haW5NZW51Ij4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iIHRpdGxlPSJJbW1vYmlsaWVyIFBhcmlzIDc1MDA2IEFzc2FzIGltbW9iaWxpZXIiIGNsYXNzPSJpY29faG9tZSI+PC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkltbW9iaWxpZXIgZW4gVmVudGUgQXNzYXMgaW1tb2JpbGllciIgY2xhc3M9IiI+RW4gdmVudGU8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9lc3RpbWF0aW9uLWFwcGFydGVtZW50LWR1cGxleC1ob3RlbC1wYXJ0aWN1bGllci1wYXJpcy03NTAwNi8iIHRpdGxlPSJFc3RpbWVyIHZvdHJlIGJpZW4gc3VyIFBhcmlzIiBjbGFzcz0iIj5Fc3RpbWF0aW9uPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvcGxhbi1tZWRpYS1hY3R1YWxpdGUtYXNzYXMtaW1tb2JpbGllci8iIHRpdGxlPSJBY3R1YWxpdMOpcyBBc3NhcyBpbW1vYmlsaWVyIiBjbGFzcz0iIj5QbGFuIG3DqWRpYTwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2JpZW5zLXZlbmR1cy1hcHBhcnRlbWVudC1tYWlzb24tYXNzYXMtaW1tb2JpbGllci1wYXJpcy03NTAwNi8iIHRpdGxlPSJCaWVucyB2ZW5kdXMgcGFyIEFzc2FzIGltbW9iaWxpZXIiIGNsYXNzPSIiPk5vcyB2ZW50ZXM8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9ob21lLXN0YWdpbmctYXNzYXMtaW1tb2JpbGllci1wYXJpcy8iIHRpdGxlPSJIb21lIFN0YWdpbmcgQXNzYXMgaW1tb2JpbGllciIgY2xhc3M9IiI+SG9tZSBzdGFnaW5nPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvY29udGFjdC1hZ2VuY2UtaW1tb2JpbGllcmUtYXNzYXMtaW1tb2JpbGllci8iIHRpdGxlPSJDb250YWN0ZXogbOKAmWFnZW5jZSBpbW1vYmlsacOocmUgQXNzYXMgaW1tb2JpbGllciIgY2xhc3M9IiI+Tm91cyBjb250YWN0ZXI8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8c3BhbiBjbGFzcz0ibGFzdFNwYW4iPjwvc3Bhbj4KICAgIDwvdWw+CiAgICA8dWwgY2xhc3M9InNlY29uZE1lbnUiPgogICAgICAgIDxsaSBjbGFzcz0ibW90ZXVyX2hlYWRlciI+CiAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VsZWN0aW9uX2hlYWRlciI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9tYS1zZWxlY3Rpb24tYW5ub25jZXMtaW1tb2JpbGllcmVzLWFzc2FzLyIgdGl0bGU9IlPDqWxlY3Rpb25uZXIgYW5ub25jZSBpbW1vYmlsacOocmUiIGNsYXNzPSJzZWxlY3Rpb24iPgogICAgICAgICAgICAgICAgTWEgc8OpbGVjdGlvbiA6CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmJfc2VsZWN0aW9uIj4wPC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgPC91bD4KICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KPC9uYXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICQoJy5pY29fbWVudScpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQoJ2hlYWRlciA+IGRpdiBuYXYgdWwubWFpbk1lbnUnKS5zbGlkZVRvZ2dsZSgyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICBpZigkKCdzZWN0aW9uJykuaGVpZ2h0KCk+Mzg5KXsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnaGVhZGVyID4gZGl2IG5hdiB1bC5tYWluTWVudScpLmNzcygnaGVpZ2h0JywgJCgnc2VjdGlvbicpLmhlaWdodCgpKTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9KSgpOwogICAgfSk7Cjwvc2NyaXB0PgoKCgoKICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb19tZW51Ij48L3NwYW4+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iZm9ybV9oZWFkZXIiPgogICAgPGRpdj4KICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX2Nsb3NlX2hlYWRlciI+PC9zcGFuPgogICAgICAgIDxmb3JtIGlkPSJtb3RldXJfZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii92ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvIj4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJtdWx0aSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJnZW9fbXVsdGkiPlZpbGxlczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iZ2VvX211bHRpIiBuYW1lPSJnZW9fbXVsdGlbXSIgbXVsdGlwbGU9Im11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwNTtwYXJpcyIgPlBBUklTIC0gNzUwMDU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwNjtwYXJpcyIgPlBBUklTIC0gNzUwMDY8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwNztwYXJpcyIgPlBBUklTIC0gNzUwMDc8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAxNDtwYXJpcyIgPlBBUklTIC0gNzUwMTQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJtdWx0aSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjYXRlZ29yeSI+VHlwZSBkZSBiaWVuPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImNhdGVnb3J5IiBuYW1lPSJjYXRlZ29yeVtdIiAgbXVsdGlwbGU9Im11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJBcHBhcnRtZW50IiA+QXBwYXJ0ZW1lbnQ8L29wdGlvbj4KICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9Im11bHRpIHN1cmZhY2UiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3VyZmFjZSIgaWQ9InN1cmZhY2VfbWluIiB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdXJmYWNlX21heCIgaWQ9InN1cmZhY2VfbWF4IiB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzdXJmYWNlIj5TdXBlcmZpY2llPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJzZWxlY3Rfc3VyZmFjZSIgbmFtZT0ic3VyZmFjZVtdIiBtdWx0aXBsZT0ibXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwLDUwIj4mbHNhcXVvOyA1MCBtwrI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNTAsMTAwIj41MCBtwrIgLSAxMDAgbcKyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwMCwxNTAiPjEwMCBtwrIgLSAxNTAgbcKyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE1MCwyMDAiPjE1MCBtwrIgLSAyMDAgbcKyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMCwiPiZyc2FxdW87IDIwMCBtwrI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9Im11bHRpIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImNoYW1icmVzX211bHRpIj5OYnJlIGNoYW1icmVzPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImNoYW1icmVzX211bHRpIiBtdWx0aXBsZT0ibXVsdGlwbGUiIG5hbWU9ImNoYW1icmVzW10iPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEiID4xPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMiIgPjI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIzIiA+Mzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjQiID40PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNSIgPjUgZXQgcGx1czwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibWluIiBpZD0iYnVkZ2V0X21pbiIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1heCIgaWQ9ImJ1ZGdldF9tYXgiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJidWRnZXQiPkJ1ZGdldDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJzZWxlY3RfYnVkZ2V0IiBuYW1lPSJidWRnZXRbXSIgbXVsdGlwbGU9Im11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwLDUwMDAwMCI+JmxzYXF1bzsgNTAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI1MDAwMDAsODAwMDAwIj41MDAgMDAwIOKCrCAtIDgwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iODAwMDAwLDEyMDAwMDAiPjgwMCAwMDAg4oKsIC0gMSAyMDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEyMDAwMDAsMTUwMDAwMCI+MSAyMDAgMDAwIOKCrCAtIDEgNTAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxNTAwMDAwLDE4MDAwMDAiPjEgNTAwIDAwMCDigqwgLSAxIDgwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTgwMDAwMCwyNDAwMDAwIj4xIDgwMCAwMDAg4oKsIC0gMiA0MDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjI0MDAwMDAsMzAwMDAwMCI+MiA0MDAgMDAwIOKCrCAtIDMgMDAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIzMDAwMDAwLCI+JnJzYXF1bzsgMyAwMDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0icmVmZXJlbmNlIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJiaWVuX3JlZiI+UsOpZsOpcmVuY2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiBwbGFjZWhvbGRlcj0iUsOpZsOpcmVuY2UiIHZhbHVlPSIiIGNsYXNzPSJ2YWxldXIiLz4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icCIgaWQ9InAiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im5ld19yZXNlYXJjaCIgaWQ9Im5ld19yZXNlYXJjaCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlY2hhcmdlTVIiIGlkPSJyZWNoYXJnZU1SIiB2YWx1ZT0iMCIgLz4KICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJSZWNoZXJjaGVyIiAvPgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgIDwvZm9ybT4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL21vdGV1cl94aHJfbGlzdGNpdGllcy5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KLy88IVtDREFUQVsKCiAgICAvLyAkKCcjc2VsZWN0X2J1ZGdldCcpLm9uKCdjaGFuZ2UnLGZ1bmN0aW9uKCkgewoKICAgIC8vICAgICAgICAgdmFyIHZhbGV1ciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLnNlbGVjdF9idWRnZXQudmFsdWU7CiAgICAvLyAgICAgICAgIGlmICh2YWxldXIuaW5kZXhPZignLCcsMCkgPiAwKQogICAgLy8gICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICB2YXIgdGFidmFsID0gdmFsZXVyLnNwbGl0KCcsJyk7CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5idWRnZXRfbWluLnZhbHVlID0gdGFidmFsWzBdOwogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuYnVkZ2V0X21heC52YWx1ZSA9IHRhYnZhbFsxXTsKICAgIC8vICAgICAgICAgfQogICAgLy8gICAgICAgICBlbHNlCiAgICAvLyAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9taW4udmFsdWUgPSAnJzsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9tYXgudmFsdWUgPSAnJzsKICAgIC8vICAgICAgICAgfQoKICAgIC8vIH0pOwoKCiAgICAvLyAkKCcuc3VyZmFjZSBpbnB1dCcpLm9uKCdjaGFuZ2UnLGZ1bmN0aW9uKCkgewogICAgLy8gICAgICAgICBjb25zb2xlLmxvZygnaWNpJyk7CiAgICAvLyAgICAgICAgIHZhciB2YWxldXIgPSB0aGlzLnZhbHVlOwogICAgLy8gICAgICAgICBjb25zb2xlLmxvZyh2YWxldXIpOwogICAgLy8gICAgICAgICBpZiAodmFsZXVyLmluZGV4T2YoJywnLDApID4gMCkKICAgIC8vICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgdmFyIHRhYnZhbCA9IHZhbGV1ci5zcGxpdCgnLCcpOwogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuc3VyZmFjZV9taW4udmFsdWUgPSB0YWJ2YWxbMF07CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5zdXJmYWNlX21heC52YWx1ZSA9IHRhYnZhbFsxXTsKICAgIC8vICAgICAgICAgfQogICAgLy8gICAgICAgICBlbHNlCiAgICAvLyAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLnN1cmZhY2VfbWluLnZhbHVlID0gJyc7CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5zdXJmYWNlX21heC52YWx1ZSA9ICcnOwogICAgLy8gICAgICAgICB9CgogICAgLy8gfSk7CgogICAgdmFyIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAkKCcubW90ZXVyX2hlYWRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7CiAgICAgICAgaWYobW90ZXVyT3BlbiA9PSBmYWxzZSl7CgogICAgICAgICAgICBtb3RldXJPcGVuID0gdHJ1ZTsKCiAgICAgICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlRG93bigyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOid2aXNpYmxlJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgbW90ZXVyT3BlbiA9IGZhbHNlOwoKICAgICAgICAgICAgJCgnLmZvcm1faGVhZGVyJykuc2xpZGVVcCgyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOidoaWRkZW4nCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgIH0KCiAgICB9KTsKCiAgICAkKCcuaWNvX2Nsb3NlX2hlYWRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7CgogICAgICAgIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAgICAgJCgnLmZvcm1faGVhZGVyJykuc2xpZGVVcCgyMDApOwoKICAgIH0pOwoKICAgICQoJyNnZW9fbXVsdGknKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICdMb2NhbGlzYXRpb24nLAogICAgICAgIGNvdW50U2VsZWN0ZWQ6JycsCiAgICAgICAgbm9NYXRjaGVzRm91bmQ6JycsCiAgICAgICAgYWxsU2VsZWN0ZWQ6ICcnLAogICAgICAgIHNlbGVjdEFsbDogJycKICAgIH0pOwoKICAgICAkKCcjZ2VvX3NlY3RldXInKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICJTZWN0ZXVyIiwKICAgICAgICBjb3VudFNlbGVjdGVkOicnLAogICAgICAgIG5vTWF0Y2hlc0ZvdW5kOicnLAogICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICBzZWxlY3RBbGw6ICcnCiAgICB9KTsKCiAgICAkKCcjY2hhbWJyZXNfbXVsdGknKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICJOYnJlIGNoYW1icmVzIiwKICAgICAgICBjb3VudFNlbGVjdGVkOicnLAogICAgICAgIG5vTWF0Y2hlc0ZvdW5kOicnLAogICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICBzZWxlY3RBbGw6ICcnCiAgICB9KTsKCiAgICAkKCcjY2F0ZWdvcnknKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICJUeXBlIGRlIGJpZW4iLAogICAgICAgIGNvdW50U2VsZWN0ZWQ6JycsCiAgICAgICAgbm9NYXRjaGVzRm91bmQ6JycsCiAgICAgICAgYWxsU2VsZWN0ZWQ6ICcnLAogICAgICAgIHNlbGVjdEFsbDogJycKICAgIH0pOwoKICAgIC8vICAKICAgIChmdW5jdGlvbigpewogICAgICAgIHZhciBmbkNoZWNrID0gZnVuY3Rpb24obWluVmFsLG1heFZhbCl7CiAgICAgICAgICAgIGlmICgobWluVmFsID09IG51bGwgfHwgbWluVmFsLmxlbmd0aCA9PSAwKQogICAgICAgICAgICAgICAgJiYgKG1heFZhbCA9PSBudWxsIHx8IG1heFZhbC5sZW5ndGggPT0gMCkpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHZhciBvYmpTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0X3N1cmZhY2UnKTsKICAgICAgICAgICAgdmFyIHRvU2VsZWN0cyA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ialNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgIHZhciBzcGxpdFZhbCA9IG9ialNlbGVjdC5vcHRpb25zW2ldLnZhbHVlLnNwbGl0KC8sLyk7CiAgICAgICAgICAgICAgICBpZiAoKG1pblZhbCA9PSBudWxsIHx8IG1pblZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFswXSkgPj0gcGFyc2VJbnQobWluVmFsKSkKICAgICAgICAgICAgICAgICAgICAmJiAobWF4VmFsID09IG51bGwgfHwgbWF4VmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzFdKSA8PSBwYXJzZUludChtYXhWYWwpKSl7CiAgICAgICAgICAgICAgICAgICAgb2JqU2VsZWN0Lm9wdGlvbnNbaV0uc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHRvU2VsZWN0cy5wdXNoKG9ialNlbGVjdC5vcHRpb25zW2ldLnZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdG9TZWxlY3RzOwogICAgICAgIH0KICAgICAgICBmbkNoZWNrKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnN1cmZhY2VfbWluLnZhbHVlLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnN1cmZhY2VfbWF4LnZhbHVlKTsKICAgICAgICAvLyAgCiAgICAgICAgJCgnI3NlbGVjdF9zdXJmYWNlJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgICAgICBwbGFjZWhvbGRlcjogIlN1cGVyZmljaWUiLAogICAgICAgICAgICBzZWxlY3RBbGw6ICcnLAogICAgICAgICAgICBhbGxTZWxlY3RlZDogJycsCiAgICAgICAgICAgIGNvdW50U2VsZWN0ZWQ6IGZhbHNlLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAgICAgdmFyIG9ialNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3Rfc3VyZmFjZScpOwogICAgICAgICAgICAgICAgdmFyIG1pblZhbCA9ICcnOwogICAgICAgICAgICAgICAgdmFyIG1heFZhbCA9ICcnOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpTZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9ialNlbGVjdC5vcHRpb25zW2ldLnNlbGVjdGVkKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGl0VmFsID0gb2JqU2VsZWN0Lm9wdGlvbnNbaV0udmFsdWUuc3BsaXQoLywvKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pblZhbCA9PSBudWxsIHx8IG1pblZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFswXSkgPCBwYXJzZUludChtaW5WYWwpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluVmFsID0gc3BsaXRWYWxbMF07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGxpdFZhbFsxXS5sZW5ndGggPT0gMCB8fCBtYXhWYWwgPT0gbnVsbCB8fCBtYXhWYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMV0pID4gcGFyc2VJbnQobWF4VmFsKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFZhbCA9IHNwbGl0VmFsWzFdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQoJyNtb3RldXJfZm9ybSBpbnB1dFtuYW1lPSJzdXJmYWNlIl0nKS52YWwobWluVmFsKTsKICAgICAgICAgICAgICAgICQoJyNtb3RldXJfZm9ybSBpbnB1dFtuYW1lPSJzdXJmYWNlX21heCJdJykudmFsKG1heFZhbCk7CiAgICAgICAgICAgICAgICAvLyAgCiAgICAgICAgICAgICAgICAkKCcjc2VsZWN0X3N1cmZhY2UnKS5tdWx0aXBsZVNlbGVjdCgnc2V0U2VsZWN0cycsZm5DaGVjayhtaW5WYWwsbWF4VmFsKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pKCk7CgogICAgLy8gIAogICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGZuQ2hlY2sgPSBmdW5jdGlvbihtaW5WYWwsbWF4VmFsKXsKICAgICAgICAgICAgaWYgKChtaW5WYWwgPT0gbnVsbCB8fCBtaW5WYWwubGVuZ3RoID09IDApCiAgICAgICAgICAgICAgICAmJiAobWF4VmFsID09IG51bGwgfHwgbWF4VmFsLmxlbmd0aCA9PSAwKSkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgdmFyIG9ialNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3RfYnVkZ2V0Jyk7CiAgICAgICAgICAgIHZhciB0b1NlbGVjdHMgPSBbXTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpTZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIgc3BsaXRWYWwgPSBvYmpTZWxlY3Qub3B0aW9uc1tpXS52YWx1ZS5zcGxpdCgvLC8pOwogICAgICAgICAgICAgICAgaWYgKChtaW5WYWwgPT0gbnVsbCB8fCBtaW5WYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMF0pID49IHBhcnNlSW50KG1pblZhbCkpCiAgICAgICAgICAgICAgICAgICAgJiYgKG1heFZhbCA9PSBudWxsIHx8IG1heFZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFsxXSkgPD0gcGFyc2VJbnQobWF4VmFsKSkpewogICAgICAgICAgICAgICAgICAgIG9ialNlbGVjdC5vcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB0b1NlbGVjdHMucHVzaChvYmpTZWxlY3Qub3B0aW9uc1tpXS52YWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRvU2VsZWN0czsKICAgICAgICB9CiAgICAgICAgZm5DaGVjayhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5idWRnZXRfbWluLnZhbHVlLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmJ1ZGdldF9tYXgudmFsdWUpOwogICAgICAgIC8vICAKICAgICAgICAkKCcjc2VsZWN0X2J1ZGdldCcpLm11bHRpcGxlU2VsZWN0KHsKICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJCdWRnZXQiLAogICAgICAgICAgICBzZWxlY3RBbGw6ICcnLAogICAgICAgICAgICBhbGxTZWxlY3RlZDogJycsCiAgICAgICAgICAgIGNvdW50U2VsZWN0ZWQ6IGZhbHNlLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAgICAgdmFyIG9ialNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3RfYnVkZ2V0Jyk7CiAgICAgICAgICAgICAgICB2YXIgbWluVmFsID0gJyc7CiAgICAgICAgICAgICAgICB2YXIgbWF4VmFsID0gJyc7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ialNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICBpZiAob2JqU2VsZWN0Lm9wdGlvbnNbaV0uc2VsZWN0ZWQpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXRWYWwgPSBvYmpTZWxlY3Qub3B0aW9uc1tpXS52YWx1ZS5zcGxpdCgvLC8pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluVmFsID09IG51bGwgfHwgbWluVmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzBdKSA8IHBhcnNlSW50KG1pblZhbCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5WYWwgPSBzcGxpdFZhbFswXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwbGl0VmFsWzFdLmxlbmd0aCA9PSAwIHx8IG1heFZhbCA9PSBudWxsIHx8IG1heFZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFsxXSkgPiBwYXJzZUludChtYXhWYWwpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4VmFsID0gc3BsaXRWYWxbMV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJCgnI21vdGV1cl9mb3JtIGlucHV0W25hbWU9Im1pbiJdJykudmFsKG1pblZhbCk7CiAgICAgICAgICAgICAgICAkKCcjbW90ZXVyX2Zvcm0gaW5wdXRbbmFtZT0ibWF4Il0nKS52YWwobWF4VmFsKTsKICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgICQoJyNzZWxlY3RfYnVkZ2V0JykubXVsdGlwbGVTZWxlY3QoJ3NldFNlbGVjdHMnLGZuQ2hlY2sobWluVmFsLG1heFZhbCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KSgpOwoKCiAgICBtb3RldXJfeGhyX2xpc3RjaXRpZXMoImdlb19zZWN0ZXVyO3RyYW5zYWM7dHlwZV9pbW1vO2FkZHJlc3NfZGVwYXJ0ZW1lbnQ7YWRkcmVzc19wYXlzIiwgdHJ1ZSwgIiIpOwoKICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CgoJCS8vYnVkZ2V0CiAgICAgICAgLy8gdmFyIGJ1ZGdldF9taW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5idWRnZXRfbWluLnZhbHVlOwogICAgICAgIC8vIHZhciBidWRnZXRfbWF4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuYnVkZ2V0X21heC52YWx1ZTsKICAgICAgICAvLyBpZiAoYnVkZ2V0X21pbiA9PSAnJykgYnVkZ2V0X21pbiA9ICcwJzsKICAgICAgICAvLyB2YXIgdmFsZXVyID0gYnVkZ2V0X21pbiArICcsJyArIGJ1ZGdldF9tYXg7CiAgICAgICAgLy8gaWYgKGJ1ZGdldF9taW4gIT0gJzAnIHx8IGJ1ZGdldF9tYXggIT0gJycpCiAgICAgICAgLy8gewogICAgICAgIC8vICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5zZWxlY3RfYnVkZ2V0LnZhbHVlID0gdmFsZXVyOwogICAgICAgIC8vIH07CgogICAgICAgIC8vc3VyZmFjZQogICAgICAgIC8vIHZhciBzdXJmYWNlX21pbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnN1cmZhY2VfbWluLnZhbHVlOwogICAgICAgIC8vIHZhciBzdXJmYWNlX21heCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnN1cmZhY2VfbWF4LnZhbHVlOwogICAgICAgIC8vIGlmIChzdXJmYWNlX21pbiA9PSAnJykgc3VyZmFjZV9taW4gPSAnMCc7CiAgICAgICAgLy8gdmFyIHZhbGV1ciA9IHN1cmZhY2VfbWluICsgJywnICsgc3VyZmFjZV9tYXg7CiAgICAgICAgLy8gaWYgKHN1cmZhY2VfbWluICE9ICcwJyB8fCBzdXJmYWNlX21heCAhPSAnJykKICAgICAgICAvLyB7CiAgICAgICAgLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnNlbGVjdF9zdXJmYWNlLnZhbHVlID0gdmFsZXVyOwogICAgICAgIC8vIH07CgogICAgICAgIGlmKCQoJyN0eXBlIG9wdGlvbicpLnNpemUoKTwzKXsKICAgICAgICAgICAgJCgnI3R5cGUgb3B0aW9uOm50aC1jaGlsZCgyKScpLmF0dHIoInNlbGVjdGVkIiwic2VsZWN0ZWQiKTsKICAgICAgICB9OwoKICAgICAgICBpZigiYW5ub25jZXMiPT0iYW5ub25jZXMiKXsKICAgICAgICAgICAgaWYoImRlZmF1bHQiPT0iY29ldXIiKXsKICAgICAgICAgICAgICAgICQoJyNtb3RldXJfZm9ybScpLmF0dHIoJ2FjdGlvbicsJy92ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvJyk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJCgnbW90ZXVyX2Zvcm0nKS5hdHRyKCdhY3Rpb24nLCcvYW5ub25jZS12ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvJyk7CiAgICAgICAgICAgIH0KICAgICAgIH1lbHNlewogICAgICAgICAgICAkKCdtb3RldXJfZm9ybScpLmF0dHIoJ2FjdGlvbicsJy92ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvJyk7CiAgICAgICB9CiAgICB9KTsKCi8vXV0+Cjwvc2NyaXB0PgoKPC9oZWFkZXI+CgoKCgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9qcXVlcnkuamNhcm91c2VsLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvcGhvdG9zd2lwZS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL3Bob3Rvc3dpcGUtdWktZGVmYXVsdC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvbWFqX3NlbGVjdGlvbi5qcyI+PC9zY3JpcHQ+CgogICAgPHNlY3Rpb24gaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9Qcm9kdWN0IiBpZD0iYW5ub25jZV9wcm9maWwiPgogICAgICAgIDxkaXYgY2xhc3M9ImxpbmtfYmFjayB0b3AiPgogICAgICAgIDwvZGl2PgoJCTxoMSBpdGVtcHJvcD0ibmFtZSI+VmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgNyBTT1VTIE9GRlJFIC0gR1JPUyBDQUlMTE9VPC9oMT4KICAgICAgICA8ZGl2IGNsYXNzPSJkaWFwb3JhbWFfdGh1bWJzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGlhcG9yYW1hX3Byb2ZpbCIgZGF0YS1jeWNsZS1wYWdlci10ZW1wbGF0ZT0iIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJzcGFjZXJCbG9ja2VyIGF1dG9TY2FsZSIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9zcGFjZXIucG5nIiBhbHQ9IiIvPgoJCQkJCTxpbWcgY2xhc3M9ImF1dG9TY2FsZSIgaXRlbXByb3A9ImltYWdlIiBzcmM9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wMC0yMDIwLTAyLTEzLTAxNDAuanBnIiBhbHQ9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA3KSIgdGl0bGU9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA3KSIvPjxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGh1bWJzX2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqY2Fyb3VzZWwtcHJldiBpbmFjdGl2ZSBpY29fZGV0YWlsX3ByZXYiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjeWNsZSIgZGF0YS1qY2Fyb3VzZWw9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYnMgY3ljbGUtcGFnZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ic3BhY2VyQmxvY2tlciBhdXRvU2NhbGUiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvc3BhY2VyLnBuZyIgYWx0PSIiLz4KCQkJCQkJCQkJPGltZyBjbGFzcz0iYXV0b1NjYWxlIiBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDYvMjQ2XzAwLTIwMjAtMDItMTMtMDE0MC5qcGciIGFsdD0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDcpIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDcpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImpjYXJvdXNlbC1uZXh0IGluYWN0aXZlIGljb19kZXRhaWxfbmV4dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCgkJCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQkJLy8gIEFkZExvYWRFdmVudAoJCQkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJCWZ1bmN0aW9uIEFkZExvYWRFdmVudChmdW5jKSB7CgkJCQl2YXIgb2xkb25sb2FkID0gd2luZG93Lm9ubG9hZDsKCQkJCWlmICh0eXBlb2Ygd2luZG93Lm9ubG9hZCAhPSAnZnVuY3Rpb24nKQoJCQkJeyB3aW5kb3cub25sb2FkID0gZnVuYzsgfQoJCQkJZWxzZSB7CgkJCQkJd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkgewoJCQkJCQlpZiAob2xkb25sb2FkKQoJCQkJCQl7IG9sZG9ubG9hZCgpOyB9CgkJCQkJCWZ1bmMoKTsKCQkJCQl9CgkJCQl9CgkJCX0KCiAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KICAgICAgICAgICAgICAgIC8qKioqKioqKioqUFVUIFRIRSBSQVRJTyAzLzIgT04gRElBUE8gQU5EIFRIVU1CUyoqKioqKioqKioqKioqKioqKi8KICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCQkJCShmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB3ID0gJCgnLmRpYXBvcmFtYV9wcm9maWwnKS53aWR0aCgpLzEuNTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLnRodW1ic19jb250YWluZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgLy9JTlNUQU5DRSBESUFQT1JBTUEgRklDSEUgQklFTgogICAgICAgICAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgPiBkaXYgPiBhIGltZycpKTsKCiAgICAgICAgICAgICAgICB9KSgpOwoKCiAgICAgICAgICAgICAgICAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKHsKICAgICAgICAgICAgICAgICAgICBzbGlkZXM6Jz4gZGl2LnNsaWRlJywKICAgICAgICAgICAgICAgICAgICBwYWdlcjonLmN5Y2xlLXBhZ2VyJywKICAgICAgICAgICAgICAgICAgICBtYW51YWxTcGVlZDo0MDAsCiAgICAgICAgICAgICAgICAgICAgZng6ICdmYWRlJywKICAgICAgICAgICAgICAgICAgICBzcGVlZDoyMDAwLAogICAgICAgICAgICAgICAgICAgIHN3aXBlOnRydWUKICAgICAgICAgICAgICAgIH0pOwoKCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqQUREIERJQVBPIDFTVCBTTElERSBUSEVOIFJFU1QgT0YgVEhFTSBBRlRFUiBMT0FEKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCShmdW5jdGlvbigpewoKCQkJCQl2YXIgc2xpZGVzID0gW107CgoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wMC0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wMS0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wMi0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wMy0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wNC0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wNS0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wNi0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wNy0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wOC0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wOS0yMDIwLTAyLTEzLTAxNDAuanBnIiwgYWx0OiJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNykiIH0pOwoKCQkJCQlpZihzbGlkZXMubGVuZ3RoID4gMCl7CgkJCQkJCXNsaWRlcy5zaGlmdCgpOwoJCQkJCX0KCgkJCQkJZnVuY3Rpb24gaW1nUHJlbG9hZChzbGlkZXMsIGlkeCwgY2FsbGJhY2spewoKCQkJCQkJdmFyIHRlbXBJbWcgPSBuZXcgSW1hZ2UoKTsKCQkJCQkJdmFyIE9ialNsaWRlID0gc2xpZGVzW2lkeF07CgkJCQkJCWlmKE9ialNsaWRlID09IG51bGwpewoJCQkJCQkJcmV0dXJuOwoJCQkJCQl9CgoJCQkJCQkkKHRlbXBJbWcpLmxvYWQoZnVuY3Rpb24oKXsKCQkJCQkJCXZhciBuZXdTbGlkZSA9ICc8ZGl2IGNsYXNzPSJzbGlkZSIgZGF0YS1jeWNsZS1wYWdlci10ZW1wbGF0ZT0iPGRpdj48ZGl2PjxzcGFuPjwvc3Bhbj48aW1nIGNsYXNzPVwnc3BhY2VyQmxvY2tlclwnIHNyYz1cJy90aGVtZS9fZGVmYXVsdC9pbWFnZXMvc3BhY2VyLnBuZ1wnIGFsdD1cJyNcJyAvPjxpbWcgY2xhc3M9XCdhdXRvU2NhbGVcJyBhbHQ9XCcnK09ialNsaWRlLmFsdCsnXCcgc3JjPVwnJytPYmpTbGlkZS5zcmMrJ1wnLz48L2Rpdj48L2Rpdj4iPjxpbWcgY2xhc3M9XCdzcGFjZXJCbG9ja2VyXCcgc3JjPVwnL3RoZW1lL19kZWZhdWx0L2ltYWdlcy9zcGFjZXIucG5nXCcgYWx0PVwnI1wnIC8+PGltZyBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iJytPYmpTbGlkZS5zcmMrJyIgYWx0PSInK09ialNsaWRlLmFsdCsnIi8+PHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPjwvZGl2Pic7CgkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKCdhZGQnLCBuZXdTbGlkZSk7CgkJCQkJCQlJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzIGltZycpKTsKCQkJCQkJCS8vICBnbyBuZXh0CgkJCQkJCQlpZiAoaWR4ICsgMSA8IHNsaWRlcy5sZW5ndGgpewoJCQkJCQkJCWltZ1ByZWxvYWQoc2xpZGVzLCBpZHggKyAxLCBjYWxsYmFjayk7CgkJCQkJCQl9CgkJCQkJCQllbHNlIHsKCQkJCQkJCQlpZiAoY2FsbGJhY2sgIT0gbnVsbCl7CgkJCQkJCQkJCWNhbGxiYWNrKCk7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9KTsKCgkJCQkJCXRlbXBJbWcuc3JjID0gT2JqU2xpZGUuc3JjOwoJCQkJCX0KCgkJCQkJQWRkTG9hZEV2ZW50KGZ1bmN0aW9uKCl7CgoJCQkJCQlpbWdQcmVsb2FkKHNsaWRlcywwLCBmdW5jdGlvbigpewoKCQkJCQkJCSQoJy50aHVtYnMnKS5hZGRDbGFzcygnY3ljbGUtcGFnZXInKTsKCQkJCQkJCUltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgaW1nJykpOwoKCQkJCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkJCQkkKCcuY3ljbGUnKS5hZGRDbGFzcygnamNhcm91c2VsLW1hbicpOwoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbWFuJykuamNhcm91c2VsKHsKCQkJCQkJCQkJdmVydGljYWw6IHRydWUKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipDT05UUk9MIEJUTiBORVhUIFBSRVYgQ0FST1VTRUwqKioqLwoKCQkJCQkJCQkkKCcuamNhcm91c2VsLXByZXYnKS5vbignamNhcm91c2VsY29udHJvbDphY3RpdmUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJJCh0aGlzKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTsKCQkJCQkJCQl9KQoJCQkJCQkJCS5vbignamNhcm91c2VsY29udHJvbDppbmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLmFkZENsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLmpjYXJvdXNlbENvbnRyb2woewoJCQkJCQkJCQl0YXJnZXQ6ICctPTEnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbmV4dCcpLm9uKCdqY2Fyb3VzZWxjb250cm9sOmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLm9uKCdqY2Fyb3VzZWxjb250cm9sOmluYWN0aXZlJywgZnVuY3Rpb24oKSB7CgkJCQkJCQkJCSQodGhpcykuYWRkQ2xhc3MoJ2luYWN0aXZlJyk7CgkJCQkJCQkJfSkKCQkJCQkJCQkuamNhcm91c2VsQ29udHJvbCh7CgkJCQkJCQkJCXRhcmdldDogJys9MScKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipDT05UUk9MIENBUk9VU0VMIFZJQSBTTElERSBESUFQT1JBTUEqKioqLwoKCQkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLm9uKCdjeWNsZS1pbml0aWFsaXplZCcsIGZ1bmN0aW9uKCBldmVudCwgb3B0cyApIHsKCQkJCQkJCQkJJCgnLnRodW1icyA+IGRpdicpLnJlbW92ZUNsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKS5lcShvcHRzLmN1cnJTbGlkZSkuYWRkQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpOwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLm9uKCdjeWNsZS1iZWZvcmUnLCBmdW5jdGlvbiggZXZlbnQsIG9wdHMgKSB7CgkJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5yZW1vdmVDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJykuZXEob3B0cy5uZXh0U2xpZGUpLmFkZENsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKTsKCQkJCQkJCQkJJCgnLmpjYXJvdXNlbC1tYW4nKS5qY2Fyb3VzZWwoJ3Njcm9sbCcsIG9wdHMubmV4dFNsaWRlKTsKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipTRVQgVVAgQ0FST1VTRUwgQU5EIEhJUyBDSElMRFJFTiBXSURUSCoqKiovCgoJCQkJCQkJCXZhciB4ID0gJCgnLmpjYXJvdXNlbC1tYW4nKS5oZWlnaHQoKS80OwoJCQkJCQkJCXZhciB5ID0gJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aDsKCgkJCQkJCQkJJCgnLmpjYXJvdXNlbC1tYW4gLnRodW1icycpLmNzcyh7CgkJCQkJCQkJCSdoZWlnaHQnOngqeSsncHgnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5jc3MoewoJCQkJCQkJCQknaGVpZ2h0JzoxMDAveSsnJScKCQkJCQkJCQl9KTsKCgkJCQkJCQl9CgoJCQkJCQl9KTsKCQkJCQl9KTsKCgkJCQl9KSgpOwoKICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqSU5TVEFOQ0UgT1BFTlNXSVBFIERFVEFJTCBQSE9UTyoqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKICAgICAgICAgICAgICAgIHZhciBvcGVuUGhvdG9Td2lwZSA9IGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICAgICAgICAgICAgIHZhciBwc3dwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wc3dwJylbMF07CgogICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wMC0yMDIwLTAyLTEzLTAxNDAuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA3KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDYvMjQ2XzAxLTIwMjAtMDItMTMtMDE0MC5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDcpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzI0Ni8yNDZfMDItMjAyMC0wMi0xMy0wMTQwLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNyknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wMy0yMDIwLTAyLTEzLTAxNDAuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA3KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDYvMjQ2XzA0LTIwMjAtMDItMTMtMDE0MC5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDcpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzI0Ni8yNDZfMDUtMjAyMC0wMi0xMy0wMTQwLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNyknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wNi0yMDIwLTAyLTEzLTAxNDAuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA3KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDYvMjQ2XzA3LTIwMjAtMDItMTMtMDE0MC5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDcpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzI0Ni8yNDZfMDgtMjAyMC0wMi0xMy0wMTQwLmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNyknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjQ2LzI0Nl8wOS0yMDIwLTAyLTEzLTAxNDAuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA3KScsdzonJyxoOicnfSk7CgogICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBmb2N1czogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGJnT3BhY2l0eTonMC45NScsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25TY3JvbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBzaG93QW5pbWF0aW9uRHVyYXRpb246IDMwMCwKICAgICAgICAgICAgICAgICAgICAgICAgaGlkZUFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsCiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FwdGlvbkVsOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVFbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHBpbmNoVG9DbG9zZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25WZXJ0aWNhbERyYWc6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGdhbGxlcnkgPSBuZXcgUGhvdG9Td2lwZShwc3dwRWxlbWVudCwgUGhvdG9Td2lwZVVJX0RlZmF1bHQsIGl0ZW1zLCBvcHRpb25zKTsKCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5pbml0KCk7CiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5nb1RvKGluZGV4KTsKCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5saXN0ZW4oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3ljbGUoJ3Jlc3VtZScpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5vbiggJ2NsaWNrJywnZGl2JywgZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5kYXRhKCJjeWNsZS5vcHRzIikuc2xpZGVOdW0gLTE7CgogICAgICAgICAgICAgICAgICAgIG9wZW5QaG90b1N3aXBlKGluZGV4KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jeWNsZSgncGF1c2UnKTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vSU5TVEFOQ0UgRElBUE9SQU1BIEZJQ0hFIEJJRU4KICAgICAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgPiBkaXYgPiBhIGltZycpKTsKCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB3ID0gJCgnLmRpYXBvcmFtYV9wcm9maWwnKS53aWR0aCgpLzEuNTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLnRodW1ic19jb250YWluZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9KSgpOwoKCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkvKioqKlNFVCBVUCBDQVJPVVNFTCBBTkQgSElTIENISUxEUkVOIFdJRFRIKioqKi8KCgkJCQkJdmFyIHggPSAkKCcuamNhcm91c2VsLW1hbicpLmhlaWdodCgpLzQ7CgkJCQkJdmFyIHkgPSAkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoOwoKCQkJCQkkKCcuamNhcm91c2VsLW1hbiAudGh1bWJzJykuY3NzKHsKCQkJCQkJJ2hlaWdodCc6eCp5KydweCcKCQkJCQl9KTsKCgkJCQkJJCgnLnRodW1icyA+IGRpdicpLmNzcyh7CgkJCQkJCSdoZWlnaHQnOjEwMC95KyclJwoJCQkJCX0pOwoKCQkJCX0KCiAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzID4gZGl2ID4gYSBpbWcnKSk7CgogICAgICAgICAgICB9KTsKCiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGRpdiBjbGFzcz0iYW5ub25jZV9kZXRhaWwiPgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgIDxoMiBpdGVtc2NvcGUgaXRlbXByb3A9ImF2YWlsYWJsZUF0T3JGcm9tIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUGxhY2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPkxvY2FsaXNhdGlvbiA6IDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzIj5QQVJJUzwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UXVhcnRpZXIgOiA8c3BhbiBpdGVtcHJvcD0iYWRkcmVzcyI+U09VUyBPRkZSRSAtIEdST1MgQ0FJTExPVTwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgPHAgaXRlbXByb3A9ImRlc2NyaXB0aW9uIiBjbGFzcz0iZGVzY3JpcHRpZiI+UVVBUlRJRVIgR1JPUyBDQUlMTE9VIC0gU1QgRE9NSU5JUVVFIC0gSW1tZXVibGUgYW5jaWVuIGRlIHN0YW5kaW5nLCBhcHBhcnRlbWVudCB0cmF2ZXJzYW50IGF1IDPDqG1lIMOpdGFnZSBhdmVjIGFzY2Vuc2V1ciwgNjNtMiBsb2kgY2FycmV6LCBwbGFuIGNvbXBhY3Qgc2FucyBwZXJ0ZSBkZSBwbGFjZSwgZW50csOpZSwgZG91YmxlIHPDqWpvdXIgZG90w6kgZCd1bmUgY2hlbWluw6llIGV0IGQndW4gYmFsY29uIGZpbGFudCBkZSA2bTIsIGV4cG9zw6kgc3VkLCB1bmUgY3Vpc2luZSBzw6lwYXLDqWUsIHVuZSBncmFuZGUgY2hhbWJyZSBhdSBjYWxtZSwgc2FsbGUgZGUgYmFpbnMsIHRvaWxldHRlcyBzw6lwYXLDqWVzLCBub21icmV1eCBwbGFjYXJkcywgY2F2ZS4gVHJhdmF1eCDDoCBwcsOpdm9pciwgcG9zc2liaWxpdMOpIGRlIGNyw6llciB1bmUgZGV1eGnDqG1lIGNoYW1icmUuIEVYQ0xVU0lWSVRFIEFTU0FTIEltbW9iaWxpZXIuPC9wPgogICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IEFycmF5KCdDZXR0ZSBhbm5vbmNlIGEgw6l0w6kgYWpvdXTDqWUgw6Agdm90cmUgc8OpbGVjdGlvbi4nLCdDZXR0ZSBhbm5vbmNlIGVzdCBkw6lqw6AgZGFucyB2b3RyZSBzw6lsZWN0aW9uLicpOwogICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkZXRhaWxfbGlua19vdXRpbHMiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImFqb3V0X3NlbGVjdGlvbiIgZGF0YS1iaWVuaWQ9IjI0NiIgaHJlZj0iIyIgdGl0bGU9IkFqb3V0ZXIgw6AgbWEgc8OpbGVjdGlvbiI+QWpvdXRlciDDoCBtYSBzw6lsZWN0aW9uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZW52b2lfYW1pIiBpZD0ic2VuZEZyaWVuZCIgZGF0YS1tYWlsLXN1YmplY3Q9IkplIHNvdWhhaXRlIHRlIG1vbnRyZXIgY2V0dGUgYW5ub25jZSIgZGF0YS1tYWlsLWJvZHk9IkJvbmpvdXIsIGonYWkgcGVuc8OpIHF1ZSBjZXR0ZSBhbm5vbmNlIHBvdXJyYWl0IHQnaW50w6lyZXNzZXIgOiAgaHR0cHM6Ly93d3cuYXNzYXNpbW1vYmlsaWVyLmNvbS9hbm5vbmNlLXZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci9yZWYtZHQxLTc0Ni92ZW50ZS1hcHBhcnRlbWVudC0zLXBpZWNlcy0xLWNoYW1icmUtcGFyaXMtNzUwMDcvIiBocmVmPSIjIiB0aXRsZT0iRW52b3llciDDoCB1biBhbWkiPkVudm95ZXIgw6AgdW4gYW1pPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2hhcmVfYnV0dG9ucyBhTGlrZSIgdGl0bGU9IlBhcnRhZ2VyIGNldHRlIG9mZnJlIHN1ciBsZXMgcsOpc2VhdXggc29jaWF1eCI+UGFydGFnZXIgY2UgbGllbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxici8+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlua19pbXByZXNzaW9uIiB0aXRsZT0iSW1wcmltZXIgbGUgZMOpdGFpbCBkZSBjZSBiaWVuIiBocmVmPSIvaW1wcmVzc2lvbi9kZXRhaWxzLzI0Ni8iIHRhcmdldD0iX2JsYW5rIj5JbXByaW1lcjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRyaWdnZXJfbWVudGlvbiIgaHJlZj0iL21lbnRpb25zLWxlZ2FsZXMtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLyIgdGl0bGU9IkluZm9ybWF0aW9ucyBqdXJpZGlxdWVzIEFzc2FzIGltbW9iaWxpZXIiPkNvbnN1bHRlciBsZSBiYXLDqG1lIGRlcyBob25vcmFpcmVzPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKICAgICAgICAgICAgICAgIHZhciBzZW5kRnJpZW5kID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbmRGcmllbmQnKTsKCiAgICAgICAgICAgICAgICB2YXIgYmVmb3JlU2VuZEZyaWVuZCA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgc2VuZEZyaWVuZC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGJlZm9yZVNlbmRGcmllbmQpOwogICAgICAgICAgICAgICAgICAgIHZhcgogICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWFpbC1zdWJqZWN0JyksCiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1tYWlsLWJvZHknKQogICAgICAgICAgICAgICAgICAgIDsKCiAgICAgICAgICAgICAgICAgICAgaWYoc3ViamVjdCAhPT0gbnVsbCkgc3ViamVjdCA9IGVuY29kZVVSSUNvbXBvbmVudChzdWJqZWN0KTsKICAgICAgICAgICAgICAgICAgICBlbHNlIHN1YmplY3QgPSAnJzsKCiAgICAgICAgICAgICAgICAgICAgaWYoYm9keSAhPT0gbnVsbCkgYm9keSA9IGVuY29kZVVSSUNvbXBvbmVudChib2R5KTsKICAgICAgICAgICAgICAgICAgICBlbHNlIGJvZHkgPSAnJzsKCiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnbWFpbHRvOj9zdWJqZWN0PScgKyBzdWJqZWN0ICsgJyZib2R5PScgKyBib2R5KTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWNrKCk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWYgKHNlbmRGcmllbmQgIT09IG51bGwpIHNlbmRGcmllbmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBiZWZvcmVTZW5kRnJpZW5kKTsKCiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICQoJy5zaGFyZV9idXR0b25zJykub24oJ2NsaWNrJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdm9pbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCh2b2lsZSkuYXBwZW5kVG8oJ2JvZHknKS5hZGRDbGFzcygnYm94X3NoYXJlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmVydGljYWxfY2VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmVydGljYWxfY2VudGVyMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsb3NlX3NwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQobmV3Tm9kZSkuYXBwZW5kVG8odm9pbGUpLmFwcGVuZCgnPGgxPlBhcnRhZ2VyIGNlIGxpZW48L2gxPicpOwogICAgICAgICAgICAgICAgICAgICAgICAkKG5ld05vZGUyKS5hcHBlbmRUbyhuZXdOb2RlKS5hdHRyKCdpZCcsJ3NoYXJlbWUnKS5hZGRDbGFzcygnc2hhcnJyZScpOwogICAgICAgICAgICAgICAgICAgICAgICAkKHZlcnRpY2FsX2NlbnRlcikuYXBwZW5kVG8odm9pbGUpLmFkZENsYXNzKCd2ZXJ0aWNhbF9jZW50ZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgJChjbG9zZV9zcGFuKS5hcHBlbmRUbyhuZXdOb2RlKS5hZGRDbGFzcygnY2xvc2Vfc2hhcmUgaWNvX2Nsb3NlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQodmVydGljYWxfY2VudGVyMikuYXBwZW5kVG8obmV3Tm9kZSkuYWRkQ2xhc3MoJ3ZlcnRpY2FsX2NlbnRlcicpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYm94X3NoYXJlJykuZmFkZUluKDMwMCk7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcjc2hhcmVtZScpLnNoYXJycmUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0d2l0dGVyOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhY2Vib29rOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvb2dsZVBsdXM6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGludGVyZXN0OnRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGludGVyZXN0OiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhOiAnaHR0cHM6Ly93d3cuYXNzYXNpbW1vYmlsaWVyLmNvbS8nLnJlcGxhY2UoL1wvJC8sICcnKSArICcvJyArICcvZGF0YXMvYmllbnMvdGh1bWJzLzI0Ni8yNDZfMDAtMjAyMC0wMi0xMy0wMTQwLmpwZycucmVwbGFjZSgvXlwvLywgJycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAgICc8dWw+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iZmFjZWJvb2siPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb19mYWNlYm9vayI+PC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RmFjZWJvb2s8L3NwYW4+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InR3aXR0ZXIiPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb190d2l0dGVyIj48L3NwYW4+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Ud2l0dGVyPC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJnb29nbGVwbHVzIj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fZ29vZ2xlcGx1cyI+PC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+R29vZ2xlICs8L3NwYW4+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InBpbnRlcmVzdCI+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX3BpbnRlcmVzdCI+PC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UGludGVyZXN0PC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybEN1cmw6ICcnLCAgICAvLyAgZGlzYWJsZSBzaGFycnJlLnBocAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSG92ZXI6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlVHJhY2tpbmc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihhcGksIG9wdGlvbnMpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcudHdpdHRlcicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLm9wZW5Qb3B1cCgndHdpdHRlcicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLmZhY2Vib29rJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkub3BlblBvcHVwKCdmYWNlYm9vaycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLmdvb2dsZXBsdXMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5vcGVuUG9wdXAoJ2dvb2dsZVBsdXMnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy5waW50ZXJlc3QnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5vcGVuUG9wdXAoJ3BpbnRlcmVzdCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5LGh0bWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzonaGlkZGVuJwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5jbG9zZV9zaGFyZScpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYm94X3NoYXJlJykuZmFkZU91dCgzMDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ2JvZHksaHRtbCcpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzondmlzaWJsZScKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmJveF9zaGFyZScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKCiAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW50ZXJsb2N1dGV1ciIgaXRlbXByb3A9InNlbGxlciIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9SZWFsRXN0YXRlQWdlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlZvdHJlIGludGVybG9jdXRldXI8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0ibGVnYWxOYW1lIj5BU1NBUyBJbW1vYmlsaWVyPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9ImxvY2F0aW9uIj4xNDUsIGJvdWxldmFyZCBSYXNwYWlsIC0gNzUwMDYgUGFyaXM8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Uw6lsIDogPHNwYW4gaXRlbXByb3A9InRlbGVwaG9uZSI+MDEgNTYgODEgMDggMzg8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fZGV0YWlsIiBpZD0iY29udGFjdF9hbm5vbmNlIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8Zm9ybSBpZD0iYW5ub25jZV9mb3JtIiBjbGFzcz0idmFsaWRhdGVfZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9hbm5vbmNlLXZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci9yZWYtZHQxLTc0Ni92ZW50ZS1hcHBhcnRlbWVudC0zLXBpZWNlcy0xLWNoYW1icmUtcGFyaXMtNzUwMDcvI2NvbnRhY3RfYW5ub25jZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsZWdlbmQ+RGVtYW5kZSBkZSByZW5zZWlnbmVtZW50czwvbGVnZW5kPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImhvbmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ3ZWJzaXRlIj5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IndlYnNpdGUiIGlkPSJ3ZWJzaXRlIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV90d29yb3dzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Imxhc3RfbmFtZSI+Tm9tIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0ibGFzdF9uYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJsYXN0X25hbWUiIGNsYXNzPSJyZXF1aXJlZCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJsYXN0X25hbWUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJmaXJzdF9uYW1lIj5QcsOpbm9tIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iZmlyc3RfbmFtZSIgdHlwZT0idGV4dCIgbmFtZT0iZmlyc3RfbmFtZSIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJmaXJzdF9uYW1lIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbWFpbCI+RW1haWwgPHNwYW4+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJlbWFpbCIgdHlwZT0idGV4dCIgbmFtZT0iZW1haWwiIHZhbHVlPSIiIGNsYXNzPSJyZXF1aXJlZCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJlbWFpbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InBob25lIj5Uw6lsw6lwaG9uZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9InBob25lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJwaG9uZSIgdmFsdWU9IiIgY2xhc3M9InJlcXVpcmVkIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0YXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJsYWJlbF9tZXNzYWdlLWFubm9uY2UiIGZvcj0ibWVzc2FnZSI+TWVzc2FnZSA8c3Bhbj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSJtZXNzYWdlIiBuYW1lPSJtZXNzYWdlIiBjbGFzcz0icmVxdWlyZWQiPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9Im1lc3NhZ2UiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaG9uZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IjJ0ZHZ0YWRsaXFqN2NpMHM3cHRjYmtoOXUxIj5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IjJ0ZHZ0YWRsaXFqN2NpMHM3cHRjYmtoOXUxIiBpZD0iMnRkdnRhZGxpcWo3Y2kwczdwdGNia2g5dTEiIHZhbHVlPSIydGR2dGFkbGlxajdjaTBzN3B0Y2JraDl1MSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlkIiBpZD0iaWQiIHZhbHVlPSIyNDYiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiB2YWx1ZT0iRFQxLTc0NiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jZV9pZCIgaWQ9ImFnZW5jZV9pZCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdWJqZWN0IiBpZD0ic3ViamVjdCIgdmFsdWU9IkNvbnRhY3RBbm5vbmNlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiBuYW1lPSJzZW5kX2VtYWlsIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJFbnZveWVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0ibWFuZGF0b3J5VHh0Ij5MZXMgaW5mb3JtYXRpb25zIHJlY3VlaWxsaWVzIHN1ciBjZSBmb3JtdWxhaXJlIHNvbnQgZW5yZWdpc3RyJmVhY3V0ZTtlcyBkYW5zIHVuIGZpY2hpZXIgaW5mb3JtYXRpcyZlYWN1dGU7IHBhciBsYSBzb2NpJmVhY3V0ZTt0JmVhY3V0ZTsgPHNwYW4gY2xhc3M9ImFnZW5jZU5hbWUiPiBBZ2VuY2UgTmFtZTwvc3Bhbj4gcG91ciBsYSBnZXN0aW9uIGV0IGxlIHN1aXZpIGRlIHZvdHJlIGRlbWFuZGUuIENvbmZvcm0mZWFjdXRlO21lbnQgJmFncmF2ZTsgbGEgbG9pICZsYXF1bzsgaW5mb3JtYXRpcXVlIGV0IGxpYmVydCZlYWN1dGU7cyAmcmFxdW87LCBWb3VzIHBvdXZleiBleGVyY2VyIHZvdHJlIGRyb2l0IGQmIzM5O2FjYyZlZ3JhdmU7cyBhdXggZG9ubiZlYWN1dGU7ZXMgdm91cyBjb25jZXJuYW50IGV0IGxlcyBmYWlyZSByZWN0aWZpZXIgZW4gY29udGFjdGFudCA6IDxzcGFuIGNsYXNzPSJhZ2VuY2VOYW1lIj4gQWdlbmNlIE5hbWU8L3NwYW4+LCBDb3JyZXNwb25kYW50IEluZm9ybWF0aXF1ZSBldCBsaWJlcnQmZWFjdXRlO3MsIDxzcGFuIGNsYXNzPSJhZ2VuY2VBZGRyZXNzIj5hZ2VuY2UgYWRyZXNzZTwvc3Bhbj4gb3UgJmFncmF2ZTsgPGEgY2xhc3M9ImFnZW5jZU1haWwiIGhyZWY9Im1haWx0bzoiPmFnZW5jZSBtYWlsPC9hPiwgZW4gcHImZWFjdXRlO2Npc2FudCBkYW5zIGwmcnNxdW87b2JqZXQgZHUgY291cnJpZXIgJmxhcXVvOyBEcm9pdCBkZXMgcGVyc29ubmVzICZyYXF1bzsgZXQgZW4gam9pZ25hbnQgbGEgY29waWUgZGUgdm90cmUganVzdGlmaWNhdGlmIGQmcnNxdW87aWRlbnRpdCZlYWN1dGU7LjwvYXJ0aWNsZT4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCS8vPCFbQ0RBVEFbCgoJdmFyIGFnZW5jeSA9IFtdOwoKCWZ1bmN0aW9uIGFmZmljaGFnZVR4dChhcnJheUFnZW5jeSl7CiAgICAgICAgJCgnYXJ0aWNsZS5tYW5kYXRvcnlUeHQgLmFnZW5jZU5hbWUnKS5lYWNoKGZ1bmN0aW9uKCl7JCh0aGlzKS50ZXh0KGFycmF5QWdlbmN5WzBdLm5hbWUpO30pOwogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VBZGRyZXNzJykudGV4dChhcnJheUFnZW5jeVswXS5hZGRyZXNzKTsKICAgICAgICAkKCdhcnRpY2xlLm1hbmRhdG9yeVR4dCAuYWdlbmNlTWFpbCcpLnRleHQoYXJyYXlBZ2VuY3lbMF0ubWFpbCk7CiAgICAgICAgJCgnYXJ0aWNsZS5tYW5kYXRvcnlUeHQgLmFnZW5jZU1haWwnKS5hdHRyKCdocmVmJywnbWFpbHRvOicrYXJyYXlBZ2VuY3lbMF0ubWFpbCk7CgogICAgICAgIGFnZW5jeSA9IFtdOyAvLyBvbiB2aWRlIGxlIHRhYmxlYXUKCX0KCglmdW5jdGlvbiBhZ2VuY2VNYW55KCl7CgkJYWdlbmN5LnB1c2goewoJCQluYW1lOiQoJ3NlbGVjdCNmbGRfYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbmFtZScpLCBhZGRyZXNzOiQoJ3NlbGVjdCNmbGRfYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbG9jYWxpc2F0aW9uJyksIG1haWw6JCgnc2VsZWN0I2ZsZF9hZ2VuY2VfaWQgb3B0aW9uW3ZhbHVlPTFdJykuYXR0cignZGF0YS1tYWlsJykKCQl9KTsKCgkJYWZmaWNoYWdlVHh0KGFnZW5jeSk7CgoJCSQoJ3NlbGVjdCNmbGRfYWdlbmNlX2lkJykub24oJ2NoYW5nZScsZnVuY3Rpb24oKXsKCQkJYWdlbmN5LnB1c2goewoJCQkJbmFtZTokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLW5hbWUnKSwgYWRkcmVzczokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLWxvY2FsaXNhdGlvbicpLCBtYWlsOiQodGhpcykuY2hpbGRyZW4oIjpzZWxlY3RlZCIpLmF0dHIoJ2RhdGEtbWFpbCcpCgkJCX0pOwoJCQlhZmZpY2hhZ2VUeHQoYWdlbmN5KTsKCQl9KTsKCX0KCgkvL11dPgo8L3NjcmlwdD4KCgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkJLy88IVtDREFUQVsKCgkJYWdlbmN5LnB1c2goewoJCQluYW1lOiJBU1NBUyBJbW1vYmlsaWVyICIsIGFkZHJlc3M6IjE0NSwgYm91bGV2YXJkIFJhc3BhaWwgNzUwMDYgUGFyaXMiLCBtYWlsOiJjb25zZWlsQGFzc2FzaW1tb2JpbGllci5jb20iCgkJfSk7CgoJCWFmZmljaGFnZVR4dChhZ2VuY3kpOwoKCQkvL11dPgoJPC9zY3JpcHQ+CgoKCgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgPGRpdiBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIiBjbGFzcz0icHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0icHJpY2UiIGNsYXNzPSJhbm5vbmNlX3ByaWNlIj5Qcml4IDogPHNwYW4+NzYwIDAwMCAmZXVybzsgPC9zcGFuPjwvcD4KCgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpY2VfZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgSG9ub3JhaXJlcyBpbmNsdXMKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlX2RldGFpbCB0YWxsTWFyZ2luIHNpemUiPjcyMiAwMDAgJmV1cm87IEhvbm9yYWlyZXMgZXhjbHVzPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpY2VfZGV0YWlsIHNpemUiPkhvbm9yYWlyZXMgZGUgNSwyNiUgVFRDIMOgIGxhIGNoYXJnZSBkZSBsJ2FjcXXDqXJldXI8L3A+CgoJCQkJCQk8cCBjbGFzcz0icHJpY2VfZGV0YWlsIj48L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxoMj5Ew6l0YWlsczwvaDI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRldGFpbF9saXN0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJ0eXBlT2ZHb29kIiBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGFydGVtZW50CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+U3VyZmFjZSA6IDxzcGFuIGl0ZW1wcm9wPSJ3aWR0aCI+NjQgbcKyPC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPk5vbWJyZSBkZSBwacOoY2VzIDogPHNwYW4+Mzwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5Ob21icmUgZGUgY2hhbWJyZXMgOiA8c3Bhbj4xPC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSA6IDxzcGFuPkRUMS03NDY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXBfZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWdfZHBlIiBzcmM9Imh0dHBzOi8vd3d3LmFnZW5jZS1wbHVzLm5ldC9za2lucy9fZGVmYXVsdC9saWIvQWdlbmNlUGx1cy93cy9pbWdEUEUuYXNoeD92YWx1ZT0yMjImc2l6ZT0yMDZ4MjExJnBpY3RvPWRwZV9vbWJyZV90cmFuc3BhcmVudF9kYXJrX2dyZXkiIGFsdD0iRGlhZ25vc3RpYyBkZSBwZXJmb3JtYW5jZSDDqW5lcmfDqXRpcXVlIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibGlua19iYWNrIj4KICAgICAgICA8L2Rpdj4KICAgIDwvc2VjdGlvbj4KICAgIDwhLS0gUm9vdCBlbGVtZW50IG9mIFBob3RvU3dpcGUuIE11c3QgaGF2ZSBjbGFzcyBwc3dwLiAtLT4KICAgIDxkaXYgY2xhc3M9InBzd3AiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgPCEtLSBCYWNrZ3JvdW5kIG9mIFBob3RvU3dpcGUuCiAgICAgICAgSXQncyBhIHNlcGFyYXRlIGVsZW1lbnQsIGFzIGFuaW1hdGluZyBvcGFjaXR5IGlzIGZhc3RlciB0aGFuIHJnYmEoKS4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fYmciPjwvZGl2PgogICAgICAgIDwhLS0gU2xpZGVzIHdyYXBwZXIgd2l0aCBvdmVyZmxvdzpoaWRkZW4uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3Njcm9sbC13cmFwIj4KICAgICAgICAgICAgPCEtLSBDb250YWluZXIgdGhhdCBob2xkcyBzbGlkZXMuCiAgICAgICAgICAgICAgICBQaG90b1N3aXBlIGtlZXBzIG9ubHkgMyBvZiB0aGVtIGluIERPTSB0byBzYXZlIG1lbW9yeS4KICAgICAgICAgICAgICAgIERvbid0IG1vZGlmeSB0aGVzZSAzIHBzd3BfX2l0ZW0gZWxlbWVudHMsIGRhdGEgaXMgYWRkZWQgbGF0ZXIgb24uIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19jb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSBEZWZhdWx0IChQaG90b1N3aXBlVUlfRGVmYXVsdCkgaW50ZXJmYWNlIG9uIHRvcCBvZiBzbGlkaW5nIGFyZWEuIENhbiBiZSBjaGFuZ2VkLiAtLT4KICAgICAgICAgICAgPGltZyBjbGFzcz0ic3BhY2VyQmxvY2tlciIgc3JjPSIvdGhlbWUvX2RlZmF1bHQvaW1hZ2VzL3NwYWNlci5wbmciIGFsdD0iIiBzdHlsZT0iei1pbmRleDowOyIgLz4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fdWkgcHN3cF9fdWktLWhpZGRlbiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX190b3AtYmFyIj4KICAgICAgICAgICAgICAgICAgICA8IS0tICBDb250cm9scyBhcmUgc2VsZi1leHBsYW5hdG9yeS4gT3JkZXIgY2FuIGJlIGNoYW5nZWQuIC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NvdW50ZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWNsb3NlIiB0aXRsZT0iQ2xvc2UgKEVzYykiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLXNoYXJlIiB0aXRsZT0iU2hhcmUiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWZzIiB0aXRsZT0iVG9nZ2xlIGZ1bGxzY3JlZW4iPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLXpvb20iIHRpdGxlPSJab29tIGluL291dCI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBQcmVsb2FkZXIgZGVtbyBodHRwOi8vY29kZXBlbi5pby9kaW1zZW1lbm92L3Blbi95eUJXb1IgLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBlbGVtZW50IHdpbGwgZ2V0IGNsYXNzIHBzd3BfX3ByZWxvYWRlci0tYWN0aXZlIHdoZW4gcHJlbG9hZGVyIGlzIHJ1bm5pbmcgLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19pY24iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fY3V0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fZG9udXQiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2hhcmUtbW9kYWwgcHN3cF9fc2hhcmUtbW9kYWwtLWhpZGRlbiBwc3dwX19zaW5nbGUtdGFwIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19zaGFyZS10b29sdGlwIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLWxlZnQiIHRpdGxlPSJQcmV2aW91cyAoYXJyb3cgbGVmdCkiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLXJpZ2h0IiB0aXRsZT0iTmV4dCAoYXJyb3cgcmlnaHQpIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb24iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb25fX2NlbnRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAkKCcuYWpvdXRfc2VsZWN0aW9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CgogICAgICAgIHZhciBpZCA9ICQodGhpcykuYXR0cignZGF0YS1iaWVuaWQnKTsKCiAgICAgICAgbWFzZWxlY3Rpb24oJycsIGlkLCAnYWRkJywgZnVuY3Rpb24ocmV0b3VyKSB7CgogICAgICAgICAgICB2YXIgYW5pbV90aW1lb3V0OwogICAgICAgICAgICB2YXIgYW5pbTJfdGltZW91dDsKICAgICAgICAgICAgdmFyIHJlbW92ZV90aW1lb3V0OwoKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1fdGltZW91dCk7CiAgICAgICAgICAgIGNsZWFyVGltZW91dChhbmltMl90aW1lb3V0KTsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlbW92ZV90aW1lb3V0KTsKCiAgICAgICAgICAgIGlmIChyZXRvdXIpIHsKCiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBvbmNlJykuYXBwZW5kKCc8cD4nICsgbWVzc2FnZVswXSArICc8L3A+Jyk7CgogICAgICAgICAgICAgICAgdmFyIG5iX3NlbGVjdGlvbiA9IHBhcnNlSW50KCQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KCkpICsgMTsKICAgICAgICAgICAgICAgICQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KG5iX3NlbGVjdGlvbik7CgogICAgICAgICAgICAgICAgYW5pbV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgYW5pbTJfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ29uY2UnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjAwKTsKCiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICAgICAgfSwgMTAwKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBkb25lJykuYXBwZW5kKCc8cD4nICsgbWVzc2FnZVsxXSArICc8L3A+Jyk7CgogICAgICAgICAgICAgICAgYW5pbV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgYW5pbTJfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2RvbmUnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjAwKTsKCiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgfSk7CgogICAgPC9zY3JpcHQ+CgoKICAgIDxmb290ZXI+CiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl90b3AiPgogICAgICAgICAgICA8YSBpdGVtc2NvcGU9Iml0ZW1zY29wZSIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1JlYWxFc3RhdGVBZ2VudCIgY2xhc3M9ImFnZW5jZXNfZm9vdGVyIiBocmVmPSIvY29udGFjdC1hZ2VuY2UtaW1tb2JpbGllcmUtYXNzYXMtaW1tb2JpbGllci8iIHRpdGxlPSJDb250YWN0ZXogbOKAmWFnZW5jZSBpbW1vYmlsacOocmUgQXNzYXMgaW1tb2JpbGllciI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnJhbmQiIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkFTU0FTIEltbW9iaWxpZXI8L3NwYW4+PHNwYW4gY2xhc3M9InRpcmV0Ij4mbmJzcDstJm5ic3A7PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9ImxvY2F0aW9uIj4xNDUsIGJvdWxldmFyZCBSYXNwYWlsJm5ic3A7CiAgICAgICAgICAgICAgICA3NTAwNiZuYnNwO1BhcmlzPHNwYW4gY2xhc3M9InRpcmV0Ij4mbmJzcDstJm5ic3A7PC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPjAxIDU2IDgxIDA4IDM4PC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxhIGNsYXNzPSJtb2JpbGVfZm9vdGVyIiBocmVmPSJodHRwczovL20uYXNzYXNpbW1vYmlsaWVyLmNvbS8mbW9iaWxlPTEiIHRpdGxlPSJTaXRlIG1vYmlsZSI+U2l0ZSBtb2JpbGU8L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZW8iPgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic29jaWFsTGlua3MiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJmYWNlYm9vayIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2Fzc2FzaW1tb2JpbGllci8/ZnJlZj10cyIgdGl0bGU9IkZhY2Vib29rIj48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW8xIj4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiB0aXRsZT0iSW1tb2JpbGllciBQYXJpcyA3NTAwNiBBc3NhcyBpbW1vYmlsaWVyIj5BY2N1ZWlsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJJbW1vYmlsaWVyIGVuIFZlbnRlIEFzc2FzIGltbW9iaWxpZXIiPkVuIHZlbnRlPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZXN0aW1hdGlvbi1hcHBhcnRlbWVudC1kdXBsZXgtaG90ZWwtcGFydGljdWxpZXItcGFyaXMtNzUwMDYvIiB0aXRsZT0iRXN0aW1lciB2b3RyZSBiaWVuIHN1ciBQYXJpcyI+RXN0aW1hdGlvbjwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3BsYW4tbWVkaWEtYWN0dWFsaXRlLWFzc2FzLWltbW9iaWxpZXIvIiB0aXRsZT0iQWN0dWFsaXTDqXMgQXNzYXMgaW1tb2JpbGllciI+UGxhbiBtw6lkaWE8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9iaWVucy12ZW5kdXMtYXBwYXJ0ZW1lbnQtbWFpc29uLWFzc2FzLWltbW9iaWxpZXItcGFyaXMtNzUwMDYvIiB0aXRsZT0iQmllbnMgdmVuZHVzIHBhciBBc3NhcyBpbW1vYmlsaWVyIj5Ob3MgdmVudGVzPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvaG9tZS1zdGFnaW5nLWFzc2FzLWltbW9iaWxpZXItcGFyaXMvIiB0aXRsZT0iSG9tZSBTdGFnaW5nIEFzc2FzIGltbW9iaWxpZXIiPkhvbWUgc3RhZ2luZzwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnRhY3QtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLWltbW9iaWxpZXIvIiB0aXRsZT0iQ29udGFjdGV6IGzigJlhZ2VuY2UgaW1tb2JpbGnDqHJlIEFzc2FzIGltbW9iaWxpZXIiPk5vdXMgY29udGFjdGVyPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW8yIj4KCiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ic2VvMyI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL21hLXNlbGVjdGlvbi1hbm5vbmNlcy1pbW1vYmlsaWVyZXMtYXNzYXMvIiB0aXRsZT0iU8OpbGVjdGlvbm5lciBhbm5vbmNlIGltbW9iaWxpw6hyZSI+TWEgc8OpbGVjdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii92ZW50ZS1hY2hhdC1hcHBhcnRlbWVudC1wYXJpcy03NTAwNS1hc3Nhcy1pbW1vYmlsaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDc1MDA1IEFzc2FzIGltbW9iaWxpZXIiPkFwcGFydGVtZW50Lzc1MDA1PC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ic2VvNCI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZlbnRlLWFjaGF0LWFwcGFydGVtZW50LXBhcmlzLTc1MDA2LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNzUwMDYgQXNzYXMgaW1tb2JpbGllciI+QXBwYXJ0ZW1lbnQvNzUwMDY8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVudGUtYWNoYXQtYXBwYXJ0ZW1lbnQtcGFyaXMtNzUwMDctYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA3NTAwN0Fzc2FzIGltbW9iaWxpZXIiPkFwcGFydGVtZW50Lzc1MDA3PC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZlbnRlLWFjaGF0LWFwcGFydGVtZW50LXBhcmlzLTc1MDE0LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNzUwMTQgQXNzYXMgaW1tb2JpbGllciI+QXBwYXJ0ZW1lbnQvNzUwMTQ8L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW81Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVudGUtYWNoYXQtYXBwYXJ0ZW1lbnQtcGFyaXMtNzUwMTUtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA3NTAxNSBBc3NhcyBpbW1vYmlsaWVyIj5BcHBhcnRlbWVudC83NTAxNTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii92ZW50ZS1hY2hhdC1tYWlzb25zLXBhcmlzLXJpdmUtZ2F1Y2hlLTc1MDE0LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgbWFpc29ucyA3NTAxNCBBc3NhcyBpbW1vYmlsaWVyIj5NYWlzb25zL1BhcmlzIHJpdmUgZ2F1Y2hlICg3NTAxNCk8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT4mbmJzcDs8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImxlZ2FsIj4KICAgICAgICAgICAgPGEgaHJlZj0iL21lbnRpb25zLWxlZ2FsZXMtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLyIgdGl0bGU9IkluZm9ybWF0aW9ucyBqdXJpZGlxdWVzIEFzc2FzIGltbW9iaWxpZXIiPk1lbnRpb25zIGzDqWdhbGVzIC8gQmFyw6ptZTwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSIvbGllbnMtdXRpbGVzLXBhcnRlbmFpcmVzLWltbW9iaWxpcmVzLWFzc2FzLyIgdGl0bGU9IlBhcnRlbmFpcmVzIGltbW9iaWxpZXJzIEFzc2FzIGltbW9iaWxpZXIiPkxpZW5zIHV0aWxlczwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vYWdlbmNlLWltbW9iaWxpZXJlL2FnZW5jZS1hc3Nhcy1pbW1vYmlsaWVyLTM5MTE1LyIgdGl0bGU9IkFnZW5jZSBhZ3LDqcOpZSBNZWlsbGV1cnMgQWdlbnRzIC0gQWNoYXQgdmVudGUgYXBwYXJ0ZW1lbnQgcGFyaXMgcml2ZSBnYXVjaGUiIHRhcmdldD0iX2JsYW5rIj5BZ2VuY2UgYWdyw6nDqWUgTWVpbGxldXJzIEFnZW50czwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LmFnZW5jZS1wbHVzLmZyIiB0aXRsZT0iQWdlbmNlIFBsdXMsIHNvbHV0aW9ucyBwb3VyIGxlcyBwcm9mZXNzaW9ubmVscyBkZSBsJ2ltbW9iaWxpZXIiIHRhcmdldD0iX2JsYW5rIj5Sw6lhbGlzYXRpb24gQWdlbmNlIFBsdXM8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9mb290ZXI+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgbGlzdF9saSA9ICQoJ2Zvb3RlciB1bC5zZW8xIGxpJyk7CgogICAgZm9yKHZhciBpPTA7aTxsaXN0X2xpLmxlbmd0aDtpKyspewoKICAgICAgICB2YXIgY3VycmVudF9lbGVtID0gbGlzdF9saVtpXTsKCiAgICAgICAgaWYoaSA+PTMgJiYgaSA8PTUpewogICAgICAgICAgICAkKGN1cnJlbnRfZWxlbSkuYXBwZW5kVG8oJ2Zvb3RlciAuc2VvMicpOwogICAgICAgIH1lbHNlIGlmKGkgPT0gNil7CiAgICAgICAgICAgICQoY3VycmVudF9lbGVtKS5wcmVwZW5kVG8oJ2Zvb3RlciAuc2VvMycpCiAgICAgICAgfQogICAgfQo8L3NjcmlwdD4KCiAgICA8ZGl2IGNsYXNzPSJwb3B1cC1jb250ZW50Ij4KICAgICAgICA8ZGl2PgogICAgICAgICAgICA8c3Bhbj5FbiBwb3Vyc3VpdmFudCB2b3RyZSBuYXZpZ2F0aW9uIHN1ciBjZSBzaXRlLCB2b3VzIGFjY2VwdGV6IGwndXRpbGlzYXRpb24gZGUgY29va2llcyBkZXN0aW7DqXMgw6AgbGEgcsOpYWxpc2F0aW9uIGRlIHN0YXRpc3RpcXVlcyBkZSB2aXNpdGVzLjwvc3Bhbj4KICAgICAgICAgICAgPGEgaHJlZj0iL21lbnRpb25zLWxlZ2FsZXMtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLyNjb29raWVzIiBjbGFzcz0ibW9yZS1idXR0b24iPkVuIHNhdm9pciBwbHVzPC9hPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYWdyZWUtYnV0dG9uIiB2YWx1ZT0iQ29udGludWVyIi8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9jb25maXJtX2Nvb2tpZS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgogICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGZuRm9vdGVyID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIGYgPSAkKCdmb290ZXInKTsKICAgICAgICAgICAgaWYgKGYubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgdmFyIG1pbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIGYuaW5uZXJIZWlnaHQoKTsKICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjonc3RhdGljJ30pOwogICAgICAgICAgICAgICAgaWYoZi5vZmZzZXQoKS50b3AgPCBtaW5IZWlnaHQpewogICAgICAgICAgICAgICAgICAgICQoJyNtYWluJykuY3NzKCdtaW4taGVpZ2h0JywkKHdpbmRvdykuaGVpZ2h0KCkpOwogICAgICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjonYWJzb2x1dGUnLCAnYm90dG9tJzonMCd9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZm5Gb290ZXIpOwogICAgICAgICQod2luZG93KS5yZXNpemUoZm5Gb290ZXIpOwogICAgfSkoKTsKCiAgICAgLy8gQ29va2llCiAgICAgICAgJCgnLmFncmVlLWJ1dHRvbicpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICBjb25maXJtY29va2llKCcnLGZ1bmN0aW9uKHJldG91cil7CiAgICAgICAgICAgICAgIGlmIChyZXRvdXIpIHskKCcucG9wdXAtY29udGVudCcpLmhpZGUoKTt9CiAgICAgICAgICAgfSk7CiAgICAgICAgfSk7Cgo8L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPgoK
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:43 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-741/vente-appartement-6-pieces-4-chambres-paris-75005/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:43 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=8j2g8frmsgj6ei6cqq3u60d875; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCI+CjxoZWFkPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ii8+CgogICAgPHRpdGxlPlZlbnRlIEFwcGFydGVtZW50IFBhcmlzIDUgU09VUyBPRkZSRSAtIFBBTlRIRU9OIC0gTUFJUklFIDXDqG1lIC0gQXNzYXMgSW1tb2JpbGllcjwvdGl0bGU+CgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkTDqXRhaWxzIGRlIGwnYW5ub25jZSBpbW1vYmlsacOocmUgdmVudGUgYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIFBBUklTIDc1MDA1IDQgY2hhbWJyZXMgMTQwIG3CsiBQcml4IDIgOTAwIDAwMCDigqwgUsOpZsOpcmVuY2UgRFQxLTc0MSIvPgogICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9IkFjaGF0LHZlbnRlLGFjaGV0ZXIsdmVuZHJlLGVzdGltZXIsYXBwYXJ0ZW1lbnQsbG9mdCxtYWlzb24saG90ZWwgcGFydGljdWxpZXIsZXN0aW1hdGlvbixncmF0dWl0ZSxob21lIHN0YWdpbmcsQXNzYXMgSW1tb2JpbGllcixwYXJpcyxyaXZlIGdhdWNoZSw3NTAwNiwgNzUwMDUsNzUwMDcsNzUwMTQsNzUwMTUsSW1tb2JpbGllcixhZ2VuY2UgaW1tb2JpbGnDqHJlLGltbW9iaWxpZXJzLGJpZW4gaW1tb2JpbGllciwgbW9udHBhcm5hc3NlLCB2YXZpbiwgcmFzcGFpbCIgLz4KICAgIDxtZXRhIG5hbWU9InJldmlzaXQtYWZ0ZXIiIGNvbnRlbnQ9IjEwIGRheXMiIC8+CiAgICA8bWV0YSBuYW1lID0iZm9ybWF0LWRldGVjdGlvbiIgY29udGVudCA9ICJ0ZWxlcGhvbmU9bm8iIC8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIiBjb250ZW50PSJ5ZXMiLz4KICAgIDxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLXRpdGxlIiBjb250ZW50PSJBc3NhcyBJbW1vYmlsaWVyIi8+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoIi8+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+CgoJPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CjxzY3JpcHQ+KGZ1bmN0aW9uKHcsZCxzLGwsaSl7d1tsXT13W2xdfHxbXTt3W2xdLnB1c2goeydndG0uc3RhcnQnOgpuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCmo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQonaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7Cn0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnZGF0YUxheWVyJywnR1RNLU40V1dQWksnKTs8L3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgoKCgogICAgPGJhc2UgaHJlZj0iaHR0cHM6Ly93d3cuYXNzYXNpbW1vYmlsaWVyLmNvbS8iIC8+CgogICAgPCEtLTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvanF1ZXJ5LTIuMS4xLm1pbi5qcyI+PC9zY3JpcHQ+LS0+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL2pxdWVyeS5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvU2NhbGVJbWFnZS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9qcXVlcnkuY3ljbGUyLm1pbi5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9qcXVlcnkubXVsdGlwbGUuc2VsZWN0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvanF1ZXJ5LnNoYXJycmUubWluLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vbXNkcm9wLmNzcyIgLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX2RlZmF1bHQvcmVzZXQuY3NzIiAvPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vcGhvdG9zd2lwZS5jc3MiIC8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2RlZmF1bHQtc2tpbi5jc3MiIC8+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9zdHlsZS5jc3M/MjAxODA2Mjg9Ii8+CgogICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIGhyZWZsYW5nPSIiIGhyZWY9Imh0dHBzOi8vbS5hc3Nhc2ltbW9iaWxpZXIuY29tL2Fubm9uY2UtdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyL3JlZi1kdDEtNzQxL3ZlbnRlLWFwcGFydGVtZW50LTYtcGllY2VzLTQtY2hhbWJyZXMtcGFyaXMtNzUwMDUvIiAvPgoKICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9mYXZpY29uLmljbyIgLz4KCiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2FwcGxlVG91Y2hJY29uNjAucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9Ijc2eDc2IiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjc2LnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxMjB4MTIwIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjEyMC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTUyeDE1MiIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvYXBwbGVUb3VjaEljb24xNTIucG5nIj4KCiAgICA8bWV0YSBuYW1lPSJhcHBsaWNhdGlvbi1uYW1lIiBjb250ZW50PSJBc3NhcyBJbW1vYmlsaWVyIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiMwMzQ2OGEiIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTcweDcwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvbXNUb3VjaC9zbWFsbHRpbGUtNzB4NzAucG5nIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1zcXVhcmUxNTB4MTUwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvbXNUb3VjaC9tZWRpdW10aWxlLTE1MHgxNTAucG5nIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi13aWRlMzEweDE1MGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL21zVG91Y2gvd2lkZXRpbGUtMzEweDE1MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTMxMHgzMTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9tc1RvdWNoL2xhcmdldGlsZS0zMTB4MzEwLnBuZyIgLz4KCiAgICA8IS0tW2lmIElFIF0+PHNjcmlwdCBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvbW9kZXJuaXpyLmN1c3RvbS5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIGx0ZSBJRSA5XT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL3BsYWNlaG9sZGVycy5taW4uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiAoZ3RlIElFIDYpJihsdGUgSUUgOCldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvc2VsZWN0aXZpenItbWluLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHQgSUUgOV0+PHNjcmlwdCBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvY3NzMy1tZWRpYXF1ZXJpZXMuanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgoKICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1BbGVncmV5YScgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+CgoKCjwvaGVhZD4KPCEtLVtpZiBsdCBJRSA3XT4gPGJvZHkgY2xhc3M9ImllIGllNiBpZTdfIGllOF8gaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgN10+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTcgaWU3XyBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDhdPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU4IGllOF8gaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOV0+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTkgaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgZ3QgSUUgOV0+IDxib2R5PjwhW2VuZGlmXS0tPgo8IS0tW2lmICFJRV0+PCEtLT48Ym9keT48IS0tPCFbZW5kaWZdLS0+Cgk8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgo8bm9zY3JpcHQ+PGlmcmFtZSBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLU40V1dQWksiIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgoKPGRpdiBpZD0ibWFpbiIgY2xhc3M9ImFubm9uY2VzLWRlZmF1bHQiPgogICAgPGhlYWRlcj4KICAgIDxkaXYgY2xhc3M9InRvcF9oZWFkZXIiPgogICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvZ28iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmFzc2FzaW1tb2JpbGllci5jb20vIiB0aXRsZT0iQXNzYXMgSW1tb2JpbGllciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJBc3NhcyBJbW1vYmlsaWVyIC0gQWNoYXQgdmVudGUgYXBwYXJ0ZW1lbnQgcGFyaXMgcml2ZSBnYXVjaGUiLz4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8bmF2PgogICAgPHVsIGNsYXNzPSJtYWluTWVudSI+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvIiB0aXRsZT0iSW1tb2JpbGllciBQYXJpcyA3NTAwNiBBc3NhcyBpbW1vYmlsaWVyIiBjbGFzcz0iaWNvX2hvbWUiPjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJJbW1vYmlsaWVyIGVuIFZlbnRlIEFzc2FzIGltbW9iaWxpZXIiIGNsYXNzPSIiPkVuIHZlbnRlPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvZXN0aW1hdGlvbi1hcHBhcnRlbWVudC1kdXBsZXgtaG90ZWwtcGFydGljdWxpZXItcGFyaXMtNzUwMDYvIiB0aXRsZT0iRXN0aW1lciB2b3RyZSBiaWVuIHN1ciBQYXJpcyIgY2xhc3M9IiI+RXN0aW1hdGlvbjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL3BsYW4tbWVkaWEtYWN0dWFsaXRlLWFzc2FzLWltbW9iaWxpZXIvIiB0aXRsZT0iQWN0dWFsaXTDqXMgQXNzYXMgaW1tb2JpbGllciIgY2xhc3M9IiI+UGxhbiBtw6lkaWE8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9iaWVucy12ZW5kdXMtYXBwYXJ0ZW1lbnQtbWFpc29uLWFzc2FzLWltbW9iaWxpZXItcGFyaXMtNzUwMDYvIiB0aXRsZT0iQmllbnMgdmVuZHVzIHBhciBBc3NhcyBpbW1vYmlsaWVyIiBjbGFzcz0iIj5Ob3MgdmVudGVzPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvaG9tZS1zdGFnaW5nLWFzc2FzLWltbW9iaWxpZXItcGFyaXMvIiB0aXRsZT0iSG9tZSBTdGFnaW5nIEFzc2FzIGltbW9iaWxpZXIiIGNsYXNzPSIiPkhvbWUgc3RhZ2luZzwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnRhY3QtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLWltbW9iaWxpZXIvIiB0aXRsZT0iQ29udGFjdGV6IGzigJlhZ2VuY2UgaW1tb2JpbGnDqHJlIEFzc2FzIGltbW9iaWxpZXIiIGNsYXNzPSIiPk5vdXMgY29udGFjdGVyPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPHNwYW4gY2xhc3M9Imxhc3RTcGFuIj48L3NwYW4+CiAgICA8L3VsPgogICAgPHVsIGNsYXNzPSJzZWNvbmRNZW51Ij4KICAgICAgICA8bGkgY2xhc3M9Im1vdGV1cl9oZWFkZXIiPgogICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlbGVjdGlvbl9oZWFkZXIiPgogICAgICAgICAgICA8YSBocmVmPSIvbWEtc2VsZWN0aW9uLWFubm9uY2VzLWltbW9iaWxpZXJlcy1hc3Nhcy8iIHRpdGxlPSJTw6lsZWN0aW9ubmVyIGFubm9uY2UgaW1tb2JpbGnDqHJlIiBjbGFzcz0ic2VsZWN0aW9uIj4KICAgICAgICAgICAgICAgIE1hIHPDqWxlY3Rpb24gOgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5iX3NlbGVjdGlvbiI+MDwvc3Bhbj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgIDwvdWw+CiAgICA8ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CjwvbmF2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewogICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICAkKCcuaWNvX21lbnUnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKCdoZWFkZXIgPiBkaXYgbmF2IHVsLm1haW5NZW51Jykuc2xpZGVUb2dnbGUoMjAwLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgaWYoJCgnc2VjdGlvbicpLmhlaWdodCgpPjM4OSl7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2hlYWRlciA+IGRpdiBuYXYgdWwubWFpbk1lbnUnKS5jc3MoJ2hlaWdodCcsICQoJ3NlY3Rpb24nKS5oZWlnaHQoKSk7CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkoKTsKICAgIH0pOwo8L3NjcmlwdD4KCgoKCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fbWVudSI+PC9zcGFuPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImZvcm1faGVhZGVyIj4KICAgIDxkaXY+CiAgICAgICAgPHNwYW4gY2xhc3M9Imljb19jbG9zZV9oZWFkZXIiPjwvc3Bhbj4KICAgICAgICA8Zm9ybSBpZD0ibW90ZXVyX2Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyLyI+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkiPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZ2VvX211bHRpIj5WaWxsZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9Imdlb19tdWx0aSIgbmFtZT0iZ2VvX211bHRpW10iIG11bHRpcGxlPSJtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDU7cGFyaXMiID5QQVJJUyAtIDc1MDA1PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDY7cGFyaXMiID5QQVJJUyAtIDc1MDA2PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMDc7cGFyaXMiID5QQVJJUyAtIDc1MDA3PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iRlI7NzUwMTQ7cGFyaXMiID5QQVJJUyAtIDc1MDE0PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkiPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY2F0ZWdvcnkiPlR5cGUgZGUgYmllbjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJjYXRlZ29yeSIgbmFtZT0iY2F0ZWdvcnlbXSIgIG11bHRpcGxlPSJtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iQXBwYXJ0bWVudCIgPkFwcGFydGVtZW50PC9vcHRpb24+CiAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJtdWx0aSBzdXJmYWNlIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InN1cmZhY2UiIGlkPSJzdXJmYWNlX21pbiIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3VyZmFjZV9tYXgiIGlkPSJzdXJmYWNlX21heCIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic3VyZmFjZSI+U3VwZXJmaWNpZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0ic2VsZWN0X3N1cmZhY2UiIG5hbWU9InN1cmZhY2VbXSIgbXVsdGlwbGU9Im11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMCw1MCI+JmxzYXF1bzsgNTAgbcKyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjUwLDEwMCI+NTAgbcKyIC0gMTAwIG3Csjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMDAsMTUwIj4xMDAgbcKyIC0gMTUwIG3Csjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxNTAsMjAwIj4xNTAgbcKyIC0gMjAwIG3Csjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDAsIj4mcnNhcXVvOyAyMDAgbcKyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJtdWx0aSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjaGFtYnJlc19tdWx0aSI+TmJyZSBjaGFtYnJlczwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJjaGFtYnJlc19tdWx0aSIgbXVsdGlwbGU9Im11bHRpcGxlIiBuYW1lPSJjaGFtYnJlc1tdIj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxIiA+MTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIiID4yPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMyIgPjM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI0IiA+NDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjUiID41IGV0IHBsdXM8L29wdGlvbj4KICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9Im11bHRpIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1pbiIgaWQ9ImJ1ZGdldF9taW4iIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJtYXgiIGlkPSJidWRnZXRfbWF4IiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYnVkZ2V0Ij5CdWRnZXQ8L2xhYmVsPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0ic2VsZWN0X2J1ZGdldCIgbmFtZT0iYnVkZ2V0W10iIG11bHRpcGxlPSJtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMCw1MDAwMDAiPiZsc2FxdW87IDUwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNTAwMDAwLDgwMDAwMCI+NTAwIDAwMCDigqwgLSA4MDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjgwMDAwMCwxMjAwMDAwIj44MDAgMDAwIOKCrCAtIDEgMjAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMjAwMDAwLDE1MDAwMDAiPjEgMjAwIDAwMCDigqwgLSAxIDUwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTUwMDAwMCwxODAwMDAwIj4xIDUwMCAwMDAg4oKsIC0gMSA4MDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE4MDAwMDAsMjQwMDAwMCI+MSA4MDAgMDAwIOKCrCAtIDIgNDAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyNDAwMDAwLDMwMDAwMDAiPjIgNDAwIDAwMCDigqwgLSAzIDAwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMzAwMDAwMCwiPiZyc2FxdW87IDMgMDAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9InJlZmVyZW5jZSI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYmllbl9yZWYiPlLDqWbDqXJlbmNlPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYmllbl9yZWYiIGlkPSJiaWVuX3JlZiIgcGxhY2Vob2xkZXI9IlLDqWbDqXJlbmNlIiB2YWx1ZT0iIiBjbGFzcz0idmFsZXVyIi8+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InAiIGlkPSJwIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJuZXdfcmVzZWFyY2giIGlkPSJuZXdfcmVzZWFyY2giIHZhbHVlPSIxIiAvPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZWNoYXJnZU1SIiBpZD0icmVjaGFyZ2VNUiIgdmFsdWU9IjAiIC8+CiAgICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iYm91dG9uIHN1Ym1pdCIgdHlwZT0ic3VibWl0IiB2YWx1ZT0iUmVjaGVyY2hlciIgLz4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9tb3RldXJfeGhyX2xpc3RjaXRpZXMuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vPCFbQ0RBVEFbCgogICAgLy8gJCgnI3NlbGVjdF9idWRnZXQnKS5vbignY2hhbmdlJyxmdW5jdGlvbigpIHsKCiAgICAvLyAgICAgICAgIHZhciB2YWxldXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5zZWxlY3RfYnVkZ2V0LnZhbHVlOwogICAgLy8gICAgICAgICBpZiAodmFsZXVyLmluZGV4T2YoJywnLDApID4gMCkKICAgIC8vICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgdmFyIHRhYnZhbCA9IHZhbGV1ci5zcGxpdCgnLCcpOwogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuYnVkZ2V0X21pbi52YWx1ZSA9IHRhYnZhbFswXTsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9tYXgudmFsdWUgPSB0YWJ2YWxbMV07CiAgICAvLyAgICAgICAgIH0KICAgIC8vICAgICAgICAgZWxzZQogICAgLy8gICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5idWRnZXRfbWluLnZhbHVlID0gJyc7CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5idWRnZXRfbWF4LnZhbHVlID0gJyc7CiAgICAvLyAgICAgICAgIH0KCiAgICAvLyB9KTsKCgogICAgLy8gJCgnLnN1cmZhY2UgaW5wdXQnKS5vbignY2hhbmdlJyxmdW5jdGlvbigpIHsKICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ2ljaScpOwogICAgLy8gICAgICAgICB2YXIgdmFsZXVyID0gdGhpcy52YWx1ZTsKICAgIC8vICAgICAgICAgY29uc29sZS5sb2codmFsZXVyKTsKICAgIC8vICAgICAgICAgaWYgKHZhbGV1ci5pbmRleE9mKCcsJywwKSA+IDApCiAgICAvLyAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgIHZhciB0YWJ2YWwgPSB2YWxldXIuc3BsaXQoJywnKTsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLnN1cmZhY2VfbWluLnZhbHVlID0gdGFidmFsWzBdOwogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuc3VyZmFjZV9tYXgudmFsdWUgPSB0YWJ2YWxbMV07CiAgICAvLyAgICAgICAgIH0KICAgIC8vICAgICAgICAgZWxzZQogICAgLy8gICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5zdXJmYWNlX21pbi52YWx1ZSA9ICcnOwogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuc3VyZmFjZV9tYXgudmFsdWUgPSAnJzsKICAgIC8vICAgICAgICAgfQoKICAgIC8vIH0pOwoKICAgIHZhciBtb3RldXJPcGVuID0gZmFsc2U7CgogICAgJCgnLm1vdGV1cl9oZWFkZXInKS5vbignY2xpY2snLCBmdW5jdGlvbigpewogICAgICAgIGlmKG1vdGV1ck9wZW4gPT0gZmFsc2UpewoKICAgICAgICAgICAgbW90ZXVyT3BlbiA9IHRydWU7CgogICAgICAgICAgICAkKCcuZm9ybV9oZWFkZXInKS5zbGlkZURvd24oMjAwLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzondmlzaWJsZScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAgICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlVXAoMjAwLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzonaGlkZGVuJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9CgogICAgfSk7CgogICAgJCgnLmljb19jbG9zZV9oZWFkZXInKS5vbignY2xpY2snLCBmdW5jdGlvbigpewoKICAgICAgICBtb3RldXJPcGVuID0gZmFsc2U7CgogICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlVXAoMjAwKTsKCiAgICB9KTsKCiAgICAkKCcjZ2VvX211bHRpJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgIHBsYWNlaG9sZGVyOiAnTG9jYWxpc2F0aW9uJywKICAgICAgICBjb3VudFNlbGVjdGVkOicnLAogICAgICAgIG5vTWF0Y2hlc0ZvdW5kOicnLAogICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICBzZWxlY3RBbGw6ICcnCiAgICB9KTsKCiAgICAgJCgnI2dlb19zZWN0ZXVyJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgIHBsYWNlaG9sZGVyOiAiU2VjdGV1ciIsCiAgICAgICAgY291bnRTZWxlY3RlZDonJywKICAgICAgICBub01hdGNoZXNGb3VuZDonJywKICAgICAgICBhbGxTZWxlY3RlZDogJycsCiAgICAgICAgc2VsZWN0QWxsOiAnJwogICAgfSk7CgogICAgJCgnI2NoYW1icmVzX211bHRpJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgIHBsYWNlaG9sZGVyOiAiTmJyZSBjaGFtYnJlcyIsCiAgICAgICAgY291bnRTZWxlY3RlZDonJywKICAgICAgICBub01hdGNoZXNGb3VuZDonJywKICAgICAgICBhbGxTZWxlY3RlZDogJycsCiAgICAgICAgc2VsZWN0QWxsOiAnJwogICAgfSk7CgogICAgJCgnI2NhdGVnb3J5JykubXVsdGlwbGVTZWxlY3QoewogICAgICAgIHBsYWNlaG9sZGVyOiAiVHlwZSBkZSBiaWVuIiwKICAgICAgICBjb3VudFNlbGVjdGVkOicnLAogICAgICAgIG5vTWF0Y2hlc0ZvdW5kOicnLAogICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICBzZWxlY3RBbGw6ICcnCiAgICB9KTsKCiAgICAvLyAgCiAgICAoZnVuY3Rpb24oKXsKICAgICAgICB2YXIgZm5DaGVjayA9IGZ1bmN0aW9uKG1pblZhbCxtYXhWYWwpewogICAgICAgICAgICBpZiAoKG1pblZhbCA9PSBudWxsIHx8IG1pblZhbC5sZW5ndGggPT0gMCkKICAgICAgICAgICAgICAgICYmIChtYXhWYWwgPT0gbnVsbCB8fCBtYXhWYWwubGVuZ3RoID09IDApKQogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB2YXIgb2JqU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbGVjdF9zdXJmYWNlJyk7CiAgICAgICAgICAgIHZhciB0b1NlbGVjdHMgPSBbXTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpTZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIgc3BsaXRWYWwgPSBvYmpTZWxlY3Qub3B0aW9uc1tpXS52YWx1ZS5zcGxpdCgvLC8pOwogICAgICAgICAgICAgICAgaWYgKChtaW5WYWwgPT0gbnVsbCB8fCBtaW5WYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMF0pID49IHBhcnNlSW50KG1pblZhbCkpCiAgICAgICAgICAgICAgICAgICAgJiYgKG1heFZhbCA9PSBudWxsIHx8IG1heFZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFsxXSkgPD0gcGFyc2VJbnQobWF4VmFsKSkpewogICAgICAgICAgICAgICAgICAgIG9ialNlbGVjdC5vcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB0b1NlbGVjdHMucHVzaChvYmpTZWxlY3Qub3B0aW9uc1tpXS52YWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRvU2VsZWN0czsKICAgICAgICB9CiAgICAgICAgZm5DaGVjayhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5zdXJmYWNlX21pbi52YWx1ZSxkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5zdXJmYWNlX21heC52YWx1ZSk7CiAgICAgICAgLy8gIAogICAgICAgICQoJyNzZWxlY3Rfc3VyZmFjZScpLm11bHRpcGxlU2VsZWN0KHsKICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJTdXBlcmZpY2llIiwKICAgICAgICAgICAgc2VsZWN0QWxsOiAnJywKICAgICAgICAgICAgYWxsU2VsZWN0ZWQ6ICcnLAogICAgICAgICAgICBjb3VudFNlbGVjdGVkOiBmYWxzZSwKICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgIHZhciBvYmpTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0X3N1cmZhY2UnKTsKICAgICAgICAgICAgICAgIHZhciBtaW5WYWwgPSAnJzsKICAgICAgICAgICAgICAgIHZhciBtYXhWYWwgPSAnJzsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqU2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgICAgIGlmIChvYmpTZWxlY3Qub3B0aW9uc1tpXS5zZWxlY3RlZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGxpdFZhbCA9IG9ialNlbGVjdC5vcHRpb25zW2ldLnZhbHVlLnNwbGl0KC8sLyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW5WYWwgPT0gbnVsbCB8fCBtaW5WYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMF0pIDwgcGFyc2VJbnQobWluVmFsKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblZhbCA9IHNwbGl0VmFsWzBdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaXRWYWxbMV0ubGVuZ3RoID09IDAgfHwgbWF4VmFsID09IG51bGwgfHwgbWF4VmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzFdKSA+IHBhcnNlSW50KG1heFZhbCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhWYWwgPSBzcGxpdFZhbFsxXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkKCcjbW90ZXVyX2Zvcm0gaW5wdXRbbmFtZT0ic3VyZmFjZSJdJykudmFsKG1pblZhbCk7CiAgICAgICAgICAgICAgICAkKCcjbW90ZXVyX2Zvcm0gaW5wdXRbbmFtZT0ic3VyZmFjZV9tYXgiXScpLnZhbChtYXhWYWwpOwogICAgICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAgICAgJCgnI3NlbGVjdF9zdXJmYWNlJykubXVsdGlwbGVTZWxlY3QoJ3NldFNlbGVjdHMnLGZuQ2hlY2sobWluVmFsLG1heFZhbCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KSgpOwoKICAgIC8vICAKICAgIChmdW5jdGlvbigpewogICAgICAgIHZhciBmbkNoZWNrID0gZnVuY3Rpb24obWluVmFsLG1heFZhbCl7CiAgICAgICAgICAgIGlmICgobWluVmFsID09IG51bGwgfHwgbWluVmFsLmxlbmd0aCA9PSAwKQogICAgICAgICAgICAgICAgJiYgKG1heFZhbCA9PSBudWxsIHx8IG1heFZhbC5sZW5ndGggPT0gMCkpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHZhciBvYmpTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0X2J1ZGdldCcpOwogICAgICAgICAgICB2YXIgdG9TZWxlY3RzID0gW107CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqU2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgdmFyIHNwbGl0VmFsID0gb2JqU2VsZWN0Lm9wdGlvbnNbaV0udmFsdWUuc3BsaXQoLywvKTsKICAgICAgICAgICAgICAgIGlmICgobWluVmFsID09IG51bGwgfHwgbWluVmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzBdKSA+PSBwYXJzZUludChtaW5WYWwpKQogICAgICAgICAgICAgICAgICAgICYmIChtYXhWYWwgPT0gbnVsbCB8fCBtYXhWYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMV0pIDw9IHBhcnNlSW50KG1heFZhbCkpKXsKICAgICAgICAgICAgICAgICAgICBvYmpTZWxlY3Qub3B0aW9uc1tpXS5zZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgdG9TZWxlY3RzLnB1c2gob2JqU2VsZWN0Lm9wdGlvbnNbaV0udmFsdWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0b1NlbGVjdHM7CiAgICAgICAgfQogICAgICAgIGZuQ2hlY2soZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuYnVkZ2V0X21pbi52YWx1ZSxkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5idWRnZXRfbWF4LnZhbHVlKTsKICAgICAgICAvLyAgCiAgICAgICAgJCgnI3NlbGVjdF9idWRnZXQnKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiQnVkZ2V0IiwKICAgICAgICAgICAgc2VsZWN0QWxsOiAnJywKICAgICAgICAgICAgYWxsU2VsZWN0ZWQ6ICcnLAogICAgICAgICAgICBjb3VudFNlbGVjdGVkOiBmYWxzZSwKICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgIHZhciBvYmpTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0X2J1ZGdldCcpOwogICAgICAgICAgICAgICAgdmFyIG1pblZhbCA9ICcnOwogICAgICAgICAgICAgICAgdmFyIG1heFZhbCA9ICcnOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpTZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9ialNlbGVjdC5vcHRpb25zW2ldLnNlbGVjdGVkKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGl0VmFsID0gb2JqU2VsZWN0Lm9wdGlvbnNbaV0udmFsdWUuc3BsaXQoLywvKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pblZhbCA9PSBudWxsIHx8IG1pblZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFswXSkgPCBwYXJzZUludChtaW5WYWwpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluVmFsID0gc3BsaXRWYWxbMF07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGxpdFZhbFsxXS5sZW5ndGggPT0gMCB8fCBtYXhWYWwgPT0gbnVsbCB8fCBtYXhWYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMV0pID4gcGFyc2VJbnQobWF4VmFsKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFZhbCA9IHNwbGl0VmFsWzFdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQoJyNtb3RldXJfZm9ybSBpbnB1dFtuYW1lPSJtaW4iXScpLnZhbChtaW5WYWwpOwogICAgICAgICAgICAgICAgJCgnI21vdGV1cl9mb3JtIGlucHV0W25hbWU9Im1heCJdJykudmFsKG1heFZhbCk7CiAgICAgICAgICAgICAgICAvLyAgCiAgICAgICAgICAgICAgICAkKCcjc2VsZWN0X2J1ZGdldCcpLm11bHRpcGxlU2VsZWN0KCdzZXRTZWxlY3RzJyxmbkNoZWNrKG1pblZhbCxtYXhWYWwpKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSkoKTsKCgogICAgbW90ZXVyX3hocl9saXN0Y2l0aWVzKCJnZW9fc2VjdGV1cjt0cmFuc2FjO3R5cGVfaW1tbzthZGRyZXNzX2RlcGFydGVtZW50O2FkZHJlc3NfcGF5cyIsIHRydWUsICIiKTsKCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewoKCQkvL2J1ZGdldAogICAgICAgIC8vIHZhciBidWRnZXRfbWluID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuYnVkZ2V0X21pbi52YWx1ZTsKICAgICAgICAvLyB2YXIgYnVkZ2V0X21heCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmJ1ZGdldF9tYXgudmFsdWU7CiAgICAgICAgLy8gaWYgKGJ1ZGdldF9taW4gPT0gJycpIGJ1ZGdldF9taW4gPSAnMCc7CiAgICAgICAgLy8gdmFyIHZhbGV1ciA9IGJ1ZGdldF9taW4gKyAnLCcgKyBidWRnZXRfbWF4OwogICAgICAgIC8vIGlmIChidWRnZXRfbWluICE9ICcwJyB8fCBidWRnZXRfbWF4ICE9ICcnKQogICAgICAgIC8vIHsKICAgICAgICAvLyAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuc2VsZWN0X2J1ZGdldC52YWx1ZSA9IHZhbGV1cjsKICAgICAgICAvLyB9OwoKICAgICAgICAvL3N1cmZhY2UKICAgICAgICAvLyB2YXIgc3VyZmFjZV9taW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5zdXJmYWNlX21pbi52YWx1ZTsKICAgICAgICAvLyB2YXIgc3VyZmFjZV9tYXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5zdXJmYWNlX21heC52YWx1ZTsKICAgICAgICAvLyBpZiAoc3VyZmFjZV9taW4gPT0gJycpIHN1cmZhY2VfbWluID0gJzAnOwogICAgICAgIC8vIHZhciB2YWxldXIgPSBzdXJmYWNlX21pbiArICcsJyArIHN1cmZhY2VfbWF4OwogICAgICAgIC8vIGlmIChzdXJmYWNlX21pbiAhPSAnMCcgfHwgc3VyZmFjZV9tYXggIT0gJycpCiAgICAgICAgLy8gewogICAgICAgIC8vICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5zZWxlY3Rfc3VyZmFjZS52YWx1ZSA9IHZhbGV1cjsKICAgICAgICAvLyB9OwoKICAgICAgICBpZigkKCcjdHlwZSBvcHRpb24nKS5zaXplKCk8Myl7CiAgICAgICAgICAgICQoJyN0eXBlIG9wdGlvbjpudGgtY2hpbGQoMiknKS5hdHRyKCJzZWxlY3RlZCIsInNlbGVjdGVkIik7CiAgICAgICAgfTsKCiAgICAgICAgaWYoImFubm9uY2VzIj09ImFubm9uY2VzIil7CiAgICAgICAgICAgIGlmKCJkZWZhdWx0Ij09ImNvZXVyIil7CiAgICAgICAgICAgICAgICAkKCcjbW90ZXVyX2Zvcm0nKS5hdHRyKCdhY3Rpb24nLCcvdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyLycpOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICQoJ21vdGV1cl9mb3JtJykuYXR0cignYWN0aW9uJywnL2Fubm9uY2UtdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyLycpOwogICAgICAgICAgICB9CiAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJCgnbW90ZXVyX2Zvcm0nKS5hdHRyKCdhY3Rpb24nLCcvdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyLycpOwogICAgICAgfQogICAgfSk7CgovL11dPgo8L3NjcmlwdD4KCjwvaGVhZGVyPgoKCgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvanF1ZXJ5LmpjYXJvdXNlbC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL3Bob3Rvc3dpcGUubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9waG90b3N3aXBlLXVpLWRlZmF1bHQubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL21hal9zZWxlY3Rpb24uanMiPjwvc2NyaXB0PgoKICAgIDxzZWN0aW9uIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUHJvZHVjdCIgaWQ9ImFubm9uY2VfcHJvZmlsIj4KICAgICAgICA8ZGl2IGNsYXNzPSJsaW5rX2JhY2sgdG9wIj4KICAgICAgICA8L2Rpdj4KCQk8aDEgaXRlbXByb3A9Im5hbWUiPlZlbnRlIEFwcGFydGVtZW50IFBhcmlzIDUgU09VUyBPRkZSRSAtIFBBTlRIRU9OIC0gTUFJUklFIDXDqG1lPC9oMT4KICAgICAgICA8ZGl2IGNsYXNzPSJkaWFwb3JhbWFfdGh1bWJzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGlhcG9yYW1hX3Byb2ZpbCIgZGF0YS1jeWNsZS1wYWdlci10ZW1wbGF0ZT0iIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJzcGFjZXJCbG9ja2VyIGF1dG9TY2FsZSIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9zcGFjZXIucG5nIiBhbHQ9IiIvPgoJCQkJCTxpbWcgY2xhc3M9ImF1dG9TY2FsZSIgaXRlbXByb3A9ImltYWdlIiBzcmM9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wMC0yMDIwLTAxLTI2LTAxMTMuanBnIiBhbHQ9ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA1KSIgdGl0bGU9ImFwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA1KSIvPjxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGh1bWJzX2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqY2Fyb3VzZWwtcHJldiBpbmFjdGl2ZSBpY29fZGV0YWlsX3ByZXYiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjeWNsZSIgZGF0YS1qY2Fyb3VzZWw9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYnMgY3ljbGUtcGFnZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ic3BhY2VyQmxvY2tlciBhdXRvU2NhbGUiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvc3BhY2VyLnBuZyIgYWx0PSIiLz4KCQkJCQkJCQkJPGltZyBjbGFzcz0iYXV0b1NjYWxlIiBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDMvMjQzXzAwLTIwMjAtMDEtMjYtMDExMy5qcGciIGFsdD0iYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDUpIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDUpIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImpjYXJvdXNlbC1uZXh0IGluYWN0aXZlIGljb19kZXRhaWxfbmV4dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCgkJCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQkJLy8gIEFkZExvYWRFdmVudAoJCQkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJCWZ1bmN0aW9uIEFkZExvYWRFdmVudChmdW5jKSB7CgkJCQl2YXIgb2xkb25sb2FkID0gd2luZG93Lm9ubG9hZDsKCQkJCWlmICh0eXBlb2Ygd2luZG93Lm9ubG9hZCAhPSAnZnVuY3Rpb24nKQoJCQkJeyB3aW5kb3cub25sb2FkID0gZnVuYzsgfQoJCQkJZWxzZSB7CgkJCQkJd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkgewoJCQkJCQlpZiAob2xkb25sb2FkKQoJCQkJCQl7IG9sZG9ubG9hZCgpOyB9CgkJCQkJCWZ1bmMoKTsKCQkJCQl9CgkJCQl9CgkJCX0KCiAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KICAgICAgICAgICAgICAgIC8qKioqKioqKioqUFVUIFRIRSBSQVRJTyAzLzIgT04gRElBUE8gQU5EIFRIVU1CUyoqKioqKioqKioqKioqKioqKi8KICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCQkJCShmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB3ID0gJCgnLmRpYXBvcmFtYV9wcm9maWwnKS53aWR0aCgpLzEuNTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLnRodW1ic19jb250YWluZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgLy9JTlNUQU5DRSBESUFQT1JBTUEgRklDSEUgQklFTgogICAgICAgICAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgPiBkaXYgPiBhIGltZycpKTsKCiAgICAgICAgICAgICAgICB9KSgpOwoKCiAgICAgICAgICAgICAgICAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKHsKICAgICAgICAgICAgICAgICAgICBzbGlkZXM6Jz4gZGl2LnNsaWRlJywKICAgICAgICAgICAgICAgICAgICBwYWdlcjonLmN5Y2xlLXBhZ2VyJywKICAgICAgICAgICAgICAgICAgICBtYW51YWxTcGVlZDo0MDAsCiAgICAgICAgICAgICAgICAgICAgZng6ICdmYWRlJywKICAgICAgICAgICAgICAgICAgICBzcGVlZDoyMDAwLAogICAgICAgICAgICAgICAgICAgIHN3aXBlOnRydWUKICAgICAgICAgICAgICAgIH0pOwoKCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqQUREIERJQVBPIDFTVCBTTElERSBUSEVOIFJFU1QgT0YgVEhFTSBBRlRFUiBMT0FEKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCShmdW5jdGlvbigpewoKCQkJCQl2YXIgc2xpZGVzID0gW107CgoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wMC0yMDIwLTAxLTI2LTAxMTMuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wMS0yMDIwLTAxLTIyLTAxNTUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wMi0yMDIwLTAxLTIyLTAxNTUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wMy0yMDIwLTAxLTIyLTAxNTUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wNC0yMDIwLTAxLTIyLTAxNTUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wNS0yMDIwLTAxLTIyLTAxNTUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wNi0yMDIwLTAxLTIyLTAxNTUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wNy0yMDIwLTAxLTI2LTAxMTMuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wOC0yMDIwLTAxLTIyLTAxNTUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoJCQkJCQkJc2xpZGVzLnB1c2goeyBzcmM6Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wOS0yMDIwLTAxLTIyLTAxNTUuanBnIiwgYWx0OiJhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSkiIH0pOwoKCQkJCQlpZihzbGlkZXMubGVuZ3RoID4gMCl7CgkJCQkJCXNsaWRlcy5zaGlmdCgpOwoJCQkJCX0KCgkJCQkJZnVuY3Rpb24gaW1nUHJlbG9hZChzbGlkZXMsIGlkeCwgY2FsbGJhY2spewoKCQkJCQkJdmFyIHRlbXBJbWcgPSBuZXcgSW1hZ2UoKTsKCQkJCQkJdmFyIE9ialNsaWRlID0gc2xpZGVzW2lkeF07CgkJCQkJCWlmKE9ialNsaWRlID09IG51bGwpewoJCQkJCQkJcmV0dXJuOwoJCQkJCQl9CgoJCQkJCQkkKHRlbXBJbWcpLmxvYWQoZnVuY3Rpb24oKXsKCQkJCQkJCXZhciBuZXdTbGlkZSA9ICc8ZGl2IGNsYXNzPSJzbGlkZSIgZGF0YS1jeWNsZS1wYWdlci10ZW1wbGF0ZT0iPGRpdj48ZGl2PjxzcGFuPjwvc3Bhbj48aW1nIGNsYXNzPVwnc3BhY2VyQmxvY2tlclwnIHNyYz1cJy90aGVtZS9fZGVmYXVsdC9pbWFnZXMvc3BhY2VyLnBuZ1wnIGFsdD1cJyNcJyAvPjxpbWcgY2xhc3M9XCdhdXRvU2NhbGVcJyBhbHQ9XCcnK09ialNsaWRlLmFsdCsnXCcgc3JjPVwnJytPYmpTbGlkZS5zcmMrJ1wnLz48L2Rpdj48L2Rpdj4iPjxpbWcgY2xhc3M9XCdzcGFjZXJCbG9ja2VyXCcgc3JjPVwnL3RoZW1lL19kZWZhdWx0L2ltYWdlcy9zcGFjZXIucG5nXCcgYWx0PVwnI1wnIC8+PGltZyBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iJytPYmpTbGlkZS5zcmMrJyIgYWx0PSInK09ialNsaWRlLmFsdCsnIi8+PHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPjwvZGl2Pic7CgkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmN5Y2xlKCdhZGQnLCBuZXdTbGlkZSk7CgkJCQkJCQlJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzIGltZycpKTsKCQkJCQkJCS8vICBnbyBuZXh0CgkJCQkJCQlpZiAoaWR4ICsgMSA8IHNsaWRlcy5sZW5ndGgpewoJCQkJCQkJCWltZ1ByZWxvYWQoc2xpZGVzLCBpZHggKyAxLCBjYWxsYmFjayk7CgkJCQkJCQl9CgkJCQkJCQllbHNlIHsKCQkJCQkJCQlpZiAoY2FsbGJhY2sgIT0gbnVsbCl7CgkJCQkJCQkJCWNhbGxiYWNrKCk7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9KTsKCgkJCQkJCXRlbXBJbWcuc3JjID0gT2JqU2xpZGUuc3JjOwoJCQkJCX0KCgkJCQkJQWRkTG9hZEV2ZW50KGZ1bmN0aW9uKCl7CgoJCQkJCQlpbWdQcmVsb2FkKHNsaWRlcywwLCBmdW5jdGlvbigpewoKCQkJCQkJCSQoJy50aHVtYnMnKS5hZGRDbGFzcygnY3ljbGUtcGFnZXInKTsKCQkJCQkJCUltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgaW1nJykpOwoKCQkJCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkJCQkkKCcuY3ljbGUnKS5hZGRDbGFzcygnamNhcm91c2VsLW1hbicpOwoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbWFuJykuamNhcm91c2VsKHsKCQkJCQkJCQkJdmVydGljYWw6IHRydWUKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipDT05UUk9MIEJUTiBORVhUIFBSRVYgQ0FST1VTRUwqKioqLwoKCQkJCQkJCQkkKCcuamNhcm91c2VsLXByZXYnKS5vbignamNhcm91c2VsY29udHJvbDphY3RpdmUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJJCh0aGlzKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTsKCQkJCQkJCQl9KQoJCQkJCQkJCS5vbignamNhcm91c2VsY29udHJvbDppbmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLmFkZENsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLmpjYXJvdXNlbENvbnRyb2woewoJCQkJCQkJCQl0YXJnZXQ6ICctPTEnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbmV4dCcpLm9uKCdqY2Fyb3VzZWxjb250cm9sOmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLm9uKCdqY2Fyb3VzZWxjb250cm9sOmluYWN0aXZlJywgZnVuY3Rpb24oKSB7CgkJCQkJCQkJCSQodGhpcykuYWRkQ2xhc3MoJ2luYWN0aXZlJyk7CgkJCQkJCQkJfSkKCQkJCQkJCQkuamNhcm91c2VsQ29udHJvbCh7CgkJCQkJCQkJCXRhcmdldDogJys9MScKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipDT05UUk9MIENBUk9VU0VMIFZJQSBTTElERSBESUFQT1JBTUEqKioqLwoKCQkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLm9uKCdjeWNsZS1pbml0aWFsaXplZCcsIGZ1bmN0aW9uKCBldmVudCwgb3B0cyApIHsKCQkJCQkJCQkJJCgnLnRodW1icyA+IGRpdicpLnJlbW92ZUNsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKS5lcShvcHRzLmN1cnJTbGlkZSkuYWRkQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpOwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLm9uKCdjeWNsZS1iZWZvcmUnLCBmdW5jdGlvbiggZXZlbnQsIG9wdHMgKSB7CgkJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5yZW1vdmVDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJykuZXEob3B0cy5uZXh0U2xpZGUpLmFkZENsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKTsKCQkJCQkJCQkJJCgnLmpjYXJvdXNlbC1tYW4nKS5qY2Fyb3VzZWwoJ3Njcm9sbCcsIG9wdHMubmV4dFNsaWRlKTsKCQkJCQkJCQl9KTsKCgkJCQkJCQkJLyoqKipTRVQgVVAgQ0FST1VTRUwgQU5EIEhJUyBDSElMRFJFTiBXSURUSCoqKiovCgoJCQkJCQkJCXZhciB4ID0gJCgnLmpjYXJvdXNlbC1tYW4nKS5oZWlnaHQoKS80OwoJCQkJCQkJCXZhciB5ID0gJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aDsKCgkJCQkJCQkJJCgnLmpjYXJvdXNlbC1tYW4gLnRodW1icycpLmNzcyh7CgkJCQkJCQkJCSdoZWlnaHQnOngqeSsncHgnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5jc3MoewoJCQkJCQkJCQknaGVpZ2h0JzoxMDAveSsnJScKCQkJCQkJCQl9KTsKCgkJCQkJCQl9CgoJCQkJCQl9KTsKCQkJCQl9KTsKCgkJCQl9KSgpOwoKICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqSU5TVEFOQ0UgT1BFTlNXSVBFIERFVEFJTCBQSE9UTyoqKioqKioqKioqKioqKioqKioqKi8KCQkJCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKICAgICAgICAgICAgICAgIHZhciBvcGVuUGhvdG9Td2lwZSA9IGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICAgICAgICAgICAgIHZhciBwc3dwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wc3dwJylbMF07CgogICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wMC0yMDIwLTAxLTI2LTAxMTMuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA1KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDMvMjQzXzAxLTIwMjAtMDEtMjItMDE1NS5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDUpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzI0My8yNDNfMDItMjAyMC0wMS0yMi0wMTU1LmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wMy0yMDIwLTAxLTIyLTAxNTUuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA1KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDMvMjQzXzA0LTIwMjAtMDEtMjItMDE1NS5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDUpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzI0My8yNDNfMDUtMjAyMC0wMS0yMi0wMTU1LmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wNi0yMDIwLTAxLTIyLTAxNTUuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA1KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDMvMjQzXzA3LTIwMjAtMDEtMjYtMDExMy5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgNiBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMDUpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzI0My8yNDNfMDgtMjAyMC0wMS0yMi0wMTU1LmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCA2IHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAwNSknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjQzLzI0M18wOS0yMDIwLTAxLTIyLTAxNTUuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDYgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDA1KScsdzonJyxoOicnfSk7CgogICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBmb2N1czogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGJnT3BhY2l0eTonMC45NScsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25TY3JvbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBzaG93QW5pbWF0aW9uRHVyYXRpb246IDMwMCwKICAgICAgICAgICAgICAgICAgICAgICAgaGlkZUFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsCiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FwdGlvbkVsOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVFbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHBpbmNoVG9DbG9zZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25WZXJ0aWNhbERyYWc6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGdhbGxlcnkgPSBuZXcgUGhvdG9Td2lwZShwc3dwRWxlbWVudCwgUGhvdG9Td2lwZVVJX0RlZmF1bHQsIGl0ZW1zLCBvcHRpb25zKTsKCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5pbml0KCk7CiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5nb1RvKGluZGV4KTsKCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5saXN0ZW4oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3ljbGUoJ3Jlc3VtZScpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5vbiggJ2NsaWNrJywnZGl2JywgZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5kYXRhKCJjeWNsZS5vcHRzIikuc2xpZGVOdW0gLTE7CgogICAgICAgICAgICAgICAgICAgIG9wZW5QaG90b1N3aXBlKGluZGV4KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jeWNsZSgncGF1c2UnKTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vSU5TVEFOQ0UgRElBUE9SQU1BIEZJQ0hFIEJJRU4KICAgICAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgPiBkaXYgPiBhIGltZycpKTsKCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB3ID0gJCgnLmRpYXBvcmFtYV9wcm9maWwnKS53aWR0aCgpLzEuNTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLnRodW1ic19jb250YWluZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9KSgpOwoKCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkvKioqKlNFVCBVUCBDQVJPVVNFTCBBTkQgSElTIENISUxEUkVOIFdJRFRIKioqKi8KCgkJCQkJdmFyIHggPSAkKCcuamNhcm91c2VsLW1hbicpLmhlaWdodCgpLzQ7CgkJCQkJdmFyIHkgPSAkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoOwoKCQkJCQkkKCcuamNhcm91c2VsLW1hbiAudGh1bWJzJykuY3NzKHsKCQkJCQkJJ2hlaWdodCc6eCp5KydweCcKCQkJCQl9KTsKCgkJCQkJJCgnLnRodW1icyA+IGRpdicpLmNzcyh7CgkJCQkJCSdoZWlnaHQnOjEwMC95KyclJwoJCQkJCX0pOwoKCQkJCX0KCiAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzID4gZGl2ID4gYSBpbWcnKSk7CgogICAgICAgICAgICB9KTsKCiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGRpdiBjbGFzcz0iYW5ub25jZV9kZXRhaWwiPgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgIDxoMiBpdGVtc2NvcGUgaXRlbXByb3A9ImF2YWlsYWJsZUF0T3JGcm9tIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUGxhY2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPkxvY2FsaXNhdGlvbiA6IDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzIj5QQVJJUzwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UXVhcnRpZXIgOiA8c3BhbiBpdGVtcHJvcD0iYWRkcmVzcyI+U09VUyBPRkZSRSAtIFBBTlRIRU9OIC0gTUFJUklFIDXDqG1lPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0iZGVzY3JpcHRpb24iIGNsYXNzPSJkZXNjcmlwdGlmIj5QQU5USEVPTiAtIE1BSVJJRSAtIENhbG1lIGV0IGVuc29sZWlsbMOpIC0gSW1tZXVibGUgaGF1c3NtYW5uaWVuIGRlIHRyw6hzIGdyYW5kIHN0YW5kaW5nLCBkdXBsZXggNsOobWUgZXQgN8OobWUsIEFVWCAyIERFUk5JRVJTIEVUQUdFUyBhdmVjIGFzY2Vuc2V1ciwgNnAgYXUgY2hhcm1lIGRlIGwnYW5jaWVuLCAxMzMsMjBtMiBsb2kgQ2FycmV6LCAxNDIsMzVtMiBhdSBzb2wgKyAxOG0yIGQnZXNwYWNlcyBleHTDqXJpZXVycywgcGxhbiBmb25jdGlvbm5lbCwgZW50csOpZSwgZG91YmxlIHPDqWpvdXIgZXhwb3PDqSBzdWQgb3Vlc3QgZG90w6kgZCd1biB0csOocyBsYXJnZSBiYWxjb24gcG91dmFudCBhY2N1ZWlsbGlyIHVuZSB0YWJsZSBldCBkZXMgY2hhaXNlcywgY3Vpc2luZSBkaW5hdG9pcmUsIDQgY2hhbWJyZXMgZG9udCAyIHNpdHXDqWVzIGF1IDfDqG1lIMOpdGFnZSBkb250IGwndW5lIGF2ZWMgc2Egc2FsbGUgZGUgYmFpbnMgZXQgc2VzIHRvaWxldHRlcywgdW5lIHNhbGxlIGRlIGJhaW5zLCB1bmUgc2FsbGUgZCdlYXUgYXZlYyB0b2lsZXR0ZXMsIHVuIHRvaWxldHRlIGludml0w6lzLCBub21icmV1eCByYW5nZW1lbnRzLCBjYXZlIGV0IHBldGl0ZSBjaGFtYnJlIGRlIHNlcnZpY2UgY29tcGzDqHRlIGNlIGJpZW4gcmFyZSBkYW5zIGNlIHNlY3RldXIgLiBWdWVzIGTDqWdhZ8OpZXMuIFRyYXZhdXggw6AgcHLDqXZvaXIuIFNFQ1RPUklTQVRJT04gSEVOUkkgSVYuPC9wPgogICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IEFycmF5KCdDZXR0ZSBhbm5vbmNlIGEgw6l0w6kgYWpvdXTDqWUgw6Agdm90cmUgc8OpbGVjdGlvbi4nLCdDZXR0ZSBhbm5vbmNlIGVzdCBkw6lqw6AgZGFucyB2b3RyZSBzw6lsZWN0aW9uLicpOwogICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkZXRhaWxfbGlua19vdXRpbHMiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImFqb3V0X3NlbGVjdGlvbiIgZGF0YS1iaWVuaWQ9IjI0MyIgaHJlZj0iIyIgdGl0bGU9IkFqb3V0ZXIgw6AgbWEgc8OpbGVjdGlvbiI+QWpvdXRlciDDoCBtYSBzw6lsZWN0aW9uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZW52b2lfYW1pIiBpZD0ic2VuZEZyaWVuZCIgZGF0YS1tYWlsLXN1YmplY3Q9IkplIHNvdWhhaXRlIHRlIG1vbnRyZXIgY2V0dGUgYW5ub25jZSIgZGF0YS1tYWlsLWJvZHk9IkJvbmpvdXIsIGonYWkgcGVuc8OpIHF1ZSBjZXR0ZSBhbm5vbmNlIHBvdXJyYWl0IHQnaW50w6lyZXNzZXIgOiAgaHR0cHM6Ly93d3cuYXNzYXNpbW1vYmlsaWVyLmNvbS9hbm5vbmNlLXZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci9yZWYtZHQxLTc0MS92ZW50ZS1hcHBhcnRlbWVudC02LXBpZWNlcy00LWNoYW1icmVzLXBhcmlzLTc1MDA1LyIgaHJlZj0iIyIgdGl0bGU9IkVudm95ZXIgw6AgdW4gYW1pIj5FbnZveWVyIMOgIHVuIGFtaTwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNoYXJlX2J1dHRvbnMgYUxpa2UiIHRpdGxlPSJQYXJ0YWdlciBjZXR0ZSBvZmZyZSBzdXIgbGVzIHLDqXNlYXV4IHNvY2lhdXgiPlBhcnRhZ2VyIGNlIGxpZW48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImxpbmtfaW1wcmVzc2lvbiIgdGl0bGU9IkltcHJpbWVyIGxlIGTDqXRhaWwgZGUgY2UgYmllbiIgaHJlZj0iL2ltcHJlc3Npb24vZGV0YWlscy8yNDMvIiB0YXJnZXQ9Il9ibGFuayI+SW1wcmltZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0cmlnZ2VyX21lbnRpb24iIGhyZWY9Ii9tZW50aW9ucy1sZWdhbGVzLWFnZW5jZS1pbW1vYmlsaWVyZS1hc3Nhcy8iIHRpdGxlPSJJbmZvcm1hdGlvbnMganVyaWRpcXVlcyBBc3NhcyBpbW1vYmlsaWVyIj5Db25zdWx0ZXIgbGUgYmFyw6htZSBkZXMgaG9ub3JhaXJlczwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiAgICAgICAgICAgICAgICB2YXIgc2VuZEZyaWVuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZW5kRnJpZW5kJyk7CgogICAgICAgICAgICAgICAgdmFyIGJlZm9yZVNlbmRGcmllbmQgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIHNlbmRGcmllbmQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBiZWZvcmVTZW5kRnJpZW5kKTsKICAgICAgICAgICAgICAgICAgICB2YXIKICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLW1haWwtc3ViamVjdCcpLAogICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWFpbC1ib2R5JykKICAgICAgICAgICAgICAgICAgICA7CgogICAgICAgICAgICAgICAgICAgIGlmKHN1YmplY3QgIT09IG51bGwpIHN1YmplY3QgPSBlbmNvZGVVUklDb21wb25lbnQoc3ViamVjdCk7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBzdWJqZWN0ID0gJyc7CgogICAgICAgICAgICAgICAgICAgIGlmKGJvZHkgIT09IG51bGwpIGJvZHkgPSBlbmNvZGVVUklDb21wb25lbnQoYm9keSk7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBib2R5ID0gJyc7CgogICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdocmVmJywgJ21haWx0bzo/c3ViamVjdD0nICsgc3ViamVjdCArICcmYm9keT0nICsgYm9keSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGljaygpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmIChzZW5kRnJpZW5kICE9PSBudWxsKSBzZW5kRnJpZW5kLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYmVmb3JlU2VuZEZyaWVuZCk7CgogICAgICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAkKCcuc2hhcmVfYnV0dG9ucycpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZvaWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQodm9pbGUpLmFwcGVuZFRvKCdib2R5JykuYWRkQ2xhc3MoJ2JveF9zaGFyZScpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Tm9kZTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnRpY2FsX2NlbnRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnRpY2FsX2NlbnRlcjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9zZV9zcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgICAgICAgICAkKG5ld05vZGUpLmFwcGVuZFRvKHZvaWxlKS5hcHBlbmQoJzxoMT5QYXJ0YWdlciBjZSBsaWVuPC9oMT4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgJChuZXdOb2RlMikuYXBwZW5kVG8obmV3Tm9kZSkuYXR0cignaWQnLCdzaGFyZW1lJykuYWRkQ2xhc3MoJ3NoYXJycmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCh2ZXJ0aWNhbF9jZW50ZXIpLmFwcGVuZFRvKHZvaWxlKS5hZGRDbGFzcygndmVydGljYWxfY2VudGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoY2xvc2Vfc3BhbikuYXBwZW5kVG8obmV3Tm9kZSkuYWRkQ2xhc3MoJ2Nsb3NlX3NoYXJlIGljb19jbG9zZScpOwogICAgICAgICAgICAgICAgICAgICAgICAkKHZlcnRpY2FsX2NlbnRlcjIpLmFwcGVuZFRvKG5ld05vZGUpLmFkZENsYXNzKCd2ZXJ0aWNhbF9jZW50ZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmJveF9zaGFyZScpLmZhZGVJbigzMDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3NoYXJlbWUnKS5zaGFycnJlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdpdHRlcjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWNlYm9vazogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGVQbHVzOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbnRlcmVzdDp0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbnRlcmVzdDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYTogJ2h0dHBzOi8vd3d3LmFzc2FzaW1tb2JpbGllci5jb20vJy5yZXBsYWNlKC9cLyQvLCAnJykgKyAnLycgKyAnL2RhdGFzL2JpZW5zL3RodW1icy8yNDMvMjQzXzAwLTIwMjAtMDEtMjYtMDExMy5qcGcnLnJlcGxhY2UoL15cLy8sICcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogICAnPHVsPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImZhY2Vib29rIj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fZmFjZWJvb2siPjwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkZhY2Vib29rPC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJ0d2l0dGVyIj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fdHdpdHRlciI+PC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+VHdpdHRlcjwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iZ29vZ2xlcGx1cyI+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX2dvb2dsZXBsdXMiPjwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkdvb2dsZSArPC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJwaW50ZXJlc3QiPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb19waW50ZXJlc3QiPjwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlBpbnRlcmVzdDwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxDdXJsOiAnJywgICAgLy8gIGRpc2FibGUgc2hhcnJyZS5waHAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZUhvdmVyOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZVRyYWNraW5nOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24oYXBpLCBvcHRpb25zKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLnR3aXR0ZXInLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5vcGVuUG9wdXAoJ3R3aXR0ZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy5mYWNlYm9vaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLm9wZW5Qb3B1cCgnZmFjZWJvb2snKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy5nb29nbGVwbHVzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkub3BlblBvcHVwKCdnb29nbGVQbHVzJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcucGludGVyZXN0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkub3BlblBvcHVwKCdwaW50ZXJlc3QnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keSxodG1sJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6J2hpZGRlbicKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuY2xvc2Vfc2hhcmUnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmJveF9zaGFyZScpLmZhZGVPdXQoMzAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5LGh0bWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6J3Zpc2libGUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5ib3hfc2hhcmUnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCgogICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImludGVybG9jdXRldXIiIGl0ZW1wcm9wPSJzZWxsZXIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5Wb3RyZSBpbnRlcmxvY3V0ZXVyPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9ImxlZ2FsTmFtZSI+QVNTQVMgSW1tb2JpbGllcjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJsb2NhdGlvbiI+MTQ1LCBib3VsZXZhcmQgUmFzcGFpbCAtIDc1MDA2IFBhcmlzPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VMOpbCA6IDxzcGFuIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPjAxIDU2IDgxIDA4IDM4PC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX2RldGFpbCIgaWQ9ImNvbnRhY3RfYW5ub25jZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9ImFubm9uY2VfZm9ybSIgY2xhc3M9InZhbGlkYXRlX2Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvYW5ub25jZS12ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvcmVmLWR0MS03NDEvdmVudGUtYXBwYXJ0ZW1lbnQtNi1waWVjZXMtNC1jaGFtYnJlcy1wYXJpcy03NTAwNS8jY29udGFjdF9hbm5vbmNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxlZ2VuZD5EZW1hbmRlIGRlIHJlbnNlaWduZW1lbnRzPC9sZWdlbmQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaG9uZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IndlYnNpdGUiPlZldWlsbGV6IGxhaXNzZXIgbGEgdmFsZXVyIGluaXRpYWxlIGRlIGNlIGNoYW1wPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0id2Vic2l0ZSIgaWQ9IndlYnNpdGUiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX3R3b3Jvd3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGFzdF9uYW1lIj5Ob20gPHNwYW4+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJsYXN0X25hbWUiIHR5cGU9InRleHQiIG5hbWU9Imxhc3RfbmFtZSIgY2xhc3M9InJlcXVpcmVkIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9Imxhc3RfbmFtZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImZpcnN0X25hbWUiPlByw6lub20gPHNwYW4+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJmaXJzdF9uYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJmaXJzdF9uYW1lIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9ImZpcnN0X25hbWUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImVtYWlsIj5FbWFpbCA8c3Bhbj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImVtYWlsIiB0eXBlPSJ0ZXh0IiBuYW1lPSJlbWFpbCIgdmFsdWU9IiIgY2xhc3M9InJlcXVpcmVkIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9ImVtYWlsIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icGhvbmUiPlTDqWzDqXBob25lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0icGhvbmUiIHR5cGU9InRleHQiIG5hbWU9InBob25lIiB2YWx1ZT0iIiBjbGFzcz0icmVxdWlyZWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHRhcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImxhYmVsX21lc3NhZ2UtYW5ub25jZSIgZm9yPSJtZXNzYWdlIj5NZXNzYWdlIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9Im1lc3NhZ2UiIG5hbWU9Im1lc3NhZ2UiIGNsYXNzPSJyZXF1aXJlZCI+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0ibWVzc2FnZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJob25leSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iOGoyZzhmcm1zZ2o2ZWk2Y3FxM3U2MGQ4NzUiPlZldWlsbGV6IGxhaXNzZXIgbGEgdmFsZXVyIGluaXRpYWxlIGRlIGNlIGNoYW1wPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iOGoyZzhmcm1zZ2o2ZWk2Y3FxM3U2MGQ4NzUiIGlkPSI4ajJnOGZybXNnajZlaTZjcXEzdTYwZDg3NSIgdmFsdWU9IjhqMmc4ZnJtc2dqNmVpNmNxcTN1NjBkODc1IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaWQiIGlkPSJpZCIgdmFsdWU9IjI0MyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImJpZW5fcmVmIiBpZD0iYmllbl9yZWYiIHZhbHVlPSJEVDEtNzQxIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmNlX2lkIiBpZD0iYWdlbmNlX2lkIiB2YWx1ZT0iMSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InN1YmplY3QiIGlkPSJzdWJqZWN0IiB2YWx1ZT0iQ29udGFjdEFubm9uY2UiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImJvdXRvbiBzdWJtaXQiIG5hbWU9InNlbmRfZW1haWwiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IkVudm95ZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJtYW5kYXRvcnlUeHQiPkxlcyBpbmZvcm1hdGlvbnMgcmVjdWVpbGxpZXMgc3VyIGNlIGZvcm11bGFpcmUgc29udCBlbnJlZ2lzdHImZWFjdXRlO2VzIGRhbnMgdW4gZmljaGllciBpbmZvcm1hdGlzJmVhY3V0ZTsgcGFyIGxhIHNvY2kmZWFjdXRlO3QmZWFjdXRlOyA8c3BhbiBjbGFzcz0iYWdlbmNlTmFtZSI+IEFnZW5jZSBOYW1lPC9zcGFuPiBwb3VyIGxhIGdlc3Rpb24gZXQgbGUgc3VpdmkgZGUgdm90cmUgZGVtYW5kZS4gQ29uZm9ybSZlYWN1dGU7bWVudCAmYWdyYXZlOyBsYSBsb2kgJmxhcXVvOyBpbmZvcm1hdGlxdWUgZXQgbGliZXJ0JmVhY3V0ZTtzICZyYXF1bzssIFZvdXMgcG91dmV6IGV4ZXJjZXIgdm90cmUgZHJvaXQgZCYjMzk7YWNjJmVncmF2ZTtzIGF1eCBkb25uJmVhY3V0ZTtlcyB2b3VzIGNvbmNlcm5hbnQgZXQgbGVzIGZhaXJlIHJlY3RpZmllciBlbiBjb250YWN0YW50IDogPHNwYW4gY2xhc3M9ImFnZW5jZU5hbWUiPiBBZ2VuY2UgTmFtZTwvc3Bhbj4sIENvcnJlc3BvbmRhbnQgSW5mb3JtYXRpcXVlIGV0IGxpYmVydCZlYWN1dGU7cywgPHNwYW4gY2xhc3M9ImFnZW5jZUFkZHJlc3MiPmFnZW5jZSBhZHJlc3NlPC9zcGFuPiBvdSAmYWdyYXZlOyA8YSBjbGFzcz0iYWdlbmNlTWFpbCIgaHJlZj0ibWFpbHRvOiI+YWdlbmNlIG1haWw8L2E+LCBlbiBwciZlYWN1dGU7Y2lzYW50IGRhbnMgbCZyc3F1bztvYmpldCBkdSBjb3VycmllciAmbGFxdW87IERyb2l0IGRlcyBwZXJzb25uZXMgJnJhcXVvOyBldCBlbiBqb2lnbmFudCBsYSBjb3BpZSBkZSB2b3RyZSBqdXN0aWZpY2F0aWYgZCZyc3F1bztpZGVudGl0JmVhY3V0ZTsuPC9hcnRpY2xlPgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJLy88IVtDREFUQVsKCgl2YXIgYWdlbmN5ID0gW107CgoJZnVuY3Rpb24gYWZmaWNoYWdlVHh0KGFycmF5QWdlbmN5KXsKICAgICAgICAkKCdhcnRpY2xlLm1hbmRhdG9yeVR4dCAuYWdlbmNlTmFtZScpLmVhY2goZnVuY3Rpb24oKXskKHRoaXMpLnRleHQoYXJyYXlBZ2VuY3lbMF0ubmFtZSk7fSk7CiAgICAgICAgJCgnYXJ0aWNsZS5tYW5kYXRvcnlUeHQgLmFnZW5jZUFkZHJlc3MnKS50ZXh0KGFycmF5QWdlbmN5WzBdLmFkZHJlc3MpOwogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VNYWlsJykudGV4dChhcnJheUFnZW5jeVswXS5tYWlsKTsKICAgICAgICAkKCdhcnRpY2xlLm1hbmRhdG9yeVR4dCAuYWdlbmNlTWFpbCcpLmF0dHIoJ2hyZWYnLCdtYWlsdG86JythcnJheUFnZW5jeVswXS5tYWlsKTsKCiAgICAgICAgYWdlbmN5ID0gW107IC8vIG9uIHZpZGUgbGUgdGFibGVhdQoJfQoKCWZ1bmN0aW9uIGFnZW5jZU1hbnkoKXsKCQlhZ2VuY3kucHVzaCh7CgkJCW5hbWU6JCgnc2VsZWN0I2ZsZF9hZ2VuY2VfaWQgb3B0aW9uW3ZhbHVlPTFdJykuYXR0cignZGF0YS1uYW1lJyksIGFkZHJlc3M6JCgnc2VsZWN0I2ZsZF9hZ2VuY2VfaWQgb3B0aW9uW3ZhbHVlPTFdJykuYXR0cignZGF0YS1sb2NhbGlzYXRpb24nKSwgbWFpbDokKCdzZWxlY3QjZmxkX2FnZW5jZV9pZCBvcHRpb25bdmFsdWU9MV0nKS5hdHRyKCdkYXRhLW1haWwnKQoJCX0pOwoKCQlhZmZpY2hhZ2VUeHQoYWdlbmN5KTsKCgkJJCgnc2VsZWN0I2ZsZF9hZ2VuY2VfaWQnKS5vbignY2hhbmdlJyxmdW5jdGlvbigpewoJCQlhZ2VuY3kucHVzaCh7CgkJCQluYW1lOiQodGhpcykuY2hpbGRyZW4oIjpzZWxlY3RlZCIpLmF0dHIoJ2RhdGEtbmFtZScpLCBhZGRyZXNzOiQodGhpcykuY2hpbGRyZW4oIjpzZWxlY3RlZCIpLmF0dHIoJ2RhdGEtbG9jYWxpc2F0aW9uJyksIG1haWw6JCh0aGlzKS5jaGlsZHJlbigiOnNlbGVjdGVkIikuYXR0cignZGF0YS1tYWlsJykKCQkJfSk7CgkJCWFmZmljaGFnZVR4dChhZ2VuY3kpOwoJCX0pOwoJfQoKCS8vXV0+Cjwvc2NyaXB0PgoKCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCQkvLzwhW0NEQVRBWwoKCQlhZ2VuY3kucHVzaCh7CgkJCW5hbWU6IkFTU0FTIEltbW9iaWxpZXIgIiwgYWRkcmVzczoiMTQ1LCBib3VsZXZhcmQgUmFzcGFpbCA3NTAwNiBQYXJpcyIsIG1haWw6ImNvbnNlaWxAYXNzYXNpbW1vYmlsaWVyLmNvbSIKCQl9KTsKCgkJYWZmaWNoYWdlVHh0KGFnZW5jeSk7CgoJCS8vXV0+Cgk8L3NjcmlwdD4KCgoKCgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgPHNlY3Rpb24+CiAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJvZmZlcnMiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGNsYXNzPSJwcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGl0ZW1wcm9wPSJwcmljZSIgY2xhc3M9ImFubm9uY2VfcHJpY2UiPlByaXggOiA8c3Bhbj4yIDkwMCAwMDAgJmV1cm87IDwvc3Bhbj48L3A+CgoKICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlX2RldGFpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIEhvbm9yYWlyZXMgaW5jbHVzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZV9kZXRhaWwgdGFsbE1hcmdpbiBzaXplIj4yIDc5OCA1MDAgJmV1cm87IEhvbm9yYWlyZXMgZXhjbHVzPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpY2VfZGV0YWlsIHNpemUiPkhvbm9yYWlyZXMgZGUgMyw2MyUgVFRDIMOgIGxhIGNoYXJnZSBkZSBsJ2FjcXXDqXJldXI8L3A+CgoJCQkJCQk8cCBjbGFzcz0icHJpY2VfZGV0YWlsIj48L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxoMj5Ew6l0YWlsczwvaDI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRldGFpbF9saXN0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJ0eXBlT2ZHb29kIiBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGFydGVtZW50CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+U3VyZmFjZSA6IDxzcGFuIGl0ZW1wcm9wPSJ3aWR0aCI+MTQwIG3Csjwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5Ob21icmUgZGUgcGnDqGNlcyA6IDxzcGFuPjY8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+Tm9tYnJlIGRlIGNoYW1icmVzIDogPHNwYW4+NDwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgUsOpZsOpcmVuY2UgOiA8c3Bhbj5EVDEtNzQxPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibGlua19iYWNrIj4KICAgICAgICA8L2Rpdj4KICAgIDwvc2VjdGlvbj4KICAgIDwhLS0gUm9vdCBlbGVtZW50IG9mIFBob3RvU3dpcGUuIE11c3QgaGF2ZSBjbGFzcyBwc3dwLiAtLT4KICAgIDxkaXYgY2xhc3M9InBzd3AiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgPCEtLSBCYWNrZ3JvdW5kIG9mIFBob3RvU3dpcGUuCiAgICAgICAgSXQncyBhIHNlcGFyYXRlIGVsZW1lbnQsIGFzIGFuaW1hdGluZyBvcGFjaXR5IGlzIGZhc3RlciB0aGFuIHJnYmEoKS4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fYmciPjwvZGl2PgogICAgICAgIDwhLS0gU2xpZGVzIHdyYXBwZXIgd2l0aCBvdmVyZmxvdzpoaWRkZW4uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3Njcm9sbC13cmFwIj4KICAgICAgICAgICAgPCEtLSBDb250YWluZXIgdGhhdCBob2xkcyBzbGlkZXMuCiAgICAgICAgICAgICAgICBQaG90b1N3aXBlIGtlZXBzIG9ubHkgMyBvZiB0aGVtIGluIERPTSB0byBzYXZlIG1lbW9yeS4KICAgICAgICAgICAgICAgIERvbid0IG1vZGlmeSB0aGVzZSAzIHBzd3BfX2l0ZW0gZWxlbWVudHMsIGRhdGEgaXMgYWRkZWQgbGF0ZXIgb24uIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19jb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSBEZWZhdWx0IChQaG90b1N3aXBlVUlfRGVmYXVsdCkgaW50ZXJmYWNlIG9uIHRvcCBvZiBzbGlkaW5nIGFyZWEuIENhbiBiZSBjaGFuZ2VkLiAtLT4KICAgICAgICAgICAgPGltZyBjbGFzcz0ic3BhY2VyQmxvY2tlciIgc3JjPSIvdGhlbWUvX2RlZmF1bHQvaW1hZ2VzL3NwYWNlci5wbmciIGFsdD0iIiBzdHlsZT0iei1pbmRleDowOyIgLz4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fdWkgcHN3cF9fdWktLWhpZGRlbiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX190b3AtYmFyIj4KICAgICAgICAgICAgICAgICAgICA8IS0tICBDb250cm9scyBhcmUgc2VsZi1leHBsYW5hdG9yeS4gT3JkZXIgY2FuIGJlIGNoYW5nZWQuIC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NvdW50ZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWNsb3NlIiB0aXRsZT0iQ2xvc2UgKEVzYykiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLXNoYXJlIiB0aXRsZT0iU2hhcmUiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWZzIiB0aXRsZT0iVG9nZ2xlIGZ1bGxzY3JlZW4iPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLXpvb20iIHRpdGxlPSJab29tIGluL291dCI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBQcmVsb2FkZXIgZGVtbyBodHRwOi8vY29kZXBlbi5pby9kaW1zZW1lbm92L3Blbi95eUJXb1IgLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBlbGVtZW50IHdpbGwgZ2V0IGNsYXNzIHBzd3BfX3ByZWxvYWRlci0tYWN0aXZlIHdoZW4gcHJlbG9hZGVyIGlzIHJ1bm5pbmcgLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19pY24iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fY3V0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fZG9udXQiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2hhcmUtbW9kYWwgcHN3cF9fc2hhcmUtbW9kYWwtLWhpZGRlbiBwc3dwX19zaW5nbGUtdGFwIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19zaGFyZS10b29sdGlwIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLWxlZnQiIHRpdGxlPSJQcmV2aW91cyAoYXJyb3cgbGVmdCkiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLXJpZ2h0IiB0aXRsZT0iTmV4dCAoYXJyb3cgcmlnaHQpIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb24iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb25fX2NlbnRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAkKCcuYWpvdXRfc2VsZWN0aW9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CgogICAgICAgIHZhciBpZCA9ICQodGhpcykuYXR0cignZGF0YS1iaWVuaWQnKTsKCiAgICAgICAgbWFzZWxlY3Rpb24oJycsIGlkLCAnYWRkJywgZnVuY3Rpb24ocmV0b3VyKSB7CgogICAgICAgICAgICB2YXIgYW5pbV90aW1lb3V0OwogICAgICAgICAgICB2YXIgYW5pbTJfdGltZW91dDsKICAgICAgICAgICAgdmFyIHJlbW92ZV90aW1lb3V0OwoKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1fdGltZW91dCk7CiAgICAgICAgICAgIGNsZWFyVGltZW91dChhbmltMl90aW1lb3V0KTsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlbW92ZV90aW1lb3V0KTsKCiAgICAgICAgICAgIGlmIChyZXRvdXIpIHsKCiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBvbmNlJykuYXBwZW5kKCc8cD4nICsgbWVzc2FnZVswXSArICc8L3A+Jyk7CgogICAgICAgICAgICAgICAgdmFyIG5iX3NlbGVjdGlvbiA9IHBhcnNlSW50KCQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KCkpICsgMTsKICAgICAgICAgICAgICAgICQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KG5iX3NlbGVjdGlvbik7CgogICAgICAgICAgICAgICAgYW5pbV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgYW5pbTJfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ29uY2UnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjAwKTsKCiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICAgICAgfSwgMTAwKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBkb25lJykuYXBwZW5kKCc8cD4nICsgbWVzc2FnZVsxXSArICc8L3A+Jyk7CgogICAgICAgICAgICAgICAgYW5pbV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgYW5pbTJfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2RvbmUnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjAwKTsKCiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgfSk7CgogICAgPC9zY3JpcHQ+CgoKICAgIDxmb290ZXI+CiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl90b3AiPgogICAgICAgICAgICA8YSBpdGVtc2NvcGU9Iml0ZW1zY29wZSIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1JlYWxFc3RhdGVBZ2VudCIgY2xhc3M9ImFnZW5jZXNfZm9vdGVyIiBocmVmPSIvY29udGFjdC1hZ2VuY2UtaW1tb2JpbGllcmUtYXNzYXMtaW1tb2JpbGllci8iIHRpdGxlPSJDb250YWN0ZXogbOKAmWFnZW5jZSBpbW1vYmlsacOocmUgQXNzYXMgaW1tb2JpbGllciI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnJhbmQiIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkFTU0FTIEltbW9iaWxpZXI8L3NwYW4+PHNwYW4gY2xhc3M9InRpcmV0Ij4mbmJzcDstJm5ic3A7PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9ImxvY2F0aW9uIj4xNDUsIGJvdWxldmFyZCBSYXNwYWlsJm5ic3A7CiAgICAgICAgICAgICAgICA3NTAwNiZuYnNwO1BhcmlzPHNwYW4gY2xhc3M9InRpcmV0Ij4mbmJzcDstJm5ic3A7PC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPjAxIDU2IDgxIDA4IDM4PC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxhIGNsYXNzPSJtb2JpbGVfZm9vdGVyIiBocmVmPSJodHRwczovL20uYXNzYXNpbW1vYmlsaWVyLmNvbS8mbW9iaWxlPTEiIHRpdGxlPSJTaXRlIG1vYmlsZSI+U2l0ZSBtb2JpbGU8L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZW8iPgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic29jaWFsTGlua3MiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJmYWNlYm9vayIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2Fzc2FzaW1tb2JpbGllci8/ZnJlZj10cyIgdGl0bGU9IkZhY2Vib29rIj48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW8xIj4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiB0aXRsZT0iSW1tb2JpbGllciBQYXJpcyA3NTAwNiBBc3NhcyBpbW1vYmlsaWVyIj5BY2N1ZWlsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJJbW1vYmlsaWVyIGVuIFZlbnRlIEFzc2FzIGltbW9iaWxpZXIiPkVuIHZlbnRlPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZXN0aW1hdGlvbi1hcHBhcnRlbWVudC1kdXBsZXgtaG90ZWwtcGFydGljdWxpZXItcGFyaXMtNzUwMDYvIiB0aXRsZT0iRXN0aW1lciB2b3RyZSBiaWVuIHN1ciBQYXJpcyI+RXN0aW1hdGlvbjwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3BsYW4tbWVkaWEtYWN0dWFsaXRlLWFzc2FzLWltbW9iaWxpZXIvIiB0aXRsZT0iQWN0dWFsaXTDqXMgQXNzYXMgaW1tb2JpbGllciI+UGxhbiBtw6lkaWE8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9iaWVucy12ZW5kdXMtYXBwYXJ0ZW1lbnQtbWFpc29uLWFzc2FzLWltbW9iaWxpZXItcGFyaXMtNzUwMDYvIiB0aXRsZT0iQmllbnMgdmVuZHVzIHBhciBBc3NhcyBpbW1vYmlsaWVyIj5Ob3MgdmVudGVzPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvaG9tZS1zdGFnaW5nLWFzc2FzLWltbW9iaWxpZXItcGFyaXMvIiB0aXRsZT0iSG9tZSBTdGFnaW5nIEFzc2FzIGltbW9iaWxpZXIiPkhvbWUgc3RhZ2luZzwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnRhY3QtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLWltbW9iaWxpZXIvIiB0aXRsZT0iQ29udGFjdGV6IGzigJlhZ2VuY2UgaW1tb2JpbGnDqHJlIEFzc2FzIGltbW9iaWxpZXIiPk5vdXMgY29udGFjdGVyPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW8yIj4KCiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ic2VvMyI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL21hLXNlbGVjdGlvbi1hbm5vbmNlcy1pbW1vYmlsaWVyZXMtYXNzYXMvIiB0aXRsZT0iU8OpbGVjdGlvbm5lciBhbm5vbmNlIGltbW9iaWxpw6hyZSI+TWEgc8OpbGVjdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii92ZW50ZS1hY2hhdC1hcHBhcnRlbWVudC1wYXJpcy03NTAwNS1hc3Nhcy1pbW1vYmlsaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDc1MDA1IEFzc2FzIGltbW9iaWxpZXIiPkFwcGFydGVtZW50Lzc1MDA1PC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ic2VvNCI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZlbnRlLWFjaGF0LWFwcGFydGVtZW50LXBhcmlzLTc1MDA2LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNzUwMDYgQXNzYXMgaW1tb2JpbGllciI+QXBwYXJ0ZW1lbnQvNzUwMDY8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVudGUtYWNoYXQtYXBwYXJ0ZW1lbnQtcGFyaXMtNzUwMDctYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA3NTAwN0Fzc2FzIGltbW9iaWxpZXIiPkFwcGFydGVtZW50Lzc1MDA3PC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZlbnRlLWFjaGF0LWFwcGFydGVtZW50LXBhcmlzLTc1MDE0LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNzUwMTQgQXNzYXMgaW1tb2JpbGllciI+QXBwYXJ0ZW1lbnQvNzUwMTQ8L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW81Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVudGUtYWNoYXQtYXBwYXJ0ZW1lbnQtcGFyaXMtNzUwMTUtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA3NTAxNSBBc3NhcyBpbW1vYmlsaWVyIj5BcHBhcnRlbWVudC83NTAxNTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii92ZW50ZS1hY2hhdC1tYWlzb25zLXBhcmlzLXJpdmUtZ2F1Y2hlLTc1MDE0LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgbWFpc29ucyA3NTAxNCBBc3NhcyBpbW1vYmlsaWVyIj5NYWlzb25zL1BhcmlzIHJpdmUgZ2F1Y2hlICg3NTAxNCk8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT4mbmJzcDs8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImxlZ2FsIj4KICAgICAgICAgICAgPGEgaHJlZj0iL21lbnRpb25zLWxlZ2FsZXMtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLyIgdGl0bGU9IkluZm9ybWF0aW9ucyBqdXJpZGlxdWVzIEFzc2FzIGltbW9iaWxpZXIiPk1lbnRpb25zIGzDqWdhbGVzIC8gQmFyw6ptZTwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSIvbGllbnMtdXRpbGVzLXBhcnRlbmFpcmVzLWltbW9iaWxpcmVzLWFzc2FzLyIgdGl0bGU9IlBhcnRlbmFpcmVzIGltbW9iaWxpZXJzIEFzc2FzIGltbW9iaWxpZXIiPkxpZW5zIHV0aWxlczwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vYWdlbmNlLWltbW9iaWxpZXJlL2FnZW5jZS1hc3Nhcy1pbW1vYmlsaWVyLTM5MTE1LyIgdGl0bGU9IkFnZW5jZSBhZ3LDqcOpZSBNZWlsbGV1cnMgQWdlbnRzIC0gQWNoYXQgdmVudGUgYXBwYXJ0ZW1lbnQgcGFyaXMgcml2ZSBnYXVjaGUiIHRhcmdldD0iX2JsYW5rIj5BZ2VuY2UgYWdyw6nDqWUgTWVpbGxldXJzIEFnZW50czwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LmFnZW5jZS1wbHVzLmZyIiB0aXRsZT0iQWdlbmNlIFBsdXMsIHNvbHV0aW9ucyBwb3VyIGxlcyBwcm9mZXNzaW9ubmVscyBkZSBsJ2ltbW9iaWxpZXIiIHRhcmdldD0iX2JsYW5rIj5Sw6lhbGlzYXRpb24gQWdlbmNlIFBsdXM8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9mb290ZXI+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgbGlzdF9saSA9ICQoJ2Zvb3RlciB1bC5zZW8xIGxpJyk7CgogICAgZm9yKHZhciBpPTA7aTxsaXN0X2xpLmxlbmd0aDtpKyspewoKICAgICAgICB2YXIgY3VycmVudF9lbGVtID0gbGlzdF9saVtpXTsKCiAgICAgICAgaWYoaSA+PTMgJiYgaSA8PTUpewogICAgICAgICAgICAkKGN1cnJlbnRfZWxlbSkuYXBwZW5kVG8oJ2Zvb3RlciAuc2VvMicpOwogICAgICAgIH1lbHNlIGlmKGkgPT0gNil7CiAgICAgICAgICAgICQoY3VycmVudF9lbGVtKS5wcmVwZW5kVG8oJ2Zvb3RlciAuc2VvMycpCiAgICAgICAgfQogICAgfQo8L3NjcmlwdD4KCiAgICA8ZGl2IGNsYXNzPSJwb3B1cC1jb250ZW50Ij4KICAgICAgICA8ZGl2PgogICAgICAgICAgICA8c3Bhbj5FbiBwb3Vyc3VpdmFudCB2b3RyZSBuYXZpZ2F0aW9uIHN1ciBjZSBzaXRlLCB2b3VzIGFjY2VwdGV6IGwndXRpbGlzYXRpb24gZGUgY29va2llcyBkZXN0aW7DqXMgw6AgbGEgcsOpYWxpc2F0aW9uIGRlIHN0YXRpc3RpcXVlcyBkZSB2aXNpdGVzLjwvc3Bhbj4KICAgICAgICAgICAgPGEgaHJlZj0iL21lbnRpb25zLWxlZ2FsZXMtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLyNjb29raWVzIiBjbGFzcz0ibW9yZS1idXR0b24iPkVuIHNhdm9pciBwbHVzPC9hPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYWdyZWUtYnV0dG9uIiB2YWx1ZT0iQ29udGludWVyIi8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9jb25maXJtX2Nvb2tpZS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgogICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGZuRm9vdGVyID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIGYgPSAkKCdmb290ZXInKTsKICAgICAgICAgICAgaWYgKGYubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgdmFyIG1pbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIGYuaW5uZXJIZWlnaHQoKTsKICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjonc3RhdGljJ30pOwogICAgICAgICAgICAgICAgaWYoZi5vZmZzZXQoKS50b3AgPCBtaW5IZWlnaHQpewogICAgICAgICAgICAgICAgICAgICQoJyNtYWluJykuY3NzKCdtaW4taGVpZ2h0JywkKHdpbmRvdykuaGVpZ2h0KCkpOwogICAgICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjonYWJzb2x1dGUnLCAnYm90dG9tJzonMCd9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZm5Gb290ZXIpOwogICAgICAgICQod2luZG93KS5yZXNpemUoZm5Gb290ZXIpOwogICAgfSkoKTsKCiAgICAgLy8gQ29va2llCiAgICAgICAgJCgnLmFncmVlLWJ1dHRvbicpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICBjb25maXJtY29va2llKCcnLGZ1bmN0aW9uKHJldG91cil7CiAgICAgICAgICAgICAgIGlmIChyZXRvdXIpIHskKCcucG9wdXAtY29udGVudCcpLmhpZGUoKTt9CiAgICAgICAgICAgfSk7CiAgICAgICAgfSk7Cgo8L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPgoK
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:43 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-738/vente-appartement-3-pieces-2-chambres-paris-75014/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:43 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=oc39bjvf3ujgs5qtdok87quuk6; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCI+CjxoZWFkPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ii8+CgogICAgPHRpdGxlPlZlbnRlIEFwcGFydGVtZW50IFBhcmlzIDE0IE1PTlRQQVJOQVNTRSAtIEFzc2FzIEltbW9iaWxpZXI8L3RpdGxlPgoKICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJEw6l0YWlscyBkZSBsJ2Fubm9uY2UgaW1tb2JpbGnDqHJlIHZlbnRlIGFwcGFydGVtZW50IDMgcGnDqGNlcyBQQVJJUyA3NTAxNCAyIGNoYW1icmVzIDcyIG3CsiBQcml4IDgzNSAwMDAg4oKsIFLDqWbDqXJlbmNlIERUMS03MzgiLz4KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJBY2hhdCx2ZW50ZSxhY2hldGVyLHZlbmRyZSxlc3RpbWVyLGFwcGFydGVtZW50LGxvZnQsbWFpc29uLGhvdGVsIHBhcnRpY3VsaWVyLGVzdGltYXRpb24sZ3JhdHVpdGUsaG9tZSBzdGFnaW5nLEFzc2FzIEltbW9iaWxpZXIscGFyaXMscml2ZSBnYXVjaGUsNzUwMDYsIDc1MDA1LDc1MDA3LDc1MDE0LDc1MDE1LEltbW9iaWxpZXIsYWdlbmNlIGltbW9iaWxpw6hyZSxpbW1vYmlsaWVycyxiaWVuIGltbW9iaWxpZXIsIG1vbnRwYXJuYXNzZSwgdmF2aW4sIHJhc3BhaWwiIC8+CiAgICA8bWV0YSBuYW1lPSJyZXZpc2l0LWFmdGVyIiBjb250ZW50PSIxMCBkYXlzIiAvPgogICAgPG1ldGEgbmFtZSA9ImZvcm1hdC1kZXRlY3Rpb24iIGNvbnRlbnQgPSAidGVsZXBob25lPW5vIiAvPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZSIgY29udGVudD0ieWVzIi8+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZSIgY29udGVudD0iQXNzYXMgSW1tb2JpbGllciIvPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCIvPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIiAvPgoKCTwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgo8c2NyaXB0PihmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzoKbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLApqPWQuY3JlYXRlRWxlbWVudChzKSxkbD1sIT0nZGF0YUxheWVyJz8nJmw9JytsOicnO2ouYXN5bmM9dHJ1ZTtqLnNyYz0KJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nK2krZGw7Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLGYpOwp9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1ONFdXUFpLJyk7PC9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KCgoKICAgIDxiYXNlIGhyZWY9Imh0dHBzOi8vd3d3LmFzc2FzaW1tb2JpbGllci5jb20vIiAvPgoKICAgIDwhLS08c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL2pxdWVyeS0yLjEuMS5taW4uanMiPjwvc2NyaXB0Pi0tPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9qcXVlcnkuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL1NjYWxlSW1hZ2UubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvanF1ZXJ5LmN5Y2xlMi5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvanF1ZXJ5Lm11bHRpcGxlLnNlbGVjdC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL2pxdWVyeS5zaGFycnJlLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL21zZHJvcC5jc3MiIC8+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19kZWZhdWx0L3Jlc2V0LmNzcyIgLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL3Bob3Rvc3dpcGUuY3NzIiAvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9kZWZhdWx0LXNraW4uY3NzIiAvPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vc3R5bGUuY3NzPzIwMTgwNjI4PSIvPgoKICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiBocmVmbGFuZz0iIiBocmVmPSJodHRwczovL20uYXNzYXNpbW1vYmlsaWVyLmNvbS9hbm5vbmNlLXZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci9yZWYtZHQxLTczOC92ZW50ZS1hcHBhcnRlbWVudC0zLXBpZWNlcy0yLWNoYW1icmVzLXBhcmlzLTc1MDE0LyIgLz4KCiAgICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3gtaWNvbiIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvZmF2aWNvbi5pY28iIC8+CgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjYwLnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSI3Nng3NiIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvYXBwbGVUb3VjaEljb243Ni5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTIweDEyMCIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvYXBwbGVUb3VjaEljb24xMjAucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2FwcGxlVG91Y2hJY29uMTUyLnBuZyI+CgogICAgPG1ldGEgbmFtZT0iYXBwbGljYXRpb24tbmFtZSIgY29udGVudD0iQXNzYXMgSW1tb2JpbGllciIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUNvbG9yIiBjb250ZW50PSIjMDM0NjhhIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1zcXVhcmU3MHg3MGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL21zVG91Y2gvc21hbGx0aWxlLTcweDcwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlMTUweDE1MGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL21zVG91Y2gvbWVkaXVtdGlsZS0xNTB4MTUwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24td2lkZTMxMHgxNTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9tc1RvdWNoL3dpZGV0aWxlLTMxMHgxNTAucG5nIiAvPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1zcXVhcmUzMTB4MzEwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvbXNUb3VjaC9sYXJnZXRpbGUtMzEweDMxMC5wbmciIC8+CgogICAgPCEtLVtpZiBJRSBdPjxzY3JpcHQgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL21vZGVybml6ci5jdXN0b20uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdGUgSUUgOV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9wbGFjZWhvbGRlcnMubWluLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgKGd0ZSBJRSA2KSYobHRlIElFIDgpXT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL3NlbGVjdGl2aXpyLW1pbi5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIGx0IElFIDldPjxzY3JpcHQgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL2NzczMtbWVkaWFxdWVyaWVzLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KCiAgICA8bGluayBocmVmPSdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9QWxlZ3JleWEnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPgoKCgo8L2hlYWQ+CjwhLS1baWYgbHQgSUUgN10+IDxib2R5IGNsYXNzPSJpZSBpZTYgaWU3XyBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU3IGllN18gaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA4XT4gICAgPGJvZHkgY2xhc3M9ImllIGllOCBpZThfIGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDldPiAgICA8Ym9keSBjbGFzcz0iaWUgaWU5IGllOV8iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDldPiA8Ym9keT48IVtlbmRpZl0tLT4KPCEtLVtpZiAhSUVdPjwhLS0+PGJvZHk+PCEtLTwhW2VuZGlmXS0tPgoJPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4KPG5vc2NyaXB0PjxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1ONFdXUFpLIiBoZWlnaHQ9IjAiIHdpZHRoPSIwIiBzdHlsZT0iZGlzcGxheTpub25lO3Zpc2liaWxpdHk6aGlkZGVuIj48L2lmcmFtZT48L25vc2NyaXB0Pgo8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4KCjxkaXYgaWQ9Im1haW4iIGNsYXNzPSJhbm5vbmNlcy1kZWZhdWx0Ij4KICAgIDxoZWFkZXI+CiAgICA8ZGl2IGNsYXNzPSJ0b3BfaGVhZGVyIj4KICAgICAgICA8ZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2dvIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5hc3Nhc2ltbW9iaWxpZXIuY29tLyIgdGl0bGU9IkFzc2FzIEltbW9iaWxpZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvbG9nby5wbmciIGFsdD0iQXNzYXMgSW1tb2JpbGllciAtIEFjaGF0IHZlbnRlIGFwcGFydGVtZW50IHBhcmlzIHJpdmUgZ2F1Y2hlIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPG5hdj4KICAgIDx1bCBjbGFzcz0ibWFpbk1lbnUiPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iLyIgdGl0bGU9IkltbW9iaWxpZXIgUGFyaXMgNzUwMDYgQXNzYXMgaW1tb2JpbGllciIgY2xhc3M9Imljb19ob21lIj48L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iSW1tb2JpbGllciBlbiBWZW50ZSBBc3NhcyBpbW1vYmlsaWVyIiBjbGFzcz0iIj5FbiB2ZW50ZTwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2VzdGltYXRpb24tYXBwYXJ0ZW1lbnQtZHVwbGV4LWhvdGVsLXBhcnRpY3VsaWVyLXBhcmlzLTc1MDA2LyIgdGl0bGU9IkVzdGltZXIgdm90cmUgYmllbiBzdXIgUGFyaXMiIGNsYXNzPSIiPkVzdGltYXRpb248L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9wbGFuLW1lZGlhLWFjdHVhbGl0ZS1hc3Nhcy1pbW1vYmlsaWVyLyIgdGl0bGU9IkFjdHVhbGl0w6lzIEFzc2FzIGltbW9iaWxpZXIiIGNsYXNzPSIiPlBsYW4gbcOpZGlhPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvYmllbnMtdmVuZHVzLWFwcGFydGVtZW50LW1haXNvbi1hc3Nhcy1pbW1vYmlsaWVyLXBhcmlzLTc1MDA2LyIgdGl0bGU9IkJpZW5zIHZlbmR1cyBwYXIgQXNzYXMgaW1tb2JpbGllciIgY2xhc3M9IiI+Tm9zIHZlbnRlczwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2hvbWUtc3RhZ2luZy1hc3Nhcy1pbW1vYmlsaWVyLXBhcmlzLyIgdGl0bGU9IkhvbWUgU3RhZ2luZyBBc3NhcyBpbW1vYmlsaWVyIiBjbGFzcz0iIj5Ib21lIHN0YWdpbmc8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9jb250YWN0LWFnZW5jZS1pbW1vYmlsaWVyZS1hc3Nhcy1pbW1vYmlsaWVyLyIgdGl0bGU9IkNvbnRhY3RleiBs4oCZYWdlbmNlIGltbW9iaWxpw6hyZSBBc3NhcyBpbW1vYmlsaWVyIiBjbGFzcz0iIj5Ob3VzIGNvbnRhY3RlcjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxzcGFuIGNsYXNzPSJsYXN0U3BhbiI+PC9zcGFuPgogICAgPC91bD4KICAgIDx1bCBjbGFzcz0ic2Vjb25kTWVudSI+CiAgICAgICAgPGxpIGNsYXNzPSJtb3RldXJfaGVhZGVyIj4KICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJzZWxlY3Rpb25faGVhZGVyIj4KICAgICAgICAgICAgPGEgaHJlZj0iL21hLXNlbGVjdGlvbi1hbm5vbmNlcy1pbW1vYmlsaWVyZXMtYXNzYXMvIiB0aXRsZT0iU8OpbGVjdGlvbm5lciBhbm5vbmNlIGltbW9iaWxpw6hyZSIgY2xhc3M9InNlbGVjdGlvbiI+CiAgICAgICAgICAgICAgICBNYSBzw6lsZWN0aW9uIDoKICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuYl9zZWxlY3Rpb24iPjA8L3NwYW4+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICA8L3VsPgogICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2Pgo8L25hdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgICAgICAoZnVuY3Rpb24oKXsKICAgICAgICAgICAgJCgnLmljb19tZW51Jykub24oJ2NsaWNrJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgJCgnaGVhZGVyID4gZGl2IG5hdiB1bC5tYWluTWVudScpLnNsaWRlVG9nZ2xlKDIwMCxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIGlmKCQoJ3NlY3Rpb24nKS5oZWlnaHQoKT4zODkpewogICAgICAgICAgICAgICAgICAgICAgICAkKCdoZWFkZXIgPiBkaXYgbmF2IHVsLm1haW5NZW51JykuY3NzKCdoZWlnaHQnLCAkKCdzZWN0aW9uJykuaGVpZ2h0KCkpOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pKCk7CiAgICB9KTsKPC9zY3JpcHQ+CgoKCgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX21lbnUiPjwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJmb3JtX2hlYWRlciI+CiAgICA8ZGl2PgogICAgICAgIDxzcGFuIGNsYXNzPSJpY29fY2xvc2VfaGVhZGVyIj48L3NwYW4+CiAgICAgICAgPGZvcm0gaWQ9Im1vdGV1cl9mb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL3ZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci8iPgogICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9Im11bHRpIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Imdlb19tdWx0aSI+VmlsbGVzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJnZW9fbXVsdGkiIG5hbWU9Imdlb19tdWx0aVtdIiBtdWx0aXBsZT0ibXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MDA1O3BhcmlzIiA+UEFSSVMgLSA3NTAwNTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MDA2O3BhcmlzIiA+UEFSSVMgLSA3NTAwNjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MDA3O3BhcmlzIiA+UEFSSVMgLSA3NTAwNzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkZSOzc1MDE0O3BhcmlzIiA+UEFSSVMgLSA3NTAxNDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9Im11bHRpIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImNhdGVnb3J5Ij5UeXBlIGRlIGJpZW48L2xhYmVsPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iY2F0ZWdvcnkiIG5hbWU9ImNhdGVnb3J5W10iICBtdWx0aXBsZT0ibXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IkFwcGFydG1lbnQiID5BcHBhcnRlbWVudDwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkgc3VyZmFjZSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdXJmYWNlIiBpZD0ic3VyZmFjZV9taW4iIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InN1cmZhY2VfbWF4IiBpZD0ic3VyZmFjZV9tYXgiIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InN1cmZhY2UiPlN1cGVyZmljaWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9InNlbGVjdF9zdXJmYWNlIiBuYW1lPSJzdXJmYWNlW10iIG11bHRpcGxlPSJtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAsNTAiPiZsc2FxdW87IDUwIG3Csjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI1MCwxMDAiPjUwIG3CsiAtIDEwMCBtwrI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTAwLDE1MCI+MTAwIG3CsiAtIDE1MCBtwrI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTUwLDIwMCI+MTUwIG3CsiAtIDIwMCBtwrI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAwLCI+JnJzYXF1bzsgMjAwIG3Csjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkiPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY2hhbWJyZXNfbXVsdGkiPk5icmUgY2hhbWJyZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iY2hhbWJyZXNfbXVsdGkiIG11bHRpcGxlPSJtdWx0aXBsZSIgbmFtZT0iY2hhbWJyZXNbXSI+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMSIgPjE8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyIiA+Mjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjMiID4zPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNCIgPjQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI1IiA+NSBldCBwbHVzPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJtdWx0aSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJtaW4iIGlkPSJidWRnZXRfbWluIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibWF4IiBpZD0iYnVkZ2V0X21heCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImJ1ZGdldCI+QnVkZ2V0PC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9InNlbGVjdF9idWRnZXQiIG5hbWU9ImJ1ZGdldFtdIiBtdWx0aXBsZT0ibXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAsNTAwMDAwIj4mbHNhcXVvOyA1MDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjUwMDAwMCw4MDAwMDAiPjUwMCAwMDAg4oKsIC0gODAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI4MDAwMDAsMTIwMDAwMCI+ODAwIDAwMCDigqwgLSAxIDIwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTIwMDAwMCwxNTAwMDAwIj4xIDIwMCAwMDAg4oKsIC0gMSA1MDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE1MDAwMDAsMTgwMDAwMCI+MSA1MDAgMDAwIOKCrCAtIDEgODAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxODAwMDAwLDI0MDAwMDAiPjEgODAwIDAwMCDigqwgLSAyIDQwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjQwMDAwMCwzMDAwMDAwIj4yIDQwMCAwMDAg4oKsIC0gMyAwMDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjMwMDAwMDAsIj4mcnNhcXVvOyAzIDAwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJyZWZlcmVuY2UiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImJpZW5fcmVmIj5Sw6lmw6lyZW5jZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImJpZW5fcmVmIiBpZD0iYmllbl9yZWYiIHBsYWNlaG9sZGVyPSJSw6lmw6lyZW5jZSIgdmFsdWU9IiIgY2xhc3M9InZhbGV1ciIvPgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwIiBpZD0icCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibmV3X3Jlc2VhcmNoIiBpZD0ibmV3X3Jlc2VhcmNoIiB2YWx1ZT0iMSIgLz4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icmVjaGFyZ2VNUiIgaWQ9InJlY2hhcmdlTVIiIHZhbHVlPSIwIiAvPgogICAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImJvdXRvbiBzdWJtaXQiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IlJlY2hlcmNoZXIiIC8+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgPC9mb3JtPgogICAgPC9kaXY+CjwvZGl2Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvbW90ZXVyX3hocl9saXN0Y2l0aWVzLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgovLzwhW0NEQVRBWwoKICAgIC8vICQoJyNzZWxlY3RfYnVkZ2V0Jykub24oJ2NoYW5nZScsZnVuY3Rpb24oKSB7CgogICAgLy8gICAgICAgICB2YXIgdmFsZXVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuc2VsZWN0X2J1ZGdldC52YWx1ZTsKICAgIC8vICAgICAgICAgaWYgKHZhbGV1ci5pbmRleE9mKCcsJywwKSA+IDApCiAgICAvLyAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgIHZhciB0YWJ2YWwgPSB2YWxldXIuc3BsaXQoJywnKTsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9taW4udmFsdWUgPSB0YWJ2YWxbMF07CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5idWRnZXRfbWF4LnZhbHVlID0gdGFidmFsWzFdOwogICAgLy8gICAgICAgICB9CiAgICAvLyAgICAgICAgIGVsc2UKICAgIC8vICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuYnVkZ2V0X21pbi52YWx1ZSA9ICcnOwogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuYnVkZ2V0X21heC52YWx1ZSA9ICcnOwogICAgLy8gICAgICAgICB9CgogICAgLy8gfSk7CgoKICAgIC8vICQoJy5zdXJmYWNlIGlucHV0Jykub24oJ2NoYW5nZScsZnVuY3Rpb24oKSB7CiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKCdpY2knKTsKICAgIC8vICAgICAgICAgdmFyIHZhbGV1ciA9IHRoaXMudmFsdWU7CiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKHZhbGV1cik7CiAgICAvLyAgICAgICAgIGlmICh2YWxldXIuaW5kZXhPZignLCcsMCkgPiAwKQogICAgLy8gICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICB2YXIgdGFidmFsID0gdmFsZXVyLnNwbGl0KCcsJyk7CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5zdXJmYWNlX21pbi52YWx1ZSA9IHRhYnZhbFswXTsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLnN1cmZhY2VfbWF4LnZhbHVlID0gdGFidmFsWzFdOwogICAgLy8gICAgICAgICB9CiAgICAvLyAgICAgICAgIGVsc2UKICAgIC8vICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuc3VyZmFjZV9taW4udmFsdWUgPSAnJzsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLnN1cmZhY2VfbWF4LnZhbHVlID0gJyc7CiAgICAvLyAgICAgICAgIH0KCiAgICAvLyB9KTsKCiAgICB2YXIgbW90ZXVyT3BlbiA9IGZhbHNlOwoKICAgICQoJy5tb3RldXJfaGVhZGVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXsKICAgICAgICBpZihtb3RldXJPcGVuID09IGZhbHNlKXsKCiAgICAgICAgICAgIG1vdGV1ck9wZW4gPSB0cnVlOwoKICAgICAgICAgICAgJCgnLmZvcm1faGVhZGVyJykuc2xpZGVEb3duKDIwMCxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoewogICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6J3Zpc2libGUnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICBtb3RldXJPcGVuID0gZmFsc2U7CgogICAgICAgICAgICAkKCcuZm9ybV9oZWFkZXInKS5zbGlkZVVwKDIwMCxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoewogICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6J2hpZGRlbicKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgfQoKICAgIH0pOwoKICAgICQoJy5pY29fY2xvc2VfaGVhZGVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXsKCiAgICAgICAgbW90ZXVyT3BlbiA9IGZhbHNlOwoKICAgICAgICAkKCcuZm9ybV9oZWFkZXInKS5zbGlkZVVwKDIwMCk7CgogICAgfSk7CgogICAgJCgnI2dlb19tdWx0aScpLm11bHRpcGxlU2VsZWN0KHsKICAgICAgICBwbGFjZWhvbGRlcjogJ0xvY2FsaXNhdGlvbicsCiAgICAgICAgY291bnRTZWxlY3RlZDonJywKICAgICAgICBub01hdGNoZXNGb3VuZDonJywKICAgICAgICBhbGxTZWxlY3RlZDogJycsCiAgICAgICAgc2VsZWN0QWxsOiAnJwogICAgfSk7CgogICAgICQoJyNnZW9fc2VjdGV1cicpLm11bHRpcGxlU2VsZWN0KHsKICAgICAgICBwbGFjZWhvbGRlcjogIlNlY3RldXIiLAogICAgICAgIGNvdW50U2VsZWN0ZWQ6JycsCiAgICAgICAgbm9NYXRjaGVzRm91bmQ6JycsCiAgICAgICAgYWxsU2VsZWN0ZWQ6ICcnLAogICAgICAgIHNlbGVjdEFsbDogJycKICAgIH0pOwoKICAgICQoJyNjaGFtYnJlc19tdWx0aScpLm11bHRpcGxlU2VsZWN0KHsKICAgICAgICBwbGFjZWhvbGRlcjogIk5icmUgY2hhbWJyZXMiLAogICAgICAgIGNvdW50U2VsZWN0ZWQ6JycsCiAgICAgICAgbm9NYXRjaGVzRm91bmQ6JycsCiAgICAgICAgYWxsU2VsZWN0ZWQ6ICcnLAogICAgICAgIHNlbGVjdEFsbDogJycKICAgIH0pOwoKICAgICQoJyNjYXRlZ29yeScpLm11bHRpcGxlU2VsZWN0KHsKICAgICAgICBwbGFjZWhvbGRlcjogIlR5cGUgZGUgYmllbiIsCiAgICAgICAgY291bnRTZWxlY3RlZDonJywKICAgICAgICBub01hdGNoZXNGb3VuZDonJywKICAgICAgICBhbGxTZWxlY3RlZDogJycsCiAgICAgICAgc2VsZWN0QWxsOiAnJwogICAgfSk7CgogICAgLy8gIAogICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGZuQ2hlY2sgPSBmdW5jdGlvbihtaW5WYWwsbWF4VmFsKXsKICAgICAgICAgICAgaWYgKChtaW5WYWwgPT0gbnVsbCB8fCBtaW5WYWwubGVuZ3RoID09IDApCiAgICAgICAgICAgICAgICAmJiAobWF4VmFsID09IG51bGwgfHwgbWF4VmFsLmxlbmd0aCA9PSAwKSkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgdmFyIG9ialNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3Rfc3VyZmFjZScpOwogICAgICAgICAgICB2YXIgdG9TZWxlY3RzID0gW107CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqU2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgdmFyIHNwbGl0VmFsID0gb2JqU2VsZWN0Lm9wdGlvbnNbaV0udmFsdWUuc3BsaXQoLywvKTsKICAgICAgICAgICAgICAgIGlmICgobWluVmFsID09IG51bGwgfHwgbWluVmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzBdKSA+PSBwYXJzZUludChtaW5WYWwpKQogICAgICAgICAgICAgICAgICAgICYmIChtYXhWYWwgPT0gbnVsbCB8fCBtYXhWYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMV0pIDw9IHBhcnNlSW50KG1heFZhbCkpKXsKICAgICAgICAgICAgICAgICAgICBvYmpTZWxlY3Qub3B0aW9uc1tpXS5zZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgdG9TZWxlY3RzLnB1c2gob2JqU2VsZWN0Lm9wdGlvbnNbaV0udmFsdWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0b1NlbGVjdHM7CiAgICAgICAgfQogICAgICAgIGZuQ2hlY2soZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuc3VyZmFjZV9taW4udmFsdWUsZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuc3VyZmFjZV9tYXgudmFsdWUpOwogICAgICAgIC8vICAKICAgICAgICAkKCcjc2VsZWN0X3N1cmZhY2UnKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiU3VwZXJmaWNpZSIsCiAgICAgICAgICAgIHNlbGVjdEFsbDogJycsCiAgICAgICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICAgICAgY291bnRTZWxlY3RlZDogZmFsc2UsCiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAvLyAgCiAgICAgICAgICAgICAgICB2YXIgb2JqU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbGVjdF9zdXJmYWNlJyk7CiAgICAgICAgICAgICAgICB2YXIgbWluVmFsID0gJyc7CiAgICAgICAgICAgICAgICB2YXIgbWF4VmFsID0gJyc7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ialNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICBpZiAob2JqU2VsZWN0Lm9wdGlvbnNbaV0uc2VsZWN0ZWQpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXRWYWwgPSBvYmpTZWxlY3Qub3B0aW9uc1tpXS52YWx1ZS5zcGxpdCgvLC8pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluVmFsID09IG51bGwgfHwgbWluVmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzBdKSA8IHBhcnNlSW50KG1pblZhbCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5WYWwgPSBzcGxpdFZhbFswXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwbGl0VmFsWzFdLmxlbmd0aCA9PSAwIHx8IG1heFZhbCA9PSBudWxsIHx8IG1heFZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFsxXSkgPiBwYXJzZUludChtYXhWYWwpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4VmFsID0gc3BsaXRWYWxbMV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJCgnI21vdGV1cl9mb3JtIGlucHV0W25hbWU9InN1cmZhY2UiXScpLnZhbChtaW5WYWwpOwogICAgICAgICAgICAgICAgJCgnI21vdGV1cl9mb3JtIGlucHV0W25hbWU9InN1cmZhY2VfbWF4Il0nKS52YWwobWF4VmFsKTsKICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgICQoJyNzZWxlY3Rfc3VyZmFjZScpLm11bHRpcGxlU2VsZWN0KCdzZXRTZWxlY3RzJyxmbkNoZWNrKG1pblZhbCxtYXhWYWwpKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSkoKTsKCiAgICAvLyAgCiAgICAoZnVuY3Rpb24oKXsKICAgICAgICB2YXIgZm5DaGVjayA9IGZ1bmN0aW9uKG1pblZhbCxtYXhWYWwpewogICAgICAgICAgICBpZiAoKG1pblZhbCA9PSBudWxsIHx8IG1pblZhbC5sZW5ndGggPT0gMCkKICAgICAgICAgICAgICAgICYmIChtYXhWYWwgPT0gbnVsbCB8fCBtYXhWYWwubGVuZ3RoID09IDApKQogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB2YXIgb2JqU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbGVjdF9idWRnZXQnKTsKICAgICAgICAgICAgdmFyIHRvU2VsZWN0cyA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ialNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgIHZhciBzcGxpdFZhbCA9IG9ialNlbGVjdC5vcHRpb25zW2ldLnZhbHVlLnNwbGl0KC8sLyk7CiAgICAgICAgICAgICAgICBpZiAoKG1pblZhbCA9PSBudWxsIHx8IG1pblZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFswXSkgPj0gcGFyc2VJbnQobWluVmFsKSkKICAgICAgICAgICAgICAgICAgICAmJiAobWF4VmFsID09IG51bGwgfHwgbWF4VmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzFdKSA8PSBwYXJzZUludChtYXhWYWwpKSl7CiAgICAgICAgICAgICAgICAgICAgb2JqU2VsZWN0Lm9wdGlvbnNbaV0uc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHRvU2VsZWN0cy5wdXNoKG9ialNlbGVjdC5vcHRpb25zW2ldLnZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdG9TZWxlY3RzOwogICAgICAgIH0KICAgICAgICBmbkNoZWNrKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmJ1ZGdldF9taW4udmFsdWUsZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuYnVkZ2V0X21heC52YWx1ZSk7CiAgICAgICAgLy8gIAogICAgICAgICQoJyNzZWxlY3RfYnVkZ2V0JykubXVsdGlwbGVTZWxlY3QoewogICAgICAgICAgICBwbGFjZWhvbGRlcjogIkJ1ZGdldCIsCiAgICAgICAgICAgIHNlbGVjdEFsbDogJycsCiAgICAgICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICAgICAgY291bnRTZWxlY3RlZDogZmFsc2UsCiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAvLyAgCiAgICAgICAgICAgICAgICB2YXIgb2JqU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbGVjdF9idWRnZXQnKTsKICAgICAgICAgICAgICAgIHZhciBtaW5WYWwgPSAnJzsKICAgICAgICAgICAgICAgIHZhciBtYXhWYWwgPSAnJzsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqU2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgICAgIGlmIChvYmpTZWxlY3Qub3B0aW9uc1tpXS5zZWxlY3RlZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGxpdFZhbCA9IG9ialNlbGVjdC5vcHRpb25zW2ldLnZhbHVlLnNwbGl0KC8sLyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW5WYWwgPT0gbnVsbCB8fCBtaW5WYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMF0pIDwgcGFyc2VJbnQobWluVmFsKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblZhbCA9IHNwbGl0VmFsWzBdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaXRWYWxbMV0ubGVuZ3RoID09IDAgfHwgbWF4VmFsID09IG51bGwgfHwgbWF4VmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzFdKSA+IHBhcnNlSW50KG1heFZhbCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhWYWwgPSBzcGxpdFZhbFsxXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkKCcjbW90ZXVyX2Zvcm0gaW5wdXRbbmFtZT0ibWluIl0nKS52YWwobWluVmFsKTsKICAgICAgICAgICAgICAgICQoJyNtb3RldXJfZm9ybSBpbnB1dFtuYW1lPSJtYXgiXScpLnZhbChtYXhWYWwpOwogICAgICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAgICAgJCgnI3NlbGVjdF9idWRnZXQnKS5tdWx0aXBsZVNlbGVjdCgnc2V0U2VsZWN0cycsZm5DaGVjayhtaW5WYWwsbWF4VmFsKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pKCk7CgoKICAgIG1vdGV1cl94aHJfbGlzdGNpdGllcygiZ2VvX3NlY3RldXI7dHJhbnNhYzt0eXBlX2ltbW87YWRkcmVzc19kZXBhcnRlbWVudDthZGRyZXNzX3BheXMiLCB0cnVlLCAiIik7CgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKCgkJLy9idWRnZXQKICAgICAgICAvLyB2YXIgYnVkZ2V0X21pbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmJ1ZGdldF9taW4udmFsdWU7CiAgICAgICAgLy8gdmFyIGJ1ZGdldF9tYXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5idWRnZXRfbWF4LnZhbHVlOwogICAgICAgIC8vIGlmIChidWRnZXRfbWluID09ICcnKSBidWRnZXRfbWluID0gJzAnOwogICAgICAgIC8vIHZhciB2YWxldXIgPSBidWRnZXRfbWluICsgJywnICsgYnVkZ2V0X21heDsKICAgICAgICAvLyBpZiAoYnVkZ2V0X21pbiAhPSAnMCcgfHwgYnVkZ2V0X21heCAhPSAnJykKICAgICAgICAvLyB7CiAgICAgICAgLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnNlbGVjdF9idWRnZXQudmFsdWUgPSB2YWxldXI7CiAgICAgICAgLy8gfTsKCiAgICAgICAgLy9zdXJmYWNlCiAgICAgICAgLy8gdmFyIHN1cmZhY2VfbWluID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuc3VyZmFjZV9taW4udmFsdWU7CiAgICAgICAgLy8gdmFyIHN1cmZhY2VfbWF4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuc3VyZmFjZV9tYXgudmFsdWU7CiAgICAgICAgLy8gaWYgKHN1cmZhY2VfbWluID09ICcnKSBzdXJmYWNlX21pbiA9ICcwJzsKICAgICAgICAvLyB2YXIgdmFsZXVyID0gc3VyZmFjZV9taW4gKyAnLCcgKyBzdXJmYWNlX21heDsKICAgICAgICAvLyBpZiAoc3VyZmFjZV9taW4gIT0gJzAnIHx8IHN1cmZhY2VfbWF4ICE9ICcnKQogICAgICAgIC8vIHsKICAgICAgICAvLyAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuc2VsZWN0X3N1cmZhY2UudmFsdWUgPSB2YWxldXI7CiAgICAgICAgLy8gfTsKCiAgICAgICAgaWYoJCgnI3R5cGUgb3B0aW9uJykuc2l6ZSgpPDMpewogICAgICAgICAgICAkKCcjdHlwZSBvcHRpb246bnRoLWNoaWxkKDIpJykuYXR0cigic2VsZWN0ZWQiLCJzZWxlY3RlZCIpOwogICAgICAgIH07CgogICAgICAgIGlmKCJhbm5vbmNlcyI9PSJhbm5vbmNlcyIpewogICAgICAgICAgICBpZigiZGVmYXVsdCI9PSJjb2V1ciIpewogICAgICAgICAgICAgICAgJCgnI21vdGV1cl9mb3JtJykuYXR0cignYWN0aW9uJywnL3ZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci8nKTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAkKCdtb3RldXJfZm9ybScpLmF0dHIoJ2FjdGlvbicsJy9hbm5vbmNlLXZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci8nKTsKICAgICAgICAgICAgfQogICAgICAgfWVsc2V7CiAgICAgICAgICAgICQoJ21vdGV1cl9mb3JtJykuYXR0cignYWN0aW9uJywnL3ZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci8nKTsKICAgICAgIH0KICAgIH0pOwoKLy9dXT4KPC9zY3JpcHQ+Cgo8L2hlYWRlcj4KCgoKCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL2pxdWVyeS5qY2Fyb3VzZWwubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9waG90b3N3aXBlLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvcGhvdG9zd2lwZS11aS1kZWZhdWx0Lm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9tYWpfc2VsZWN0aW9uLmpzIj48L3NjcmlwdD4KCiAgICA8c2VjdGlvbiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiIGlkPSJhbm5vbmNlX3Byb2ZpbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibGlua19iYWNrIHRvcCI+CiAgICAgICAgPC9kaXY+CgkJPGgxIGl0ZW1wcm9wPSJuYW1lIj5WZW50ZSBBcHBhcnRlbWVudCBQYXJpcyAxNCBNT05UUEFSTkFTU0U8L2gxPgogICAgICAgIDxkaXYgY2xhc3M9ImRpYXBvcmFtYV90aHVtYnMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaWFwb3JhbWFfcHJvZmlsIiBkYXRhLWN5Y2xlLXBhZ2VyLXRlbXBsYXRlPSIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGUiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InNwYWNlckJsb2NrZXIgYXV0b1NjYWxlIiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL3NwYWNlci5wbmciIGFsdD0iIi8+CgkJCQkJPGltZyBjbGFzcz0iYXV0b1NjYWxlIiBpdGVtcHJvcD0iaW1hZ2UiIHNyYz0iL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDEvMjQxXzAwLTIwMTktMTEtMzAtMDMxNS5qcGciIGFsdD0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIiB0aXRsZT0iYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIi8+PHNwYW4gY2xhc3M9InZlcnRpY2FsX2NlbnRlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aHVtYnNfY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImpjYXJvdXNlbC1wcmV2IGluYWN0aXZlIGljb19kZXRhaWxfcHJldiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN5Y2xlIiBkYXRhLWpjYXJvdXNlbD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRodW1icyBjeWNsZS1wYWdlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJzcGFjZXJCbG9ja2VyIGF1dG9TY2FsZSIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9zcGFjZXIucG5nIiBhbHQ9IiIvPgoJCQkJCQkJCQk8aW1nIGNsYXNzPSJhdXRvU2NhbGUiIGl0ZW1wcm9wPSJpbWFnZSIgc3JjPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzI0MS8yNDFfMDAtMjAxOS0xMS0zMC0wMzE1LmpwZyIgYWx0PSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCkiIHRpdGxlPSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iamNhcm91c2VsLW5leHQgaW5hY3RpdmUgaWNvX2RldGFpbF9uZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKCQkJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCQkvLyAgQWRkTG9hZEV2ZW50CgkJCS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQkJZnVuY3Rpb24gQWRkTG9hZEV2ZW50KGZ1bmMpIHsKCQkJCXZhciBvbGRvbmxvYWQgPSB3aW5kb3cub25sb2FkOwoJCQkJaWYgKHR5cGVvZiB3aW5kb3cub25sb2FkICE9ICdmdW5jdGlvbicpCgkJCQl7IHdpbmRvdy5vbmxvYWQgPSBmdW5jOyB9CgkJCQllbHNlIHsKCQkJCQl3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7CgkJCQkJCWlmIChvbGRvbmxvYWQpCgkJCQkJCXsgb2xkb25sb2FkKCk7IH0KCQkJCQkJZnVuYygpOwoJCQkJCX0KCQkJCX0KCQkJfQoKICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogICAgICAgICAgICAgICAgLyoqKioqKioqKipQVVQgVEhFIFJBVElPIDMvMiBPTiBESUFQTyBBTkQgVEhVTUJTKioqKioqKioqKioqKioqKioqLwogICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoJCQkJKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLndpZHRoKCkvMS41OwoKICAgICAgICAgICAgICAgICAgICAkKCcuZGlhcG9yYW1hX3Byb2ZpbCcpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOncrJ3B4JwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAkKCcudGh1bWJzX2NvbnRhaW5lcicpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOncrJ3B4JwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAvL0lOU1RBTkNFIERJQVBPUkFNQSBGSUNIRSBCSUVOCiAgICAgICAgICAgICAgICAgICAgSW1hZ2VBdXRvU2NhbGUoJCgnLnRodW1icyA+IGRpdiA+IGEgaW1nJykpOwoKICAgICAgICAgICAgICAgIH0pKCk7CgoKICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3ljbGUoewogICAgICAgICAgICAgICAgICAgIHNsaWRlczonPiBkaXYuc2xpZGUnLAogICAgICAgICAgICAgICAgICAgIHBhZ2VyOicuY3ljbGUtcGFnZXInLAogICAgICAgICAgICAgICAgICAgIG1hbnVhbFNwZWVkOjQwMCwKICAgICAgICAgICAgICAgICAgICBmeDogJ2ZhZGUnLAogICAgICAgICAgICAgICAgICAgIHNwZWVkOjIwMDAsCiAgICAgICAgICAgICAgICAgICAgc3dpcGU6dHJ1ZQogICAgICAgICAgICAgICAgfSk7CgoJCQkJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoJCQkJLyoqKioqKipBREQgRElBUE8gMVNUIFNMSURFIFRIRU4gUkVTVCBPRiBUSEVNIEFGVEVSIExPQUQqKioqKioqKioqLwoJCQkJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoJCQkJKGZ1bmN0aW9uKCl7CgoJCQkJCXZhciBzbGlkZXMgPSBbXTsKCgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDEvMjQxXzAwLTIwMTktMTEtMzAtMDMxNS5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDEvMjQxXzAxLTIwMTktMTEtMzAtMDMxNS5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgkJCQkJCQlzbGlkZXMucHVzaCh7IHNyYzoiL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDEvMjQxXzAyLTIwMTktMTEtMzAtMDMxNS5qcGciLCBhbHQ6ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgfSk7CgoJCQkJCWlmKHNsaWRlcy5sZW5ndGggPiAwKXsKCQkJCQkJc2xpZGVzLnNoaWZ0KCk7CgkJCQkJfQoKCQkJCQlmdW5jdGlvbiBpbWdQcmVsb2FkKHNsaWRlcywgaWR4LCBjYWxsYmFjayl7CgoJCQkJCQl2YXIgdGVtcEltZyA9IG5ldyBJbWFnZSgpOwoJCQkJCQl2YXIgT2JqU2xpZGUgPSBzbGlkZXNbaWR4XTsKCQkJCQkJaWYoT2JqU2xpZGUgPT0gbnVsbCl7CgkJCQkJCQlyZXR1cm47CgkJCQkJCX0KCgkJCQkJCSQodGVtcEltZykubG9hZChmdW5jdGlvbigpewoJCQkJCQkJdmFyIG5ld1NsaWRlID0gJzxkaXYgY2xhc3M9InNsaWRlIiBkYXRhLWN5Y2xlLXBhZ2VyLXRlbXBsYXRlPSI8ZGl2PjxkaXY+PHNwYW4+PC9zcGFuPjxpbWcgY2xhc3M9XCdzcGFjZXJCbG9ja2VyXCcgc3JjPVwnL3RoZW1lL19kZWZhdWx0L2ltYWdlcy9zcGFjZXIucG5nXCcgYWx0PVwnI1wnIC8+PGltZyBjbGFzcz1cJ2F1dG9TY2FsZVwnIGFsdD1cJycrT2JqU2xpZGUuYWx0KydcJyBzcmM9XCcnK09ialNsaWRlLnNyYysnXCcvPjwvZGl2PjwvZGl2PiI+PGltZyBjbGFzcz1cJ3NwYWNlckJsb2NrZXJcJyBzcmM9XCcvdGhlbWUvX2RlZmF1bHQvaW1hZ2VzL3NwYWNlci5wbmdcJyBhbHQ9XCcjXCcgLz48aW1nIGl0ZW1wcm9wPSJpbWFnZSIgc3JjPSInK09ialNsaWRlLnNyYysnIiBhbHQ9IicrT2JqU2xpZGUuYWx0KyciLz48c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+PC9kaXY+JzsKCQkJCQkJCSQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3ljbGUoJ2FkZCcsIG5ld1NsaWRlKTsKCQkJCQkJCUltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgaW1nJykpOwoJCQkJCQkJLy8gIGdvIG5leHQKCQkJCQkJCWlmIChpZHggKyAxIDwgc2xpZGVzLmxlbmd0aCl7CgkJCQkJCQkJaW1nUHJlbG9hZChzbGlkZXMsIGlkeCArIDEsIGNhbGxiYWNrKTsKCQkJCQkJCX0KCQkJCQkJCWVsc2UgewoJCQkJCQkJCWlmIChjYWxsYmFjayAhPSBudWxsKXsKCQkJCQkJCQkJY2FsbGJhY2soKTsKCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCX0pOwoKCQkJCQkJdGVtcEltZy5zcmMgPSBPYmpTbGlkZS5zcmM7CgkJCQkJfQoKCQkJCQlBZGRMb2FkRXZlbnQoZnVuY3Rpb24oKXsKCgkJCQkJCWltZ1ByZWxvYWQoc2xpZGVzLDAsIGZ1bmN0aW9uKCl7CgoJCQkJCQkJJCgnLnRodW1icycpLmFkZENsYXNzKCdjeWNsZS1wYWdlcicpOwoJCQkJCQkJSW1hZ2VBdXRvU2NhbGUoJCgnLnRodW1icyBpbWcnKSk7CgoJCQkJCQkJaWYgKCQoJy50aHVtYnMgPiBkaXYnKS5sZW5ndGggPiA0KSB7CgoJCQkJCQkJCSQoJy5jeWNsZScpLmFkZENsYXNzKCdqY2Fyb3VzZWwtbWFuJyk7CgkJCQkJCQkJJCgnLmpjYXJvdXNlbC1tYW4nKS5qY2Fyb3VzZWwoewoJCQkJCQkJCQl2ZXJ0aWNhbDogdHJ1ZQoJCQkJCQkJCX0pOwoKCQkJCQkJCQkvKioqKkNPTlRST0wgQlROIE5FWFQgUFJFViBDQVJPVVNFTCoqKiovCgoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtcHJldicpLm9uKCdqY2Fyb3VzZWxjb250cm9sOmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLm9uKCdqY2Fyb3VzZWxjb250cm9sOmluYWN0aXZlJywgZnVuY3Rpb24oKSB7CgkJCQkJCQkJCSQodGhpcykuYWRkQ2xhc3MoJ2luYWN0aXZlJyk7CgkJCQkJCQkJfSkKCQkJCQkJCQkuamNhcm91c2VsQ29udHJvbCh7CgkJCQkJCQkJCXRhcmdldDogJy09MScKCQkJCQkJCQl9KTsKCgkJCQkJCQkJJCgnLmpjYXJvdXNlbC1uZXh0Jykub24oJ2pjYXJvdXNlbGNvbnRyb2w6YWN0aXZlJywgZnVuY3Rpb24oKSB7CgkJCQkJCQkJCSQodGhpcykucmVtb3ZlQ2xhc3MoJ2luYWN0aXZlJyk7CgkJCQkJCQkJfSkKCQkJCQkJCQkub24oJ2pjYXJvdXNlbGNvbnRyb2w6aW5hY3RpdmUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJJCh0aGlzKS5hZGRDbGFzcygnaW5hY3RpdmUnKTsKCQkJCQkJCQl9KQoJCQkJCQkJCS5qY2Fyb3VzZWxDb250cm9sKHsKCQkJCQkJCQkJdGFyZ2V0OiAnKz0xJwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkvKioqKkNPTlRST0wgQ0FST1VTRUwgVklBIFNMSURFIERJQVBPUkFNQSoqKiovCgoJCQkJCQkJCSQoJy5kaWFwb3JhbWFfcHJvZmlsJykub24oJ2N5Y2xlLWluaXRpYWxpemVkJywgZnVuY3Rpb24oIGV2ZW50LCBvcHRzICkgewoJCQkJCQkJCQkkKCcudGh1bWJzID4gZGl2JykucmVtb3ZlQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpLmVxKG9wdHMuY3VyclNsaWRlKS5hZGRDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJyk7CgkJCQkJCQkJfSk7CgoJCQkJCQkJCSQoJy5kaWFwb3JhbWFfcHJvZmlsJykub24oJ2N5Y2xlLWJlZm9yZScsIGZ1bmN0aW9uKCBldmVudCwgb3B0cyApIHsKCQkJCQkJCQkJJCgnLnRodW1icyA+IGRpdicpLnJlbW92ZUNsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKS5lcShvcHRzLm5leHRTbGlkZSkuYWRkQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpOwoJCQkJCQkJCQkkKCcuamNhcm91c2VsLW1hbicpLmpjYXJvdXNlbCgnc2Nyb2xsJywgb3B0cy5uZXh0U2xpZGUpOwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkvKioqKlNFVCBVUCBDQVJPVVNFTCBBTkQgSElTIENISUxEUkVOIFdJRFRIKioqKi8KCgkJCQkJCQkJdmFyIHggPSAkKCcuamNhcm91c2VsLW1hbicpLmhlaWdodCgpLzQ7CgkJCQkJCQkJdmFyIHkgPSAkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoOwoKCQkJCQkJCQkkKCcuamNhcm91c2VsLW1hbiAudGh1bWJzJykuY3NzKHsKCQkJCQkJCQkJJ2hlaWdodCc6eCp5KydweCcKCQkJCQkJCQl9KTsKCgkJCQkJCQkJJCgnLnRodW1icyA+IGRpdicpLmNzcyh7CgkJCQkJCQkJCSdoZWlnaHQnOjEwMC95KyclJwoJCQkJCQkJCX0pOwoKCQkJCQkJCX0KCgkJCQkJCX0pOwoJCQkJCX0pOwoKCQkJCX0pKCk7CgogICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoJCQkJLyoqKioqKioqKioqKipJTlNUQU5DRSBPUEVOU1dJUEUgREVUQUlMIFBIT1RPKioqKioqKioqKioqKioqKioqKioqLwoJCQkJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgogICAgICAgICAgICAgICAgdmFyIG9wZW5QaG90b1N3aXBlID0gZnVuY3Rpb24gKGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHBzd3BFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBzd3AnKVswXTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy8yNDEvMjQxXzAwLTIwMTktMTEtMzAtMDMxNS5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzI0MS8yNDFfMDEtMjAxOS0xMS0zMC0wMzE1LmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjQxLzI0MV8wMi0yMDE5LTExLTMwLTAzMTUuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CgogICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBmb2N1czogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGJnT3BhY2l0eTonMC45NScsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25TY3JvbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBzaG93QW5pbWF0aW9uRHVyYXRpb246IDMwMCwKICAgICAgICAgICAgICAgICAgICAgICAgaGlkZUFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsCiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FwdGlvbkVsOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVFbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHBpbmNoVG9DbG9zZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25WZXJ0aWNhbERyYWc6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGdhbGxlcnkgPSBuZXcgUGhvdG9Td2lwZShwc3dwRWxlbWVudCwgUGhvdG9Td2lwZVVJX0RlZmF1bHQsIGl0ZW1zLCBvcHRpb25zKTsKCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5pbml0KCk7CiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5nb1RvKGluZGV4KTsKCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5saXN0ZW4oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3ljbGUoJ3Jlc3VtZScpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5vbiggJ2NsaWNrJywnZGl2JywgZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5kYXRhKCJjeWNsZS5vcHRzIikuc2xpZGVOdW0gLTE7CgogICAgICAgICAgICAgICAgICAgIG9wZW5QaG90b1N3aXBlKGluZGV4KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jeWNsZSgncGF1c2UnKTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vSU5TVEFOQ0UgRElBUE9SQU1BIEZJQ0hFIEJJRU4KICAgICAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgPiBkaXYgPiBhIGltZycpKTsKCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB3ID0gJCgnLmRpYXBvcmFtYV9wcm9maWwnKS53aWR0aCgpLzEuNTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLnRodW1ic19jb250YWluZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9KSgpOwoKCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkvKioqKlNFVCBVUCBDQVJPVVNFTCBBTkQgSElTIENISUxEUkVOIFdJRFRIKioqKi8KCgkJCQkJdmFyIHggPSAkKCcuamNhcm91c2VsLW1hbicpLmhlaWdodCgpLzQ7CgkJCQkJdmFyIHkgPSAkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoOwoKCQkJCQkkKCcuamNhcm91c2VsLW1hbiAudGh1bWJzJykuY3NzKHsKCQkJCQkJJ2hlaWdodCc6eCp5KydweCcKCQkJCQl9KTsKCgkJCQkJJCgnLnRodW1icyA+IGRpdicpLmNzcyh7CgkJCQkJCSdoZWlnaHQnOjEwMC95KyclJwoJCQkJCX0pOwoKCQkJCX0KCiAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzID4gZGl2ID4gYSBpbWcnKSk7CgogICAgICAgICAgICB9KTsKCiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGRpdiBjbGFzcz0iYW5ub25jZV9kZXRhaWwiPgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgIDxoMiBpdGVtc2NvcGUgaXRlbXByb3A9ImF2YWlsYWJsZUF0T3JGcm9tIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUGxhY2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPkxvY2FsaXNhdGlvbiA6IDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzIj5QQVJJUzwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UXVhcnRpZXIgOiA8c3BhbiBpdGVtcHJvcD0iYWRkcmVzcyI+TU9OVFBBUk5BU1NFPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0iZGVzY3JpcHRpb24iIGNsYXNzPSJkZXNjcmlwdGlmIj5NT05UUEFSTkFTU0UgLSBJbW1ldWJsZSBzZW1pIHLDqWNlbnQgZGUgc3RhbmRpbmcsIGJlbCBhcHBhcnRlbWVudCAzIHBpw6hjZXMgZGUgNzIgbTIgQVUgREVSTklFUiBFVEFHRSBhdmVjIDIgYXNjZW5zZXVycywgVlVFIERFR0FHRUUsIFNPTEVJTCwgZW50csOpZSwgam9saSBzw6lqb3VyIGV4cG9zw6kgUy9PLCBjdWlzaW5lIHPDqXBhcsOpZSBhbcOpbmFnw6llLCAyIGNoYW1icmVzLCBkcmVzc2luZywgc2FsbGUgZGUgYmFpbnMsIHRvaWxldHRlcywgcmFuZ2VtZW50cywgY2F2ZS4gUG9zc2liaWxpdMOpIGRlIHBhcmtpbmcgZGFucyBsJ2ltbWV1YmxlLjwvcD4KICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG5ldyBBcnJheSgnQ2V0dGUgYW5ub25jZSBhIMOpdMOpIGFqb3V0w6llIMOgIHZvdHJlIHPDqWxlY3Rpb24uJywnQ2V0dGUgYW5ub25jZSBlc3QgZMOpasOgIGRhbnMgdm90cmUgc8OpbGVjdGlvbi4nKTsKICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoKICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGV0YWlsX2xpbmtfb3V0aWxzIj4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJham91dF9zZWxlY3Rpb24iIGRhdGEtYmllbmlkPSIyNDEiIGhyZWY9IiMiIHRpdGxlPSJBam91dGVyIMOgIG1hIHPDqWxlY3Rpb24iPkFqb3V0ZXIgw6AgbWEgc8OpbGVjdGlvbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImVudm9pX2FtaSIgaWQ9InNlbmRGcmllbmQiIGRhdGEtbWFpbC1zdWJqZWN0PSJKZSBzb3VoYWl0ZSB0ZSBtb250cmVyIGNldHRlIGFubm9uY2UiIGRhdGEtbWFpbC1ib2R5PSJCb25qb3VyLCBqJ2FpIHBlbnPDqSBxdWUgY2V0dGUgYW5ub25jZSBwb3VycmFpdCB0J2ludMOpcmVzc2VyIDogIGh0dHBzOi8vd3d3LmFzc2FzaW1tb2JpbGllci5jb20vYW5ub25jZS12ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvcmVmLWR0MS03MzgvdmVudGUtYXBwYXJ0ZW1lbnQtMy1waWVjZXMtMi1jaGFtYnJlcy1wYXJpcy03NTAxNC8iIGhyZWY9IiMiIHRpdGxlPSJFbnZveWVyIMOgIHVuIGFtaSI+RW52b3llciDDoCB1biBhbWk8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzaGFyZV9idXR0b25zIGFMaWtlIiB0aXRsZT0iUGFydGFnZXIgY2V0dGUgb2ZmcmUgc3VyIGxlcyByw6lzZWF1eCBzb2NpYXV4Ij5QYXJ0YWdlciBjZSBsaWVuPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaW5rX2ltcHJlc3Npb24iIHRpdGxlPSJJbXByaW1lciBsZSBkw6l0YWlsIGRlIGNlIGJpZW4iIGhyZWY9Ii9pbXByZXNzaW9uL2RldGFpbHMvMjQxLyIgdGFyZ2V0PSJfYmxhbmsiPkltcHJpbWVyPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idHJpZ2dlcl9tZW50aW9uIiBocmVmPSIvbWVudGlvbnMtbGVnYWxlcy1hZ2VuY2UtaW1tb2JpbGllcmUtYXNzYXMvIiB0aXRsZT0iSW5mb3JtYXRpb25zIGp1cmlkaXF1ZXMgQXNzYXMgaW1tb2JpbGllciI+Q29uc3VsdGVyIGxlIGJhcsOobWUgZGVzIGhvbm9yYWlyZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgogICAgICAgICAgICAgICAgdmFyIHNlbmRGcmllbmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VuZEZyaWVuZCcpOwoKICAgICAgICAgICAgICAgIHZhciBiZWZvcmVTZW5kRnJpZW5kID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICBzZW5kRnJpZW5kLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYmVmb3JlU2VuZEZyaWVuZCk7CiAgICAgICAgICAgICAgICAgICAgdmFyCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1tYWlsLXN1YmplY3QnKSwKICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLW1haWwtYm9keScpCiAgICAgICAgICAgICAgICAgICAgOwoKICAgICAgICAgICAgICAgICAgICBpZihzdWJqZWN0ICE9PSBudWxsKSBzdWJqZWN0ID0gZW5jb2RlVVJJQ29tcG9uZW50KHN1YmplY3QpOwogICAgICAgICAgICAgICAgICAgIGVsc2Ugc3ViamVjdCA9ICcnOwoKICAgICAgICAgICAgICAgICAgICBpZihib2R5ICE9PSBudWxsKSBib2R5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGJvZHkpOwogICAgICAgICAgICAgICAgICAgIGVsc2UgYm9keSA9ICcnOwoKICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnaHJlZicsICdtYWlsdG86P3N1YmplY3Q9JyArIHN1YmplY3QgKyAnJmJvZHk9JyArIGJvZHkpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpY2soKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpZiAoc2VuZEZyaWVuZCAhPT0gbnVsbCkgc2VuZEZyaWVuZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGJlZm9yZVNlbmRGcmllbmQpOwoKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgJCgnLnNoYXJlX2J1dHRvbnMnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2b2lsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICAgICAkKHZvaWxlKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdib3hfc2hhcmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld05vZGUyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ZXJ0aWNhbF9jZW50ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ZXJ0aWNhbF9jZW50ZXIyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xvc2Vfc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgJChuZXdOb2RlKS5hcHBlbmRUbyh2b2lsZSkuYXBwZW5kKCc8aDE+UGFydGFnZXIgY2UgbGllbjwvaDE+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQobmV3Tm9kZTIpLmFwcGVuZFRvKG5ld05vZGUpLmF0dHIoJ2lkJywnc2hhcmVtZScpLmFkZENsYXNzKCdzaGFycnJlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQodmVydGljYWxfY2VudGVyKS5hcHBlbmRUbyh2b2lsZSkuYWRkQ2xhc3MoJ3ZlcnRpY2FsX2NlbnRlcicpOwogICAgICAgICAgICAgICAgICAgICAgICAkKGNsb3NlX3NwYW4pLmFwcGVuZFRvKG5ld05vZGUpLmFkZENsYXNzKCdjbG9zZV9zaGFyZSBpY29fY2xvc2UnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCh2ZXJ0aWNhbF9jZW50ZXIyKS5hcHBlbmRUbyhuZXdOb2RlKS5hZGRDbGFzcygndmVydGljYWxfY2VudGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5ib3hfc2hhcmUnKS5mYWRlSW4oMzAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNzaGFyZW1lJykuc2hhcnJyZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR3aXR0ZXI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZWJvb2s6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xlUGx1czogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaW50ZXJlc3Q6dHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaW50ZXJlc3Q6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWE6ICdodHRwczovL3d3dy5hc3Nhc2ltbW9iaWxpZXIuY29tLycucmVwbGFjZSgvXC8kLywgJycpICsgJy8nICsgJy9kYXRhcy9iaWVucy90aHVtYnMvMjQxLzI0MV8wMC0yMDE5LTExLTMwLTAzMTUuanBnJy5yZXBsYWNlKC9eXC8vLCAnJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICAgJzx1bD5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJmYWNlYm9vayI+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX2ZhY2Vib29rIj48L3NwYW4+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5GYWNlYm9vazwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0idHdpdHRlciI+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX3R3aXR0ZXIiPjwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlR3aXR0ZXI8L3NwYW4+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9Imdvb2dsZXBsdXMiPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb19nb29nbGVwbHVzIj48L3NwYW4+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Hb29nbGUgKzwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0icGludGVyZXN0Ij5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fcGludGVyZXN0Ij48L3NwYW4+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5QaW50ZXJlc3Q8L3NwYW4+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsQ3VybDogJycsICAgIC8vICBkaXNhYmxlIHNoYXJycmUucGhwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVIb3ZlcjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVUcmFja2luZzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKGFwaSwgb3B0aW9ucyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy50d2l0dGVyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkub3BlblBvcHVwKCd0d2l0dGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcuZmFjZWJvb2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5vcGVuUG9wdXAoJ2ZhY2Vib29rJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcuZ29vZ2xlcGx1cycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLm9wZW5Qb3B1cCgnZ29vZ2xlUGx1cycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLnBpbnRlcmVzdCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLm9wZW5Qb3B1cCgncGludGVyZXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2JvZHksaHRtbCcpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOidoaWRkZW4nCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmNsb3NlX3NoYXJlJykub24oJ2NsaWNrJyxmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5ib3hfc2hhcmUnKS5mYWRlT3V0KDMwMCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keSxodG1sJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOid2aXNpYmxlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYm94X3NoYXJlJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CgoKICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnRlcmxvY3V0ZXVyIiBpdGVtcHJvcD0ic2VsbGVyIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1JlYWxFc3RhdGVBZ2VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+Vm90cmUgaW50ZXJsb2N1dGV1cjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkFTU0FTIEltbW9iaWxpZXI8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0ibG9jYXRpb24iPjE0NSwgYm91bGV2YXJkIFJhc3BhaWwgLSA3NTAwNiBQYXJpczwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlTDqWwgOiA8c3BhbiBpdGVtcHJvcD0idGVsZXBob25lIj4wMSA1NiA4MSAwOCAzODwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9kZXRhaWwiIGlkPSJjb250YWN0X2Fubm9uY2UiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxmb3JtIGlkPSJhbm5vbmNlX2Zvcm0iIGNsYXNzPSJ2YWxpZGF0ZV9mb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2Fubm9uY2UtdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyL3JlZi1kdDEtNzM4L3ZlbnRlLWFwcGFydGVtZW50LTMtcGllY2VzLTItY2hhbWJyZXMtcGFyaXMtNzUwMTQvI2NvbnRhY3RfYW5ub25jZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsZWdlbmQ+RGVtYW5kZSBkZSByZW5zZWlnbmVtZW50czwvbGVnZW5kPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImhvbmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ3ZWJzaXRlIj5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IndlYnNpdGUiIGlkPSJ3ZWJzaXRlIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV90d29yb3dzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Imxhc3RfbmFtZSI+Tm9tIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0ibGFzdF9uYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJsYXN0X25hbWUiIGNsYXNzPSJyZXF1aXJlZCIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJsYXN0X25hbWUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJmaXJzdF9uYW1lIj5QcsOpbm9tIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iZmlyc3RfbmFtZSIgdHlwZT0idGV4dCIgbmFtZT0iZmlyc3RfbmFtZSIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJmaXJzdF9uYW1lIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbWFpbCI+RW1haWwgPHNwYW4+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJlbWFpbCIgdHlwZT0idGV4dCIgbmFtZT0iZW1haWwiIHZhbHVlPSIiIGNsYXNzPSJyZXF1aXJlZCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlzX3JlcXVpcmVkW10iIHZhbHVlPSJlbWFpbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InBob25lIj5Uw6lsw6lwaG9uZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9InBob25lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJwaG9uZSIgdmFsdWU9IiIgY2xhc3M9InJlcXVpcmVkIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0YXJlYSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJsYWJlbF9tZXNzYWdlLWFubm9uY2UiIGZvcj0ibWVzc2FnZSI+TWVzc2FnZSA8c3Bhbj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSJtZXNzYWdlIiBuYW1lPSJtZXNzYWdlIiBjbGFzcz0icmVxdWlyZWQiPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9Im1lc3NhZ2UiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaG9uZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im9jMzlianZmM3VqZ3M1cXRkb2s4N3F1dWs2Ij5WZXVpbGxleiBsYWlzc2VyIGxhIHZhbGV1ciBpbml0aWFsZSBkZSBjZSBjaGFtcDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Im9jMzlianZmM3VqZ3M1cXRkb2s4N3F1dWs2IiBpZD0ib2MzOWJqdmYzdWpnczVxdGRvazg3cXV1azYiIHZhbHVlPSJvYzM5Ymp2ZjN1amdzNXF0ZG9rODdxdXVrNiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlkIiBpZD0iaWQiIHZhbHVlPSIyNDEiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiB2YWx1ZT0iRFQxLTczOCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFnZW5jZV9pZCIgaWQ9ImFnZW5jZV9pZCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdWJqZWN0IiBpZD0ic3ViamVjdCIgdmFsdWU9IkNvbnRhY3RBbm5vbmNlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiBuYW1lPSJzZW5kX2VtYWlsIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJFbnZveWVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0ibWFuZGF0b3J5VHh0Ij5MZXMgaW5mb3JtYXRpb25zIHJlY3VlaWxsaWVzIHN1ciBjZSBmb3JtdWxhaXJlIHNvbnQgZW5yZWdpc3RyJmVhY3V0ZTtlcyBkYW5zIHVuIGZpY2hpZXIgaW5mb3JtYXRpcyZlYWN1dGU7IHBhciBsYSBzb2NpJmVhY3V0ZTt0JmVhY3V0ZTsgPHNwYW4gY2xhc3M9ImFnZW5jZU5hbWUiPiBBZ2VuY2UgTmFtZTwvc3Bhbj4gcG91ciBsYSBnZXN0aW9uIGV0IGxlIHN1aXZpIGRlIHZvdHJlIGRlbWFuZGUuIENvbmZvcm0mZWFjdXRlO21lbnQgJmFncmF2ZTsgbGEgbG9pICZsYXF1bzsgaW5mb3JtYXRpcXVlIGV0IGxpYmVydCZlYWN1dGU7cyAmcmFxdW87LCBWb3VzIHBvdXZleiBleGVyY2VyIHZvdHJlIGRyb2l0IGQmIzM5O2FjYyZlZ3JhdmU7cyBhdXggZG9ubiZlYWN1dGU7ZXMgdm91cyBjb25jZXJuYW50IGV0IGxlcyBmYWlyZSByZWN0aWZpZXIgZW4gY29udGFjdGFudCA6IDxzcGFuIGNsYXNzPSJhZ2VuY2VOYW1lIj4gQWdlbmNlIE5hbWU8L3NwYW4+LCBDb3JyZXNwb25kYW50IEluZm9ybWF0aXF1ZSBldCBsaWJlcnQmZWFjdXRlO3MsIDxzcGFuIGNsYXNzPSJhZ2VuY2VBZGRyZXNzIj5hZ2VuY2UgYWRyZXNzZTwvc3Bhbj4gb3UgJmFncmF2ZTsgPGEgY2xhc3M9ImFnZW5jZU1haWwiIGhyZWY9Im1haWx0bzoiPmFnZW5jZSBtYWlsPC9hPiwgZW4gcHImZWFjdXRlO2Npc2FudCBkYW5zIGwmcnNxdW87b2JqZXQgZHUgY291cnJpZXIgJmxhcXVvOyBEcm9pdCBkZXMgcGVyc29ubmVzICZyYXF1bzsgZXQgZW4gam9pZ25hbnQgbGEgY29waWUgZGUgdm90cmUganVzdGlmaWNhdGlmIGQmcnNxdW87aWRlbnRpdCZlYWN1dGU7LjwvYXJ0aWNsZT4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCS8vPCFbQ0RBVEFbCgoJdmFyIGFnZW5jeSA9IFtdOwoKCWZ1bmN0aW9uIGFmZmljaGFnZVR4dChhcnJheUFnZW5jeSl7CiAgICAgICAgJCgnYXJ0aWNsZS5tYW5kYXRvcnlUeHQgLmFnZW5jZU5hbWUnKS5lYWNoKGZ1bmN0aW9uKCl7JCh0aGlzKS50ZXh0KGFycmF5QWdlbmN5WzBdLm5hbWUpO30pOwogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VBZGRyZXNzJykudGV4dChhcnJheUFnZW5jeVswXS5hZGRyZXNzKTsKICAgICAgICAkKCdhcnRpY2xlLm1hbmRhdG9yeVR4dCAuYWdlbmNlTWFpbCcpLnRleHQoYXJyYXlBZ2VuY3lbMF0ubWFpbCk7CiAgICAgICAgJCgnYXJ0aWNsZS5tYW5kYXRvcnlUeHQgLmFnZW5jZU1haWwnKS5hdHRyKCdocmVmJywnbWFpbHRvOicrYXJyYXlBZ2VuY3lbMF0ubWFpbCk7CgogICAgICAgIGFnZW5jeSA9IFtdOyAvLyBvbiB2aWRlIGxlIHRhYmxlYXUKCX0KCglmdW5jdGlvbiBhZ2VuY2VNYW55KCl7CgkJYWdlbmN5LnB1c2goewoJCQluYW1lOiQoJ3NlbGVjdCNmbGRfYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbmFtZScpLCBhZGRyZXNzOiQoJ3NlbGVjdCNmbGRfYWdlbmNlX2lkIG9wdGlvblt2YWx1ZT0xXScpLmF0dHIoJ2RhdGEtbG9jYWxpc2F0aW9uJyksIG1haWw6JCgnc2VsZWN0I2ZsZF9hZ2VuY2VfaWQgb3B0aW9uW3ZhbHVlPTFdJykuYXR0cignZGF0YS1tYWlsJykKCQl9KTsKCgkJYWZmaWNoYWdlVHh0KGFnZW5jeSk7CgoJCSQoJ3NlbGVjdCNmbGRfYWdlbmNlX2lkJykub24oJ2NoYW5nZScsZnVuY3Rpb24oKXsKCQkJYWdlbmN5LnB1c2goewoJCQkJbmFtZTokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLW5hbWUnKSwgYWRkcmVzczokKHRoaXMpLmNoaWxkcmVuKCI6c2VsZWN0ZWQiKS5hdHRyKCdkYXRhLWxvY2FsaXNhdGlvbicpLCBtYWlsOiQodGhpcykuY2hpbGRyZW4oIjpzZWxlY3RlZCIpLmF0dHIoJ2RhdGEtbWFpbCcpCgkJCX0pOwoJCQlhZmZpY2hhZ2VUeHQoYWdlbmN5KTsKCQl9KTsKCX0KCgkvL11dPgo8L3NjcmlwdD4KCgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkJLy88IVtDREFUQVsKCgkJYWdlbmN5LnB1c2goewoJCQluYW1lOiJBU1NBUyBJbW1vYmlsaWVyICIsIGFkZHJlc3M6IjE0NSwgYm91bGV2YXJkIFJhc3BhaWwgNzUwMDYgUGFyaXMiLCBtYWlsOiJjb25zZWlsQGFzc2FzaW1tb2JpbGllci5jb20iCgkJfSk7CgoJCWFmZmljaGFnZVR4dChhZ2VuY3kpOwoKCQkvL11dPgoJPC9zY3JpcHQ+CgoKCgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgPGRpdiBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09mZmVyIiBjbGFzcz0icHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0icHJpY2UiIGNsYXNzPSJhbm5vbmNlX3ByaWNlIj5Qcml4IDogPHNwYW4+ODM1IDAwMCAmZXVybzsgPC9zcGFuPjwvcD4KCgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpY2VfZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgSG9ub3JhaXJlcyBpbmNsdXMKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlX2RldGFpbCB0YWxsTWFyZ2luIHNpemUiPjc5NCAwMDAgJmV1cm87IEhvbm9yYWlyZXMgZXhjbHVzPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpY2VfZGV0YWlsIHNpemUiPkhvbm9yYWlyZXMgZGUgNSwxNiUgVFRDIMOgIGxhIGNoYXJnZSBkZSBsJ2FjcXXDqXJldXI8L3A+CgoJCQkJCQk8cCBjbGFzcz0icHJpY2VfZGV0YWlsIj48L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxoMj5Ew6l0YWlsczwvaDI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRldGFpbF9saXN0ZSI+CiAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJ0eXBlT2ZHb29kIiBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGFydGVtZW50CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+U3VyZmFjZSA6IDxzcGFuIGl0ZW1wcm9wPSJ3aWR0aCI+NzIgbcKyPC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPk5vbWJyZSBkZSBwacOoY2VzIDogPHNwYW4+Mzwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5Ob21icmUgZGUgY2hhbWJyZXMgOiA8c3Bhbj4yPC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSA6IDxzcGFuPkRUMS03Mzg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXBfZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWdfZHBlIiBzcmM9Imh0dHBzOi8vd3d3LmFnZW5jZS1wbHVzLm5ldC9za2lucy9fZGVmYXVsdC9saWIvQWdlbmNlUGx1cy93cy9pbWdEUEUuYXNoeD92YWx1ZT0yNTAmc2l6ZT0yMDZ4MjExJnBpY3RvPWRwZV9vbWJyZV90cmFuc3BhcmVudF9kYXJrX2dyZXkiIGFsdD0iRGlhZ25vc3RpYyBkZSBwZXJmb3JtYW5jZSDDqW5lcmfDqXRpcXVlIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibGlua19iYWNrIj4KICAgICAgICA8L2Rpdj4KICAgIDwvc2VjdGlvbj4KICAgIDwhLS0gUm9vdCBlbGVtZW50IG9mIFBob3RvU3dpcGUuIE11c3QgaGF2ZSBjbGFzcyBwc3dwLiAtLT4KICAgIDxkaXYgY2xhc3M9InBzd3AiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgPCEtLSBCYWNrZ3JvdW5kIG9mIFBob3RvU3dpcGUuCiAgICAgICAgSXQncyBhIHNlcGFyYXRlIGVsZW1lbnQsIGFzIGFuaW1hdGluZyBvcGFjaXR5IGlzIGZhc3RlciB0aGFuIHJnYmEoKS4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fYmciPjwvZGl2PgogICAgICAgIDwhLS0gU2xpZGVzIHdyYXBwZXIgd2l0aCBvdmVyZmxvdzpoaWRkZW4uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3Njcm9sbC13cmFwIj4KICAgICAgICAgICAgPCEtLSBDb250YWluZXIgdGhhdCBob2xkcyBzbGlkZXMuCiAgICAgICAgICAgICAgICBQaG90b1N3aXBlIGtlZXBzIG9ubHkgMyBvZiB0aGVtIGluIERPTSB0byBzYXZlIG1lbW9yeS4KICAgICAgICAgICAgICAgIERvbid0IG1vZGlmeSB0aGVzZSAzIHBzd3BfX2l0ZW0gZWxlbWVudHMsIGRhdGEgaXMgYWRkZWQgbGF0ZXIgb24uIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19jb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSBEZWZhdWx0IChQaG90b1N3aXBlVUlfRGVmYXVsdCkgaW50ZXJmYWNlIG9uIHRvcCBvZiBzbGlkaW5nIGFyZWEuIENhbiBiZSBjaGFuZ2VkLiAtLT4KICAgICAgICAgICAgPGltZyBjbGFzcz0ic3BhY2VyQmxvY2tlciIgc3JjPSIvdGhlbWUvX2RlZmF1bHQvaW1hZ2VzL3NwYWNlci5wbmciIGFsdD0iIiBzdHlsZT0iei1pbmRleDowOyIgLz4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fdWkgcHN3cF9fdWktLWhpZGRlbiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX190b3AtYmFyIj4KICAgICAgICAgICAgICAgICAgICA8IS0tICBDb250cm9scyBhcmUgc2VsZi1leHBsYW5hdG9yeS4gT3JkZXIgY2FuIGJlIGNoYW5nZWQuIC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NvdW50ZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWNsb3NlIiB0aXRsZT0iQ2xvc2UgKEVzYykiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLXNoYXJlIiB0aXRsZT0iU2hhcmUiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLWZzIiB0aXRsZT0iVG9nZ2xlIGZ1bGxzY3JlZW4iPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBzd3BfX2J1dHRvbiBwc3dwX19idXR0b24tLXpvb20iIHRpdGxlPSJab29tIGluL291dCI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBQcmVsb2FkZXIgZGVtbyBodHRwOi8vY29kZXBlbi5pby9kaW1zZW1lbm92L3Blbi95eUJXb1IgLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBlbGVtZW50IHdpbGwgZ2V0IGNsYXNzIHBzd3BfX3ByZWxvYWRlci0tYWN0aXZlIHdoZW4gcHJlbG9hZGVyIGlzIHJ1bm5pbmcgLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19pY24iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fY3V0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3ByZWxvYWRlcl9fZG9udXQiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2hhcmUtbW9kYWwgcHN3cF9fc2hhcmUtbW9kYWwtLWhpZGRlbiBwc3dwX19zaW5nbGUtdGFwIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19zaGFyZS10b29sdGlwIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLWxlZnQiIHRpdGxlPSJQcmV2aW91cyAoYXJyb3cgbGVmdCkiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tYXJyb3ctLXJpZ2h0IiB0aXRsZT0iTmV4dCAoYXJyb3cgcmlnaHQpIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb24iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NhcHRpb25fX2NlbnRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAkKCcuYWpvdXRfc2VsZWN0aW9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CgogICAgICAgIHZhciBpZCA9ICQodGhpcykuYXR0cignZGF0YS1iaWVuaWQnKTsKCiAgICAgICAgbWFzZWxlY3Rpb24oJycsIGlkLCAnYWRkJywgZnVuY3Rpb24ocmV0b3VyKSB7CgogICAgICAgICAgICB2YXIgYW5pbV90aW1lb3V0OwogICAgICAgICAgICB2YXIgYW5pbTJfdGltZW91dDsKICAgICAgICAgICAgdmFyIHJlbW92ZV90aW1lb3V0OwoKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1fdGltZW91dCk7CiAgICAgICAgICAgIGNsZWFyVGltZW91dChhbmltMl90aW1lb3V0KTsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlbW92ZV90aW1lb3V0KTsKCiAgICAgICAgICAgIGlmIChyZXRvdXIpIHsKCiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBvbmNlJykuYXBwZW5kKCc8cD4nICsgbWVzc2FnZVswXSArICc8L3A+Jyk7CgogICAgICAgICAgICAgICAgdmFyIG5iX3NlbGVjdGlvbiA9IHBhcnNlSW50KCQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KCkpICsgMTsKICAgICAgICAgICAgICAgICQoJy5uYl9zZWxlY3Rpb24nKS50ZXh0KG5iX3NlbGVjdGlvbik7CgogICAgICAgICAgICAgICAgYW5pbV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgYW5pbTJfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ29uY2UnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjAwKTsKCiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICAgICAgfSwgMTAwKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hcHBlbmRUbygnYm9keScpLmFkZENsYXNzKCdhbGVydCBkb25lJykuYXBwZW5kKCc8cD4nICsgbWVzc2FnZVsxXSArICc8L3A+Jyk7CgogICAgICAgICAgICAgICAgYW5pbV90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykuYWRkQ2xhc3MoJ2FuaW0nKTsKCiAgICAgICAgICAgICAgICAgICAgYW5pbTJfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0JykucmVtb3ZlQ2xhc3MoJ2RvbmUnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjAwKTsKCiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7CgogICAgICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgfSk7CgogICAgPC9zY3JpcHQ+CgoKICAgIDxmb290ZXI+CiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl90b3AiPgogICAgICAgICAgICA8YSBpdGVtc2NvcGU9Iml0ZW1zY29wZSIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1JlYWxFc3RhdGVBZ2VudCIgY2xhc3M9ImFnZW5jZXNfZm9vdGVyIiBocmVmPSIvY29udGFjdC1hZ2VuY2UtaW1tb2JpbGllcmUtYXNzYXMtaW1tb2JpbGllci8iIHRpdGxlPSJDb250YWN0ZXogbOKAmWFnZW5jZSBpbW1vYmlsacOocmUgQXNzYXMgaW1tb2JpbGllciI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnJhbmQiIGl0ZW1wcm9wPSJsZWdhbE5hbWUiPkFTU0FTIEltbW9iaWxpZXI8L3NwYW4+PHNwYW4gY2xhc3M9InRpcmV0Ij4mbmJzcDstJm5ic3A7PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9ImxvY2F0aW9uIj4xNDUsIGJvdWxldmFyZCBSYXNwYWlsJm5ic3A7CiAgICAgICAgICAgICAgICA3NTAwNiZuYnNwO1BhcmlzPHNwYW4gY2xhc3M9InRpcmV0Ij4mbmJzcDstJm5ic3A7PC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPjAxIDU2IDgxIDA4IDM4PC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxhIGNsYXNzPSJtb2JpbGVfZm9vdGVyIiBocmVmPSJodHRwczovL20uYXNzYXNpbW1vYmlsaWVyLmNvbS8mbW9iaWxlPTEiIHRpdGxlPSJTaXRlIG1vYmlsZSI+U2l0ZSBtb2JpbGU8L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZW8iPgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic29jaWFsTGlua3MiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJmYWNlYm9vayIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2Fzc2FzaW1tb2JpbGllci8/ZnJlZj10cyIgdGl0bGU9IkZhY2Vib29rIj48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW8xIj4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiB0aXRsZT0iSW1tb2JpbGllciBQYXJpcyA3NTAwNiBBc3NhcyBpbW1vYmlsaWVyIj5BY2N1ZWlsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJJbW1vYmlsaWVyIGVuIFZlbnRlIEFzc2FzIGltbW9iaWxpZXIiPkVuIHZlbnRlPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZXN0aW1hdGlvbi1hcHBhcnRlbWVudC1kdXBsZXgtaG90ZWwtcGFydGljdWxpZXItcGFyaXMtNzUwMDYvIiB0aXRsZT0iRXN0aW1lciB2b3RyZSBiaWVuIHN1ciBQYXJpcyI+RXN0aW1hdGlvbjwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3BsYW4tbWVkaWEtYWN0dWFsaXRlLWFzc2FzLWltbW9iaWxpZXIvIiB0aXRsZT0iQWN0dWFsaXTDqXMgQXNzYXMgaW1tb2JpbGllciI+UGxhbiBtw6lkaWE8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9iaWVucy12ZW5kdXMtYXBwYXJ0ZW1lbnQtbWFpc29uLWFzc2FzLWltbW9iaWxpZXItcGFyaXMtNzUwMDYvIiB0aXRsZT0iQmllbnMgdmVuZHVzIHBhciBBc3NhcyBpbW1vYmlsaWVyIj5Ob3MgdmVudGVzPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvaG9tZS1zdGFnaW5nLWFzc2FzLWltbW9iaWxpZXItcGFyaXMvIiB0aXRsZT0iSG9tZSBTdGFnaW5nIEFzc2FzIGltbW9iaWxpZXIiPkhvbWUgc3RhZ2luZzwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnRhY3QtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLWltbW9iaWxpZXIvIiB0aXRsZT0iQ29udGFjdGV6IGzigJlhZ2VuY2UgaW1tb2JpbGnDqHJlIEFzc2FzIGltbW9iaWxpZXIiPk5vdXMgY29udGFjdGVyPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW8yIj4KCiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ic2VvMyI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL21hLXNlbGVjdGlvbi1hbm5vbmNlcy1pbW1vYmlsaWVyZXMtYXNzYXMvIiB0aXRsZT0iU8OpbGVjdGlvbm5lciBhbm5vbmNlIGltbW9iaWxpw6hyZSI+TWEgc8OpbGVjdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii92ZW50ZS1hY2hhdC1hcHBhcnRlbWVudC1wYXJpcy03NTAwNS1hc3Nhcy1pbW1vYmlsaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDc1MDA1IEFzc2FzIGltbW9iaWxpZXIiPkFwcGFydGVtZW50Lzc1MDA1PC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ic2VvNCI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZlbnRlLWFjaGF0LWFwcGFydGVtZW50LXBhcmlzLTc1MDA2LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNzUwMDYgQXNzYXMgaW1tb2JpbGllciI+QXBwYXJ0ZW1lbnQvNzUwMDY8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVudGUtYWNoYXQtYXBwYXJ0ZW1lbnQtcGFyaXMtNzUwMDctYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA3NTAwN0Fzc2FzIGltbW9iaWxpZXIiPkFwcGFydGVtZW50Lzc1MDA3PC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZlbnRlLWFjaGF0LWFwcGFydGVtZW50LXBhcmlzLTc1MDE0LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNzUwMTQgQXNzYXMgaW1tb2JpbGllciI+QXBwYXJ0ZW1lbnQvNzUwMTQ8L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW81Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVudGUtYWNoYXQtYXBwYXJ0ZW1lbnQtcGFyaXMtNzUwMTUtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA3NTAxNSBBc3NhcyBpbW1vYmlsaWVyIj5BcHBhcnRlbWVudC83NTAxNTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii92ZW50ZS1hY2hhdC1tYWlzb25zLXBhcmlzLXJpdmUtZ2F1Y2hlLTc1MDE0LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgbWFpc29ucyA3NTAxNCBBc3NhcyBpbW1vYmlsaWVyIj5NYWlzb25zL1BhcmlzIHJpdmUgZ2F1Y2hlICg3NTAxNCk8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT4mbmJzcDs8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImxlZ2FsIj4KICAgICAgICAgICAgPGEgaHJlZj0iL21lbnRpb25zLWxlZ2FsZXMtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLyIgdGl0bGU9IkluZm9ybWF0aW9ucyBqdXJpZGlxdWVzIEFzc2FzIGltbW9iaWxpZXIiPk1lbnRpb25zIGzDqWdhbGVzIC8gQmFyw6ptZTwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSIvbGllbnMtdXRpbGVzLXBhcnRlbmFpcmVzLWltbW9iaWxpcmVzLWFzc2FzLyIgdGl0bGU9IlBhcnRlbmFpcmVzIGltbW9iaWxpZXJzIEFzc2FzIGltbW9iaWxpZXIiPkxpZW5zIHV0aWxlczwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vYWdlbmNlLWltbW9iaWxpZXJlL2FnZW5jZS1hc3Nhcy1pbW1vYmlsaWVyLTM5MTE1LyIgdGl0bGU9IkFnZW5jZSBhZ3LDqcOpZSBNZWlsbGV1cnMgQWdlbnRzIC0gQWNoYXQgdmVudGUgYXBwYXJ0ZW1lbnQgcGFyaXMgcml2ZSBnYXVjaGUiIHRhcmdldD0iX2JsYW5rIj5BZ2VuY2UgYWdyw6nDqWUgTWVpbGxldXJzIEFnZW50czwvYT4gLQogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LmFnZW5jZS1wbHVzLmZyIiB0aXRsZT0iQWdlbmNlIFBsdXMsIHNvbHV0aW9ucyBwb3VyIGxlcyBwcm9mZXNzaW9ubmVscyBkZSBsJ2ltbW9iaWxpZXIiIHRhcmdldD0iX2JsYW5rIj5Sw6lhbGlzYXRpb24gQWdlbmNlIFBsdXM8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9mb290ZXI+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgbGlzdF9saSA9ICQoJ2Zvb3RlciB1bC5zZW8xIGxpJyk7CgogICAgZm9yKHZhciBpPTA7aTxsaXN0X2xpLmxlbmd0aDtpKyspewoKICAgICAgICB2YXIgY3VycmVudF9lbGVtID0gbGlzdF9saVtpXTsKCiAgICAgICAgaWYoaSA+PTMgJiYgaSA8PTUpewogICAgICAgICAgICAkKGN1cnJlbnRfZWxlbSkuYXBwZW5kVG8oJ2Zvb3RlciAuc2VvMicpOwogICAgICAgIH1lbHNlIGlmKGkgPT0gNil7CiAgICAgICAgICAgICQoY3VycmVudF9lbGVtKS5wcmVwZW5kVG8oJ2Zvb3RlciAuc2VvMycpCiAgICAgICAgfQogICAgfQo8L3NjcmlwdD4KCiAgICA8ZGl2IGNsYXNzPSJwb3B1cC1jb250ZW50Ij4KICAgICAgICA8ZGl2PgogICAgICAgICAgICA8c3Bhbj5FbiBwb3Vyc3VpdmFudCB2b3RyZSBuYXZpZ2F0aW9uIHN1ciBjZSBzaXRlLCB2b3VzIGFjY2VwdGV6IGwndXRpbGlzYXRpb24gZGUgY29va2llcyBkZXN0aW7DqXMgw6AgbGEgcsOpYWxpc2F0aW9uIGRlIHN0YXRpc3RpcXVlcyBkZSB2aXNpdGVzLjwvc3Bhbj4KICAgICAgICAgICAgPGEgaHJlZj0iL21lbnRpb25zLWxlZ2FsZXMtYWdlbmNlLWltbW9iaWxpZXJlLWFzc2FzLyNjb29raWVzIiBjbGFzcz0ibW9yZS1idXR0b24iPkVuIHNhdm9pciBwbHVzPC9hPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYWdyZWUtYnV0dG9uIiB2YWx1ZT0iQ29udGludWVyIi8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9jb25maXJtX2Nvb2tpZS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgogICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGZuRm9vdGVyID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIGYgPSAkKCdmb290ZXInKTsKICAgICAgICAgICAgaWYgKGYubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgdmFyIG1pbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIGYuaW5uZXJIZWlnaHQoKTsKICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjonc3RhdGljJ30pOwogICAgICAgICAgICAgICAgaWYoZi5vZmZzZXQoKS50b3AgPCBtaW5IZWlnaHQpewogICAgICAgICAgICAgICAgICAgICQoJyNtYWluJykuY3NzKCdtaW4taGVpZ2h0JywkKHdpbmRvdykuaGVpZ2h0KCkpOwogICAgICAgICAgICAgICAgICAgIGYuY3NzKHtwb3NpdGlvbjonYWJzb2x1dGUnLCAnYm90dG9tJzonMCd9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZm5Gb290ZXIpOwogICAgICAgICQod2luZG93KS5yZXNpemUoZm5Gb290ZXIpOwogICAgfSkoKTsKCiAgICAgLy8gQ29va2llCiAgICAgICAgJCgnLmFncmVlLWJ1dHRvbicpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICBjb25maXJtY29va2llKCcnLGZ1bmN0aW9uKHJldG91cil7CiAgICAgICAgICAgICAgIGlmIChyZXRvdXIpIHskKCcucG9wdXAtY29udGVudCcpLmhpZGUoKTt9CiAgICAgICAgICAgfSk7CiAgICAgICAgfSk7Cgo8L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPgoK
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:43 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-734/vente-appartement-1-piece-paris-75014/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:43 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=alimpukosce2lesg88l7c2btv6; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:43 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-737/vente-appartement-3-pieces-2-chambres-paris-75014/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:43 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=b8j7iup65qg1v15ecq70d9i5o0; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCI+CjxoZWFkPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ii8+CgogICAgPHRpdGxlPlZlbnRlIEFwcGFydGVtZW50IFBhcmlzIDE0IFNPVVMgT0ZGUkUgLSBCT1VMQVJEIC0gREFHVUVSUkUgLSBBc3NhcyBJbW1vYmlsaWVyPC90aXRsZT4KCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iRMOpdGFpbHMgZGUgbCdhbm5vbmNlIGltbW9iaWxpw6hyZSB2ZW50ZSBhcHBhcnRlbWVudCAzIHBpw6hjZXMgUEFSSVMgNzUwMTQgMiBjaGFtYnJlcyA3NiBtwrIgUHJpeCA5NTAgMDAwIOKCrCBSw6lmw6lyZW5jZSBEVDEtNzM3Ii8+CiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQWNoYXQsdmVudGUsYWNoZXRlcix2ZW5kcmUsZXN0aW1lcixhcHBhcnRlbWVudCxsb2Z0LG1haXNvbixob3RlbCBwYXJ0aWN1bGllcixlc3RpbWF0aW9uLGdyYXR1aXRlLGhvbWUgc3RhZ2luZyxBc3NhcyBJbW1vYmlsaWVyLHBhcmlzLHJpdmUgZ2F1Y2hlLDc1MDA2LCA3NTAwNSw3NTAwNyw3NTAxNCw3NTAxNSxJbW1vYmlsaWVyLGFnZW5jZSBpbW1vYmlsacOocmUsaW1tb2JpbGllcnMsYmllbiBpbW1vYmlsaWVyLCBtb250cGFybmFzc2UsIHZhdmluLCByYXNwYWlsIiAvPgogICAgPG1ldGEgbmFtZT0icmV2aXNpdC1hZnRlciIgY29udGVudD0iMTAgZGF5cyIgLz4KICAgIDxtZXRhIG5hbWUgPSJmb3JtYXQtZGV0ZWN0aW9uIiBjb250ZW50ID0gInRlbGVwaG9uZT1ubyIgLz4KICAgIDxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLWNhcGFibGUiIGNvbnRlbnQ9InllcyIvPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtdGl0bGUiIGNvbnRlbnQ9IkFzc2FzIEltbW9iaWxpZXIiLz4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgiLz4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSIgLz4KCgk8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KPHNjcmlwdD4oZnVuY3Rpb24odyxkLHMsbCxpKXt3W2xdPXdbbF18fFtdO3dbbF0ucHVzaCh7J2d0bS5zdGFydCc6Cm5ldyBEYXRlKCkuZ2V0VGltZSgpLGV2ZW50OidndG0uanMnfSk7dmFyIGY9ZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSwKaj1kLmNyZWF0ZUVsZW1lbnQocyksZGw9bCE9J2RhdGFMYXllcic/JyZsPScrbDonJztqLmFzeW5jPXRydWU7ai5zcmM9CidodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JytpK2RsO2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaixmKTsKfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCdkYXRhTGF5ZXInLCdHVE0tTjRXV1BaSycpOzwvc2NyaXB0Pgo8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CgoKCiAgICA8YmFzZSBocmVmPSJodHRwczovL3d3dy5hc3Nhc2ltbW9iaWxpZXIuY29tLyIgLz4KCiAgICA8IS0tPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9qcXVlcnktMi4xLjEubWluLmpzIj48L3NjcmlwdD4tLT4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvanF1ZXJ5LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9TY2FsZUltYWdlLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL2pxdWVyeS5jeWNsZTIubWluLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL2pxdWVyeS5tdWx0aXBsZS5zZWxlY3QuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9qcXVlcnkuc2hhcnJyZS5taW4uanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9tc2Ryb3AuY3NzIiAvPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fZGVmYXVsdC9yZXNldC5jc3MiIC8+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9waG90b3N3aXBlLmNzcyIgLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vZGVmYXVsdC1za2luLmNzcyIgLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL3N0eWxlLmNzcz8yMDE4MDYyOD0iLz4KCiAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9IiIgaHJlZj0iaHR0cHM6Ly9tLmFzc2FzaW1tb2JpbGllci5jb20vYW5ub25jZS12ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvcmVmLWR0MS03MzcvdmVudGUtYXBwYXJ0ZW1lbnQtMy1waWVjZXMtMi1jaGFtYnJlcy1wYXJpcy03NTAxNC8iIC8+CgogICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2Zhdmljb24uaWNvIiAvPgoKICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgaHJlZj0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvYXBwbGVUb3VjaEljb242MC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iNzZ4NzYiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2FwcGxlVG91Y2hJY29uNzYucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjEyMHgxMjAiIGhyZWY9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2FwcGxlVG91Y2hJY29uMTIwLnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxNTJ4MTUyIiBocmVmPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9hcHBsZVRvdWNoSWNvbjE1Mi5wbmciPgoKICAgIDxtZXRhIG5hbWU9ImFwcGxpY2F0aW9uLW5hbWUiIGNvbnRlbnQ9IkFzc2FzIEltbW9iaWxpZXIiIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIgY29udGVudD0iIzAzNDY4YSIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlNzB4NzBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9tc1RvdWNoL3NtYWxsdGlsZS03MHg3MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXNxdWFyZTE1MHgxNTBsb2dvIiBjb250ZW50PSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2ltYWdlcy9tc1RvdWNoL21lZGl1bXRpbGUtMTUweDE1MC5wbmciIC8+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXdpZGUzMTB4MTUwbG9nbyIgY29udGVudD0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvbXNUb3VjaC93aWRldGlsZS0zMTB4MTUwLnBuZyIgLz4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tc3F1YXJlMzEweDMxMGxvZ28iIGNvbnRlbnQ9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL21zVG91Y2gvbGFyZ2V0aWxlLTMxMHgzMTAucG5nIiAvPgoKICAgIDwhLS1baWYgSUUgXT48c2NyaXB0IHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9tb2Rlcm5penIuY3VzdG9tLmpzIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHRlIElFIDldPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvcGxhY2Vob2xkZXJzLm1pbi5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIChndGUgSUUgNikmKGx0ZSBJRSA4KV0+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9zZWxlY3Rpdml6ci1taW4uanMiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdCBJRSA5XT48c2NyaXB0IHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9jc3MzLW1lZGlhcXVlcmllcy5qcyI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+CgogICAgPGxpbmsgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUFsZWdyZXlhJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4KCgoKPC9oZWFkPgo8IS0tW2lmIGx0IElFIDddPiA8Ym9keSBjbGFzcz0iaWUgaWU2IGllN18gaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA3XT4gICAgPGJvZHkgY2xhc3M9ImllIGllNyBpZTdfIGllOF8gaWU5XyI+PCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+ICAgIDxib2R5IGNsYXNzPSJpZSBpZTggaWU4XyBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA5XT4gICAgPGJvZHkgY2xhc3M9ImllIGllOSBpZTlfIj48IVtlbmRpZl0tLT4KPCEtLVtpZiBndCBJRSA5XT4gPGJvZHk+PCFbZW5kaWZdLS0+CjwhLS1baWYgIUlFXT48IS0tPjxib2R5PjwhLS08IVtlbmRpZl0tLT4KCTwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+Cjxub3NjcmlwdD48aWZyYW1lIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vbnMuaHRtbD9pZD1HVE0tTjRXV1BaSyIgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+PC9pZnJhbWU+PC9ub3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+Cgo8ZGl2IGlkPSJtYWluIiBjbGFzcz0iYW5ub25jZXMtZGVmYXVsdCI+CiAgICA8aGVhZGVyPgogICAgPGRpdiBjbGFzcz0idG9wX2hlYWRlciI+CiAgICAgICAgPGRpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nbyI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuYXNzYXNpbW1vYmlsaWVyLmNvbS8iIHRpdGxlPSJBc3NhcyBJbW1vYmlsaWVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL2xvZ28ucG5nIiBhbHQ9IkFzc2FzIEltbW9iaWxpZXIgLSBBY2hhdCB2ZW50ZSBhcHBhcnRlbWVudCBwYXJpcyByaXZlIGdhdWNoZSIvPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxuYXY+CiAgICA8dWwgY2xhc3M9Im1haW5NZW51Ij4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iIHRpdGxlPSJJbW1vYmlsaWVyIFBhcmlzIDc1MDA2IEFzc2FzIGltbW9iaWxpZXIiIGNsYXNzPSJpY29faG9tZSI+PC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkltbW9iaWxpZXIgZW4gVmVudGUgQXNzYXMgaW1tb2JpbGllciIgY2xhc3M9IiI+RW4gdmVudGU8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9lc3RpbWF0aW9uLWFwcGFydGVtZW50LWR1cGxleC1ob3RlbC1wYXJ0aWN1bGllci1wYXJpcy03NTAwNi8iIHRpdGxlPSJFc3RpbWVyIHZvdHJlIGJpZW4gc3VyIFBhcmlzIiBjbGFzcz0iIj5Fc3RpbWF0aW9uPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvcGxhbi1tZWRpYS1hY3R1YWxpdGUtYXNzYXMtaW1tb2JpbGllci8iIHRpdGxlPSJBY3R1YWxpdMOpcyBBc3NhcyBpbW1vYmlsaWVyIiBjbGFzcz0iIj5QbGFuIG3DqWRpYTwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iL2JpZW5zLXZlbmR1cy1hcHBhcnRlbWVudC1tYWlzb24tYXNzYXMtaW1tb2JpbGllci1wYXJpcy03NTAwNi8iIHRpdGxlPSJCaWVucyB2ZW5kdXMgcGFyIEFzc2FzIGltbW9iaWxpZXIiIGNsYXNzPSIiPk5vcyB2ZW50ZXM8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9ob21lLXN0YWdpbmctYXNzYXMtaW1tb2JpbGllci1wYXJpcy8iIHRpdGxlPSJIb21lIFN0YWdpbmcgQXNzYXMgaW1tb2JpbGllciIgY2xhc3M9IiI+SG9tZSBzdGFnaW5nPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvY29udGFjdC1hZ2VuY2UtaW1tb2JpbGllcmUtYXNzYXMtaW1tb2JpbGllci8iIHRpdGxlPSJDb250YWN0ZXogbOKAmWFnZW5jZSBpbW1vYmlsacOocmUgQXNzYXMgaW1tb2JpbGllciIgY2xhc3M9IiI+Tm91cyBjb250YWN0ZXI8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8c3BhbiBjbGFzcz0ibGFzdFNwYW4iPjwvc3Bhbj4KICAgIDwvdWw+CiAgICA8dWwgY2xhc3M9InNlY29uZE1lbnUiPgogICAgICAgIDxsaSBjbGFzcz0ibW90ZXVyX2hlYWRlciI+CiAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VsZWN0aW9uX2hlYWRlciI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9tYS1zZWxlY3Rpb24tYW5ub25jZXMtaW1tb2JpbGllcmVzLWFzc2FzLyIgdGl0bGU9IlPDqWxlY3Rpb25uZXIgYW5ub25jZSBpbW1vYmlsacOocmUiIGNsYXNzPSJzZWxlY3Rpb24iPgogICAgICAgICAgICAgICAgTWEgc8OpbGVjdGlvbiA6CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmJfc2VsZWN0aW9uIj4wPC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgPC91bD4KICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KPC9uYXY+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICQoJy5pY29fbWVudScpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQoJ2hlYWRlciA+IGRpdiBuYXYgdWwubWFpbk1lbnUnKS5zbGlkZVRvZ2dsZSgyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICBpZigkKCdzZWN0aW9uJykuaGVpZ2h0KCk+Mzg5KXsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnaGVhZGVyID4gZGl2IG5hdiB1bC5tYWluTWVudScpLmNzcygnaGVpZ2h0JywgJCgnc2VjdGlvbicpLmhlaWdodCgpKTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9KSgpOwogICAgfSk7Cjwvc2NyaXB0PgoKCgoKICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb19tZW51Ij48L3NwYW4+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iZm9ybV9oZWFkZXIiPgogICAgPGRpdj4KICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX2Nsb3NlX2hlYWRlciI+PC9zcGFuPgogICAgICAgIDxmb3JtIGlkPSJtb3RldXJfZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii92ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvIj4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJtdWx0aSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJnZW9fbXVsdGkiPlZpbGxlczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iZ2VvX211bHRpIiBuYW1lPSJnZW9fbXVsdGlbXSIgbXVsdGlwbGU9Im11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwNTtwYXJpcyIgPlBBUklTIC0gNzUwMDU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwNjtwYXJpcyIgPlBBUklTIC0gNzUwMDY8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAwNztwYXJpcyIgPlBBUklTIC0gNzUwMDc8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJGUjs3NTAxNDtwYXJpcyIgPlBBUklTIC0gNzUwMTQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJtdWx0aSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjYXRlZ29yeSI+VHlwZSBkZSBiaWVuPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImNhdGVnb3J5IiBuYW1lPSJjYXRlZ29yeVtdIiAgbXVsdGlwbGU9Im11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJBcHBhcnRtZW50IiA+QXBwYXJ0ZW1lbnQ8L29wdGlvbj4KICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9Im11bHRpIHN1cmZhY2UiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3VyZmFjZSIgaWQ9InN1cmZhY2VfbWluIiB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdXJmYWNlX21heCIgaWQ9InN1cmZhY2VfbWF4IiB2YWx1ZT0iIi8+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzdXJmYWNlIj5TdXBlcmZpY2llPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJzZWxlY3Rfc3VyZmFjZSIgbmFtZT0ic3VyZmFjZVtdIiBtdWx0aXBsZT0ibXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwLDUwIj4mbHNhcXVvOyA1MCBtwrI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNTAsMTAwIj41MCBtwrIgLSAxMDAgbcKyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwMCwxNTAiPjEwMCBtwrIgLSAxNTAgbcKyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjE1MCwyMDAiPjE1MCBtwrIgLSAyMDAgbcKyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMCwiPiZyc2FxdW87IDIwMCBtwrI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9Im11bHRpIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImNoYW1icmVzX211bHRpIj5OYnJlIGNoYW1icmVzPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImNoYW1icmVzX211bHRpIiBtdWx0aXBsZT0ibXVsdGlwbGUiIG5hbWU9ImNoYW1icmVzW10iPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEiID4xPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMiIgPjI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIzIiA+Mzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjQiID40PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNSIgPjUgZXQgcGx1czwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0ibXVsdGkiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibWluIiBpZD0iYnVkZ2V0X21pbiIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1heCIgaWQ9ImJ1ZGdldF9tYXgiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJidWRnZXQiPkJ1ZGdldDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJzZWxlY3RfYnVkZ2V0IiBuYW1lPSJidWRnZXRbXSIgbXVsdGlwbGU9Im11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwLDUwMDAwMCI+JmxzYXF1bzsgNTAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI1MDAwMDAsODAwMDAwIj41MDAgMDAwIOKCrCAtIDgwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iODAwMDAwLDEyMDAwMDAiPjgwMCAwMDAg4oKsIC0gMSAyMDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEyMDAwMDAsMTUwMDAwMCI+MSAyMDAgMDAwIOKCrCAtIDEgNTAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxNTAwMDAwLDE4MDAwMDAiPjEgNTAwIDAwMCDigqwgLSAxIDgwMCAwMDAg4oKsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTgwMDAwMCwyNDAwMDAwIj4xIDgwMCAwMDAg4oKsIC0gMiA0MDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjI0MDAwMDAsMzAwMDAwMCI+MiA0MDAgMDAwIOKCrCAtIDMgMDAwIDAwMCDigqw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIzMDAwMDAwLCI+JnJzYXF1bzsgMyAwMDAgMDAwIOKCrDwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0icmVmZXJlbmNlIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJiaWVuX3JlZiI+UsOpZsOpcmVuY2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJiaWVuX3JlZiIgaWQ9ImJpZW5fcmVmIiBwbGFjZWhvbGRlcj0iUsOpZsOpcmVuY2UiIHZhbHVlPSIiIGNsYXNzPSJ2YWxldXIiLz4KICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icCIgaWQ9InAiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im5ld19yZXNlYXJjaCIgaWQ9Im5ld19yZXNlYXJjaCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlY2hhcmdlTVIiIGlkPSJyZWNoYXJnZU1SIiB2YWx1ZT0iMCIgLz4KICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJib3V0b24gc3VibWl0IiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJSZWNoZXJjaGVyIiAvPgogICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgIDwvZm9ybT4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL21vdGV1cl94aHJfbGlzdGNpdGllcy5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KLy88IVtDREFUQVsKCiAgICAvLyAkKCcjc2VsZWN0X2J1ZGdldCcpLm9uKCdjaGFuZ2UnLGZ1bmN0aW9uKCkgewoKICAgIC8vICAgICAgICAgdmFyIHZhbGV1ciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLnNlbGVjdF9idWRnZXQudmFsdWU7CiAgICAvLyAgICAgICAgIGlmICh2YWxldXIuaW5kZXhPZignLCcsMCkgPiAwKQogICAgLy8gICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICB2YXIgdGFidmFsID0gdmFsZXVyLnNwbGl0KCcsJyk7CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5idWRnZXRfbWluLnZhbHVlID0gdGFidmFsWzBdOwogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuYnVkZ2V0X21heC52YWx1ZSA9IHRhYnZhbFsxXTsKICAgIC8vICAgICAgICAgfQogICAgLy8gICAgICAgICBlbHNlCiAgICAvLyAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9taW4udmFsdWUgPSAnJzsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLmJ1ZGdldF9tYXgudmFsdWUgPSAnJzsKICAgIC8vICAgICAgICAgfQoKICAgIC8vIH0pOwoKCiAgICAvLyAkKCcuc3VyZmFjZSBpbnB1dCcpLm9uKCdjaGFuZ2UnLGZ1bmN0aW9uKCkgewogICAgLy8gICAgICAgICBjb25zb2xlLmxvZygnaWNpJyk7CiAgICAvLyAgICAgICAgIHZhciB2YWxldXIgPSB0aGlzLnZhbHVlOwogICAgLy8gICAgICAgICBjb25zb2xlLmxvZyh2YWxldXIpOwogICAgLy8gICAgICAgICBpZiAodmFsZXVyLmluZGV4T2YoJywnLDApID4gMCkKICAgIC8vICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgdmFyIHRhYnZhbCA9IHZhbGV1ci5zcGxpdCgnLCcpOwogICAgLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdGV1cl9mb3JtIikuc3VyZmFjZV9taW4udmFsdWUgPSB0YWJ2YWxbMF07CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5zdXJmYWNlX21heC52YWx1ZSA9IHRhYnZhbFsxXTsKICAgIC8vICAgICAgICAgfQogICAgLy8gICAgICAgICBlbHNlCiAgICAvLyAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3RldXJfZm9ybSIpLnN1cmZhY2VfbWluLnZhbHVlID0gJyc7CiAgICAvLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW90ZXVyX2Zvcm0iKS5zdXJmYWNlX21heC52YWx1ZSA9ICcnOwogICAgLy8gICAgICAgICB9CgogICAgLy8gfSk7CgogICAgdmFyIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAkKCcubW90ZXVyX2hlYWRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7CiAgICAgICAgaWYobW90ZXVyT3BlbiA9PSBmYWxzZSl7CgogICAgICAgICAgICBtb3RldXJPcGVuID0gdHJ1ZTsKCiAgICAgICAgICAgICQoJy5mb3JtX2hlYWRlcicpLnNsaWRlRG93bigyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOid2aXNpYmxlJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgbW90ZXVyT3BlbiA9IGZhbHNlOwoKICAgICAgICAgICAgJCgnLmZvcm1faGVhZGVyJykuc2xpZGVVcCgyMDAsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOidoaWRkZW4nCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgIH0KCiAgICB9KTsKCiAgICAkKCcuaWNvX2Nsb3NlX2hlYWRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7CgogICAgICAgIG1vdGV1ck9wZW4gPSBmYWxzZTsKCiAgICAgICAgJCgnLmZvcm1faGVhZGVyJykuc2xpZGVVcCgyMDApOwoKICAgIH0pOwoKICAgICQoJyNnZW9fbXVsdGknKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICdMb2NhbGlzYXRpb24nLAogICAgICAgIGNvdW50U2VsZWN0ZWQ6JycsCiAgICAgICAgbm9NYXRjaGVzRm91bmQ6JycsCiAgICAgICAgYWxsU2VsZWN0ZWQ6ICcnLAogICAgICAgIHNlbGVjdEFsbDogJycKICAgIH0pOwoKICAgICAkKCcjZ2VvX3NlY3RldXInKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICJTZWN0ZXVyIiwKICAgICAgICBjb3VudFNlbGVjdGVkOicnLAogICAgICAgIG5vTWF0Y2hlc0ZvdW5kOicnLAogICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICBzZWxlY3RBbGw6ICcnCiAgICB9KTsKCiAgICAkKCcjY2hhbWJyZXNfbXVsdGknKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICJOYnJlIGNoYW1icmVzIiwKICAgICAgICBjb3VudFNlbGVjdGVkOicnLAogICAgICAgIG5vTWF0Y2hlc0ZvdW5kOicnLAogICAgICAgIGFsbFNlbGVjdGVkOiAnJywKICAgICAgICBzZWxlY3RBbGw6ICcnCiAgICB9KTsKCiAgICAkKCcjY2F0ZWdvcnknKS5tdWx0aXBsZVNlbGVjdCh7CiAgICAgICAgcGxhY2Vob2xkZXI6ICJUeXBlIGRlIGJpZW4iLAogICAgICAgIGNvdW50U2VsZWN0ZWQ6JycsCiAgICAgICAgbm9NYXRjaGVzRm91bmQ6JycsCiAgICAgICAgYWxsU2VsZWN0ZWQ6ICcnLAogICAgICAgIHNlbGVjdEFsbDogJycKICAgIH0pOwoKICAgIC8vICAKICAgIChmdW5jdGlvbigpewogICAgICAgIHZhciBmbkNoZWNrID0gZnVuY3Rpb24obWluVmFsLG1heFZhbCl7CiAgICAgICAgICAgIGlmICgobWluVmFsID09IG51bGwgfHwgbWluVmFsLmxlbmd0aCA9PSAwKQogICAgICAgICAgICAgICAgJiYgKG1heFZhbCA9PSBudWxsIHx8IG1heFZhbC5sZW5ndGggPT0gMCkpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHZhciBvYmpTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0X3N1cmZhY2UnKTsKICAgICAgICAgICAgdmFyIHRvU2VsZWN0cyA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ialNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgIHZhciBzcGxpdFZhbCA9IG9ialNlbGVjdC5vcHRpb25zW2ldLnZhbHVlLnNwbGl0KC8sLyk7CiAgICAgICAgICAgICAgICBpZiAoKG1pblZhbCA9PSBudWxsIHx8IG1pblZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFswXSkgPj0gcGFyc2VJbnQobWluVmFsKSkKICAgICAgICAgICAgICAgICAgICAmJiAobWF4VmFsID09IG51bGwgfHwgbWF4VmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzFdKSA8PSBwYXJzZUludChtYXhWYWwpKSl7CiAgICAgICAgICAgICAgICAgICAgb2JqU2VsZWN0Lm9wdGlvbnNbaV0uc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHRvU2VsZWN0cy5wdXNoKG9ialNlbGVjdC5vcHRpb25zW2ldLnZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdG9TZWxlY3RzOwogICAgICAgIH0KICAgICAgICBmbkNoZWNrKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnN1cmZhY2VfbWluLnZhbHVlLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnN1cmZhY2VfbWF4LnZhbHVlKTsKICAgICAgICAvLyAgCiAgICAgICAgJCgnI3NlbGVjdF9zdXJmYWNlJykubXVsdGlwbGVTZWxlY3QoewogICAgICAgICAgICBwbGFjZWhvbGRlcjogIlN1cGVyZmljaWUiLAogICAgICAgICAgICBzZWxlY3RBbGw6ICcnLAogICAgICAgICAgICBhbGxTZWxlY3RlZDogJycsCiAgICAgICAgICAgIGNvdW50U2VsZWN0ZWQ6IGZhbHNlLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAgICAgdmFyIG9ialNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3Rfc3VyZmFjZScpOwogICAgICAgICAgICAgICAgdmFyIG1pblZhbCA9ICcnOwogICAgICAgICAgICAgICAgdmFyIG1heFZhbCA9ICcnOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpTZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9ialNlbGVjdC5vcHRpb25zW2ldLnNlbGVjdGVkKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGl0VmFsID0gb2JqU2VsZWN0Lm9wdGlvbnNbaV0udmFsdWUuc3BsaXQoLywvKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pblZhbCA9PSBudWxsIHx8IG1pblZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFswXSkgPCBwYXJzZUludChtaW5WYWwpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluVmFsID0gc3BsaXRWYWxbMF07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGxpdFZhbFsxXS5sZW5ndGggPT0gMCB8fCBtYXhWYWwgPT0gbnVsbCB8fCBtYXhWYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMV0pID4gcGFyc2VJbnQobWF4VmFsKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFZhbCA9IHNwbGl0VmFsWzFdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQoJyNtb3RldXJfZm9ybSBpbnB1dFtuYW1lPSJzdXJmYWNlIl0nKS52YWwobWluVmFsKTsKICAgICAgICAgICAgICAgICQoJyNtb3RldXJfZm9ybSBpbnB1dFtuYW1lPSJzdXJmYWNlX21heCJdJykudmFsKG1heFZhbCk7CiAgICAgICAgICAgICAgICAvLyAgCiAgICAgICAgICAgICAgICAkKCcjc2VsZWN0X3N1cmZhY2UnKS5tdWx0aXBsZVNlbGVjdCgnc2V0U2VsZWN0cycsZm5DaGVjayhtaW5WYWwsbWF4VmFsKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pKCk7CgogICAgLy8gIAogICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGZuQ2hlY2sgPSBmdW5jdGlvbihtaW5WYWwsbWF4VmFsKXsKICAgICAgICAgICAgaWYgKChtaW5WYWwgPT0gbnVsbCB8fCBtaW5WYWwubGVuZ3RoID09IDApCiAgICAgICAgICAgICAgICAmJiAobWF4VmFsID09IG51bGwgfHwgbWF4VmFsLmxlbmd0aCA9PSAwKSkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgdmFyIG9ialNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3RfYnVkZ2V0Jyk7CiAgICAgICAgICAgIHZhciB0b1NlbGVjdHMgPSBbXTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpTZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIgc3BsaXRWYWwgPSBvYmpTZWxlY3Qub3B0aW9uc1tpXS52YWx1ZS5zcGxpdCgvLC8pOwogICAgICAgICAgICAgICAgaWYgKChtaW5WYWwgPT0gbnVsbCB8fCBtaW5WYWwubGVuZ3RoID09IDAgfHwgcGFyc2VJbnQoc3BsaXRWYWxbMF0pID49IHBhcnNlSW50KG1pblZhbCkpCiAgICAgICAgICAgICAgICAgICAgJiYgKG1heFZhbCA9PSBudWxsIHx8IG1heFZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFsxXSkgPD0gcGFyc2VJbnQobWF4VmFsKSkpewogICAgICAgICAgICAgICAgICAgIG9ialNlbGVjdC5vcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB0b1NlbGVjdHMucHVzaChvYmpTZWxlY3Qub3B0aW9uc1tpXS52YWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRvU2VsZWN0czsKICAgICAgICB9CiAgICAgICAgZm5DaGVjayhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5idWRnZXRfbWluLnZhbHVlLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLmJ1ZGdldF9tYXgudmFsdWUpOwogICAgICAgIC8vICAKICAgICAgICAkKCcjc2VsZWN0X2J1ZGdldCcpLm11bHRpcGxlU2VsZWN0KHsKICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJCdWRnZXQiLAogICAgICAgICAgICBzZWxlY3RBbGw6ICcnLAogICAgICAgICAgICBhbGxTZWxlY3RlZDogJycsCiAgICAgICAgICAgIGNvdW50U2VsZWN0ZWQ6IGZhbHNlLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgLy8gIAogICAgICAgICAgICAgICAgdmFyIG9ialNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3RfYnVkZ2V0Jyk7CiAgICAgICAgICAgICAgICB2YXIgbWluVmFsID0gJyc7CiAgICAgICAgICAgICAgICB2YXIgbWF4VmFsID0gJyc7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ialNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICBpZiAob2JqU2VsZWN0Lm9wdGlvbnNbaV0uc2VsZWN0ZWQpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXRWYWwgPSBvYmpTZWxlY3Qub3B0aW9uc1tpXS52YWx1ZS5zcGxpdCgvLC8pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluVmFsID09IG51bGwgfHwgbWluVmFsLmxlbmd0aCA9PSAwIHx8IHBhcnNlSW50KHNwbGl0VmFsWzBdKSA8IHBhcnNlSW50KG1pblZhbCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5WYWwgPSBzcGxpdFZhbFswXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwbGl0VmFsWzFdLmxlbmd0aCA9PSAwIHx8IG1heFZhbCA9PSBudWxsIHx8IG1heFZhbC5sZW5ndGggPT0gMCB8fCBwYXJzZUludChzcGxpdFZhbFsxXSkgPiBwYXJzZUludChtYXhWYWwpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4VmFsID0gc3BsaXRWYWxbMV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJCgnI21vdGV1cl9mb3JtIGlucHV0W25hbWU9Im1pbiJdJykudmFsKG1pblZhbCk7CiAgICAgICAgICAgICAgICAkKCcjbW90ZXVyX2Zvcm0gaW5wdXRbbmFtZT0ibWF4Il0nKS52YWwobWF4VmFsKTsKICAgICAgICAgICAgICAgIC8vICAKICAgICAgICAgICAgICAgICQoJyNzZWxlY3RfYnVkZ2V0JykubXVsdGlwbGVTZWxlY3QoJ3NldFNlbGVjdHMnLGZuQ2hlY2sobWluVmFsLG1heFZhbCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KSgpOwoKCiAgICBtb3RldXJfeGhyX2xpc3RjaXRpZXMoImdlb19zZWN0ZXVyO3RyYW5zYWM7dHlwZV9pbW1vO2FkZHJlc3NfZGVwYXJ0ZW1lbnQ7YWRkcmVzc19wYXlzIiwgdHJ1ZSwgIiIpOwoKICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CgoJCS8vYnVkZ2V0CiAgICAgICAgLy8gdmFyIGJ1ZGdldF9taW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5idWRnZXRfbWluLnZhbHVlOwogICAgICAgIC8vIHZhciBidWRnZXRfbWF4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGV1cl9mb3JtJykuYnVkZ2V0X21heC52YWx1ZTsKICAgICAgICAvLyBpZiAoYnVkZ2V0X21pbiA9PSAnJykgYnVkZ2V0X21pbiA9ICcwJzsKICAgICAgICAvLyB2YXIgdmFsZXVyID0gYnVkZ2V0X21pbiArICcsJyArIGJ1ZGdldF9tYXg7CiAgICAgICAgLy8gaWYgKGJ1ZGdldF9taW4gIT0gJzAnIHx8IGJ1ZGdldF9tYXggIT0gJycpCiAgICAgICAgLy8gewogICAgICAgIC8vICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90ZXVyX2Zvcm0nKS5zZWxlY3RfYnVkZ2V0LnZhbHVlID0gdmFsZXVyOwogICAgICAgIC8vIH07CgogICAgICAgIC8vc3VyZmFjZQogICAgICAgIC8vIHZhciBzdXJmYWNlX21pbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnN1cmZhY2VfbWluLnZhbHVlOwogICAgICAgIC8vIHZhciBzdXJmYWNlX21heCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnN1cmZhY2VfbWF4LnZhbHVlOwogICAgICAgIC8vIGlmIChzdXJmYWNlX21pbiA9PSAnJykgc3VyZmFjZV9taW4gPSAnMCc7CiAgICAgICAgLy8gdmFyIHZhbGV1ciA9IHN1cmZhY2VfbWluICsgJywnICsgc3VyZmFjZV9tYXg7CiAgICAgICAgLy8gaWYgKHN1cmZhY2VfbWluICE9ICcwJyB8fCBzdXJmYWNlX21heCAhPSAnJykKICAgICAgICAvLyB7CiAgICAgICAgLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RldXJfZm9ybScpLnNlbGVjdF9zdXJmYWNlLnZhbHVlID0gdmFsZXVyOwogICAgICAgIC8vIH07CgogICAgICAgIGlmKCQoJyN0eXBlIG9wdGlvbicpLnNpemUoKTwzKXsKICAgICAgICAgICAgJCgnI3R5cGUgb3B0aW9uOm50aC1jaGlsZCgyKScpLmF0dHIoInNlbGVjdGVkIiwic2VsZWN0ZWQiKTsKICAgICAgICB9OwoKICAgICAgICBpZigiYW5ub25jZXMiPT0iYW5ub25jZXMiKXsKICAgICAgICAgICAgaWYoImRlZmF1bHQiPT0iY29ldXIiKXsKICAgICAgICAgICAgICAgICQoJyNtb3RldXJfZm9ybScpLmF0dHIoJ2FjdGlvbicsJy92ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvJyk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJCgnbW90ZXVyX2Zvcm0nKS5hdHRyKCdhY3Rpb24nLCcvYW5ub25jZS12ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvJyk7CiAgICAgICAgICAgIH0KICAgICAgIH1lbHNlewogICAgICAgICAgICAkKCdtb3RldXJfZm9ybScpLmF0dHIoJ2FjdGlvbicsJy92ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvJyk7CiAgICAgICB9CiAgICB9KTsKCi8vXV0+Cjwvc2NyaXB0PgoKPC9oZWFkZXI+CgoKCgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9qcy9qcXVlcnkuamNhcm91c2VsLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vanMvcGhvdG9zd2lwZS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvdGhlbWUvX3NpdGVTVE8xNTA2LmFzc2FzaW1tL2pzL3Bob3Rvc3dpcGUtdWktZGVmYXVsdC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvbWFqX3NlbGVjdGlvbi5qcyI+PC9zY3JpcHQ+CgogICAgPHNlY3Rpb24gaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9Qcm9kdWN0IiBpZD0iYW5ub25jZV9wcm9maWwiPgogICAgICAgIDxkaXYgY2xhc3M9ImxpbmtfYmFjayB0b3AiPgogICAgICAgIDwvZGl2PgoJCTxoMSBpdGVtcHJvcD0ibmFtZSI+VmVudGUgQXBwYXJ0ZW1lbnQgUGFyaXMgMTQgU09VUyBPRkZSRSAtIEJPVUxBUkQgLSBEQUdVRVJSRTwvaDE+CiAgICAgICAgPGRpdiBjbGFzcz0iZGlhcG9yYW1hX3RodW1icyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpYXBvcmFtYV9wcm9maWwiIGRhdGEtY3ljbGUtcGFnZXItdGVtcGxhdGU9IiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ic3BhY2VyQmxvY2tlciBhdXRvU2NhbGUiIHNyYz0iL3RoZW1lL19zaXRlU1RPMTUwNi5hc3Nhc2ltbS9pbWFnZXMvc3BhY2VyLnBuZyIgYWx0PSIiLz4KCQkJCQk8aW1nIGNsYXNzPSJhdXRvU2NhbGUiIGl0ZW1wcm9wPSJpbWFnZSIgc3JjPSIvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDAtMjAxOS0xMS0yOC0wMTA2LmpwZyIgYWx0PSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCkiIHRpdGxlPSJhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCkiLz48c3BhbiBjbGFzcz0idmVydGljYWxfY2VudGVyIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRodW1ic19jb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iamNhcm91c2VsLXByZXYgaW5hY3RpdmUgaWNvX2RldGFpbF9wcmV2Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3ljbGUiIGRhdGEtamNhcm91c2VsPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGh1bWJzIGN5Y2xlLXBhZ2VyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InNwYWNlckJsb2NrZXIgYXV0b1NjYWxlIiBzcmM9Ii90aGVtZS9fc2l0ZVNUTzE1MDYuYXNzYXNpbW0vaW1hZ2VzL3NwYWNlci5wbmciIGFsdD0iIi8+CgkJCQkJCQkJCTxpbWcgY2xhc3M9ImF1dG9TY2FsZSIgaXRlbXByb3A9ImltYWdlIiBzcmM9Ii9kYXRhcy9iaWVucy9pbWFnZXMvMjM4LzIzOF8wMC0yMDE5LTExLTI4LTAxMDYuanBnIiBhbHQ9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIgdGl0bGU9ImFwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqY2Fyb3VzZWwtbmV4dCBpbmFjdGl2ZSBpY29fZGV0YWlsX25leHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgoJCQkvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgkJCS8vICBBZGRMb2FkRXZlbnQKCQkJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJCQlmdW5jdGlvbiBBZGRMb2FkRXZlbnQoZnVuYykgewoJCQkJdmFyIG9sZG9ubG9hZCA9IHdpbmRvdy5vbmxvYWQ7CgkJCQlpZiAodHlwZW9mIHdpbmRvdy5vbmxvYWQgIT0gJ2Z1bmN0aW9uJykKCQkJCXsgd2luZG93Lm9ubG9hZCA9IGZ1bmM7IH0KCQkJCWVsc2UgewoJCQkJCXdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHsKCQkJCQkJaWYgKG9sZG9ubG9hZCkKCQkJCQkJeyBvbGRvbmxvYWQoKTsgfQoJCQkJCQlmdW5jKCk7CgkJCQkJfQoJCQkJfQoJCQl9CgogICAgICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAgICAgICAgICAgICAgICAvKioqKioqKioqKlBVVCBUSEUgUkFUSU8gMy8yIE9OIERJQVBPIEFORCBUSFVNQlMqKioqKioqKioqKioqKioqKiovCiAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgkJCQkoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgdyA9ICQoJy5kaWFwb3JhbWFfcHJvZmlsJykud2lkdGgoKS8xLjU7CgogICAgICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6dysncHgnCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICQoJy50aHVtYnNfY29udGFpbmVyJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6dysncHgnCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIC8vSU5TVEFOQ0UgRElBUE9SQU1BIEZJQ0hFIEJJRU4KICAgICAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzID4gZGl2ID4gYSBpbWcnKSk7CgogICAgICAgICAgICAgICAgfSkoKTsKCgogICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jeWNsZSh7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzOic+IGRpdi5zbGlkZScsCiAgICAgICAgICAgICAgICAgICAgcGFnZXI6Jy5jeWNsZS1wYWdlcicsCiAgICAgICAgICAgICAgICAgICAgbWFudWFsU3BlZWQ6NDAwLAogICAgICAgICAgICAgICAgICAgIGZ4OiAnZmFkZScsCiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6MjAwMCwKICAgICAgICAgICAgICAgICAgICBzd2lwZTp0cnVlCiAgICAgICAgICAgICAgICB9KTsKCgkJCQkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgkJCQkvKioqKioqKkFERCBESUFQTyAxU1QgU0xJREUgVEhFTiBSRVNUIE9GIFRIRU0gQUZURVIgTE9BRCoqKioqKioqKiovCgkJCQkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgkJCQkoZnVuY3Rpb24oKXsKCgkJCQkJdmFyIHNsaWRlcyA9IFtdOwoKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDAtMjAxOS0xMS0yOC0wMTA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDEtMjAxOS0xMS0yOC0wMTA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDItMjAxOS0xMS0yOC0wMTA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDMtMjAxOS0xMS0yOC0wMTA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDQtMjAxOS0xMS0yOC0wMTA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDUtMjAxOS0xMS0yOC0wMTA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDYtMjAxOS0xMS0yOC0wMTA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIiB9KTsKCQkJCQkJCXNsaWRlcy5wdXNoKHsgc3JjOiIvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDctMjAxOS0xMS0yOC0wMTA2LmpwZyIsIGFsdDoiYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpIiB9KTsKCgkJCQkJaWYoc2xpZGVzLmxlbmd0aCA+IDApewoJCQkJCQlzbGlkZXMuc2hpZnQoKTsKCQkJCQl9CgoJCQkJCWZ1bmN0aW9uIGltZ1ByZWxvYWQoc2xpZGVzLCBpZHgsIGNhbGxiYWNrKXsKCgkJCQkJCXZhciB0ZW1wSW1nID0gbmV3IEltYWdlKCk7CgkJCQkJCXZhciBPYmpTbGlkZSA9IHNsaWRlc1tpZHhdOwoJCQkJCQlpZihPYmpTbGlkZSA9PSBudWxsKXsKCQkJCQkJCXJldHVybjsKCQkJCQkJfQoKCQkJCQkJJCh0ZW1wSW1nKS5sb2FkKGZ1bmN0aW9uKCl7CgkJCQkJCQl2YXIgbmV3U2xpZGUgPSAnPGRpdiBjbGFzcz0ic2xpZGUiIGRhdGEtY3ljbGUtcGFnZXItdGVtcGxhdGU9IjxkaXY+PGRpdj48c3Bhbj48L3NwYW4+PGltZyBjbGFzcz1cJ3NwYWNlckJsb2NrZXJcJyBzcmM9XCcvdGhlbWUvX2RlZmF1bHQvaW1hZ2VzL3NwYWNlci5wbmdcJyBhbHQ9XCcjXCcgLz48aW1nIGNsYXNzPVwnYXV0b1NjYWxlXCcgYWx0PVwnJytPYmpTbGlkZS5hbHQrJ1wnIHNyYz1cJycrT2JqU2xpZGUuc3JjKydcJy8+PC9kaXY+PC9kaXY+Ij48aW1nIGNsYXNzPVwnc3BhY2VyQmxvY2tlclwnIHNyYz1cJy90aGVtZS9fZGVmYXVsdC9pbWFnZXMvc3BhY2VyLnBuZ1wnIGFsdD1cJyNcJyAvPjxpbWcgaXRlbXByb3A9ImltYWdlIiBzcmM9IicrT2JqU2xpZGUuc3JjKyciIGFsdD0iJytPYmpTbGlkZS5hbHQrJyIvPjxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbF9jZW50ZXIiPjwvc3Bhbj48L2Rpdj4nOwoJCQkJCQkJJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jeWNsZSgnYWRkJywgbmV3U2xpZGUpOwoJCQkJCQkJSW1hZ2VBdXRvU2NhbGUoJCgnLnRodW1icyBpbWcnKSk7CgkJCQkJCQkvLyAgZ28gbmV4dAoJCQkJCQkJaWYgKGlkeCArIDEgPCBzbGlkZXMubGVuZ3RoKXsKCQkJCQkJCQlpbWdQcmVsb2FkKHNsaWRlcywgaWR4ICsgMSwgY2FsbGJhY2spOwoJCQkJCQkJfQoJCQkJCQkJZWxzZSB7CgkJCQkJCQkJaWYgKGNhbGxiYWNrICE9IG51bGwpewoJCQkJCQkJCQljYWxsYmFjaygpOwoJCQkJCQkJCX0KCQkJCQkJCX0KCQkJCQkJfSk7CgoJCQkJCQl0ZW1wSW1nLnNyYyA9IE9ialNsaWRlLnNyYzsKCQkJCQl9CgoJCQkJCUFkZExvYWRFdmVudChmdW5jdGlvbigpewoKCQkJCQkJaW1nUHJlbG9hZChzbGlkZXMsMCwgZnVuY3Rpb24oKXsKCgkJCQkJCQkkKCcudGh1bWJzJykuYWRkQ2xhc3MoJ2N5Y2xlLXBhZ2VyJyk7CgkJCQkJCQlJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzIGltZycpKTsKCgkJCQkJCQlpZiAoJCgnLnRodW1icyA+IGRpdicpLmxlbmd0aCA+IDQpIHsKCgkJCQkJCQkJJCgnLmN5Y2xlJykuYWRkQ2xhc3MoJ2pjYXJvdXNlbC1tYW4nKTsKCQkJCQkJCQkkKCcuamNhcm91c2VsLW1hbicpLmpjYXJvdXNlbCh7CgkJCQkJCQkJCXZlcnRpY2FsOiB0cnVlCgkJCQkJCQkJfSk7CgoJCQkJCQkJCS8qKioqQ09OVFJPTCBCVE4gTkVYVCBQUkVWIENBUk9VU0VMKioqKi8KCgkJCQkJCQkJJCgnLmpjYXJvdXNlbC1wcmV2Jykub24oJ2pjYXJvdXNlbGNvbnRyb2w6YWN0aXZlJywgZnVuY3Rpb24oKSB7CgkJCQkJCQkJCSQodGhpcykucmVtb3ZlQ2xhc3MoJ2luYWN0aXZlJyk7CgkJCQkJCQkJfSkKCQkJCQkJCQkub24oJ2pjYXJvdXNlbGNvbnRyb2w6aW5hY3RpdmUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJJCh0aGlzKS5hZGRDbGFzcygnaW5hY3RpdmUnKTsKCQkJCQkJCQl9KQoJCQkJCQkJCS5qY2Fyb3VzZWxDb250cm9sKHsKCQkJCQkJCQkJdGFyZ2V0OiAnLT0xJwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkkKCcuamNhcm91c2VsLW5leHQnKS5vbignamNhcm91c2VsY29udHJvbDphY3RpdmUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJJCh0aGlzKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTsKCQkJCQkJCQl9KQoJCQkJCQkJCS5vbignamNhcm91c2VsY29udHJvbDppbmFjdGl2ZScsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCQkkKHRoaXMpLmFkZENsYXNzKCdpbmFjdGl2ZScpOwoJCQkJCQkJCX0pCgkJCQkJCQkJLmpjYXJvdXNlbENvbnRyb2woewoJCQkJCQkJCQl0YXJnZXQ6ICcrPTEnCgkJCQkJCQkJfSk7CgoJCQkJCQkJCS8qKioqQ09OVFJPTCBDQVJPVVNFTCBWSUEgU0xJREUgRElBUE9SQU1BKioqKi8KCgkJCQkJCQkJJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5vbignY3ljbGUtaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbiggZXZlbnQsIG9wdHMgKSB7CgkJCQkJCQkJCSQoJy50aHVtYnMgPiBkaXYnKS5yZW1vdmVDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJykuZXEob3B0cy5jdXJyU2xpZGUpLmFkZENsYXNzKCdjeWNsZS1wYWdlci1hY3RpdmUnKTsKCQkJCQkJCQl9KTsKCgkJCQkJCQkJJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5vbignY3ljbGUtYmVmb3JlJywgZnVuY3Rpb24oIGV2ZW50LCBvcHRzICkgewoJCQkJCQkJCQkkKCcudGh1bWJzID4gZGl2JykucmVtb3ZlQ2xhc3MoJ2N5Y2xlLXBhZ2VyLWFjdGl2ZScpLmVxKG9wdHMubmV4dFNsaWRlKS5hZGRDbGFzcygnY3ljbGUtcGFnZXItYWN0aXZlJyk7CgkJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbWFuJykuamNhcm91c2VsKCdzY3JvbGwnLCBvcHRzLm5leHRTbGlkZSk7CgkJCQkJCQkJfSk7CgoJCQkJCQkJCS8qKioqU0VUIFVQIENBUk9VU0VMIEFORCBISVMgQ0hJTERSRU4gV0lEVEgqKioqLwoKCQkJCQkJCQl2YXIgeCA9ICQoJy5qY2Fyb3VzZWwtbWFuJykuaGVpZ2h0KCkvNDsKCQkJCQkJCQl2YXIgeSA9ICQoJy50aHVtYnMgPiBkaXYnKS5sZW5ndGg7CgoJCQkJCQkJCSQoJy5qY2Fyb3VzZWwtbWFuIC50aHVtYnMnKS5jc3MoewoJCQkJCQkJCQknaGVpZ2h0Jzp4KnkrJ3B4JwoJCQkJCQkJCX0pOwoKCQkJCQkJCQkkKCcudGh1bWJzID4gZGl2JykuY3NzKHsKCQkJCQkJCQkJJ2hlaWdodCc6MTAwL3krJyUnCgkJCQkJCQkJfSk7CgoJCQkJCQkJfQoKCQkJCQkJfSk7CgkJCQkJfSk7CgoJCQkJfSkoKTsKCiAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgkJCQkvKioqKioqKioqKioqKklOU1RBTkNFIE9QRU5TV0lQRSBERVRBSUwgUEhPVE8qKioqKioqKioqKioqKioqKioqKiovCgkJCQkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgICAgICAgICAgICAgICB2YXIgb3BlblBob3RvU3dpcGUgPSBmdW5jdGlvbiAoaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcHN3cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHN3cCcpWzBdOwoKICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSBbXTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDAtMjAxOS0xMS0yOC0wMTA2LmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjM4LzIzOF8wMS0yMDE5LTExLTI4LTAxMDYuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy8yMzgvMjM4XzAyLTIwMTktMTEtMjgtMDEwNi5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDMtMjAxOS0xMS0yOC0wMTA2LmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjM4LzIzOF8wNC0yMDE5LTExLTI4LTAxMDYuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7IHNyYzonL2RhdGFzL2JpZW5zL2ltYWdlcy8yMzgvMjM4XzA1LTIwMTktMTEtMjgtMDEwNi5qcGcnLCB0aXRsZTonYXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGVuIHZlbnRlIHN1ciBQQVJJUyAoNzUwMTQpJyx3OicnLGg6Jyd9KTsKICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgc3JjOicvZGF0YXMvYmllbnMvaW1hZ2VzLzIzOC8yMzhfMDYtMjAxOS0xMS0yOC0wMTA2LmpwZycsIHRpdGxlOidhcHBhcnRlbWVudCAzIHBpw6hjZXMgZW4gdmVudGUgc3VyIFBBUklTICg3NTAxNCknLHc6JycsaDonJ30pOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBzcmM6Jy9kYXRhcy9iaWVucy9pbWFnZXMvMjM4LzIzOF8wNy0yMDE5LTExLTI4LTAxMDYuanBnJywgdGl0bGU6J2FwcGFydGVtZW50IDMgcGnDqGNlcyBlbiB2ZW50ZSBzdXIgUEFSSVMgKDc1MDE0KScsdzonJyxoOicnfSk7CgogICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBmb2N1czogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGJnT3BhY2l0eTonMC45NScsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25TY3JvbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBzaG93QW5pbWF0aW9uRHVyYXRpb246IDMwMCwKICAgICAgICAgICAgICAgICAgICAgICAgaGlkZUFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsCiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FwdGlvbkVsOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVFbDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHBpbmNoVG9DbG9zZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25WZXJ0aWNhbERyYWc6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGdhbGxlcnkgPSBuZXcgUGhvdG9Td2lwZShwc3dwRWxlbWVudCwgUGhvdG9Td2lwZVVJX0RlZmF1bHQsIGl0ZW1zLCBvcHRpb25zKTsKCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5pbml0KCk7CiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5nb1RvKGluZGV4KTsKCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeS5saXN0ZW4oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5kaWFwb3JhbWFfcHJvZmlsJykuY3ljbGUoJ3Jlc3VtZScpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5vbiggJ2NsaWNrJywnZGl2JywgZnVuY3Rpb24oKXsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5kYXRhKCJjeWNsZS5vcHRzIikuc2xpZGVOdW0gLTE7CgogICAgICAgICAgICAgICAgICAgIG9wZW5QaG90b1N3aXBlKGluZGV4KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jeWNsZSgncGF1c2UnKTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vSU5TVEFOQ0UgRElBUE9SQU1BIEZJQ0hFIEJJRU4KICAgICAgICAgICAgICAgIEltYWdlQXV0b1NjYWxlKCQoJy50aHVtYnMgPiBkaXYgPiBhIGltZycpKTsKCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB3ID0gJCgnLmRpYXBvcmFtYV9wcm9maWwnKS53aWR0aCgpLzEuNTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLmRpYXBvcmFtYV9wcm9maWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgJCgnLnRodW1ic19jb250YWluZXInKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0Jzp3KydweCcKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9KSgpOwoKCQkJCWlmICgkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoID4gNCkgewoKCQkJCQkvKioqKlNFVCBVUCBDQVJPVVNFTCBBTkQgSElTIENISUxEUkVOIFdJRFRIKioqKi8KCgkJCQkJdmFyIHggPSAkKCcuamNhcm91c2VsLW1hbicpLmhlaWdodCgpLzQ7CgkJCQkJdmFyIHkgPSAkKCcudGh1bWJzID4gZGl2JykubGVuZ3RoOwoKCQkJCQkkKCcuamNhcm91c2VsLW1hbiAudGh1bWJzJykuY3NzKHsKCQkJCQkJJ2hlaWdodCc6eCp5KydweCcKCQkJCQl9KTsKCgkJCQkJJCgnLnRodW1icyA+IGRpdicpLmNzcyh7CgkJCQkJCSdoZWlnaHQnOjEwMC95KyclJwoJCQkJCX0pOwoKCQkJCX0KCiAgICAgICAgICAgICAgICBJbWFnZUF1dG9TY2FsZSgkKCcudGh1bWJzID4gZGl2ID4gYSBpbWcnKSk7CgogICAgICAgICAgICB9KTsKCiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGRpdiBjbGFzcz0iYW5ub25jZV9kZXRhaWwiPgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgIDxoMiBpdGVtc2NvcGUgaXRlbXByb3A9ImF2YWlsYWJsZUF0T3JGcm9tIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUGxhY2UiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPkxvY2FsaXNhdGlvbiA6IDxzcGFuIGl0ZW1wcm9wPSJhZGRyZXNzIj5QQVJJUzwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UXVhcnRpZXIgOiA8c3BhbiBpdGVtcHJvcD0iYWRkcmVzcyI+U09VUyBPRkZSRSAtIEJPVUxBUkQgLSBEQUdVRVJSRTwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgPHAgaXRlbXByb3A9ImRlc2NyaXB0aW9uIiBjbGFzcz0iZGVzY3JpcHRpZiI+REVORkVSVCBST0NIRVJFQVUgLSBEQUdVRVJSRSAtIFJVRSBCT1VMQVJEIC0gSW1tZXVibGUgc2VtaS1yw6ljZW50IGRlIHN0YW5kaW5nLCBhcHBhcnRlbWVudCAzIHBpw6hjZXMgZGUgNzUgbTIsIHRyYXZlcnNhbnQgRXN0L091ZXN0LCBWVUVTIERFR0FHRUVTIHN1ciBydWUgZXQgamFyZGluLCBhdSAyw6htZSDDqXRhZ2UgYXZlYyBhc2NlbnNldXIsIHBsYW4gdHLDqHMgZm9uY3Rpb25uZWwgYXZlYyBlbnRyw6llLCB2YXN0ZSBzw6lqb3VyIGRlIDI2bTIgZG9ubmFudCBzdXIgdW4gbGFyZ2UgYmFsY29uIGV4cG9zw6kgb3Vlc3QsIGN1aXNpbmUgYW3DqW5hZ8OpZSBldCDDqXF1aXDDqWUgc2VtaSBvdXZlcnRlLCAyIGNoYW1icmVzIGF1IGNhbG1lIGFic29sdSBzdXIgamFyZGluIGFyYm9yw6ksIHNhbGxlIGRlIGJhaW5zLCB0b2lsZXR0ZXMgc8OpcGFyw6llcywgZHJlc3NpbmcsIHBsYWNhcmRzLCBjYXZlLiBQYXJraW5nIGRhbnMgbCdpbW1ldWJsZSBlbiBzdXBwbMOpbWVudCDDoCAyNSAwMDAg4oKsRkFJLiBFWExVU0lWSVRFIEFzc2FzIEltbW9iaWxpZXIuPC9wPgogICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IEFycmF5KCdDZXR0ZSBhbm5vbmNlIGEgw6l0w6kgYWpvdXTDqWUgw6Agdm90cmUgc8OpbGVjdGlvbi4nLCdDZXR0ZSBhbm5vbmNlIGVzdCBkw6lqw6AgZGFucyB2b3RyZSBzw6lsZWN0aW9uLicpOwogICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkZXRhaWxfbGlua19vdXRpbHMiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImFqb3V0X3NlbGVjdGlvbiIgZGF0YS1iaWVuaWQ9IjIzOCIgaHJlZj0iIyIgdGl0bGU9IkFqb3V0ZXIgw6AgbWEgc8OpbGVjdGlvbiI+QWpvdXRlciDDoCBtYSBzw6lsZWN0aW9uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZW52b2lfYW1pIiBpZD0ic2VuZEZyaWVuZCIgZGF0YS1tYWlsLXN1YmplY3Q9IkplIHNvdWhhaXRlIHRlIG1vbnRyZXIgY2V0dGUgYW5ub25jZSIgZGF0YS1tYWlsLWJvZHk9IkJvbmpvdXIsIGonYWkgcGVuc8OpIHF1ZSBjZXR0ZSBhbm5vbmNlIHBvdXJyYWl0IHQnaW50w6lyZXNzZXIgOiAgaHR0cHM6Ly93d3cuYXNzYXNpbW1vYmlsaWVyLmNvbS9hbm5vbmNlLXZlbnRlLWxvZnQtaG90ZWwtcGFydGljdWxpZXItYXBwYXJ0ZW1lbnQtcGFyaXMtYXNzYXMtaW1tb2JpbGllci9yZWYtZHQxLTczNy92ZW50ZS1hcHBhcnRlbWVudC0zLXBpZWNlcy0yLWNoYW1icmVzLXBhcmlzLTc1MDE0LyIgaHJlZj0iIyIgdGl0bGU9IkVudm95ZXIgw6AgdW4gYW1pIj5FbnZveWVyIMOgIHVuIGFtaTwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNoYXJlX2J1dHRvbnMgYUxpa2UiIHRpdGxlPSJQYXJ0YWdlciBjZXR0ZSBvZmZyZSBzdXIgbGVzIHLDqXNlYXV4IHNvY2lhdXgiPlBhcnRhZ2VyIGNlIGxpZW48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImxpbmtfaW1wcmVzc2lvbiIgdGl0bGU9IkltcHJpbWVyIGxlIGTDqXRhaWwgZGUgY2UgYmllbiIgaHJlZj0iL2ltcHJlc3Npb24vZGV0YWlscy8yMzgvIiB0YXJnZXQ9Il9ibGFuayI+SW1wcmltZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0cmlnZ2VyX21lbnRpb24iIGhyZWY9Ii9tZW50aW9ucy1sZWdhbGVzLWFnZW5jZS1pbW1vYmlsaWVyZS1hc3Nhcy8iIHRpdGxlPSJJbmZvcm1hdGlvbnMganVyaWRpcXVlcyBBc3NhcyBpbW1vYmlsaWVyIj5Db25zdWx0ZXIgbGUgYmFyw6htZSBkZXMgaG9ub3JhaXJlczwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiAgICAgICAgICAgICAgICB2YXIgc2VuZEZyaWVuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZW5kRnJpZW5kJyk7CgogICAgICAgICAgICAgICAgdmFyIGJlZm9yZVNlbmRGcmllbmQgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIHNlbmRGcmllbmQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBiZWZvcmVTZW5kRnJpZW5kKTsKICAgICAgICAgICAgICAgICAgICB2YXIKICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLW1haWwtc3ViamVjdCcpLAogICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWFpbC1ib2R5JykKICAgICAgICAgICAgICAgICAgICA7CgogICAgICAgICAgICAgICAgICAgIGlmKHN1YmplY3QgIT09IG51bGwpIHN1YmplY3QgPSBlbmNvZGVVUklDb21wb25lbnQoc3ViamVjdCk7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBzdWJqZWN0ID0gJyc7CgogICAgICAgICAgICAgICAgICAgIGlmKGJvZHkgIT09IG51bGwpIGJvZHkgPSBlbmNvZGVVUklDb21wb25lbnQoYm9keSk7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBib2R5ID0gJyc7CgogICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdocmVmJywgJ21haWx0bzo/c3ViamVjdD0nICsgc3ViamVjdCArICcmYm9keT0nICsgYm9keSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGljaygpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmIChzZW5kRnJpZW5kICE9PSBudWxsKSBzZW5kRnJpZW5kLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYmVmb3JlU2VuZEZyaWVuZCk7CgogICAgICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAkKCcuc2hhcmVfYnV0dG9ucycpLm9uKCdjbGljaycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZvaWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQodm9pbGUpLmFwcGVuZFRvKCdib2R5JykuYWRkQ2xhc3MoJ2JveF9zaGFyZScpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Tm9kZTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnRpY2FsX2NlbnRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnRpY2FsX2NlbnRlcjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9zZV9zcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgICAgICAgICAkKG5ld05vZGUpLmFwcGVuZFRvKHZvaWxlKS5hcHBlbmQoJzxoMT5QYXJ0YWdlciBjZSBsaWVuPC9oMT4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgJChuZXdOb2RlMikuYXBwZW5kVG8obmV3Tm9kZSkuYXR0cignaWQnLCdzaGFyZW1lJykuYWRkQ2xhc3MoJ3NoYXJycmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCh2ZXJ0aWNhbF9jZW50ZXIpLmFwcGVuZFRvKHZvaWxlKS5hZGRDbGFzcygndmVydGljYWxfY2VudGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoY2xvc2Vfc3BhbikuYXBwZW5kVG8obmV3Tm9kZSkuYWRkQ2xhc3MoJ2Nsb3NlX3NoYXJlIGljb19jbG9zZScpOwogICAgICAgICAgICAgICAgICAgICAgICAkKHZlcnRpY2FsX2NlbnRlcjIpLmFwcGVuZFRvKG5ld05vZGUpLmFkZENsYXNzKCd2ZXJ0aWNhbF9jZW50ZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmJveF9zaGFyZScpLmZhZGVJbigzMDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3NoYXJlbWUnKS5zaGFycnJlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdpdHRlcjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWNlYm9vazogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGVQbHVzOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbnRlcmVzdDp0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbnRlcmVzdDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYTogJ2h0dHBzOi8vd3d3LmFzc2FzaW1tb2JpbGllci5jb20vJy5yZXBsYWNlKC9cLyQvLCAnJykgKyAnLycgKyAnL2RhdGFzL2JpZW5zL3RodW1icy8yMzgvMjM4XzAwLTIwMTktMTEtMjgtMDEwNi5qcGcnLnJlcGxhY2UoL15cLy8sICcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogICAnPHVsPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImZhY2Vib29rIj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fZmFjZWJvb2siPjwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkZhY2Vib29rPC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJ0d2l0dGVyIj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29fdHdpdHRlciI+PC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+VHdpdHRlcjwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iZ29vZ2xlcGx1cyI+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvX2dvb2dsZXBsdXMiPjwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkdvb2dsZSArPC9zcGFuPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJwaW50ZXJlc3QiPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb19waW50ZXJlc3QiPjwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlBpbnRlcmVzdDwvc3Bhbj5cblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxDdXJsOiAnJywgICAgLy8gIGRpc2FibGUgc2hhcnJyZS5waHAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZUhvdmVyOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZVRyYWNraW5nOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24oYXBpLCBvcHRpb25zKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGFwaS5lbGVtZW50KS5vbignY2xpY2snLCAnLnR3aXR0ZXInLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5vcGVuUG9wdXAoJ3R3aXR0ZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy5mYWNlYm9vaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLm9wZW5Qb3B1cCgnZmFjZWJvb2snKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChhcGkuZWxlbWVudCkub24oJ2NsaWNrJywgJy5nb29nbGVwbHVzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkub3BlblBvcHVwKCdnb29nbGVQbHVzJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYXBpLmVsZW1lbnQpLm9uKCdjbGljaycsICcucGludGVyZXN0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkub3BlblBvcHVwKCdwaW50ZXJlc3QnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keSxodG1sJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6J2hpZGRlbicKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcuY2xvc2Vfc2hhcmUnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmJveF9zaGFyZScpLmZhZGVPdXQoMzAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5LGh0bWwnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6J3Zpc2libGUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5ib3hfc2hhcmUnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCgogICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImludGVybG9jdXRldXIiIGl0ZW1wcm9wPSJzZWxsZXIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5Wb3RyZSBpbnRlcmxvY3V0ZXVyPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9ImxlZ2FsTmFtZSI+QVNTQVMgSW1tb2JpbGllcjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGl0ZW1wcm9wPSJsb2NhdGlvbiI+MTQ1LCBib3VsZXZhcmQgUmFzcGFpbCAtIDc1MDA2IFBhcmlzPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VMOpbCA6IDxzcGFuIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPjAxIDU2IDgxIDA4IDM4PC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX2RldGFpbCIgaWQ9ImNvbnRhY3RfYW5ub25jZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9ImFubm9uY2VfZm9ybSIgY2xhc3M9InZhbGlkYXRlX2Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvYW5ub25jZS12ZW50ZS1sb2Z0LWhvdGVsLXBhcnRpY3VsaWVyLWFwcGFydGVtZW50LXBhcmlzLWFzc2FzLWltbW9iaWxpZXIvcmVmLWR0MS03MzcvdmVudGUtYXBwYXJ0ZW1lbnQtMy1waWVjZXMtMi1jaGFtYnJlcy1wYXJpcy03NTAxNC8jY29udGFjdF9hbm5vbmNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxlZ2VuZD5EZW1hbmRlIGRlIHJlbnNlaWduZW1lbnRzPC9sZWdlbmQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaG9uZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IndlYnNpdGUiPlZldWlsbGV6IGxhaXNzZXIgbGEgdmFsZXVyIGluaXRpYWxlIGRlIGNlIGNoYW1wPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0id2Vic2l0ZSIgaWQ9IndlYnNpdGUiIHZhbHVlPSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX3R3b3Jvd3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGFzdF9uYW1lIj5Ob20gPHNwYW4+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJsYXN0X25hbWUiIHR5cGU9InRleHQiIG5hbWU9Imxhc3RfbmFtZSIgY2xhc3M9InJlcXVpcmVkIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9Imxhc3RfbmFtZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImZpcnN0X25hbWUiPlByw6lub20gPHNwYW4+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJmaXJzdF9uYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJmaXJzdF9uYW1lIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9ImZpcnN0X25hbWUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImVtYWlsIj5FbWFpbCA8c3Bhbj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImVtYWlsIiB0eXBlPSJ0ZXh0IiBuYW1lPSJlbWFpbCIgdmFsdWU9IiIgY2xhc3M9InJlcXVpcmVkIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNfcmVxdWlyZWRbXSIgdmFsdWU9ImVtYWlsIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icGhvbmUiPlTDqWzDqXBob25lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0icGhvbmUiIHR5cGU9InRleHQiIG5hbWU9InBob25lIiB2YWx1ZT0iIiBjbGFzcz0icmVxdWlyZWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHRhcmVhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImxhYmVsX21lc3NhZ2UtYW5ub25jZSIgZm9yPSJtZXNzYWdlIj5NZXNzYWdlIDxzcGFuPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9Im1lc3NhZ2UiIG5hbWU9Im1lc3NhZ2UiIGNsYXNzPSJyZXF1aXJlZCI+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19yZXF1aXJlZFtdIiB2YWx1ZT0ibWVzc2FnZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJob25leSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYjhqN2l1cDY1cWcxdjE1ZWNxNzBkOWk1bzAiPlZldWlsbGV6IGxhaXNzZXIgbGEgdmFsZXVyIGluaXRpYWxlIGRlIGNlIGNoYW1wPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYjhqN2l1cDY1cWcxdjE1ZWNxNzBkOWk1bzAiIGlkPSJiOGo3aXVwNjVxZzF2MTVlY3E3MGQ5aTVvMCIgdmFsdWU9ImI4ajdpdXA2NXFnMXYxNWVjcTcwZDlpNW8wIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaWQiIGlkPSJpZCIgdmFsdWU9IjIzOCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImJpZW5fcmVmIiBpZD0iYmllbl9yZWYiIHZhbHVlPSJEVDEtNzM3IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbmNlX2lkIiBpZD0iYWdlbmNlX2lkIiB2YWx1ZT0iMSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InN1YmplY3QiIGlkPSJzdWJqZWN0IiB2YWx1ZT0iQ29udGFjdEFubm9uY2UiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImJvdXRvbiBzdWJtaXQiIG5hbWU9InNlbmRfZW1haWwiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IkVudm95ZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJtYW5kYXRvcnlUeHQiPkxlcyBpbmZvcm1hdGlvbnMgcmVjdWVpbGxpZXMgc3VyIGNlIGZvcm11bGFpcmUgc29udCBlbnJlZ2lzdHImZWFjdXRlO2VzIGRhbnMgdW4gZmljaGllciBpbmZvcm1hdGlzJmVhY3V0ZTsgcGFyIGxhIHNvY2kmZWFjdXRlO3QmZWFjdXRlOyA8c3BhbiBjbGFzcz0iYWdlbmNlTmFtZSI+IEFnZW5jZSBOYW1lPC9zcGFuPiBwb3VyIGxhIGdlc3Rpb24gZXQgbGUgc3VpdmkgZGUgdm90cmUgZGVtYW5kZS4gQ29uZm9ybSZlYWN1dGU7bWVudCAmYWdyYXZlOyBsYSBsb2kgJmxhcXVvOyBpbmZvcm1hdGlxdWUgZXQgbGliZXJ0JmVhY3V0ZTtzICZyYXF1bzssIFZvdXMgcG91dmV6IGV4ZXJjZXIgdm90cmUgZHJvaXQgZCYjMzk7YWNjJmVncmF2ZTtzIGF1eCBkb25uJmVhY3V0ZTtlcyB2b3VzIGNvbmNlcm5hbnQgZXQgbGVzIGZhaXJlIHJlY3RpZmllciBlbiBjb250YWN0YW50IDogPHNwYW4gY2xhc3M9ImFnZW5jZU5hbWUiPiBBZ2VuY2UgTmFtZTwvc3Bhbj4sIENvcnJlc3BvbmRhbnQgSW5mb3JtYXRpcXVlIGV0IGxpYmVydCZlYWN1dGU7cywgPHNwYW4gY2xhc3M9ImFnZW5jZUFkZHJlc3MiPmFnZW5jZSBhZHJlc3NlPC9zcGFuPiBvdSAmYWdyYXZlOyA8YSBjbGFzcz0iYWdlbmNlTWFpbCIgaHJlZj0ibWFpbHRvOiI+YWdlbmNlIG1haWw8L2E+LCBlbiBwciZlYWN1dGU7Y2lzYW50IGRhbnMgbCZyc3F1bztvYmpldCBkdSBjb3VycmllciAmbGFxdW87IERyb2l0IGRlcyBwZXJzb25uZXMgJnJhcXVvOyBldCBlbiBqb2lnbmFudCBsYSBjb3BpZSBkZSB2b3RyZSBqdXN0aWZpY2F0aWYgZCZyc3F1bztpZGVudGl0JmVhY3V0ZTsuPC9hcnRpY2xlPgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJLy88IVtDREFUQVsKCgl2YXIgYWdlbmN5ID0gW107CgoJZnVuY3Rpb24gYWZmaWNoYWdlVHh0KGFycmF5QWdlbmN5KXsKICAgICAgICAkKCdhcnRpY2xlLm1hbmRhdG9yeVR4dCAuYWdlbmNlTmFtZScpLmVhY2goZnVuY3Rpb24oKXskKHRoaXMpLnRleHQoYXJyYXlBZ2VuY3lbMF0ubmFtZSk7fSk7CiAgICAgICAgJCgnYXJ0aWNsZS5tYW5kYXRvcnlUeHQgLmFnZW5jZUFkZHJlc3MnKS50ZXh0KGFycmF5QWdlbmN5WzBdLmFkZHJlc3MpOwogICAgICAgICQoJ2FydGljbGUubWFuZGF0b3J5VHh0IC5hZ2VuY2VNYWlsJykudGV4dChhcnJheUFnZW5jeVswXS5tYWlsKTsKICAgICAgICAkKCdhcnRpY2xlLm1hbmRhdG9yeVR4dCAuYWdlbmNlTWFpbCcpLmF0dHIoJ2hyZWYnLCdtYWlsdG86JythcnJheUFnZW5jeVswXS5tYWlsKTsKCiAgICAgICAgYWdlbmN5ID0gW107IC8vIG9uIHZpZGUgbGUgdGFibGVhdQoJfQoKCWZ1bmN0aW9uIGFnZW5jZU1hbnkoKXsKCQlhZ2VuY3kucHVzaCh7CgkJCW5hbWU6JCgnc2VsZWN0I2ZsZF9hZ2VuY2VfaWQgb3B0aW9uW3ZhbHVlPTFdJykuYXR0cignZGF0YS1uYW1lJyksIGFkZHJlc3M6JCgnc2VsZWN0I2ZsZF9hZ2VuY2VfaWQgb3B0aW9uW3ZhbHVlPTFdJykuYXR0cignZGF0YS1sb2NhbGlzYXRpb24nKSwgbWFpbDokKCdzZWxlY3QjZmxkX2FnZW5jZV9pZCBvcHRpb25bdmFsdWU9MV0nKS5hdHRyKCdkYXRhLW1haWwnKQoJCX0pOwoKCQlhZmZpY2hhZ2VUeHQoYWdlbmN5KTsKCgkJJCgnc2VsZWN0I2ZsZF9hZ2VuY2VfaWQnKS5vbignY2hhbmdlJyxmdW5jdGlvbigpewoJCQlhZ2VuY3kucHVzaCh7CgkJCQluYW1lOiQodGhpcykuY2hpbGRyZW4oIjpzZWxlY3RlZCIpLmF0dHIoJ2RhdGEtbmFtZScpLCBhZGRyZXNzOiQodGhpcykuY2hpbGRyZW4oIjpzZWxlY3RlZCIpLmF0dHIoJ2RhdGEtbG9jYWxpc2F0aW9uJyksIG1haWw6JCh0aGlzKS5jaGlsZHJlbigiOnNlbGVjdGVkIikuYXR0cignZGF0YS1tYWlsJykKCQkJfSk7CgkJCWFmZmljaGFnZVR4dChhZ2VuY3kpOwoJCX0pOwoJfQoKCS8vXV0+Cjwvc2NyaXB0PgoKCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCQkvLzwhW0NEQVRBWwoKCQlhZ2VuY3kucHVzaCh7CgkJCW5hbWU6IkFTU0FTIEltbW9iaWxpZXIgIiwgYWRkcmVzczoiMTQ1LCBib3VsZXZhcmQgUmFzcGFpbCA3NTAwNiBQYXJpcyIsIG1haWw6ImNvbnNlaWxAYXNzYXNpbW1vYmlsaWVyLmNvbSIKCQl9KTsKCgkJYWZmaWNoYWdlVHh0KGFnZW5jeSk7CgoJCS8vXV0+Cgk8L3NjcmlwdD4KCgoKCgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgPHNlY3Rpb24+CiAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJvZmZlcnMiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT2ZmZXIiIGNsYXNzPSJwcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGl0ZW1wcm9wPSJwcmljZSIgY2xhc3M9ImFubm9uY2VfcHJpY2UiPlByaXggOiA8c3Bhbj45NTAgMDAwICZldXJvOyA8L3NwYW4+PC9wPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZV9kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgICAgICBIb25vcmFpcmVzIGluY2x1cwogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpY2VfZGV0YWlsIHRhbGxNYXJnaW4gc2l6ZSI+OTIxIDUwMCAmZXVybzsgSG9ub3JhaXJlcyBleGNsdXM8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZV9kZXRhaWwgc2l6ZSI+SG9ub3JhaXJlcyBkZSAzLDA5JSBUVEMgw6AgbGEgY2hhcmdlIGRlIGwnYWNxdcOpcmV1cjwvcD4KCgkJCQkJCTxwIGNsYXNzPSJwcmljZV9kZXRhaWwiPjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGgyPkTDqXRhaWxzPC9oMj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZGV0YWlsX2xpc3RlIj4KICAgICAgICAgICAgICAgICAgICA8bGkgaXRlbXByb3A9InR5cGVPZkdvb2QiIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgICAgICAgICAgICAgYXBwYXJ0ZW1lbnQKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT5TdXJmYWNlIDogPHNwYW4gaXRlbXByb3A9IndpZHRoIj43NiBtwrI8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+Tm9tYnJlIGRlIHBpw6hjZXMgOiA8c3Bhbj4zPC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPk5vbWJyZSBkZSBjaGFtYnJlcyA6IDxzcGFuPjI8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+UGFya2luZyA6IDxzcGFuPjE8L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIDogPHNwYW4+RFQxLTczNzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlcF9kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZ19kcGUiIHNyYz0iaHR0cHM6Ly93d3cuYWdlbmNlLXBsdXMubmV0L3NraW5zL19kZWZhdWx0L2xpYi9BZ2VuY2VQbHVzL3dzL2ltZ0RQRS5hc2h4P3ZhbHVlPTE4NCZzaXplPTIwNngyMTEmcGljdG89ZHBlX29tYnJlX3RyYW5zcGFyZW50X2RhcmtfZ3JleSIgYWx0PSJEaWFnbm9zdGljIGRlIHBlcmZvcm1hbmNlIMOpbmVyZ8OpdGlxdWUiPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJsaW5rX2JhY2siPgogICAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgogICAgPCEtLSBSb290IGVsZW1lbnQgb2YgUGhvdG9Td2lwZS4gTXVzdCBoYXZlIGNsYXNzIHBzd3AuIC0tPgogICAgPGRpdiBjbGFzcz0icHN3cCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICA8IS0tIEJhY2tncm91bmQgb2YgUGhvdG9Td2lwZS4KICAgICAgICBJdCdzIGEgc2VwYXJhdGUgZWxlbWVudCwgYXMgYW5pbWF0aW5nIG9wYWNpdHkgaXMgZmFzdGVyIHRoYW4gcmdiYSgpLiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19iZyI+PC9kaXY+CiAgICAgICAgPCEtLSBTbGlkZXMgd3JhcHBlciB3aXRoIG92ZXJmbG93OmhpZGRlbi4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fc2Nyb2xsLXdyYXAiPgogICAgICAgICAgICA8IS0tIENvbnRhaW5lciB0aGF0IGhvbGRzIHNsaWRlcy4KICAgICAgICAgICAgICAgIFBob3RvU3dpcGUga2VlcHMgb25seSAzIG9mIHRoZW0gaW4gRE9NIHRvIHNhdmUgbWVtb3J5LgogICAgICAgICAgICAgICAgRG9uJ3QgbW9kaWZ5IHRoZXNlIDMgcHN3cF9faXRlbSBlbGVtZW50cywgZGF0YSBpcyBhZGRlZCBsYXRlciBvbi4gLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19pdGVtIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX2l0ZW0iPjwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9faXRlbSI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIERlZmF1bHQgKFBob3RvU3dpcGVVSV9EZWZhdWx0KSBpbnRlcmZhY2Ugb24gdG9wIG9mIHNsaWRpbmcgYXJlYS4gQ2FuIGJlIGNoYW5nZWQuIC0tPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJzcGFjZXJCbG9ja2VyIiBzcmM9Ii90aGVtZS9fZGVmYXVsdC9pbWFnZXMvc3BhY2VyLnBuZyIgYWx0PSIiIHN0eWxlPSJ6LWluZGV4OjA7IiAvPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX191aSBwc3dwX191aS0taGlkZGVuIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3RvcC1iYXIiPgogICAgICAgICAgICAgICAgICAgIDwhLS0gIENvbnRyb2xzIGFyZSBzZWxmLWV4cGxhbmF0b3J5LiBPcmRlciBjYW4gYmUgY2hhbmdlZC4gLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY291bnRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tY2xvc2UiIHRpdGxlPSJDbG9zZSAoRXNjKSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tc2hhcmUiIHRpdGxlPSJTaGFyZSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tZnMiIHRpdGxlPSJUb2dnbGUgZnVsbHNjcmVlbiI+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icHN3cF9fYnV0dG9uIHBzd3BfX2J1dHRvbi0tem9vbSIgdGl0bGU9Ilpvb20gaW4vb3V0Ij48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8IS0tIFByZWxvYWRlciBkZW1vIGh0dHA6Ly9jb2RlcGVuLmlvL2RpbXNlbWVub3YvcGVuL3l5QldvUiAtLT4KICAgICAgICAgICAgICAgICAgICA8IS0tIGVsZW1lbnQgd2lsbCBnZXQgY2xhc3MgcHN3cF9fcHJlbG9hZGVyLS1hY3RpdmUgd2hlbiBwcmVsb2FkZXIgaXMgcnVubmluZyAtLT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19wcmVsb2FkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19wcmVsb2FkZXJfX2ljbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19jdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fcHJlbG9hZGVyX19kb251dCI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc3dwX19zaGFyZS1tb2RhbCBwc3dwX19zaGFyZS1tb2RhbC0taGlkZGVuIHBzd3BfX3NpbmdsZS10YXAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBzd3BfX3NoYXJlLXRvb2x0aXAiPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1hcnJvdy0tbGVmdCIgdGl0bGU9IlByZXZpb3VzIChhcnJvdyBsZWZ0KSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJwc3dwX19idXR0b24gcHN3cF9fYnV0dG9uLS1hcnJvdy0tcmlnaHQiIHRpdGxlPSJOZXh0IChhcnJvdyByaWdodCkiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY2FwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHN3cF9fY2FwdGlvbl9fY2VudGVyIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICQoJy5ham91dF9zZWxlY3Rpb24nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHsKCiAgICAgICAgdmFyIGlkID0gJCh0aGlzKS5hdHRyKCdkYXRhLWJpZW5pZCcpOwoKICAgICAgICBtYXNlbGVjdGlvbignJywgaWQsICdhZGQnLCBmdW5jdGlvbihyZXRvdXIpIHsKCiAgICAgICAgICAgIHZhciBhbmltX3RpbWVvdXQ7CiAgICAgICAgICAgIHZhciBhbmltMl90aW1lb3V0OwogICAgICAgICAgICB2YXIgcmVtb3ZlX3RpbWVvdXQ7CgogICAgICAgICAgICBjbGVhclRpbWVvdXQoYW5pbV90aW1lb3V0KTsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW0yX3RpbWVvdXQpOwogICAgICAgICAgICBjbGVhclRpbWVvdXQocmVtb3ZlX3RpbWVvdXQpOwoKICAgICAgICAgICAgaWYgKHJldG91cikgewoKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFwcGVuZFRvKCdib2R5JykuYWRkQ2xhc3MoJ2FsZXJ0IG9uY2UnKS5hcHBlbmQoJzxwPicgKyBtZXNzYWdlWzBdICsgJzwvcD4nKTsKCiAgICAgICAgICAgICAgICB2YXIgbmJfc2VsZWN0aW9uID0gcGFyc2VJbnQoJCgnLm5iX3NlbGVjdGlvbicpLnRleHQoKSkgKyAxOwogICAgICAgICAgICAgICAgJCgnLm5iX3NlbGVjdGlvbicpLnRleHQobmJfc2VsZWN0aW9uKTsKCiAgICAgICAgICAgICAgICBhbmltX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5hZGRDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICBhbmltMl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnb25jZScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDApOwoKICAgICAgICAgICAgICAgICAgICB9LCAxNTAwKTsKCiAgICAgICAgICAgICAgICB9LCAxMDApOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFwcGVuZFRvKCdib2R5JykuYWRkQ2xhc3MoJ2FsZXJ0IGRvbmUnKS5hcHBlbmQoJzxwPicgKyBtZXNzYWdlWzFdICsgJzwvcD4nKTsKCiAgICAgICAgICAgICAgICBhbmltX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5hZGRDbGFzcygnYW5pbScpOwoKICAgICAgICAgICAgICAgICAgICBhbmltMl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hbGVydCcpLnJlbW92ZUNsYXNzKCdhbmltJyk7CgogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQnKS5yZW1vdmVDbGFzcygnZG9uZScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDApOwoKICAgICAgICAgICAgICAgICAgICB9LCAxNTAwKTsKCiAgICAgICAgICAgICAgICB9LCAxMDApOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBmYWxzZTsKCiAgICB9KTsKCiAgICA8L3NjcmlwdD4KCgogICAgPGZvb3Rlcj4KICAgIDxkaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3RvcCI+CiAgICAgICAgICAgIDxhIGl0ZW1zY29wZT0iaXRlbXNjb3BlIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50IiBjbGFzcz0iYWdlbmNlc19mb290ZXIiIGhyZWY9Ii9jb250YWN0LWFnZW5jZS1pbW1vYmlsaWVyZS1hc3Nhcy1pbW1vYmlsaWVyLyIgdGl0bGU9IkNvbnRhY3RleiBs4oCZYWdlbmNlIGltbW9iaWxpw6hyZSBBc3NhcyBpbW1vYmlsaWVyIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJicmFuZCIgaXRlbXByb3A9ImxlZ2FsTmFtZSI+QVNTQVMgSW1tb2JpbGllcjwvc3Bhbj48c3BhbiBjbGFzcz0idGlyZXQiPiZuYnNwOy0mbmJzcDs8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibG9jYXRpb24iPjE0NSwgYm91bGV2YXJkIFJhc3BhaWwmbmJzcDsKICAgICAgICAgICAgICAgIDc1MDA2Jm5ic3A7UGFyaXM8c3BhbiBjbGFzcz0idGlyZXQiPiZuYnNwOy0mbmJzcDs8L3NwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InRlbGVwaG9uZSI+MDEgNTYgODEgMDggMzg8L3NwYW4+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGEgY2xhc3M9Im1vYmlsZV9mb290ZXIiIGhyZWY9Imh0dHBzOi8vbS5hc3Nhc2ltbW9iaWxpZXIuY29tLyZtb2JpbGU9MSIgdGl0bGU9IlNpdGUgbW9iaWxlIj5TaXRlIG1vYmlsZTwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InNlbyI+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzb2NpYWxMaW5rcyI+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImZhY2Vib29rIiBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vYXNzYXNpbW1vYmlsaWVyLz9mcmVmPXRzIiB0aXRsZT0iRmFjZWJvb2siPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzEiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8iIHRpdGxlPSJJbW1vYmlsaWVyIFBhcmlzIDc1MDA2IEFzc2FzIGltbW9iaWxpZXIiPkFjY3VlaWw8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvdmVudGUtbG9mdC1ob3RlbC1wYXJ0aWN1bGllci1hcHBhcnRlbWVudC1wYXJpcy1hc3Nhcy1pbW1vYmlsaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IkltbW9iaWxpZXIgZW4gVmVudGUgQXNzYXMgaW1tb2JpbGllciI+RW4gdmVudGU8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lc3RpbWF0aW9uLWFwcGFydGVtZW50LWR1cGxleC1ob3RlbC1wYXJ0aWN1bGllci1wYXJpcy03NTAwNi8iIHRpdGxlPSJFc3RpbWVyIHZvdHJlIGJpZW4gc3VyIFBhcmlzIj5Fc3RpbWF0aW9uPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGxhbi1tZWRpYS1hY3R1YWxpdGUtYXNzYXMtaW1tb2JpbGllci8iIHRpdGxlPSJBY3R1YWxpdMOpcyBBc3NhcyBpbW1vYmlsaWVyIj5QbGFuIG3DqWRpYTwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2JpZW5zLXZlbmR1cy1hcHBhcnRlbWVudC1tYWlzb24tYXNzYXMtaW1tb2JpbGllci1wYXJpcy03NTAwNi8iIHRpdGxlPSJCaWVucyB2ZW5kdXMgcGFyIEFzc2FzIGltbW9iaWxpZXIiPk5vcyB2ZW50ZXM8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9ob21lLXN0YWdpbmctYXNzYXMtaW1tb2JpbGllci1wYXJpcy8iIHRpdGxlPSJIb21lIFN0YWdpbmcgQXNzYXMgaW1tb2JpbGllciI+SG9tZSBzdGFnaW5nPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29udGFjdC1hZ2VuY2UtaW1tb2JpbGllcmUtYXNzYXMtaW1tb2JpbGllci8iIHRpdGxlPSJDb250YWN0ZXogbOKAmWFnZW5jZSBpbW1vYmlsacOocmUgQXNzYXMgaW1tb2JpbGllciI+Tm91cyBjb250YWN0ZXI8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzIiPgoKICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW8zIj4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbWEtc2VsZWN0aW9uLWFubm9uY2VzLWltbW9iaWxpZXJlcy1hc3Nhcy8iIHRpdGxlPSJTw6lsZWN0aW9ubmVyIGFubm9uY2UgaW1tb2JpbGnDqHJlIj5NYSBzw6lsZWN0aW9uPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZlbnRlLWFjaGF0LWFwcGFydGVtZW50LXBhcmlzLTc1MDA1LWFzc2FzLWltbW9iaWxpZXIvJm5ld19yZXNlYXJjaD0xIiB0aXRsZT0iVmVudGUgYXBwYXJ0ZW1lbnQgNzUwMDUgQXNzYXMgaW1tb2JpbGllciI+QXBwYXJ0ZW1lbnQvNzUwMDU8L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHVsIGNsYXNzPSJzZW80Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVudGUtYWNoYXQtYXBwYXJ0ZW1lbnQtcGFyaXMtNzUwMDYtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA3NTAwNiBBc3NhcyBpbW1vYmlsaWVyIj5BcHBhcnRlbWVudC83NTAwNjwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii92ZW50ZS1hY2hhdC1hcHBhcnRlbWVudC1wYXJpcy03NTAwNy1hc3Nhcy1pbW1vYmlsaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDc1MDA3QXNzYXMgaW1tb2JpbGllciI+QXBwYXJ0ZW1lbnQvNzUwMDc8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVudGUtYWNoYXQtYXBwYXJ0ZW1lbnQtcGFyaXMtNzUwMTQtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBhcHBhcnRlbWVudCA3NTAxNCBBc3NhcyBpbW1vYmlsaWVyIj5BcHBhcnRlbWVudC83NTAxNDwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8dWwgY2xhc3M9InNlbzUiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii92ZW50ZS1hY2hhdC1hcHBhcnRlbWVudC1wYXJpcy03NTAxNS1hc3Nhcy1pbW1vYmlsaWVyLyZuZXdfcmVzZWFyY2g9MSIgdGl0bGU9IlZlbnRlIGFwcGFydGVtZW50IDc1MDE1IEFzc2FzIGltbW9iaWxpZXIiPkFwcGFydGVtZW50Lzc1MDE1PC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZlbnRlLWFjaGF0LW1haXNvbnMtcGFyaXMtcml2ZS1nYXVjaGUtNzUwMTQtYXNzYXMtaW1tb2JpbGllci8mbmV3X3Jlc2VhcmNoPTEiIHRpdGxlPSJWZW50ZSBtYWlzb25zIDc1MDE0IEFzc2FzIGltbW9iaWxpZXIiPk1haXNvbnMvUGFyaXMgcml2ZSBnYXVjaGUgKDc1MDE0KTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPiZuYnNwOzwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWwiPgogICAgICAgICAgICA8YSBocmVmPSIvbWVudGlvbnMtbGVnYWxlcy1hZ2VuY2UtaW1tb2JpbGllcmUtYXNzYXMvIiB0aXRsZT0iSW5mb3JtYXRpb25zIGp1cmlkaXF1ZXMgQXNzYXMgaW1tb2JpbGllciI+TWVudGlvbnMgbMOpZ2FsZXMgLyBCYXLDqm1lPC9hPiAtCiAgICAgICAgICAgIDxhIGhyZWY9Ii9saWVucy11dGlsZXMtcGFydGVuYWlyZXMtaW1tb2JpbGlyZXMtYXNzYXMvIiB0aXRsZT0iUGFydGVuYWlyZXMgaW1tb2JpbGllcnMgQXNzYXMgaW1tb2JpbGllciI+TGllbnMgdXRpbGVzPC9hPiAtCiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9hZ2VuY2UtaW1tb2JpbGllcmUvYWdlbmNlLWFzc2FzLWltbW9iaWxpZXItMzkxMTUvIiB0aXRsZT0iQWdlbmNlIGFncsOpw6llIE1laWxsZXVycyBBZ2VudHMgLSBBY2hhdCB2ZW50ZSBhcHBhcnRlbWVudCBwYXJpcyByaXZlIGdhdWNoZSIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5jZSBhZ3LDqcOpZSBNZWlsbGV1cnMgQWdlbnRzPC9hPiAtCiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYWdlbmNlLXBsdXMuZnIiIHRpdGxlPSJBZ2VuY2UgUGx1cywgc29sdXRpb25zIHBvdXIgbGVzIHByb2Zlc3Npb25uZWxzIGRlIGwnaW1tb2JpbGllciIgdGFyZ2V0PSJfYmxhbmsiPlLDqWFsaXNhdGlvbiBBZ2VuY2UgUGx1czwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Zvb3Rlcj4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIHZhciBsaXN0X2xpID0gJCgnZm9vdGVyIHVsLnNlbzEgbGknKTsKCiAgICBmb3IodmFyIGk9MDtpPGxpc3RfbGkubGVuZ3RoO2krKyl7CgogICAgICAgIHZhciBjdXJyZW50X2VsZW0gPSBsaXN0X2xpW2ldOwoKICAgICAgICBpZihpID49MyAmJiBpIDw9NSl7CiAgICAgICAgICAgICQoY3VycmVudF9lbGVtKS5hcHBlbmRUbygnZm9vdGVyIC5zZW8yJyk7CiAgICAgICAgfWVsc2UgaWYoaSA9PSA2KXsKICAgICAgICAgICAgJChjdXJyZW50X2VsZW0pLnByZXBlbmRUbygnZm9vdGVyIC5zZW8zJykKICAgICAgICB9CiAgICB9Cjwvc2NyaXB0PgoKICAgIDxkaXYgY2xhc3M9InBvcHVwLWNvbnRlbnQiPgogICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxzcGFuPkVuIHBvdXJzdWl2YW50IHZvdHJlIG5hdmlnYXRpb24gc3VyIGNlIHNpdGUsIHZvdXMgYWNjZXB0ZXogbCd1dGlsaXNhdGlvbiBkZSBjb29raWVzIGRlc3RpbsOpcyDDoCBsYSByw6lhbGlzYXRpb24gZGUgc3RhdGlzdGlxdWVzIGRlIHZpc2l0ZXMuPC9zcGFuPgogICAgICAgICAgICA8YSBocmVmPSIvbWVudGlvbnMtbGVnYWxlcy1hZ2VuY2UtaW1tb2JpbGllcmUtYXNzYXMvI2Nvb2tpZXMiIGNsYXNzPSJtb3JlLWJ1dHRvbiI+RW4gc2F2b2lyIHBsdXM8L2E+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIGNsYXNzPSJhZ3JlZS1idXR0b24iIHZhbHVlPSJDb250aW51ZXIiLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2NvbmZpcm1fY29va2llLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiAgICAoZnVuY3Rpb24oKXsKICAgICAgICB2YXIgZm5Gb290ZXIgPSBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgZiA9ICQoJ2Zvb3RlcicpOwogICAgICAgICAgICBpZiAoZi5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICB2YXIgbWluSGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpIC0gZi5pbm5lckhlaWdodCgpOwogICAgICAgICAgICAgICAgZi5jc3Moe3Bvc2l0aW9uOidzdGF0aWMnfSk7CiAgICAgICAgICAgICAgICBpZihmLm9mZnNldCgpLnRvcCA8IG1pbkhlaWdodCl7CiAgICAgICAgICAgICAgICAgICAgJCgnI21haW4nKS5jc3MoJ21pbi1oZWlnaHQnLCQod2luZG93KS5oZWlnaHQoKSk7CiAgICAgICAgICAgICAgICAgICAgZi5jc3Moe3Bvc2l0aW9uOidhYnNvbHV0ZScsICdib3R0b20nOicwJ30pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmbkZvb3Rlcik7CiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmbkZvb3Rlcik7CiAgICB9KSgpOwoKICAgICAvLyBDb29raWUKICAgICAgICAkKCcuYWdyZWUtYnV0dG9uJykub24oJ2NsaWNrJyxmdW5jdGlvbigpewogICAgICAgICAgIGNvbmZpcm1jb29raWUoJycsZnVuY3Rpb24ocmV0b3VyKXsKICAgICAgICAgICAgICAgaWYgKHJldG91cikgeyQoJy5wb3B1cC1jb250ZW50JykuaGlkZSgpO30KICAgICAgICAgICB9KTsKICAgICAgICB9KTsKCjwvc2NyaXB0PgoKPC9ib2R5Pgo8L2h0bWw+Cgo=
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:43 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-728/vente-appartement-4-pieces-2-chambres-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:44 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=bv7vmtjrjr1gmr92rua2jae6v1; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:44 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-722/vente-appartement-3-pieces-2-chambres-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:44 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=c4dibc17qut7lsp1tg2oano8k5; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:44 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-717/vente-appartement-6-pieces-3-chambres-paris-75014/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:44 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=camne1k4c6eioms8ai3umts3n6; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:44 GMT
- request:
    method: get
    uri: https://www.assasimmobilier.com/annonce-vente-loft-hotel-particulier-appartement-paris-assas-immobilier/ref-dt1-710/vente-appartement-7-pieces-5-chambres-paris-75006/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Apr 2020 12:32:44 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - PHPSESSID=hhdij4s2fl10f0lulti19j5el7; path=/
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 02 Apr 2020 12:32:44 GMT
recorded_with: VCR 5.1.0
