---
http_interactions:
- request:
    method: get
    uri: https://www.iadfrance.fr/rechercher/annonces?departments=Paris&frequency=Journali%C3%A8re&generic_type%5B%5D=AP&generic_type%5B%5D=MV&id=&price_max=&price_min=&surface_max=&surface_min=&tags_list=%5B%7B%22type%22:%22departments%22,%22value%22:%22Paris%22,%22name%22:%22Paris%20%22%7D%5D&transaction_type=Vente
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:06 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=f2cf8cdee7d21f7acd94cb693774357a; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:06 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:06 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:06 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-27m2/r762146?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:07 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=1e1c99a386c4e23e389daaba53dfcd1d; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:07 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:07 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:07 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-4-pieces-paris-105m2/r761242?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:07 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=774d2aeb75dd9e3d1b123e5a18498d8d; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:07 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:07 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:07 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-3-pieces-paris-128m2/r752119?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:08 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=742ef1b86a60f45a59914083076b5252; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:08 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:08 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:08 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-5-pieces-paris-138m2/r762109-1?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:09 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=9f8c3b1c19dac4d5ed17da8059400464; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:09 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:09 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ICAgIDwhRE9DVFlQRSBodG1sPgoKICAgIDxoZWFkPgogICAgICAgIDwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIChmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzogbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPScvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JytpK2RsO2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaixmKTt9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1XUEtOU0Q5Jyk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ii8+CiAgICAgICAgPHRpdGxlPmlhZCAtICAgIER1cGxleCBkZSAxMzggbcKyIC0gUEFSSVMKPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICBjb250ZW50PSIgICAgICAgICAgICBpYWQgRnJhbmNlIC0gTWFyaWUgTUlRVUVBVSAgdm91cyBwcm9wb3NlIDogUEFSSVMgMTMgLyBRVUFSVElFUiBCTkYgLyAgUkVSIEMgLyBNRVRSTyAxNC8gVDNhICZsdDticiZndDtMRSBRVUFSVElFUjogTGEgQk5GLCBs4oCZdW5pdmVyc2l0w6kgRGlkZXJvdCwgbGVzIEZyaWdvcywgbGUgY2luw6ltYS4uLgogICAgIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9ImlhZCBpbW1vYmlsaWVyIi8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgICAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1pbmltdW0tc2NhbGU9MSI+CiAgICAgICAgPG1ldGEgbmFtZT0iZ29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uIiBjb250ZW50PSJNM0NVaXB6cGRBZE16TFpnb0tLWFlPSTh6eXJtblRsbm0yXzFRRWcyUWpzIi8+CiAgICAgICAgICAgIDxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0iaW5kZXgsIGZvbGxvdyIvPgogICAgICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS01LXBpZWNlcy1wYXJpcy0xMzhtMi9yNzYyMTA5LTE/X2xvY2FsZT1mciIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnNpdGVfbmFtZSIgY29udGVudD0iSUFEIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IkR1cGxleCBkZSAxMzggbcKyIC0gUEFSSVMiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpsb2NhbGUiIGNvbnRlbnQ9ImZyX0ZSIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6bG9jYWxlOmFsdGVybmF0ZSIgY29udGVudD0iZW5fVVMiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJ3ZWJzaXRlIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiAgICAKICAgICAgICBpYWQgRnJhbmNlIC0gTWFyaWUgTUlRVUVBVSAoMDYgMzIgNzkgMDQgNDYpIHZvdXMgcHJvcG9zZSA6IFBBUklTIDEzIC8gUVVBUlRJRVIgQk5GIC8gIFJFUiBDIC8gTUVUUk8gMTQvIFQzYSBMRSBRVUFSVElFUjogTGEgQk5GLCBs4oCZdW5pdmVyc2l0w6kgRGlkZXJvdCwgbGVzIEZyaWdvcywgbGUgY2luw6ltYSBNSzLigKYuLmJpZW52ZW51ZSBkYW5zIGxhIGp1bmdsZSB1cmJhaW5lIGRlIGNlIHF1YXJ0aWVyIGR1IDEzw6htZSBhcnJvbmRpc3NlbWVudCwgaW5zcGlyw6llIGRlwqBMJ0lsZSBteXN0w6lyaWV1c2XCoGRlIEp1bGVzIFZlcm5lLCBhdmVjLi4uCiAgICAiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTUtcGllY2VzLXBhcmlzLTEzOG0yL3I3NjIxMDktMSIvPgogICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiCiAgICAgICAgICAgICAgY29udGVudD0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzcyOTQyMTIyLmpwZyIvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJ0d2l0dGVyOmltYWdlIgogICAgICAgICAgICAgIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b190aHVtYi9waG90by83Mjk0MjEyMi5qcGciLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0idHdpdHRlcjpzaXRlIiBjb250ZW50PSJpYWQiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJ0d2l0dGVyOmNhcmQiIGNvbnRlbnQ9InN1bW1hcnkiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJ0d2l0dGVyOnRpdGxlIiBjb250ZW50PSJEdXBsZXggZGUgMTM4IG3CsiAtIFBBUklTIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0idHdpdHRlcjpkZXNjcmlwdGlvbiIgY29udGVudD0iICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBNYXJpZSBNSVFVRUFVICgwNiAzMiA3OSAwNCA0Nikgdm91cyBwcm9wb3NlIDogUEFSSVMgMTMgLyBRVUFSVElFUiBCTkYgLyAgUkVSIEMgLyBNRVRSTyAxNC8gVDNhIExFIFFVQVJUSUVSOiBMYSBCTkYsIGzigJl1bml2ZXJzaXTDqSBEaWRlcm90LCBsZXMgRnJpZ29zLCBsZSBjaW7DqW1hIE1LMuKApi4uYmllbnZlbnVlIGRhbnMgbGEganVuZ2xlIHVyYmFpbmUgZGUgY2UgcXVhcnRpZXIgZHUgMTPDqG1lIGFycm9uZGlzc2VtZW50LCBpbnNwaXLDqWUgZGXCoEwnSWxlIG15c3TDqXJpZXVzZcKgZGUgSnVsZXMgVmVybmUsIGF2ZWMuLi4KICAgICIvPgoKCiAgICAgICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNhY2hlLWNvbnRyb2wiIGNvbnRlbnQ9Im1heC1hZ2U9MCIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNhY2hlLWNvbnRyb2wiIGNvbnRlbnQ9Im5vLWNhY2hlIi8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iZXhwaXJlcyIgY29udGVudD0iMCIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImV4cGlyZXMiIGNvbnRlbnQ9IlR1ZSwgMDEgSmFuIDE5ODAgMTowMDowMCBHTVQiLz4KICAgICAgICA8bWV0YSBodHRwLWVxdWl2PSJwcmFnbWEiIGNvbnRlbnQ9Im5vLWNhY2hlIi8+CgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMzJ4MzIiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi0zMngzMi5wbmciPgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMTZ4MTYiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi0xNngxNi5wbmciPgogICAgICAgIDxsaW5rIHJlbD0ibWFuaWZlc3QiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvbWFuaWZlc3QuanNvbiI+CiAgICAgICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiNmZmZmZmYiPgogICAgICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSIvaW1nL2Zhdmljb25zL21zLWljb24tMTQ0eDE0NC5wbmciPgogICAgICAgIDxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjZmZmZmZmICI+CgogICAgICAgICAgICAgICAgICAgIDwhLS0gKiogR09PR0xFIEZPTlRTICoqIC0tPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9R2xvcmlhK0hhbGxlbHVqYWgiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9TGF0bzozMDAsNDAwLDcwMCwzMDBpdGFsaWMsNDAwaXRhbGljLDcwMGl0YWxpYyIKICAgICAgICAgICAgICAgICAgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICAgICAgICAgIDxsaW5rIGhyZWY9Ii8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Ecm9pZCtTYW5zOjQwMCw3MDAiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um91Z2UrU2NyaXB0IiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KCiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy92ZW5kb3ItYTE1MTU4OWJlOC5taW4uY3NzIj4KICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvYWxsLmNzcyI+CiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9tYWluLTQyMTFkNzU2MWYubWluLmNzcyI+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxzdHlsZT4KICAgICAgICAgICAgZGl2LmNjLXdpbmRvdy5jYy1iYW5uZXIgewogICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDBweDsKICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAwcHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGEuY2MtYnRuIHsKICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC43ZW07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNwYW4uY2MtbWVzc2FnZSB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDExcHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGEuY2MtYnRuLmNjLWRpc21pc3M6aG92ZXIgewogICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGEuY2MtYnRuLmNjLWFsbG93OmhvdmVyIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZGVmZjU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5oaWRlUHQgewogICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTsKICAgICAgICAgICAgfQogICAgICAgIDwvc3R5bGU+CgoKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNS4wL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyI+CiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi5pY28iLz4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgc3JjPSIvYWxsLmpzIj48L3NjcmlwdD4KICAgICAgICAKICAgIAogICAgPC9oZWFkPgoKCgo8Ym9keSAgY2xhc3M9InByZXN0aWdlIiBpdGVtc2NvcGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1dlYlBhZ2UiPgo8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KPG5vc2NyaXB0PgogICAgPGlmcmFtZSBzcmM9Ii8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLVdQS05TRDkiIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPgo8L25vc2NyaXB0Pgo8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgLS0+Cgo8ZGl2IGlkPSJmYi1yb290Ij48L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByZS1oZWFkZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoaWRkZW4teHMiPgogICAgICAgICAgICAgICAgICAgICAgICBQb3VyIHVuZSBtZWlsbGV1cmUgZXhww6lyaWVuY2Ugc3VyIG5vdHJlIHNpdGUgOiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4iPjwvaT4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0gZm9ybV9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgICAgICBMb2NhbGlzZXotdm91cyAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJmb3JtX19sb2NhbGl6YXRpb24iIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Fycm93LTEiIHZhbHVlPSIiIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9nZW8tc2VhcmNoLyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11c2VyY291bnRyeT0iICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb3VudHJ5PSJmciI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uX19jbG9zZSI+PHNwYW4gY2xhc3M9ImhpZGRlbi14cyI+RmVybWVyPC9zcGFuPiA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tY3Jvc3MiPjwvaT48L2E+CiAgICAgICAgPC9kaXY+CiAgICAKICAgIAo8ZGl2IGNsYXNzPSJtYWluLWhlYWRlci13cmFwcGVyIj4KICAgIDxkaXYgaWQ9Im1haW4iIGNsYXNzPSJtYWluLWNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbl9fbWVudS1jb250YWluZXIiPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b25fX21lbnUtb3BlbiI+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLW1lbnUiPjwvaT48L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uX19tZW51LWNsb3NlIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24tY3Jvc3MiPjwvaT48L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aGVhZGVyIGlkPSJoZWFkZXIiIGNsYXNzPSIgaGVhZGVyIiBpdGVtc2NvcGUKICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvV1BIZWFkZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyX19sb2dvIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvIiBjbGFzcz0iaGVhZGVyX19sb2dvLWxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9pYWQtbG9nby5wbmciIGFsdD0iSUFEIDogTG9jYXRpb24gZXQgdmVudGUgZW4gaW1tb2JpbGllciI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8bmF2IGlkPSJtZW51IiBjbGFzcz0ibWVudSBtZW51X19tb2JpbGUgIgogICAgICAgICAgICAgICAgICAgICBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1NpdGVOYXZpZ2F0aW9uRWxlbWVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpcnN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FjaGF0L2xpc3RlL2Fubm9uY2VzP3NvcnQ9YWQuZmlyc3RQdWJsaXNoRGF0ZSZhbXA7ZGlyPWRlc2MiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgQWNoZXRlcgoKICAgICAgICA8aSBjbGFzcz0ibWVudS1pY29uMiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2xvY2F0aW9uL2xpc3RlL2Fubm9uY2VzP3NvcnQ9YWQuZmlyc3RQdWJsaXNoRGF0ZSZhbXA7ZGlyPWRlc2MiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgTG91ZXIKCiAgICAgICAgPGkgY2xhc3M9Im1lbnUtaWNvbjMiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW5kcmUiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgVmVuZHJlCgogICAgICAgIDxpIGNsYXNzPSJtZW51LWljb24zIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZXN0aW1lci12b3RyZS1iaWVuIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIEVzdGltZXIKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaXRlbS1oaWdobGlnaHRlZCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW50ZS9hbm5vbmNlcy9pbW1vYmlsaWVyLXByZXN0aWdlL2xpc3RlLXJlc3VsdGF0P3JhZGl1cz0yMCZhbXA7dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7dGFncyU1QjAlNUQ9cHJlc3RpZ2UiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgUFJFU1RJR0UKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2hvdy14cyI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci90cm91dmVyLXVuLWNvbnNlaWxsZXIiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgVHJvdXZlciB1biBjb25zZWlsbGVyCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNob3cteHMgbGFzdCIgaWNvbj0iZGVtby1pY29uIGljb24tdXNlcl96b29tIj4gICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kZXZlbmlyLWNvbnNlaWxsZXIuaWFkZnJhbmNlLmZyIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIE5vdXMgcmVqb2luZHJlCgogICAgICAgIDxpIGNsYXNzPSIvIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgICAgICAgICAgICAgIDwvbmF2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lbnVfX3NlY29uZCAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGlkZGVuLXhzIGZpcnN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3Ryb3V2ZXItdW4tY29uc2VpbGxlciIgICAgIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fc2Vjb25kIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICAgICAgVHJvdXZlciB1biBjb25zZWlsbGVyKgoKICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdXNlcl96b29tIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoaWRkZW4teHMiIGljb249ImRlbW8taWNvbiBpY29uLXVzZXJfem9vbSI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGV2ZW5pci1jb25zZWlsbGVyLmlhZGZyYW5jZS5mciIgICAgIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX21haW4gYnV0dG9uX19tZWRpdW0iPgogICAgICAgICAgICBOb3VzIHJlam9pbmRyZQoKICAgICAgICA8aSBjbGFzcz0iLyI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGFzLWNoaWxkIGNvdW50cnktY2hvc2VuLWZyIGxpbmstaWFkIj4gICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgICAgIGNsYXNzPSJidXR0b24gYnV0dG9uX19wcm9maWwiPgogICAgICAgICAgICBpYWQgRnJhbmNlCgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1kb3duIj48L2k+CiAgICA8L2E+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im1lbnVfbGV2ZWxfMSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaXJzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vd3d3LmlhZGVzcGFuYS5lcyIgICAgIGNsYXNzPSJ0ZXh0LWNlbnRlciBtZW51LWl0ZW0tdW5jZW50ZXJlZCBpYWQtZnJhbmNlIj4KICAgICAgICAgICAgaWFkIEVzcGHDsWEKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgPGEgaHJlZj0iLy93d3cuaWFkLWl0YWxpYS5pdCIgICAgIGNsYXNzPSJ0ZXh0LWNlbnRlciBtZW51LWl0ZW0tdW5jZW50ZXJlZCBpYWQtZnJhbmNlIj4KICAgICAgICAgICAgaWFkIEl0YWxpYQoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsYXN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iLy93d3cuaWFkcG9ydHVnYWwucHQiICAgICBjbGFzcz0idGV4dC1jZW50ZXIgbWVudS1pdGVtLXVuY2VudGVyZWQgaWFkLWZyYW5jZSI+CiAgICAgICAgICAgIGlhZCBQb3J0dWdhbAoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhcy1jaGlsZCB1c2VyLW1lbnUgbGFzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcHJvZmlsIj4KICAgICAgICAgICAgCgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi11c2VyLTQiPjwvaT4KICAgIDwvYT4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibWVudV9sZXZlbF8xIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgaWQ9ImxvZ2luX2J0biIgY2xhc3M9ImRlbW8taWNvbiBpY29uLXVzZXItMyB3aWRlIGZpcnN0IiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbG9naW4iIGRhdGEtdGFiPSJsb2dpbi10YWIiPiAgICAgICAgPHNwYW4+ICAgIFNlIGNvbm5lY3Rlcgo8L3NwYW4+ICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgaWQ9ImNyZWF0ZV9idG4iIGNsYXNzPSJkZW1vLWljb24gaWNvbi11c2VyLTIgd2lkZSBsYXN0IiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbG9naW4iIGRhdGEtdGFiPSJyZWdpc3Rlci10YWIiPiAgICAgICAgPHNwYW4+ICAgIENyw6llciB1biBjb21wdGUKPC9zcGFuPiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgIDwvbGk+CgoKICAgIDwvdWw+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2hlYWRlcj4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKCjxtYWluIGlkPSJtYWluX19jb250ZW50IiBjbGFzcz0ibWFpbl9fY29udGVudCIgaXRlbXNjb3BlIGl0ZW1wcm9wPSJtYWluQ29udGVudE9mUGFnZSIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0Jsb2ciPgogICAgPHNlY3Rpb24gaWQ9ImNvbnRlbnQiIGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgPGZvcm0gaWQ9InNlYXJjaEZvcm0iIGNsYXNzPSJzZWFyY2hfX2JhciIgYWN0aW9uPSIvcmVjaGVyY2hlci9hbm5vbmNlcyIgbWV0aG9kPSJHRVQiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19maWx0ZXJzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1zZWxlY3QiIGRhdGEtbmFtZT0iQWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5BY3Rpb248L2E+CiAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0idHJhbnNhY3Rpb25fdHlwZSIgaWQ9InNlYXJjaC1uYXYiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlbGVjdGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IlZlbnRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjaGV0ZXIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iTG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG91ZXIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJWaWFnZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlhZ2VyICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4tLT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJMaWV1KHgpIgogICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCAgbXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4gTGlldSh4KTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iZ2VvX3ZhbHVlIiBjbGFzcz0ic2VsZWN0X19pbnB1dCB3aGVyZVRvQnV5X19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9IndoZXJlVG9CdXkiIGNsYXNzPSJ3aGVyZVRvQnV5U2VhcmNoQmFyIHNlYXJjaC1iaWctZmllbGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJPw7kgPyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9hdXRvY29tcGxldGUtZ2MvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcnNsZXktZXJyb3JzLW1lc3NhZ2VzLWRpc2FibGVkPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWdzX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJUeXBlKHMpIGRlIGJpZW4iCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0aW9ubmVzPSJzw6lsZWN0aW9ubsOpcyIgZGF0YS1hbGxzZWxlY3Rpb25uZXM9IlRvdXMgc8OpbGVjdGlvbm7DqXMiCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCBtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VHlwZShzKSBkZSBiaWVuPC9hPgogICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImdlbmVyaWNfdHlwZVtdIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSJBUCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXBwYXJ0ZW1lbnQtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iTVYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1haXNvbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJQQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZ2FyYWdlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdhcmFnZSAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJGQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tY29tbWVyY2UtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVyY2UgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iSU0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFwcGFydGVtZW50LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIELDonRpbWVudCAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJCVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYnVyZWF1LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1cmVhdSAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0idGVycmFpbiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJURSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXJyYWluICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbmFtZT0iU3VyZmFjZSBtaW4vbWF4IiBkYXRhLXN0YXJ0X2F0PSJkZSIgIGRhdGEtc3RhcnRfdG89IsOgIiBjbGFzcz0iYy1zZWxlY3QgbWluX19tYXgKICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlN1cmZhY2UgbWluL21heDwvYT4KICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pbiA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJzdXJmYWNlX21pbiIgbmFtZT0ic3VyZmFjZV9taW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyc2xleS1yZXF1aXJlZD0iZmFsc2UiIGRhdGEtcGFyc2xleS10eXBlPSJudW1iZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPm3Csjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF4IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9InN1cmZhY2VfbWF4IiBuYW1lPSJzdXJmYWNlX21heCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJmYWxzZSIgZGF0YS1wYXJzbGV5LXR5cGU9Im51bWJlciIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZSI+bcKyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLXVzZS1uYW1lPSJmYWxzZSIgZGF0YS1uYW1lPSJQacOoY2UocykiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InBpZWNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlBpw6hjZShzKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0icm9vbXNbXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGRhdGEtdmFsdWU9IjEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBwacOoY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzIHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1IHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTYiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA2IHBpw6hjZXMgZXQgcGx1cyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1uYW1lPSJQcml4IG1pbi9tYXgiIGRhdGEtc3RhcnRfYXQ9ImRlIiAgZGF0YS1zdGFydF90bz0iw6AiIGNsYXNzPSJjLXNlbGVjdCAgbWluX19tYXgKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+UHJpeCBtaW4vbWF4PC9hPgogICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdHJhbnNhY3Rpb24tdHlwZT0iVmVudGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXByaWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaW4gOiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0icHJpY2VfbWluIiB0eXBlPSJ0ZXh0IiB0aXRsZT0iUHJpeCBtaW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdHJhbnNhY3Rpb24tdHlwZT0iTG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXByaWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXggOiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0icHJpY2VfbWF4IiB0eXBlPSJ0ZXh0IiB0aXRsZT0iUHJpeCBtYXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fYm94X19tb3JlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9ImZhbHNlIiBpZD0iY2hhbWJyZXMiIGRhdGEtbmFtZT0iQ2hhbWJyZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYy1zZWxlY3QgbXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+IENoYW1icmVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iYmVkcm9vbXNbXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBjaGFtYnJlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgY2hhbWJyZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBjaGFtYnJlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSI0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IGNoYW1icmVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUgY2hhbWJyZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNiBjaGFtYnJlcyBldCBwbHVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJUYWcocykiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VGFnKHMpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJ0YWdzW10iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9ImV4Y2x1c2l2ZSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGNsdXNpdml0w6kgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJ0b3AiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ291cCBkZSBjb2V1ciAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Im5ldyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3V2ZWF1ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0icHJpY2VfZG93biIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYWlzc2UgZGUgcHJpeCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9ImNvbXByb21pcyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb3VzIGNvbXByb21pcyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Im5ld19idWlsZGluZyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXVmICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJEUEUiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+RFBFPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJjbGFzc19kX3BfZVtdIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkErIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEErCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJBIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iQi0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQi0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iRCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBECiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iRyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLW5hbWU9IlR5cGUgZGUgbWFuZGF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VHlwZSBkZSBtYW5kYXQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImV4Y2x1c2l2ZSIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iMSI+RXhjbHVzaWY8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpICBkYXRhLXZhbHVlPSIwIj5Ob24tZXhjbHVzaWY8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1zZWxlY3QiIGRhdGEtbmFtZT0iw4l0ZW5kcmUgbGEgcmVjaGVyY2hlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+w4l0ZW5kcmUgbGEgcmVjaGVyY2hlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJyYWRpdXMiIGNsYXNzPSJzZWxlY3RfX2lucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1a208L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMGttPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTVrbTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwa208L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImlkIiBpZD0ibWlkIiBwbGFjZWhvbGRlcj0iTsKwIGRlIG1hbmRhdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VhcmNoLXNtYWxsLWZpZWxkIiBkYXRhLXBhcnNsZXktcmVxdWlyZWQ9ImZhbHNlIiBkYXRhLXBhcnNsZXktdHlwZT0ibnVtYmVyIi8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC0zIHJpZ2h0X19pbmZvIj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0YSBhbGlnbi1jb2x1bW4tY2VudGVyIj4KCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NlY29uZCBidXR0b25fX2FjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXNlYXJjaC0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjaGVyY2hlPC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fYWxlcnQgYnV0dG9uX19tZWRpdW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWI9ImxvZ2luLXRhYiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNyw6llciB1bmUgYWxlcnRlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8IS0tPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19hY3Rpb24gYnV0dG9uX19zZWNvbmQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc2VhcmNoLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjaGVyY2hlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPi0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBpZD0icGFyYW1zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImV4Y2x1c2l2ZSIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ0YWdzX2xpc3QiIHZhbHVlPSIiLz4KICAgIDwvZGl2PgogICAgPGEgY2xhc3M9Im1vcmUgbW9yZS0taG9tZSIgaHJlZj0iIyI+CiAgICAgICAgZGUgY3JpdMOocmVzICAgIDwvYT4KPC9mb3JtPgoKPGRpdiBjbGFzcz0iZm9vdGVyLW1vYmlsZSI+CiAgICAgICAgICAgICAgICAgICAgPGNlbnRlcj4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJjb250YWN0LW1vYmlsZS1hZC1zaG93IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX3NlY29uZCAiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWVudmVsb3BlIj48L2k+CiAgICAgICAgICAgICAgICA8c3Bhbj5Db250YWN0ZXIgbGUgY29uc2VpbGxlcjwvc3Bhbj4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9jZW50ZXI+CiAgICAgICAgPC9kaXY+CgoKCiAgICA8ZGl2IGNsYXNzPSJicmVhZGNydW1iIj4KICAgIDx1bD4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iPgogICAgICAgICAgICAgICAgVmVudGUsIGFjaGF0LCBsb2NhdGlvbiwgbCdpbW1vYmlsaWVyIGRlIHByb3hpbWl0w6kgICAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImFycm93Ij4mZ3Q7PC9saT4KCiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvcmVjaGVyY2hlci9hbm5vbmNlcz90cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDthcmVhcz1GUkE4JmFtcDt0YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmFyZWFzJTIyJTJDJTIydmFsdWUlMjIlM0ElMjJGUkE4JTIyJTJDJTIybmFtZSUyMiUzQSUyMiU1Q3UwMGNlbGUtZGUtRnJhbmNlJTIyJTdEJTVEIj4KICAgICAgICAgICAgICAgIFZlbnRlCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iYXJyb3ciPiZndDs8L2xpPgogICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/YXJlYXM9RlJBOCZhbXA7dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJhcmVhcyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyRlJBOCUyMiUyQyUyMm5hbWUlMjIlM0ElMjIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCI+CiAgICAgICAgICAgICAgICAgICAgw45sZS1kZS1GcmFuY2UKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhcnJvdyI+Jmd0OzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvcmVjaGVyY2hlci9hbm5vbmNlcz90cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDtkZXBhcnRtZW50cz1QYXJpcyZhbXA7dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJkZXBhcnRtZW50cyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyUGFyaXMlMjIlMkMlMjJuYW1lJTIyJTNBJTIyUGFyaXMlMjg3NSUyOSUyMiU3RCU1RCI+CiAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhcnJvdyI+Jmd0OzwvbGk+CiAgICAgICAgICAgICAgICAgICAgCQkJCTxsaT4KCQk8YSBocmVmPSIjIj4KICAgICAgICAgICAgRHVwbGV4IGRlIDEzOCBtwrIgLSBQQVJJUwogICAgICAgICAgICAJCQk8L2E+CQkJCQogICAgICAgIDwvbGk+CiAgICA8L3VsPgo8L2Rpdj4KCjxkaXYgY2xhc3M9Im9mZmVyX19vdGhlciI+CiAgICA8ZGl2IGNsYXNzPSJsZWZ0Ij4KICAgICAgICAgICAgIDxhIGhyZWY9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP2dwX2lkPTIwNDMzMjU4MzEmYW1wO3RhZ3NfbGlzdD0lNUIlNUQiPgoKICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctMSI+PC9pPiBSZXRvdXIgw6AgbGEgcGFnZSBkZSByZWNoZXJjaGUgPC9hPgo8L2Rpdj4KPC9kaXY+CgogICAgCTxkaXYgaWQ9ImZpY2hlLWJpZW4iPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX25ldyI+Tm91dmVhdTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX3ByZXN0aWdlIj5QcmVzdGlnZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAKICAgIDwvZGl2PgogCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19zbGlkZXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19zbGlkZXItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b190aHVtYi9waG90by83Mjk0MjEyMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkR1cGxleCBkZSAxMzggbcKyIC0gUEFSSVMiIGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZ3JhbmRpciIgaHJlZj0iI2xpZ2h0Ym94LWltYWdlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmVzaXplLWZ1bGwiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19zbGlkZXItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b190aHVtYi9waG90by83Mjk0MjEyNC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkR1cGxleCBkZSAxMzggbcKyIC0gUEFSSVMiIGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZ3JhbmRpciIgaHJlZj0iI2xpZ2h0Ym94LWltYWdlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmVzaXplLWZ1bGwiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19zbGlkZXItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b190aHVtYi9waG90by83Mjk0MjEyNi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkR1cGxleCBkZSAxMzggbcKyIC0gUEFSSVMiIGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZ3JhbmRpciIgaHJlZj0iI2xpZ2h0Ym94LWltYWdlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmVzaXplLWZ1bGwiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19zbGlkZXItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b190aHVtYi9waG90by83Mjk0MjEyOC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkR1cGxleCBkZSAxMzggbcKyIC0gUEFSSVMiIGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZ3JhbmRpciIgaHJlZj0iI2xpZ2h0Ym94LWltYWdlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmVzaXplLWZ1bGwiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19zbGlkZXItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b190aHVtYi9waG90by83Mjk0MjEzMC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkR1cGxleCBkZSAxMzggbcKyIC0gUEFSSVMiIGNsYXNzPSJpbWciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhZ3JhbmRpciIgaHJlZj0iI2xpZ2h0Ym94LWltYWdlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmVzaXplLWZ1bGwiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGlkPSJsaWdodGJveC1pbWFnZSIgY2xhc3M9Im1vZGFsRGlhbG9nIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNsb3NlLWJ0biIgY2xhc3M9ImNsb3NlLWJ0biI+WDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlcl9fbGlnaHRib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvL3Bob3RvLzcyOTQyMTIyLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJEdXBsZXggZGUgMTM4IG3CsiAtIFBBUklTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nIGNlbnRlci1zbGlkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90by9waG90by83Mjk0MjEyNC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRHVwbGV4IGRlIDEzOCBtwrIgLSBQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyBjZW50ZXItc2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG8vcGhvdG8vNzI5NDIxMjYuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkR1cGxleCBkZSAxMzggbcKyIC0gUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWcgY2VudGVyLXNsaWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvL3Bob3RvLzcyOTQyMTI4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJEdXBsZXggZGUgMTM4IG3CsiAtIFBBUklTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nIGNlbnRlci1zbGlkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90by9waG90by83Mjk0MjEzMC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRHVwbGV4IGRlIDEzOCBtwrIgLSBQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyBjZW50ZXItc2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19pbmZvcm1hdGlvbi0xIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSBkZSBsJ2Fubm9uY2UgOiAgICAgICAgICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3NjIxMDktMQogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NlbmQtdG8tZnJpZW5kLzE3NTU3NDQiCiAgICAgICAgICAgICAgICAgICB0aXRsZT0iRW52b3llciBjZSBiaWVuIMOgIHVuIGFtaSIKICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjc2VuZFRvRnJpZW5kTW9kYWwiICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIj4KICAgICAgICAgICAgICAgICAgICBFbnZvaSBwYXIgZW1haWwgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1lbnZlbG9wZSI+PC9pPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWQvMTc1NTc0NC9wcmludCIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iSW1wcmltZXIgbGEgZmljaGUgZGUgY2UgYmllbiIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgICAgICAgICAgICAgICBJbXByaW1lciAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1wcmludGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imwtc2hhcmUiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlBhcnRhZ2VyIDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImZiLXhmYm1sLXBhcnNlLWlnbm9yZSBjaXJjbGUtZmFjZWJvb2siIGRhdGEtc2hhcmUtdGl0bGU9IlBhcnRhZ2UgRmFjZWJvb2siCiAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9aHR0cHMlM0ElMkYlMkZ3d3cuaWFkZnJhbmNlLmZyJTJGYW5ub25jZSUyRmFwcGFydGVtZW50LXZlbnRlLTUtcGllY2VzLXBhcmlzLTEzOG0yJTJGcjc2MjEwOS0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBmYiBpY29uLWZiLXJvbmQiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNpcmNsZS10d2l0dGVyIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vc2hhcmU/dXJsPWh0dHBzJTNBJTJGJTJGd3d3LmlhZGZyYW5jZS5mciUyRmFubm9uY2UlMkZhcHBhcnRlbWVudC12ZW50ZS01LXBpZWNlcy1wYXJpcy0xMzhtMiUyRnI3NjIxMDktMSIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUGFydGFnZSBUd2l0dGVyIiBkYXRhLXR5cGU9InNoYXJlLWxpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zaGFyZS10aXRsZT0iUGFydGFnZSBUd2l0dGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiB0dyBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iY2lyY2xlLXdoYXRzYXBwIHdoYXRzYXBwX2xpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3dhLm1lP3RleHQ9aHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtNS1waWVjZXMtcGFyaXMtMTM4bTIvcjc2MjEwOS0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFjdGlvbj0ic2hhcmUvd2hhdHNhcHAvc2hhcmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJXaGF0c2FwcCBzaGFyZSIgZGF0YS10eXBlPSJzaGFyZS1saW5rIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNoYXJlLXRpdGxlPSJXaGF0c2FwcCBzaGFyZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9zb2NpYWwvd2hhdHNhcHBfZ3JleS5wbmciPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9faGVhZGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04Ij4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGl0bGVfX21haW4iPgogICAgICAgICAgICAgICAgICAgICAgICBWZW50ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4oCiIFBBUklTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICg3NTAxMykgICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJoMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEdXBsZXggZGUgMTM4IG3CsiAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvaDE+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3ByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCBncmFwaCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGVzYyI+QXUgcHJpeCBkZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMiA2MDAgMDAwIDxzcGFuPiZldXJvOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE4IDg0MQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmV1cm87L23CsgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0ibGluay1zZWxlY3Rpb24gYnV0dG9uIGJ1dHRvbl9fbWFpbiBidXR0b25fX21lZGl1bSBidXR0b25fX3JvdW5kZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbG9naW4iIGRhdGEtdGFiPSJyZWdpc3Rlci10YWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1aXZyZSBjZSBiaWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtOCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19pbmZvcm1hdGlvbi0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGl0bGUiPlN1cmZhY2U8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJlbGVtZW50LWljb25lIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMzggbcKyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSI+TmIgZGUgcGnDqGNlczwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGllY2UtNSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19jb250ZW50IG9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImgyIj5EZXNjcmlwdGlmPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+aWFkIEZyYW5jZSAtIE1hcmllIE1JUVVFQVUgIHZvdXMgcHJvcG9zZSA6IFBBUklTIDEzIC8gUVVBUlRJRVIgQk5GIC8gIFJFUiBDIC8gTUVUUk8gMTQvIFQzYSA8YnI+TEUgUVVBUlRJRVI6IExhIEJORiwgbOKAmXVuaXZlcnNpdMOpIERpZGVyb3QsIGxlcyBGcmlnb3MsIGxlIGNpbsOpbWEgTUsy4oCmLi5iaWVudmVudWUgZGFucyBsYSBqdW5nbGUgdXJiYWluZSBkZSBjZSBxdWFydGllciBkdSAxM8OobWUgYXJyb25kaXNzZW1lbnQsIGluc3BpcsOpZSBkZcKgTCdJbGUgbXlzdMOpcmlldXNlwqBkZSBKdWxlcyBWZXJuZSwgYXZlYyB0b3VzIGxlcyBpbmdyw6lkaWVudHMgcXVpIGVuIGZvbnQgbGEgbWFnaWUgOiBDb3Ntb3BvbGl0ZSwgamV1bmUgZXQgw6l0dWRpYW50LCBpbCBvZmZyZSBlbmZpbiBsZSBtZWlsbGV1ciBkZSBs4oCZZWZmZXJ2ZXNjZW5jZSBldCBkZSBs4oCZdXJiYW5pdMOpIMOgIHNlcyBoYWJpdGFudHMsIMOgIGzigJlpbnN0YXIgZGVzIMOpY29sZXMsIMOgIHBhcnRpciBkZSBsYSBtYXRlcm5lbGxlLCBkZXMgY29tbWVyY2VzLCBkZXMgY2Fmw6lzIGV0IHJlc3RhdXJhbnRzLiBWaXZyZSBpY2ksIGPigJllc3Qgdml2cmUgUGFyaXMuPGJyPkF1IGNvZXVyIGRlIGNldHRlIHLDqXNpZGVuY2UgbW9kZXJuZSBldCB2ZXJkb3lhbnRlLCBvbiBkw6ljb3V2cmUgc3R1ZGlvcywgZHVwbGV4IG91IGFwcGFydGVtZW50cyBhdXggdGVycmFzc2VzIGfDqW7DqXJldXNlcy4gSWNpLCB0b3V0IGVzdCBjb27Dp3UgZW4gcGFyZmFpdGUgYWTDqXF1YXRpb24gYXZlYyBsZXMgYXR0ZW50ZXMgZXQgZXhpZ2VuY2VzIGFjdHVlbGxlcyBhdmVjIGRlc8Kgc3VyZmFjZXMgZ8OpbsOpcmV1c2VzLCBkZSBsYSBsdW1pw6hyZSBldCBkZSB2cmFpcyB2b2x1bWVzLjxicj5VTiBRVUFSVElFUiBOT1ZBVEVVUiBFVCDDiVRPTk5BTlQsIENFIExJRVUgVU5JUVVFIENPTlZJVklBTCBGRVJBIEJJRU4gREVTIEhFVVJFVVguPGJyPjxicj5Ib25vcmFpcmVzIGTigJlhZ2VuY2Ugw6AgbGEgY2hhcmdlIGR1IHZlbmRldXIuSW5mb3JtYXRpb24gZCdhZmZpY2hhZ2Ugw6luZXJnw6l0aXF1ZSBzdXIgY2UgYmllbiA6IERQRSBWSSBpbmRpY2UgMCBldCBHRVMgVkkgaW5kaWNlIDAuIExhIHByw6lzZW50ZSBhbm5vbmNlIGltbW9iaWxpw6hyZSBhIMOpdMOpIHLDqWRpZ8OpZSBzb3VzIGxhIHJlc3BvbnNhYmlsaXTDqSDDqWRpdG9yaWFsZSBkZSBNbWUgTWFyaWUgTUlRVUVBVSAoSUQgMjY5NDcpLCBBZ2VudCBDb21tZXJjaWFsIG1hbmRhdGFpcmUgZW4gaW1tb2JpbGllciBpbW1hdHJpY3Vsw6kgYXUgUmVnaXN0cmUgU3DDqWNpYWwgZGVzIEFnZW50cyBDb21tZXJjaWF1eCAoUlNBQykgZHUgVHJpYnVuYWwgZGUgQ29tbWVyY2UgZGUgTkFOVEVTIHNvdXMgbGUgbnVtw6lybyA0OTMgOTYwIDYxMS4gPGJyPlJldHJvdXZleiB0b3VzIG5vcyBiaWVucyBzdXIgbm90cmUgc2l0ZSBpbnRlcm5ldC4gd3d3LmlhZGZyYW5jZS5jb208L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19jb250ZW50IG9mZmVyX19pbmZvcm1hdGlvbi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fZXF1aXBlbWVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImgyIj5FcXVpcGVtZW50PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkV0YWdlPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzY2Vuc2V1cjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaWdpY29kZTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JbnRlcnBob25lPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRlcnJhc3NlPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19lbmVyZ3kiPgogICAgPGgyIGNsYXNzPSJoMiI+QmlsYW4gw6luZXJnZXRpcXVlPC9oMj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2NvbnRlbnQgb2ZmZXJfX3BlcnNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iaDMiPkplIHN1aXMgaW50w6lyZXNzw6koZSkgcGFyIGNlIGJpZW48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCjxmb3JtIG5hbWU9ImNvbnRhY3QiIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS01LXBpZWNlcy1wYXJpcy0xMzhtMi9yNzYyMTA5LTE/X2xvY2FsZT1mciIgY2xhc3M9ImZvcm1fX29mZmVyIiBkYXRhLXBhcnNsZXktdmFsaWRhdGU9InRydWUiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iY29udGFjdF9fdG9rZW4iIG5hbWU9ImNvbnRhY3RbX3Rva2VuXSIgdmFsdWU9Ik9LT0pkN1l4a25TeEN4dXdHNkY3SEpnOGRxdnVQaW5rNF84TW9nOUxiUmMiIC8+CjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtNiI+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1zZWxlY3QiIGRhdGEtdGl0bGU9Ik7CsDc2MjEwOS0xIj4KICAgICAgICAgICAgPGEgaHJlZj0iIyI+TW90aWY8L2E+CiAgICAgICAgICAgIDx1bCBpZD0ibW90aWZfYWdlbnQiIGRhdGEtdHlwZT0iY29udGFjdFttb3RpZnB0XSIgZGF0YS1uYW1lPSJtb3RpZiIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMSIgY2xhc3M9InNlbGVjdGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgSmUgc3VpcyBpbnTDqXLDqXNzw6koZSkgcGFyIHVuIGJpZW4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMiIgPgogICAgICAgICAgICAgICAgICAgICAgICBKZSBzb3VoYWl0ZXJhaXMgYXZvaXIgcGx1cyBkJiMwMzk7aW5mb3JtYXRpb25zCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjMiID4KICAgICAgICAgICAgICAgICAgICAgICAgSmUgc291aGFpdGVyYWlzIHZpc2l0ZXIgY2UgYmllbgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI0IiA+CiAgICAgICAgICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlcmFpcyBtZSByZW5zZWlnbmVyIHN1ciBsZXMgYmllbnMgYXV4IGFsZW50b3VycwogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjb250YWN0W21vdGlmcHRdIi8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9sYXN0X25hbWUiIG5hbWU9ImNvbnRhY3RbbGFzdF9uYW1lXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iTm9tICoiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbnRhY3RfZmlyc3RfbmFtZSIgbmFtZT0iY29udGFjdFtmaXJzdF9uYW1lXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iUHLDqW5vbSAqIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIGlkPSJjb250YWN0X2VtYWlsIiBuYW1lPSJjb250YWN0W2VtYWlsXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iRW1haWwgKiIgcGF0dGVybj0iLipALiooXC5bYS16QS1aMC05Li1dKykrJCIgZGF0YS1wYXJzbGV5LXR5cGU9ImVtYWlsIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cgk8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbnRhY3RfcGhvbmUiIG5hbWU9ImNvbnRhY3RbcGhvbmVdIiBwbGFjZWhvbGRlcj0iVMOpbMOpcGhvbmUiIG1pbkxlbmd0aD0iNiIgcGF0dGVybj0iXGQqIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICA8dGV4dGFyZWEgaWQ9ImNvbnRhY3RfbWVzc2FnZSIgbmFtZT0iY29udGFjdFttZXNzYWdlXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iTWVzc2FnZSI+PC90ZXh0YXJlYT4KICAgIDwvZGl2PgoJCjwvZGl2Pgo8ZGl2IGlkPSJjYXB0Y2hhIiBjbGFzcz0iZy1yZWNhcHRjaGEiIGRhdGEtc2l0ZWtleT0iNkxjSFVETVVBQUFBQUZCWHg5NS1RRFlrMzV4ZnN4VzJqWC12eGNTeCI+PC9kaXY+CjxkaXYgY2xhc3M9ImZvcm1fX2Zvb3RlciI+CiAgICA8YnV0dG9uIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fd2hpdGUgYnV0dG9uX19tZWRpdW0iPgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICA8c3Bhbj5Db250YWN0ZXIgdm90cmUgY29uc2VpbGxlcjwvc3Bhbj4KICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT4KICAgIDwvYnV0dG9uPgo8L2Rpdj4KPC9mb3JtPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGFzaWRlIGNsYXNzPSJzaWRlYmFyIGNvbC00IiBpZD0ic2lkZWJhciIgcm9sZT0iY29tcGxlbWVudGFyeSIgaXRlbXNjb3BlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9XUFNpZGVCYXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsLWZvcm1fX3BlcnNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwZXJzb25fX2luZm8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvTUFSSUUuTUlRVUVBVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImFkQWdlbnRDb250YWN0Rm9ybSIgY2xhc3M9InBlcnNvbl9faGVhZGVyIGMtb2ZmZXJfX3Byb2ZpbF9pbWdfYWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4ODg1MjMuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9Ik1hcmllIE1JUVVFQVUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IGltZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBlcnNvbl9fYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXJpZSBNSVFVRUFVCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYmFyZW1lLmlhZGZyYW5jZS5mci9kZXRhaWwvMjY5NDciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuLWJhcmVtZS1kZXNrdG9wIGJ0bi1iYXJlbWUtYWQiIHN0eWxlPSJjb2xvcjogI2ZmZiIgdGFyZ2V0PSJfYmxhbmsiPkJhcsOobWUgZCdob25vcmFpcmVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2JyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii8vd2lkZ2V0LmltbW9kdmlzb3IuY29tL2pzL3dpZGdldC5qcyI+PC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvL3dpZGdldC5pbW1vZHZpc29yLmNvbSIgaWQ9ImltbW9kdmlzb3Itd2lkZ2V0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pbS1hcGlrZXk9IllMMktRLVlDMlNOSy01QU80LTIwSkwtOEFKNUkiIGRhdGEtaW0tdGhlbWU9ImJsdWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWltLXJldmlld3M9ImZhbHNlIiBkYXRhLWltLXdpZHRoPSIxMjUiIGRhdGEtaW0taGVpZ2h0PSIyNDUiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjYWxsX3RyYWNraW5nIGJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX19tZWRpdW0gYnV0dG9uX19jb250YWN0IGJ1dHRvbl9fc2Vjb25kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9hZ2VudENhbGxFdmVudC8xMzQxNC83NjIxMDktMT9wYWdlPWFubm9uY2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbW9kYWwtc2hvdy1udW1iZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1tb2JpbGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iY2FsbF90cmFja2luZ190ZXh0Ij5BZmZpY2hlciBsZSBudW3DqXJvPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKPGZvcm0gbmFtZT0iY29udGFjdF9hZ2VudCIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTUtcGllY2VzLXBhcmlzLTEzOG0yL3I3NjIxMDktMT9fbG9jYWxlPWZyIiBjbGFzcz0iZm9ybV9fcGVyc29uIiBkYXRhLXBhcnNsZXktdmFsaWRhdGU9InRydWUiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iY29udGFjdF9hZ2VudF9fdG9rZW4iIG5hbWU9ImNvbnRhY3RfYWdlbnRbX3Rva2VuXSIgdmFsdWU9IkNvRGV6TkdiQUl4MTdPVFFsU2ZUUmkxbkdabm9NSlBBVXZEcUg3M3h6d0EiIC8+CjxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLW5hbWU9Ik1vdGlmIiBkYXRhLXRpdGxlPSJOwrA3NjIxMDktMSI+CiAgICA8YSBocmVmPSIjIj5Nb3RpZjwvYT4KICAgIDx1bCBkYXRhLXR5cGU9ImNvbnRhY3RfYWdlbnRbbW90aWZwdF0iIGRhdGEtbmFtZT0ibW90aWYiIGNsYXNzPSJzZWxlY3RfX2lucHV0Ij4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMSI+CiAgICAgICAgICAgICAgICBKZSBzdWlzIGludMOpcsOpc3PDqShlKSBwYXIgdW4gYmllbgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyIj4KICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlcmFpcyBhdm9pciBwbHVzIGQmIzAzOTtpbmZvcm1hdGlvbnMKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMyI+CiAgICAgICAgICAgICAgICBKZSBzb3VoYWl0ZXJhaXMgdmlzaXRlciBjZSBiaWVuCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjQiPgogICAgICAgICAgICAgICAgSmUgc291aGFpdGVyYWlzIG1lIHJlbnNlaWduZXIgc3VyIGxlcyBiaWVucyBhdXggYWxlbnRvdXJzCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjb250YWN0X2FnZW50W21vdGlmcHRdIi8+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJjb250YWN0X2FnZW50X2ZpcnN0X25hbWUiIG5hbWU9ImNvbnRhY3RfYWdlbnRbZmlyc3RfbmFtZV0iIHJlcXVpcmVkPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9IlByw6lub20gKiIgLz4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJjb250YWN0X2FnZW50X2xhc3RfbmFtZSIgbmFtZT0iY29udGFjdF9hZ2VudFtsYXN0X25hbWVdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJOb20gKiIgLz4KICAgIDwvZGl2Pgo8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICA8aW5wdXQgdHlwZT0iZW1haWwiIGlkPSJjb250YWN0X2FnZW50X2VtYWlsIiBuYW1lPSJjb250YWN0X2FnZW50W2VtYWlsXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iRW1haWwgKiIgcGF0dGVybj0iLipALiooXC5bYS16QS1aMC05Li1dKykrJCIgZGF0YS1wYXJzbGV5LXR5cGU9ImVtYWlsIiAvPgo8L2Rpdj4KPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJjb250YWN0X2FnZW50X3Bob25lIiBuYW1lPSJjb250YWN0X2FnZW50W3Bob25lXSIgcGxhY2Vob2xkZXI9IlTDqWzDqXBob25lIiBtaW5MZW5ndGg9IjYiIHBhdHRlcm49IlxkKiIgLz4KPC9kaXY+Cgo8dGV4dGFyZWEgaWQ9ImNvbnRhY3RfYWdlbnRfbWVzc2FnZSIgbmFtZT0iY29udGFjdF9hZ2VudFttZXNzYWdlXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iTWVzc2FnZSI+PC90ZXh0YXJlYT4KPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQgcm93ICI+CjxpbnB1dCBjbGFzcz0iY29sLTEiIHR5cGU9ImNoZWNrYm94IiBzdHlsZT0idG9wOjJweDtsZWZ0OjhweCIgbmFtZT0icmVnaXN0ZXJfbmV3c2xldHRlciIgaWQ9InJlZ2lzdGVyX25ld3NsZXR0ZXIiLz4KPGxhYmVsIGNsYXNzPSJjb2wtMTAgYWNjZXB0X25ld3NsZXR0ZXIiIHN0eWxlPSJjb2xvcjp3aGl0ZTtmb250LXNpemU6MTJweCIgZm9yPSJyZWdpc3Rlcl9uZXdzbGV0dGVyIj4KICAgIEplIHNvdWhhaXRlIHJlY2V2b2lyIHBhciBuZXdzbGV0dGVyIGRlcyBhbm5vbmNlcyBzdXNjZXB0aWJsZXMgZGUgbeKAmWludMOpcmVzc2VyIGV0IGRlcyBjb25zZWlscyDDoCBs4oCZYWNoYXQgZGUgbGEgcGFydCBk4oCZaWFkLgo8L2xhYmVsPgo8L2Rpdj4KPGRpdiBpZD0iYXNpZGUtY2FwdGNoYSIgY2xhc3M9ImctcmVjYXB0Y2hhIiBkYXRhLXNpdGVrZXk9IjZMY0hVRE1VQUFBQUFGQlh4OTUtUURZazM1eGZzeFcyalgtdnhjU3giPjwvZGl2PgoKPGRpdiBjbGFzcz0iZm9ybV9fZm9vdGVyIj4KICAgIDxidXR0b24gaWQ9ImJ0bi1hY2hhdCIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX193aGl0ZSBidXR0b25fX21lZGl1bSI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgIDxzcGFuPk1lIGNvbnRhY3Rlcjwvc3Bhbj4KICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT4KICAgIDwvYnV0dG9uPgo8L2Rpdj4KPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL01BUklFLk1JUVVFQVUiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLTIiPjwvaT4gTWVzIGFubm9uY2VzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJibHVlLWdyYWRpZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1jYWxjdWxhdG9yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FsY3VsYXRldXIgZGUgbWVuc3VhbGl0w6kgZGUgYmllbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWZyYW1lIGlkPSJjYWxjdWxhdG9yLWlmcmFtZSIgc3JjPSJodHRwczovL3d3dy5ldXJvcGVhbi1zb2Z0LmNvbS9zZXJ2aWNlcy13ZWIvY2FwYWNpdGUtYWNoYXQucGhwP2lkX3NpdGU9NTAmdGV4dGU9b3VpJmltcHJpbWVyPW91aSZjc3M9aHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2Nzcy9jYWxjdWxhdG9yLWQ1ZjIwMTY3YzUubWluLmNzcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVib3JkZXI9IjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9pZnJhbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc2lkZT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KCgogICAgICAgICAgICA8ZGl2IGlkPSJzaW1pbGFyQWRzIiBjbGFzcz0id3JhcHBlciBvZmZlcl9fc2xpZGVyLTIiIHN0eWxlPSJwYWRkaW5nLXRvcDogNTBweCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz0iaDMgdGl0bGVfX21haW4iPjxiPkFubm9uY2VzIHNpbWlsYWlyZXM8L2I+IMOgICAgICAgICAgICAgICAgIFBBUklTCiAgICAgICAgICAgICAgICA8cD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fYWxlcnQgYnV0dG9uX19tZWRpdW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbG9naW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWI9ImxvZ2luLXRhYiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogLjkzNzVyZW07IHBvc2l0aW9uOiByZWxhdGl2ZTsgZm9udC13ZWlnaHQ6NjAwIDtwYWRkaW5nOiAxMHB4IDE1cHg7ZGlzcGxheTogaW5saW5lLWJsb2NrO2JhY2tncm91bmQ6ICMwMDQ5NzY7IGJvcmRlcjogMDsgY29sb3I6ICNmZmY7IGZvbnQtc2l6ZTogMTVweDs7IGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmLCdTb3VyY2UgQ29kZSBQcm8nIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q3LDqWVyIHVuZSBhbGVydGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICA8L2gzPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHNsaWRlcl9fYW5ub25jZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS00LXBpZWNlcy1wYXJpcy0xMjJtMi9yNzYyMTA5LTU/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTQyMTY4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTQyMTY4LmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19uZXciPk5vdXZlYXU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19wcmVzdGlnZSI+UHJlc3RpZ2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9NQVJJRS5NSVFVRUFVIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJNYXJpZSBNSVFVRUFVIiBpdGVtcHJvcD0ic2FtZUFzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZ2VudF9waG90b190aHVtYi9hdmF0YXIvMTg4ODUyMy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJNYXJpZSBNSVFVRUFVIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IGltZyIgaXRlbXByb3A9ImltYWdlIj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbmFtZSI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjLW9mZmVyX190aXRsZSIgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtNC1waWVjZXMtcGFyaXMtMTIybTIvcjc2MjEwOS01P19sb2NhbGU9ZnIiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSAxMjIgbcKyIC0gUEFSSVMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fZmF2b3JpdGVzICIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4tMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGlzdHJpY3Q/dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJncF9pZCUyMiUyQyUyMnZhbHVlJTIyJTNBMjA0MzMyNTgzMSUyQyUyMm5hbWUlMjIlM0ElMjJQQVJJUyUyQiUyODc1MDEzJTI5JTJCUGFyaXMlMkIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCZhbXA7Z3BfaWQ9MjA0MzMyNTgzMSI+UEFSSVMgKDc1MDEzKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Sw6lmw6lyZW5jZSA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNzYyMTA5LTUKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3ByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgMzAwIDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBNYXJpZSBNSVFVRUFVICgwNiAzMiA3OSAwNCA0Nikgdm91cyBwcm9wb3NlIDogUEFSSVMgMTMgLyBRVUFSVElFUiBCTkYgLyAgUkVSIEMgLyBNRVRSTyAxNC8gVDNhIExFIFFVQVJUSUVSOiBMYSBCTkYsIGzigJl1bml2ZXJzaXTDqSBEaWRlcm90LCBsZXMgRnJpZ29zLCBsZSBjaW7DqW1hIE1LMuKApi4uYmllbnZlbnVlIGRhbnMgbGEganVuZ2xlIHVyYmFpbmUgZGUgY2UgcXVhcnRpZXIgZHUgMTPDqG1lIGFycm9uZGlzc2VtZW50Li4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiAxMjIgbcKyPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGllY2UtNCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvTUFSSUUuTUlRVUVBVSIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnNlaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3RleiB2b3RyZSBjb25zZWlsbGVyPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBpZD0ibW9kYWwtc2hvdy1udW1iZXIiIGNsYXNzPSJtb2RhbERpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgICAgICA8cD4wNjMyNzkwNDQ2PC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIiBzdHlsZT0iYmFja2dyb3VuZDogbm9uZTtjb2xvcjogYmxhY2s7Ij48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+QW5udWxlcjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIG9uY2xpY2s9ImxvY2F0aW9uLmhyZWY9J3RlbDowNjMyNzkwNDQ2JzsiIHZhbHVlPSJBcHBlbGVyIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgCiAgICAgICAgPC9zZWN0aW9uPgo8L21haW4+CgogICAgPGZvb3RlciBjbGFzcz0iZm9vdGVyIiBpZD0iZm9vdGVyIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1dQRm9vdGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgb3RoZXJfX21lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaXJzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW50ZS9hbm5vbmNlcy9leGNsdXNpdml0ZS9saXN0ZS9hbm5vbmNlLXJlc3VsdGF0P2V4Y2x1c2l2ZT0xIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIExlcyBleGNsdXNpdml0w6lzIGlhZAoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZXN0aW1lci12b3RyZS1iaWVuIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIEVzdGltZXogdm90cmUgYmllbgoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvdHJvdXZlci11bi1jb25zZWlsbGVyIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIFRyb3V2ZXogdW4gY29uc2VpbGxlcgoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL21hY29uY2llcmdlcmllLWlhZC5mci8iICAgICB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9IiI+CiAgICAgICAgICAgIENvbmNpZXJnZXJpZSBpYWQKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FjaGF0L2NvdXAtZGUtY29ldXIvbGlzdGUvYW5ub25jZXMiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgTm9zIGNvdXBzIGRlIGNvZXVyCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Iml0ZW0taGlnaGxpZ2h0ZWQgbGFzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW50ZS9hbm5vbmNlcy9pbW1vYmlsaWVyLXByZXN0aWdlL2xpc3RlLXJlc3VsdGF0P3JhZGl1cz0yMCZhbXA7dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7dGFncyU1QjAlNUQ9cHJlc3RpZ2UiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgQWNoYXQgZGUgcHJlc3RpZ2UKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCgogICAgPC91bD4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC03Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBzb2NpYWwiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZV9fbGFyZ2UtMSI+U3VpdmV6IG5vdXMgOjwvcD4KICAgICAgICAgICAgICAgICAgICA8dWwgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CgkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9JQURGcmFuY2UiIGl0ZW1wcm9wPSJzYW1lQXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayI+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZiLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vSUFERnJhbmNlIiBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkZW1vLWljb24gaWNvbi10d2l0dGVyLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9jb21wYW55L2ltbW9iaWxpZXItZG9taWNpbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkZW1vLWljb24gaWNvbi1saW5rZWRpbi1yb25kIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL0lBREZyYW5jZSIgaXRlbXByb3A9InNhbWVBcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24teW91dHViZS1yb25kIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2lhZGZyYW5jZW9mZmljaWVsLyIgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGVtby1pY29uIGljb24taW5zdGFncmFtLXJvbmQiPjwvaT48L2E+PC9saT4KCQkJICAgICAgICAJCQkJCQkJCiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJCQkJCSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgcGFydG5lcnMiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5pYWQgZXN0IG1lbWJyZSA6IDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvVW5pc19Mb2dvdHlwZV9zb2xvX0NvdWxldXIucG5nIiB3aWR0aD0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iIiBhbHQ9IlVuaXMiPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lbnVfX3RoaXJkIj4KICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci1uYXYiPgogICAgICAgICAgICA8bGkgY2xhc3M9ImZpcnN0Ij48YSBocmVmPSIvIj5BY2N1ZWlsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9xdWktc29tbWVzLW5vdXMiPlF1aSBzb21tZXMtbm91czwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL2VzcGFjZS1wcmVzc2UiPkVzcGFjZSBQcmVzc2U8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9tZW50aW9ucy1sZWdhbGVzIj5NZW50aW9ucyBsw6lnYWxlczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL1BvbGl0aXF1ZS1kZS1jb25maWRlbnRpYWxpdGUiPlBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvbWVkaWF0aW9uIj5Nw6lkaWF0aW9uPC9hPjwvbGk+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9jb250YWN0ZXotbm91cyI+Tm91cyBjb250YWN0ZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL2JhcmVtZS5pYWRmcmFuY2UuZnIvIiB0YXJnZXQ9Il9ibGFuayI+QmFyw6htZSBkJ2hvbm9yYWlyZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ltZ3MvOTk2MDcxMTQ3YWMxYjhiMTM1YzY4NzU0Yjc5ZmQxNWQucGRmIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmFyw6htZSBFJmFtcDtDCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwvZm9vdGVyPgoKICAgICAgICAgICAgPCEtLSBNb2RhbCAtLT4KICAgIDxkaXYgY2xhc3M9Im1vZGFsRGlhbG9nIG1vZGFsIGZhZGUiIGlkPSJtZXNzYWdlLW1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVzc2FnZSBtZXNzYWdlLWNvbnRlbnQiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJub19yZXN1bHQiIGNsYXNzPSJtb2RhbERpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIGZ1bGwtd2lkdGgiIGlkPSJhbGVydC1uby1yZXN1bHQtbW9kYWwiPgogICAgICAgIDxzcGFuIGNsYXNzPSJjbG9zZS1tb2RhbCB0ZXh0LXJpbmciIGlkPSJjbG9zZS1hbGVydC1uby1yZXN1bHQiPng8L3NwYW4+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0X3JpbmciPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yaW5nIj48L2k+IENyw6llciB1bmUgYWxlcnRlIHBvdXIgY2V0dGUgcmVjaGVyY2hlIDwvZGl2PgogICAgICAgICAgICA8cD48c3Ryb25nPkF1Y3VuZSBhbm5vbmNlIG5lIGNvcnJlc3BvbmQgw6Agdm90cmUgcmVjaGVyY2hlPzwvc3Ryb25nPjwvcD4KICAgICAgICAgICAgPHA+TW9kaWZpZXogdm9zIGNyaXTDqHJlcyBvdSBsYWlzc2V6IHZvdXMgZ3VpZGVyIHBhciBub3Mgc3VnZ2VzdGlvbnMuPC9wPgogICAgICAgICAgICA8cD48c3Ryb25nPlJhcHBlbCBkZSB2b3MgY3JpdMOocmVzIDo8L3N0cm9uZz48L3A+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNyaXRlcmlhcyI+CgkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgICAgICAgICAgPGZvcm0gaWQ9ImFsZXJ0Tm9SZXN1bHRGb3JtIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIHBsYWNlaG9sZGVyPSJFbWFpbCIgY2xhc3M9InRleHQtZGFuZ2VyIGZvcm0tY29udHJvbCBpbm5lci1idXR0b24iIGlkPSJhbGVydC1lbWFpbCI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJ0ZXh0LXJpbmcgbm8tYm9yZGVyIiBpZD0iYWxlcnQtZW1haWwtYnV0dG9uIiBocmVmPSIvcHJvZmlsZS9hbGVydC9hZGQiPk9LPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+ICAgIDxkaXYgaWQ9ImJ1c2luZXNzQ2FyZE1vZGFsIiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCBidXNpbmVzc0NhcmRDb250ZW50Ij48L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDxkaXYgaWQ9ImNvbnRhY3RBZ2VudE1vZGFsIiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+PC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8ZGl2IGlkPSJsb2dpbiIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9ImMtbW9kYWwgdGFiLWNvbm5lY3QiPgogICAgICAgIDx1bCBjbGFzcz0idGFicyI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0idGFiLWxpbmsgY3VycmVudCIgZGF0YS10YWI9ImxvZ2luLXRhYiI+U2UgY29ubmVjdGVyPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJ0YWItbGluayIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+Q3LDqWVyIHVuIGNvbXB0ZTwvbGk+CiAgICAgICAgPC91bD4KCiAgICAgICAgPGRpdiBpZD0ibG9naW4tdGFiIiBjbGFzcz0idGFiLWNvbnRlbnQgY3VycmVudCI+CiAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii9sb2dpbl9jaGVjayIKICAgICAgICAgIG5hbWU9ImNvbm5leGlvbiIgbWV0aG9kPSJwb3N0IiBjbGFzcz0iZm9ybV9fY29ubmV4aW9uIj4KICAgICAgICA8IS0tcCBjbGFzcz0idGl0bGUiPkNvbm5lY3Rlei12b3VzIGF2ZWMgbGVzIHLDqXNlYXV4IHNvY2lhdXg8L3A+CiAgICAgICAgPGRpdiBjbGFzcz0ibC1zb2NpYWwiPgogICAgICAgICAgICA8YSBocmVmPSIvY29ubmVjdC9mYWNlYm9vayIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJmYiI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmItcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L3R3aXR0ZXIiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0idHciPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L2dvb2dsZSIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ5dCI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZ29vZ2xlLXBsdXMtcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L2xpbmtlZGluIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImxrZCI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGlua2VkaW4tcm9uZCI+PC9pPgo8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIj4KICAgICAgICAgICAgPHA+T3U8L3A+CiAgICAgICAgPC9kaXYtLT4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfY3NyZl90b2tlbiIgdmFsdWU9IldrN2hMcERINmF3aWV4WmkydnZwQnFaUUJJV1EzMVBnYlpMX3pkakphZzAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IkVtYWlsIiBuYW1lPSJfdXNlcm5hbWUiPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgPGlucHV0IG5hbWU9Il9wYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiIHBsYWNlaG9sZGVyPSJNb3QgZGUgcGFzc2UiIGlkPSJwYXNzd29yZCI+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5mb3JtYXRpb25zIHJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InJlbWVtYmVyIiBuYW1lPSJfcmVtZW1iZXJfbWUiIHZhbHVlPSJvbiI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyZW1lbWJlciI+U2Ugc291dmVuaXIgZGUgbW9pPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNwYXNzX2ZvcmdldF9kaXYiIGNsYXNzPSJmb3JtX19mb3JnZXQiCiAgICAgICAgICAgICAgICAgICBpZD0iY29ubmVjdF9mb3JnZXRfcGFzc3dvcmQiPgogICAgICAgICAgICAgICAgICAgIE1vdCBkZSBwYXNzZSBwZXJkdSA/ICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fZm9vdGVyIj4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJzdWJtaXRfY29ubmVjdGlvbiIgbmFtZT0iX3N1Ym1pdCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICAgICAgICAgIENvbm5leGlvbiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgPC9mb3JtPgoKCiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgaWQ9InJlZ2lzdGVyLXRhYiIgY2xhc3M9InRhYi1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iL3JlZ2lzdGVyLyIKICAgICAgICAgIG5hbWU9InJlZ2lzdHJhdGlvbiIgbWV0aG9kPSJwb3N0IiBjbGFzcz0iZm9ybV9fcmVnaXN0ZXIiPgoJCSAgCiAgICAgICAgPHAgY2xhc3M9InRpdGxlX19tYWluIj4KCQkJCUNyw6lleiB2b3RyZSBjb21wdGUgcG91ciBiw6luw6lmaWNpZXIgZOKAmXVuIHN1aXZpIHBlcnNvbm5hbGlzw6kJCQkJPC9wPgogICAgICAgIDwhLS1wIGNsYXNzPSJ0aXRsZSI+Q29ubmVjdGV6LXZvdXMgYXZlYyBsZXMgcsOpc2VhdXggc29jaWF1eDwvcD4KICAgICAgICA8ZGl2IGNsYXNzPSJsLXNvY2lhbCI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25uZWN0L2ZhY2Vib29rIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImZiIj4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mYi1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvdHdpdHRlciIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ0dyI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdHdpdHRlci1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvZ29vZ2xlIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9Inl0Ij4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1nb29nbGUtcGx1cy1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvbGlua2VkaW4iIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0ibGtkIj4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1saW5rZWRpbi1yb25kIj48L2k+CjwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3IiPgogICAgICAgICAgICA8cD5PdTwvcD4KICAgICAgICA8L2Rpdi0tPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIGlkPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybV9lbWFpbCIgbmFtZT0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1bZW1haWxdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJTYWlzaXNzZXogdW5lIGFkcmVzc2UgZS1tYWlsIiBwYXR0ZXJuPSIuKkAuKihcLlthLXpBLVowLTkuLV0rKSskIiAvPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0IHJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX3BsYWluUGFzc3dvcmRfZmlyc3QiIG5hbWU9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtW3BsYWluUGFzc3dvcmRdW2ZpcnN0XSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iQ3LDqWV6IHVuIG1vdCBkZSBwYXNzZSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX3BsYWluUGFzc3dvcmRfc2Vjb25kIiBuYW1lPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybVtwbGFpblBhc3N3b3JkXVtzZWNvbmRdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJWYWxpZGV6IGxlIG1vdCBkZSBwYXNzZSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8ZGl2IGlkPSJyZWNhcHRjaGFSZWdpc3RlciI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1fY2d1IiBuYW1lPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybVtjZ3VdIiByZXF1aXJlZD0icmVxdWlyZWQiIHZhbHVlPSIxIiAvPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX2NndSI+CgkJCQkJICAgICAJCQkJCQlK4oCZYWNjZXB0ZSBsZXMgY29uZGl0aW9ucyBnw6luw6lyYWxlcyBk4oCZdXRpbGlzYXRpb24gZGUgaWFkPGJyPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3ViLXR4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIEVuIHZvdXMgZW5yZWdpc3RyYW50LCB2b3VzIGNvbnNlbnRleiDDoCBs4oCZaMOpYmVyZ2VtZW50IGV0IGF1IHRyYWl0ZW1lbnQgZGUgdm9zIGRvbm7DqWVzIMOgIGNhcmFjdMOocmUgcGVyc29ubmVsIHBhciBJQEQgRnJhbmNlIGRhbnMgbGVzIGNvbmRpdGlvbnMgZMOpY3JpdGVzIGRhbnMgbGEgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9mci9Qb2xpdGlxdWUtZGUtY29uZmlkZW50aWFsaXRlIj5Qb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqS48L2E+ICAoIE9ibGlnYXRvaXJlICkKICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InJlZ2lzdGVyX25ld3NsZXR0ZXJSIiBpZD0icmVnaXN0ZXJfbmV3c2xldHRlclIiLz4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyZWdpc3Rlcl9uZXdzbGV0dGVyUiI+CiAgICAgICAgICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlIHJlY2V2b2lyIHBhciBuZXdzbGV0dGVyIGRlcyBhbm5vbmNlcyBzdXNjZXB0aWJsZXMgZGUgbeKAmWludMOpcmVzc2VyIGV0IGRlcyBjb25zZWlscyDDoCBs4oCZYWNoYXQgZGUgbGEgcGFydCBk4oCZaWFkCiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJwcm9tbyIgbmFtZT0icHJvbW9QIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwcm9tbyI+CgkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIErigJlhY2NlcHRlIGRlIHJlY2V2b2lyIGRlcyBwcm9tb3MgZGVzIHBhcnRlbmFpcmVzIGRlIGlhZAkJCQkJCSAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Zvb3RlciI+CiAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIj5TJ2luc2NyaXJlPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX190b2tlbiIgbmFtZT0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1bX3Rva2VuXSIgdmFsdWU9IjJxcDE1ZE5CRnpmV0pRcW9NQUc1SlZsSldxNnJkU1JvRVltM1pwOXJUTmciIC8+CiAgICA8L2Zvcm0+CgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBpZD0icGFzc19mb3JnZXRfZGl2IiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+PHNwYW4gY2xhc3M9ImN1c3RvbS1pY29uIG1vZGFsLWNsb3NlLWljb24iIGRhdGEtZGlzbWlzcz0ibW9kYWwiPjwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIGNsZWFyZml4Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlX19tYWluIj5Nb3QgZGUgcGFzc2Ugb3VibGnDqTwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0idGV4dCI+CiAgICAgICAgICAgICAgICA8cD5FbnRyZXogdm90cmUgYWRyZXNzZSBFbWFpbCBldCBub3VzIHZvdXMgZW52ZXJyb25zIGxhIG1hcmNoZSDDoCBzdWl2cmU8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii9yZXNldHRpbmcvc2VuZC1lbWFpbCIgbmFtZT0iY29ubmV4aW9uIiBtZXRob2Q9InBvc3QiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtX19wYXNzX2ZvcmdldCIgb25zdWJtaXQ9InN1Ym1taXRlZCgpIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Vycm9yIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIHBsYWNlaG9sZGVyPSJFbWFpbCIgaWQ9IiIgbmFtZT0idXNlcm5hbWUiIHJlcXVpcmVkPSJyZXF1aXJlZCI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Zvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJzdWJtaXRfcGFzc19mb3JnZXQiIG5hbWU9IiIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEVudm95ZXIgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPHNjcmlwdD4KICAgIGZ1bmN0aW9uIHN1Ym1taXRlZCgpIHsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGV4dCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICB9Cjwvc2NyaXB0PiAgICA8ZGl2IGlkPSJuZXdBbGVydE1vZGFsIiBjbGFzcz0ibW9kYWxEaWFsb2ciCiAgICAgZGF0YS1tZXNzYWdlPSJWb3VzIGRldmV6IHJlbnNlaWduZXIgYXUgbW9pbnMgdW4gbGlldSBwb3VyIHBvdXZvaXIgZW5yZWdpc3RyZXIgdW5lIGFsZXJ0ZSI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIGZ1bGwtd2lkdGgiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZV9fbWFpbiI+QWxlcnRlIEUtbWFpbDwvZGl2PgogICAgICAgICAgICA8cD5VbmUgYWxlcnRlIGUtbWFpbCBzZXJhIGNyw6nDqWUgw6AgcGFydGlyIGRlcyBjcml0w6hyZXMgZGUgdm90cmUgcmVjaGVyY2hlLjwvcD4KICAgICAgICAgICAgPHA+VmV1aWxsZXogY2hvaXNpciBsYSA8c3Ryb25nPmZyZXF1ZW5jZSBkZSBsJ2FsZXJ0ZTwvc3Ryb25nPiA6PC9wPgogICAgICAgICAgICA8Zm9ybSBpZD0idXNlckFsZXJ0Rm9ybSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPkZyw6lxdWVuY2UgZGUgbCdhbGVydGU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImZyZXF1ZW5jeSIgaWQ9ImFsZXJ0LXNlYXJjaC1uYXYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWxlY3RlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJKb3VybmFsacOocmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpvdXJuYWxpw6hyZSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IkhlYmRvbWFkYWlyZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGViZG9tYWRhaXJlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iTWVuc3VlbGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZW5zdWVsbGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiIgc3R5bGU9InBhZGRpbmctYm90dG9tOiAyMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fYWxlcnQgYnV0dG9uX19tZWRpdW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhZGQtYWxlcnQiIGhyZWY9Ii9wcm9maWxlL2FsZXJ0L2FkZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXJpbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DcsOpZXIgbCdhbGVydGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CiAgICA8IS0tIGVuZCBNb2RhbCAtLT4KICAgICAgICAgICAgICAgIAoKICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIG1vZGFsRGlhbG9nIiBpZD0ic2VuZFRvRnJpZW5kTW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+PC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAKCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgdmFyIGdsb2JhbF9jdXJyZW50X2NvdW50cnkgPSAnZnInOwogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvYXBwLWVlYWMyOGE3ZGEubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkuanM/b25sb2FkPW9ubG9hZENhbGxiYWNrJnJlbmRlcj1leHBsaWNpdCZobD1mciIKICAgICAgICAgICAgYXN5bmMgZGVmZXI+PC9zY3JpcHQ+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIKICAgICAgICAgIGhyZWY9Ii8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Nvb2tpZWNvbnNlbnQyLzMuMC4zL2Nvb2tpZWNvbnNlbnQubWluLmNzcyIvPgogICAgPHNjcmlwdCBzcmM9Ii8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Nvb2tpZWNvbnNlbnQyLzMuMC4zL2Nvb2tpZWNvbnNlbnQubWluLmpzIj48L3NjcmlwdD4KCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0icmVxdWllcmVkTWVzc2FnZSIgdmFsdWU9IkNlIGNoYW1wIGVzdCByZXF1aXMiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImludmFsaWRNZXNzYWdlIiB2YWx1ZT0iVm90cmUgYWRyZXNzZSBlLW1haWwgZXN0IGludmFsaWRlIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJyZXF1aWVyZWRNZXNzYWdlQ0IiCiAgICAgICAgICAgdmFsdWU9IlZldWlsbGV6IGNvY2hlciBjZXR0ZSBjYXNlIHNpIHZvdXMgc291aGFpdGV6IGNvbnRpbnVlciI+CgogICAgPC9ib2R5Pgo8L2h0bWw+Cg==
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:09 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-piece-paris-32m2/r762109-2?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:09 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=ca3b1a47310481c72a12f7f446fcb6eb; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:09 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:09 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:09 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-48m2/r762109-3?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:10 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=0a3b1a75d29788dfb0196700093c0930; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:10 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:10 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:10 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-3-pieces-paris-95m2/r762109-4?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:10 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=9d388ed9f2a16207f0ed7d4c2e38dff3; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:10 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:10 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:10 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-4-pieces-paris-122m2/r762109-5?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:10 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=987dc187cd313bd714dc54fffe0b691d; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:10 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:10 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:11 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-5-pieces-paris-171m2/r762109-6?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:11 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=d5fbb438c55406a3c6c3cd7d0cce5768; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:11 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:11 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:11 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-50m2/r762109-7?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:11 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=1c3b68c5502d08c2dcee3905cd02e9a7; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:11 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:11 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:12 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/loft-atelier-surface-vente-4-pieces-paris-109m2/r759250?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:12 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=0b10e60589b1d0d3455f7e88d946bfb5; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:12 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:12 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:12 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-27m2/r756317?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:12 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=5b22e19187941218d5d0d798f4ff720d; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:12 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:12 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:12 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-piece-paris-10m2/r755027?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:13 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=1b8fd203f1c6cc0a9cd8dec141bb2134; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:13 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:13 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:13 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-30m2/r715347?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:13 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=965e988d6f34bb1603c72ec38e1ca4ad; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:13 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:13 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:13 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-3-pieces-paris-64m2/r760696?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:14 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=f02277b6fb7dcb44a53655cb2c6be16d; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:14 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:14 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:14 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-67m2/r738995?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:15 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=3463f931bce3d26c188f8f8736f9456f; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:15 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:15 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:15 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-2-pieces-paris-40m2/r738211?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:15 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=e6af2aafacc34c6c1a05f5c145faa397; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:15 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:15 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:15 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-4-pieces-paris-84m2/r760284?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 03 Apr 2020 10:35:16 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=68f7022e1a0a37942b3a10c876391ed2; path=/; HttpOnly
      - country=fr; expires=Sat, 03-Apr-2021 10:35:16 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Sat, 03-Apr-2021 10:35:16 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 03 Apr 2020 10:35:16 GMT
recorded_with: VCR 5.1.0
