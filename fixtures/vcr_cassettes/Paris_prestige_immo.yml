---
http_interactions:
- request:
    method: post
    uri: http://www.parisprestigeimmo.fr/fr/recherche/
    body:
      encoding: UTF-8
      string: nature=1&type%5B%5D=1&type%5B%5D=2&city%5B%5D=32550&city%5B%5D=32551&city%5B%5D=32552&city%5B%5D=32553&city%5B%5D=32554&city%5B%5D=32555&city%5B%5D=32556&city%5B%5D=32557&city%5B%5D=32558&city%5B%5D=32559&city%5B%5D=32560&city&city%5B%5D=32561&city%5B%5D=32562&city%5B%5D=32563&city%5B%5D=32564&city%5B%5D=32565&city%5B%5D=32566&city%5B%5D=32567&city%5B%5D=32568&city%5B%5D=32569&price=&age=&tenant_min=&tenant_max=&rent_type=&currency=EUR&homepage=
    headers:
      User-Agent:
      - Typhoeus - https://github.com/typhoeus/typhoeus
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Apr 2020 08:15:15 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=0cdqcikikbvco276eatn1aots2; path=/
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 17 Apr 2020 08:15:15 GMT
- request:
    method: get
    uri: http://www.parisprestigeimmo.fr/fr/recherche/vente-appartement-2-pieces-paris-13eme-croulebarbe-75013-3627245
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Apr 2020 08:15:15 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=qbojsapcuql3lbil410p0ofve2; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '7354'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 17 Apr 2020 08:15:15 GMT
- request:
    method: get
    uri: http://www.parisprestigeimmo.fr/fr/recherche/vente-appartement-2-pieces-paris-18eme-75018-3599022
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Apr 2020 08:15:15 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=7e1e0gfuk266mvgt87anhl90b7; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '7268'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 17 Apr 2020 08:15:15 GMT
- request:
    method: get
    uri: http://www.parisprestigeimmo.fr/fr/recherche/vente-appartement-2-pieces-paris-12eme-75012-3669377
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Apr 2020 08:15:16 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=72s3v2kkn29v12gmhahkmoseb4; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '7256'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 17 Apr 2020 08:15:16 GMT
- request:
    method: get
    uri: http://www.parisprestigeimmo.fr/fr/recherche/vente-appartement-3-pieces-paris-13eme-75013-1646282
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Apr 2020 08:15:16 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=6bmco7t6916iepvq2p62f7bq24; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '7390'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 17 Apr 2020 08:15:16 GMT
- request:
    method: get
    uri: http://www.parisprestigeimmo.fr/fr/recherche/vente-appartement-3-pieces-paris-15eme-javel-75015
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Apr 2020 08:15:16 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=36d61fakacfe1ki8oplm6hlh41; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '7462'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 17 Apr 2020 08:15:16 GMT
- request:
    method: get
    uri: http://www.parisprestigeimmo.fr/fr/recherche/vente-appartement-4-pieces-paris-15eme-75015-3595416
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Apr 2020 08:15:17 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=hfd6hnaqkj2he1qtou53lkrqk7; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '7698'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 17 Apr 2020 08:15:17 GMT
- request:
    method: get
    uri: http://www.parisprestigeimmo.fr/fr/recherche/vente-appartement-5-pieces-paris-14eme-75014-3568556
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 17 Apr 2020 08:15:17 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Upgrade:
      - h2
      Connection:
      - Upgrade
      Set-Cookie:
      - symfony=rnnb7narolj6va3v5nrfq9rra4; path=/
      Vary:
      - Accept-Encoding
      Content-Length:
      - '7547'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Fri, 17 Apr 2020 08:15:17 GMT
recorded_with: VCR 5.1.0
