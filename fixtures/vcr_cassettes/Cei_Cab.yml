---
http_interactions:
- request:
    method: get
    uri: https://www.cei-cab.com/annonces?budget=&categorie=vente&id_polygon=&localisation=Paris%20(75)&localisation_etendu=1&nb_pieces=&submit=Rechercher&surface=&type_bien=appartement&visite_virtuelle=
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 10 Apr 2020 16:46:15 GMT
      Server:
      - Apache
      Pragma:
      - no-cache
      Content-Security-Policy:
      - 'script-src ''self'' ''unsafe-inline'' ''unsafe-eval'' data: www.google.com
        apis.google.com *.googleapis.com *.rodacom.net www.rodacom.fr connect.facebook.net
        www.facebook.com platform.twitter.com www.googletagmanager.com www.google-analytics.com
        *.gstatic.com *.github.io https:;'
      X-Content-Security-Policy:
      - 'script-src ''self'' ''unsafe-inline'' ''unsafe-eval'' data: www.google.com
        apis.google.com *.googleapis.com *.rodacom.net www.rodacom.fr connect.facebook.net
        www.facebook.com platform.twitter.com www.googletagmanager.com www.google-analytics.com
        *.gstatic.com *.github.io https:;'
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Vary:
      - Accept-Encoding
      Content-Type:
      - text/html;charset=UTF-8
      Cache-Control:
      - max-age=15, public
      Last-Modified:
      - Fri, 10 Apr 2020 16:46:17 GMT
      X-Varnish:
      - 26027431 61806
      Age:
      - '516127'
      Via:
      - 1.1 varnish (Varnish/5.0)
      Expires:
      - Thu, 16 Apr 2020 16:08:39 GMT
      Accept-Ranges:
      - bytes
      Content-Length:
      - '11411'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:08:24 GMT
- request:
    method: get
    uri: https://www.cei-cab.com/annonces-vente/appartement-6-pieces-paris-10-515661.htm
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 09 Apr 2020 18:26:26 GMT
      Server:
      - Apache
      Pragma:
      - no-cache
      Content-Security-Policy:
      - 'script-src ''self'' ''unsafe-inline'' ''unsafe-eval'' data: www.google.com
        apis.google.com *.googleapis.com *.rodacom.net www.rodacom.fr connect.facebook.net
        www.facebook.com platform.twitter.com www.googletagmanager.com www.google-analytics.com
        *.gstatic.com *.github.io https:;'
      X-Content-Security-Policy:
      - 'script-src ''self'' ''unsafe-inline'' ''unsafe-eval'' data: www.google.com
        apis.google.com *.googleapis.com *.rodacom.net www.rodacom.fr connect.facebook.net
        www.facebook.com platform.twitter.com www.googletagmanager.com www.google-analytics.com
        *.gstatic.com *.github.io https:;'
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Vary:
      - Accept-Encoding
      Content-Type:
      - text/html;charset=UTF-8
      Cache-Control:
      - max-age=15, public
      Last-Modified:
      - Thu, 09 Apr 2020 18:26:28 GMT
      X-Varnish:
      - 26027433 133063
      Age:
      - '596517'
      Via:
      - 1.1 varnish (Varnish/5.0)
      Expires:
      - Thu, 16 Apr 2020 16:08:40 GMT
      Accept-Ranges:
      - bytes
      Content-Length:
      - '13236'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 16 Apr 2020 16:08:25 GMT
recorded_with: VCR 5.1.0
