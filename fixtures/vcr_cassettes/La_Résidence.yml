---
http_interactions:
- request:
    method: get
    uri: https://www.laresidence.fr/nos-annonces?CodesType=20,1&CodesVille=1862,21759,650,554,21952,682,493,21996,654,680,21967,21787,661,21660,21756,22022,573,21861,45938,45937&Etats=Bac&autosave=true
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - ASP.NET_SessionId=mjumg1x02hkofrmzcmjmmiu1; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=464a807d-1f2c-4eae-9af5-26651d63cab3; expires=Thu, 01-Apr-2021 17:49:55
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26CodesVille%3d1862%2c21759%2c650%2c554%2c21952%2c682%2c493%2c21996%2c654%2c680%2c21967%2c21787%2c661%2c21660%2c21756%2c22022%2c573%2c21861%2c45938%2c45937%26CodesType%3d20%2c1%26autosave%3dtrue;
        expires=Thu, 01-Apr-2021 17:49:55 GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:56 GMT
      Content-Length:
      - '27749'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:54 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-05/appartement/1000142610
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-05/appartement/1000142610
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:56 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTA1L2FwcGFydGVtZW50LzEwMDAxNDI2MTAiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:54 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-05/appartement/1000142610
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=gycl3fupn52um0eleq2w13ub; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=3e0ca884-4a35-47ff-a58e-9a8308619429; expires=Thu, 01-Apr-2021 17:49:56
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:49:56
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:56 GMT
      Content-Length:
      - '38890'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:55 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-05/appartement/1000137161
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-05/appartement/1000137161
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:56 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTA1L2FwcGFydGVtZW50LzEwMDAxMzcxNjEiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:55 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-05/appartement/1000137161
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=3l5klgdvi3ep33p0s5ie0tna; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=d7f7dbb1-d413-43a8-81f4-ca42410c006b; expires=Thu, 01-Apr-2021 17:49:57
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:49:57
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:58 GMT
      Content-Length:
      - '39423'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:56 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-19/appartement/1000143421
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-19/appartement/1000143421
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:58 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxNDM0MjEiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:56 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-19/appartement/1000143421
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=f0elxs3ozetlpnzi2f5n5j5z; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=a6dbdbef-3bba-47e7-9629-50b1b585dcb8; expires=Thu, 01-Apr-2021 17:49:58
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:49:58
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:58 GMT
      Content-Length:
      - '36029'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:56 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-20/appartement/1000142780
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-20/appartement/1000142780
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:58 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTIwL2FwcGFydGVtZW50LzEwMDAxNDI3ODAiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:57 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-20/appartement/1000142780
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=3dxfdnokksuiz134is0ufdf4; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=584f5d45-3192-463e-a549-13147654db28; expires=Thu, 01-Apr-2021 17:49:59
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:49:59
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:59 GMT
      Content-Length:
      - '35671'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:57 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-18/appartement/1000142485
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-18/appartement/1000142485
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:59 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE4L2FwcGFydGVtZW50LzEwMDAxNDI0ODUiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:57 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-18/appartement/1000142485
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=wmrmbjyofp3av5t1wr1twzzb; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=172fb328-bb77-46fd-974b-a159ee0047d4; expires=Thu, 01-Apr-2021 17:49:59
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:49:59
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:59 GMT
      Content-Length:
      - '40800'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        DQoNCjwhRE9DVFlQRSBodG1sPg0KPGh0bWwgbGFuZz0iZnIiPg0KDQogICAgPGhlYWQ+PG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+PG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEuMTUsIHVzZXItc2NhbGFibGU9eWVzIiAvPjx0aXRsZT4NCglBY2hhdCBhcHBhcnRlbWVudCAzIHBpw6hjZXMgUGFyaXMgMTjDqG1lICAtIFLDqWY6IDY2OTEgIC0gTEEgUkVTSURFTkNFDQo8L3RpdGxlPjxsaW5rIGhyZWY9Ii9jc3MvcmVzZXQuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVyLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9ImFsbCIgLz48bGluayBocmVmPSIvY3NzL21lbnUuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3Mvc3R5bGVzLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9ImFsbCIgLz4gICAgDQogIA0KICAgICAgICA8bm9zY3JpcHQgaWQ9ImFzeW5jLXN0eWxlc2hlZXRzIj4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPGxpbmsgaHJlZj0iL2Nzcy9zdHlsZXByaW50LmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InByaW50IiAvPjxsaW5rIGhyZWY9Ii9jc3MvQ3VzdG9tRERTdHlsZXMuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3MvTXVsdGlWYWx1ZVRleHRCb3guY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3MvZGlhcG9TdHlsZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJhbGwiIC8+PGxpbmsgaHJlZj0iL2Nzcy9zd2lwZXIuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPg0KICAgICAgICA8L25vc2NyaXB0Pg0KICAgICAgICAgICAgDQogICAgICAgIDwhLS0gTGluayBTd2lwZXIncyBDU1MgLS0+DQogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBocmVmPSIvaW1hZ2VzL2Zhdmljb24ucG5nIiAvPg0KICAgIA0KICAgICAgICA8c2NyaXB0IGlkPSJsb2FkaW5nX3NjcmlwdHMiPiAgICAgICAgICAgIA0KDQogICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkgeyAgDQogICAgICAgICAgICAgICAgdmFyIG5vc2NyaXB0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFzeW5jLXN0eWxlc2hlZXRzIik7ICANCiAgICAgICAgICAgICAgICBpZiAobm9zY3JpcHRDb250YWluZXIgIT0gbnVsbCkgeyAgDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsgIA0KICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gbm9zY3JpcHRDb250YWluZXIudGV4dENvbnRlbnQ7ICANCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpOyAgDQogICAgICAgICAgICAgICAgfSAgDQogICAgICAgICAgICB9LCBmYWxzZSk7ICANCg0KICAgICAgICA8L3NjcmlwdD4NCg0KICAgICAgICA8IS0tIFN3aXBlciBKUyAtLT4NCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgZnVuY3Rpb24gTU1fanVtcE1lbnUodGFyZywgc2VsT2JqLCByZXN0b3JlKSB7IC8vdjMuMA0KICAgICAgICAgICAgICAgIGV2YWwodGFyZyArICIubG9jYXRpb249JyIgKyBzZWxPYmoub3B0aW9uc1tzZWxPYmouc2VsZWN0ZWRJbmRleF0udmFsdWUgKyAiJyIpOw0KICAgICAgICAgICAgICAgIGlmIChyZXN0b3JlKSBzZWxPYmouc2VsZWN0ZWRJbmRleCA9IDA7DQogICAgICAgICAgICB9DQogICAgICAgIDwvc2NyaXB0Pg0KICAgICAgICANCiAgICAgICAgIDwhLS0gRmFjZWJvb2sgUGl4ZWwgQ29kZSAtLT4NCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgIWZ1bmN0aW9uIChmLCBiLCBlLCB2LCBuLCB0LCBzKSB7DQogICAgICAgICAgICAgICAgaWYgKGYuZmJxKSByZXR1cm47IG4gPSBmLmZicSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgbi5jYWxsTWV0aG9kID8NCiAgICAgICAgICAgICAgICAgICAgbi5jYWxsTWV0aG9kLmFwcGx5KG4sIGFyZ3VtZW50cykgOiBuLnF1ZXVlLnB1c2goYXJndW1lbnRzKQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgaWYgKCFmLl9mYnEpIGYuX2ZicSA9IG47IG4ucHVzaCA9IG47IG4ubG9hZGVkID0gITA7IG4udmVyc2lvbiA9ICcyLjAnOw0KICAgICAgICAgICAgICAgIG4ucXVldWUgPSBbXTsgdCA9IGIuY3JlYXRlRWxlbWVudChlKTsgdC5hc3luYyA9ICEwOw0KICAgICAgICAgICAgICAgIHQuc3JjID0gdjsgcyA9IGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSlbMF07DQogICAgICAgICAgICAgICAgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LCBzKTsNCiAgICAgICAgICAgIH0od2luZG93LCBkb2N1bWVudCwgJ3NjcmlwdCcsICdodHRwczovL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL2ZiZXZlbnRzLmpzJyk7ICAgICAgICANCiAgICAgICAgICAgIGZicSgnaW5pdCcsICcxNjUwMzc3Nzc0OTYxNzEnKTsNCiAgICAgICAgICAgIGZicSgndHJhY2tTaW5nbGUnLCcxNjUwMzc3Nzc0OTYxNzEnLCAnUGFnZVZpZXcnKTsNCiAgICAgICAgPC9zY3JpcHQ+DQogICAgICAgIDwhLS0gRW5kIEZhY2Vib29rIFBpeGVsIENvZGUgLS0+DQogICAgICAgIA0KICAgICAgICANCg0KICAgIDxsaW5rIGhyZWY9Ii9jc3MvZmljaGUtcHJvZHVpdC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJhbGwiIC8+DQoNCiAgICANCg0KDQogICAgPGxpbmsgaWQ9IkxpbmtDYW5vbmljYWwiIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE4L2FwcGFydGVtZW50LzEwMDAxNDI0ODUiIC8+DQoNCiAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPnsNCiJAY29udGV4dCI6ICJodHRwOi8vc2NoZW1hLm9yZy8iLA0KIkB0eXBlIjogWyJodHRwOi8vc2NoZW1hLm9yZy9Ib3VzZSIsImh0dHA6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiXSwNCiJuYW1lIjogIkFjaGF0IGFwcGFydGVtZW50IDMgcGkmIzIzMjtjZXMgUGFyaXMgMTgmIzIzMjttZSAgLSBSJiMyMzM7ZjogNjY5MSAgLSBMQSBSRVNJREVOQ0UiLA0KInByb2R1Y3RJRCI6ICIxMDAwMTQyNDg1IiwNCiJicmFuZCI6IHsNCiJAdHlwZSI6ICJPcmdhbml6YXRpb24iLA0KIm5hbWUiOiAiTEEgUkVTSURFTkNFIg0KfSwNCiJpbWFnZSI6ICJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQyNDg1LzZiZWZkY2U4LTc2ZjYtNDM2OS1hNDhkLTNlMTU1YWNiYmExYi5qcGciLA0KInBob3RvIjogImh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDI0ODUvNmJlZmRjZTgtNzZmNi00MzY5LWE0OGQtM2UxNTVhY2JiYTFiLmpwZyIsDQoidXJsIjogImh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL2FjaGV0ZXIvcGFyaXMtMTgvYXBwYXJ0ZW1lbnQvMTAwMDE0MjQ4NSIsDQoidGVsZXBob25lIjogIjAxLjQyLjI5LjMwLjMwIiwNCiJmbG9vclNpemUiOiAiNjFtwrIiLA0KIm51bWJlck9mUm9vbXMiOiAiMyIsDQoiZGVzY3JpcHRpb24iOiAiRW50cmUgR3V5IE1vcXVldCBldCBMYSBGb3VyY2hlLiBEJiMyMzM7Y291dnJleiBjZSBtYWduaWZpcXVlIGFwcGFydGVtZW50IHRyYXZlcnNhbnQsIGVuIHJlei1kZS1jaGF1c3MmIzIzMztlLCBlbnRpJiMyMzI7cmVtZW50IHImIzIzMztub3YmIzIzMzsgYXZlYyBkJiMzOTtleGNlbGxlbnRzIG1hdCYjMjMzO3JpYXV4LiBEYW5zIHVuZSBwZXQiLA0KIm9mZmVycyI6IHsNCiJAdHlwZSI6ICJPZmZlciIsDQoidXJsIjogImh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL2FjaGV0ZXIvcGFyaXMtMTgvYXBwYXJ0ZW1lbnQvMTAwMDE0MjQ4NSIsDQoicHJpY2VDdXJyZW5jeSI6ICJFVVIiLA0KInByaWNlIjogIjY4NTAwMCIsDQoiYXZhaWxhYmlsaXR5IjogImh0dHA6Ly9zY2hlbWEub3JnL0luU3RvY2siLA0KInNlbGxlciI6IHsNCiJAdHlwZSI6ICJPcmdhbml6YXRpb24iLA0KIm5hbWUiOiAiTEEgUkVTSURFTkNFIg0KfQ0KfQ0KfQ0KPC9zY3JpcHQ+DQogICAgDQoNCjxsaW5rIGhyZWY9Ii9jc3MvbWVkaWFtYXgxMjgwLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkycHgpIGFuZCAobWF4LXdpZHRoOiAxMjgwcHgpIiAvPjxsaW5rIGhyZWY9Ii9jc3MvbWVkaWFtaW43NjhtYXg5OTEuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0ic2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MXB4KSIgLz48bGluayBocmVmPSIvY3NzL21lZGlhbW9iaWxlbWF4MzIwLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY3cHgpIiAvPjxsaW5rIGhyZWY9Ii9jc3MvbWVkaWFtb2JpbGVtaW40ODBtYXg3NjcuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0ic2NyZWVuIGFuZCAobWluLXdpZHRoOiA0ODBweCkgYW5kIChtYXgtd2lkdGg6IDc2N3B4KSIgLz48bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IkFjaGF0IGFwcGFydGVtZW50IDMgcGnDqGNlcyBQYXJpcyAxOMOobWUgIC0gUsOpZjogNjY5MSAgLSBMQSBSRVNJREVOQ0UiIC8+PG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9ImFydGljbGUiIC8+PG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSJFbnRyZSBHdXkgTW9xdWV0IGV0IExhIEZvdXJjaGUuIETDqWNvdXZyZXogY2UgbWFnbmlmaXF1ZSBhcHBhcnRlbWVudCB0cmF2ZXJzYW50LCBlbiByZXotZGUtY2hhdXNzw6llLCBlbnRpw6hyZW1lbnQgcsOpbm92w6kgYXZlYyBkJiMzOTtleGNlbGxlbnRzIG1hdMOpcmlhdXguIERhbnMgdW5lIHBldCIgLz48bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE4L2FwcGFydGVtZW50LzEwMDAxNDI0ODUiIC8+PG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSJodHRwOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDI0ODUvNmJlZmRjZTgtNzZmNi00MzY5LWE0OGQtM2UxNTVhY2JiYTFiLmpwZyIgLz48bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6c2VjdXJlX3VybCIgY29udGVudD0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDE0MjQ4NS82YmVmZGNlOC03NmY2LTQzNjktYTQ4ZC0zZTE1NWFjYmJhMWIuanBnIiAvPjxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTp0eXBlIiBjb250ZW50PSJpbWFnZS9qcGVnIiAvPjxtZXRhIHByb3BlcnR5PSJmYjphcHBfaWQiIGNvbnRlbnQ9IjE0MzU0ODQwNTgyNzMyNCIgLz48bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6d2lkdGgiIGNvbnRlbnQ9IjEyODAiIC8+PG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmhlaWdodCIgY29udGVudD0iODUzIiAvPjxsaW5rIGhyZWY9Ii9XZWJSZXNvdXJjZS5heGQ/ZD1pVUpDV3ctSERyMDRrMFZGN2MzQXNxUDktMXVqeGRlOUlNeHh5cWhpcS1KTGEzcTJLYWRxb1RCNnBoS0ZUcUJYRUh1QUl4UnlFSWEzWC1PLUV6czV5SjRpUDBRU2JsWWk0SFNFbjRMd0dFZWxLeS1Jdkszb0ZxWkR6QVhPTFVfT2MxM0I5SnZ0TnVxQmFvbkR5enM1S3Y5MFk5OTFaWm95ZmlUUFltbWpYZlUxJmFtcDt0PTYzNjk3MDIzMDQ4MDAwMDAwMCIgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgLz48bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iRW50cmUgR3V5IE1vcXVldCBldCBMYSBGb3VyY2hlLiBEw6ljb3V2cmV6IGNlIG1hZ25pZmlxdWUgYXBwYXJ0ZW1lbnQgdHJhdmVyc2FudCwgZW4gcmV6LWRlLWNoYXVzc8OpZSwgZW50acOocmVtZW50IHLDqW5vdsOpIGF2ZWMgZCYjMzk7ZXhjZWxsZW50cyBtYXTDqXJpYXV4LiBEYW5zIHVuZSBwZXQiIC8+PC9oZWFkPg0KDQogICAgPGJvZHk+DQogICAgDQogICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvYWNoZXRlci9wYXJpcy0xOC9hcHBhcnRlbWVudC8xMDAwMTQyNDg1IiBpZD0iTWFpbkZvcm0iPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEUiIGlkPSJfX1ZJRVdTVEFURSIgdmFsdWU9IitvUHJyZTZ5ZXRYWTlUbTYrNU5TODdabnpNeWFLU0VhWFFPMXU1ZUduSFBUakRhdTAxeDZHOFJNM0t4cjN6NjRqQWdnaUN2V1FBMXk4dFFIQWtnSXVYN1lPcko1WG95bmt1Qm1JUkg2NEcvRkFMTnREM1FKSncwanhvckNteWNnZytRdlJVaWZveFV3Wm1kU1NBZlVrQnUwS0laSkZDUi91a1FUd2VjMm15Y0V4cTk1ZFk3cW9vaUJSMlBYeUJkOTN5RG8vQ3NEOFdSVTl2b1RHdWJZWnU0ZmtHTC9ORW9wT1lMak1LODZnMVNYeEdadzVEM0kzcWx5RTFLRlY5V3ZLTURVLzJSeXVROWJUZDA1Y25NaEl0WGMvZDgySTlKdzJLTU1WdTNObVdMdXhWNnh2ZC9GanU5cnprWmpMRFlHNFJnYWgrdzZLa01Gbks4MWM4SUlQR1lxZFlrbkhtQlBjRHNxeWdXTkJZL3N6MjliN25rQ0NNOTdPTnBrbVNnYThGblpZQTNhRnBvYUJDYzkzeUJwMStTeE1PcDVadkY5emltMCtmN3QxSnJWSnFYWE1CaXJDRHp2aXRJV3Jnb0VYYkFDSjJUVjZDYkZyVm1qVlZJRFFzMTk2WERhODRpWTJBalpwN3FaUG1lRlV1WTFmVFl2THRSZE52K3ZYbHJMTFFaZWU1dld6eXMvT2lWMEJzSlcyeEdPcjNVc0RMMG43MFh4VUk2M0hvZ0VJZ1lYSlZKVlR1dS9KeW95RUpVVHAvYnh5akx0R3Bwcm1yRTNMeHM2STJZc2h0SzBicGU4YTRWVEx4SzJrbmhlNTRTYzdHM2RsbU1NN3g5Q3NiMmFBU0hLMldxaWlRL2tPdTRhYktSVlR1ZVlFVklMaks5SW92TnREQ2IxUDlDWTV6ZlVKZmIwZmp2RDNIUytrV1BZWkR2alhRVFNvazFnNXNrTWF0MVR0QTJlNjFubE0wU1RGU1pydkFwK3lpZ1dTWmZnSEw0R2dSbFpKQ3l2cWQ1d3pOYlY4ajhZT0pLdU9iekhxdjZ5RDMxY3FnREttWU9PV0xTMDFCQ0NMSUJBU3YxZWZjZUtPWDBFRzZlZ2ZRYmlHV0xCaHNZajFRaE8xNUlOdEpDQ0VYL0VnRk9YY0N5YjJ1NEpnTklweXR5TVBGeDl1QjZMUW1JelNUUk1ycGI5cU5ZL1R2cXh0M0dYcE5DejAzcGdjWjUwOVJFVG5zWUdRaG5USVVZVXVzMTVXUHd0MjcxZks1YzRkWHhiYk1paVh0eHptaUZESFRCcHgydHpuRGx3VXI0WHpIQWxNS1JYdVRhMTFJR3pJRGlqeTVCUHVCMHNXWW5DY2J3Yk8rMmdhMWlMVUtzSVFRN2RGYkNTeDNGa3VKL0FLay9yWTFUbEF3OWRsWmVKUTlseE9iaG1sRHZQUlN5OENxRjliZDRiNkZoN0p3dExLYjlnME1lNEJYL0EzUEx4Ym51WmRzNjVQWlJsQUdUM0VBZUdVaEQ0RjNLZi9lbDZKR3IzdlFMTkZZMzQ5V1pBSHNwNE9zbFozajEzTkhrendxbllERzRiS21says5N0lJV1JLNjh0elYyV0VTVU94NUNVaTljdnhBZlg2ZHYrQmRvdEpJdjhQa3kva08zQVJqczhJRGpXS0wvTnI1RDlBSEEvYW5GOWpxaG4wZTd3QnMxc3lZeTJOMENqclNDYU1lcGkyazlkTmE4V2tPdTZTNUJWMUZRRmlNbUo2Z2FQYTBOZkdhd2JSQVVGR3AveUlJWlNucVBLaCtjdzZ6a2RhMnowdGFvcXlTeFZRYnI5VnhoTHhFNGkrNW91cUozMW9JdTk2VFh2SXM0VDUzUTluVk84T3BMZmJZSGFwUExPK2xST2VWTXBXbmVzYTFYUTBsaTlUanM5S290ZFdBT1EwSXVIbGdOenNVSUNHUkdNLzJDZzZDN3JxS3Q2a0JTZmkzYWYxdTg4WmV3NnFhdGRyNGhYZFJLZnQvK3VHNjdoWjdlN1JwTkI0N1Jqa0hTVXEzYm1JYTZWdGtIeVpBbktzUjRPNXc4Vm1mVjFhODc3WlFYWnBFSWsxclg1VVVzc3hNZUk0d05vdkM3SjExMjVTcXYyWkJHb1FMMGgxMGU2U3FlOFk1Qm9na3QwcmZiQnRlOUh5bUxhY2grKzdNdXRmNFhnZDF2aWtLL2liQk1lWmRNTXNUZDBIK01xOVBsWXB0YWhlRW9mVGE2dzdaWVB1K255LzdSS2ZjazBLSjFVU3V1MW1GcFBNc3UrNWp0MGF4ck5QcjZvTGNXVVFCVE5aSHVab0R4cG1UelZvQnZDamtZZkViV2ZyMmNUZ1JIcmxQTnpxeSs2TGVZdlM2c3k3SlhrQzdXSHVHeC9kK2NFY25tQzBzNzQ3RERYaUxVc2grbmttWm5YcU1aMHo1VVBLekduY3EvaGNINmo2cHNXWDY2YUxLSnRnSmova1U4b2lFd28vcGozZm1zRGZwY1ZucUhGbXZ6RmxhUEkxci9lRWFpMzB3d1F5WjI0Z2c4M3pNNE52d1hrTlZMellkWEFyVHpxUUYrNnpJUk5ZeCtqRTgvZmxMNnBjRVVkWE5IOTRMVXd6ekJaTllHRzd0dW9YUUxqUFlycU5TMVFTWGsybkpJd3RmNHlqaTFhUWdVcmR0dDFVNDU4aENGTnpZc1dVcWY3NlBGeThLVzZaU3I0QW1Jb2RRY2J4aU01ZzhaSUxOWGdScGZ0TERBUUZ4RFdCbGFEclp4ZXZhVSsxRlk4SmFvaWtVVitkejdCZ2ZxSlZtNW5CcWZMeWlpZFZ5NlJBcW5MZ3hNbksvM2hxaEpmbTk4bmkxT29qdjV4bXdLajZQVXh1TXl6eHE2ZzRmRDdBUnYxRHBVS0EreWJhOFo2TmsySmpMU2N1akR2UEhseEVwb2FteFNmT2VMQk45L3ZSU2V6aEZFcmlDaFFaUmlmbHZMSFJtUUtBMElHY0JLY0hqc20zdkV0WWVDelBuZDJSSmdNWWdWZDJvb2tjRHg0ZGQvTitkbm96emF5TklGSDhHL2hXaGEyUFpqNFUvOVFpUjBuZm9iTmRCckx3ZUN5bEpYRGNPcWg4b1hWdnA5enVObU1KelppTE4yNzE1cVVFYUdVUEQ4U0k0bE9XQnFCU2gyem1NMXpKWjNKMmhEc3NET05mQzQrc283ZlhGTGM3aEliWWpVSzNkR294VzE0d21CejNRei93U3RHbkVFQUc3aFJULzVhM0pCOHpxR1lTTHkvYmVoVE10RXk0SXBpN0ErM0t3MU5ac0NiM0YxamhPeHFjYlZCMXRqNGdZdlFvVWVraHJQaW5DVG1JcE1nQXFxL1Z1eCtrNTIyVkZtQjhSR0xkd09nTnk5RWkxTlpTTW0zcy9EOFhBUld0NmQyOEE1TzB4NGxjc1ByRGo4L3NOMGVRK1piaFBpSTd4WHNvRy9LRktvNlo2S2laL2szWTVKbDVhYnExdW9XTU02SXlZRGVadFBFd1FLZnFUTUtJUnYyK0YzNWNhMEtDQUtRQnhYMjkzV3hLc0NxZzJuSlhvZWlQejRteHU0dVo0OGRiUURtaWYrN0VsUHB3VlpTSUE5L05PWGllZEJtZVhNV0xoQkp4dnN5REh1LzVVc0dGS2hrRytreGZDeGdtMG9VUnU1TUliTmlOck1QdUYyeFdTbndWZXhlTENHdHBDMFR5bXpaUVdDVFIyL1UxSW41U1Y2ellHaGR5Q3pkL2t4YStWa2FCbFlEcjZ0L0dQRkZCSTRKSXc3Yk5mc3NnUFFBeWJxbHkrWktidm5MUndlSzR4R3BWYThlMTNCVzdoVXplNHhTbWxpaWpTck5LQXZQQTVWc0FmWE5kR29YTDRObW16NUFMVGgrNWxqbzdxNEd4OHJmTXk1R0JpSjZzWUtkZHhpTzd2SFVhSTFVMExYSHJmK0d2YVN4Q1VhdksrVDVCTVVoRGJXaDVCYWg1OFhCS2gwaXN0MjVhelJxR2tib1pTNnMyYklLRU9UbDBEMURUOVEza09LZnFNOS9JYjFUU052aTVMSGRJQ2crZFAvc0FuY1BFN3hFSW1zTHdCLzlSY0grUndlSzVUc0ErdGRTbWpITTV1U2xzaVFrNDVnYm0zcVNSUmVjSTlWT1FLVHVlazZ0VElINURrMUkvZi9oTFcrNHAvWm5FNjNvUS9XM3Y4U2pjK09NSWdFdmhiWFg5RytPRTBkVURGZTFxVE1YSmY2RkxVNkpRQmExVUx5UGY2akx2dXN1QmFhQlZPM3RXbjFIcjZ0VGxqVXYvR0hheEZDcGJ2UEJXOGlLVk5rL2lFbllCdU4wckRNZjI1YkdwcEhSRkxEaHAzY1psY0NqaHRHNllWMzIwUW5rNzFsT0FIZG9TWkNZb05HMUNFR1NEVktEcGdyVU41TjJMaUQ0OHY3SWpCbFVHa1cvM3VMMnFtSWRkYm5IbkNPOFpjVnlzWUVhZHVkNTFralpDdjI1SU9XQkZCVlNrTEw5ZmdUeU1TSlkyLzA3WUNQWVZvMlhPQy8rVTlnUVp5TGtUZXVHOXZOOXVKeHliSjdERWxXaU1saGFnWStDVzZxQmRFNWIxR3BhZGhWU0k3TzJhWUxkVm9KRjBlNFFaSjlWYTdOYlFzejdPb0hYem5kOC9zNml4bXNFdXY5cU5HNGJmWGROQitwZFd5dzRpVFBoeTBLQkk5RmVxeHgyZ3pwV09HUW5TUHZaUGpTNUtrZW50VHNVelRwdGl1TnYzNDVCbXpmS3RjdDMyT3pLcU1kL1QrYjUzWmdlWVlvMk5lZEw5cE5sa1g1M3pNdHJSbHR0WGhISEMvZmNSNEVPOGFEZy82SS91L2V5VjZqTUtuZHRuVHRmMloxUmNyRkczcXFPaTF3djVwYTNUMThua0RZZE1LdEQ0a1czRVdLK1hqRlRDblhLdXBpdFI4OGFacGJFc29XdVRPVkNsTmtWQjYwTHBEM0htTFRnSHM0REJXV1VpdHJtWkpFclpTV3Bmb3d1U2UrZW5GV1pzeHI1T0tyQnJ3bTFUYWR4ZkgxRUlPeWp5ZDNMUm10ZVhPd1pjbmZ1RmNjOG0rWXZkaTRSRXRwcFpPZElsUnNqbEwrQjdPVUNIZ1pCZURrNnNkUitIL3pObUdTZGZ5S0ZmZEpLdnczV0xSU3hETzhBekpRS0xKZU9SVEJWY1c0SGFlR0dMbVU1blk3Q2NrQ1hvYjUyRjdCUHp0NDAzbnJVaVMraW8wUExsYm8vTlA4bXZXdnFiY3UyZlQ4a1kvV2JKRTJ0V29UNTlDRzVSby9wZUNkeC8yNHREelFDeEhhL2R3cHB5MjhWcVkvV0ZkaEpsRlZkWU40eWtXcmxHQzR3OWVUR0dwUnRJdGJHZ2tPZmlHYVNnaDJOVUdTY01nV256SHpYTzJNTmhFYWhuNnlaa1p6aWRBY0xLRFEyYmNjNENyNXNydEhjdHNnZVpjUjRPVzZzNGlrQTBxeTl6a1U3TE5KVGtWdTJTRDJsNThESEtlb1Q2RFo3dWJrRGVMT0RGa3h6WG1QN1NpTDV0SG4ybU5CRVd2N0dCaVlsNndPWCtBakNPNVAyY0l4NzhGWEVjNkRzVDVFT05SdFZpa3JGRzB1UVordXBDUTd0b2IveUpaL3ZoUG9NVUtmdHdnT2QveEFvQ1V4VUJMRWdoS0hPcElJRmZ0akk2R21pUXo3ZTBDQWVBUjNTMmNmT0lXdnRLQnU2T0l6Yk9vZXI5SGpJNThSR0s5MlE0N0NJOHV0ZkhxcDJuOHNyZU9STEVCdGtPZkJmU0tMYmcySHpDWTNmSSthTml3MHBMY3N0YlEzRmVlN2NPMTBrK0dJQkFiNkFkLzZHMDFGRjhyemM5ckpiYWwwWEVlRWJVK29lVFhia0loSnRvL1RVUC94Z1kwQzYzUGxUb2p2RTJBazVIc205QXVMU0NRcFIreWluV21tanpkeEtoQm9IczdoS0ZvemhISDU2YjJMY2hvSGZ6OE93TUFRd2NVREwyQW1tdXQ4Q2lGUFpHc3AvQjZsNGxCODNST2ljZFpxK29OQ2VYNU80WEJsekdybXIyQzU2Y1RyQ2FWMkFmSm5HQnYyU0tIMWcyVG9YaEJsZ2hnRVlhWGthdGxNd2VIZTQ0YVNpRmVjcnpyT3JaUFlMd2g4a1F0eWkyVWRtN3liaFgzQlEzUWpxNXY3TytUTlcyZ2Fjc1l3Si9CSklyM2RlWGk5akNhdmVYZHp4NnJSTXkxaWtCV1cyYmJwdU55M0FrZWJTZkZxNmJMb3FHU2JKNWp6YVpkOVZueW11cHJEb1lZWUJvbjgxY29XUTRNNUhuQ1gwNGVxRE9GdStnVWk5eGhZRWI5bENmckl3YnkrU2pQZFN5Zk1LRGZSdVcxL29pYUorUVRsZ1Y2NGNHVjJmUHBYL1FBeHlWcVBqLzA2aXpZUEdpMUI4Z3MrTWc5d0JUK0pKeUlxRVAxTlRzYWZNMG0yZzhFenB1U1d4aFArTThiOHNqUyswR3QyQ2o2TENoVjZxSktaOEF6eE80dmhGV0g0NVVQWkdHa2c3SWVrRUVIYWtPTlRPd0RlVGdFQzV3TWQ5TzJxYWYwZEkvaWJrZ0F2NmNEUWlVOXJjMHk4VFBtbE1NamFmajYrRVhka0lRZXdIVlFCclhjWVZ0Mi82a3hSdXhyTHBFZjdEMHlNWGU0L1BLczY3WFdBNk1DUmRXZXJDSkdnKzdCNmEvM1RXZWd3cGlIK1hEMnpLN0prMzI1T0R1S0ZNUk0rMEdYUlZBZkRUQ2lTR1BDN21MZlhxdmg4QUxGaDZYNk5ObXVBRG5NeEtBWlI1cU9hMW5PdnJORlQ4bTVEZFFFc3lyeU94TS9xUGRRSC96dFBwNWMyWWh1MDlsZldZRzR4SXc3N2dDUStlYmtzckpCbUR6NS9zMjc5SWhUZ0YwRXY3bWpiTzJ5NnlQYmtad2RQOGViNkdzZEVYOGJ5d0ZNWG0wSEtVU1kvaEE5RG52ZXN1RVZPM1ZRTjhoTDgzSVBOcDF3S1RaY3NkTThQSDNJQ0NMdjBKTmZLNlF3akZVcEtHRjQzSFhyM2dTSWM1Y3o1VFRzQnhZcllCNis0TitzZ3MvUDYrZzJiVHpYZkVtV0Zwd05CUlgrTEN4c2g3OERDRTRxNmpwVTZXU1RmMUk3NjdlQk92V05WNVh5elZFTjN4d1R4VjdabE5HWjBlZzcrTUVQU3ZKOWdPOUxhSnpPdE53aVRrZk5EbTA4OEZhbmdJS1c3bkNvSTFZRFVTbjg4UTZMeE9FckI4WFR5Y3BDaHVhZWNEVFRIQzFEY28zTnRPcE1rbVEvbXhod3dvTm5wdFN4dy94TDk4REZiNStlaXQwdmtzNE94UENROERXek4vUmNDRXRTRXUyWWJqU3ZnUWF3RDRidDZCaVlaQ08za3ZTUm5LcUxJVEJtV3Fhd1FXcjRzR0xCM0M1VWNRclZRK2JFMU4ycDFsemk2eE0yK0hjdmpvMnVlTThobDcxY2U1Z2lZOFQ1bDF3MC9pL2M2cnZ5eFJObnVLYXNiSlNnNUpvWEFlME1BMmpZNldvS2N1VTk5UWhYNkx6UlNQcUNjSGR6NGFJTnhneElwVnNQM3JPUUExNWoxR1NmcXl2Qy9sZzBJWitST3BwSHgrMjRFOEFHODNsMDNqdEd4Rk5hWCtjckIxYk9vQld4ZkJJUzZqMHNzamVqN040ZzVrMmFpOWoiIC8+DQoNCg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0zLjEuMS5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvanF1ZXJ5LXVpLTEuMTIuMS5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21vZGVybml6ci5jdXN0b20uODYwODAuanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3N3aXBlci5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2FjY29yZGlvbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+IA0KKGZ1bmN0aW9uIChpLCBzLCBvLCBnLCByLCBhLCBtKSB7aVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7KGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpfSwgaVtyXS5sID0gMSAqIG5ldyBEYXRlKCk7IGEgPSBzLmNyZWF0ZUVsZW1lbnQobyksbSA9IHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07IGEuYXN5bmMgPSAxOyBhLnNyYyA9IGc7IG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgbSl9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJ2h0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpO2dhKCdjcmVhdGUnLCAnVUEtNDQzNjUzMTktMScsICdhdXRvJywge3VzZXJJZDogJzE3MmZiMzI4LWJiNzctNDZmZC05NzRiLWExNTllZTAwNDdkNCd9KTtnYSgnc2VuZCcsICdwYWdldmlldycpOzwvc2NyaXB0Pg0KDQo8c2NyaXB0IHNyYz0iLi4vLi4vLi4vU2NyaXB0cy9XZWJGb3Jtcy9Nc0FqYXgvTWljcm9zb2Z0QWpheC5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9RnVKbUZ3ckJ0VGkzRnhqWFJCakRvNXlRT1JxdGVjVlBTT09LYTRhXy1iZUVYVmFWOVRZZGZ5eG1UZFJQMnFNRW1mOFBuc1dWbVhUYVZTQTV1YUF5Q2ZXM09jY3J4YTBOeDZqX016VUd6M0lTbF9wX2dFNUhrU3dtX0k5QTVyWmMxMDYxZTBkS1RuWEJfeTFsbW1taVZFVDE3clU5WEt0a1M2WDg1U3JKZWFfMmZNakZWOU1LM05rVmVtZ1pONFpWeEgtM2tUb05VYldkaW5JSXJIdGNnUEo3dU95WjZmbHFHOUdIRHM5R0tLRG1fUVZWb0RrNWg1b3k3ZmFEa0Q0bkZHeVUwR3UxWjRvUGVsd1NWQ3F4ZFVPdE8ydlgtRVdONGJoVTdjY1JSaWRJcE9takRmVURTa1BGQ2RtYi1JajFqbExCb0dCTmlITmY3VmkxVUdiWkN1RjF2dVNJa0xtUE5YZ0NPeFpEZ09JWmxpV01VNjZ2dTZIRHlMOTRSTHpwb1NtQm1lQUJxeUZVaHdJLWxEdlRfTzlodWVocnZ5ZVVrdzVtVmM3V1VWZHlzS1BvajR4V3VhQVhZcTl0UHlZV3pCNGpqQ011Y2xLREN3UzFzV3hFRUEyIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD1ZM202VXJWTWJxSlZFLWtROWdpb0g1NzVoNFVRV3JXSjZqbXNoLVA4c2xadU4waWs4cUdwUlpia0dCcDBsOWlXR3RxMEVvZW84MlhBQkpkTnVYcnAtRlNneFU1eXFxYmdSLWNocDZVYVUyWUdIOEhPMkt4VTRMR1otNlFUMEhSWjAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9S1FBMy05b212UGtsLURRRHFTcTBtRG1pakdnd0lVVTV3dDk0R1g5bGZ3T1UwcmdNMEFYUEZNbFhfbDFNQWJGa0xJNmxwZl9qVk92U2RIX2Z1Y0NrdlowY01mWXhDYlgtb1JBdG1fUXBMdzRKQTRZeUV3U2VHTlJvaXMtRmxfckRWOFgxZFF6Nko3TURHNjVmRGZfUmZnMiZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD1nV2NySEItRUdDMXA0THRaYS1sYmp3YXRoLWItYm04Q0FLNlBJN3NIbXNldFNaMkkzS1ZBQkV6c3B6VXBvWnY5S3ZmQzhNOTdpYWExOC1OeUNvSXBTaFpROVBjYkVIQ2lfbEh4X2xVMF9sMDEmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9WUdRa0tFckhGRGRHZUNNWTQ0dWtfaTNQYVRPWmxlcTN1ejJ1a2tFT0lZcGl5NDBYR1NJdjZHS0pjNjJsdXkyNWJOQXFUU1JsSnh4bXZFT0Z0MHlmTUhIQTZpUFVvTFFtN2d3LUtzWDk0bEFjQjQzQVhvSGhYY1U0MjUxeWNxc0UwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPV9zR3A4XzliTkhZTnlRcXhkdlFScWVrMWJ1ZGRERFd0QVFkU2x0dzgzaTZpR0VZQUNEN3VRakpFR1NPQ0hvOU5sRUxrZlVSYU1NMlkyRkZsWmxSOFB2UGhvamFEb0xDaE1oeXZzLXNsclVJUkpSbkhvVEtyblQ3UmhTWnI1NHpoMCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD0wWnJNS1ZQMlU3d1FEWlEtNjJLVU5ZUlk0ZllTZERQdDZOWl9ybTJrQmNwYktVZjJ0OHFZaXpTRUhnMFhOZW5BeUZyYy1IY1F1dHVxZk9JdTJqMG51cjdXQVp1cmlmWXlVV2NMczZOZ2NtZzBXR0pydlBaR2l4aUxIOXRUcFRlTDAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9emhCNFRuTmc1U0NuVHVkMG5QWlYwSXRwU2tzY1RtNWJtSzVqcUZfUkQ4Y3dBMlJLdjhXQkdnaV8zZXRHeW1SRE1XUmR5amFNckpHWXlWX2tqdHZjOXI1S1NHV3NndFpFY2ZVUkgtbXdybktldVAtTDlBd1BBa0ZGc3QyMTg5cEMwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPVNidG5WV3M4THRkdlczR3hpZVlabGRGTWs1WFZoUTJDXzZKWUZVdlRJVVo4WnRBcVNqTEl2T0g0M0p0NllHOVB3Z1FJRXNvVnpMYmNrcXRRZndUWGZ5ZHFrR2dmQzB5SEhEbHJ0Q18xZUIxbXZQRmZlbGNnOWZnd0h5aE1nWE52MCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD11a28wLTgzZDlxaG13b0VlMnhOOEJucFJEZHNyTnpPQWdLd21ybDZUY1Z2b05qWHZoWU4zRVVvOERGNS1mVVN5dUxaa0RFa1NIY3hUNFcyWEpJdDlnUU51dU43c2Zqd3BCM3RhYVBZUHg3UTEmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9aG1JcWY5RTR3NGo2d1NILXF5MG1FNjJseW9KdzZyNzAybjl4SDE0UnVGVmUzSE1ZcU1JSjhlanpUeDh2eExQcHIySzYybjlLWjIxLW9rbWJ2RmdWMUtzTkI4QUVmNV8zZ3RxU2oxWldLZTlJZVdYc2hfYVVCNE5tRndfQTBPVDgwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPWNJSUhoZXREMEZPOEZ5RmpvaTZnaFlrRjhVOWJrSmRBdzVnZnJWTVlEUl9HblphSmJFeFpnc2FQU0FUOTdoQjd1cHhuSnM1clZLNFFVT2FPR0dlaklQT0lYWkdlRHFjdmtfY25zbTF4djI5V29KMkZfdVc5LWUyNDk4YUwya3dyMCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD1sZUlxLXJuNk5pbThjUFNlODRDSUFnZVNUR1UwZjktU0dGNjNOVkhDajZHLUJrcHlEOG1pbld0anE5RVZyaVc5ZDRkQWFiT1h6WkVVY3pJU1VNY1lQTW1wTDZ6SWxtMnQ0MWlvQ3haNUxRWDRuY0VQSmh2MDdnS0pOT3hwMkdLUzAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9NlQwSHBGUmNtUjVzb29zVmdlZmFiZVI1WjMtLVFRbkxNa1piZ3F5UmJrcVRXOVVXYThOaVlqQnlPZHk5bXpsZmswckJiSmtrZUV2ZGhOYnF6R25ZaXRRWFB2X0xua01DaVVOZnpsS191ejBHVERsamxKSUdxZTNKeUp2bXF6RGUwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPUk3VXB0OWtGVnRCWmlxWm0tNENwS2gxcTE3S3prOF9EVVhCTXBlS0hVMUdRRGlqZ0dKUXhIRkpyZ1g2QWlDOFFILWNXMUdlWEVlWHRNSkE4UVloT29IQklweVkxRFBNZXdUcGtOdUNxSDVtb01DMDFVQzBNT0xtR2VuUG54dDNLMCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD0yR2ttTnhERjhydmhkYkVERHdQcW1nYWdFVUNPUTdCRnFaaVlQYThJNkZuSlZ3Szd6RklTWUJZSjhjbXY2a1pXOFEwc1VFdDZKR2oxQjY4YlhqWmVhRFhFN2VZZWRxdnA3WHFLdFNINWRqSlZrb0oxcTdweDNWWm5YclVOX1pOSjAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9SWZHWWVRemdxMXgtcFpDRlphR2RBMXhDQUIzczlKaDdpUUVreVFvWjI4X19heURzX2gxdVRvM3lYMGFvX1dSWFh1c2xpOXlRSzdZZDk5U2lGWGV0bGt3aWlDTUNfUWoyS2E5YWU3VHhwNm1IM3FTYXV5dDQ5TEZ0QVoyT0hGcnIwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPXd0VWg3VFB3TDFEck00RnEwWDdqdmp5XzNHVklMSHJuUmlzVWQ2YkNEcUlBcG9vVnRRN3dJQmFzWWVTRHBGM0lieUNnRUhQZVNnc1lzSEkzRktsWjFBNXBjcWl3WW1jME1nSDFxZ0NTZVNYNXVsTFJLd1BBb2NqRW45SEJMcGw5MCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEVHRU5FUkFUT1IiIGlkPSJfX1ZJRVdTVEFURUdFTkVSQVRPUiIgdmFsdWU9IjA3NEQ1RkFEIiAvPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEVFTkNSWVBURUQiIGlkPSJfX1ZJRVdTVEFURUVOQ1JZUFRFRCIgdmFsdWU9IiIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9fUFJFVklPVVNQQUdFIiBpZD0iX19QUkVWSU9VU1BBR0UiIHZhbHVlPSIzZXRhZVgwcjdNaUh6Wjdia0hLcERzbkhPS01iaWV1U1NlbGNKclJ5Q2xhM1g2R0tXUmJhTWwyd05UU0FTbmNIUUFwQzB3ZUd1WHYxTUFhNWNybTlYSlRYWktxb3N1NTM4NUNpMGhRWnZRWTEiIC8+DQogICAgICAgICAgICANCg0KICAgICAgICAgICAgPHVsIGNsYXNzPSJjYi1zbGlkZXNob3ciIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgPGxpPjxzcGFuPjwvc3Bhbj48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48c3Bhbj48L3NwYW4+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PHNwYW4+PC9zcGFuPjwvbGk+ICAgDQogICAgICAgICAgICAgICAgPGxpPjxzcGFuPjwvc3Bhbj48L2xpPg0KICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgPCEtLURFQlVUIGR1IE9DTlRFTkVSIEdMT0JBTCBERSBMQSBQQUdFIC53cmFwcGVyLS0+DQogICAgICAgIA0KICAgICAgICAgICAgPGRpdiBpZD0iUEhlYWRlciIgY2xhc3M9IndyYXBwZXIiPg0KCQ0KDQogICAgICAgICAgICAgICAgPGRpdiBpZD0ic2lkZWJhciIgY2xhc3M9Im1lbnVTbWFsbFNjcmVlbiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICA8IS0tREVCVVQgZGUgbGEgbmF2aWdhdGlvbiByZXNwb25zaXZlLS0+DQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGlkPSJtZW51LXNtYWxsLWhpZGUiPk1FTlUgPC9hPg0KDQogICAgICAgICAgICAgICAgICAgIDx1bCBpZD0ibWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyI+QWNjdWVpbDwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hldGVyIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij5BY2hldGVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hldGVyIiB0aXRsZT0iVmVudGUgaW1tb2JpbGllciAtIEFjaGF0IGltbW9iaWxpZXIiPnJlY2hlcmNoZXIgdW4gYmllbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvbW1lbnQtYmllbi1hY2hldGVyIiB0aXRsZT0iQ29tbWVudCBiaWVuIGFjaGV0ZXIgc29uIGJpZW4gaW1tb2JpbGllciAiPiBjb21tZW50IGJpZW4gYWNoZXRlcjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3JldXNzaXItYWNoYXQtaW1tb2JpbGllciIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgcsOpdXNzaXIgc29uIGFjaGF0IGltbW9iaWxpZXIgIj5Sw6l1c3NpciBtb24gYWNoYXQgaW1tb2JpbGllcjwvYT48L2xpPiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hldGVyL2ZpbmFuY2VtZW50IiB0aXRsZT0iRmluYW5jZXIgc29uIGJpZW4gaW1tb2JpbGllciI+RmluYW5jZXIgbW9uIGFjaGF0PC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2RlbWVuYWdlbWVudCIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgYmllbiBkw6ltw6luYWdlciAtIFByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQiPlByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVuZHJlIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij5WZW5kcmU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUiIHRpdGxlPSLDiXZhbHVhdGlvbiBldCBlc3RpbWF0aW9uIGltbW9iaWxpw6hyZSBncmF0dWl0ZSBlbiBsaWduZSI+ZXN0aW1hdGlvbiBpbW1vYmlsacOocmU8L2E+PC9saT4gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbWFuZGF0LXZlbnRlLWltbW9iaWxpZXIiIHRpdGxlPSJNYW5kYXQgZGUgdmVudGUgaW1tb2JpbGllciA6IGNlIHF1J2lsIGZhdXQgc2F2b2lyIj5sZSBtYW5kYXQgZGUgdmVudGU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9maXNjYWxpdGUtcGx1cy12YWx1ZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkZpc2NhbGl0w6kgZXQgcGx1cy12YWx1ZSBpbW1vYmlsacOocmUiPkZpc2NhbGl0w6kgZXQgcGx1cy12YWx1ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvbmZpZXItYmllbi1pbW1vYmlsaWVyIiB0aXRsZT0iQ29uZmllei1ub3VzIGxhIHZlbnRlIGRlIHZvdHJlIGJpZW4gaW1tb2JpbGllciI+Q29uZmllciB2b3RyZSBiaWVuPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYmllbi12ZW5kcmUiIHRpdGxlPSJDb21tZW50IGJpZW4gdmVuZHJlIHNvbiBiaWVuIGltbW9iaWxpZXIgIj5Db21tZW50IGJpZW4gdmVuZHJlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVuZHJlLWF2ZWMtc2Fucy1hZ2VudC1pbW1vYmlsaWVyIiB0aXRsZT0iVmVudGUgc2FucyBhZ2VuY2UgaW1tb2JpbGnDqHJlIDogYXZhbnRhZ2VzIGV0IGluY29udsOpbmllbnRzIj5WZW5kcmUgc2FucyBhZ2VuY2U8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9kZW1hcmNoZXMtYWRtaW5pc3RyYXRpdmVzIiB0aXRsZT0iRMOpbWFyY2hlcyBldCBmb3JtYWxpdMOpcyBwb3VyIGFjaGV0ZXIgb3UgdmVuZHJlIHVuIGJpZW4gaW1tb2JpbGllciI+RMOpbWFyY2hlcyBhZG1pbmlzdHJhdGl2ZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9kaWFnbm9zdGljcyIgdGl0bGU9IkRpYWdub3N0aWNzIHRlY2huaXF1ZXMgYXZhbnQgdmVudGUgaW1tb2JpbGnDqHJlIj5MZXMgZGlhZ25vc3RpY3MgdGVjaG5pcXVlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2RlbWVuYWdlbWVudCIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgYmllbiBkw6ltw6luYWdlciAtIFByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQiPlByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbG91ZXItcmVjaGVyY2hlciIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+TG91ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2FpZGVzLWxvY2F0aXZlcyIgdGl0bGU9IkFpZGVzIGxvY2F0aXZlcyAoQVBMLCBBTCwgZ2FyYW50aWUgTG9jYS1QYXNz4oCmKSI+TGVzIGFpZGVzIGxvY2F0aXZlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NoYXJnZXMtbG9jYXRpdmVzIiB0aXRsZT0iQ2hhcmdlcyBsb2NhdGl2ZXMiPkxlcyBjaGFyZ2VzIGRlIGxvY2F0aW9uPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2dlc3Rpb24tbG9jYXRpdmUiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPmZhaXJlIGfDqXJlcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbm9zLXNlcnZpY2VzIiB0aXRsZT0iU2VydmljZXMgZGUgZ2VzdGlvbiBsb2NhdGl2ZSI+Tm9zIHNlcnZpY2VzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdm9zLWFzc3VyYW5jZXMiIHRpdGxlPSJBc3N1cmFuY2VzIGV0IGdhcmFudGllcyBnZXN0aW9uIGxvY2F0aXZlIj5Bc3N1cmFuY2VzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvaW50cmFuZXQtZ2VzdGlvbiIgdGl0bGU9IkVzcGFjZSBpbnRyYW5ldCI+RXNwYWNlIGludHJhbmV0PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+aW52ZXN0aXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ludmVzdGlyLWltbW9iaWxpZXItbG9jYXRpZiIgdGl0bGU9IkludmVzdGlzc2VtZW50IGxvY2F0aWYgLSBJbnZlc3RpciBkYW5zIGwnaW1tb2JpbGllciI+SW52ZXN0aXIgZGFucyA8YnIgLz5sJ2ltbW9iaWxpZXIgbG9jYXRpZjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Rpc3Bvc2l0aWZzLWRlZmlzY2FsaXNhdGlvbiIgdGl0bGU9IkxlcyBkaXNwb3NpdGlmcyBkZSBkw6lmaXNjYWxpc2F0aW9uIGltbW9iaWxpw6hyZSAoTG9pIFBpbmVsLCBQRVJQ4oCmKSI+RGlzcG9zaXRpZnMgPGJyIC8+ZGUgZMOpZmlzY2FsaXNhdGlvbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hZ2VuY2VzLWltbW9iaWxpZXJlcyIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+Tm9zIGFnZW5jZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2FnZW5jZXMtaW1tb2JpbGllcmVzIiB0aXRsZT0iVG91dGVzIGxlcyBhZ2VuY2VzIGR1IHLDqXNlYXUgTGEgUsOpc2lkZW5jZSI+bGlzdGUgZGVzIGFnZW5jZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9xdWktc29tbWVzLW5vdXMiIHRpdGxlPSJQb3VyIG1pZXV4IG5vdXMgY29ubmFpdHJlIj5xdWkgc29tbWVzIG5vdXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbm91cy1yZWpvaW5kcmUiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPk5vdXMgcmVqb2luZHJlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9ub3VzLXJlam9pbmRyZSI+Tm91cyByZWpvaW5kcmU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9yZWNydXRlbWVudCI+UmVjcnV0ZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9jcmVlci1hZmZpbGllci1hZ2VuY2UtaW1tb2JpbGllcmUvIj5DcsOpZXIgb3UgYWZmaWxpZXIgdW5lIGFnZW5jZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLUZJTiBkZSBsYSBuYXZpZ2F0aW9uIHJlc3BvbnNpdmUtLT4NCg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImhlYWRlckhhdXQiIGNsYXNzPSJoZWFkZXJIYXV0IGNmIj4NCg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS0NCiAgICAgICAgICAgICAgICA8ZGl2ICBjbGFzcz0iYnRuTG9nQ3B0ZSBiZ0Jsb2NrIiBpZD0iYnRuTG9nQ3B0ZSI+DQogICAgICAgICAgICAJICAgIDxhIGhyZWY9IiMiIHRpdGxlPSJjb25uZWN0aW9uIMOgIHZvdHJlIGNvbXB0ZSI+DQogICAgICAgICAgICAJCSAgICBNb24gY29tcHRlIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIC0tPg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS1TVEFSVCBSYWNjb3VyY2lzIGNvbXB0ZSArIGFsZXJ0ZXMtLT4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmFjY291cmNpQnRuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9IlBTZWFyY2hTaG9ydGN1dCIgY2xhc3M9ImJ0blNlYXJjaFNob3J0Y3V0MDIgYmdCbG9jayI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQlNlYXJjaFNob3J0Y3V0IiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCU2VhcmNoU2hvcnRjdXQmIzM5OywmIzM5OyYjMzk7KSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0blNlYXJjaFNob3J0Y3V0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4gICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImJ0blNlYXJjaFNob3J0Y3V0MDJfdHh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcm91dmVyIHVuIGJpZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj48IS0tIEB3aGl0ZXNwYWNlDQoNCiAgICAgICAgICAgICAgICAgICAgLS0+PGRpdiBjbGFzcz0iYnRuU2hvcnRDb21wdGUgYmdCbG9jayI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TaG9ydEFsZXJ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbXB0ZS1hbGVydGVzIiB0aXRsZT0iTWVzIGFsZXJ0ZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TaG9ydEZhdm9yaXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29tcHRlLXNlbGVjdGlvbiIgdGl0bGU9Ik1lcyBmYXZvcmlzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuU2hvcnRQaG90b3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29tcHRlLXBob3RvcyIgdGl0bGU9Ik1lcyBwaG90b3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TaG9ydENwdGUiIGlkPSJidG5Mb2dDcHRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9Ik1vbiBjb21wdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS1GSU4gUmFjY291cmNpcyBjb21wdGUgKyBhbGVydGVzLS0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iLyIgdGl0bGU9IlJldmVuaXIgw6AgbCdhY2N1ZWlsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9sb2dvLnN2ZyIgYWx0PSJsb2dvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGhlYWRlciBpZD0iaGVhZGVyQmFzIiBjbGFzcz0iaGVhZGVyQmFzIGJnQmxvY2s0Ij4NCiAgICAgICAgICAgICAgICAgICAgPCEtLURlYnV0IGR1IC5oZWFkZXItLT4NCiAgICAgICAgICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy9TVEFSVCBOQVZJR0FUSU9OIFBSSU5DSVBBTEUvLy8vLy8vLy8vLS0+DQogICAgICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im1lbnVMYXJnZVNjcmVlbiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJydWJyaWsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiB0aXRsZT0iUmV2ZW5pciDDoCBsJ2FjY3VlaWwiPkFjY3VlaWw8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hldGVyIiB0aXRsZT0iYWNoZXRlciB1biBiaWVuIGltbW9iaWxpZXIiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPmFjaGV0ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2FjaGV0ZXIiIHRpdGxlPSJWZW50ZSBpbW1vYmlsaWVyIC0gQWNoYXQgaW1tb2JpbGllciI+cmVjaGVyY2hlciA8YnIgLz51biBiaWVuPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2NvbW1lbnQtYmllbi1hY2hldGVyIiB0aXRsZT0iQ29tbWVudCBiaWVuIGFjaGV0ZXIgc29uIGJpZW4gaW1tb2JpbGllciAiPiAgY29tbWVudCA8YnIgLz5iaWVuIGFjaGV0ZXI8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvcmV1c3Npci1hY2hhdC1pbW1vYmlsaWVyIiB0aXRsZT0iQ29uc2VpbHMgcG91ciByw6l1c3NpciBzb24gYWNoYXQgaW1tb2JpbGllciAiPlLDqXVzc2lyIG1vbjxiciAvPiBhY2hhdCBpbW1vYmlsaWVyPC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9hY2hldGVyL2ZpbmFuY2VtZW50IiB0aXRsZT0iRmluYW5jZXIgc29uIGJpZW4gaW1tb2JpbGllciI+RmluYW5jZXIgPGJyIC8+bW9uIGFjaGF0PC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9kZW1lbmFnZW1lbnQiIHRpdGxlPSJDb25zZWlscyBwb3VyIGJpZW4gZMOpbcOpbmFnZXIgLSBQcsOpcGFyZXIgc29uIGTDqW3DqW5hZ2VtZW50Ij5QcsOpcGFyZXIgc29uPGJyIC8+IGTDqW3DqW5hZ2VtZW50PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAtLT48bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW5kcmUiIHRpdGxlPSJWZW5kcmUgdW4gYmllbiBpbW1vYmlsaWVyIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij52ZW5kcmU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9lc3RpbWF0aW9uLWltbW9iaWxpZXJlIiB0aXRsZT0iw4l2YWx1YXRpb24gZXQgZXN0aW1hdGlvbiBpbW1vYmlsacOocmUgZ3JhdHVpdGUgZW4gbGlnbmUiPmVzdGltYXRpb24gPGJyIC8+aW1tb2JpbGnDqHJlPC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9tYW5kYXQtdmVudGUtaW1tb2JpbGllciIgdGl0bGU9Ik1hbmRhdCBkZSB2ZW50ZSBpbW1vYmlsaWVyIDogY2UgcXUnaWwgZmF1dCBzYXZvaXIiPmxlIG1hbmRhdCA8YnIgLz5kZSB2ZW50ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9maXNjYWxpdGUtcGx1cy12YWx1ZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkZpc2NhbGl0w6kgZXQgcGx1cy12YWx1ZSBpbW1vYmlsacOocmUiPkZpc2NhbGl0w6kgZXQgPGJyIC8+cGx1cy12YWx1ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9jb25maWVyLWJpZW4taW1tb2JpbGllciIgdGl0bGU9IkNvbmZpZXotbm91cyBsYSB2ZW50ZSBkZSB2b3RyZSBiaWVuIGltbW9iaWxpZXIiPkNvbmZpZXIgPGJyIC8+dm90cmUgYmllbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9iaWVuLXZlbmRyZSIgdGl0bGU9IkNvbW1lbnQgYmllbiB2ZW5kcmUgc29uIGJpZW4gaW1tb2JpbGllciAiPkNvbW1lbnQgPGJyIC8+YmllbiB2ZW5kcmU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvdmVuZHJlLWF2ZWMtc2Fucy1hZ2VudC1pbW1vYmlsaWVyIiB0aXRsZT0iVmVudGUgc2FucyBhZ2VuY2UgaW1tb2JpbGnDqHJlIDogYXZhbnRhZ2VzIGV0IGluY29udsOpbmllbnRzIj5WZW5kcmUgPGJyIC8+c2FucyBhZ2VuY2U8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvZGVtYXJjaGVzLWFkbWluaXN0cmF0aXZlcyIgdGl0bGU9IkTDqW1hcmNoZXMgZXQgZm9ybWFsaXTDqXMgcG91ciBhY2hldGVyIG91IHZlbmRyZSB1biBiaWVuIGltbW9iaWxpZXIiPkTDqW1hcmNoZXMgPGJyIC8+YWRtaW5pc3RyYXRpdmVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2RpYWdub3N0aWNzIiB0aXRsZT0iRGlhZ25vc3RpY3MgdGVjaG5pcXVlcyBhdmFudCB2ZW50ZSBpbW1vYmlsacOocmUiPkxlcyBkaWFnbm9zdGljcyA8YnIgLz50ZWNobmlxdWVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2RlbWVuYWdlbWVudCIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgYmllbiBkw6ltw6luYWdlciAtIFByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQiPlByw6lwYXJlciBzb248YnIgLz4gZMOpbcOpbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAtLT48bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9sb3Vlci1yZWNoZXJjaGVyIiB0aXRsZT0iVHJvdXZlciB1biBsb2dlbWVudCDDoCBsb3VlciIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+bG91ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2FpZGVzLWxvY2F0aXZlcyIgdGl0bGU9IkFpZGVzIGxvY2F0aXZlcyAoQVBMLCBBTCwgZ2FyYW50aWUgTG9jYS1QYXNz4oCmKSI+TGVzIGFpZGVzIGxvY2F0aXZlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9jaGFyZ2VzLWxvY2F0aXZlcyIgdGl0bGU9IkNoYXJnZXMgbG9jYXRpdmVzIj5MZXMgY2hhcmdlcyBkZSBsb2NhdGlvbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IkZhaXRlcyBnw6lyZXIgdm90cmUgYmllbiIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+ZmFpcmUgZ8OpcmVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InNvdXNSdWJyaWsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9ub3Mtc2VydmljZXMiIHRpdGxlPSJTZXJ2aWNlcyBkZSBnZXN0aW9uIGxvY2F0aXZlIj5Ob3Mgc2VydmljZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvdm9zLWFzc3VyYW5jZXMiIHRpdGxlPSJBc3N1cmFuY2VzIGV0IGdhcmFudGllcyBnZXN0aW9uIGxvY2F0aXZlIj5Bc3N1cmFuY2VzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2ludHJhbmV0LWdlc3Rpb24iIHRpdGxlPSJFc3BhY2UgaW50cmFuZXQiPkVzcGFjZSBpbnRyYW5ldDwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgICAgICAgICAgLS0+PGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0aXRsZT0iSW52ZXN0aXIgZGFucyBsJ2ltbW9iaWxpZXIiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPmludmVzdGlyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InNvdXNSdWJyaWsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9pbnZlc3Rpci1pbW1vYmlsaWVyLWxvY2F0aWYiIHRpdGxlPSJJbnZlc3Rpc3NlbWVudCBsb2NhdGlmIC0gSW52ZXN0aXIgZGFucyBsJ2ltbW9iaWxpZXIiPkludmVzdGlyIGRhbnMgPGJyIC8+bCdpbW1vYmlsaWVyIGxvY2F0aWY8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvZGlzcG9zaXRpZnMtZGVmaXNjYWxpc2F0aW9uIiB0aXRsZT0iTGVzIGRpc3Bvc2l0aWZzIGRlIGTDqWZpc2NhbGlzYXRpb24gaW1tb2JpbGnDqHJlIChMb2kgUGluZWwsIFBFUlDigKYpIj5EaXNwb3NpdGlmcyA8YnIgLz5kZSBkw6lmaXNjYWxpc2F0aW9uPC9hPjwvbGk+ICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48IS0tIEB3aGl0ZXNwYWNlICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IlZvdHJlIGNhcnJpw6hyZSBhdSBzZWluIGR1IHLDqXNlYXUiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPkxlIHLDqXNlYXU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL25vdXMtcmVqb2luZHJlIiB0aXRsZT0iUmVqb2luZHJlIGxlIHLDqXNlYXUiPk5vdXMgcmVqb2luZHJlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL3JlY3J1dGVtZW50IiB0aXRsZT0iVHJvdXZlciB1biBlbXBsb2kgZGFucyB1bmUgZGUgbm9zIGFnZW5jZXMiPnJlY3J1dGVtZW50PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2NyZWVyLWFmZmlsaWVyLWFnZW5jZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkNyw6llciB1bmUgYWdlbmNlIExhIFLDqXNpZGVuY2UiPmNyw6llciBvdSBhZmZpbGllciB1bmUgYWdlbmNlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48IS0tIEB3aGl0ZXNwYWNlIA0KICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IlRyb3V2ZXIgdW5lIGFnZW5jZSBMYSBSw6lzaWRlbmNlIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij5ub3MgYWdlbmNlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzb3VzUnVicmlrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvYWdlbmNlcy1pbW1vYmlsaWVyZXMiIHRpdGxlPSJUb3V0ZXMgbGVzIGFnZW5jZXMgZHUgcsOpc2VhdSBMYSBSw6lzaWRlbmNlIj5saXN0ZSBkZXMgYWdlbmNlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9xdWktc29tbWVzLW5vdXMiIHRpdGxlPSJQb3VyIG1pZXV4IG5vdXMgY29ubmFpdHJlIj5xdWkgc29tbWVzIG5vdXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0vLy8vLy8vLy8vRklOIE5BVklHQVRJT04gUFJJTkNJUEFMRS8vLy8vLy8vLy8vLS0+DQogICAgICAgICAgICAgICAgPC9oZWFkZXI+DQogICAgICAgICAgICAgICAgPCEtLUZpbiBkdSAuaGVhZGVyLS0+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJVUExvZ0NwdGUiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImRpdkxvZ0NwdGUiIGNsYXNzPSJkaXZMb2dDcHRlX2Nsb3NlZCIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iUFVzZXJOb3RMb2dnZWQiIGNsYXNzPSJmb3JtTG9nQ3B0ZSBiZ0Jsb2NrIj4NCgkJCQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImgzX3N0eWxlIj5TRSBDT05ORUNURVI8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW50cmV6IHZvcyBpZGVudGlmaWFudHMgZGUgY29ubmVjdGlvbiBwb3VyIGFjY8OpZGVyIMOgIHZvdHJlIGVzcGFjZSBwZXJzb25uZWw8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0iPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZW1haWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRUQlVzZXJOYW1lIiB0eXBlPSJlbWFpbCIgaWQ9IlRCVXNlck5hbWUiIHBsYWNlaG9sZGVyPSJFbWFpbCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGFzc3dvcmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRUQlVzZXJQYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiIGlkPSJUQlVzZXJQYXNzd29yZCIgcGxhY2Vob2xkZXI9Ik1vdCBkZSBwYXNzZSIgY2xhc3M9ImZlZWRiYWNrLWlucHV0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iQ0JSZW1lbWJlck1lIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkQ0JSZW1lbWJlck1lIiBjaGVja2VkPSJjaGVja2VkIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IkNCUmVtZW1iZXJNZSI+PHNwYW4+PC9zcGFuPlNlIHNvdXZlbmlyIGRlIG1vaTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IkxCTW90RGVQYXNzZU91YmxpZSIgdGl0bGU9IlLDqWN1cMOpcmVyIHZvdHJlIG1vdCBkZSBwYXNzZSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRMQk1vdERlUGFzc2VPdWJsaWUmIzM5OywmIzM5OyYjMzk7KSI+TW90IGRlIHBhc3NlIG91Ymxpw6kgPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQkNyZWVyQ29tcHRlIiB0aXRsZT0iQ3LDqWVyIHVuIG5vdXZlYXUgY29tcHRlIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCQ3JlZXJDb21wdGUmIzM5OywmIzM5OyYjMzk7KSI+Q3LDqWVyIHVuIGNvbXB0ZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VibWl0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRCVXNlckxvZyIgdmFsdWU9IlNFIENPTk5FQ1RFUiIgb25jbGljaz0iamF2YXNjcmlwdDpXZWJGb3JtX0RvUG9zdEJhY2tXaXRoT3B0aW9ucyhuZXcgV2ViRm9ybV9Qb3N0QmFja09wdGlvbnMoJnF1b3Q7Y3RsMDAkQlVzZXJMb2cmcXVvdDssICZxdW90OyZxdW90OywgdHJ1ZSwgJnF1b3Q7TG9naW5Hcm91cCZxdW90OywgJnF1b3Q7JnF1b3Q7LCBmYWxzZSwgZmFsc2UpKSIgaWQ9IkJVc2VyTG9nIiBjbGFzcz0ic20tbG9naW4tYnV0dG9uIiB0eXBlPSJzdWJtaXQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNmIj48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQk8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCg0KICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgDQoNCiAgICAgICAgICAgIDxkaXYgaWQ9ImRpdlNlYXJjaFNob3J0Y3V0IiBjbGFzcz0iZGl2U2VhcmNoU2hvcnRjdXRfY2xvc2VkIGJnQmxvY2siIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KDQo8IS0tIFNUQVJUIFNFQVJDSCBBQ0hBVC0tPg0KPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUE1haW4iIGNsYXNzPSJzZWFyY2gwMiI+DQoJDQogICAgDQogICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfSDJUaXRsZSIgY2xhc3M9ImgyX3N0eWxlIj5SZWNoZXJjaGVyIHVuIGJpZW48L2Rpdj4NCiAgICAgICAgICAgIA0KICAgICANCiAgICA8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9QU2VhcmNoQmFyUmVmIiBjbGFzcz0ic2VhcmNoQmFyUmVmIj4NCgkJDQogICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRBdXRvQ29tcGxldGVSZWYkVEJBdXRvQ29tcGxldGUiIHR5cGU9InRleHQiIGF1dG9jb21wbGV0ZT0ib2ZmIiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlIiBjbGFzcz0ic2VhcmNoQmFyUmVmVHh0IiBwbGFjZWhvbGRlcj0iRW50cmV6IHVuZSByw6lmw6lyZW5jZSBvdSB1biBudW3DqXJvIGRlIG1hbmRhdCIgLz4NCjxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRBdXRvQ29tcGxldGVSZWYkVEJWYWx1ZSIgdHlwZT0idGV4dCIgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQlZhbHVlIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIC8+DQo8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9BdXRvQ29tcGxldGVSZWZfUmVzdWx0c0RpdiIgY2xhc3M9ImJhcnJlUmVjaGVyY2hlUmVmUmVzdWx0c0RpdiI+PC9kaXY+DQoNCg0KICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRCTGF1bmNoUmVmU2VhcmNoIiB2YWx1ZT0iIiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQkxhdW5jaFJlZlNlYXJjaCIgY2xhc3M9InNlYXJjaEJhclJlZkJ0biIgLz4NCiAgICANCgk8L2Rpdj4gICAgICAgICAgICANCiAgICA8cCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfcFN1YlRpdGxlIj5OZSByZW1wbGlzc2V6IHF1ZSBsZXMgY2hhbXBzIHF1aSB2b3VzIGludGVyZXNzZW50PC9wPg0KDQogICAgPGRpdiBjbGFzcz0ic2VhcmNoQ3JpdGVyZXMwMiI+DQoNCiAgICAgICAgPCEtLTxkaXYgY2xhc3M9ImJvdXRvblJhZGlvMDIiPg0KICAgICAgICAgICAgPGEgaHJlZj0iIyI+QWNoZXRlcjwvYT4NCiAgICAgICAgPC9kaXY+LS0+DQoNCiAgICAgICAgPHNwYW4gaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1JCTFR5cGVTZWFyY2giIGNsYXNzPSJzZWFyY2gtdHlwZS1yYWRpb3MiPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJMVHlwZVNlYXJjaF8wIiB0eXBlPSJyYWRpbyIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkUkJMVHlwZVNlYXJjaCIgdmFsdWU9IkJhYyIgY2hlY2tlZD0iY2hlY2tlZCIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQkxUeXBlU2VhcmNoXzAiPkFDSEFUPC9sYWJlbD48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1JCTFR5cGVTZWFyY2hfMSIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCTFR5cGVTZWFyY2giIHZhbHVlPSJMb2MiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJMVHlwZVNlYXJjaF8xIj5MT0NBVElPTjwvbGFiZWw+PC9zcGFuPg0KICAgICAgICA8YnIgLz4NCiAgICAgICAgPGJyIC8+DQoNCiAgICAgICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX01haW5EaXYiIHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTsiIGNsYXNzPSJtdWx0aS1zZWxlY3QtZHJvcGRvd24iPg0KICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkVEJJbnB1dCIgdHlwZT0idGV4dCIgYXV0b2NvbXBsZXRlPSJvZmYiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfVEJJbnB1dCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0MiIgcGxhY2Vob2xkZXI9IlR5cGUgZGUgYmllbiIgLz4NCiAgICA8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfVmFsdWVzRGl2IiBjbGFzcz0idmFsdWVzLWRpdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsgcG9zaXRpb246YWJzb2x1dGU7IGJhY2tncm91bmQtY29sb3I6d2hpdGU7IHotaW5kZXg6OTk5OTsiPg0KICAgICAgICA8YnIgLz4NCiAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpibG9jazsgdGV4dC1hbGlnbjpyaWdodDsiPg0KICAgICAgICAgICAgPGEgaHJlZj0iIyI+VmFsaWRlcjwvYT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxzcGFuIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjp3aGl0ZTsiPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18wIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkTVNERFR5cGVzJENCTFZhbHVlcyQwIiB2YWx1ZT0iMjAiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18wIj5NYWlzb248L2xhYmVsPjxiciAvPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18xIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkTVNERFR5cGVzJENCTFZhbHVlcyQxIiB2YWx1ZT0iMSIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzEiPkFwcGFydGVtZW50PC9sYWJlbD48YnIgLz48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfMiIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1TRERUeXBlcyRDQkxWYWx1ZXMkMiIgdmFsdWU9IjMiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18yIj5UZXJyYWluPC9sYWJlbD48YnIgLz48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfMyIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1TRERUeXBlcyRDQkxWYWx1ZXMkMyIgdmFsdWU9IjUiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18zIj5Db21tZXJjZTwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzQiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDQiIHZhbHVlPSIxNCIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzQiPkltbWV1YmxlPC9sYWJlbD48YnIgLz48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfNSIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1TRERUeXBlcyRDQkxWYWx1ZXMkNSIgdmFsdWU9IjMwIiAvPjxsYWJlbCBmb3I9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfNSI+UGFya2luZzwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzYiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDYiIHZhbHVlPSIzMiIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzYiPkJ1cmVhdTwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzciIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDciIHZhbHVlPSIzMSIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzciPkJveDwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzgiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDgiIHZhbHVlPSIxMSIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzgiPlZpYWdlcjwvbGFiZWw+PC9zcGFuPg0KICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OmJsb2NrOyB0ZXh0LWFsaWduOnJpZ2h0OyI+DQogICAgICAgICAgICA8YSBocmVmPSIjIj5WYWxpZGVyPC9hPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4gICAgDQo8L2Rpdj4NCiAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICA8aW5wdXQgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkVEJQcml4TWluIiB0eXBlPSJ0ZXh0IiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfVEJQcml4TWluIiBjbGFzcz0iZmVlZGJhY2staW5wdXQyIG1hcmdpblRvcDYiIHBsYWNlaG9sZGVyPSJQcml4IE1pbiDigqwiIC8+PCEtLSBAd2hpdGVzcGFjZQ0KDQogICAgICAgIC0tPjxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRUQlByaXhNYXgiIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlByaXhNYXgiIGNsYXNzPSJmZWVkYmFjay1pbnB1dDIiIHBsYWNlaG9sZGVyPSJQcml4IE1heCDigqwiIC8+DQoNCiAgICAgICAgPGlucHV0IG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFRCTmJQaWVjZXNNaW4iIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQk5iUGllY2VzTWluIiBjbGFzcz0iZmVlZGJhY2staW5wdXQyIG1hcmdpblRvcDYiIHBsYWNlaG9sZGVyPSJQacOoY2VzIE1pbiIgLz48IS0tIEB3aGl0ZXNwYWNlDQoNCiAgICAgICAgLS0+PGlucHV0IG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFRCTmJQaWVjZXNNYXgiIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQk5iUGllY2VzTWF4IiBjbGFzcz0iZmVlZGJhY2staW5wdXQyICIgcGxhY2Vob2xkZXI9IlBpw6hjZXMgTWF4IiAvPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICA8aW5wdXQgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkVEJOYkNoYW1icmVzTWluIiB0eXBlPSJ0ZXh0IiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfVEJOYkNoYW1icmVzTWluIiBjbGFzcz0iZmVlZGJhY2staW5wdXQyIG1hcmdpblRvcDYiIHBsYWNlaG9sZGVyPSJDaGFtYnJlcyBNaW4iIC8+PCEtLSBAd2hpdGVzcGFjZQ0KDQogICAgICAgIC0tPjxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRUQk5iQ2hhbWJyZXNNYXgiIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQk5iQ2hhbWJyZXNNYXgiIGNsYXNzPSJmZWVkYmFjay1pbnB1dDIgIiBwbGFjZWhvbGRlcj0iQ2hhbWJyZXMgTWF4IiAvPg0KDQogICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRUQlN1cmZhY2VNaW4iIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlN1cmZhY2VNaW4iIGNsYXNzPSJmZWVkYmFjay1pbnB1dDIgbWFyZ2luVG9wNiIgcGxhY2Vob2xkZXI9IlN1cmYuIE1pbiBtMiIgLz48IS0tIEB3aGl0ZXNwYWNlDQoNCiAgICAgICAgLS0+PGlucHV0IG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFRCU3VyZmFjZU1heCIgdHlwZT0idGV4dCIgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCU3VyZmFjZU1heCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0MiAiIHBsYWNlaG9sZGVyPSJTdXJmLiBNYXggbTIiIC8+DQogICAgICAgIA0KICAgIDwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCg0KCS0tPjxkaXYgY2xhc3M9InNlYXJjaENyaXRlcmVzMDIiPg0KICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgICAgIDxkaXYgY2xhc3M9Im1hcmdpbkJvdHRvbTMiPg0KICAgICAgICAgICAgDQoNCg0KPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCiAgICANCiAgICBtdnRiX2lucHV0IHsNCiAgICAgICAgY29sb3I6IzY2NjsNCgkgICAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjsNCgkgICAgZm9udC13ZWlnaHQ6MzAwOw0KCSAgICBmb250LXNpemU6IDAuOWVtOw0KCSAgICBsaW5lLWhlaWdodDogMWVtOw0KICAgICAgICAgICAgdmVydGljYWwtYWxpZ246dGV4dC10b3A7DQoJICAgIGJhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjcpOw0KCSAgICBwYWRkaW5nOiAycHg7DQoJICAgIHdpZHRoOjEwMCU7DQogICAgICAgIGhlaWdodDo0MHB4Ow0KCSAgICBib3JkZXI6MXB4IHNvbGlkICM2NjY7DQoJICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuM3M7DQoJICAgIC1tb3otdHJhbnNpdGlvbjogYWxsIDAuM3M7DQoJICAgIC1vLXRyYW5zaXRpb246IGFsbCAwLjNzOw0KCSAgICAtbXMtdHJhbnNpdGlvbjogYWxsIDAuM3M7DQoJICAgIHRyYW5zaXRpb246IGFsbCAwLjNzOw0KCSAgICBkaXNwbGF5OmlubGluZS1ibG9jazsNCiAgICAgICAgIHdoaXRlLXNwYWNlOm5vd3JhcDsNCiAgICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsNCiAgICAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lOw0KICAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAwcHggMHB4IHJnYmEoMCwwLDAsMCkgLyogbMOpZ8OocmUgb21icmUgaW50ZXJuZSAqLw0KICAgIH0NCiAgICBtdnRiX2lucHV0OmZvY3Vzew0KICAgICAgIA0KCSAgICBib3JkZXI6MXB4IHNvbGlkICM2NjY7DQoJICAgDQogICAgfQ0KDQo8L3N0eWxlPg0KDQo8aW5wdXQgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkTVZUQlZpbGxlcyRUQkF1dG9Db21wbGV0ZSIgdHlwZT0idGV4dCIgYXV0b2NvbXBsZXRlPSJvZmYiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NVlRCVmlsbGVzX1RCQXV0b0NvbXBsZXRlIiBjbGFzcz0ibXZ0Yl9pbnB1dCIgYXV0b2NvbXBsZXRlPSJPZmYiIHBsYWNlaG9sZGVyPSJWaWxsZSBvdSBDUCIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1WVEJWaWxsZXMkVEJWYWx1ZSIgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJWYWx1ZSIgLz4NCg0KICAgICAgICA8L2Rpdj4gDQogICAgICAgIA0KICAgICAgICA8ZGl2IGNsYXNzPSJuYlBpZWNlQnRuMDIgbWFyZ2luVG9wMiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+w4lsYXJnaXIgbGEgcmVjaGVyY2hlIChlbiBrbSk8L2Rpdj4NCiAgICAgICAgICAgIDxzcGFuIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQlBlcmltZXRyZSIgY2xhc3M9ImJvdXRvblJhZGlvTmJQaWVjZXMwMiI+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQlBlcmltZXRyZV8wIiB0eXBlPSJyYWRpbyIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkUkJQZXJpbWV0cmUiIHZhbHVlPSIiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMCI+LTwvbGFiZWw+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQlBlcmltZXRyZV8xIiB0eXBlPSJyYWRpbyIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkUkJQZXJpbWV0cmUiIHZhbHVlPSI1IiAvPjxsYWJlbCBmb3I9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1JCUGVyaW1ldHJlXzEiPjU8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMiIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMTAiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMiI+MTA8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMyIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMTUiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMyI+MTU8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNCIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMjAiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNCI+MjA8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNSIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMjUiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNSI+MjUrPC9sYWJlbD48L3NwYW4+DQogICAgICAgIDwvZGl2PiAgICAgICAgDQogICAgICAgIA0KICAgICAgICA8ZGl2IGNsYXNzPSJtYXJnaW5Ub3AyIj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQ0JWZW50ZXNQcml2ZWVzIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkQ0JWZW50ZXNQcml2ZWVzIiAvPg0KICAgICAgICAgICAgPGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQ0JWZW50ZXNQcml2ZWVzIj48c3Bhbj48L3NwYW4+VlAvZXhjbHVzaXZpdMOpcyB1bmlxdWVtZW50PC9sYWJlbD4NCiAgICAgICAgPC9kaXY+IA0KDQogICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgPC9kaXY+PCEtLSBAd2hpdGVzcGFjZQ0KDQoNCiAgICAtLT48ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9QQnV0dG9uIiBjbGFzcz0iYnRuU2VhcmNoMDIiPg0KCQkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUENyZWF0ZUFsZXJ0ZSIgY2xhc3M9ImJ0bkFsZXJ0ZU1haWwwMiI+DQoJCQkNCiAgICAgICAgICAgIDxhIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9MQkFsZXJ0ZU1haWwiIGNsYXNzPSJiZ0Jsb2NrM2IiIHRpdGxlPSJjcsOpZXIgdW5lIGFsZXJ0ZSBtYWlsIG91IHNtcyIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRMQkFsZXJ0ZU1haWwmIzM5OywmIzM5OyYjMzk7KSI+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5BbGVydGVNYWlsVHh0MDIiPkNyw6llciA8YnIgLz51bmUgYWxlcnRlIDxiciAvPm1haWwgb3Ugc21zPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2FsZXJ0TWFpbFBpY3Quc3ZnIiBhbHQ9ImNyw6llciB1bmUgYWxlcnRlIG1haWwgb3Ugc21zIiAvPiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvYT4NCiAgICAgICAgDQoJCTwvZGl2Pg0KICAgICAgICANCiAgICAgICAgPGRpdiBjbGFzcz0iYnRuU2F2ZUNyaXRlcmVzMDIiIHN0eWxlPSJ2aXNpYmlsaXR5OmhpZGRlbjsiPg0KICAgICAgICAgICAgPGEgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0xCU2F1dmVnYXJkZUNyaXRlcmVzIiBjbGFzcz0iYmdCbG9jazNiIiB0aXRsZT0ic2F1dmVnYXJkZXIgdm9zIGNyaXRlcmVzIGRlIHJlY2hlcmNoZSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRMQlNhdXZlZ2FyZGVDcml0ZXJlcyYjMzk7LCYjMzk7JiMzOTspIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuU2F2ZUNyaXRlcmVzVHh0MDIiPlNhdXZlZ2FyZGVyIDxiciAvPnZvcyBjcml0w6hyZXMgPGJyIC8+ZGUgcmVjaGVyY2hlPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL3NhdmVTZWFyY2hQaWN0LnN2ZyIgYWx0PSJzYXV2ZWdhcmRlciB2b3MgY3JpdGVyZSBkZSByZWNoZXJjaGUiIC8+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUFNlYXJjaCIgY2xhc3M9ImJ0blZhbGlkU2VhcmNoMDIiPg0KCQkJDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9VUFNlYXJjaCI+DQoJCQkJDQogICAgICAgICAgICAgICAgICAgIDxhIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9MQlNlYXJjaCIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRMQlNlYXJjaCYjMzk7LCYjMzk7JiMzOTspIj5UUk9VVkVSPC9hPg0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+ICAgICAgICAgICAgDQogICAgICAgIA0KCQk8L2Rpdj4NCiAgICANCgk8L2Rpdj4gICAgDQoNCg0KPC9kaXY+DQogICAgICAgIA0KPCEtLUVORCBTRUFSQ0ggQUNIQVQtLT4NCg0KIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICBTeXMuV2ViRm9ybXMuUGFnZVJlcXVlc3RNYW5hZ2VyLmdldEluc3RhbmNlKCkuYWRkX3BhZ2VMb2FkZWQoR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfcGFnZUxvYWRlZEhhbmRsZXIpOw0KDQogICAgIGZ1bmN0aW9uIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX3BhZ2VMb2FkZWRIYW5kbGVyKHNlbmRlciwgYXJncykgew0KDQogICAgICAgICAgICB2YXIgc3VyZmFjZU1pbl9pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlN1cmZhY2VNaW4nKTsNCiAgICAgICAgICAgIHZhciBzdXJmYWNlTWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCU3VyZmFjZU1heCcpOw0KDQogICAgICAgICAgICB2YXIgcHJpeE1pbl9pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlByaXhNaW4nKTsNCiAgICAgICAgICAgIHZhciBwcml4TWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCUHJpeE1heCcpOw0KDQogICAgICAgICAgICB2YXIgbmJwaWVjZXNNaW5faW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfVEJOYlBpZWNlc01pbicpOw0KICAgICAgICAgICAgdmFyIG5icGllY2VzTWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCTmJQaWVjZXNNYXgnKTsNCg0KICAgICAgICAgICAgdmFyIG5iY2hicmVzTWluX2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCTmJDaGFtYnJlc01pbicpOw0KICAgICAgICAgICAgdmFyIG5iY2hicmVzTWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCTmJDaGFtYnJlc01heCcpOw0KDQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KHN1cmZhY2VNaW5faW5wdXQsICIgbcKyIG1pbiIsIGZhbHNlKTsNCiAgICAgICAgICAgIEluaXROdW1lcmljSW5wdXQoc3VyZmFjZU1heF9pbnB1dCwgIiBtwrIgbWF4IiwgZmFsc2UpOw0KICAgICAgICAgICAgSW5pdE51bWVyaWNJbnB1dChwcml4TWluX2lucHV0LCAiIOKCrCBtaW4iLCBmYWxzZSk7DQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KHByaXhNYXhfaW5wdXQsICIg4oKsIG1heCIsIGZhbHNlKTsNCiAgICAgICAgICAgIEluaXROdW1lcmljSW5wdXQobmJwaWVjZXNNaW5faW5wdXQsICIgcGnDqGNlcyBtaW4iLCBmYWxzZSk7DQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KG5icGllY2VzTWF4X2lucHV0LCAiIHBpw6hjZXMgbWF4IiwgZmFsc2UpOw0KICAgICAgICAgICAgSW5pdE51bWVyaWNJbnB1dChuYmNoYnJlc01pbl9pbnB1dCwgIiBjaGFtYnJlcyBtaW4iLCBmYWxzZSk7DQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KG5iY2hicmVzTWF4X2lucHV0LCAiIGNoYW1icmVzIG1heCIsIGZhbHNlKTsNCg0KICAgICAgICB9Ow0KICAgICAgICAgIA0KICAgIDwvc2NyaXB0Pg0KDQoNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vU1RBUlQgQ29udGVudSBkeW5hbWlxdWUgZGUgbGEgcGFnZS0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIGJvZHktY29udGVudCI+DQoNCiAgICAgICAgICAgICAgICA8IS0tLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9EZWJ1dCBkdSAubWFpbi0tPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4gY2YiIGlkPSJtYWluIiByb2xlPSJtYWluIj4NCg0KICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvanF1ZXJ5LTMuMS4xLm1pbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjEyLjEubWluLmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgICAgIA0KDQogICAgDQogICAgICAgIA0KICAgIDxkaXYgaWQ9ImZiLXJvb3QiPjwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgKGZ1bmN0aW9uIChkLCBzLCBpZCkgew0KICAgICAgICAgICAgdmFyIGpzLCBmanMgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdOw0KICAgICAgICAgICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSByZXR1cm47DQogICAgICAgICAgICBqcyA9IGQuY3JlYXRlRWxlbWVudChzKTsganMuaWQgPSBpZDsNCiAgICAgICAgICAgIGpzLnNyYyA9ICIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2ZyX0ZSL3Nkay5qcyN4ZmJtbD0xJnZlcnNpb249djIuNCI7DQogICAgICAgICAgICBmanMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIGZqcyk7DQogICAgICAgIH0oZG9jdW1lbnQsICdzY3JpcHQnLCAnZmFjZWJvb2stanNzZGsnKSk7DQoNCiAgICA8L3NjcmlwdD4NCiAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRkNvZGVBZ2VuY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfSEZDb2RlQWdlbmNlIiB2YWx1ZT0iNzMiIC8+DQogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkSEZDb2RlVmlsbGUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfSEZDb2RlVmlsbGUiIHZhbHVlPSIxODYyIiAvPg0KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEhGUGhvdG9zRmlsdGVyU3RyaW5nIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0hGUGhvdG9zRmlsdGVyU3RyaW5nIiB2YWx1ZT0icGhvdG9zeW50aD0wIEFORCBDb2RlX1Byb2R1aXQ9ODU2MjcyIiAvPg0KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEhGUmVmUHJvZHVpdCIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9IRlJlZlByb2R1aXQiIHZhbHVlPSIxMDAwMTQyNDg1IiAvPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJpYW5lIj4NCiAgICAgICAgICAgICAgICA8IS0tc3RhcnQgRklMIEFSSUFOTkUtLT4NCiAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiB0aXRsZT0icmV2ZW5pciDDoCBsJ2FjY3VlaWwgZHUgc2l0ZSBMYSBSw6lzaWRlbmNlIj5BY2N1ZWlsPC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlBY2hldGVyIj48YSBocmVmPSIvYWNoZXRlciIgdGl0bGU9ImFjaGV0ZXIgdW4gYmllbiI+QWNoZXRlcjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxsaT5GaWNoZSBkZXNjcmlwdGl2ZSBkdSBiaWVuPC9saT4NCg0KICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwhLS1maW4gRklMIEFSSUFOTkUtLT4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlV3JhcHBlciI+DQogICAgICAgICAgICAgICAgPCEtLXN0YXJ0IGZpY2hlQWZmYWlyZVdyYXBwZXItLT4NCg0KICAgICAgICAgICAgICAgIDxoMT7DgCBQYXJpcyAxOMOobWUgPGJyLz4gw4AgdmVuZHJlIGFwcGFydGVtZW50IDMgcGnDqGNlczwvaDE+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1VwZGF0ZVBhbmVsMiI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJib3V0b25SZXRvdXJQcmludCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYmFyZW1lMiBiZ0Jsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nL2JhcmVtZS1hZ2VuY2UtcGFyaXMtMTcnPkJhcsOqbWUgZCdob25vcmFpcmVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwcmludCBiZ0Jsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9JyMnIG9uY2xpY2s9IndpbmRvdy5wcmludCgpOyI+PHNwYW4+PC9zcGFuPkltcHJpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtb2RpZlNlYXJjaCBiZ0Jsb2NrMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTEJNb2RpZnlTZWFyY2giIGhyZWY9ImphdmFzY3JpcHQ6X19kb1Bvc3RCYWNrKCYjMzk7Y3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JExCTW9kaWZ5U2VhcmNoJiMzOTssJiMzOTsmIzM5OykiPjxzcGFuPjwvc3Bhbj5Nb2RpZmllciBsYSByZWNoZXJjaGU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiANCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+ICANCiAgICAgICAgICAgICAgIA0KICAgICAgICANCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWNoZUFmZmFpcmUgcGFnZVR4dCBiZ0Jsb2NrIiBzdHlsZT0iZGlzcGxheTpub25lOyI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImgzX3N0eWxlIj5Ob3V2ZWF1dMOpICE8L2Rpdj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHh0MyI+DQogICAgICAgICAgICAgICAgICAgICAgICBDbGlxdWV6IHN1ciA8aW1nIHNyYz0iL2ltYWdlcy9waWN0b0NvZXVyLnN2ZyIgLz4gcG91ciBham91dGVyIMOgICJNZXMgcGhvdG9zIi4gRGVzIGJpZW5zIGVuIGFjY29yZCBhdmVjIHZvcyBwcsOpZsOpcmVuY2VzIHZpc3VlbGxlcyB2b3VzIHNlcm9udCBzdWdnw6lyw6lzICENCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJyYWNjb3VyY2lTZWN0aW9uRmljaGVQcm9kdWl0IHNlY3Rpb25BZ2VuY2VNYXJnaW5Ub3A0OCI+PCEtLSBEZWJ1dCBzZWN0aW9uQWdlbmNlIDAyIC0tPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJiZ0Jsb2NrIj48YSBocmVmPSIjcGhvdG9zX2FuY2hvciI+UGhvdG9zPC9hPjwvdGQ+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgIC0tPjx0ZCBjbGFzcz0iYmdCbG9jayI+PGEgaHJlZj0iI21lZGlhc19hbmNob3IiPk1lZGlhczwvYT48L3RkPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAtLT48dGQgY2xhc3M9ImJnQmxvY2siPjxhIGhyZWY9IiNkZXNjcmlwdGlmX2FuY2hvciI+RGVzY3JpcHRpZjwvYT48L3RkPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAtLT48dGQgY2xhc3M9ImJnQmxvY2siPjxhIGhyZWY9IiNjb250YWN0X2FuY2hvciI+TCdhZ2VuY2U8L2E+PC90ZD48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgLS0+PHRkIGNsYXNzPSJiZ0Jsb2NrIj48YSBocmVmPSIjbG9jYWxpc2F0aW9uX2FuY2hvciI+TG9jYWxpc2F0aW9uPC9hPjwvdGQ+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgIC0tPjx0ZCBjbGFzcz0iYmdCbG9jayI+PGEgaHJlZj0iI3N1Z2dlc3Rpb25fYW5jaG9yIj5TdWdnZXN0aW9uczwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWNoZUFmZmFpcmUgYmdCbG9jayI+DQogICAgICAgICAgICAgICAgICAgIDwhLS1zdGFydCBmaWNoZUFmZmFpcmUgKyBCZ0Jsb2NrLS0+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWNoZUFmZmFpcmVMZWZ0U2lkZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJUZXh0UHViQWZmYWlyZSI+ICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgIDxoMj5BcHBhcnRlbWVudCA2MW0yIC0gNjg1wqAwMDAg4oKsKiAgLSAgUsOpZi4gNjY5MTwvaDI+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZXJGaWNoZUFmZmFpcmUiIGlkPSJwaG90b3NfYW5jaG9yIj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLXN0YXJ0IHNsaWRlckZpY2hlQWZmYWlyZS0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGVyQ29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLWNvbnRhaW5lcjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXdyYXBwZXIzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9QUGhvdG9fMCIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzAiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JFBob3Rvc1JlcGVhdGVyJGN0bDAwJEJMaWtlUGhvdG8iIHZhbHVlPSIiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfQkxpa2VQaG90b18wIiBjbGFzcz0icGljdG8tYWpvdXRlci1waG90byIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTZiZWZkY2U4LTc2ZjYtNDM2OS1hNDhkLTNlMTU1YWNiYmExYiIgY2xhc3M9ImZhbmN5Ym94IGZhbmN5Ym94LmlmcmFtZSIgZGF0YS1mYW5jeWJveD0iUGhvdG9zIiBkYXRhLWNhcHRpb249IiIgZGF0YS1mYW5jeWJveC10eXBlPSJpZnJhbWUiIGRhdGEtZmFuY3lib3gtaHJlZj0icGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTZiZWZkY2U4LTc2ZjYtNDM2OS1hNDhkLTNlMTU1YWNiYmExYiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDE0MjQ4NS82YmVmZGNlOC03NmY2LTQzNjktYTQ4ZC0zZTE1NWFjYmJhMWIuanBnIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX2ltYWdlX3Byb2R1aXRfMCIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b18xIiBjbGFzcz0ic3dpcGVyLXNsaWRlMyI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfVVBMaWtlUGhvdG9fMSI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkUGhvdG9zUmVwZWF0ZXIkY3RsMDEkQkxpa2VQaG90byIgdmFsdWU9IiIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9CTGlrZVBob3RvXzEiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9ODBhYzRkODEtZTFkNi00NGYyLWE0MTEtYzlhZDYyNDRkMTQ5IiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9ODBhYzRkODEtZTFkNi00NGYyLWE0MTEtYzlhZDYyNDRkMTQ5Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQyNDg1LzgwYWM0ZDgxLWUxZDYtNDRmMi1hNDExLWM5YWQ2MjQ0ZDE0OS5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF8xIiBkYXRhLWRlbGF5PSI1MDAwIiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0mIzM5O0ltYWdlcy9waG90b01hbnF1ZS5qcGcmIzM5OzsiIHN0eWxlPSJvYmplY3QtZml0OmNvbnRhaW47IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfUFBob3RvXzIiIGNsYXNzPSJzd2lwZXItc2xpZGUzIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9VUExpa2VQaG90b18yIj4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwwMiRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fMiIgY2xhc3M9InBpY3RvLWFqb3V0ZXItcGhvdG8iIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Bob3RvLXZydmlldy5hc3B4P1JlZj1jYTkzM2ExNi0wM2UyLTQxMzItYjU4NC0wZGE3OWY0M2QwODQiIGNsYXNzPSJmYW5jeWJveCBmYW5jeWJveC5pZnJhbWUiIGRhdGEtZmFuY3lib3g9IlBob3RvcyIgZGF0YS1jYXB0aW9uPSIiIGRhdGEtZmFuY3lib3gtdHlwZT0iaWZyYW1lIiBkYXRhLWZhbmN5Ym94LWhyZWY9InBob3RvLXZydmlldy5hc3B4P1JlZj1jYTkzM2ExNi0wM2UyLTQxMzItYjU4NC0wZGE3OWY0M2QwODQiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDI0ODUvY2E5MzNhMTYtMDNlMi00MTMyLWI1ODQtMGRhNzlmNDNkMDg0LmpwZyIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9pbWFnZV9wcm9kdWl0XzIiIGRhdGEtZGVsYXk9IjUwMDAiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSYjMzk7SW1hZ2VzL3Bob3RvTWFucXVlLmpwZyYjMzk7OyIgc3R5bGU9Im9iamVjdC1maXQ6Y29udGFpbjsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9QUGhvdG9fMyIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzMiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JFBob3Rvc1JlcGVhdGVyJGN0bDAzJEJMaWtlUGhvdG8iIHZhbHVlPSIiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfQkxpa2VQaG90b18zIiBjbGFzcz0icGljdG8tYWpvdXRlci1waG90byIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTYyMjBjYTFiLWZhYWEtNDA0MC05OWRiLTExMTRjYmYxNDBmOCIgY2xhc3M9ImZhbmN5Ym94IGZhbmN5Ym94LmlmcmFtZSIgZGF0YS1mYW5jeWJveD0iUGhvdG9zIiBkYXRhLWNhcHRpb249IiIgZGF0YS1mYW5jeWJveC10eXBlPSJpZnJhbWUiIGRhdGEtZmFuY3lib3gtaHJlZj0icGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTYyMjBjYTFiLWZhYWEtNDA0MC05OWRiLTExMTRjYmYxNDBmOCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDE0MjQ4NS82MjIwY2ExYi1mYWFhLTQwNDAtOTlkYi0xMTE0Y2JmMTQwZjguanBnIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX2ltYWdlX3Byb2R1aXRfMyIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b180IiBjbGFzcz0ic3dpcGVyLXNsaWRlMyI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfVVBMaWtlUGhvdG9fNCI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkUGhvdG9zUmVwZWF0ZXIkY3RsMDQkQkxpa2VQaG90byIgdmFsdWU9IiIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9CTGlrZVBob3RvXzQiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9MmE3NjcxZjItMDBlZi00YWVmLWE1YTYtN2RkMTgxNjA4YmEyIiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9MmE3NjcxZjItMDBlZi00YWVmLWE1YTYtN2RkMTgxNjA4YmEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQyNDg1LzJhNzY3MWYyLTAwZWYtNGFlZi1hNWE2LTdkZDE4MTYwOGJhMi5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF80IiBkYXRhLWRlbGF5PSI1MDAwIiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0mIzM5O0ltYWdlcy9waG90b01hbnF1ZS5qcGcmIzM5OzsiIHN0eWxlPSJvYmplY3QtZml0OmNvbnRhaW47IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfUFBob3RvXzUiIGNsYXNzPSJzd2lwZXItc2xpZGUzIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9VUExpa2VQaG90b181Ij4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwwNSRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fNSIgY2xhc3M9InBpY3RvLWFqb3V0ZXItcGhvdG8iIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Bob3RvLXZydmlldy5hc3B4P1JlZj1lZWZiNzJjOS1kMWE5LTRhMWYtYmRiMS1jNTExN2NiYzE0ZDEiIGNsYXNzPSJmYW5jeWJveCBmYW5jeWJveC5pZnJhbWUiIGRhdGEtZmFuY3lib3g9IlBob3RvcyIgZGF0YS1jYXB0aW9uPSIiIGRhdGEtZmFuY3lib3gtdHlwZT0iaWZyYW1lIiBkYXRhLWZhbmN5Ym94LWhyZWY9InBob3RvLXZydmlldy5hc3B4P1JlZj1lZWZiNzJjOS1kMWE5LTRhMWYtYmRiMS1jNTExN2NiYzE0ZDEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDI0ODUvZWVmYjcyYzktZDFhOS00YTFmLWJkYjEtYzUxMTdjYmMxNGQxLmpwZyIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9pbWFnZV9wcm9kdWl0XzUiIGRhdGEtZGVsYXk9IjUwMDAiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSYjMzk7SW1hZ2VzL3Bob3RvTWFucXVlLmpwZyYjMzk7OyIgc3R5bGU9Im9iamVjdC1maXQ6Y29udGFpbjsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9QUGhvdG9fNiIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzYiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JFBob3Rvc1JlcGVhdGVyJGN0bDA2JEJMaWtlUGhvdG8iIHZhbHVlPSIiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfQkxpa2VQaG90b182IiBjbGFzcz0icGljdG8tYWpvdXRlci1waG90byIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTk4OGYzZWNmLTI1NmYtNDgyMi05OTY1LTJiYzA2NTBiNTI0NiIgY2xhc3M9ImZhbmN5Ym94IGZhbmN5Ym94LmlmcmFtZSIgZGF0YS1mYW5jeWJveD0iUGhvdG9zIiBkYXRhLWNhcHRpb249IiIgZGF0YS1mYW5jeWJveC10eXBlPSJpZnJhbWUiIGRhdGEtZmFuY3lib3gtaHJlZj0icGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTk4OGYzZWNmLTI1NmYtNDgyMi05OTY1LTJiYzA2NTBiNTI0NiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDE0MjQ4NS85ODhmM2VjZi0yNTZmLTQ4MjItOTk2NS0yYmMwNjUwYjUyNDYuanBnIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX2ltYWdlX3Byb2R1aXRfNiIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b183IiBjbGFzcz0ic3dpcGVyLXNsaWRlMyI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfVVBMaWtlUGhvdG9fNyI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkUGhvdG9zUmVwZWF0ZXIkY3RsMDckQkxpa2VQaG90byIgdmFsdWU9IiIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9CTGlrZVBob3RvXzciIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9YTUzNDc4NTEtODViMC00Nzk1LTg4NTItZjhjNTkzYzBjZDdjIiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9YTUzNDc4NTEtODViMC00Nzk1LTg4NTItZjhjNTkzYzBjZDdjIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQyNDg1L2E1MzQ3ODUxLTg1YjAtNDc5NS04ODUyLWY4YzU5M2MwY2Q3Yy5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF83IiBkYXRhLWRlbGF5PSI1MDAwIiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0mIzM5O0ltYWdlcy9waG90b01hbnF1ZS5qcGcmIzM5OzsiIHN0eWxlPSJvYmplY3QtZml0OmNvbnRhaW47IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfUFBob3RvXzgiIGNsYXNzPSJzd2lwZXItc2xpZGUzIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9VUExpa2VQaG90b184Ij4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwwOCRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fOCIgY2xhc3M9InBpY3RvLWFqb3V0ZXItcGhvdG8iIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Bob3RvLXZydmlldy5hc3B4P1JlZj02MTg2ZWYxYi0yYjExLTQ0N2ItYmJlYi0xMDdjN2M5N2QyN2YiIGNsYXNzPSJmYW5jeWJveCBmYW5jeWJveC5pZnJhbWUiIGRhdGEtZmFuY3lib3g9IlBob3RvcyIgZGF0YS1jYXB0aW9uPSIiIGRhdGEtZmFuY3lib3gtdHlwZT0iaWZyYW1lIiBkYXRhLWZhbmN5Ym94LWhyZWY9InBob3RvLXZydmlldy5hc3B4P1JlZj02MTg2ZWYxYi0yYjExLTQ0N2ItYmJlYi0xMDdjN2M5N2QyN2YiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDI0ODUvNjE4NmVmMWItMmIxMS00NDdiLWJiZWItMTA3YzdjOTdkMjdmLmpwZyIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9pbWFnZV9wcm9kdWl0XzgiIGRhdGEtZGVsYXk9IjUwMDAiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSYjMzk7SW1hZ2VzL3Bob3RvTWFucXVlLmpwZyYjMzk7OyIgc3R5bGU9Im9iamVjdC1maXQ6Y29udGFpbjsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9QUGhvdG9fOSIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzkiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JFBob3Rvc1JlcGVhdGVyJGN0bDA5JEJMaWtlUGhvdG8iIHZhbHVlPSIiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfQkxpa2VQaG90b185IiBjbGFzcz0icGljdG8tYWpvdXRlci1waG90byIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTNjZmEzMjM1LTZhYzAtNGIzNi04NTUyLTQ0OTk3MGIxOTVhNCIgY2xhc3M9ImZhbmN5Ym94IGZhbmN5Ym94LmlmcmFtZSIgZGF0YS1mYW5jeWJveD0iUGhvdG9zIiBkYXRhLWNhcHRpb249IiIgZGF0YS1mYW5jeWJveC10eXBlPSJpZnJhbWUiIGRhdGEtZmFuY3lib3gtaHJlZj0icGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTNjZmEzMjM1LTZhYzAtNGIzNi04NTUyLTQ0OTk3MGIxOTVhNCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDE0MjQ4NS8zY2ZhMzIzNS02YWMwLTRiMzYtODU1Mi00NDk5NzBiMTk1YTQuanBnIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX2ltYWdlX3Byb2R1aXRfOSIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b18xMCIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzEwIj4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwxMCRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fMTAiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9M2EyZGM1MjItYmQyZC00MzliLTljMzgtMDUzOWJjOTAyNmUxIiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9M2EyZGM1MjItYmQyZC00MzliLTljMzgtMDUzOWJjOTAyNmUxIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQyNDg1LzNhMmRjNTIyLWJkMmQtNDM5Yi05YzM4LTA1MzliYzkwMjZlMS5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF8xMCIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b18xMSIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzExIj4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwxMSRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fMTEiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9NGVmM2Y3ODUtYTA2Yy00NDU2LWE3OTMtNjI4NTJiZGI5ZWI4IiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9NGVmM2Y3ODUtYTA2Yy00NDU2LWE3OTMtNjI4NTJiZGI5ZWI4Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQyNDg1LzRlZjNmNzg1LWEwNmMtNDQ1Ni1hNzkzLTYyODUyYmRiOWViOC5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF8xMSIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b18xMiIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzEyIj4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwxMiRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fMTIiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9Y2Y3MDE1N2EtMmU0Yi00MmY0LWFmOWEtNTI0NzhhYzQ4MjNjIiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9Y2Y3MDE1N2EtMmU0Yi00MmY0LWFmOWEtNTI0NzhhYzQ4MjNjIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQyNDg1L2NmNzAxNTdhLTJlNGItNDJmNC1hZjlhLTUyNDc4YWM0ODIzYy5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF8xMiIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b18xMyIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzEzIj4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwxMyRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fMTMiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9ZGEyZmEzODItMzY4MS00YWIwLWFlYTUtZTNmNmM2MWRlZDkyIiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9ZGEyZmEzODItMzY4MS00YWIwLWFlYTUtZTNmNmM2MWRlZDkyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQyNDg1L2RhMmZhMzgyLTM2ODEtNGFiMC1hZWE1LWUzZjZjNjFkZWQ5Mi5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF8xMyIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQWRkIEFycm93cyAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLWJ1dHRvbi1uZXh0MyI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1idXR0b24tcHJldjMiPjwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2PjwhLS1lbmQgc2xpZGVyRmljaGVBZmZhaXJlLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRldGFpbHNBZmZhaXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1zdGFydCBkZXRhaWxzQWZmYWlyZS0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iVGV4dFB1YkFmZmFpcmUiIGlkPSJkZXNjcmlwdGlmX2FuY2hvciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhcmlmc0xvaTIwMTciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaXhMaWduZTFMb2kyMDE3Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFByaXggOiA8c3Ryb25nPjY4NcKgMDAwIOKCrCA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcml4TGlnbmUyTG9pMjAxNyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcml4IGhvbm9yYWlyZXMgZXhjbHVzIDogNjYwwqAwMDAg4oKsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4gICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcml4RGV0YWlsc0xvaTIwMTciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSG9ub3JhaXJlcyBkZSAzLDglIMOgIGxhIGNoYXJnZSBkZSBsJ2FjcXXDqXJldXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbnRyZSBHdXkgTW9xdWV0IGV0IExhIEZvdXJjaGU8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRMOpY291dnJleiBjZSBtYWduaWZpcXVlIGFwcGFydGVtZW50IHRyYXZlcnNhbnQsIGVuIHJlei1kZS1jaGF1c3PDqWUsIGVudGnDqHJlbWVudCByw6lub3bDqSBhdmVjIGQnZXhjZWxsZW50cyBtYXTDqXJpYXV4LiBEYW5zIHVuZSBwZXRpdGUgcnVlIGNhbG1lLCB2b3VzIHByb2ZpdGVyZXogZCd1biBncmFuZCBkb3VibGUgc8Opam91ciBkZSAzMG0yLCBkJ3VuZSBjdWlzaW5lIG91dmVydGUgZW50acOocmVtZW50IMOpcXVpcMOpZSwgZCd1bmUgc2FsbGUgZCdlYXUgYXZlYyBXQywgZCd1bmUgY2hhbWJyZSBkJ2FwcG9pbnQvYnVyZWF1L2RyZXNzaW5nIGV0IGQndW5lIGNoYW1icmUgc3VyIGNvdXIuDQpJZMOpYWxlbWVudCBzaXR1w6kgw6AgMiBtaW51dGVzIMOgIHBpZWQgZHUgbcOpdHJvIExhIEZvdXJjaGUgZXQgR3V5IE1vcXVldCBldCDDoCBxdWVscXVlcyBtaW51dGVzIGRlIGxhIFBsYWNlIGRlIENsaWNoeS48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpeCA6IDY4NS4wMDAgZXVyb3MgZG9uYyAzLDc5JSBkJ2hvbm9yYWlyZXMgY2hhcmdlIGFjcXXDqXJldXIuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwU2hhcmVBY3R1MiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZiLXNoYXJlLWJ1dHRvbiIgZGF0YS1ocmVmPSdodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE4L2FwcGFydGVtZW50LzEwMDAxNDI0ODUnIGRhdGEtbGF5b3V0PSJidXR0b25fY291bnQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmFjdGVyaXN0aXF1ZXNCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+Q2FyYWN0w6lyaXN0aXF1ZXMgZHUgYmllbjwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJncm91cGVVbCBtYXJnZURyb2l0ZUdwZVVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+VHlwZSBkZSBiaWVuIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+R2VucmUgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5OYiBkZSBwacOoY2UocykgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPk5iIGRlIGNoYW1icmUocykgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPlN1cmYuIGhhYml0LiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDYxbTxwPjI8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5TYWxsZSBkZSBiYWlucyA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPlNhbGxlIGQnZWF1IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+V0MgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5UZXJyYWluL0phcmRpbiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb24gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgICAgICAgICAgLS0+PHRhYmxlIGNsYXNzPSJncm91cGVVbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPlRlcnJhc3NlIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vbiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5DaGF1ZmZhZ2UgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRpdmlkdWVsIEVsZWN0cmlxdWUgUmFkaWF0ZXVyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPkdhcmFnZS9ib3ggPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYW5zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+RGF0ZSBkZSBjb25zdHJ1Y3Rpb24gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOTAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPkJpZW4gZW4gY29wcm9wcmnDqXTDqSA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdWkgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+TmIuIGRlIGxvdHMgZGUgY29wcm8uIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPkNoYXJnZXMgYW5udWVsbGVzIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMDUwIOKCrC9hbiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+UHJvY8OpZHVyZSBlbiBjb3VycyA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9uIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj48IS0tZW5kIGRldGFpbHNBZmZhaXJlLS0+DQogICAgICAgICAgICAgICAgICA8L2Rpdj48IS0tZW5kIGZpY2hlQWZmYWlyZUxlZnRTaWRlLS0+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgIC0tPjxkaXYgY2xhc3M9ImZpY2hlQWZmYWlyZVJpZ2h0U2lkZSI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVuY2FydExpbmtBZ2VuY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVNUQVJUIGVuY2FydExpbmtBZ2VuY2UtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tc3RhcnQgbGlua0ZpY2hlQWZmYWlyZS0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbmNhcnRBZ2VuY2UiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSIgaWQ9ImNvbnRhY3RfYW5jaG9yIj5DZSBiaWVuIHZvdXMgZXN0IHByb3Bvc8OpIHBhcjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWdlbmNlIExhIFLDqXNpZGVuY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgw6AgUGFyaXMgMTfDqG1lIDc1MDE3PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNzEsIGF2ZW51ZSBkZSBTYWludCBPdWVuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImxpbmtQYWdlQWdlbmNlIiBocmVmPSIvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcGFyaXMtMTgiPlNpdGUgZGUgbCdhZ2VuY2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1VQU2hvd1RlbCI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9MQlNob3dUZWxBZ2VuY2UiIGNsYXNzPSJsaW5rQWdlbmNlIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRGVkFnZW5jZSRMQlNob3dUZWxBZ2VuY2UmIzM5OywmIzM5OyYjMzk7KSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb250YWN0QWdlbmNlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfTFNob3dUZWxBZ2VuY2UiPkFmZmljaGVyIGxlIHTDqWzDqXBob25lPC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+PC9saT48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+PGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1VQQWpvdXRTZWxlY3Rpb24iPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX0xCQWpvdXRTZWxlY3Rpb24iIGNsYXNzPSJsaW5rQWdlbmNlIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRGVkFnZW5jZSRMQkFqb3V0U2VsZWN0aW9uJiMzOTssJiMzOTsmIzM5OykiPjxzcGFuIGNsYXNzPSJmYXZvcmlzIj48L3NwYW4+QWpvdXRlciAmIzIyNDsgbWEgcyYjMjMzO2xlY3Rpb248L2E+DQo8L2Rpdj48L2xpPjwvdWw+PGJyIC8+PGRpdiBjbGFzcz0iZmljaGUtcHJvZHVpdC1mb3JtdWxhaXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSI+RGVtYW5kZSBkJ2luZm9ybWF0aW9uczwvZGl2PjxpbnB1dCBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkVEJOb20iIHR5cGU9InRleHQiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfVEJOb20iIGNsYXNzPSJmZWVkYmFjay1pbnB1dCIgcGxhY2Vob2xkZXI9IkluZGlxdWV6IHZvdHJlIG5vbSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkUkZWTm9tX1ZhbGlkYXRvckNhbGxvdXRFeHRlbmRlcl9DbGllbnRTdGF0ZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZOb21fVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyX0NsaWVudFN0YXRlIiAvPg0KDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEZWQWdlbmNlJFRCVGVsZXBob25lIiB0eXBlPSJ0ZWwiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfVEJUZWxlcGhvbmUiIGNsYXNzPSJmZWVkYmFjay1pbnB1dCIgcGxhY2Vob2xkZXI9IlTDqWzDqXBob25lIiAvPjxpbnB1dCBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkVEJFbWFpbCIgdHlwZT0iZW1haWwiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfVEJFbWFpbCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0IiBwbGFjZWhvbGRlcj0iRW1haWwiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEZWQWdlbmNlJFJGVkVtYWlsX1ZhbGlkYXRvckNhbGxvdXRFeHRlbmRlcl9DbGllbnRTdGF0ZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkUkVWRW1haWxfVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyX0NsaWVudFN0YXRlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1JFVkVtYWlsX1ZhbGlkYXRvckNhbGxvdXRFeHRlbmRlcl9DbGllbnRTdGF0ZSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkVEJNZXNzYWdlIiByb3dzPSIyIiBjb2xzPSIyMCIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9UQk1lc3NhZ2UiIGNsYXNzPSJmZWVkYmFjay1pbnB1dCBtZXNzYWdlIiBwbGFjZWhvbGRlcj0iTWVzc2FnZSI+DQo8L3RleHRhcmVhPjxkaXYgY2xhc3M9ImJ0bkZpY2hlUHJvZHVpdENvbnRhY3RBZ2VuY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX0xCRW52b3llck1lc3NhZ2UiIGhyZWY9ImphdmFzY3JpcHQ6V2ViRm9ybV9Eb1Bvc3RCYWNrV2l0aE9wdGlvbnMobmV3IFdlYkZvcm1fUG9zdEJhY2tPcHRpb25zKCZxdW90O2N0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRGVkFnZW5jZSRMQkVudm95ZXJNZXNzYWdlJnF1b3Q7LCAmcXVvdDsmcXVvdDssIHRydWUsICZxdW90O0RlbWFuZGVJbmZvc1Byb2R1aXQmcXVvdDssICZxdW90OyZxdW90OywgZmFsc2UsIHRydWUpKSI+RW52b3llcjwvYT48L2Rpdj48ZGl2IHN0eWxlPSJmb250LXNpemU6eC1zbWFsbDsgZGlzcGxheTpibG9jazsgbGluZS1oZWlnaHQ6MS40ZW07IG1hcmdpbi10b3A6MTJweDsiPkluZm9ybcOpKGUpIGRlIGxhIHBvc3NpYmlsaXTDqSBkZSBtJ29wcG9zZXIgw6AgbCd1dGlsaXNhdGlvbiBkZSBtZXMgY29vcmRvbm7DqWVzIHTDqWzDqXBob25pcXVlcyDDoCBkZXMgZmlucyBkZSBwcm9zcGVjdGlvbiBjb21tZXJjaWFsZSAod3d3LmJsb2N0ZWwuZ291di5mciksIGonYXV0b3Jpc2UgbCdhZ2VuY2UgTGEgUsOpc2lkZW5jZSBkZSBQYXJpcyAxNyYjMjMyO21lw6AgbWUgY29udGFjdGVyIGF1IG51bcOpcm8gcmVuc2VpZ27DqS48L2Rpdj48L2Rpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLWVuZCBlbmNhcnRMaW5rQWdlbmNlLS0+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mb0NvbXBBZmZhaXJlIj48IS0tc3RhcnQgaW5mb0NvbXBBZmZhaXJlLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSI+SW5mb3MgY29tcGzDqW1lbnRhaXJlczwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRkxhdGl0dWRlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0hGTGF0aXR1ZGUiIHZhbHVlPSI0OC44ODkxOTQ4ODE4MTgyIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRkxvbmdpdHVkZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9IRkxvbmdpdHVkZSIgdmFsdWU9IjIuMzI2NzQ5OTM2MzYzNjQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlVHJhbnNwb3J0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDAkSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV8wIiB2YWx1ZT0iMzg0OSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+TGVzIGdhcmVzIMOgIHByb3hpbWl0w6k8L2Rpdj48YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhIEZvdXJjaGUgfiAzMDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwMCRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8wX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxNDEiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi9jL2MyL1BhcmlzX21fMTNfam1zLnN2Zy8xNnB4LVBhcmlzX21fMTNfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDEzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAxJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMSIgdmFsdWU9IjM4NDgiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHdXkgTcO0cXVldCB+IDMwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAxJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzFfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjE0MSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2MvYzIvUGFyaXNfbV8xM19qbXMuc3ZnLzE2cHgtUGFyaXNfbV8xM19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMTMnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDIkSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV8yIiB2YWx1ZT0iMzg0MCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJyb2NoYW50IH4gNTAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDIkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMl9IRklkU2VydmljZV8wIiB2YWx1ZT0iMTQxIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvYy9jMi9QYXJpc19tXzEzX2ptcy5zdmcvMTZweC1QYXJpc19tXzEzX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSAxMycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwMyRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzMiIHZhbHVlPSIzNTk0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhY2UgZGUgQ2xpY2h5IH4gNjAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDMkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfM19IRklkU2VydmljZV8wIiB2YWx1ZT0iMTI4IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvMi8yNi9QYXJpc19tXzJfam1zLnN2Zy8xNnB4LVBhcmlzX21fMl9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMicgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAzJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDEkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzNfSEZJZFNlcnZpY2VfMSIgdmFsdWU9IjE0MSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2MvYzIvUGFyaXNfbV8xM19qbXMuc3ZnLzE2cHgtUGFyaXNfbV8xM19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMTMnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDQkSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV80IiB2YWx1ZT0iMzU5NSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJsYW5jaGUgfiA4MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwNCRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl80X0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMjgiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi8yLzI2L1BhcmlzX21fMl9qbXMuc3ZnLzE2cHgtUGFyaXNfbV8yX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSAyJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA1JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfNSIgdmFsdWU9IjM1OTMiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSb21lIH4gODAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDUkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfNV9IRklkU2VydmljZV8wIiB2YWx1ZT0iMTI4IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvMi8yNi9QYXJpc19tXzJfam1zLnN2Zy8xNnB4LVBhcmlzX21fMl9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMicgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwNiRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzYiIHZhbHVlPSIzODQ3IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9ydGUgZGUgU2FpbnQtT3VlbiB+IDkwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA2JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzZfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjE0MSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2MvYzIvUGFyaXNfbV8xM19qbXMuc3ZnLzE2cHgtUGFyaXNfbV8xM19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMTMnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDckSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV83IiB2YWx1ZT0iMzgxOCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhbWFyY2sgLSBDYXVsYWluY291cnQgfiA5MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwNyRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl83X0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxNDAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi9mL2ZjL1BhcmlzX21fMTJfam1zLnN2Zy8xNnB4LVBhcmlzX21fMTJfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDEyJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA4JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfOCIgdmFsdWU9IjEzMjUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb250LUNhcmRpbmV0IH4gOTAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDgkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfOF9IRklkU2VydmljZV8wIiB2YWx1ZT0iNyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzEvMWMvTG9nb190cmFpbl90cmFuc2lsaWVuLnN2Zy8xNnB4LUxvZ29fdHJhaW5fdHJhbnNpbGllbi5zdmcucG5nJyBhbHQ9J1RyYW5zaWxpZW4nIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwOCRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAxJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl84X0hGSWRTZXJ2aWNlXzEiIHZhbHVlPSI3MiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzMvMzAvTG9nb19QYXJpc19UcmFuc2lsaWVuX2xpZ25lTC5zdmcvMTZweC1Mb2dvX1BhcmlzX1RyYW5zaWxpZW5fbGlnbmVMLnN2Zy5wbmcnIGFsdD0nTGlnbmUgTCBkdSBUcmFuc2lsaWVuJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA5JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfOSIgdmFsdWU9IjM1NDciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3J0ZSBkZSBDbGljaHkgfiAxMDAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDkkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfOV9IRklkU2VydmljZV8wIiB2YWx1ZT0iNSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzEvMTMvUkVSLnN2Zy81MTJweC1SRVIuc3ZnLnBuZycgYWx0PSdSw6lzZWF1IGV4cHJlc3MgcsOpZ2lvbmFsIGQnw45sZS1kZS1GcmFuY2UnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwOSRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAxJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl85X0hGSWRTZXJ2aWNlXzEiIHZhbHVlPSI2IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvOC84Yy9QYXJpc19SRVJfQ19pY29uLnN2Zy8xNnB4LVBhcmlzX1JFUl9DX2ljb24uc3ZnLnBuZycgYWx0PSdMaWduZSBDIGR1IFJFUiBkJ8OObGUtZGUtRnJhbmNlJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDEwJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMTAiIHZhbHVlPSIzODE5IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWJiZXNzZXNCdXR0ZSBNb250bWFydHJlIH4gMTAwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDEwJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzEwX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxNDAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi9mL2ZjL1BhcmlzX21fMTJfam1zLnN2Zy8xNnB4LVBhcmlzX21fMTJfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDEyJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDExJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMTEiIHZhbHVlPSIzODUwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGnDqGdlIH4gMTEwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDExJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzExX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxNDEiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi9jL2MyL1BhcmlzX21fMTNfam1zLnN2Zy8xNnB4LVBhcmlzX21fMTNfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDEzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDEyJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMTIiIHZhbHVlPSIzNTk2IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGlnYWxsZSB+IDExMDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxMiRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8xMl9IRklkU2VydmljZV8wIiB2YWx1ZT0iMTI4IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvMi8yNi9QYXJpc19tXzJfam1zLnN2Zy8xNnB4LVBhcmlzX21fMl9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMicgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDEyJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDEkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzEyX0hGSWRTZXJ2aWNlXzEiIHZhbHVlPSIxNDAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi9mL2ZjL1BhcmlzX21fMTJfam1zLnN2Zy8xNnB4LVBhcmlzX21fMTJfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDEyJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDEzJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMTMiIHZhbHVlPSIzODM5IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9ydGUgZGUgQ2xpY2h5IH4gMTEwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDEzJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzEzX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxNDEiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi9jL2MyL1BhcmlzX21fMTNfam1zLnN2Zy8xNnB4LVBhcmlzX21fMTNfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDEzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDE0JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMTQiIHZhbHVlPSIzNjE3IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXVyb3BlIH4gMTIwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDE0JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzE0X0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMjkiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi83LzdlL1BhcmlzX21fM19qbXMuc3ZnLzE2cHgtUGFyaXNfbV8zX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSAzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDE1JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMTUiIHZhbHVlPSIzNTkyIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlsbGllcnMgfiAxMjAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTUkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMTVfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjEyOCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzIvMjYvUGFyaXNfbV8yX2ptcy5zdmcvMTZweC1QYXJpc19tXzJfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDInIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxNSRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAxJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8xNV9IRklkU2VydmljZV8xIiB2YWx1ZT0iMTI5IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvNy83ZS9QYXJpc19tXzNfam1zLnN2Zy8xNnB4LVBhcmlzX21fM19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxNiRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzE2IiB2YWx1ZT0iMzgxNyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEp1bGVzIEpvZmZyaW4gfiAxNDAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTYkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMTZfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjE0MCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2YvZmMvUGFyaXNfbV8xMl9qbXMuc3ZnLzE2cHgtUGFyaXNfbV8xMl9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMTInIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTckSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV8xNyIgdmFsdWU9IjM2MTYiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYWxlc2hlcmJlcyB+IDE0MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxNyRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8xN19IRklkU2VydmljZV8wIiB2YWx1ZT0iMTI5IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvNy83ZS9QYXJpc19tXzNfam1zLnN2Zy8xNnB4LVBhcmlzX21fM19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxOCRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzE4IiB2YWx1ZT0iMzgyMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhaW50LUdlb3JnZXMgfiAxNDAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTgkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMThfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjE0MCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2YvZmMvUGFyaXNfbV8xMl9qbXMuc3ZnLzE2cHgtUGFyaXNfbV8xMl9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMTInIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTkkSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV8xOSIgdmFsdWU9IjEzMjYiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJpcy1TYWludC1MYXphcmUgfiAxNDAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTkkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMTlfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi8xLzFjL0xvZ29fdHJhaW5fdHJhbnNpbGllbi5zdmcvMTZweC1Mb2dvX3RyYWluX3RyYW5zaWxpZW4uc3ZnLnBuZycgYWx0PSdUcmFuc2lsaWVuJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTkkU2VydmljZXNSZXBlYXRlciRjdGwwMSRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMTlfSEZJZFNlcnZpY2VfMSIgdmFsdWU9IjY3IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvYy9jMS9Mb2dvX1BhcmlzX1RyYW5zaWxpZW5fbGlnbmVKLnN2Zy8xNnB4LUxvZ29fUGFyaXNfVHJhbnNpbGllbl9saWduZUouc3ZnLnBuZycgYWx0PSdMaWduZSBKIGR1IFRyYW5zaWxpZW4nIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxOSRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAyJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8xOV9IRklkU2VydmljZV8yIiB2YWx1ZT0iNzIiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi8zLzMwL0xvZ29fUGFyaXNfVHJhbnNpbGllbl9saWduZUwuc3ZnLzE2cHgtTG9nb19QYXJpc19UcmFuc2lsaWVuX2xpZ25lTC5zdmcucG5nJyBhbHQ9J0xpZ25lIEwgZHUgVHJhbnNpbGllbicgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDE5JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDMkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzE5X0hGSWRTZXJ2aWNlXzMiIHZhbHVlPSIxNSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9mci90aHVtYi8yLzI5L1NOQ0ZfSW50ZXJjaXQlQzMlQTlzLnN2Zy9sYW5nZnItMjIwcHgtU05DRl9JbnRlcmNpdCVDMyVBOXMuc3ZnLnBuZycgYWx0PSdJbnRlcmNpdMOpcycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDE5JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDQkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzE5X0hGSWRTZXJ2aWNlXzQiIHZhbHVlPSI0NCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzEvMTEvR2FyZV9DaGVyYm91cmc0LmpwZy8yODBweC1HYXJlX0NoZXJib3VyZzQuanBnJyBhbHQ9J0ludGVyY2l0w6lzIE5vcm1hbmRpZScgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDE5JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDUkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzE5X0hGSWRTZXJ2aWNlXzUiIHZhbHVlPSIyIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvOS85OC9Mb2dvX1RFUi5zdmcvMjUwcHgtTG9nb19URVIuc3ZnLnBuZycgYWx0PSdUcmFuc3BvcnQgZXhwcmVzcyByw6lnaW9uYWwnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxOSRTZXJ2aWNlc1JlcGVhdGVyJGN0bDA2JEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8xOV9IRklkU2VydmljZV82IiB2YWx1ZT0iNDUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvZnIvNS81NC9Mb2dvX1RFUl9IYXV0ZS1Ob3JtYW5kaWVfYXByJUMzJUE4c18yMDE0LmpwZycgYWx0PSdURVIgSGF1dGUtTm9ybWFuZGllJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDIwJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMjAiIHZhbHVlPSIzNTk3IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW52ZXJzU2FjcsOpLUPFk3VyIH4gMTUwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDIwJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzIwX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMjgiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi8yLzI2L1BhcmlzX21fMl9qbXMuc3ZnLzE2cHgtUGFyaXNfbV8yX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSAyJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpY2hlQWZmYWlyZURpYWdub3N0aWMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Img0X3N0eWxlIj5Db25zb21tYXRpb24gZCfDqW5lcmdpZSA8YnIgLz4oZW4gS3doL20yL2FuKTwvZGl2PjxwPkxvZ2VtZW50IMOpY29ub21lPC9wPjxzcGFuPkxvZ2VtZW50PC9zcGFuPiA8ZGl2IGNsYXNzPSJkaWFnSW1hZ2VJbmFjdGlmIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2RpYWdJbWFnZUluYWN0aWYucG5nIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaWFnQWN0aWZfTkMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm9uIGNvbW11bmlxdcOpPC9wPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhc3Rlcmlza0FmZmFpcmUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPioqIGRpc3RhbmNlIGVzdGltw6llIMOgIHZvbCBkJ29pc2VhdTwvcD48L2Rpdj48L2Rpdj48IS0tZW5kIGluZm9Db21wQWZmYWlyZS0tPjxkaXYgY2xhc3M9ImNhbGwyRXN0aW1GaWNoZVByb2R1aXQgYmdCbG9jazIiPjwhLS1TdGFydCBjYWxsMkVzdGltRmljaGVQcm9kdWl0LS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfYUVzdGltIiB0aXRsZT0iRmFpdGVzIGVzdGltZXIgdm90cmUgYmllbiBncmF0dWl0ZW1lbnQiIHRhcmdldD0iX3BhcmVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvcGljdG9Fc3RpbUNhbGwyQWN0aW9uQXNpZGUuc3ZnIiBhbHQ9IkZhaXRlcyBlc3RpbWVyIHZvdHJlIGJpZW4gZ3JhdHVpdGVtZW50IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoMl9zdHlsZSI+RmFpdGVzIGVzdGltZXIgPGJyIC8+dm90cmUgYmllbiA8c3Ryb25nPjxiciAvPmdyYXR1aXRlbWVudDwvc3Ryb25nPiA8L2Rpdj48L2E+PC9kaXY+PCEtLUVuZCBjYWxsMkVzdGltRmljaGVQcm9kdWl0LS0+PC9kaXY+PCEtLWVuZCBmaWNoZUFmZmFpcmVSaWdodFNpZGUtLT48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRGl2TWFwUHJvZHVpdCIgY2xhc3M9Im1hcEZpY2hlQWZmYWlyZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDNfc3R5bGUiIGlkPSJsb2NhbGlzYXRpb25fYW5jaG9yIj5Mb2NhbGlzYXRpb24gZHUgYmllbjwvZGl2PjxkaXYgY2xhc3M9Im1hcC1wcm9kdWl0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KDQo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Jy4uLy4uLy4uL1N0eWxlcy9vbC5jc3MnIHR5cGU9InRleHQvY3NzIiAvPg0KDQoNCjxzdHlsZT4NCiAgICAubWFwIHsNCiAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgICAgICB3aWR0aDogMTAwJTsNCiAgICB9DQoNCiAgICAudG9vbHRpcCB7DQogICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgcGFkZGluZzogM3B4Ow0KICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNyk7DQogICAgICAgIGNvbG9yOiB3aGl0ZTsNCiAgICAgICAgb3BhY2l0eTogMC44NTsNCiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCiAgICAgICAgZm9udDogMTBwdCBzYW5zLXNlcmlmOw0KICAgIH0NCg0KICAgIC5hcnJvd19ib3ggew0KICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgICAgIGJhY2tncm91bmQ6ICNmZmY7DQogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDNjODg7DQogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICAgICAgcGFkZGluZzogMTBweDsNCiAgICB9DQoNCiAgICAuYXJyb3dfYm94OmFmdGVyLCAuYXJyb3dfYm94OmJlZm9yZSB7DQogICAgICAgIHRvcDogMTAwJTsNCiAgICAgICAgbGVmdDogNTAlOw0KICAgICAgICBib3JkZXI6IHNvbGlkIHRyYW5zcGFyZW50Ow0KICAgICAgICBjb250ZW50OiAiICI7DQogICAgICAgIGhlaWdodDogMDsNCiAgICAgICAgd2lkdGg6IDA7DQogICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQogICAgfQ0KDQogICAgLmFycm93X2JveDphZnRlciB7DQogICAgICAgIGJvcmRlci1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwKTsNCiAgICAgICAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZjsNCiAgICAgICAgYm9yZGVyLXdpZHRoOiAxMHB4Ow0KICAgICAgICBtYXJnaW4tbGVmdDogLTEwcHg7DQogICAgfQ0KDQogICAgLmFycm93X2JveDpiZWZvcmUgew0KICAgICAgICBib3JkZXItY29sb3I6IHJnYmEoMTUzLCAxNTMsIDE1MywgMCk7DQogICAgICAgIGJvcmRlci10b3AtY29sb3I6ICMwMDNjODg7DQogICAgICAgIGJvcmRlci13aWR0aDogMTFweDsNCiAgICAgICAgbWFyZ2luLWxlZnQ6IC0xMXB4Ow0KICAgIH0NCjwvc3R5bGU+DQoNCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRPTE1hcFByb2R1aXQkSEZfTG9uZ2l0dWRlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdF9IRl9Mb25naXR1ZGUiIHZhbHVlPSIyLjMzMjAzOCIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRPTE1hcFByb2R1aXQkSEZfTGF0aXR1ZGUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X0hGX0xhdGl0dWRlIiB2YWx1ZT0iNDguODkwMTMwNSIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRPTE1hcFByb2R1aXQkSEZfWm9vbSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfSEZfWm9vbSIgdmFsdWU9IjE1IiAvPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JE9MTWFwUHJvZHVpdCRIRl9TaG93Wm9vbUNvbnRyb2wiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X0hGX1Nob3dab29tQ29udHJvbCIgdmFsdWU9InRydWUiIC8+DQoNCjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfUGFuZWxNYXAiIGNsYXNzPSJtYXAiPg0KCQ0KICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfUGFuZWxUb29sdGlwIiBjbGFzcz0idG9vbHRpcCI+DQoNCgk8L2Rpdj4NCiAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X1BvcHVwQ29udGFpbmVyIiBjbGFzcz0iYXJyb3dfYm94Ij4NCgkJDQogICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfUG9wdXBDb250ZW50Ij4NCgkJCQ0KDQogICAgICAgIA0KCQk8L2Rpdj4NCiAgICANCgk8L2Rpdj4NCg0KDQo8L2Rpdj4NCg0KDQoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpZkxvY2FsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9EaXZEZXNjcmlwdFZpbGxlIiBjbGFzcz0iZGVzY3JpcHRWaWxsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkRlc2NyaXB0aWYgZGUgbGEgdmlsbGU8c3Bhbj48L3NwYW4+PC9kaXY+PHAgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QRGVzY3JpcHRWaWxsZSI+TGUgMTgmIzIzMjttZSBhcnJvbmRpc3NlbWVudCBkZSBQYXJpcyBjb21wdGUgMjAxIDM3MCBoYWJpdGFudHMuIExhIHZpbGxlIGNvbXB0ZSAyMDEgMzcwIGhhYml0YW50cyBldCA0MyA0MzAgZmFtaWxsZXMgZG9udCA1NCAlIG9udCBkZXMgZW5mYW50cy4gMzMgJSBkZXMgaGFiaXRhbnRzIHNvbnQgcHJvcHJpJiMyMzM7dGFpcmVzLiA5OSAlIGRlcyBsb2dlbWVudHMgc29udCBkZXMgYXBwYXJ0ZW1lbnRzIGV0IDQgJSBzb250IGRlcyByJiMyMzM7c2lkZW5jZXMgc2Vjb25kYWlyZXMuIExhIGNvbW11bmUgZXN0IGJpZW4gZGVzc2VydmllIGVuIHRyYW5zcG9ydHMgZW4gY29tbXVuIGF2ZWMgNzIgJSBkZSBtJiMyMzM7bmFnZXMgbmUgcG9zcyYjMjMzO2RhbnQgcGFzIGRlIHZvaXR1cmUuIExlcyBoYWJpdGFudHMgdXRpbGlzZW50IGVuIG1ham9yaXQmIzIzMzsgbGVzIHRyYW5zcG9ydHMgZW4gY29tbXVuIHBvdXIgYWxsZXIgdHJhdmFpbGxlciAmIzIyNDsgODMgJS4gSWwgeSBhIDQgMjYwIGNvbW1lcmNlcyBkZSBwcm94aW1pdCYjMjMzOy4gLjwvcD48L2Rpdj48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRGl2RGVzY3JpcHRRdWFydGllciIgY2xhc3M9ImRlc2NyaXB0UXVhcnRpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Img0X3N0eWxlIj5EZXNjcmlwdGlmIGR1IHF1YXJ0aWVyPHNwYW4+PC9zcGFuPjwvZGl2PjxwIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUERlc2NyaXB0UXVhcnRpZXIiPkdyYW5kZXMgQ2FycmkmIzIzMjtyZXMgLSBDbGljaHkgZXN0IHVuIHF1YXJ0aWVyIGR1IDE4JiMyMzI7bWUgYXJyb25kaXNzZW1lbnQgZGUgUGFyaXMuIExlIHF1YXJ0aWVyIGNvbXB0ZSAyOSA4NzAgaGFiaXRhbnRzIGV0IDYgNjYwIGZhbWlsbGVzIGRvbnQgNTEgJSBvbnQgZGVzIGVuZmFudHMuIDMzICUgZGVzIGhhYml0YW50cyBzb250IHByb3ByaSYjMjMzO3RhaXJlcy4gMTAwICUgZGVzIGxvZ2VtZW50cyBzb250IGRlcyBhcHBhcnRlbWVudHMgZXQgNSAlIHNvbnQgZGVzIHImIzIzMztzaWRlbmNlcyBzZWNvbmRhaXJlcy4gTGUgcXVhcnRpZXIgZXN0IGJpZW4gZGVzc2VydmkgZW4gdHJhbnNwb3J0cyBlbiBjb21tdW4gYXZlYyA2OCAlIGRlIG0mIzIzMztuYWdlcyBuZSBwb3NzJiMyMzM7ZGFudCBwYXMgZGUgdm9pdHVyZS4gTGVzIGhhYml0YW50cyB1dGlsaXNlbnQgZW4gbWFqb3JpdCYjMjMzOyBsZXMgdHJhbnNwb3J0cyBlbiBjb21tdW4gcG91ciBhbGxlciB0cmF2YWlsbGVyICYjMjI0OyA4MCAlLiBJbCB5IGEgNjMwIGNvbW1lcmNlcyBkZSBwcm94aW1pdCYjMjMzOy4gLjwvcD48L2Rpdj48L2Rpdj48L2Rpdj48IS0tZW5kIG1hcEZpY2hlQWZmYWlyZS0tPjwvZGl2PjwhLS1lbmQgZmljaGVBZmZhaXJlICsgQmdCbG9jay0tPjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QUmVjb1Byb2R1aXRzIiBjbGFzcz0iZGVybmllckJpZW5zVmVuZHVzMiI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoMl9zdHlsZSIgaWQ9InN1Z2dlc3Rpb25fYW5jaG9yIj5BdXRyZXMgcHJvZHVpdHMgcmVjb21tYW5kw6lzPC9kaXY+PGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1VQUHJvZHVpdHMiPg0KCQkgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbl8wIiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZzMiPg0KCQkJDQogICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfVVBQcm9kdWl0XzAiPg0KCQkJCSAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nL2FjaGV0ZXIvY2hhdG91L2FwcGFydGVtZW50LzEwMDAxMzM5OTQtcmVjbyc+ICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9J2h0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxMzM5OTQvYTIwOWFjNzAtNTYwNS00ODVlLWJmMmQtMWIwODFjYjU5Y2VhXzM2NC5qcGcnIHRpdGxlPSJBcHBhcnRlbWVudCDDoCB2ZW5kcmUgw6AgQ2hhdG91IiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0nSW1hZ2VzL3Bob3RvTWFucXVlLmpwZyc7IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5MaXN0aW5nSW5mb18wIiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZ0luZm8iPg0KCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRpdHJlTGlzdF8wIiBjbGFzcz0idmlnbmV0dGVCaWVuVGl0cmUiPg0KCQkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCAxMDBtMjxici8+Q2hhdG91ICg3OCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUZXh0ZUxpc3RfMCIgY2xhc3M9InZpZ25ldHRlQmllblRleHRlIj4NCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMgY2hhbWJyZShzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIDI1MTE3NjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFNvdXNUaXRyZUxpc3RfMCIgY2xhc3M9InZpZ25ldHRlQmllblByaXhGQUkiPg0KCQkJCQkJNjIwwqAwMDAg4oKsIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCTwvZGl2PiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCgkJCTwvZGl2Pg0KICAgICAgICAgICAgDQogICAgICAgIA0KCQk8L2Rpdj48IS0tIEB3aGl0ZXNwYWNlDQogICAgDQogICAgICAgIC0tPjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuXzEiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nMyI+DQoJCQkNCiAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19VUFByb2R1aXRfMSI+DQoJCQkJICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScvYWNoZXRlci9wb3J0LW1hcmx5L2FwcGFydGVtZW50LzEwMDAxMzg2MzMtcmVjbyc+ICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9J2h0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxMzg2MzMvY2U4MDExMjQtOWQ5NS00OGVmLTk1MmItNWFiOGM5NmFmYThkXzM2NC5qcGcnIHRpdGxlPSJBcHBhcnRlbWVudCDDoCB2ZW5kcmUgw6AgUG9ydCBNYXJseSIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9J0ltYWdlcy9waG90b01hbnF1ZS5qcGcnOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuTGlzdGluZ0luZm9fMSIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmdJbmZvIj4NCgkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUaXRyZUxpc3RfMSIgY2xhc3M9InZpZ25ldHRlQmllblRpdHJlIj4NCgkJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgOTFtMjxici8+UG9ydCBNYXJseSAoNzgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGV4dGVMaXN0XzEiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UZXh0ZSI+DQoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzIGNoYW1icmUocykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSAxNTY8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2PiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BTb3VzVGl0cmVMaXN0XzEiIGNsYXNzPSJ2aWduZXR0ZUJpZW5Qcml4RkFJIj4NCgkJCQkJCTU3OMKgMDAwIOKCrCANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCgkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQoJCQk8L2Rpdj4NCiAgICAgICAgICAgIA0KICAgICAgICANCgkJPC9kaXY+PCEtLSBAd2hpdGVzcGFjZQ0KICAgIA0KICAgICAgICAtLT48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbl8yIiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZzMiPg0KCQkJDQogICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfVVBQcm9kdWl0XzIiPg0KCQkJCSAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nL2FjaGV0ZXIvcnVlaWwtbWFsbWFpc29uL2FwcGFydGVtZW50LzEwMDAxMjY3MjMtcmVjbyc+ICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFBpY3RvVnBfMiIgY2xhc3M9InBpY3RvLWFmZmFpcmUtZXhjbHUiPg0KDQoJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSdodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTI2NzIzLzdlZDU2Njc5LTMyNjAtNDRiMy04OGRjLTNjZjRmOGI1MzBiMV8zNjQuanBnJyB0aXRsZT0iQXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIMOgIFJ1ZWlsLU1hbG1haXNvbiIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9J0ltYWdlcy9waG90b01hbnF1ZS5qcGcnOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuTGlzdGluZ0luZm9fMiIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmdJbmZvIj4NCgkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUaXRyZUxpc3RfMiIgY2xhc3M9InZpZ25ldHRlQmllblRpdHJlIj4NCgkJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgODltMjxici8+UnVlaWwtTWFsbWFpc29uICg5MikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUZXh0ZUxpc3RfMiIgY2xhc3M9InZpZ25ldHRlQmllblRleHRlIj4NCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMgY2hhbWJyZShzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIDI1MTExNTxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFNvdXNUaXRyZUxpc3RfMiIgY2xhc3M9InZpZ25ldHRlQmllblByaXhGQUkiPg0KCQkJCQkJNTUwwqAwMDAg4oKsIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCTwvZGl2PiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCgkJCTwvZGl2Pg0KICAgICAgICAgICAgDQogICAgICAgIA0KCQk8L2Rpdj48IS0tIEB3aGl0ZXNwYWNlDQogICAgDQogICAgICAgIC0tPjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuXzMiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nMyI+DQoJCQkNCiAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19VUFByb2R1aXRfMyI+DQoJCQkJICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScvYWNoZXRlci9tYXJseS1sZS1yb2kvYXBwYXJ0ZW1lbnQvMTAwMDEzNDk1NC1yZWNvJz4gICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0naHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDEzNDk1NC9mMmRkMDg3NC0xNzE2LTRkMDgtOWNlZi04MDUyYWQzMDAzMTRfMzY0LmpwZycgdGl0bGU9IkFwcGFydGVtZW50IMOgIHZlbmRyZSDDoCBNYXJseSBsZSBSb2kiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSdJbWFnZXMvcGhvdG9NYW5xdWUuanBnJzsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbkxpc3RpbmdJbmZvXzMiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nSW5mbyI+DQoJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGl0cmVMaXN0XzMiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UaXRyZSI+DQoJCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IDEyN20yPGJyLz5NYXJseSBsZSBSb2kgKDc4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRleHRlTGlzdF8zIiBjbGFzcz0idmlnbmV0dGVCaWVuVGV4dGUiPg0KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNCBjaGFtYnJlKHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUsOpZsOpcmVuY2UgMTY3PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QU291c1RpdHJlTGlzdF8zIiBjbGFzcz0idmlnbmV0dGVCaWVuUHJpeEZBSSI+DQoJCQkJCQk3NDnCoDAwMCDigqwgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJPC9kaXY+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgDQoJCTwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCiAgICANCiAgICAgICAgLS0+PGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5fNCIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmczIj4NCgkJCQ0KICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1VQUHJvZHVpdF80Ij4NCgkJCQkgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Jy9hY2hldGVyL2xlcy1saWxhcy05MzI2MC9hcHBhcnRlbWVudC8xMDAwMTQxMjAyLXJlY28nPiAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BQaWN0b1ZwXzQiIGNsYXNzPSJwaWN0by1hZmZhaXJlLWV4Y2x1Ij4NCg0KCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0naHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDE0MTIwMi85OWVlNTZhMy03ODhlLTQ1MDYtYmJhYy0wNDUxMzIwMzlhZWZfMzY0LmpwZycgdGl0bGU9IkFwcGFydGVtZW50IMOgIHZlbmRyZSDDoCBMaWxhcyIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9J0ltYWdlcy9waG90b01hbnF1ZS5qcGcnOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuTGlzdGluZ0luZm9fNCIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmdJbmZvIj4NCgkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUaXRyZUxpc3RfNCIgY2xhc3M9InZpZ25ldHRlQmllblRpdHJlIj4NCgkJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgODBtMjxici8+TGlsYXMgKDkzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRleHRlTGlzdF80IiBjbGFzcz0idmlnbmV0dGVCaWVuVGV4dGUiPg0KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMiBjaGFtYnJlKHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUsOpZsOpcmVuY2UgMjUxMjEyPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QU291c1RpdHJlTGlzdF80IiBjbGFzcz0idmlnbmV0dGVCaWVuUHJpeEZBSSI+DQoJCQkJCQk2NzDCoDAwMCDigqwgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJPC9kaXY+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgDQoJCTwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCiAgICANCiAgICAgICAgLS0+PGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5fNSIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmczIj4NCgkJCQ0KICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1VQUHJvZHVpdF81Ij4NCgkJCQkgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Jy9hY2hldGVyL2NoYXRvdS9hcHBhcnRlbWVudC8xMDAwMTQzMzY3LXJlY28nPiAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSdodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQzMzY3L2ZmYjk2YjZlLTQzZWMtNDdmYy05MDRhLWFmYzJlNGFlODZiY18zNjQuanBnJyB0aXRsZT0iQXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIMOgIENoYXRvdSIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9J0ltYWdlcy9waG90b01hbnF1ZS5qcGcnOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuTGlzdGluZ0luZm9fNSIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmdJbmZvIj4NCgkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUaXRyZUxpc3RfNSIgY2xhc3M9InZpZ25ldHRlQmllblRpdHJlIj4NCgkJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgOThtMjxici8+Q2hhdG91ICg3OCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUZXh0ZUxpc3RfNSIgY2xhc3M9InZpZ25ldHRlQmllblRleHRlIj4NCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMgY2hhbWJyZShzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIDI1MTIxMDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFNvdXNUaXRyZUxpc3RfNSIgY2xhc3M9InZpZ25ldHRlQmllblByaXhGQUkiPg0KCQkJCQkJNTU5wqAwMDAg4oKsIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCTwvZGl2PiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCgkJCTwvZGl2Pg0KICAgICAgICAgICAgDQogICAgICAgIA0KCQk8L2Rpdj48IS0tIEB3aGl0ZXNwYWNlDQogICAgDQotLT48YnIgLz4NCjxzcGFuIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzRGF0YVBhZ2VyQm90dG9tIiBjbGFzcz0iZGF0YS1wYWdlciI+PHNwYW4+MTwvc3Bhbj4mbmJzcDs8L3NwYW4+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tZW5kIGZpY2hlQWZmYWlyZVdyYXBwZXItLT4NCiAgICAgICAgICAgIA0KICAgIA0KDQogICAgPCEtLSBJbml0aWFsaXplIFN3aXBlciAtLT4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgIFN5cy5XZWJGb3Jtcy5QYWdlUmVxdWVzdE1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5hZGRfcGFnZUxvYWRlZChJbml0aWFsaXplX1N3aXBlcik7DQoNCiAgICAgICAgZnVuY3Rpb24gSW5pdGlhbGl6ZV9Td2lwZXIoc2VuZGVyLCBhcmdzKSB7DQoNCiAgICAgICAgICAgIHZhciBzd2lwZXIzID0gbmV3IFN3aXBlcignLnN3aXBlci1jb250YWluZXIzJywgew0KICAgICAgICAgICAgICAgIG5leHRCdXR0b246ICcuc3dpcGVyLWJ1dHRvbi1uZXh0MycsDQogICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogJy5zd2lwZXItYnV0dG9uLXByZXYzJywNCiAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJywNCiAgICAgICAgICAgICAgICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlMycsDQogICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXIzJywNCiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLA0KICAgICAgICAgICAgICAgIHBhZ2luYXRpb25DbGlja2FibGU6IGZhbHNlLA0KICAgICAgICAgICAgICAgIGF1dG9wbGF5OiAyNTAwLA0KICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCwNCiAgICAgICAgICAgICAgICBhdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLA0KICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsDQogICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLA0KICAgICAgICAgICAgICAgIHNwZWVkOiA1MDANCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICB2YXIgc3dpcGVyX21lZGlhcyA9IG5ldyBTd2lwZXIoJy5zd2lwZXItY29udGFpbmVyLW1lZGlhcycsIHsNCiAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiAnLnN3aXBlci1idXR0b24tbmV4dC1tZWRpYXMnLA0KICAgICAgICAgICAgICAgIHByZXZCdXR0b246ICcuc3dpcGVyLWJ1dHRvbi1wcmV2LW1lZGlhcycsDQogICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsDQogICAgICAgICAgICAgICAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZS1tZWRpYXMnLA0KICAgICAgICAgICAgICAgIHdyYXBwZXJDbGFzczogJ3N3aXBlci13cmFwcGVyLW1lZGlhcycsDQogICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSwNCiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uQ2xpY2thYmxlOiBmYWxzZSwNCiAgICAgICAgICAgICAgICBhdXRvcGxheTogMjUwMCwNCiAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsDQogICAgICAgICAgICAgICAgYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSwNCiAgICAgICAgICAgICAgICBsb29wOiB0cnVlLA0KICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSwNCiAgICAgICAgICAgICAgICBzcGVlZDogNTAwDQogICAgICAgICAgICB9KTsNCiAgICAgICAgfTsNCiAgICA8L3NjcmlwdD4gICAgICANCiAgICANCiAgICANCg0KDQogICAgICAgICAgICAgICAgICAgIA0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy8vLy8vLy8vLy9GaW4gZHUgLm1haW4tLT4NCg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8IS0tLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9FTkQgQ29udGVudSBkeW5hbWlxdWUgZGUgbGEgcGFnZS0tPg0KDQoNCg0KICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vRGVidXQgZHUgLmZvb3Rlci0tPg0KICAgICAgICAgICAgPGZvb3RlciBjbGFzcz0iZm9vdGVyIGJnQmxvY2siPg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9IkRpdkZvb3RlckFnZW5jZXMiIGNsYXNzPSJjb250ZW5lciI+PGRpdiBjbGFzcz0iaDJfc3R5bGUiPk5vcyBhZ2VuY2VzIHByw6hzIGRlIGNoZXogdm91czwvZGl2Pg0KPGRpdiBjbGFzcz0nbGlzdGVWaWxsZSc+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+RXNzb25uZSAoOTEpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0Ugw4l2cnkgLSBDb3VyY291cm9ubmVzJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvw6l2cnktLS1jb3VyY291cm9ubmVzJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIMOJdnJ5IC0gQ291cmNvdXJvbm5lczwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+RXVyZSAoMjcpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgRXZyZXV4JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvZXZyZXV4Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEV2cmV1eDwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBFenkgc3VyIEV1cmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9lenktc3VyLWV1cmUnPkFnZW5jZSBpbW1vYmlsacOocmUgRXp5IHN1ciBFdXJlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEdhaWxsb24nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9nYWlsbG9uJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEdhaWxsb248L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUGFjeSBzdXIgRXVyZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3BhY3ktc3VyLWV1cmUnPkFnZW5jZSBpbW1vYmlsacOocmUgUGFjeSBzdXIgRXVyZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBWZXJub24nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy92ZXJub24nPkFnZW5jZSBpbW1vYmlsacOocmUgVmVybm9uPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5FdXJlLWV0LUxvaXIgKDI4KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIERyZXV4JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvZHJldXgnPkFnZW5jZSBpbW1vYmlsacOocmUgRHJldXg8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTWFpbnRlbm9uJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbWFpbnRlbm9uJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1haW50ZW5vbjwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+R2FyZCAoMzApPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTsOubWVzIENlbnRyZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL27Drm1lcy1jZW50cmUnPkFnZW5jZSBpbW1vYmlsacOocmUgTsOubWVzIENlbnRyZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBOw65tZXMgRXN0JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbsOubWVzLWVzdCc+QWdlbmNlIGltbW9iaWxpw6hyZSBOw65tZXMgRXN0PC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5IYXV0ZS1WaWVubmUgKDg3KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEFpeGUgc3VyIHZpZW5uZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2FpeGUtc3VyLXZpZW5uZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBBaXhlIHN1ciB2aWVubmU8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkhhdXRzLWRlLVNlaW5lICg5Mik8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBDaGF2aWxsZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2NoYXZpbGxlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIENoYXZpbGxlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIExhIEdhcmVubmUtQ29sb21iZXMnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9sYS1nYXJlbm5lLWNvbG9tYmVzJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIExhIEdhcmVubmUtQ29sb21iZXM8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPklsbGUtZXQtVmlsYWluZSAoMzUpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQmV0dG9uJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvYmV0dG9uJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEJldHRvbjwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+TGEgUsOpdW5pb24gKDk3NCk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBTYWludC1waWVycmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9zYWludC1waWVycmUnPkFnZW5jZSBpbW1vYmlsacOocmUgU2FpbnQtcGllcnJlPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5QYXJpcyAoNzUpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUGFyaXMgNcOobWUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9wYXJpcy0wNSc+QWdlbmNlIGltbW9iaWxpw6hyZSBQYXJpcyA1w6htZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBQYXJpcyAxN8OobWUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9wYXJpcy0xNyc+QWdlbmNlIGltbW9iaWxpw6hyZSBQYXJpcyAxN8OobWU8L2E+DQo8L2Rpdj4NCjxkaXYgY2xhc3M9J2xpc3RlVmlsbGUnPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFBhcmlzIDE5w6htZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3BhcmlzLTE5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFBhcmlzIDE5w6htZTwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+U2VpbmUtTWFyaXRpbWUgKDc2KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIETDqXZpbGxlIGxlcyByb3VlbicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2RldmlsbGUtbGVzLXJvdWVuJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIETDqXZpbGxlIGxlcyByb3VlbjwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNb250IHN0IGFpZ25hbicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21vbnQtc2FpbnQtYWlnbmFuJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1vbnQgc3QgYWlnbmFuPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFBhdmlsbHknIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9wYXZpbGx5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFBhdmlsbHk8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUm91ZW4gcml2ZSBkcm9pdGUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9yb3Vlbic+QWdlbmNlIGltbW9iaWxpw6hyZSBSb3VlbiByaXZlIGRyb2l0ZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBSb3VlbiByaXZlIGdhdWNoZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3JvdWVuLXJpdmUtZ2F1Y2hlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFJvdWVuIHJpdmUgZ2F1Y2hlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFN0IGV0aWVubmUgZHUgcm91dnJheScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3NhaW50LWV0aWVubmUtZHUtcm91dnJheSc+QWdlbmNlIGltbW9iaWxpw6hyZSBTdCBldGllbm5lIGR1IHJvdXZyYXk8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPlZhbCBkJ09pc2UgKDk1KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEJlYXVjaGFtcCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2JlYXVjaGFtcCc+QWdlbmNlIGltbW9iaWxpw6hyZSBCZWF1Y2hhbXA8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQmVzc2FuY291cnQnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9iZXNzYW5jb3VydCc+QWdlbmNlIGltbW9iaWxpw6hyZSBCZXNzYW5jb3VydDwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBDZXJneScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2Nlcmd5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIENlcmd5PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIENvcm1laWxsZXMgZW4gcGFyaXNpcycgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2Nvcm1laWxsZXMtZW4tcGFyaXNpcyc+QWdlbmNlIGltbW9iaWxpw6hyZSBDb3JtZWlsbGVzIGVuIHBhcmlzaXM8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgRnJhbmNvbnZpbGxlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvZnJhbmNvbnZpbGxlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEZyYW5jb252aWxsZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBIZXJibGF5JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvaGVyYmxheSc+QWdlbmNlIGltbW9iaWxpw6hyZSBIZXJibGF5PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFBsZXNzaXMgQm91Y2hhcmQnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9wbGVzc2lzLWJvdWNoYXJkJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFBsZXNzaXMgQm91Y2hhcmQ8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTWFnbnkgZW4gVmV4aW4nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tYWdueS1lbi12ZXhpbic+QWdlbmNlIGltbW9iaWxpw6hyZSBNYWdueSBlbiBWZXhpbjwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNb250aWdueSBsZXMgQ29ybWVpbGxlcycgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21vbnRpZ255LWxlcy1jb3JtZWlsbGVzJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1vbnRpZ255IGxlcyBDb3JtZWlsbGVzPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1vbnRtYWdueScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21vbnRtYWdueSc+QWdlbmNlIGltbW9iaWxpw6hyZSBNb250bWFnbnk8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgU2FpbnQgT3VlbiBsJ0F1bW9uZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3NhaW50LW91ZW4tbC1hdW1vbmUnPkFnZW5jZSBpbW1vYmlsacOocmUgU2FpbnQgT3VlbiBsJ0F1bW9uZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBTYW5ub2lzJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvc2Fubm9pcyc+QWdlbmNlIGltbW9iaWxpw6hyZSBTYW5ub2lzPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFZhdXLDqWFsJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvdmF1cmVhbCc+QWdlbmNlIGltbW9iaWxpw6hyZSBWYXVyw6lhbDwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+VmFsLWRlLU1hcm5lICg5NCk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBOb2dlbnQgc3VyIE1hcm5lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbm9nZW50LXN1ci1tYXJuZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBOb2dlbnQgc3VyIE1hcm5lPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5WYXIgKDgzKTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFB1Z2V0LXN1ci1BcmdlbnMnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9wdWdldC1zdXItYXJnZW5zJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFB1Z2V0LXN1ci1BcmdlbnM8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPll2ZWxpbmVzICg3OCk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBBbmRyw6lzeScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2FuZHJlc3knPkFnZW5jZSBpbW1vYmlsacOocmUgQW5kcsOpc3k8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQXViZXJnZW52aWxsZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2F1YmVyZ2VudmlsbGUnPkFnZW5jZSBpbW1vYmlsacOocmUgQXViZXJnZW52aWxsZTwvYT4NCjwvZGl2Pg0KPGRpdiBjbGFzcz0nbGlzdGVWaWxsZSc+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQm9ubmnDqHJlcyBzdXIgU2VpbmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9ib25uaWVyZXMtc3VyLXNlaW5lJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEJvbm5pw6hyZXMgc3VyIFNlaW5lPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIENoYW1ib3VyY3knIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9jaGFtYm91cmN5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIENoYW1ib3VyY3k8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQ2hhdG91JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvY2hhdG91Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIENoYXRvdTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBDb25mbGFucyBzdGUgSG9ub3JpbmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9jb25mbGFucyc+QWdlbmNlIGltbW9iaWxpw6hyZSBDb25mbGFucyBzdGUgSG9ub3JpbmU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgRWxhbmNvdXJ0JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvZWxhbmNvdXJ0Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEVsYW5jb3VydDwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBIb3VkYW4nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9ob3VkYW4nPkFnZW5jZSBpbW1vYmlsacOocmUgSG91ZGFuPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIElzc291JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvaXNzb3UnPkFnZW5jZSBpbW1vYmlsacOocmUgSXNzb3U8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTGUgQ2hlc25heScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2xlLWNoZXNuYXknPkFnZW5jZSBpbW1vYmlsacOocmUgTGUgQ2hlc25heTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBMZSBNZXNuaWwtU2FpbnQtRGVuaXMnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9sZS1tZXNuaWwtc3QtZGVuaXMnPkFnZW5jZSBpbW1vYmlsacOocmUgTGUgTWVzbmlsLVNhaW50LURlbmlzPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIExlcyBDbGF5ZXMgU291cyBCb2lzJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbGVzLWNsYXllcy1zb3VzLWJvaXMnPkFnZW5jZSBpbW1vYmlsacOocmUgTGVzIENsYXllcyBTb3VzIEJvaXM8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTGVzIEVzc2FydHMtbGUtUm9pJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbGVzLWVzc2FydHMtbGUtcm9pJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIExlcyBFc3NhcnRzLWxlLVJvaTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBMZXMgTXVyZWF1eCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2xlcy1tdXJlYXV4Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIExlcyBNdXJlYXV4PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1hZ25hbnZpbGxlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbWFnbmFudmlsbGUnPkFnZW5jZSBpbW1vYmlsacOocmUgTWFnbmFudmlsbGU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTWFudGVzIGxhIEpvbGllJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbWFudGVzJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1hbnRlcyBsYSBKb2xpZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNYW50ZXMgbGEgSm9saWUgTE9DQVRJT04nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tYW50ZXMtbG9jYXRpb24nPkFnZW5jZSBpbW1vYmlsacOocmUgTWFudGVzIGxhIEpvbGllIExPQ0FUSU9OPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1hcmx5IGxlIFJvaScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21hcmx5LWxlLXJvaSc+QWdlbmNlIGltbW9iaWxpw6hyZSBNYXJseSBsZSBSb2k8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTWF1bGUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tYXVsZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBNYXVsZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNYXVyZWNvdXJ0JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbWF1cmVjb3VydCc+QWdlbmNlIGltbW9iaWxpw6hyZSBNYXVyZWNvdXJ0PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1ldWxhbicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21ldWxhbic+QWdlbmNlIGltbW9iaWxpw6hyZSBNZXVsYW48L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUG9pc3N5JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcG9pc3N5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFBvaXNzeTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBSYW1ib3VpbGxldCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3JhbWJvdWlsbGV0Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFJhbWJvdWlsbGV0PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFNhaW50IEN5ciBsJ0Vjb2xlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvc2FpbnQtY3lyLWwtZWNvbGUnPkFnZW5jZSBpbW1vYmlsacOocmUgU2FpbnQgQ3lyIGwnRWNvbGU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgU3QgR2VybWFpbiBlbiBMYXllJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvc2FpbnQtZ2VybWFpbi1jaGF0ZWF1Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFN0IEdlcm1haW4gZW4gTGF5ZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBTdCBOb20gbGEgQnJldGVjaGUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9zYWludC1ub20tbGEtYnJldGVjaGUnPkFnZW5jZSBpbW1vYmlsacOocmUgU3QgTm9tIGxhIEJyZXRlY2hlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFRyaWVsIHN1ciBTZWluZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3RyaWVsLXN1ci1zZWluZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBUcmllbCBzdXIgU2VpbmU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgVsOpbGl6eS1WaWxsYWNvdWJsYXknIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy92ZWxpenktdmlsbGFjb3VibGF5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFbDqWxpenktVmlsbGFjb3VibGF5PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFZlcm5ldWlsIHN1ciBTZWluZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3Zlcm5ldWlsLXN1ci1zZWluZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBWZXJuZXVpbCBzdXIgU2VpbmU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgVm9pc2lucy1sZS1CcmV0b25uZXV4JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvdm9pc2lucy1sZS1icmV0b25uZXV4Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFZvaXNpbnMtbGUtQnJldG9ubmV1eDwvYT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsbDJGb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVNUQVJUIENBTEwyRk9PVEVSLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxsMlZpbGxlc0FnZW5jZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hZ2VuY2VzLWltbW9iaWxpZXJlcyIgdGl0bGU9IkRldmVuaXIgZnJhbmNoaXPDqSBMYSBSw6lzaWRlbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UmV0cm91dmVyIHRvdXRlcyBsZXMgaW1wbGFudGF0aW9ucyBkZSBub3MgYWdlbmNlcyBwcsOocyBkZSBjaGV6IHZvdXMgITwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSI+VHJvdXZlciB2b3RyZSBhZ2VuY2U8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsbDJGcmFuY2hpc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jcmVlci1hZmZpbGllci1hZ2VuY2UtaW1tb2JpbGllcmUiIHRpdGxlPSJEZXZlbmlyIGZyYW5jaGlzw6kgTGEgUsOpc2lkZW5jZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlRvdXQgc2F2b2lyIHN1ciBsYSBjcsOpYXRpb24gb3UgbCdhZmZpbGlhdGlvbiBkZSB2b3RyZSBhZ2VuY2UgYXUgcsOpc2VhdSBMYSBSw6lzaWRlbmNlLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSI+RGV2ZW5pciBmcmFuY2hpc8OpPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGwyRmFjZWJvb2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9sYXJlc2lkZW5jZWltbW9iaWxpZXIvIiB0aXRsZT0iUmVqb2lnbmV6LW5vdXMgc3VyIGZhY2Vib29rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U3VpdmV6IHRvdXRlIGwnYWN0dWFsaXTDqSBkZSBsJ2ltbW9iaWxpZXIgZXQgZHUgcsOpc2VhdSBMYSBSw6lzaWRlbmNlLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSI+UmVqb2lnbmV6LW5vdXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VyIGZhY2Vib29rPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tRU5EIENBTEwyRk9PVEVSLS0+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZm9vdGVyPg0KICAgICAgICAgICAgPCEtLUVORCBGT09URVItLT4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyTmF2Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW5lciI+DQogICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiB0aXRsZT0iYWNjdWVpbCBkdSBzaXRlIExhIFLDqXNpZGVuY2UiPkFjY3VlaWw8L2E+PC9saT4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wbGFuLWR1LXNpdGUiIHRpdGxlPSJOYXZpZ3VlciBzdXIgbGUgc2l0ZSBMYSBSw6lzaWRlbmNlIj5QbGFuIGR1IHNpdGU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY2d1IiB0aXRsZT0iQ29uZGl0aW9ucyBnw6luw6lyYWxlcyBkJ3V0aWxpc2F0aW9uIj5Db25kaXRpb25zIGfDqW7DqXJhbGVzIGQndXRpbGlzYXRpb248L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcG9saXRpcXVlLWNvbmZpZGVudGlhbGl0ZSIgdGl0bGU9IlBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpIj5Qb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wb2xpdGlxdWUtY29va2llcyIgdGl0bGU9IlBvbGl0aXF1ZSBkZXMgY29va2llcyI+UG9saXRpcXVlIGRlcyBjb29raWVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjb3B5cmlnaHQiPsKpIExhIFLDqXNpZGVuY2UgRMOpdmVsb3BwZW1lbnQgMjAxODwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2Rpdj48IS0tRklOIGR1IENPTlRFTkVSIEdMT0JBTCBERSBMQSBQQUdFIC53cmFwcGVyLS0+DQoNCiAgICAgICAgICAgIDwhLS0gSmF2YVNjcmlwdCBhdCB0aGUgYm90dG9tIGZvciBmYXN0IHBhZ2UgbG9hZGluZyAtLT4NCiAgICAgICAgICAgIDwhLS0vLy8vLy8vLy8vLy8vLy8vLy8vLy9TY3JvbGwgVE9QICsgY2hhcmdlbWVudCBkZXMgSlMtLT4NCiAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJnb190b3AiIHRpdGxlPSJSZW1vbnRlciI+UmVtb250ZXIgPC9hPg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW5fcG9wdXBfZGl2Ij4NCiAgICAgICAgICAgICAgICA8YSBpZD0iTWVzc2FnZUJveEN0bF9MQkR1bW15IiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJE1lc3NhZ2VCb3hDdGwkTEJEdW1teSYjMzk7LCYjMzk7JiMzOTspIiBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7Ij48L2E+DQo8ZGl2IGlkPSJNZXNzYWdlQm94Q3RsX1BNZXNzYWdlQm94IiBjbGFzcz0icG9wdXBJbmZvcm1hdGl2ZSI+DQoJDQogICAgPGRpdiBpZD0iTWVzc2FnZUJveEN0bF9QSW5mb3MiIGNsYXNzPSJwb3B1cEN0bnJJbmZvIj4NCgkJDQogICAgICAgIDxhIGlkPSJNZXNzYWdlQm94Q3RsX0xCQ2xvc2UiIGNsYXNzPSJjbG9zZUNyb3NzIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJE1lc3NhZ2VCb3hDdGwkTEJDbG9zZSYjMzk7LCYjMzk7JiMzOTspIj4gICAgICAgIA0KICAgICAgICAgICAgPGltZyBjbGFzcz0iY2xvc2VyIiBzcmM9Ii9pbWFnZXMvY2xvc2VfcGljLnN2ZyIgYWx0PSJGZXJtZXIgbGEgZmVuw6p0cmUiLz4NCiAgICAgICAgPC9hPg0KICAgICAgICA8ZGl2IGlkPSJNZXNzYWdlQm94Q3RsX1VQSW5mb3MiPg0KCQkJDQogICAgICAgICAgICAgICAgPGRpdiBpZD0iTWVzc2FnZUJveEN0bF9oNFRpdGxlIiBjbGFzcz0iaDRfc3R5bGUiPkluZm9ybWF0aXZlIHBvcHVwIGF2ZWMgZGVzIHNhdXQgZGUgbGlnbmU8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxwIGlkPSJNZXNzYWdlQm94Q3RsX3BNZXNzYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgT24gc2FpdCBkZXB1aXMgbG9uZ3RlbXBzIHF1ZSB0cmF2YWlsbGVyIGF2ZWMgZHUgdGV4dGUgbGlzaWJsZSBldCBjb250ZW5hbnQgZHUgc2VucyBlc3Qgc291cmNlIGRlIGRpc3RyYWN0aW9ucywgZXQgZW1ww6pjaGUgZGUgc2UgY29uY2VudHJlciBzdXIgbGEgbWlzZSBlbiBwYWdlIGVsbGUtbcOqbWUuIEwnYXZhbnRhZ2UgZHUgTG9yZW0gSXBzdW0gc3VyIHVuIHRleHRlIGfDqW7DqXJpcXVlIGNvbW1lICdEdSB0ZXh0ZS4gRHUgdGV4dGUuIER1IHRleHRlLicgZXN0IHF1J2lsIHBvc3PDqGRlIHVuZSBkaXN0cmlidXRpb24gZGUgbGV0dHJlcyBwbHVzIG91IG1vaW5zIG5vcm1hbGUsIGV0IGVuIHRvdXQgY2FzIGNvbXBhcmFibGUgYXZlYyBjZWxsZSBkdSBmcmFuw6dhaXMgc3RhbmRhcmQuDQogICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgDQoJCTwvZGl2Pg0KICAgIA0KCTwvZGl2Pg0KDQo8L2Rpdj4NCg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJGbG9hdGluZ1VwZGF0ZVByb2dyZXNzX1VwZGF0ZVByb2dyZXNzIiBzdHlsZT0iZGlzcGxheTpub25lOyI+DQoJDQogICAgICAgIDxjZW50ZXI+DQogICAgICAgICAgICA8ZGl2IGlkPSJGbG9hdGluZ1VwZGF0ZVByb2dyZXNzX1BhbmVsUHJvZ3Jlc3MiIGFsaWduPSJjZW50ZXIiIHN0eWxlPSJ6LWluZGV4Ojk5OTk5OTk5OyI+DQoJCQ0KICAgICAgICAgICAgICAgIDx0YWJsZSBzdHlsZT0id2lkdGg6IDMwMHB4OyI+DQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJGbG9hdGluZ1VwZGF0ZVByb2dyZXNzX0ltYWdlIiBzcmM9Ii4uLy4uLy4uL0ltYWdlcy9hamF4LWxvYWRlci5naWYiIGFsdD0iTG9hZGVyIGltYWdlIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJGbG9hdGluZ1VwZGF0ZVByb2dyZXNzX0xhYmVsUHJvZ3Jlc3MiPjxiPjxmb250IGNvbG9yPSJHcmF5IiBzaXplPSIzIj5NaXNlIMOgIGpvdXIgZGUgbCdhZmZpY2hhZ2UuLi48L2ZvbnQ+PC9iPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICA8L2NlbnRlcj4NCiAgICAgICAgDQogICAgDQo8L2Rpdj4NCg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDwhLS1NZW51IHJlc3BvbnNpdmUtLT4NCiAgICAgICAgICAgIDxzY3JpcHQgc3JjPSIvanMvc2l0ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICAgICAgICAgIDwhLS0gNCBzY3JpcHRzIHBvdXIgbGUgc2Nyb2xsIGF1dG8gZGFucyBsZXMgcGFnZXMgLS0+DQogICAgICAgICAgICA8c2NyaXB0IHNyYz0iL2pzL2xvY2Fsc2Nyb2xsL2pxdWVyeS5sb2NhbHNjcm9sbC5qcyI+PC9zY3JpcHQ+DQogICAgICAgICAgICA8c2NyaXB0IHNyYz0iL2pzL2xhbmNlbWVudC5qcyI+PC9zY3JpcHQ+DQogICAgICAgICAgICA8IS0tIHBlcm1ldCBsZSBsYW5jZW1lbnQgZGUgbGEgZm9uY3Rpb24gZGUgc2Nyb2xsIC0tPg0KICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9qcy9sb2NhbHNjcm9sbC9qcXVlcnkuc2Nyb2xsVG8uanMiPjwvc2NyaXB0Pg0KICAgICAgICANCg0KICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgICAgICQoJyNQU2VhcmNoU2hvcnRjdXQnKS5jbGljayhmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoJCgnI2RpdlNlYXJjaFNob3J0Y3V0JykuaGFzQ2xhc3MoJ2RpdlNlYXJjaFNob3J0Y3V0X2Nsb3NlZCcpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcjZGl2U2VhcmNoU2hvcnRjdXQnKS5zd2l0Y2hDbGFzcygnZGl2U2VhcmNoU2hvcnRjdXRfY2xvc2VkJywnZGl2U2VhcmNoU2hvcnRjdXRfb3BlbmVkJywgNTAwLCAiZWFzZU91dFNpbmUiKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaXZTZWFyY2hTaG9ydGN1dCcpLnN3aXRjaENsYXNzKCdkaXZTZWFyY2hTaG9ydGN1dF9vcGVuZWQnLCAnZGl2U2VhcmNoU2hvcnRjdXRfY2xvc2VkJywgNTAwLCAiZWFzZU91dFNpbmUiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgICAgICQoJyNidG5Mb2dDcHRlJykuY2xpY2soZnVuY3Rpb24gKGUpIHsgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIC8vJCgnI2RpdkxvZ0NwdGUnKS50b2dnbGVDbGFzcygnZGl2TG9nQ3B0ZV9vcGVuZWQnLCA1MDAsICJlYXNlT3V0U2luZSIpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoJCgnI2RpdkxvZ0NwdGUnKS5oYXNDbGFzcygnZGl2TG9nQ3B0ZV9jbG9zZWQnKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2RpdkxvZ0NwdGUnKS5zd2l0Y2hDbGFzcygnZGl2TG9nQ3B0ZV9jbG9zZWQnLCAnZGl2TG9nQ3B0ZV9vcGVuZWQnLCA1MDAsICJlYXNlT3V0U2luZSIpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2RpdkxvZ0NwdGUnKS5zd2l0Y2hDbGFzcygnZGl2TG9nQ3B0ZV9vcGVuZWQnLCAnZGl2TG9nQ3B0ZV9jbG9zZWQnLCA1MDAsICJlYXNlT3V0U2luZSIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgICAgICAgICAgJCgiLmlnbm9yZS1jbGljayIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAvLyBDb25kaXRpb24gZCdhZmZpY2hhZ2UgZHUgYm91dG9uDQogICAgICAgICAgICAgICAgICAgICQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuc2Nyb2xsVG9wKCkgPiAxMDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZ29fdG9wJykuZmFkZUluKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZ29fdG9wJykuZmFkZU91dCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgLy8gRXZlbmVtZW50IGF1IGNsaWMNCiAgICAgICAgICAgICAgICAgICAgJCgnLmdvX3RvcCcpLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAwIH0sIDgwMCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbl9wb3B1cF9kaXYiPg0KICAgICAgICAgICAgICAgIDxhIGlkPSJMQkR1bW15IiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCRHVtbXkmIzM5OywmIzM5OyYjMzk7KSI+PC9hPg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9IlBQb3B1cENvbmNvdXJzIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IkhMQ29uY291cnMiIGhyZWY9Imh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL2NvbmNvdXJzIiB0YXJnZXQ9Il9ibGFuayI+PGltZyBzcmM9Ii4uLy4uLy4uL0ltYWdlcy9FTkNBUlRfU0lURV9BQ0NVRUlMX1RST1VWRVpfQlVOTlkuanBnIiBhbHQ9IiIgLz48L2E+DQogICAgICAgICAgICAgICAgDQo8L2Rpdj4gICANCiAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPGEgaWQ9IkxCRHVtbXlMaXZyZUJsYW5jIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCRHVtbXlMaXZyZUJsYW5jJiMzOTssJiMzOTsmIzM5OykiPjwvYT4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJQUG9wdXBMaXZyZUJsYW5jIiBjbGFzcz0icG9wdXBMaXZyZUJsYW5jIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVuZXVyUG9wdXBMaXZyZUJsYW5jIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsb3NlQ3Jvc3NJbWdQb3B1cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IkxCQ2xvc2VMaXZyZUJsYW5jIiB0aXRsZT0iZmVybWVyIiBocmVmPSJqYXZhc2NyaXB0OldlYkZvcm1fRG9Qb3N0QmFja1dpdGhPcHRpb25zKG5ldyBXZWJGb3JtX1Bvc3RCYWNrT3B0aW9ucygmcXVvdDtjdGwwMCRMQkNsb3NlTGl2cmVCbGFuYyZxdW90OywgJnF1b3Q7JnF1b3Q7LCBmYWxzZSwgJnF1b3Q7JnF1b3Q7LCAmcXVvdDsuLi8uLi8uLi8jJnF1b3Q7LCBmYWxzZSwgdHJ1ZSkpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvQ3Jvc3NDbG9zZVBvcHVwTGl2cmVCbGFuYy5wbmciIGFsdD0iZmVybWVyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGl0cmVQb3B1cExpdnJlQmxhbmMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFLDqXVzc2lyIGxhIHZlbnRlIGRlIHZvdHJlIGJpZW4gaW1tb2JpbGllcg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGV0YWlsUG9wdXBMaXZyZUJsYW5jIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3VyIHRvdXQgc2F2b2lyIHN1ciBsZXMgYm9ubmVzIHF1ZXN0aW9ucyDDoCBzZSBwb3NlciANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3VyIHLDqXVzc2lyIGxhIHZlbnRlIGRlIHZvdHJlIGJpZW4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsbDJQb3B1cExpdnJlQmxhbmMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQkRvd25sb2FkTGl2cmVCbGFuYyIgaHJlZj0iamF2YXNjcmlwdDpXZWJGb3JtX0RvUG9zdEJhY2tXaXRoT3B0aW9ucyhuZXcgV2ViRm9ybV9Qb3N0QmFja09wdGlvbnMoJnF1b3Q7Y3RsMDAkTEJEb3dubG9hZExpdnJlQmxhbmMmcXVvdDssICZxdW90OyZxdW90OywgZmFsc2UsICZxdW90OyZxdW90OywgJnF1b3Q7Li4vLi4vLi4vbGl2cmUtYmxhbmMtdmVuZGV1ciZxdW90OywgZmFsc2UsIHRydWUpKSI+PiBUw6lsw6ljaGFyZ2VyIGxlIGd1aWRlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlZnVzVMOpbMOpY2hhcmdlTGl2cmVCbGFuYyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IkxCUmVmdXNMaXZyZUJsYW5jIiBocmVmPSJqYXZhc2NyaXB0OldlYkZvcm1fRG9Qb3N0QmFja1dpdGhPcHRpb25zKG5ldyBXZWJGb3JtX1Bvc3RCYWNrT3B0aW9ucygmcXVvdDtjdGwwMCRMQlJlZnVzTGl2cmVCbGFuYyZxdW90OywgJnF1b3Q7JnF1b3Q7LCBmYWxzZSwgJnF1b3Q7JnF1b3Q7LCAmcXVvdDsuLi8uLi8uLi8jJnF1b3Q7LCBmYWxzZSwgdHJ1ZSkpIj5VbmUgYXV0cmUgZm9pczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQo8L2Rpdj4gICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDxhIGlkPSJMQkR1bW15Q292aWQxOSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRMQkR1bW15Q292aWQxOSYjMzk7LCYjMzk7JiMzOTspIj48L2E+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0iUFBvcHVwQ292aWQxOSIgY2xhc3M9InBvcHVwQ292aWQxOSI+DQoJDQoJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbmV1clBvcHVwQ292aWQxOSI+DQoJCSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbG9zZUNyb3NzSW1nUG9wdXAiPg0KCQkJICAgICAgICAgICAgICAgIDxhIGlkPSJMQkNsb3NlQ292aWQxOSIgdGl0bGU9ImZlcm1lciIgaHJlZj0iamF2YXNjcmlwdDpXZWJGb3JtX0RvUG9zdEJhY2tXaXRoT3B0aW9ucyhuZXcgV2ViRm9ybV9Qb3N0QmFja09wdGlvbnMoJnF1b3Q7Y3RsMDAkTEJDbG9zZUNvdmlkMTkmcXVvdDssICZxdW90OyZxdW90OywgZmFsc2UsICZxdW90OyZxdW90OywgJnF1b3Q7Li4vLi4vLi4vIyZxdW90OywgZmFsc2UsIHRydWUpKSI+DQoJCQkJICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL0Nyb3NzQ2xvc2VQb3B1cExpdnJlQmxhbmMucG5nIiBhbHQ9ImZlcm1lciIvPg0KCQkJICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICANCgkJICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIA0KCSAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICANCjwvZGl2PiAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJQQWNjZXB0Q29va2llcyIgY2xhc3M9ImNvb2tpZXNCYXIiPg0KCQ0KICAgICAgICAgICAgICAgIDxwPg0KCQkJICAgIEVuIHBvdXJzdWl2YW50IGxhIG5hdmlnYXRpb24gc3VyIGNlIHNpdGUsIHZvdXMgYWNjZXB0ZXogbGUgZMOpcMO0dCBkZSBjb29raWVzIGV0IGF1dHJlcyB0YWdzIHBvdXIgdm91cyBwcm9wb3NlciBkZXMgY29udGVudXMgZXQgdW5lIGV4cMOpcmllbmNlIGRlIG5hdmlnYXRpb24gcGVyc29ubmFsaXPDqXMsIGRlcyBmb25jdGlvbnMgZGUgcGFydGFnZSB2ZXJzIGxlcyByw6lzZWF1eCBzb2NpYXV4IGV0IGFuYWx5c2VyIGwnYXVkaWVuY2UgZHUgc2l0ZSBpbnRlcm5ldC4gDQoJCQkgICAgPC9wPg0KCQkJCQ0KCQkJICAgIDxkaXYgY2xhc3M9ImJ0bkFjY2VwdENvb2tpZXMiPg0KICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTEJBY2NlcHRDb29raWVzIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCQWNjZXB0Q29va2llcyYjMzk7LCYjMzk7JiMzOTspIj5KJ2FjY2VwdGU8L2E+CQkJCQ0KCQkJICAgIDwvZGl2Pg0KICAgICAgICAgICAgDQo8L2Rpdj4gICAgICAgIA0KDQogICAgICAgIA0KDQo8U2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+IA0KdmFyIE1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfT0xNYXBfaW5pdGlhbGl6ZWQgPSBmYWxzZTtTeXMuV2ViRm9ybXMuUGFnZVJlcXVlc3RNYW5hZ2VyLmdldEluc3RhbmNlKCkuYWRkX3BhZ2VMb2FkZWQoSW5pdGlhbGl6ZV9NYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0KTsNCmZ1bmN0aW9uIEluaXRpYWxpemVfTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdCgpIHsNCmlmKE1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfT0xNYXBfaW5pdGlhbGl6ZWQgPT0gdHJ1ZSl7cmV0dXJuO30gZWxzZSB7TWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdF9PTE1hcF9pbml0aWFsaXplZD10cnVlO312YXIgTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdF9PTE1hcCA9IG51bGw7DQpNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X09MTWFwPSBuZXcgT3BlbkxheWVyTWFwKCdNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0Jyk7DQpNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X09MTWFwLkFkZExpbmVTdHJpbmdzKFt7IkNvbG9yIjoiMTA1LCAxMDUsIDEwNSIsIldpZHRoIjo0LCJDb29yZGluYXRlcyI6W3sibGF0aXR1ZGUiOjQ4Ljg4NzU4MywibG9uZ2l0dWRlIjoyLjMyNTU0NX0seyJsYXRpdHVkZSI6NDguODk1NTU0LCJsb25naXR1ZGUiOjIuMzI4MzE4fSx7ImxhdGl0dWRlIjo0OC44OTU2OTgsImxvbmdpdHVkZSI6Mi4zMjgzNjd9LHsibGF0aXR1ZGUiOjQ4LjkwMDc2MywibG9uZ2l0dWRlIjoyLjMzMDA1M30seyJsYXRpdHVkZSI6NDguOTAwNzg4LCJsb25naXR1ZGUiOjIuMzM1MjQzfSx7ImxhdGl0dWRlIjo0OC45MDEwMDgsImxvbmdpdHVkZSI6Mi4zNDQwMjJ9LHsibGF0aXR1ZGUiOjQ4LjkwMTIzNiwibG9uZ2l0dWRlIjoyLjM1Mjk0MX0seyJsYXRpdHVkZSI6NDguOTAyMTM1LCJsb25naXR1ZGUiOjIuMzUyODc5fSx7ImxhdGl0dWRlIjo0OC45MDIwODIsImxvbmdpdHVkZSI6Mi4zNTQyMTF9LHsibGF0aXR1ZGUiOjQ4LjkwMjIzMywibG9uZ2l0dWRlIjoyLjM2NTk5M30seyJsYXRpdHVkZSI6NDguOTAyMjM0LCJsb25naXR1ZGUiOjIuMzcwMzYxfSx7ImxhdGl0dWRlIjo0OC44OTY1MjcsImxvbmdpdHVkZSI6Mi4zNzA0N30seyJsYXRpdHVkZSI6NDguODk1NzA2LCJsb25naXR1ZGUiOjIuMzcxMzA1fSx7ImxhdGl0dWRlIjo0OC44OTUyNTYsImxvbmdpdHVkZSI6Mi4zNzE3MzN9LHsibGF0aXR1ZGUiOjQ4Ljg5NDU4MywibG9uZ2l0dWRlIjoyLjM3MDMxNH0seyJsYXRpdHVkZSI6NDguODg2ODgsImxvbmdpdHVkZSI6Mi4zNjY4MzV9LHsibGF0aXR1ZGUiOjQ4Ljg4NDM2MywibG9uZ2l0dWRlIjoyLjM2NDYxMX0seyJsYXRpdHVkZSI6NDguODg0NDUsImxvbmdpdHVkZSI6Mi4zNTkzNzZ9LHsibGF0aXR1ZGUiOjQ4Ljg4NDM1NiwibG9uZ2l0dWRlIjoyLjM1Nzg1NX0seyJsYXRpdHVkZSI6NDguODgzNzQ0LCJsb25naXR1ZGUiOjIuMzQ5NDczfSx7ImxhdGl0dWRlIjo0OC44ODMzMDEsImxvbmdpdHVkZSI6Mi4zNDY4ODN9LHsibGF0aXR1ZGUiOjQ4Ljg4MjAwOSwibG9uZ2l0dWRlIjoyLjMzOTY5MX0seyJsYXRpdHVkZSI6NDguODgyMzE3LCJsb25naXR1ZGUiOjIuMzM3NDh9LHsibGF0aXR1ZGUiOjQ4Ljg4NDYxMSwibG9uZ2l0dWRlIjoyLjMyOTM5Nn0seyJsYXRpdHVkZSI6NDguODgzNDM0LCJsb25naXR1ZGUiOjIuMzI3MTk0fSx7ImxhdGl0dWRlIjo0OC44ODc1ODMsImxvbmdpdHVkZSI6Mi4zMjU1NDV9XSwiVHlwZSI6IkxpbmVTdHJpbmciLCJOYW1lIjpudWxsLCJJZEZlYXR1cmUiOm51bGwsIkNsaWNrYWJsZSI6ZmFsc2V9LHsiQ29sb3IiOiIyNTUsIDAsIDAiLCJXaWR0aCI6NCwiQ29vcmRpbmF0ZXMiOlt7ImxhdGl0dWRlIjo0OC44ODc1ODMsImxvbmdpdHVkZSI6Mi4zMjU1NDV9LHsibGF0aXR1ZGUiOjQ4Ljg4MzQzNCwibG9uZ2l0dWRlIjoyLjMyNzE5NH0seyJsYXRpdHVkZSI6NDguODg0NjExLCJsb25naXR1ZGUiOjIuMzI5Mzk2fSx7ImxhdGl0dWRlIjo0OC44ODY2MzMsImxvbmdpdHVkZSI6Mi4zMzI2MDN9LHsibGF0aXR1ZGUiOjQ4Ljg4Nzk4MSwibG9uZ2l0dWRlIjoyLjMzMjcxN30seyJsYXRpdHVkZSI6NDguODkxNzU0LCJsb25naXR1ZGUiOjIuMzM0OTM5fSx7ImxhdGl0dWRlIjo0OC44OTY4MjcsImxvbmdpdHVkZSI6Mi4zMzg1MzF9LHsibGF0aXR1ZGUiOjQ4Ljg5NTY5OCwibG9uZ2l0dWRlIjoyLjMyODM2N30seyJsYXRpdHVkZSI6NDguODg3NTgzLCJsb25naXR1ZGUiOjIuMzI1NTQ1fV0sIlR5cGUiOiJMaW5lU3RyaW5nIiwiTmFtZSI6bnVsbCwiSWRGZWF0dXJlIjpudWxsLCJDbGlja2FibGUiOmZhbHNlfV0pOw0KfTsNCjwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCnZhciBHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9BdXRvQ29tcGxldGVSZWZfVEJBdXRvQ29tcGxldGVfQXV0b0NvbXBsZXRlTWFuYWdlcj1udWxsOw0KaWYoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQkF1dG9Db21wbGV0ZScpICE9IG51bGwpIHtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlJykub25mb2N1cyA9IGZ1bmN0aW9uIChlKSB7DQppZiAoR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlX0F1dG9Db21wbGV0ZU1hbmFnZXIgPT0gbnVsbCkgew0KdmFyIHNlYXJjaF9pbnB1dD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlJyk7DQp2YXIgdmFsdWVfaW5wdXQ9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQlZhbHVlJyk7DQp2YXIgcmVzdWx0c19kaXY9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9SZXN1bHRzRGl2Jyk7DQokKCcjR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlJykuYXR0cignYXV0b2NvbXBsZXRlJywgJ09mZicpOw0KJCgnI0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQkF1dG9Db21wbGV0ZScpLmNsb3Nlc3QoJ2Zvcm0nKS5hdHRyKCdhdXRvY29tcGxldGUnLCAnT2ZmJyk7DQppZihzZWFyY2hfaW5wdXQhPW51bGwgJiYgdmFsdWVfaW5wdXQhPW51bGwgJiYgcmVzdWx0c19kaXYhPW51bGwpew0KR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlX0F1dG9Db21wbGV0ZU1hbmFnZXI9IG5ldyBBdXRvQ29tcGxldGVNYW5hZ2VyKHNlYXJjaF9pbnB1dCwgdmFsdWVfaW5wdXQsIHJlc3VsdHNfZGl2LCAnL0F1dG9Db21wbGV0ZVNlcnZpY2UuYXNteC9HZXRSZWZzQ29tcGxldGlvbkxpc3QnLCAnQXVjdW4gcsOpc3VsdGF0JywgZmFsc2UsZmFsc2UsJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQkF1dG9Db21wbGV0ZScpOw0KfQ0KfQ0KfTsNCn0NCjwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCmdhKCdzZW5kJywgJ2V2ZW50JywgJ1Byb2R1aXRzJywgJ0NvbnN1bHRhdGlvbicsICcxMDAwMTQyNDg1OzY2OTE7UEFSSVMgMTcnLCAxLHsnZGltZW5zaW9uMSc6JzEwMDAxNDI0ODUnLCAnZGltZW5zaW9uMic6ICdvZmZlcmRldGFpbCcsICdkaW1lbnNpb24zJzogJzY4NTAwMCd9KTs8L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4NCiAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAkLmFqYXgoew0KICAgICAgICAgICB1cmw6ICcvU3RhdGlzdGlxdWVzU2VydmljZS5hc214L0luY3JlbWVudFNjb3JlRGV0YWlsUHJvZHVpdCcsDQogICAgICAgICAgIGRhdGE6ICJ7ICdDb2RlUHJvZHVpdCc6IDg1NjI3MiwgJ0lzUmVjbyc6IGZhbHNlfSIsDQogICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsDQogICAgICAgICAgIHR5cGU6ICdQT1NUJywNCiAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgYXN5bmM6IHRydWUNCiAgICAgICB9KTsNCiAgIH0sIDEwMCk7DQo8L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+IA0KdmFyIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19UQklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19UQklucHV0Jyk7dmFyIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlcycpO01TRERNYW5hZ2VyKEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19UQklucHV0LEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19WYWx1ZXNEaXYsZmFsc2UpOzwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCnZhciBHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NVlRCVmlsbGVzX1RCQXV0b0NvbXBsZXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJBdXRvQ29tcGxldGUnKTt2YXIgR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVZUQlZpbGxlc19UQlZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJWYWx1ZScpO01WVEJNYW5hZ2VyKEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJBdXRvQ29tcGxldGUsIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJWYWx1ZSwnL0F1dG9Db21wbGV0ZVNlcnZpY2UuYXNteC9HZXRWaWxsZXNDb21wbGV0aW9uTGlzdCcsIHsgc3RhcnRUZXh0OiAnVmlsbGUgb3UgQ1AnLCBlbXB0eVRleHQ6ICdQYXMgZGUgcsOpc3VsdGF0JywgYXNIdG1sSUQ6ICdHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NVlRCVmlsbGVzJywgc2VsZWN0ZWRJdGVtUHJvcDogJ25hbWUnLCBzZWFyY2hPYmpQcm9wczogJ25hbWUnLCBhdXRvX3Bvc3RiYWNrOiBmYWxzZSwgcG9zdGJhY2tfdGFyZ2V0OiAnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVZUQlZpbGxlc19UQkF1dG9Db21wbGV0ZScsIHByZUZpbGw6IFtdfSk7PC9zY3JpcHQ+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCi8vPCFbQ0RBVEFbDQpTeXMuRXh0ZW5kZWQuVUkuTG9jYWxpemF0aW9uLlNldExvY2FsZSgiZnIiKTsvL11dPg0KPC9zY3JpcHQ+DQo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+DQogICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgdXJsOiAnL1N0YXRpc3RpcXVlc1NlcnZpY2UuYXNteC9JbmNyZW1lbnRTY29yZUxpc3RpbmdQcm9kdWl0JywNCiAgICAgICAgICAgZGF0YTogInsgJ0NvZGVQcm9kdWl0JzogODIwNTg4LCAnSXNSZWNvJzogdHJ1ZX0iLA0KICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLA0KICAgICAgICAgICB0eXBlOiAnUE9TVCcsDQogICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsDQogICAgICAgICAgIGFzeW5jOiB0cnVlDQogICAgICAgfSk7DQogICB9LCAxMDApOw0KPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPg0KICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICQuYWpheCh7DQogICAgICAgICAgIHVybDogJy9TdGF0aXN0aXF1ZXNTZXJ2aWNlLmFzbXgvSW5jcmVtZW50U2NvcmVMaXN0aW5nUHJvZHVpdCcsDQogICAgICAgICAgIGRhdGE6ICJ7ICdDb2RlUHJvZHVpdCc6IDgzMjQ2OSwgJ0lzUmVjbyc6IHRydWV9IiwNCiAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywNCiAgICAgICAgICAgdHlwZTogJ1BPU1QnLA0KICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLA0KICAgICAgICAgICBhc3luYzogdHJ1ZQ0KICAgICAgIH0pOw0KICAgfSwgMTAwKTsNCjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4NCiAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAkLmFqYXgoew0KICAgICAgICAgICB1cmw6ICcvU3RhdGlzdGlxdWVzU2VydmljZS5hc214L0luY3JlbWVudFNjb3JlTGlzdGluZ1Byb2R1aXQnLA0KICAgICAgICAgICBkYXRhOiAieyAnQ29kZVByb2R1aXQnOiA4NDMyNzMsICdJc1JlY28nOiB0cnVlfSIsDQogICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsDQogICAgICAgICAgIHR5cGU6ICdQT1NUJywNCiAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgYXN5bmM6IHRydWUNCiAgICAgICB9KTsNCiAgIH0sIDEwMCk7DQo8L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+DQogICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgdXJsOiAnL1N0YXRpc3RpcXVlc1NlcnZpY2UuYXNteC9JbmNyZW1lbnRTY29yZUxpc3RpbmdQcm9kdWl0JywNCiAgICAgICAgICAgZGF0YTogInsgJ0NvZGVQcm9kdWl0JzogODQ2MDcwLCAnSXNSZWNvJzogdHJ1ZX0iLA0KICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLA0KICAgICAgICAgICB0eXBlOiAnUE9TVCcsDQogICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsDQogICAgICAgICAgIGFzeW5jOiB0cnVlDQogICAgICAgfSk7DQogICB9LCAxMDApOw0KPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPg0KICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICQuYWpheCh7DQogICAgICAgICAgIHVybDogJy9TdGF0aXN0aXF1ZXNTZXJ2aWNlLmFzbXgvSW5jcmVtZW50U2NvcmVMaXN0aW5nUHJvZHVpdCcsDQogICAgICAgICAgIGRhdGE6ICJ7ICdDb2RlUHJvZHVpdCc6IDg1OTMwNSwgJ0lzUmVjbyc6IHRydWV9IiwNCiAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywNCiAgICAgICAgICAgdHlwZTogJ1BPU1QnLA0KICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLA0KICAgICAgICAgICBhc3luYzogdHJ1ZQ0KICAgICAgIH0pOw0KICAgfSwgMTAwKTsNCjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4NCiAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAkLmFqYXgoew0KICAgICAgICAgICB1cmw6ICcvU3RhdGlzdGlxdWVzU2VydmljZS5hc214L0luY3JlbWVudFNjb3JlTGlzdGluZ1Byb2R1aXQnLA0KICAgICAgICAgICBkYXRhOiAieyAnQ29kZVByb2R1aXQnOiA4NTk0NzYsICdJc1JlY28nOiB0cnVlfSIsDQogICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsDQogICAgICAgICAgIHR5cGU6ICdQT1NUJywNCiAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgYXN5bmM6IHRydWUNCiAgICAgICB9KTsNCiAgIH0sIDEwMCk7DQo8L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCi8vPCFbQ0RBVEFbDQpTeXMuRXh0ZW5kZWQuVUkuTG9jYWxpemF0aW9uLlNldExvY2FsZSgiZnIiKTtTeXMuRXh0ZW5kZWQuVUkuTG9jYWxpemF0aW9uLlNldExvY2FsZSgiZnIiKTtTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuVmFsaWRhdG9yQ2FsbG91dEJlaGF2aW9yLCB7IkNsaWVudFN0YXRlRmllbGRJRCI6Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZOb21fVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyX0NsaWVudFN0YXRlIiwiY2xvc2VJbWFnZVVybCI6Ii9XZWJSZXNvdXJjZS5heGQ/ZD1Ob0RkdjMwdzdhdmNLNmJDaDJQckZGWG5PdDkzSURSQWY1R0I1aGpvNEY1dkM2VXdUSFNjYjdyX093YU50SGFRVjZleVVGLTFVaVNERTlRalVxaXZOSWIwYUt4QTIwNVU2LTBTVEctTi1XRGpjTWY1Q0FVa0w2eGZreUhIWEtQMjN3aUo4N3RVT0pra1hISXlrMlMzdWYwNXQxVkt1d2NiQ2FQOWpQTHNvSnMxXHUwMDI2dD02MzY5NzAyMzA0ODAwMDAwMDAiLCJpZCI6IlJGVk5vbV9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXIiLCJwb3B1cFBvc2l0aW9uIjoyLCJ3YXJuaW5nSWNvbkltYWdlVXJsIjoiL1dlYlJlc291cmNlLmF4ZD9kPU5YVDlZSjhRcVMzYW5LLXFKeVhOQXg5RmVaSXJaaVlnMUdLR2FKR1RDZFRPN2EyMHY5SlVjQmdJalJiNFJkRVlXWjVvR0ZKLUlXaWtJTDBURWpxZ0NiNFNVNEdHT3JFMU1rNGJ1Y0gtTGt1OWNLX0JHeVJJOFR0M0xmQWZscDdCV2YwN2lxM1o1TlUzM1BtVmxhdE5yZ0o4Q3JSaWRGRWdXOUxEUk9Wek00VTFcdTAwMjZ0PTYzNjk3MDIzMDQ4MDAwMDAwMCJ9LCBudWxsLCBudWxsLCAkZ2V0KCJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfUkZWTm9tIikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuVmFsaWRhdG9yQ2FsbG91dEJlaGF2aW9yLCB7IkNsaWVudFN0YXRlRmllbGRJRCI6Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiLCJjbG9zZUltYWdlVXJsIjoiL1dlYlJlc291cmNlLmF4ZD9kPU5vRGR2MzB3N2F2Y0s2YkNoMlByRkZYbk90OTNJRFJBZjVHQjVoam80RjV2QzZVd1RIU2NiN3JfT3dhTnRIYVFWNmV5VUYtMVVpU0RFOVFqVXFpdk5JYjBhS3hBMjA1VTYtMFNURy1OLVdEamNNZjVDQVVrTDZ4Zmt5SEhYS1AyM3dpSjg3dFVPSmtrWEhJeWsyUzN1ZjA1dDFWS3V3Y2JDYVA5alBMc29KczFcdTAwMjZ0PTYzNjk3MDIzMDQ4MDAwMDAwMCIsImlkIjoiUkZWRW1haWxfVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyIiwicG9wdXBQb3NpdGlvbiI6Miwid2FybmluZ0ljb25JbWFnZVVybCI6Ii9XZWJSZXNvdXJjZS5heGQ/ZD1OWFQ5WUo4UXFTM2FuSy1xSnlYTkF4OUZlWklyWmlZZzFHS0dhSkdUQ2RUTzdhMjB2OUpVY0JnSWpSYjRSZEVZV1o1b0dGSi1JV2lrSUwwVEVqcWdDYjRTVTRHR09yRTFNazRidWNILUxrdTljS19CR3lSSThUdDNMZkFmbHA3QldmMDdpcTNaNU5VMzNQbVZsYXROcmdKOENyUmlkRkVnVzlMRFJPVnpNNFUxXHUwMDI2dD02MzY5NzAyMzA0ODAwMDAwMDAifSwgbnVsbCwgbnVsbCwgJGdldCgiTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1JGVkVtYWlsIikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuVmFsaWRhdG9yQ2FsbG91dEJlaGF2aW9yLCB7IkNsaWVudFN0YXRlRmllbGRJRCI6Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRVZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiLCJjbG9zZUltYWdlVXJsIjoiL1dlYlJlc291cmNlLmF4ZD9kPU5vRGR2MzB3N2F2Y0s2YkNoMlByRkZYbk90OTNJRFJBZjVHQjVoam80RjV2QzZVd1RIU2NiN3JfT3dhTnRIYVFWNmV5VUYtMVVpU0RFOVFqVXFpdk5JYjBhS3hBMjA1VTYtMFNURy1OLVdEamNNZjVDQVVrTDZ4Zmt5SEhYS1AyM3dpSjg3dFVPSmtrWEhJeWsyUzN1ZjA1dDFWS3V3Y2JDYVA5alBMc29KczFcdTAwMjZ0PTYzNjk3MDIzMDQ4MDAwMDAwMCIsImlkIjoiUkVWRW1haWxfVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyIiwicG9wdXBQb3NpdGlvbiI6Miwid2FybmluZ0ljb25JbWFnZVVybCI6Ii9XZWJSZXNvdXJjZS5heGQ/ZD1OWFQ5WUo4UXFTM2FuSy1xSnlYTkF4OUZlWklyWmlZZzFHS0dhSkdUQ2RUTzdhMjB2OUpVY0JnSWpSYjRSZEVZV1o1b0dGSi1JV2lrSUwwVEVqcWdDYjRTVTRHR09yRTFNazRidWNILUxrdTljS19CR3lSSThUdDNMZkFmbHA3QldmMDdpcTNaNU5VMzNQbVZsYXROcmdKOENyUmlkRkVnVzlMRFJPVnpNNFUxXHUwMDI2dD02MzY5NzAyMzA0ODAwMDAwMDAifSwgbnVsbCwgbnVsbCwgJGdldCgiTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1JFVkVtYWlsIikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuTW9kYWxQb3B1cEJlaGF2aW9yLCB7ImJhY2tncm91bmRDc3NDbGFzcyI6Im1vZGFsQmFja2dyb3VuZCIsImR5bmFtaWNTZXJ2aWNlUGF0aCI6Ii9maWNoZS1wcm9kdWl0LmFzcHgiLCJpZCI6Ik1lc3NhZ2VCb3hDdGxfUE1lc3NhZ2VCb3hfTW9kYWxQb3B1cEV4dGVuZGVyIiwib2tDb250cm9sSUQiOiJNZXNzYWdlQm94Q3RsX0xCQ2xvc2UiLCJwb3B1cENvbnRyb2xJRCI6Ik1lc3NhZ2VCb3hDdGxfUE1lc3NhZ2VCb3gifSwgbnVsbCwgbnVsbCwgJGdldCgiTWVzc2FnZUJveEN0bF9MQkR1bW15IikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuQWx3YXlzVmlzaWJsZUNvbnRyb2xCZWhhdmlvciwgeyJob3Jpem9udGFsT2Zmc2V0IjoxNTAsImhvcml6b250YWxTaWRlIjoxLCJpZCI6IkZsb2F0aW5nVXBkYXRlUHJvZ3Jlc3NfQWx3YXlzVmlzaWJsZUNvbnRyb2xFeHRlbmRlciIsInNjcm9sbEVmZmVjdER1cmF0aW9uIjoxMDAwLCJ2ZXJ0aWNhbFNpZGUiOjF9LCBudWxsLCBudWxsLCAkZ2V0KCJGbG9hdGluZ1VwZGF0ZVByb2dyZXNzX1BhbmVsUHJvZ3Jlc3MiKSk7DQp9KTsNClN5cy5BcHBsaWNhdGlvbi5hZGRfaW5pdChmdW5jdGlvbigpIHsNCiAgICAkY3JlYXRlKFN5cy5FeHRlbmRlZC5VSS5Nb2RhbFBvcHVwQmVoYXZpb3IsIHsiYmFja2dyb3VuZENzc0NsYXNzIjoibW9kYWxCYWNrZ3JvdW5kIiwiZHluYW1pY1NlcnZpY2VQYXRoIjoiL2ZpY2hlLXByb2R1aXQuYXNweCIsImlkIjoiUFBvcHVwQ29uY291cnNfTW9kYWxQb3B1cEV4dGVuZGVyIiwicG9wdXBDb250cm9sSUQiOiJQUG9wdXBDb25jb3VycyJ9LCBudWxsLCBudWxsLCAkZ2V0KCJMQkR1bW15IikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuTW9kYWxQb3B1cEJlaGF2aW9yLCB7ImJhY2tncm91bmRDc3NDbGFzcyI6Im1vZGFsQmFja2dyb3VuZCIsImNhbmNlbENvbnRyb2xJRCI6IkxCQ2xvc2VMaXZyZUJsYW5jIiwiZHluYW1pY1NlcnZpY2VQYXRoIjoiL2ZpY2hlLXByb2R1aXQuYXNweCIsImlkIjoiUFBvcHVwTGl2cmVCbGFuY19Nb2RhbFBvcHVwRXh0ZW5kZXIiLCJwb3B1cENvbnRyb2xJRCI6IlBQb3B1cExpdnJlQmxhbmMifSwgbnVsbCwgbnVsbCwgJGdldCgiTEJEdW1teUxpdnJlQmxhbmMiKSk7DQp9KTsNClN5cy5BcHBsaWNhdGlvbi5hZGRfaW5pdChmdW5jdGlvbigpIHsNCiAgICAkY3JlYXRlKFN5cy5FeHRlbmRlZC5VSS5Nb2RhbFBvcHVwQmVoYXZpb3IsIHsiYmFja2dyb3VuZENzc0NsYXNzIjoibW9kYWxCYWNrZ3JvdW5kIiwiY2FuY2VsQ29udHJvbElEIjoiTEJDbG9zZUNvdmlkMTkiLCJkeW5hbWljU2VydmljZVBhdGgiOiIvZmljaGUtcHJvZHVpdC5hc3B4IiwiaWQiOiJQUG9wdXBDb3ZpZDE5X01vZGFsUG9wdXBFeHRlbmRlciIsInBvcHVwQ29udHJvbElEIjoiUFBvcHVwQ292aWQxOSJ9LCBudWxsLCBudWxsLCAkZ2V0KCJMQkR1bW15Q292aWQxOSIpKTsNCn0pOw0KLy9dXT4NCjwvc2NyaXB0Pg0KPC9mb3JtPg0KDQogICAgICAgIA0KDQogICAgPC9ib2R5Pg0KDQo8L2h0bWw+DQo=
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:58 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-19/appartement/1000141086
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-19/appartement/1000141086
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:49:59 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxNDEwODYiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:58 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-19/appartement/1000141086
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=ymdi04ti5tkpfl1jcfpbckr0; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=f4d2bc0c-936c-4fe0-9071-91ec5511520f; expires=Thu, 01-Apr-2021 17:50:00
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:00
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:00 GMT
      Content-Length:
      - '36679'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        DQoNCjwhRE9DVFlQRSBodG1sPg0KPGh0bWwgbGFuZz0iZnIiPg0KDQogICAgPGhlYWQ+PG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+PG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEuMTUsIHVzZXItc2NhbGFibGU9eWVzIiAvPjx0aXRsZT4NCglBY2hhdCBhcHBhcnRlbWVudCAzIHBpw6hjZXMgUGFyaXMgMTnDqG1lICAtIFLDqWY6IDIzNDAgIC0gTEEgUkVTSURFTkNFDQo8L3RpdGxlPjxsaW5rIGhyZWY9Ii9jc3MvcmVzZXQuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVyLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9ImFsbCIgLz48bGluayBocmVmPSIvY3NzL21lbnUuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3Mvc3R5bGVzLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9ImFsbCIgLz4gICAgDQogIA0KICAgICAgICA8bm9zY3JpcHQgaWQ9ImFzeW5jLXN0eWxlc2hlZXRzIj4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPGxpbmsgaHJlZj0iL2Nzcy9zdHlsZXByaW50LmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InByaW50IiAvPjxsaW5rIGhyZWY9Ii9jc3MvQ3VzdG9tRERTdHlsZXMuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3MvTXVsdGlWYWx1ZVRleHRCb3guY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3MvZGlhcG9TdHlsZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJhbGwiIC8+PGxpbmsgaHJlZj0iL2Nzcy9zd2lwZXIuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPg0KICAgICAgICA8L25vc2NyaXB0Pg0KICAgICAgICAgICAgDQogICAgICAgIDwhLS0gTGluayBTd2lwZXIncyBDU1MgLS0+DQogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBocmVmPSIvaW1hZ2VzL2Zhdmljb24ucG5nIiAvPg0KICAgIA0KICAgICAgICA8c2NyaXB0IGlkPSJsb2FkaW5nX3NjcmlwdHMiPiAgICAgICAgICAgIA0KDQogICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkgeyAgDQogICAgICAgICAgICAgICAgdmFyIG5vc2NyaXB0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFzeW5jLXN0eWxlc2hlZXRzIik7ICANCiAgICAgICAgICAgICAgICBpZiAobm9zY3JpcHRDb250YWluZXIgIT0gbnVsbCkgeyAgDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsgIA0KICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gbm9zY3JpcHRDb250YWluZXIudGV4dENvbnRlbnQ7ICANCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpOyAgDQogICAgICAgICAgICAgICAgfSAgDQogICAgICAgICAgICB9LCBmYWxzZSk7ICANCg0KICAgICAgICA8L3NjcmlwdD4NCg0KICAgICAgICA8IS0tIFN3aXBlciBKUyAtLT4NCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgZnVuY3Rpb24gTU1fanVtcE1lbnUodGFyZywgc2VsT2JqLCByZXN0b3JlKSB7IC8vdjMuMA0KICAgICAgICAgICAgICAgIGV2YWwodGFyZyArICIubG9jYXRpb249JyIgKyBzZWxPYmoub3B0aW9uc1tzZWxPYmouc2VsZWN0ZWRJbmRleF0udmFsdWUgKyAiJyIpOw0KICAgICAgICAgICAgICAgIGlmIChyZXN0b3JlKSBzZWxPYmouc2VsZWN0ZWRJbmRleCA9IDA7DQogICAgICAgICAgICB9DQogICAgICAgIDwvc2NyaXB0Pg0KICAgICAgICANCiAgICAgICAgIDwhLS0gRmFjZWJvb2sgUGl4ZWwgQ29kZSAtLT4NCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgIWZ1bmN0aW9uIChmLCBiLCBlLCB2LCBuLCB0LCBzKSB7DQogICAgICAgICAgICAgICAgaWYgKGYuZmJxKSByZXR1cm47IG4gPSBmLmZicSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgbi5jYWxsTWV0aG9kID8NCiAgICAgICAgICAgICAgICAgICAgbi5jYWxsTWV0aG9kLmFwcGx5KG4sIGFyZ3VtZW50cykgOiBuLnF1ZXVlLnB1c2goYXJndW1lbnRzKQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgaWYgKCFmLl9mYnEpIGYuX2ZicSA9IG47IG4ucHVzaCA9IG47IG4ubG9hZGVkID0gITA7IG4udmVyc2lvbiA9ICcyLjAnOw0KICAgICAgICAgICAgICAgIG4ucXVldWUgPSBbXTsgdCA9IGIuY3JlYXRlRWxlbWVudChlKTsgdC5hc3luYyA9ICEwOw0KICAgICAgICAgICAgICAgIHQuc3JjID0gdjsgcyA9IGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSlbMF07DQogICAgICAgICAgICAgICAgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LCBzKTsNCiAgICAgICAgICAgIH0od2luZG93LCBkb2N1bWVudCwgJ3NjcmlwdCcsICdodHRwczovL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL2ZiZXZlbnRzLmpzJyk7ICAgICAgICANCiAgICAgICAgICAgIGZicSgnaW5pdCcsICcxNjUwMzc3Nzc0OTYxNzEnKTsNCiAgICAgICAgICAgIGZicSgndHJhY2tTaW5nbGUnLCcxNjUwMzc3Nzc0OTYxNzEnLCAnUGFnZVZpZXcnKTsNCiAgICAgICAgPC9zY3JpcHQ+DQogICAgICAgIDwhLS0gRW5kIEZhY2Vib29rIFBpeGVsIENvZGUgLS0+DQogICAgICAgIA0KICAgICAgICANCg0KICAgIDxsaW5rIGhyZWY9Ii9jc3MvZmljaGUtcHJvZHVpdC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJhbGwiIC8+DQoNCiAgICANCg0KDQogICAgPGxpbmsgaWQ9IkxpbmtDYW5vbmljYWwiIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxNDEwODYiIC8+DQoNCiAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPnsNCiJAY29udGV4dCI6ICJodHRwOi8vc2NoZW1hLm9yZy8iLA0KIkB0eXBlIjogWyJodHRwOi8vc2NoZW1hLm9yZy9Ib3VzZSIsImh0dHA6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiXSwNCiJuYW1lIjogIkFjaGF0IGFwcGFydGVtZW50IDMgcGkmIzIzMjtjZXMgUGFyaXMgMTkmIzIzMjttZSAgLSBSJiMyMzM7ZjogMjM0MCAgLSBMQSBSRVNJREVOQ0UiLA0KInByb2R1Y3RJRCI6ICIxMDAwMTQxMDg2IiwNCiJicmFuZCI6IHsNCiJAdHlwZSI6ICJPcmdhbml6YXRpb24iLA0KIm5hbWUiOiAiTEEgUkVTSURFTkNFIg0KfSwNCiJpbWFnZSI6ICJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQxMDg2LzRkNGVkYzZhLWNlOGYtNDZhMC1hYzBjLTM5ODYwYzFhZmRjMi5qcGciLA0KInBob3RvIjogImh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDEwODYvNGQ0ZWRjNmEtY2U4Zi00NmEwLWFjMGMtMzk4NjBjMWFmZGMyLmpwZyIsDQoidXJsIjogImh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL2FjaGV0ZXIvcGFyaXMtMTkvYXBwYXJ0ZW1lbnQvMTAwMDE0MTA4NiIsDQoidGVsZXBob25lIjogIjAxIDQwIDM3IDIyIDIyIiwNCiJmbG9vclNpemUiOiAiNTJtwrIiLA0KIm51bWJlck9mUm9vbXMiOiAiMyIsDQoiZGVzY3JpcHRpb24iOiAiQSAxNTAgbSBkdSBtJiMyMzM7dHJvIFBPUlRFIERFUyBMSUxBUyAoTC4xMSksIGV0IGR1IHRyYW13YXkgVDNCLCAuIHNpdHUmIzIzMzsgZGFucyB1bmUgcGV0aXRlIGNvcHJvcHJpJiMyMzM7dCYjMjMzOyBzJiMyMzM7Y3VyaXMmIzIzMztlLCBhdSA2JiMyMzI7bWUgJiMyMzM7dGFnZSBhdmVjIGFzY2Vuc2V1ciwgc2FucyB2aXMtJiMyMjQ7LXZpcywgVlVFIEQmIzIwMTtHIiwNCiJvZmZlcnMiOiB7DQoiQHR5cGUiOiAiT2ZmZXIiLA0KInVybCI6ICJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxNDEwODYiLA0KInByaWNlQ3VycmVuY3kiOiAiRVVSIiwNCiJwcmljZSI6ICI0NjgwMDAiLA0KImF2YWlsYWJpbGl0eSI6ICJodHRwOi8vc2NoZW1hLm9yZy9JblN0b2NrIiwNCiJzZWxsZXIiOiB7DQoiQHR5cGUiOiAiT3JnYW5pemF0aW9uIiwNCiJuYW1lIjogIkxBIFJFU0lERU5DRSINCn0NCn0NCn0NCjwvc2NyaXB0Pg0KICAgIA0KDQo8bGluayBocmVmPSIvY3NzL21lZGlhbWF4MTI4MC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSBhbmQgKG1heC13aWR0aDogMTI4MHB4KSIgLz48bGluayBocmVmPSIvY3NzL21lZGlhbWluNzY4bWF4OTkxLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIGFuZCAobWF4LXdpZHRoOiA5OTFweCkiIC8+PGxpbmsgaHJlZj0iL2Nzcy9tZWRpYW1vYmlsZW1heDMyMC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSIgLz48bGluayBocmVmPSIvY3NzL21lZGlhbW9iaWxlbWluNDgwbWF4NzY3LmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDgwcHgpIGFuZCAobWF4LXdpZHRoOiA3NjdweCkiIC8+PG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJBY2hhdCBhcHBhcnRlbWVudCAzIHBpw6hjZXMgUGFyaXMgMTnDqG1lICAtIFLDqWY6IDIzNDAgIC0gTEEgUkVTSURFTkNFIiAvPjxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJhcnRpY2xlIiAvPjxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iQSAxNTAgbSBkdSBtw6l0cm8gUE9SVEUgREVTIExJTEFTIChMLjExKSwgZXQgZHUgdHJhbXdheSBUM0IsIC4gc2l0dcOpIGRhbnMgdW5lIHBldGl0ZSBjb3Byb3ByacOpdMOpIHPDqWN1cmlzw6llLCBhdSA2w6htZSDDqXRhZ2UgYXZlYyBhc2NlbnNldXIsIHNhbnMgdmlzLcOgLXZpcywgVlVFIETDiUciIC8+PG1ldGEgcHJvcGVydHk9Im9nOnVybCIgY29udGVudD0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvYWNoZXRlci9wYXJpcy0xOS9hcHBhcnRlbWVudC8xMDAwMTQxMDg2IiAvPjxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cDovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQxMDg2LzRkNGVkYzZhLWNlOGYtNDZhMC1hYzBjLTM5ODYwYzFhZmRjMi5qcGciIC8+PG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOnNlY3VyZV91cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDEwODYvNGQ0ZWRjNmEtY2U4Zi00NmEwLWFjMGMtMzk4NjBjMWFmZGMyLmpwZyIgLz48bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6dHlwZSIgY29udGVudD0iaW1hZ2UvanBlZyIgLz48bWV0YSBwcm9wZXJ0eT0iZmI6YXBwX2lkIiBjb250ZW50PSIxNDM1NDg0MDU4MjczMjQiIC8+PG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOndpZHRoIiBjb250ZW50PSIxMjgwIiAvPjxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTpoZWlnaHQiIGNvbnRlbnQ9Ijk2MCIgLz48bGluayBocmVmPSIvV2ViUmVzb3VyY2UuYXhkP2Q9aVVKQ1d3LUhEcjA0azBWRjdjM0FzcVA5LTF1anhkZTlJTXh4eXFoaXEtSkxhM3EyS2FkcW9UQjZwaEtGVHFCWEVIdUFJeFJ5RUlhM1gtTy1FenM1eUo0aVAwUVNibFlpNEhTRW40THdHRWVsS3ktSXZLM29GcVpEekFYT0xVX09jMTNCOUp2dE51cUJhb25EeXpzNUt2OTBZOTkxWlpveWZpVFBZbW1qWGZVMSZhbXA7dD02MzY5NzAyMzA0ODAwMDAwMDAiIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIC8+PG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkEgMTUwIG0gZHUgbcOpdHJvIFBPUlRFIERFUyBMSUxBUyAoTC4xMSksIGV0IGR1IHRyYW13YXkgVDNCLCAuIHNpdHXDqSBkYW5zIHVuZSBwZXRpdGUgY29wcm9wcmnDqXTDqSBzw6ljdXJpc8OpZSwgYXUgNsOobWUgw6l0YWdlIGF2ZWMgYXNjZW5zZXVyLCBzYW5zIHZpcy3DoC12aXMsIFZVRSBEw4lHIiAvPjwvaGVhZD4NCg0KICAgIDxib2R5Pg0KICAgIA0KICAgICAgICA8Zm9ybSBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2FjaGV0ZXIvcGFyaXMtMTkvYXBwYXJ0ZW1lbnQvMTAwMDE0MTA4NiIgaWQ9Ik1haW5Gb3JtIj4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9fVklFV1NUQVRFIiBpZD0iX19WSUVXU1RBVEUiIHZhbHVlPSI1ZENYQk5XR3ZkSGJpcjhCckNUekppM0tzL25ucm82TkJOSnZEWjU2Q29FYXlBWG9SejhraWdIWFZVeGxER013azEyaWUxZTE5bHBOWnluc0Ftdy9xb0dRUTcvd291M0s5RndNQmZGaGRtQ0pFQUpHZlVwYmtUckVCK2R3c2YrVWhYdmpod0V0cTEyeUQrYk43V1hPRmpHbDFxd0ZpeURLcy8wRzdLY2lNN29YK0ZQMmg3MlFwUjJiNHF5bE45dUZQU1YvQTZhOURiWDRZeWlRQUljVURnbXN5QWpKdTJRVmdINGFxM2ErcWo4a1gxY1VzU0FEN1lka21MZEdQMS9KMzJJd0Z4a0QxTHM2NTgwVzczNVVxVm40dmRjTEFqVDc4Mlg3MmZ0bmFyM1Z3eFhPSTZFdTZkNTFmcXV1L2FlMWJpL1FGTEt4czJQeG5hREZXSFV2ciszbndLQkhHT2UyMXpob1FPaC9zdDZzaW5BQVhHSWliUWF2NXlybnJ1RGtJdllJNGhMMllDd3FPdE9DcXRBcUFDdEthcHRaS2NrcmhDZDRycldPMDJqN2pYYVlRam4zSS82Vk5SYTh2aVZPanRlbC8vQTdwL1ZTMjk0RU9hbDFMMHBFZHlXb0RpeDNLU3BqV3ZqTDFsWlQ2L2hXb2c0MXV1VWhYUjg2clhsb3B3NVdHemFkbHdPZzNkOVlvTFJPM2RXcGpJMDJhVVBudWkrTHh6MW5OeEh1VlVGWEp2Rmt1dEk0UUZpNmkyZElxRlZBU3c1QmxsMERPNG1VdWdidStUem1qQTRCZzFSdm5qa0FrV1pFSnBiL2FoMVRHVmRsZW02ZnU2R1h2UVF2OFZRZkZjSldwS01DbjlicWdUYmE3YVJSUjkvYVlHeWErS3pOaDRrSFBES01iMHV4Z0NLR21YOXg2aG9LU2pWajB3VU9iYkI0bWhZUlY1a0F5QmxNUE8wbCt0ZTF0SkRzSy9WMkZBUTB2RTBmRW9ScnJMUEk2QUowT0FtdEVuTFk1U1pHYUhaZ0JtTWJSTTVWNUhCUzEyVXp3SHZCdU1BNVJFcElsdmVNWmdKZm9zSkE2WDYzN3hITEJOSk1Qd0IveVB6a2NSTDV0SVU3K09mOXRaL2VqWE9MOEpPaFVoQWNBN0oyTWpVTVFENDVFRmdmR05yelEyWDVySjE0eXlUSGprb1lTZitVc08vOXFKbTJ6V3ZWMndUT1duZUxtNFhGWFZIR3lXL1IraFNhanltTG1FOW5VNW8rVHlsc1NpQ0NoNTB5WVFsZUl6Nkgwako5SHpOcUwxM1lVSUc0VC9tZVpaM1pnVjJIYW5nV3hYL3hhZWJaVDFoWWJaeFkxcjdzc2p1aEx2a0hJMmdqY0twTWlUVWZ4RHBJNndJM3NHcm8zcnRIREY0VHlSL016OE9VQllWSlNyQ3J2d0d3RUw3cWdqSjhQRXBvbitSdTFvTUdFak9HWDFJcDMyejFTOFVicVovVVg5NXk5UjUrR3ZoaSswY2JOYUpDSHZ0c2Vab2E5WW5ub25YQVZvcm5wa3BndXprY3BuQ0NST1JhWlRLcGZSMzdMWVN0dFByY0kxcENNOVVmdkJHcHJyay84RG1mVjhUWEljd21NSlQvRFIwWllPNHBNM2piYmxxQ1FPamxqeldNZ1F0TGF5dk5TMkNKZ0pKOEZPc3pHU0hNQXkxcXhGeDI2MGpkNnFPVDBScFJORTV1R0JBRkppSjB4dUJ0L2grbHVaYTMxd2VEQ1B3Vnl4MDlwSzV0bW1mc0Y0L1NjL2RJaFpCd1doZTJFc3BybVNBenF4VXNCUG1KcFlkMjVlSE4vZVRBL1lQODlSeUd5K2NCMTZiakppZU84SE1ZMHpYbklCS1NiV1ZyMkdiRER0QWlyZHNnRWNRUjlnYjNxRHM5bDZyemI0cVJ5QzJqc1VXOG1VUDU3VldHYkxicUp1L2g4Z290R29XeWQzSUR0QUZqd3ZKclhaazVDdGZpdTljcTYyQmVuajZqVHpYYjMwOS91QVg5TnZtdjBJV2x0eTIxWjBlZlpGaTV4VFBLSUNBYWM4aTduZ1dtN2MxY3pMazMrQUxiTVZmWmwzOFYyTDFENCtMdyt2UlEyRXVwVUpORDhtMnRjd1k0RTBSb2hyalBkTlBHRHpXUXJxRFg4MFMrT1plU0xPdUlIdXp5ZTNBcUV1c0xsZDBJUUdQRTk3bldrYS9MTExCbzkyTDk4NmV1alBKYjRaZVBXejNsQ3BsTmlidUw5U2V4SnRBWWpCTE5oL2l2UHNKQmRJSmExMWREYytMcWFwZGd0aW1pOUVtRDYrdG1qWlVUQXM3b3FEb0w2dU1KYnZJM1g4U2NMSjRoamJ5c054akVkR0JPRDlxMzQrODFNbWpuNWNqTXMrbjFKeE5YT3g2OWNEekhrVFRaRjhXVE1WNkVHbDRlc1gra1Z0Y01xV1FJZ3B6eFdQaEtsWGZWR3hzc2pFZUZOVFhlQXhLUW0zdU83RTBCMkRBS1JuQUhXVGFPTjFJQnJOWUhBcG1CU2RPQzBlQVAzYW1LUFlWRDU5eU0xVnF6ZGgyaTJOQThoUDNtU0s0QW9qQllsanAyRS9aKzVzNk4wY1RyZEwzUG96ekVVM3lCclJTTnowSDVKbmc0cFJMckVrbGl6eHM0YmJsejVhTzRId1kxR1VOT1JHTmlydGZYNWFMYVNDV0ptZVdxZXlPS3pKc1l5bVRIakxSQlRKcms5dU43SGQrdHQxVVBZaXhBWVlhQTdmVTZ3TDhRWm1rUXgzTmtjY3FxME54UW0rNTU2TnRLTGpMVUR4NEpEMlZObHdFSE1US2wzNnc4K003Q0V0N2doZ0pVWXhEUHg4UTVJbmVldGUzdjU5cGxidnVLeG1BcXlDeTRXOG9xN3o2ckIyLzUrcHA1TXN4S3FPYVp1NUlXSkFWVEFEbm8xSU5TZHNsMnNxbFRjRW5IOXg3eVQ4NndjSkpONVVXMk51aktua3VERk5KSTA3ZW9ZTDZXWFdCYUhoUUo4TVFCR1VlTU5EOGlNa1NPaWZMRkVlVWdyYXlZNlVuTGQ2MWFkU0Z6UDlhMUo3WHdpRWwycVdQUzQ4c0pXRm1tWDA3UTdNa1hpRjJlNlZhdHA0OXFkRTl4YUhyUlZRNzZaYzNZWk1uRWYvQm4ram5abGkwcDdwdHJESmM3RUhIdjBjcHhCVi9Wem04c1diMFBxdDg0WTdvbm4vWFFaeGI2L2RIUFpkZDMzZUdHM21EdW9lc25yTjJMSDk3VEZweUtjNGpOU1hWR2J5K3AzQ0MzQjZsNE0zYlkwRGYwUkc4WTVobGZlNkI2RXBhQTBxOGJWWHJLdU0zR1pLOTRPNm91OWljUFc5RVZBc1NEVy9FZGdHbGpQUTZhaFF3ZEgwNHBKOTJQRUVncVZnWTNTRUZ6QlpHZ2lseUJoY2xlbXBDOXg2aGtqa2pPY0ZkM2c2L3UxS3RlVE00bm5XZmJlUHBUMGZ4Z0txQ3I4WVo4K1RMUHF2ME8raS9FU29tYWd5dGdpZTR6Uy9yZjd3dEZmaDYxZ29IOUFGY0lWRFlLaHJ3aHllSC9KTXNQN1JOcWdJeTZHRHdkM2h1ZHB4Zk1jdHpSeXczcWFRSmlpZ2xKcS9BWlpNWndJMllkMFhCUkM4aW5GTFFkV00vYkJoYjNYdVlKL1NTaHZzQXM0Y3hqMDBteStMLzVVM3ZUbnhZQ1l1UW44d0FUd0s4QzBzR2x5bDIwb3Nuek1xclp0b212N09abUxXQ1hidHJZc3VqM2dTMWFLQlFBYUJZcGJ1YU5VQ3J3YTZaLzFVZm80MGxzWTJEcHB6RTZneDhtVndId0tmTXVmVkxuLzdFeTNteFhKT2J3aFpkUjZySlVMeUdYQnBmaC9tSS84ZmhienNvVTNlQ1Y0SjNuM2Q3Zy9XdmZIL01FUXdaVHdDM1pwU0lsVG5rSElueVh0T3F2NUtrZEM2VlQzTzRtd2NZVUZNWS9MWlBYd0ZVU3dGWXgwdXlza2lLQ0Zrc1NrNFhnMFUyZGZuekFpM1VvaklFWlJiODUzT2hkUUxzbko1cFdPOEpTSDAyekthQm8zMVdxNTI1U1g0MlpyWjg4K2F6anNFV05FUndQUytnd0dpTWZlQTY4VFZyL0NyYnF0TFVlQWJSeWF3RFN4aE10WTczS3k1Q1RINHZ5VjhSRUhVNWdnTnkrN0ZKSmplTDVFMXZYT2N3c3N6TnBIZ2tEREk3cGc1T1NLNmYyeXB0ZWNwTG1sbFh6d3pYTjJic3pnM09vWFk5NjY4V2MwZDNtbXhpdFFJS0lpdjBkd3ZUUFYvcVhEY2RrUFliNW50MEpSdUZhVVkweHgxbFY0VUZKVFl0OUIrYlZnSHJGalpBRlZ0YlEvQ1Z0eXJHcDFNY2FkWkI3WldGNHRIY2hKcGVIY2F6V2RQczhEVUNzYWlUVGVUMGZmVXhIazdISVNFWHd5Y091dm1DbFBDcVJKUXFxNFFoV3JFMGtlckE0aVRMa0JvMW9kOWk2bFcrUHJzYnFWbmpGNjBoejJrQm0xbXVWVnNmUUZTM003MTFCQWc5OTRtMVl2RW1PaUJOSGVzOWxoTFh4a1p6RWJzWXFNNlpqbzlFVTMvcWVnRGRxcW1MaXpvai9EcEVUcWlXLzVhWjJLdDFDTEtER3ZiK2xvSXRSTWRtRFZjSlBWNm82akNIZzU3SHhWS0tPN3F3TTdMU0ErMjU2R2VNK1NnTEk2bGpHMFFKQ09nbjBFeVZUT2J0RElYTVR4cHVlYnpHMDlzNHd0WTZReEQ1R0pnOEFzb3hPRHo5WjRZNkRSMFFLMFg5WHN0RDFObWlGMnhVd1Rhb1VEWHRWVFRuSDRJS1EzTyt6NG1CQU4wNHJGYzU5TS9oTWw4dlJYczAxelIyd3JmM2ZxeHhDRXdRdVRxL01Pc1FEUGFaQ1IzRW8zbjVMS3lGNzF2TllsS1Rxd1JFQ1BSYz0iIC8+DQoNCg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0zLjEuMS5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvanF1ZXJ5LXVpLTEuMTIuMS5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21vZGVybml6ci5jdXN0b20uODYwODAuanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3N3aXBlci5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2FjY29yZGlvbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+IA0KKGZ1bmN0aW9uIChpLCBzLCBvLCBnLCByLCBhLCBtKSB7aVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7KGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpfSwgaVtyXS5sID0gMSAqIG5ldyBEYXRlKCk7IGEgPSBzLmNyZWF0ZUVsZW1lbnQobyksbSA9IHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07IGEuYXN5bmMgPSAxOyBhLnNyYyA9IGc7IG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgbSl9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJ2h0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpO2dhKCdjcmVhdGUnLCAnVUEtNDQzNjUzMTktMScsICdhdXRvJywge3VzZXJJZDogJ2Y0ZDJiYzBjLTkzNmMtNGZlMC05MDcxLTkxZWM1NTExNTIwZid9KTtnYSgnc2VuZCcsICdwYWdldmlldycpOzwvc2NyaXB0Pg0KDQo8c2NyaXB0IHNyYz0iLi4vLi4vLi4vU2NyaXB0cy9XZWJGb3Jtcy9Nc0FqYXgvTWljcm9zb2Z0QWpheC5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9RnVKbUZ3ckJ0VGkzRnhqWFJCakRvNXlRT1JxdGVjVlBTT09LYTRhXy1iZUVYVmFWOVRZZGZ5eG1UZFJQMnFNRW1mOFBuc1dWbVhUYVZTQTV1YUF5Q2ZXM09jY3J4YTBOeDZqX016VUd6M0lTbF9wX2dFNUhrU3dtX0k5QTVyWmMxMDYxZTBkS1RuWEJfeTFsbW1taVZFVDE3clU5WEt0a1M2WDg1U3JKZWFfMmZNakZWOU1LM05rVmVtZ1pONFpWeEgtM2tUb05VYldkaW5JSXJIdGNnUEo3dU95WjZmbHFHOUdIRHM5R0tLRG1fUVZWb0RrNWg1b3k3ZmFEa0Q0bkZHeVUwR3UxWjRvUGVsd1NWQ3F4ZFVPdE8ydlgtRVdONGJoVTdjY1JSaWRJcE9takRmVURTa1BGQ2RtYi1JajFqbExCb0dCTmlITmY3VmkxVUdiWkN1RjF2dVNJa0xtUE5YZ0NPeFpEZ09JWmxpV01VNjZ2dTZIRHlMOTRSTHpwb1NtQm1lQUJxeUZVaHdJLWxEdlRfTzlodWVocnZ5ZVVrdzVtVmM3V1VWZHlzS1BvajR4V3VhQVhZcTl0UHlZV3pCNGpqQ011Y2xLREN3UzFzV3hFRUEyIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD1ZM202VXJWTWJxSlZFLWtROWdpb0g1NzVoNFVRV3JXSjZqbXNoLVA4c2xadU4waWs4cUdwUlpia0dCcDBsOWlXR3RxMEVvZW84MlhBQkpkTnVYcnAtRlNneFU1eXFxYmdSLWNocDZVYVUyWUdIOEhPMkt4VTRMR1otNlFUMEhSWjAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9S1FBMy05b212UGtsLURRRHFTcTBtRG1pakdnd0lVVTV3dDk0R1g5bGZ3T1UwcmdNMEFYUEZNbFhfbDFNQWJGa0xJNmxwZl9qVk92U2RIX2Z1Y0NrdlowY01mWXhDYlgtb1JBdG1fUXBMdzRKQTRZeUV3U2VHTlJvaXMtRmxfckRWOFgxZFF6Nko3TURHNjVmRGZfUmZnMiZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD1nV2NySEItRUdDMXA0THRaYS1sYmp3YXRoLWItYm04Q0FLNlBJN3NIbXNldFNaMkkzS1ZBQkV6c3B6VXBvWnY5S3ZmQzhNOTdpYWExOC1OeUNvSXBTaFpROVBjYkVIQ2lfbEh4X2xVMF9sMDEmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9WUdRa0tFckhGRGRHZUNNWTQ0dWtfaTNQYVRPWmxlcTN1ejJ1a2tFT0lZcGl5NDBYR1NJdjZHS0pjNjJsdXkyNWJOQXFUU1JsSnh4bXZFT0Z0MHlmTUhIQTZpUFVvTFFtN2d3LUtzWDk0bEFjQjQzQVhvSGhYY1U0MjUxeWNxc0UwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPV9zR3A4XzliTkhZTnlRcXhkdlFScWVrMWJ1ZGRERFd0QVFkU2x0dzgzaTZpR0VZQUNEN3VRakpFR1NPQ0hvOU5sRUxrZlVSYU1NMlkyRkZsWmxSOFB2UGhvamFEb0xDaE1oeXZzLXNsclVJUkpSbkhvVEtyblQ3UmhTWnI1NHpoMCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD0wWnJNS1ZQMlU3d1FEWlEtNjJLVU5ZUlk0ZllTZERQdDZOWl9ybTJrQmNwYktVZjJ0OHFZaXpTRUhnMFhOZW5BeUZyYy1IY1F1dHVxZk9JdTJqMG51cjdXQVp1cmlmWXlVV2NMczZOZ2NtZzBXR0pydlBaR2l4aUxIOXRUcFRlTDAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9emhCNFRuTmc1U0NuVHVkMG5QWlYwSXRwU2tzY1RtNWJtSzVqcUZfUkQ4Y3dBMlJLdjhXQkdnaV8zZXRHeW1SRE1XUmR5amFNckpHWXlWX2tqdHZjOXI1S1NHV3NndFpFY2ZVUkgtbXdybktldVAtTDlBd1BBa0ZGc3QyMTg5cEMwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPVNidG5WV3M4THRkdlczR3hpZVlabGRGTWs1WFZoUTJDXzZKWUZVdlRJVVo4WnRBcVNqTEl2T0g0M0p0NllHOVB3Z1FJRXNvVnpMYmNrcXRRZndUWGZ5ZHFrR2dmQzB5SEhEbHJ0Q18xZUIxbXZQRmZlbGNnOWZnd0h5aE1nWE52MCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD11a28wLTgzZDlxaG13b0VlMnhOOEJucFJEZHNyTnpPQWdLd21ybDZUY1Z2b05qWHZoWU4zRVVvOERGNS1mVVN5dUxaa0RFa1NIY3hUNFcyWEpJdDlnUU51dU43c2Zqd3BCM3RhYVBZUHg3UTEmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9aG1JcWY5RTR3NGo2d1NILXF5MG1FNjJseW9KdzZyNzAybjl4SDE0UnVGVmUzSE1ZcU1JSjhlanpUeDh2eExQcHIySzYybjlLWjIxLW9rbWJ2RmdWMUtzTkI4QUVmNV8zZ3RxU2oxWldLZTlJZVdYc2hfYVVCNE5tRndfQTBPVDgwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPWNJSUhoZXREMEZPOEZ5RmpvaTZnaFlrRjhVOWJrSmRBdzVnZnJWTVlEUl9HblphSmJFeFpnc2FQU0FUOTdoQjd1cHhuSnM1clZLNFFVT2FPR0dlaklQT0lYWkdlRHFjdmtfY25zbTF4djI5V29KMkZfdVc5LWUyNDk4YUwya3dyMCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD1sZUlxLXJuNk5pbThjUFNlODRDSUFnZVNUR1UwZjktU0dGNjNOVkhDajZHLUJrcHlEOG1pbld0anE5RVZyaVc5ZDRkQWFiT1h6WkVVY3pJU1VNY1lQTW1wTDZ6SWxtMnQ0MWlvQ3haNUxRWDRuY0VQSmh2MDdnS0pOT3hwMkdLUzAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9NlQwSHBGUmNtUjVzb29zVmdlZmFiZVI1WjMtLVFRbkxNa1piZ3F5UmJrcVRXOVVXYThOaVlqQnlPZHk5bXpsZmswckJiSmtrZUV2ZGhOYnF6R25ZaXRRWFB2X0xua01DaVVOZnpsS191ejBHVERsamxKSUdxZTNKeUp2bXF6RGUwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPUk3VXB0OWtGVnRCWmlxWm0tNENwS2gxcTE3S3prOF9EVVhCTXBlS0hVMUdRRGlqZ0dKUXhIRkpyZ1g2QWlDOFFILWNXMUdlWEVlWHRNSkE4UVloT29IQklweVkxRFBNZXdUcGtOdUNxSDVtb01DMDFVQzBNT0xtR2VuUG54dDNLMCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD0yR2ttTnhERjhydmhkYkVERHdQcW1nYWdFVUNPUTdCRnFaaVlQYThJNkZuSlZ3Szd6RklTWUJZSjhjbXY2a1pXOFEwc1VFdDZKR2oxQjY4YlhqWmVhRFhFN2VZZWRxdnA3WHFLdFNINWRqSlZrb0oxcTdweDNWWm5YclVOX1pOSjAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9SWZHWWVRemdxMXgtcFpDRlphR2RBMXhDQUIzczlKaDdpUUVreVFvWjI4X19heURzX2gxdVRvM3lYMGFvX1dSWFh1c2xpOXlRSzdZZDk5U2lGWGV0bGt3aWlDTUNfUWoyS2E5YWU3VHhwNm1IM3FTYXV5dDQ5TEZ0QVoyT0hGcnIwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPXd0VWg3VFB3TDFEck00RnEwWDdqdmp5XzNHVklMSHJuUmlzVWQ2YkNEcUlBcG9vVnRRN3dJQmFzWWVTRHBGM0lieUNnRUhQZVNnc1lzSEkzRktsWjFBNXBjcWl3WW1jME1nSDFxZ0NTZVNYNXVsTFJLd1BBb2NqRW45SEJMcGw5MCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEVHRU5FUkFUT1IiIGlkPSJfX1ZJRVdTVEFURUdFTkVSQVRPUiIgdmFsdWU9IjA3NEQ1RkFEIiAvPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEVFTkNSWVBURUQiIGlkPSJfX1ZJRVdTVEFURUVOQ1JZUFRFRCIgdmFsdWU9IiIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9fUFJFVklPVVNQQUdFIiBpZD0iX19QUkVWSU9VU1BBR0UiIHZhbHVlPSIzZXRhZVgwcjdNaUh6Wjdia0hLcERzbkhPS01iaWV1U1NlbGNKclJ5Q2xhM1g2R0tXUmJhTWwyd05UU0FTbmNIUUFwQzB3ZUd1WHYxTUFhNWNybTlYSlRYWktxb3N1NTM4NUNpMGhRWnZRWTEiIC8+DQogICAgICAgICAgICANCg0KICAgICAgICAgICAgPHVsIGNsYXNzPSJjYi1zbGlkZXNob3ciIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgPGxpPjxzcGFuPjwvc3Bhbj48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48c3Bhbj48L3NwYW4+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PHNwYW4+PC9zcGFuPjwvbGk+ICAgDQogICAgICAgICAgICAgICAgPGxpPjxzcGFuPjwvc3Bhbj48L2xpPg0KICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgPCEtLURFQlVUIGR1IE9DTlRFTkVSIEdMT0JBTCBERSBMQSBQQUdFIC53cmFwcGVyLS0+DQogICAgICAgIA0KICAgICAgICAgICAgPGRpdiBpZD0iUEhlYWRlciIgY2xhc3M9IndyYXBwZXIiPg0KCQ0KDQogICAgICAgICAgICAgICAgPGRpdiBpZD0ic2lkZWJhciIgY2xhc3M9Im1lbnVTbWFsbFNjcmVlbiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICA8IS0tREVCVVQgZGUgbGEgbmF2aWdhdGlvbiByZXNwb25zaXZlLS0+DQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGlkPSJtZW51LXNtYWxsLWhpZGUiPk1FTlUgPC9hPg0KDQogICAgICAgICAgICAgICAgICAgIDx1bCBpZD0ibWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyI+QWNjdWVpbDwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hldGVyIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij5BY2hldGVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hldGVyIiB0aXRsZT0iVmVudGUgaW1tb2JpbGllciAtIEFjaGF0IGltbW9iaWxpZXIiPnJlY2hlcmNoZXIgdW4gYmllbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvbW1lbnQtYmllbi1hY2hldGVyIiB0aXRsZT0iQ29tbWVudCBiaWVuIGFjaGV0ZXIgc29uIGJpZW4gaW1tb2JpbGllciAiPiBjb21tZW50IGJpZW4gYWNoZXRlcjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3JldXNzaXItYWNoYXQtaW1tb2JpbGllciIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgcsOpdXNzaXIgc29uIGFjaGF0IGltbW9iaWxpZXIgIj5Sw6l1c3NpciBtb24gYWNoYXQgaW1tb2JpbGllcjwvYT48L2xpPiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hldGVyL2ZpbmFuY2VtZW50IiB0aXRsZT0iRmluYW5jZXIgc29uIGJpZW4gaW1tb2JpbGllciI+RmluYW5jZXIgbW9uIGFjaGF0PC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2RlbWVuYWdlbWVudCIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgYmllbiBkw6ltw6luYWdlciAtIFByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQiPlByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVuZHJlIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij5WZW5kcmU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUiIHRpdGxlPSLDiXZhbHVhdGlvbiBldCBlc3RpbWF0aW9uIGltbW9iaWxpw6hyZSBncmF0dWl0ZSBlbiBsaWduZSI+ZXN0aW1hdGlvbiBpbW1vYmlsacOocmU8L2E+PC9saT4gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbWFuZGF0LXZlbnRlLWltbW9iaWxpZXIiIHRpdGxlPSJNYW5kYXQgZGUgdmVudGUgaW1tb2JpbGllciA6IGNlIHF1J2lsIGZhdXQgc2F2b2lyIj5sZSBtYW5kYXQgZGUgdmVudGU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9maXNjYWxpdGUtcGx1cy12YWx1ZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkZpc2NhbGl0w6kgZXQgcGx1cy12YWx1ZSBpbW1vYmlsacOocmUiPkZpc2NhbGl0w6kgZXQgcGx1cy12YWx1ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvbmZpZXItYmllbi1pbW1vYmlsaWVyIiB0aXRsZT0iQ29uZmllei1ub3VzIGxhIHZlbnRlIGRlIHZvdHJlIGJpZW4gaW1tb2JpbGllciI+Q29uZmllciB2b3RyZSBiaWVuPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYmllbi12ZW5kcmUiIHRpdGxlPSJDb21tZW50IGJpZW4gdmVuZHJlIHNvbiBiaWVuIGltbW9iaWxpZXIgIj5Db21tZW50IGJpZW4gdmVuZHJlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVuZHJlLWF2ZWMtc2Fucy1hZ2VudC1pbW1vYmlsaWVyIiB0aXRsZT0iVmVudGUgc2FucyBhZ2VuY2UgaW1tb2JpbGnDqHJlIDogYXZhbnRhZ2VzIGV0IGluY29udsOpbmllbnRzIj5WZW5kcmUgc2FucyBhZ2VuY2U8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9kZW1hcmNoZXMtYWRtaW5pc3RyYXRpdmVzIiB0aXRsZT0iRMOpbWFyY2hlcyBldCBmb3JtYWxpdMOpcyBwb3VyIGFjaGV0ZXIgb3UgdmVuZHJlIHVuIGJpZW4gaW1tb2JpbGllciI+RMOpbWFyY2hlcyBhZG1pbmlzdHJhdGl2ZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9kaWFnbm9zdGljcyIgdGl0bGU9IkRpYWdub3N0aWNzIHRlY2huaXF1ZXMgYXZhbnQgdmVudGUgaW1tb2JpbGnDqHJlIj5MZXMgZGlhZ25vc3RpY3MgdGVjaG5pcXVlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2RlbWVuYWdlbWVudCIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgYmllbiBkw6ltw6luYWdlciAtIFByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQiPlByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbG91ZXItcmVjaGVyY2hlciIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+TG91ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2FpZGVzLWxvY2F0aXZlcyIgdGl0bGU9IkFpZGVzIGxvY2F0aXZlcyAoQVBMLCBBTCwgZ2FyYW50aWUgTG9jYS1QYXNz4oCmKSI+TGVzIGFpZGVzIGxvY2F0aXZlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NoYXJnZXMtbG9jYXRpdmVzIiB0aXRsZT0iQ2hhcmdlcyBsb2NhdGl2ZXMiPkxlcyBjaGFyZ2VzIGRlIGxvY2F0aW9uPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2dlc3Rpb24tbG9jYXRpdmUiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPmZhaXJlIGfDqXJlcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbm9zLXNlcnZpY2VzIiB0aXRsZT0iU2VydmljZXMgZGUgZ2VzdGlvbiBsb2NhdGl2ZSI+Tm9zIHNlcnZpY2VzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdm9zLWFzc3VyYW5jZXMiIHRpdGxlPSJBc3N1cmFuY2VzIGV0IGdhcmFudGllcyBnZXN0aW9uIGxvY2F0aXZlIj5Bc3N1cmFuY2VzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvaW50cmFuZXQtZ2VzdGlvbiIgdGl0bGU9IkVzcGFjZSBpbnRyYW5ldCI+RXNwYWNlIGludHJhbmV0PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+aW52ZXN0aXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ludmVzdGlyLWltbW9iaWxpZXItbG9jYXRpZiIgdGl0bGU9IkludmVzdGlzc2VtZW50IGxvY2F0aWYgLSBJbnZlc3RpciBkYW5zIGwnaW1tb2JpbGllciI+SW52ZXN0aXIgZGFucyA8YnIgLz5sJ2ltbW9iaWxpZXIgbG9jYXRpZjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Rpc3Bvc2l0aWZzLWRlZmlzY2FsaXNhdGlvbiIgdGl0bGU9IkxlcyBkaXNwb3NpdGlmcyBkZSBkw6lmaXNjYWxpc2F0aW9uIGltbW9iaWxpw6hyZSAoTG9pIFBpbmVsLCBQRVJQ4oCmKSI+RGlzcG9zaXRpZnMgPGJyIC8+ZGUgZMOpZmlzY2FsaXNhdGlvbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hZ2VuY2VzLWltbW9iaWxpZXJlcyIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+Tm9zIGFnZW5jZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2FnZW5jZXMtaW1tb2JpbGllcmVzIiB0aXRsZT0iVG91dGVzIGxlcyBhZ2VuY2VzIGR1IHLDqXNlYXUgTGEgUsOpc2lkZW5jZSI+bGlzdGUgZGVzIGFnZW5jZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9xdWktc29tbWVzLW5vdXMiIHRpdGxlPSJQb3VyIG1pZXV4IG5vdXMgY29ubmFpdHJlIj5xdWkgc29tbWVzIG5vdXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbm91cy1yZWpvaW5kcmUiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPk5vdXMgcmVqb2luZHJlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9ub3VzLXJlam9pbmRyZSI+Tm91cyByZWpvaW5kcmU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9yZWNydXRlbWVudCI+UmVjcnV0ZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9jcmVlci1hZmZpbGllci1hZ2VuY2UtaW1tb2JpbGllcmUvIj5DcsOpZXIgb3UgYWZmaWxpZXIgdW5lIGFnZW5jZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLUZJTiBkZSBsYSBuYXZpZ2F0aW9uIHJlc3BvbnNpdmUtLT4NCg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImhlYWRlckhhdXQiIGNsYXNzPSJoZWFkZXJIYXV0IGNmIj4NCg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS0NCiAgICAgICAgICAgICAgICA8ZGl2ICBjbGFzcz0iYnRuTG9nQ3B0ZSBiZ0Jsb2NrIiBpZD0iYnRuTG9nQ3B0ZSI+DQogICAgICAgICAgICAJICAgIDxhIGhyZWY9IiMiIHRpdGxlPSJjb25uZWN0aW9uIMOgIHZvdHJlIGNvbXB0ZSI+DQogICAgICAgICAgICAJCSAgICBNb24gY29tcHRlIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIC0tPg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS1TVEFSVCBSYWNjb3VyY2lzIGNvbXB0ZSArIGFsZXJ0ZXMtLT4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmFjY291cmNpQnRuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9IlBTZWFyY2hTaG9ydGN1dCIgY2xhc3M9ImJ0blNlYXJjaFNob3J0Y3V0MDIgYmdCbG9jayI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQlNlYXJjaFNob3J0Y3V0IiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCU2VhcmNoU2hvcnRjdXQmIzM5OywmIzM5OyYjMzk7KSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0blNlYXJjaFNob3J0Y3V0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4gICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImJ0blNlYXJjaFNob3J0Y3V0MDJfdHh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcm91dmVyIHVuIGJpZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj48IS0tIEB3aGl0ZXNwYWNlDQoNCiAgICAgICAgICAgICAgICAgICAgLS0+PGRpdiBjbGFzcz0iYnRuU2hvcnRDb21wdGUgYmdCbG9jayI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TaG9ydEFsZXJ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbXB0ZS1hbGVydGVzIiB0aXRsZT0iTWVzIGFsZXJ0ZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TaG9ydEZhdm9yaXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29tcHRlLXNlbGVjdGlvbiIgdGl0bGU9Ik1lcyBmYXZvcmlzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuU2hvcnRQaG90b3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29tcHRlLXBob3RvcyIgdGl0bGU9Ik1lcyBwaG90b3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TaG9ydENwdGUiIGlkPSJidG5Mb2dDcHRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9Ik1vbiBjb21wdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS1GSU4gUmFjY291cmNpcyBjb21wdGUgKyBhbGVydGVzLS0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iLyIgdGl0bGU9IlJldmVuaXIgw6AgbCdhY2N1ZWlsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9sb2dvLnN2ZyIgYWx0PSJsb2dvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGhlYWRlciBpZD0iaGVhZGVyQmFzIiBjbGFzcz0iaGVhZGVyQmFzIGJnQmxvY2s0Ij4NCiAgICAgICAgICAgICAgICAgICAgPCEtLURlYnV0IGR1IC5oZWFkZXItLT4NCiAgICAgICAgICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy9TVEFSVCBOQVZJR0FUSU9OIFBSSU5DSVBBTEUvLy8vLy8vLy8vLS0+DQogICAgICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im1lbnVMYXJnZVNjcmVlbiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJydWJyaWsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiB0aXRsZT0iUmV2ZW5pciDDoCBsJ2FjY3VlaWwiPkFjY3VlaWw8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hldGVyIiB0aXRsZT0iYWNoZXRlciB1biBiaWVuIGltbW9iaWxpZXIiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPmFjaGV0ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2FjaGV0ZXIiIHRpdGxlPSJWZW50ZSBpbW1vYmlsaWVyIC0gQWNoYXQgaW1tb2JpbGllciI+cmVjaGVyY2hlciA8YnIgLz51biBiaWVuPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2NvbW1lbnQtYmllbi1hY2hldGVyIiB0aXRsZT0iQ29tbWVudCBiaWVuIGFjaGV0ZXIgc29uIGJpZW4gaW1tb2JpbGllciAiPiAgY29tbWVudCA8YnIgLz5iaWVuIGFjaGV0ZXI8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvcmV1c3Npci1hY2hhdC1pbW1vYmlsaWVyIiB0aXRsZT0iQ29uc2VpbHMgcG91ciByw6l1c3NpciBzb24gYWNoYXQgaW1tb2JpbGllciAiPlLDqXVzc2lyIG1vbjxiciAvPiBhY2hhdCBpbW1vYmlsaWVyPC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9hY2hldGVyL2ZpbmFuY2VtZW50IiB0aXRsZT0iRmluYW5jZXIgc29uIGJpZW4gaW1tb2JpbGllciI+RmluYW5jZXIgPGJyIC8+bW9uIGFjaGF0PC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9kZW1lbmFnZW1lbnQiIHRpdGxlPSJDb25zZWlscyBwb3VyIGJpZW4gZMOpbcOpbmFnZXIgLSBQcsOpcGFyZXIgc29uIGTDqW3DqW5hZ2VtZW50Ij5QcsOpcGFyZXIgc29uPGJyIC8+IGTDqW3DqW5hZ2VtZW50PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAtLT48bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW5kcmUiIHRpdGxlPSJWZW5kcmUgdW4gYmllbiBpbW1vYmlsaWVyIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij52ZW5kcmU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9lc3RpbWF0aW9uLWltbW9iaWxpZXJlIiB0aXRsZT0iw4l2YWx1YXRpb24gZXQgZXN0aW1hdGlvbiBpbW1vYmlsacOocmUgZ3JhdHVpdGUgZW4gbGlnbmUiPmVzdGltYXRpb24gPGJyIC8+aW1tb2JpbGnDqHJlPC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9tYW5kYXQtdmVudGUtaW1tb2JpbGllciIgdGl0bGU9Ik1hbmRhdCBkZSB2ZW50ZSBpbW1vYmlsaWVyIDogY2UgcXUnaWwgZmF1dCBzYXZvaXIiPmxlIG1hbmRhdCA8YnIgLz5kZSB2ZW50ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9maXNjYWxpdGUtcGx1cy12YWx1ZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkZpc2NhbGl0w6kgZXQgcGx1cy12YWx1ZSBpbW1vYmlsacOocmUiPkZpc2NhbGl0w6kgZXQgPGJyIC8+cGx1cy12YWx1ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9jb25maWVyLWJpZW4taW1tb2JpbGllciIgdGl0bGU9IkNvbmZpZXotbm91cyBsYSB2ZW50ZSBkZSB2b3RyZSBiaWVuIGltbW9iaWxpZXIiPkNvbmZpZXIgPGJyIC8+dm90cmUgYmllbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9iaWVuLXZlbmRyZSIgdGl0bGU9IkNvbW1lbnQgYmllbiB2ZW5kcmUgc29uIGJpZW4gaW1tb2JpbGllciAiPkNvbW1lbnQgPGJyIC8+YmllbiB2ZW5kcmU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvdmVuZHJlLWF2ZWMtc2Fucy1hZ2VudC1pbW1vYmlsaWVyIiB0aXRsZT0iVmVudGUgc2FucyBhZ2VuY2UgaW1tb2JpbGnDqHJlIDogYXZhbnRhZ2VzIGV0IGluY29udsOpbmllbnRzIj5WZW5kcmUgPGJyIC8+c2FucyBhZ2VuY2U8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvZGVtYXJjaGVzLWFkbWluaXN0cmF0aXZlcyIgdGl0bGU9IkTDqW1hcmNoZXMgZXQgZm9ybWFsaXTDqXMgcG91ciBhY2hldGVyIG91IHZlbmRyZSB1biBiaWVuIGltbW9iaWxpZXIiPkTDqW1hcmNoZXMgPGJyIC8+YWRtaW5pc3RyYXRpdmVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2RpYWdub3N0aWNzIiB0aXRsZT0iRGlhZ25vc3RpY3MgdGVjaG5pcXVlcyBhdmFudCB2ZW50ZSBpbW1vYmlsacOocmUiPkxlcyBkaWFnbm9zdGljcyA8YnIgLz50ZWNobmlxdWVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2RlbWVuYWdlbWVudCIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgYmllbiBkw6ltw6luYWdlciAtIFByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQiPlByw6lwYXJlciBzb248YnIgLz4gZMOpbcOpbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAtLT48bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9sb3Vlci1yZWNoZXJjaGVyIiB0aXRsZT0iVHJvdXZlciB1biBsb2dlbWVudCDDoCBsb3VlciIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+bG91ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2FpZGVzLWxvY2F0aXZlcyIgdGl0bGU9IkFpZGVzIGxvY2F0aXZlcyAoQVBMLCBBTCwgZ2FyYW50aWUgTG9jYS1QYXNz4oCmKSI+TGVzIGFpZGVzIGxvY2F0aXZlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9jaGFyZ2VzLWxvY2F0aXZlcyIgdGl0bGU9IkNoYXJnZXMgbG9jYXRpdmVzIj5MZXMgY2hhcmdlcyBkZSBsb2NhdGlvbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IkZhaXRlcyBnw6lyZXIgdm90cmUgYmllbiIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+ZmFpcmUgZ8OpcmVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InNvdXNSdWJyaWsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9ub3Mtc2VydmljZXMiIHRpdGxlPSJTZXJ2aWNlcyBkZSBnZXN0aW9uIGxvY2F0aXZlIj5Ob3Mgc2VydmljZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvdm9zLWFzc3VyYW5jZXMiIHRpdGxlPSJBc3N1cmFuY2VzIGV0IGdhcmFudGllcyBnZXN0aW9uIGxvY2F0aXZlIj5Bc3N1cmFuY2VzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2ludHJhbmV0LWdlc3Rpb24iIHRpdGxlPSJFc3BhY2UgaW50cmFuZXQiPkVzcGFjZSBpbnRyYW5ldDwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgICAgICAgICAgLS0+PGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0aXRsZT0iSW52ZXN0aXIgZGFucyBsJ2ltbW9iaWxpZXIiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPmludmVzdGlyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InNvdXNSdWJyaWsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9pbnZlc3Rpci1pbW1vYmlsaWVyLWxvY2F0aWYiIHRpdGxlPSJJbnZlc3Rpc3NlbWVudCBsb2NhdGlmIC0gSW52ZXN0aXIgZGFucyBsJ2ltbW9iaWxpZXIiPkludmVzdGlyIGRhbnMgPGJyIC8+bCdpbW1vYmlsaWVyIGxvY2F0aWY8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvZGlzcG9zaXRpZnMtZGVmaXNjYWxpc2F0aW9uIiB0aXRsZT0iTGVzIGRpc3Bvc2l0aWZzIGRlIGTDqWZpc2NhbGlzYXRpb24gaW1tb2JpbGnDqHJlIChMb2kgUGluZWwsIFBFUlDigKYpIj5EaXNwb3NpdGlmcyA8YnIgLz5kZSBkw6lmaXNjYWxpc2F0aW9uPC9hPjwvbGk+ICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48IS0tIEB3aGl0ZXNwYWNlICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IlZvdHJlIGNhcnJpw6hyZSBhdSBzZWluIGR1IHLDqXNlYXUiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPkxlIHLDqXNlYXU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL25vdXMtcmVqb2luZHJlIiB0aXRsZT0iUmVqb2luZHJlIGxlIHLDqXNlYXUiPk5vdXMgcmVqb2luZHJlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL3JlY3J1dGVtZW50IiB0aXRsZT0iVHJvdXZlciB1biBlbXBsb2kgZGFucyB1bmUgZGUgbm9zIGFnZW5jZXMiPnJlY3J1dGVtZW50PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2NyZWVyLWFmZmlsaWVyLWFnZW5jZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkNyw6llciB1bmUgYWdlbmNlIExhIFLDqXNpZGVuY2UiPmNyw6llciBvdSBhZmZpbGllciB1bmUgYWdlbmNlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48IS0tIEB3aGl0ZXNwYWNlIA0KICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IlRyb3V2ZXIgdW5lIGFnZW5jZSBMYSBSw6lzaWRlbmNlIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij5ub3MgYWdlbmNlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzb3VzUnVicmlrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvYWdlbmNlcy1pbW1vYmlsaWVyZXMiIHRpdGxlPSJUb3V0ZXMgbGVzIGFnZW5jZXMgZHUgcsOpc2VhdSBMYSBSw6lzaWRlbmNlIj5saXN0ZSBkZXMgYWdlbmNlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9xdWktc29tbWVzLW5vdXMiIHRpdGxlPSJQb3VyIG1pZXV4IG5vdXMgY29ubmFpdHJlIj5xdWkgc29tbWVzIG5vdXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0vLy8vLy8vLy8vRklOIE5BVklHQVRJT04gUFJJTkNJUEFMRS8vLy8vLy8vLy8vLS0+DQogICAgICAgICAgICAgICAgPC9oZWFkZXI+DQogICAgICAgICAgICAgICAgPCEtLUZpbiBkdSAuaGVhZGVyLS0+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJVUExvZ0NwdGUiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImRpdkxvZ0NwdGUiIGNsYXNzPSJkaXZMb2dDcHRlX2Nsb3NlZCIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iUFVzZXJOb3RMb2dnZWQiIGNsYXNzPSJmb3JtTG9nQ3B0ZSBiZ0Jsb2NrIj4NCgkJCQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImgzX3N0eWxlIj5TRSBDT05ORUNURVI8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW50cmV6IHZvcyBpZGVudGlmaWFudHMgZGUgY29ubmVjdGlvbiBwb3VyIGFjY8OpZGVyIMOgIHZvdHJlIGVzcGFjZSBwZXJzb25uZWw8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0iPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZW1haWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRUQlVzZXJOYW1lIiB0eXBlPSJlbWFpbCIgaWQ9IlRCVXNlck5hbWUiIHBsYWNlaG9sZGVyPSJFbWFpbCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGFzc3dvcmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRUQlVzZXJQYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiIGlkPSJUQlVzZXJQYXNzd29yZCIgcGxhY2Vob2xkZXI9Ik1vdCBkZSBwYXNzZSIgY2xhc3M9ImZlZWRiYWNrLWlucHV0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iQ0JSZW1lbWJlck1lIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkQ0JSZW1lbWJlck1lIiBjaGVja2VkPSJjaGVja2VkIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IkNCUmVtZW1iZXJNZSI+PHNwYW4+PC9zcGFuPlNlIHNvdXZlbmlyIGRlIG1vaTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IkxCTW90RGVQYXNzZU91YmxpZSIgdGl0bGU9IlLDqWN1cMOpcmVyIHZvdHJlIG1vdCBkZSBwYXNzZSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRMQk1vdERlUGFzc2VPdWJsaWUmIzM5OywmIzM5OyYjMzk7KSI+TW90IGRlIHBhc3NlIG91Ymxpw6kgPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQkNyZWVyQ29tcHRlIiB0aXRsZT0iQ3LDqWVyIHVuIG5vdXZlYXUgY29tcHRlIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCQ3JlZXJDb21wdGUmIzM5OywmIzM5OyYjMzk7KSI+Q3LDqWVyIHVuIGNvbXB0ZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VibWl0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRCVXNlckxvZyIgdmFsdWU9IlNFIENPTk5FQ1RFUiIgb25jbGljaz0iamF2YXNjcmlwdDpXZWJGb3JtX0RvUG9zdEJhY2tXaXRoT3B0aW9ucyhuZXcgV2ViRm9ybV9Qb3N0QmFja09wdGlvbnMoJnF1b3Q7Y3RsMDAkQlVzZXJMb2cmcXVvdDssICZxdW90OyZxdW90OywgdHJ1ZSwgJnF1b3Q7TG9naW5Hcm91cCZxdW90OywgJnF1b3Q7JnF1b3Q7LCBmYWxzZSwgZmFsc2UpKSIgaWQ9IkJVc2VyTG9nIiBjbGFzcz0ic20tbG9naW4tYnV0dG9uIiB0eXBlPSJzdWJtaXQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNmIj48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQk8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCg0KICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgDQoNCiAgICAgICAgICAgIDxkaXYgaWQ9ImRpdlNlYXJjaFNob3J0Y3V0IiBjbGFzcz0iZGl2U2VhcmNoU2hvcnRjdXRfY2xvc2VkIGJnQmxvY2siIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KDQo8IS0tIFNUQVJUIFNFQVJDSCBBQ0hBVC0tPg0KPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUE1haW4iIGNsYXNzPSJzZWFyY2gwMiI+DQoJDQogICAgDQogICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfSDJUaXRsZSIgY2xhc3M9ImgyX3N0eWxlIj5SZWNoZXJjaGVyIHVuIGJpZW48L2Rpdj4NCiAgICAgICAgICAgIA0KICAgICANCiAgICA8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9QU2VhcmNoQmFyUmVmIiBjbGFzcz0ic2VhcmNoQmFyUmVmIj4NCgkJDQogICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRBdXRvQ29tcGxldGVSZWYkVEJBdXRvQ29tcGxldGUiIHR5cGU9InRleHQiIGF1dG9jb21wbGV0ZT0ib2ZmIiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlIiBjbGFzcz0ic2VhcmNoQmFyUmVmVHh0IiBwbGFjZWhvbGRlcj0iRW50cmV6IHVuZSByw6lmw6lyZW5jZSBvdSB1biBudW3DqXJvIGRlIG1hbmRhdCIgLz4NCjxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRBdXRvQ29tcGxldGVSZWYkVEJWYWx1ZSIgdHlwZT0idGV4dCIgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQlZhbHVlIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIC8+DQo8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9BdXRvQ29tcGxldGVSZWZfUmVzdWx0c0RpdiIgY2xhc3M9ImJhcnJlUmVjaGVyY2hlUmVmUmVzdWx0c0RpdiI+PC9kaXY+DQoNCg0KICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRCTGF1bmNoUmVmU2VhcmNoIiB2YWx1ZT0iIiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQkxhdW5jaFJlZlNlYXJjaCIgY2xhc3M9InNlYXJjaEJhclJlZkJ0biIgLz4NCiAgICANCgk8L2Rpdj4gICAgICAgICAgICANCiAgICA8cCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfcFN1YlRpdGxlIj5OZSByZW1wbGlzc2V6IHF1ZSBsZXMgY2hhbXBzIHF1aSB2b3VzIGludGVyZXNzZW50PC9wPg0KDQogICAgPGRpdiBjbGFzcz0ic2VhcmNoQ3JpdGVyZXMwMiI+DQoNCiAgICAgICAgPCEtLTxkaXYgY2xhc3M9ImJvdXRvblJhZGlvMDIiPg0KICAgICAgICAgICAgPGEgaHJlZj0iIyI+QWNoZXRlcjwvYT4NCiAgICAgICAgPC9kaXY+LS0+DQoNCiAgICAgICAgPHNwYW4gaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1JCTFR5cGVTZWFyY2giIGNsYXNzPSJzZWFyY2gtdHlwZS1yYWRpb3MiPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJMVHlwZVNlYXJjaF8wIiB0eXBlPSJyYWRpbyIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkUkJMVHlwZVNlYXJjaCIgdmFsdWU9IkJhYyIgY2hlY2tlZD0iY2hlY2tlZCIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQkxUeXBlU2VhcmNoXzAiPkFDSEFUPC9sYWJlbD48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1JCTFR5cGVTZWFyY2hfMSIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCTFR5cGVTZWFyY2giIHZhbHVlPSJMb2MiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJMVHlwZVNlYXJjaF8xIj5MT0NBVElPTjwvbGFiZWw+PC9zcGFuPg0KICAgICAgICA8YnIgLz4NCiAgICAgICAgPGJyIC8+DQoNCiAgICAgICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX01haW5EaXYiIHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTsiIGNsYXNzPSJtdWx0aS1zZWxlY3QtZHJvcGRvd24iPg0KICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkVEJJbnB1dCIgdHlwZT0idGV4dCIgYXV0b2NvbXBsZXRlPSJvZmYiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfVEJJbnB1dCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0MiIgcGxhY2Vob2xkZXI9IlR5cGUgZGUgYmllbiIgLz4NCiAgICA8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfVmFsdWVzRGl2IiBjbGFzcz0idmFsdWVzLWRpdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsgcG9zaXRpb246YWJzb2x1dGU7IGJhY2tncm91bmQtY29sb3I6d2hpdGU7IHotaW5kZXg6OTk5OTsiPg0KICAgICAgICA8YnIgLz4NCiAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpibG9jazsgdGV4dC1hbGlnbjpyaWdodDsiPg0KICAgICAgICAgICAgPGEgaHJlZj0iIyI+VmFsaWRlcjwvYT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxzcGFuIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjp3aGl0ZTsiPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18wIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkTVNERFR5cGVzJENCTFZhbHVlcyQwIiB2YWx1ZT0iMjAiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18wIj5NYWlzb248L2xhYmVsPjxiciAvPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18xIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkTVNERFR5cGVzJENCTFZhbHVlcyQxIiB2YWx1ZT0iMSIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzEiPkFwcGFydGVtZW50PC9sYWJlbD48YnIgLz48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfMiIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1TRERUeXBlcyRDQkxWYWx1ZXMkMiIgdmFsdWU9IjMiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18yIj5UZXJyYWluPC9sYWJlbD48YnIgLz48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfMyIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1TRERUeXBlcyRDQkxWYWx1ZXMkMyIgdmFsdWU9IjUiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18zIj5Db21tZXJjZTwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzQiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDQiIHZhbHVlPSIxNCIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzQiPkltbWV1YmxlPC9sYWJlbD48YnIgLz48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfNSIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1TRERUeXBlcyRDQkxWYWx1ZXMkNSIgdmFsdWU9IjMwIiAvPjxsYWJlbCBmb3I9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfNSI+UGFya2luZzwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzYiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDYiIHZhbHVlPSIzMiIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzYiPkJ1cmVhdTwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzciIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDciIHZhbHVlPSIzMSIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzciPkJveDwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzgiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDgiIHZhbHVlPSIxMSIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzgiPlZpYWdlcjwvbGFiZWw+PC9zcGFuPg0KICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OmJsb2NrOyB0ZXh0LWFsaWduOnJpZ2h0OyI+DQogICAgICAgICAgICA8YSBocmVmPSIjIj5WYWxpZGVyPC9hPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4gICAgDQo8L2Rpdj4NCiAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICA8aW5wdXQgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkVEJQcml4TWluIiB0eXBlPSJ0ZXh0IiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfVEJQcml4TWluIiBjbGFzcz0iZmVlZGJhY2staW5wdXQyIG1hcmdpblRvcDYiIHBsYWNlaG9sZGVyPSJQcml4IE1pbiDigqwiIC8+PCEtLSBAd2hpdGVzcGFjZQ0KDQogICAgICAgIC0tPjxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRUQlByaXhNYXgiIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlByaXhNYXgiIGNsYXNzPSJmZWVkYmFjay1pbnB1dDIiIHBsYWNlaG9sZGVyPSJQcml4IE1heCDigqwiIC8+DQoNCiAgICAgICAgPGlucHV0IG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFRCTmJQaWVjZXNNaW4iIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQk5iUGllY2VzTWluIiBjbGFzcz0iZmVlZGJhY2staW5wdXQyIG1hcmdpblRvcDYiIHBsYWNlaG9sZGVyPSJQacOoY2VzIE1pbiIgLz48IS0tIEB3aGl0ZXNwYWNlDQoNCiAgICAgICAgLS0+PGlucHV0IG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFRCTmJQaWVjZXNNYXgiIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQk5iUGllY2VzTWF4IiBjbGFzcz0iZmVlZGJhY2staW5wdXQyICIgcGxhY2Vob2xkZXI9IlBpw6hjZXMgTWF4IiAvPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICA8aW5wdXQgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkVEJOYkNoYW1icmVzTWluIiB0eXBlPSJ0ZXh0IiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfVEJOYkNoYW1icmVzTWluIiBjbGFzcz0iZmVlZGJhY2staW5wdXQyIG1hcmdpblRvcDYiIHBsYWNlaG9sZGVyPSJDaGFtYnJlcyBNaW4iIC8+PCEtLSBAd2hpdGVzcGFjZQ0KDQogICAgICAgIC0tPjxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRUQk5iQ2hhbWJyZXNNYXgiIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQk5iQ2hhbWJyZXNNYXgiIGNsYXNzPSJmZWVkYmFjay1pbnB1dDIgIiBwbGFjZWhvbGRlcj0iQ2hhbWJyZXMgTWF4IiAvPg0KDQogICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRUQlN1cmZhY2VNaW4iIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlN1cmZhY2VNaW4iIGNsYXNzPSJmZWVkYmFjay1pbnB1dDIgbWFyZ2luVG9wNiIgcGxhY2Vob2xkZXI9IlN1cmYuIE1pbiBtMiIgLz48IS0tIEB3aGl0ZXNwYWNlDQoNCiAgICAgICAgLS0+PGlucHV0IG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFRCU3VyZmFjZU1heCIgdHlwZT0idGV4dCIgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCU3VyZmFjZU1heCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0MiAiIHBsYWNlaG9sZGVyPSJTdXJmLiBNYXggbTIiIC8+DQogICAgICAgIA0KICAgIDwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCg0KCS0tPjxkaXYgY2xhc3M9InNlYXJjaENyaXRlcmVzMDIiPg0KICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgICAgIDxkaXYgY2xhc3M9Im1hcmdpbkJvdHRvbTMiPg0KICAgICAgICAgICAgDQoNCg0KPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCiAgICANCiAgICBtdnRiX2lucHV0IHsNCiAgICAgICAgY29sb3I6IzY2NjsNCgkgICAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjsNCgkgICAgZm9udC13ZWlnaHQ6MzAwOw0KCSAgICBmb250LXNpemU6IDAuOWVtOw0KCSAgICBsaW5lLWhlaWdodDogMWVtOw0KICAgICAgICAgICAgdmVydGljYWwtYWxpZ246dGV4dC10b3A7DQoJICAgIGJhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjcpOw0KCSAgICBwYWRkaW5nOiAycHg7DQoJICAgIHdpZHRoOjEwMCU7DQogICAgICAgIGhlaWdodDo0MHB4Ow0KCSAgICBib3JkZXI6MXB4IHNvbGlkICM2NjY7DQoJICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuM3M7DQoJICAgIC1tb3otdHJhbnNpdGlvbjogYWxsIDAuM3M7DQoJICAgIC1vLXRyYW5zaXRpb246IGFsbCAwLjNzOw0KCSAgICAtbXMtdHJhbnNpdGlvbjogYWxsIDAuM3M7DQoJICAgIHRyYW5zaXRpb246IGFsbCAwLjNzOw0KCSAgICBkaXNwbGF5OmlubGluZS1ibG9jazsNCiAgICAgICAgIHdoaXRlLXNwYWNlOm5vd3JhcDsNCiAgICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsNCiAgICAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lOw0KICAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAwcHggMHB4IHJnYmEoMCwwLDAsMCkgLyogbMOpZ8OocmUgb21icmUgaW50ZXJuZSAqLw0KICAgIH0NCiAgICBtdnRiX2lucHV0OmZvY3Vzew0KICAgICAgIA0KCSAgICBib3JkZXI6MXB4IHNvbGlkICM2NjY7DQoJICAgDQogICAgfQ0KDQo8L3N0eWxlPg0KDQo8aW5wdXQgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkTVZUQlZpbGxlcyRUQkF1dG9Db21wbGV0ZSIgdHlwZT0idGV4dCIgYXV0b2NvbXBsZXRlPSJvZmYiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NVlRCVmlsbGVzX1RCQXV0b0NvbXBsZXRlIiBjbGFzcz0ibXZ0Yl9pbnB1dCIgYXV0b2NvbXBsZXRlPSJPZmYiIHBsYWNlaG9sZGVyPSJWaWxsZSBvdSBDUCIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1WVEJWaWxsZXMkVEJWYWx1ZSIgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJWYWx1ZSIgLz4NCg0KICAgICAgICA8L2Rpdj4gDQogICAgICAgIA0KICAgICAgICA8ZGl2IGNsYXNzPSJuYlBpZWNlQnRuMDIgbWFyZ2luVG9wMiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+w4lsYXJnaXIgbGEgcmVjaGVyY2hlIChlbiBrbSk8L2Rpdj4NCiAgICAgICAgICAgIDxzcGFuIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQlBlcmltZXRyZSIgY2xhc3M9ImJvdXRvblJhZGlvTmJQaWVjZXMwMiI+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQlBlcmltZXRyZV8wIiB0eXBlPSJyYWRpbyIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkUkJQZXJpbWV0cmUiIHZhbHVlPSIiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMCI+LTwvbGFiZWw+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQlBlcmltZXRyZV8xIiB0eXBlPSJyYWRpbyIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkUkJQZXJpbWV0cmUiIHZhbHVlPSI1IiAvPjxsYWJlbCBmb3I9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1JCUGVyaW1ldHJlXzEiPjU8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMiIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMTAiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMiI+MTA8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMyIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMTUiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMyI+MTU8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNCIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMjAiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNCI+MjA8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNSIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMjUiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNSI+MjUrPC9sYWJlbD48L3NwYW4+DQogICAgICAgIDwvZGl2PiAgICAgICAgDQogICAgICAgIA0KICAgICAgICA8ZGl2IGNsYXNzPSJtYXJnaW5Ub3AyIj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQ0JWZW50ZXNQcml2ZWVzIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkQ0JWZW50ZXNQcml2ZWVzIiAvPg0KICAgICAgICAgICAgPGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQ0JWZW50ZXNQcml2ZWVzIj48c3Bhbj48L3NwYW4+VlAvZXhjbHVzaXZpdMOpcyB1bmlxdWVtZW50PC9sYWJlbD4NCiAgICAgICAgPC9kaXY+IA0KDQogICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgPC9kaXY+PCEtLSBAd2hpdGVzcGFjZQ0KDQoNCiAgICAtLT48ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9QQnV0dG9uIiBjbGFzcz0iYnRuU2VhcmNoMDIiPg0KCQkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUENyZWF0ZUFsZXJ0ZSIgY2xhc3M9ImJ0bkFsZXJ0ZU1haWwwMiI+DQoJCQkNCiAgICAgICAgICAgIDxhIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9MQkFsZXJ0ZU1haWwiIGNsYXNzPSJiZ0Jsb2NrM2IiIHRpdGxlPSJjcsOpZXIgdW5lIGFsZXJ0ZSBtYWlsIG91IHNtcyIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRMQkFsZXJ0ZU1haWwmIzM5OywmIzM5OyYjMzk7KSI+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5BbGVydGVNYWlsVHh0MDIiPkNyw6llciA8YnIgLz51bmUgYWxlcnRlIDxiciAvPm1haWwgb3Ugc21zPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2FsZXJ0TWFpbFBpY3Quc3ZnIiBhbHQ9ImNyw6llciB1bmUgYWxlcnRlIG1haWwgb3Ugc21zIiAvPiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvYT4NCiAgICAgICAgDQoJCTwvZGl2Pg0KICAgICAgICANCiAgICAgICAgPGRpdiBjbGFzcz0iYnRuU2F2ZUNyaXRlcmVzMDIiIHN0eWxlPSJ2aXNpYmlsaXR5OmhpZGRlbjsiPg0KICAgICAgICAgICAgPGEgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0xCU2F1dmVnYXJkZUNyaXRlcmVzIiBjbGFzcz0iYmdCbG9jazNiIiB0aXRsZT0ic2F1dmVnYXJkZXIgdm9zIGNyaXRlcmVzIGRlIHJlY2hlcmNoZSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRMQlNhdXZlZ2FyZGVDcml0ZXJlcyYjMzk7LCYjMzk7JiMzOTspIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuU2F2ZUNyaXRlcmVzVHh0MDIiPlNhdXZlZ2FyZGVyIDxiciAvPnZvcyBjcml0w6hyZXMgPGJyIC8+ZGUgcmVjaGVyY2hlPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL3NhdmVTZWFyY2hQaWN0LnN2ZyIgYWx0PSJzYXV2ZWdhcmRlciB2b3MgY3JpdGVyZSBkZSByZWNoZXJjaGUiIC8+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUFNlYXJjaCIgY2xhc3M9ImJ0blZhbGlkU2VhcmNoMDIiPg0KCQkJDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9VUFNlYXJjaCI+DQoJCQkJDQogICAgICAgICAgICAgICAgICAgIDxhIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9MQlNlYXJjaCIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRMQlNlYXJjaCYjMzk7LCYjMzk7JiMzOTspIj5UUk9VVkVSPC9hPg0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+ICAgICAgICAgICAgDQogICAgICAgIA0KCQk8L2Rpdj4NCiAgICANCgk8L2Rpdj4gICAgDQoNCg0KPC9kaXY+DQogICAgICAgIA0KPCEtLUVORCBTRUFSQ0ggQUNIQVQtLT4NCg0KIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICBTeXMuV2ViRm9ybXMuUGFnZVJlcXVlc3RNYW5hZ2VyLmdldEluc3RhbmNlKCkuYWRkX3BhZ2VMb2FkZWQoR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfcGFnZUxvYWRlZEhhbmRsZXIpOw0KDQogICAgIGZ1bmN0aW9uIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX3BhZ2VMb2FkZWRIYW5kbGVyKHNlbmRlciwgYXJncykgew0KDQogICAgICAgICAgICB2YXIgc3VyZmFjZU1pbl9pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlN1cmZhY2VNaW4nKTsNCiAgICAgICAgICAgIHZhciBzdXJmYWNlTWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCU3VyZmFjZU1heCcpOw0KDQogICAgICAgICAgICB2YXIgcHJpeE1pbl9pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlByaXhNaW4nKTsNCiAgICAgICAgICAgIHZhciBwcml4TWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCUHJpeE1heCcpOw0KDQogICAgICAgICAgICB2YXIgbmJwaWVjZXNNaW5faW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfVEJOYlBpZWNlc01pbicpOw0KICAgICAgICAgICAgdmFyIG5icGllY2VzTWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCTmJQaWVjZXNNYXgnKTsNCg0KICAgICAgICAgICAgdmFyIG5iY2hicmVzTWluX2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCTmJDaGFtYnJlc01pbicpOw0KICAgICAgICAgICAgdmFyIG5iY2hicmVzTWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCTmJDaGFtYnJlc01heCcpOw0KDQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KHN1cmZhY2VNaW5faW5wdXQsICIgbcKyIG1pbiIsIGZhbHNlKTsNCiAgICAgICAgICAgIEluaXROdW1lcmljSW5wdXQoc3VyZmFjZU1heF9pbnB1dCwgIiBtwrIgbWF4IiwgZmFsc2UpOw0KICAgICAgICAgICAgSW5pdE51bWVyaWNJbnB1dChwcml4TWluX2lucHV0LCAiIOKCrCBtaW4iLCBmYWxzZSk7DQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KHByaXhNYXhfaW5wdXQsICIg4oKsIG1heCIsIGZhbHNlKTsNCiAgICAgICAgICAgIEluaXROdW1lcmljSW5wdXQobmJwaWVjZXNNaW5faW5wdXQsICIgcGnDqGNlcyBtaW4iLCBmYWxzZSk7DQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KG5icGllY2VzTWF4X2lucHV0LCAiIHBpw6hjZXMgbWF4IiwgZmFsc2UpOw0KICAgICAgICAgICAgSW5pdE51bWVyaWNJbnB1dChuYmNoYnJlc01pbl9pbnB1dCwgIiBjaGFtYnJlcyBtaW4iLCBmYWxzZSk7DQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KG5iY2hicmVzTWF4X2lucHV0LCAiIGNoYW1icmVzIG1heCIsIGZhbHNlKTsNCg0KICAgICAgICB9Ow0KICAgICAgICAgIA0KICAgIDwvc2NyaXB0Pg0KDQoNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vU1RBUlQgQ29udGVudSBkeW5hbWlxdWUgZGUgbGEgcGFnZS0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIGJvZHktY29udGVudCI+DQoNCiAgICAgICAgICAgICAgICA8IS0tLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9EZWJ1dCBkdSAubWFpbi0tPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4gY2YiIGlkPSJtYWluIiByb2xlPSJtYWluIj4NCg0KICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvanF1ZXJ5LTMuMS4xLm1pbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjEyLjEubWluLmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgICAgIA0KDQogICAgDQogICAgICAgIA0KICAgIDxkaXYgaWQ9ImZiLXJvb3QiPjwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgKGZ1bmN0aW9uIChkLCBzLCBpZCkgew0KICAgICAgICAgICAgdmFyIGpzLCBmanMgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdOw0KICAgICAgICAgICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSByZXR1cm47DQogICAgICAgICAgICBqcyA9IGQuY3JlYXRlRWxlbWVudChzKTsganMuaWQgPSBpZDsNCiAgICAgICAgICAgIGpzLnNyYyA9ICIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2ZyX0ZSL3Nkay5qcyN4ZmJtbD0xJnZlcnNpb249djIuNCI7DQogICAgICAgICAgICBmanMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIGZqcyk7DQogICAgICAgIH0oZG9jdW1lbnQsICdzY3JpcHQnLCAnZmFjZWJvb2stanNzZGsnKSk7DQoNCiAgICA8L3NjcmlwdD4NCiAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRkNvZGVBZ2VuY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfSEZDb2RlQWdlbmNlIiB2YWx1ZT0iNjEiIC8+DQogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkSEZDb2RlVmlsbGUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfSEZDb2RlVmlsbGUiIHZhbHVlPSIyMTc1OSIgLz4NCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRlBob3Rvc0ZpbHRlclN0cmluZyIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9IRlBob3Rvc0ZpbHRlclN0cmluZyIgdmFsdWU9InBob3Rvc3ludGg9MCBBTkQgQ29kZV9Qcm9kdWl0PTg0MzE4OSIgLz4NCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRlJlZlByb2R1aXQiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfSEZSZWZQcm9kdWl0IiB2YWx1ZT0iMTAwMDE0MTA4NiIgLz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFyaWFuZSI+DQogICAgICAgICAgICAgICAgPCEtLXN0YXJ0IEZJTCBBUklBTk5FLS0+DQogICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyIgdGl0bGU9InJldmVuaXIgw6AgbCdhY2N1ZWlsIGR1IHNpdGUgTGEgUsOpc2lkZW5jZSI+QWNjdWVpbDwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxsaSBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpQWNoZXRlciI+PGEgaHJlZj0iL2FjaGV0ZXIiIHRpdGxlPSJhY2hldGVyIHVuIGJpZW4iPkFjaGV0ZXI8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8bGk+RmljaGUgZGVzY3JpcHRpdmUgZHUgYmllbjwvbGk+DQoNCiAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8IS0tZmluIEZJTCBBUklBTk5FLS0+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpY2hlQWZmYWlyZVdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDwhLS1zdGFydCBmaWNoZUFmZmFpcmVXcmFwcGVyLS0+DQoNCiAgICAgICAgICAgICAgICA8aDE+w4AgUGFyaXMgMTnDqG1lIDxici8+IMOAIHZlbmRyZSBhcHBhcnRlbWVudCAzIHBpw6hjZXM8L2gxPg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9VcGRhdGVQYW5lbDIiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYm91dG9uUmV0b3VyUHJpbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImJhcmVtZTIgYmdCbG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Jy9iYXJlbWUtYWdlbmNlLXBhcmlzLTE5Jz5CYXLDqm1lIGQnaG9ub3JhaXJlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHJpbnQgYmdCbG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScjJyBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjxzcGFuPjwvc3Bhbj5JbXByaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibW9kaWZTZWFyY2ggYmdCbG9jazIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xCTW9kaWZ5U2VhcmNoIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRMQk1vZGlmeVNlYXJjaCYjMzk7LCYjMzk7JiMzOTspIj48c3Bhbj48L3NwYW4+TW9kaWZpZXIgbGEgcmVjaGVyY2hlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogDQogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICANCjwvZGl2PiAgDQogICAgICAgICAgICAgICANCiAgICAgICAgDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlIHBhZ2VUeHQgYmdCbG9jayIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSI+Tm91dmVhdXTDqSAhPC9kaXY+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InR4dDMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ2xpcXVleiBzdXIgPGltZyBzcmM9Ii9pbWFnZXMvcGljdG9Db2V1ci5zdmciIC8+IHBvdXIgYWpvdXRlciDDoCAiTWVzIHBob3RvcyIuIERlcyBiaWVucyBlbiBhY2NvcmQgYXZlYyB2b3MgcHLDqWbDqXJlbmNlcyB2aXN1ZWxsZXMgdm91cyBzZXJvbnQgc3VnZ8OpcsOpcyAhDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0icmFjY291cmNpU2VjdGlvbkZpY2hlUHJvZHVpdCBzZWN0aW9uQWdlbmNlTWFyZ2luVG9wNDgiPjwhLS0gRGVidXQgc2VjdGlvbkFnZW5jZSAwMiAtLT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYmdCbG9jayI+PGEgaHJlZj0iI3Bob3Rvc19hbmNob3IiPlBob3RvczwvYT48L3RkPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAtLT48dGQgY2xhc3M9ImJnQmxvY2siPjxhIGhyZWY9IiNtZWRpYXNfYW5jaG9yIj5NZWRpYXM8L2E+PC90ZD48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgLS0+PHRkIGNsYXNzPSJiZ0Jsb2NrIj48YSBocmVmPSIjZGVzY3JpcHRpZl9hbmNob3IiPkRlc2NyaXB0aWY8L2E+PC90ZD48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgLS0+PHRkIGNsYXNzPSJiZ0Jsb2NrIj48YSBocmVmPSIjY29udGFjdF9hbmNob3IiPkwnYWdlbmNlPC9hPjwvdGQ+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgIC0tPjx0ZCBjbGFzcz0iYmdCbG9jayI+PGEgaHJlZj0iI2xvY2FsaXNhdGlvbl9hbmNob3IiPkxvY2FsaXNhdGlvbjwvYT48L3RkPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAtLT48dGQgY2xhc3M9ImJnQmxvY2siPjxhIGhyZWY9IiNzdWdnZXN0aW9uX2FuY2hvciI+U3VnZ2VzdGlvbnM8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQoNCg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlIGJnQmxvY2siPg0KICAgICAgICAgICAgICAgICAgICA8IS0tc3RhcnQgZmljaGVBZmZhaXJlICsgQmdCbG9jay0tPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlTGVmdFNpZGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iVGV4dFB1YkFmZmFpcmUiPiAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICA8aDI+QXBwYXJ0ZW1lbnQgNTJtMiAtIDQ2OMKgMDAwIOKCrCogIC0gIFLDqWYuIDIzNDA8L2gyPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGVyRmljaGVBZmZhaXJlIiBpZD0icGhvdG9zX2FuY2hvciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS1zdGFydCBzbGlkZXJGaWNoZUFmZmFpcmUtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlckNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1jb250YWluZXIzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci13cmFwcGVyMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfUFBob3RvXzAiIGNsYXNzPSJzd2lwZXItc2xpZGUzIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9VUExpa2VQaG90b18wIj4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwwMCRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fMCIgY2xhc3M9InBpY3RvLWFqb3V0ZXItcGhvdG8iIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Bob3RvLXZydmlldy5hc3B4P1JlZj00ZDRlZGM2YS1jZThmLTQ2YTAtYWMwYy0zOTg2MGMxYWZkYzIiIGNsYXNzPSJmYW5jeWJveCBmYW5jeWJveC5pZnJhbWUiIGRhdGEtZmFuY3lib3g9IlBob3RvcyIgZGF0YS1jYXB0aW9uPSIiIGRhdGEtZmFuY3lib3gtdHlwZT0iaWZyYW1lIiBkYXRhLWZhbmN5Ym94LWhyZWY9InBob3RvLXZydmlldy5hc3B4P1JlZj00ZDRlZGM2YS1jZThmLTQ2YTAtYWMwYy0zOTg2MGMxYWZkYzIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDEwODYvNGQ0ZWRjNmEtY2U4Zi00NmEwLWFjMGMtMzk4NjBjMWFmZGMyLmpwZyIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9pbWFnZV9wcm9kdWl0XzAiIGRhdGEtZGVsYXk9IjUwMDAiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSYjMzk7SW1hZ2VzL3Bob3RvTWFucXVlLmpwZyYjMzk7OyIgc3R5bGU9Im9iamVjdC1maXQ6Y29udGFpbjsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9QUGhvdG9fMSIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzEiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JFBob3Rvc1JlcGVhdGVyJGN0bDAxJEJMaWtlUGhvdG8iIHZhbHVlPSIiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfQkxpa2VQaG90b18xIiBjbGFzcz0icGljdG8tYWpvdXRlci1waG90byIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGhvdG8tdnJ2aWV3LmFzcHg/UmVmPWQ1ZTY1NWU0LWQ2YjctNGM2NS05ZGZhLTMzMWI4OGNhMDQ1NiIgY2xhc3M9ImZhbmN5Ym94IGZhbmN5Ym94LmlmcmFtZSIgZGF0YS1mYW5jeWJveD0iUGhvdG9zIiBkYXRhLWNhcHRpb249IiIgZGF0YS1mYW5jeWJveC10eXBlPSJpZnJhbWUiIGRhdGEtZmFuY3lib3gtaHJlZj0icGhvdG8tdnJ2aWV3LmFzcHg/UmVmPWQ1ZTY1NWU0LWQ2YjctNGM2NS05ZGZhLTMzMWI4OGNhMDQ1NiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDE0MTA4Ni9kNWU2NTVlNC1kNmI3LTRjNjUtOWRmYS0zMzFiODhjYTA0NTYuanBnIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX2ltYWdlX3Byb2R1aXRfMSIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b18yIiBjbGFzcz0ic3dpcGVyLXNsaWRlMyI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfVVBMaWtlUGhvdG9fMiI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkUGhvdG9zUmVwZWF0ZXIkY3RsMDIkQkxpa2VQaG90byIgdmFsdWU9IiIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9CTGlrZVBob3RvXzIiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9OTYyYjNmZTgtMTg3Zi00MjhhLThhMTctNTgwNDY2OTRhOGFhIiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9OTYyYjNmZTgtMTg3Zi00MjhhLThhMTctNTgwNDY2OTRhOGFhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQxMDg2Lzk2MmIzZmU4LTE4N2YtNDI4YS04YTE3LTU4MDQ2Njk0YThhYS5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF8yIiBkYXRhLWRlbGF5PSI1MDAwIiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0mIzM5O0ltYWdlcy9waG90b01hbnF1ZS5qcGcmIzM5OzsiIHN0eWxlPSJvYmplY3QtZml0OmNvbnRhaW47IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfUFBob3RvXzMiIGNsYXNzPSJzd2lwZXItc2xpZGUzIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9VUExpa2VQaG90b18zIj4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwwMyRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fMyIgY2xhc3M9InBpY3RvLWFqb3V0ZXItcGhvdG8iIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Bob3RvLXZydmlldy5hc3B4P1JlZj02OGU3ZmY1ZS02NDA0LTQ1MzUtYmJlZC04ZTFlZTNhM2MwM2YiIGNsYXNzPSJmYW5jeWJveCBmYW5jeWJveC5pZnJhbWUiIGRhdGEtZmFuY3lib3g9IlBob3RvcyIgZGF0YS1jYXB0aW9uPSIiIGRhdGEtZmFuY3lib3gtdHlwZT0iaWZyYW1lIiBkYXRhLWZhbmN5Ym94LWhyZWY9InBob3RvLXZydmlldy5hc3B4P1JlZj02OGU3ZmY1ZS02NDA0LTQ1MzUtYmJlZC04ZTFlZTNhM2MwM2YiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDEwODYvNjhlN2ZmNWUtNjQwNC00NTM1LWJiZWQtOGUxZWUzYTNjMDNmLmpwZyIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9pbWFnZV9wcm9kdWl0XzMiIGRhdGEtZGVsYXk9IjUwMDAiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSYjMzk7SW1hZ2VzL3Bob3RvTWFucXVlLmpwZyYjMzk7OyIgc3R5bGU9Im9iamVjdC1maXQ6Y29udGFpbjsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9QUGhvdG9fNCIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzQiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JFBob3Rvc1JlcGVhdGVyJGN0bDA0JEJMaWtlUGhvdG8iIHZhbHVlPSIiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfQkxpa2VQaG90b180IiBjbGFzcz0icGljdG8tYWpvdXRlci1waG90byIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGhvdG8tdnJ2aWV3LmFzcHg/UmVmPWZmZjdjM2E0LTY2YTAtNDVmZC05MDIxLTg1Nzc5N2EyODZiMiIgY2xhc3M9ImZhbmN5Ym94IGZhbmN5Ym94LmlmcmFtZSIgZGF0YS1mYW5jeWJveD0iUGhvdG9zIiBkYXRhLWNhcHRpb249IiIgZGF0YS1mYW5jeWJveC10eXBlPSJpZnJhbWUiIGRhdGEtZmFuY3lib3gtaHJlZj0icGhvdG8tdnJ2aWV3LmFzcHg/UmVmPWZmZjdjM2E0LTY2YTAtNDVmZC05MDIxLTg1Nzc5N2EyODZiMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDE0MTA4Ni9mZmY3YzNhNC02NmEwLTQ1ZmQtOTAyMS04NTc3OTdhMjg2YjIuanBnIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX2ltYWdlX3Byb2R1aXRfNCIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b181IiBjbGFzcz0ic3dpcGVyLXNsaWRlMyI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfVVBMaWtlUGhvdG9fNSI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkUGhvdG9zUmVwZWF0ZXIkY3RsMDUkQkxpa2VQaG90byIgdmFsdWU9IiIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9CTGlrZVBob3RvXzUiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9MWY1MzRjNjItZDgwYS00NWE0LWJlN2MtYmZiMTQyNWU0OTFlIiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9MWY1MzRjNjItZDgwYS00NWE0LWJlN2MtYmZiMTQyNWU0OTFlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQxMDg2LzFmNTM0YzYyLWQ4MGEtNDVhNC1iZTdjLWJmYjE0MjVlNDkxZS5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF81IiBkYXRhLWRlbGF5PSI1MDAwIiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0mIzM5O0ltYWdlcy9waG90b01hbnF1ZS5qcGcmIzM5OzsiIHN0eWxlPSJvYmplY3QtZml0OmNvbnRhaW47IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfUFBob3RvXzYiIGNsYXNzPSJzd2lwZXItc2xpZGUzIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9VUExpa2VQaG90b182Ij4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwwNiRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fNiIgY2xhc3M9InBpY3RvLWFqb3V0ZXItcGhvdG8iIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Bob3RvLXZydmlldy5hc3B4P1JlZj0wNjA0MzRlYS1hZGUwLTQxYTgtOWE4Yi01ZDIwYjQ1MTA4ZmEiIGNsYXNzPSJmYW5jeWJveCBmYW5jeWJveC5pZnJhbWUiIGRhdGEtZmFuY3lib3g9IlBob3RvcyIgZGF0YS1jYXB0aW9uPSIiIGRhdGEtZmFuY3lib3gtdHlwZT0iaWZyYW1lIiBkYXRhLWZhbmN5Ym94LWhyZWY9InBob3RvLXZydmlldy5hc3B4P1JlZj0wNjA0MzRlYS1hZGUwLTQxYTgtOWE4Yi01ZDIwYjQ1MTA4ZmEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxNDEwODYvMDYwNDM0ZWEtYWRlMC00MWE4LTlhOGItNWQyMGI0NTEwOGZhLmpwZyIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9pbWFnZV9wcm9kdWl0XzYiIGRhdGEtZGVsYXk9IjUwMDAiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSYjMzk7SW1hZ2VzL3Bob3RvTWFucXVlLmpwZyYjMzk7OyIgc3R5bGU9Im9iamVjdC1maXQ6Y29udGFpbjsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEFkZCBBcnJvd3MgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1idXR0b24tbmV4dDMiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItYnV0dG9uLXByZXYzIj48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj48IS0tZW5kIHNsaWRlckZpY2hlQWZmYWlyZS0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXRhaWxzQWZmYWlyZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tc3RhcnQgZGV0YWlsc0FmZmFpcmUtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlRleHRQdWJBZmZhaXJlIiBpZD0iZGVzY3JpcHRpZl9hbmNob3IiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YXJpZnNMb2kyMDE3Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwcml4TGlnbmUxTG9pMjAxNyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBQcml4IDogPHN0cm9uZz40NjjCoDAwMCDigqwgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpeExpZ25lMkxvaTIwMTciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpeCBob25vcmFpcmVzIGV4Y2x1cyA6IDQ0OMKgMDAwIOKCrA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpeERldGFpbHNMb2kyMDE3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvbm9yYWlyZXMgZGUgNCw1JSDDoCBsYSBjaGFyZ2UgZGUgbCdhY3F1w6lyZXVyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSAxNTAgbSBkdSBtw6l0cm8gUE9SVEUgREVTIExJTEFTIChMLjExKSwgZXQgZHUgdHJhbXdheSBUM0IsIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXR1w6kgZGFucyB1bmUgcGV0aXRlIGNvcHJvcHJpw6l0w6kgc8OpY3VyaXPDqWUsIGF1IDbDqG1lIMOpdGFnZSBhdmVjIGFzY2Vuc2V1ciwgc2FucyB2aXMtw6AtdmlzLCBWVUUgRMOJR0FHw4lFLCBUUkFWRVJTQU5ULCAzIFBJw4hDRVMgTFVNSU5FVVggZGUgNTIgbcKyIGVudmlyb24sIGJpZW4gYWdlbmPDqSwgY29tcHJlbmFudCB1bmUgZW50csOpZSwgY3Vpc2luZSBpbmTDqXBlbmRhbnRlIGV0IGFtw6luYWfDqWUsIHVuIHPDqWpvdXIgZGUgMTUgbcKyLCAyIGNoYW1icmVzIGF2ZWMgcGxhY2FyZHMsIHNhbGxlIGRlIGJhaW4sIFdDIHPDqXBhcsOpcyBldCB1bmUgY2F2ZSBhdSBzb3VzLXNvbC4gUG9zc2liaWxpdMOpIGQndW5lIHBsYWNlIGRlIHBhcmtpbmcgZW4gc3VzLiBVTkUgVklTSVRFIFMnSU1QT1NFICEhICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVuZSBiZWxsZSBvcHBvcnR1bml0w6kgw6Agc2Fpc2lyLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3JhcFNoYXJlQWN0dTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmYi1zaGFyZS1idXR0b24iIGRhdGEtaHJlZj0naHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvYWNoZXRlci9wYXJpcy0xOS9hcHBhcnRlbWVudC8xMDAwMTQxMDg2JyBkYXRhLWxheW91dD0iYnV0dG9uX2NvdW50Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJhY3RlcmlzdGlxdWVzQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkNhcmFjdMOpcmlzdGlxdWVzIGR1IGJpZW48L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZ3JvdXBlVWwgbWFyZ2VEcm9pdGVHcGVVbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPlR5cGUgZGUgYmllbiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPkdlbnJlIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+TmIgZGUgcGnDqGNlKHMpIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5OYiBkZSBjaGFtYnJlKHMpIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5TdXJmLiBoYWJpdC4gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1Mm08cD4yPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+U2FsbGUgZGUgYmFpbnMgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5TYWxsZSBkJ2VhdSA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPldDIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+VGVycmFpbi9KYXJkaW4gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9uIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjx0YWJsZSBjbGFzcz0iZ3JvdXBlVWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5UZXJyYXNzZSA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb24gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+Q2hhdWZmYWdlIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29sbGVjdGlmIEdheiBSYWRpYXRldXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+R2FyYWdlL2JveCA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhbnM8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5EYXRlIGRlIGNvbnN0cnVjdGlvbiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE5NjANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+QmllbiBlbiBjb3Byb3ByacOpdMOpIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE91aSA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5OYi4gZGUgbG90cyBkZSBjb3Byby4gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPkNoYXJnZXMgYW5udWVsbGVzIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMjQ4IOKCrC9hbiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+UHJvY8OpZHVyZSBlbiBjb3VycyA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9uIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj48IS0tZW5kIGRldGFpbHNBZmZhaXJlLS0+DQogICAgICAgICAgICAgICAgICA8L2Rpdj48IS0tZW5kIGZpY2hlQWZmYWlyZUxlZnRTaWRlLS0+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgIC0tPjxkaXYgY2xhc3M9ImZpY2hlQWZmYWlyZVJpZ2h0U2lkZSI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVuY2FydExpbmtBZ2VuY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVNUQVJUIGVuY2FydExpbmtBZ2VuY2UtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tc3RhcnQgbGlua0ZpY2hlQWZmYWlyZS0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbmNhcnRBZ2VuY2UiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSIgaWQ9ImNvbnRhY3RfYW5jaG9yIj5DZSBiaWVuIHZvdXMgZXN0IHByb3Bvc8OpIHBhcjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWdlbmNlIExhIFLDqXNpZGVuY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgw6AgUGFyaXMgMTnDqG1lIDc1MDE5PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTUyLCBhdmVudWUgZGUgRmxhbmRyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaW5rUGFnZUFnZW5jZSIgaHJlZj0iL2FnZW5jZXMtaW1tb2JpbGllcmVzL3BhcmlzLTE5Ij5TaXRlIGRlIGwnYWdlbmNlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9VUFNob3dUZWwiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfTEJTaG93VGVsQWdlbmNlIiBjbGFzcz0ibGlua0FnZW5jZSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkTEJTaG93VGVsQWdlbmNlJiMzOTssJiMzOTsmIzM5OykiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29udGFjdEFnZW5jZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX0xTaG93VGVsQWdlbmNlIj5BZmZpY2hlciBsZSB0w6lsw6lwaG9uZTwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCjwvZGl2PjwvbGk+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9VUEFqb3V0U2VsZWN0aW9uIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9MQkFqb3V0U2VsZWN0aW9uIiBjbGFzcz0ibGlua0FnZW5jZSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkTEJBam91dFNlbGVjdGlvbiYjMzk7LCYjMzk7JiMzOTspIj48c3BhbiBjbGFzcz0iZmF2b3JpcyI+PC9zcGFuPkFqb3V0ZXIgJiMyMjQ7IG1hIHMmIzIzMztsZWN0aW9uPC9hPg0KPC9kaXY+PC9saT48L3VsPjxiciAvPjxkaXYgY2xhc3M9ImZpY2hlLXByb2R1aXQtZm9ybXVsYWlyZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDNfc3R5bGUiPkRlbWFuZGUgZCdpbmZvcm1hdGlvbnM8L2Rpdj48aW5wdXQgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEZWQWdlbmNlJFRCTm9tIiB0eXBlPSJ0ZXh0IiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1RCTm9tIiBjbGFzcz0iZmVlZGJhY2staW5wdXQiIHBsYWNlaG9sZGVyPSJJbmRpcXVleiB2b3RyZSBub20iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEZWQWdlbmNlJFJGVk5vbV9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfUkZWTm9tX1ZhbGlkYXRvckNhbGxvdXRFeHRlbmRlcl9DbGllbnRTdGF0ZSIgLz4NCg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRGVkFnZW5jZSRUQlRlbGVwaG9uZSIgdHlwZT0idGVsIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1RCVGVsZXBob25lIiBjbGFzcz0iZmVlZGJhY2staW5wdXQiIHBsYWNlaG9sZGVyPSJUw6lsw6lwaG9uZSIgLz48aW5wdXQgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEZWQWdlbmNlJFRCRW1haWwiIHR5cGU9ImVtYWlsIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1RCRW1haWwiIGNsYXNzPSJmZWVkYmFjay1pbnB1dCIgcGxhY2Vob2xkZXI9IkVtYWlsIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRGVkFnZW5jZSRSRlZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfUkZWRW1haWxfVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyX0NsaWVudFN0YXRlIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEZWQWdlbmNlJFJFVkVtYWlsX1ZhbGlkYXRvckNhbGxvdXRFeHRlbmRlcl9DbGllbnRTdGF0ZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRVZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEZWQWdlbmNlJFRCTWVzc2FnZSIgcm93cz0iMiIgY29scz0iMjAiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfVEJNZXNzYWdlIiBjbGFzcz0iZmVlZGJhY2staW5wdXQgbWVzc2FnZSIgcGxhY2Vob2xkZXI9Ik1lc3NhZ2UiPg0KPC90ZXh0YXJlYT48ZGl2IGNsYXNzPSJidG5GaWNoZVByb2R1aXRDb250YWN0QWdlbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9MQkVudm95ZXJNZXNzYWdlIiBocmVmPSJqYXZhc2NyaXB0OldlYkZvcm1fRG9Qb3N0QmFja1dpdGhPcHRpb25zKG5ldyBXZWJGb3JtX1Bvc3RCYWNrT3B0aW9ucygmcXVvdDtjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkTEJFbnZveWVyTWVzc2FnZSZxdW90OywgJnF1b3Q7JnF1b3Q7LCB0cnVlLCAmcXVvdDtEZW1hbmRlSW5mb3NQcm9kdWl0JnF1b3Q7LCAmcXVvdDsmcXVvdDssIGZhbHNlLCB0cnVlKSkiPkVudm95ZXI8L2E+PC9kaXY+PGRpdiBzdHlsZT0iZm9udC1zaXplOngtc21hbGw7IGRpc3BsYXk6YmxvY2s7IGxpbmUtaGVpZ2h0OjEuNGVtOyBtYXJnaW4tdG9wOjEycHg7Ij5JbmZvcm3DqShlKSBkZSBsYSBwb3NzaWJpbGl0w6kgZGUgbSdvcHBvc2VyIMOgIGwndXRpbGlzYXRpb24gZGUgbWVzIGNvb3Jkb25uw6llcyB0w6lsw6lwaG9uaXF1ZXMgw6AgZGVzIGZpbnMgZGUgcHJvc3BlY3Rpb24gY29tbWVyY2lhbGUgKHd3dy5ibG9jdGVsLmdvdXYuZnIpLCBqJ2F1dG9yaXNlIGwnYWdlbmNlIExhIFLDqXNpZGVuY2UgZGUgUGFyaXMgMTkmIzIzMjttZcOgIG1lIGNvbnRhY3RlciBhdSBudW3DqXJvIHJlbnNlaWduw6kuPC9kaXY+PC9kaXY+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2PjwhLS1lbmQgZW5jYXJ0TGlua0FnZW5jZS0tPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm9Db21wQWZmYWlyZSI+PCEtLXN0YXJ0IGluZm9Db21wQWZmYWlyZS0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDNfc3R5bGUiPkluZm9zIGNvbXBsw6ltZW50YWlyZXM8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkSEZMYXRpdHVkZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9IRkxhdGl0dWRlIiB2YWx1ZT0iNDguODc3ODA3MDkwOTA5MSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkSEZMb25naXR1ZGUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfSEZMb25naXR1ZGUiIHZhbHVlPSIyLjQwNDQ2MTE3MjcyNzI3IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpY2hlQWZmYWlyZVRyYW5zcG9ydCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAwJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMCIgdmFsdWU9IjM2MzUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkxlcyBnYXJlcyDDoCBwcm94aW1pdMOpPC9kaXY+PGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3J0ZSBkZXMgTGlsYXMgfiAyMDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwMCRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8wX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMzAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi82LzYwL1BhcmlzX21fM2Jpc19qbXMuc3ZnLzE2cHgtUGFyaXNfbV8zYmlzX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSAzIGJpcycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAwJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDEkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzBfSEZJZFNlcnZpY2VfMSIgdmFsdWU9IjEzOSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzMvMzEvUGFyaXNfbV8xMV9qbXMuc3ZnLzE2cHgtUGFyaXNfbV8xMV9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMTEnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDEkSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV8xIiB2YWx1ZT0iMzczNCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByw6kgU2FpbnQtR2VydmFpcyB+IDUwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAxJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzFfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjEzNSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzUvNTAvUGFyaXNfbV83YmlzX2ptcy5zdmcvMTZweC1QYXJpc19tXzdiaXNfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDcgYmlzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAyJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMiIgdmFsdWU9IjM4MTIiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUw6lsw6lncmFwaGUgfiA1MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwMiRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8yX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMzkiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi8zLzMxL1BhcmlzX21fMTFfam1zLnN2Zy8xNnB4LVBhcmlzX21fMTFfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDExJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAzJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMyIgdmFsdWU9IjM2MzQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYWludC1GYXJnZWF1IH4gNjAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDMkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfM19IRklkU2VydmljZV8wIiB2YWx1ZT0iMTMwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvNi82MC9QYXJpc19tXzNiaXNfam1zLnN2Zy8xNnB4LVBhcmlzX21fM2Jpc19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMyBiaXMnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDQkSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV80IiB2YWx1ZT0iMzczMyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYWNlIGRlcyBGw6p0ZXMgfiA4MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwNCRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl80X0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMzUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi81LzUwL1BhcmlzX21fN2Jpc19qbXMuc3ZnLzE2cHgtUGFyaXNfbV83YmlzX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSA3IGJpcycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA0JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDEkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzRfSEZJZFNlcnZpY2VfMSIgdmFsdWU9IjEzOSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzMvMzEvUGFyaXNfbV8xMV9qbXMuc3ZnLzE2cHgtUGFyaXNfbV8xMV9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMTEnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDUkSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV81IiB2YWx1ZT0iMzczMiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhbnViZSB+IDkwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA1JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzVfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjEzNSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzUvNTAvUGFyaXNfbV83YmlzX2ptcy5zdmcvMTZweC1QYXJpc19tXzdiaXNfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDcgYmlzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA2JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfNiIgdmFsdWU9IjM4MTMiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYWlyaWUgZGVzIExpbGFzIH4gOTAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDYkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfNl9IRklkU2VydmljZV8wIiB2YWx1ZT0iMTM5IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvMy8zMS9QYXJpc19tXzExX2ptcy5zdmcvMTZweC1QYXJpc19tXzExX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSAxMScgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwNyRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzciIHZhbHVlPSIzNjMzIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGVsbGVwb3J0IH4gMTAwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA3JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzdfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjEzMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzYvNjAvUGFyaXNfbV8zYmlzX2ptcy5zdmcvMTZweC1QYXJpc19tXzNiaXNfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDMgYmlzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA4JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfOCIgdmFsdWU9IjM4MTEiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKb3VyZGFpbiB+IDExMDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwOCRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl84X0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMzkiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi8zLzMxL1BhcmlzX21fMTFfam1zLnN2Zy8xNnB4LVBhcmlzX21fMTFfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDExJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA5JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfOSIgdmFsdWU9IjM3MzEiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCb3R6YXJpcyB+IDEyMDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwOSRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl85X0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMzUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi81LzUwL1BhcmlzX21fN2Jpc19qbXMuc3ZnLzE2cHgtUGFyaXNfbV83YmlzX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSA3IGJpcycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxMCRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzEwIiB2YWx1ZT0iMzgxMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFB5csOpbsOpZXMgfiAxNTAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTAkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMTBfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjEzOSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzMvMzEvUGFyaXNfbV8xMV9qbXMuc3ZnLzE2cHgtUGFyaXNfbV8xMV9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMTEnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTEkSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV8xMSIgdmFsdWU9IjM2MzEiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3J0ZSBkZSBCYWdub2xldCB+IDE1MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxMSRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8xMV9IRklkU2VydmljZV8wIiB2YWx1ZT0iMTI5IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvNy83ZS9QYXJpc19tXzNfam1zLnN2Zy8xNnB4LVBhcmlzX21fM19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwxMiRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzEyIiB2YWx1ZT0iMzYzMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdhbWJldHRhIH4gMTUwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDEyJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzEyX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMjkiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi83LzdlL1BhcmlzX21fM19qbXMuc3ZnLzE2cHgtUGFyaXNfbV8zX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSAzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTIkU2VydmljZXNSZXBlYXRlciRjdGwwMSRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMTJfSEZJZFNlcnZpY2VfMSIgdmFsdWU9IjEzMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzYvNjAvUGFyaXNfbV8zYmlzX2ptcy5zdmcvMTZweC1QYXJpc19tXzNiaXNfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDMgYmlzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpY2hlQWZmYWlyZURpYWdub3N0aWMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Img0X3N0eWxlIj5Db25zb21tYXRpb24gZCfDqW5lcmdpZSA8YnIgLz4oZW4gS3doL20yL2FuKTwvZGl2PjxwPkxvZ2VtZW50IMOpY29ub21lPC9wPjxzcGFuPkxvZ2VtZW50PC9zcGFuPiA8ZGl2IGNsYXNzPSJkaWFnSW1hZ2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvZGlhZ2ltYWdlLnBuZyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJlbmVyZ2l2b3JlIj5Mb2dlbWVudCDDqW5lcmdpdm9yZTwvcD48L2Rpdj48ZGl2IGNsYXNzPSdkaWFnQWN0aWZfRSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50RGlhZ01hcmtlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+MjQwPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2RpYWdfYWN0aWYucG5nIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhc3Rlcmlza0FmZmFpcmUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPioqIGRpc3RhbmNlIGVzdGltw6llIMOgIHZvbCBkJ29pc2VhdTwvcD48L2Rpdj48L2Rpdj48IS0tZW5kIGluZm9Db21wQWZmYWlyZS0tPjxkaXYgY2xhc3M9ImNhbGwyRXN0aW1GaWNoZVByb2R1aXQgYmdCbG9jazIiPjwhLS1TdGFydCBjYWxsMkVzdGltRmljaGVQcm9kdWl0LS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfYUVzdGltIiB0aXRsZT0iRmFpdGVzIGVzdGltZXIgdm90cmUgYmllbiBncmF0dWl0ZW1lbnQiIHRhcmdldD0iX3BhcmVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvcGljdG9Fc3RpbUNhbGwyQWN0aW9uQXNpZGUuc3ZnIiBhbHQ9IkZhaXRlcyBlc3RpbWVyIHZvdHJlIGJpZW4gZ3JhdHVpdGVtZW50IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoMl9zdHlsZSI+RmFpdGVzIGVzdGltZXIgPGJyIC8+dm90cmUgYmllbiA8c3Ryb25nPjxiciAvPmdyYXR1aXRlbWVudDwvc3Ryb25nPiA8L2Rpdj48L2E+PC9kaXY+PCEtLUVuZCBjYWxsMkVzdGltRmljaGVQcm9kdWl0LS0+PC9kaXY+PCEtLWVuZCBmaWNoZUFmZmFpcmVSaWdodFNpZGUtLT48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRGl2TWFwUHJvZHVpdCIgY2xhc3M9Im1hcEZpY2hlQWZmYWlyZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDNfc3R5bGUiIGlkPSJsb2NhbGlzYXRpb25fYW5jaG9yIj5Mb2NhbGlzYXRpb24gZHUgYmllbjwvZGl2PjxkaXYgY2xhc3M9Im1hcC1wcm9kdWl0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KDQo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Jy4uLy4uLy4uL1N0eWxlcy9vbC5jc3MnIHR5cGU9InRleHQvY3NzIiAvPg0KDQoNCjxzdHlsZT4NCiAgICAubWFwIHsNCiAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgICAgICB3aWR0aDogMTAwJTsNCiAgICB9DQoNCiAgICAudG9vbHRpcCB7DQogICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgcGFkZGluZzogM3B4Ow0KICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNyk7DQogICAgICAgIGNvbG9yOiB3aGl0ZTsNCiAgICAgICAgb3BhY2l0eTogMC44NTsNCiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCiAgICAgICAgZm9udDogMTBwdCBzYW5zLXNlcmlmOw0KICAgIH0NCg0KICAgIC5hcnJvd19ib3ggew0KICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgICAgIGJhY2tncm91bmQ6ICNmZmY7DQogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDNjODg7DQogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICAgICAgcGFkZGluZzogMTBweDsNCiAgICB9DQoNCiAgICAuYXJyb3dfYm94OmFmdGVyLCAuYXJyb3dfYm94OmJlZm9yZSB7DQogICAgICAgIHRvcDogMTAwJTsNCiAgICAgICAgbGVmdDogNTAlOw0KICAgICAgICBib3JkZXI6IHNvbGlkIHRyYW5zcGFyZW50Ow0KICAgICAgICBjb250ZW50OiAiICI7DQogICAgICAgIGhlaWdodDogMDsNCiAgICAgICAgd2lkdGg6IDA7DQogICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQogICAgfQ0KDQogICAgLmFycm93X2JveDphZnRlciB7DQogICAgICAgIGJvcmRlci1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwKTsNCiAgICAgICAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZjsNCiAgICAgICAgYm9yZGVyLXdpZHRoOiAxMHB4Ow0KICAgICAgICBtYXJnaW4tbGVmdDogLTEwcHg7DQogICAgfQ0KDQogICAgLmFycm93X2JveDpiZWZvcmUgew0KICAgICAgICBib3JkZXItY29sb3I6IHJnYmEoMTUzLCAxNTMsIDE1MywgMCk7DQogICAgICAgIGJvcmRlci10b3AtY29sb3I6ICMwMDNjODg7DQogICAgICAgIGJvcmRlci13aWR0aDogMTFweDsNCiAgICAgICAgbWFyZ2luLWxlZnQ6IC0xMXB4Ow0KICAgIH0NCjwvc3R5bGU+DQoNCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRPTE1hcFByb2R1aXQkSEZfTG9uZ2l0dWRlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdF9IRl9Mb25naXR1ZGUiIHZhbHVlPSIyLjQwNDcwOCIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRPTE1hcFByb2R1aXQkSEZfTGF0aXR1ZGUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X0hGX0xhdGl0dWRlIiB2YWx1ZT0iNDguODc5MDU0NSIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRPTE1hcFByb2R1aXQkSEZfWm9vbSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfSEZfWm9vbSIgdmFsdWU9IjE1IiAvPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JE9MTWFwUHJvZHVpdCRIRl9TaG93Wm9vbUNvbnRyb2wiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X0hGX1Nob3dab29tQ29udHJvbCIgdmFsdWU9InRydWUiIC8+DQoNCjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfUGFuZWxNYXAiIGNsYXNzPSJtYXAiPg0KCQ0KICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfUGFuZWxUb29sdGlwIiBjbGFzcz0idG9vbHRpcCI+DQoNCgk8L2Rpdj4NCiAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X1BvcHVwQ29udGFpbmVyIiBjbGFzcz0iYXJyb3dfYm94Ij4NCgkJDQogICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfUG9wdXBDb250ZW50Ij4NCgkJCQ0KDQogICAgICAgIA0KCQk8L2Rpdj4NCiAgICANCgk8L2Rpdj4NCg0KDQo8L2Rpdj4NCg0KDQoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpZkxvY2FsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9EaXZEZXNjcmlwdFZpbGxlIiBjbGFzcz0iZGVzY3JpcHRWaWxsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkRlc2NyaXB0aWYgZGUgbGEgdmlsbGU8c3Bhbj48L3NwYW4+PC9kaXY+PHAgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QRGVzY3JpcHRWaWxsZSI+TGUgMTkmIzIzMjttZSBhcnJvbmRpc3NlbWVudCBkZSBQYXJpcyBjb21wdGUgMTg2IDEyMCBoYWJpdGFudHMuIExhIHZpbGxlIGNvbXB0ZSAxODYgMTIwIGhhYml0YW50cyBldCA0MyAzNDAgZmFtaWxsZXMgZG9udCA1OSAlIG9udCBkZXMgZW5mYW50cy4gMzAgJSBkZXMgaGFiaXRhbnRzIHNvbnQgcHJvcHJpJiMyMzM7dGFpcmVzLiA5OCAlIGRlcyBsb2dlbWVudHMgc29udCBkZXMgYXBwYXJ0ZW1lbnRzIGV0IDMgJSBzb250IGRlcyByJiMyMzM7c2lkZW5jZXMgc2Vjb25kYWlyZXMuIExhIGNvbW11bmUgZXN0IGJpZW4gZGVzc2VydmllIGVuIHRyYW5zcG9ydHMgZW4gY29tbXVuIGF2ZWMgNjEgJSBkZSBtJiMyMzM7bmFnZXMgbmUgcG9zcyYjMjMzO2RhbnQgcGFzIGRlIHZvaXR1cmUuIExlcyBoYWJpdGFudHMgdXRpbGlzZW50IGVuIG1ham9yaXQmIzIzMzsgbGVzIHRyYW5zcG9ydHMgZW4gY29tbXVuIHBvdXIgYWxsZXIgdHJhdmFpbGxlciAmIzIyNDsgODAgJS4gSWwgeSBhIDIgODMwIGNvbW1lcmNlcyBkZSBwcm94aW1pdCYjMjMzOy4gLjwvcD48L2Rpdj48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRGl2RGVzY3JpcHRRdWFydGllciIgY2xhc3M9ImRlc2NyaXB0UXVhcnRpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Img0X3N0eWxlIj5EZXNjcmlwdGlmIGR1IHF1YXJ0aWVyPHNwYW4+PC9zcGFuPjwvZGl2PjxwIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUERlc2NyaXB0UXVhcnRpZXIiPlBvcnRlIGRlcyBMaWxhcyBlc3QgdW4gcXVhcnRpZXIgZHUgMTkmIzIzMjttZSBhcnJvbmRpc3NlbWVudCBkZSBQYXJpcy4gTGUgcXVhcnRpZXIgY29tcHRlIDggMTMwIGhhYml0YW50cyBldCAxIDg0MCBmYW1pbGxlcyBkb250IDYxICUgb250IGRlcyBlbmZhbnRzLiAzNiAlIGRlcyBoYWJpdGFudHMgc29udCBwcm9wcmkmIzIzMzt0YWlyZXMuIDk5ICUgZGVzIGxvZ2VtZW50cyBzb250IGRlcyBhcHBhcnRlbWVudHMgZXQgMyAlIHNvbnQgZGVzIHImIzIzMztzaWRlbmNlcyBzZWNvbmRhaXJlcy4gTGUgcXVhcnRpZXIgZXN0IGJpZW4gZGVzc2VydmkgZW4gdHJhbnNwb3J0cyBlbiBjb21tdW4gYXZlYyA2MSAlIGRlIG0mIzIzMztuYWdlcyBuZSBwb3NzJiMyMzM7ZGFudCBwYXMgZGUgdm9pdHVyZS4gTGVzIGhhYml0YW50cyB1dGlsaXNlbnQgZW4gbWFqb3JpdCYjMjMzOyBsZXMgdHJhbnNwb3J0cyBlbiBjb21tdW4gcG91ciBhbGxlciB0cmF2YWlsbGVyICYjMjI0OyA4MCAlLiBJbCB5IGEgMTIwIGNvbW1lcmNlcyBkZSBwcm94aW1pdCYjMjMzOy4gLjwvcD48L2Rpdj48L2Rpdj48L2Rpdj48IS0tZW5kIG1hcEZpY2hlQWZmYWlyZS0tPjwvZGl2PjwhLS1lbmQgZmljaGVBZmZhaXJlICsgQmdCbG9jay0tPjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QUmVjb1Byb2R1aXRzIiBjbGFzcz0iZGVybmllckJpZW5zVmVuZHVzMiI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoMl9zdHlsZSIgaWQ9InN1Z2dlc3Rpb25fYW5jaG9yIj5BdXRyZXMgcHJvZHVpdHMgcmVjb21tYW5kw6lzPC9kaXY+PGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1VQUHJvZHVpdHMiPg0KCQkgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbl8wIiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZzMiPg0KCQkJDQogICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfVVBQcm9kdWl0XzAiPg0KCQkJCSAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nL2FjaGV0ZXIvbGUtbWVzbmlsLWxlLXJvaS9hcHBhcnRlbWVudC8xMDAwMTIwMjQxLXJlY28nPiAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSdodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTIwMjQxL2U2OWI4NTMwLTQ0NmItNDJiMS1hZWNiLTQ2MmU1MDFlYzQ4YV8zNjQuanBnJyB0aXRsZT0iQXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIMOgIExlIE1lc25pbCBsZSBSb2kiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSdJbWFnZXMvcGhvdG9NYW5xdWUuanBnJzsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbkxpc3RpbmdJbmZvXzAiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nSW5mbyI+DQoJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGl0cmVMaXN0XzAiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UaXRyZSI+DQoJCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IDExN20yPGJyLz5MZSBNZXNuaWwgbGUgUm9pICg3OCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUZXh0ZUxpc3RfMCIgY2xhc3M9InZpZ25ldHRlQmllblRleHRlIj4NCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMgY2hhbWJyZShzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIDEyMzg4MjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFNvdXNUaXRyZUxpc3RfMCIgY2xhc3M9InZpZ25ldHRlQmllblByaXhGQUkiPg0KCQkJCQkJMzk3wqAwMDAg4oKsIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCTwvZGl2PiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCgkJCTwvZGl2Pg0KICAgICAgICAgICAgDQogICAgICAgIA0KCQk8L2Rpdj48IS0tIEB3aGl0ZXNwYWNlDQogICAgDQogICAgICAgIC0tPjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuXzEiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nMyI+DQoJCQkNCiAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19VUFByb2R1aXRfMSI+DQoJCQkJICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScvYWNoZXRlci9jaGF0b3UvYXBwYXJ0ZW1lbnQvMTAwMDEzMjE3Ni1yZWNvJz4gICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0naHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDEzMjE3Ni9iOTUzZjczNC1iODc3LTQ1NjItOWE0My0wNzgwNWI3MzdmMTVfMzY0LmpwZycgdGl0bGU9IkFwcGFydGVtZW50IMOgIHZlbmRyZSDDoCBDaGF0b3UiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSdJbWFnZXMvcGhvdG9NYW5xdWUuanBnJzsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbkxpc3RpbmdJbmZvXzEiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nSW5mbyI+DQoJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGl0cmVMaXN0XzEiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UaXRyZSI+DQoJCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IDczbTI8YnIvPkNoYXRvdSAoNzgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGV4dGVMaXN0XzEiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UZXh0ZSI+DQoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIGNoYW1icmUocykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSAyNTExNjg8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2PiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BTb3VzVGl0cmVMaXN0XzEiIGNsYXNzPSJ2aWduZXR0ZUJpZW5Qcml4RkFJIj4NCgkJCQkJCTM4M8KgMDAwIOKCrCANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCgkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQoJCQk8L2Rpdj4NCiAgICAgICAgICAgIA0KICAgICAgICANCgkJPC9kaXY+PCEtLSBAd2hpdGVzcGFjZQ0KICAgIA0KICAgICAgICAtLT48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbl8yIiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZzMiPg0KCQkJDQogICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfVVBQcm9kdWl0XzIiPg0KCQkJCSAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nL2FjaGV0ZXIvY2hhdG91L2FwcGFydGVtZW50LzEwMDAxMzc4ODQtcmVjbyc+ICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFBpY3RvVnBfMiIgY2xhc3M9InBpY3RvLWFmZmFpcmUtZXhjbHUiPg0KDQoJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSdodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTM3ODg0LzRhMjFmYjY0LWJhMjUtNDk2Yi1hOWQ3LWU5YTM3YzY3ZTcxNV8zNjQuanBnJyB0aXRsZT0iQXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIMOgIENoYXRvdSIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9J0ltYWdlcy9waG90b01hbnF1ZS5qcGcnOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuTGlzdGluZ0luZm9fMiIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmdJbmZvIj4NCgkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUaXRyZUxpc3RfMiIgY2xhc3M9InZpZ25ldHRlQmllblRpdHJlIj4NCgkJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgMTA3bTI8YnIvPkNoYXRvdSAoNzgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGV4dGVMaXN0XzIiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UZXh0ZSI+DQoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzIGNoYW1icmUocykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSAyNTExODM8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2PiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BTb3VzVGl0cmVMaXN0XzIiIGNsYXNzPSJ2aWduZXR0ZUJpZW5Qcml4RkFJIj4NCgkJCQkJCTQyMMKgMDAwIOKCrCANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCgkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQoJCQk8L2Rpdj4NCiAgICAgICAgICAgIA0KICAgICAgICANCgkJPC9kaXY+PCEtLSBAd2hpdGVzcGFjZQ0KICAgIA0KICAgICAgICAtLT48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbl8zIiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZzMiPg0KCQkJDQogICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfVVBQcm9kdWl0XzMiPg0KCQkJCSAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nL2FjaGV0ZXIvbWFyZWlsLW1hcmx5L2FwcGFydGVtZW50LzEwMDAxMzgyMzItcmVjbyc+ICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9J2h0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxMzgyMzIvYmY5NmI3NjctNmI5Ni00NjBiLWI3YmQtNGJiOWRkNTdmMzliXzM2NC5qcGcnIHRpdGxlPSJBcHBhcnRlbWVudCDDoCB2ZW5kcmUgw6AgTWFyZWlsLU1hcmx5IiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0nSW1hZ2VzL3Bob3RvTWFucXVlLmpwZyc7IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5MaXN0aW5nSW5mb18zIiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZ0luZm8iPg0KCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRpdHJlTGlzdF8zIiBjbGFzcz0idmlnbmV0dGVCaWVuVGl0cmUiPg0KCQkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCAxMTBtMjxici8+TWFyZWlsLU1hcmx5ICg3OCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUZXh0ZUxpc3RfMyIgY2xhc3M9InZpZ25ldHRlQmllblRleHRlIj4NCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQgY2hhbWJyZShzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIDE1NTxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFNvdXNUaXRyZUxpc3RfMyIgY2xhc3M9InZpZ25ldHRlQmllblByaXhGQUkiPg0KCQkJCQkJNDk1wqAwMDAg4oKsIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCTwvZGl2PiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCgkJCTwvZGl2Pg0KICAgICAgICAgICAgDQogICAgICAgIA0KCQk8L2Rpdj48IS0tIEB3aGl0ZXNwYWNlDQogICAgDQogICAgICAgIC0tPjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuXzQiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nMyI+DQoJCQkNCiAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19VUFByb2R1aXRfNCI+DQoJCQkJICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScvYWNoZXRlci9jaGF0b3UvYXBwYXJ0ZW1lbnQvMTAwMDEzOTEwNS1yZWNvJz4gICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0naHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDEzOTEwNS8zNmE0N2ZkZi04NmNlLTRhMWEtYTUzYS1hYzhmZjA1ZWFiNTBfMzY0LmpwZycgdGl0bGU9IkFwcGFydGVtZW50IMOgIHZlbmRyZSDDoCBDaGF0b3UiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSdJbWFnZXMvcGhvdG9NYW5xdWUuanBnJzsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbkxpc3RpbmdJbmZvXzQiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nSW5mbyI+DQoJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGl0cmVMaXN0XzQiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UaXRyZSI+DQoJCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IDYzbTI8YnIvPkNoYXRvdSAoNzgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGV4dGVMaXN0XzQiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UZXh0ZSI+DQoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIGNoYW1icmUocykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSAyNTExOTk8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2PiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BTb3VzVGl0cmVMaXN0XzQiIGNsYXNzPSJ2aWduZXR0ZUJpZW5Qcml4RkFJIj4NCgkJCQkJCTQyMMKgMDAwIOKCrCANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCgkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQoJCQk8L2Rpdj4NCiAgICAgICAgICAgIA0KICAgICAgICANCgkJPC9kaXY+PCEtLSBAd2hpdGVzcGFjZQ0KICAgIA0KICAgICAgICAtLT48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbl81IiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZzMiPg0KCQkJDQogICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfVVBQcm9kdWl0XzUiPg0KCQkJCSAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nL2FjaGV0ZXIvdmVsaXp5LXZpbGxhY291YmxheS9hcHBhcnRlbWVudC8xMDAwMTQzNTMyLXJlY28nPiAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSdodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTQzNTMyLzYwYzA2ZDFlLTVjNjUtNGIyMy1iMjU1LWNkMzIyNzI4NjVkNl8zNjQuanBnJyB0aXRsZT0iQXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIMOgIFbDqWxpenktVmlsbGFjb3VibGF5IiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0nSW1hZ2VzL3Bob3RvTWFucXVlLmpwZyc7IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5MaXN0aW5nSW5mb181IiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZ0luZm8iPg0KCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRpdHJlTGlzdF81IiBjbGFzcz0idmlnbmV0dGVCaWVuVGl0cmUiPg0KCQkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCA5NG0yPGJyLz5Ww6lsaXp5LVZpbGxhY291YmxheSAoNzgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGV4dGVMaXN0XzUiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UZXh0ZSI+DQoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IGNoYW1icmUocykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSA1Mzg0PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QU291c1RpdHJlTGlzdF81IiBjbGFzcz0idmlnbmV0dGVCaWVuUHJpeEZBSSI+DQoJCQkJCQkzOTXCoDAwMCDigqwgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJPC9kaXY+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgDQoJCTwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCiAgICANCi0tPjxiciAvPg0KPHNwYW4gaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNEYXRhUGFnZXJCb3R0b20iIGNsYXNzPSJkYXRhLXBhZ2VyIj48c3Bhbj4xPC9zcGFuPiZuYnNwOzwvc3Bhbj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS1lbmQgZmljaGVBZmZhaXJlV3JhcHBlci0tPg0KICAgICAgICAgICAgDQogICAgDQoNCiAgICA8IS0tIEluaXRpYWxpemUgU3dpcGVyIC0tPg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgU3lzLldlYkZvcm1zLlBhZ2VSZXF1ZXN0TWFuYWdlci5nZXRJbnN0YW5jZSgpLmFkZF9wYWdlTG9hZGVkKEluaXRpYWxpemVfU3dpcGVyKTsNCg0KICAgICAgICBmdW5jdGlvbiBJbml0aWFsaXplX1N3aXBlcihzZW5kZXIsIGFyZ3MpIHsNCg0KICAgICAgICAgICAgdmFyIHN3aXBlcjMgPSBuZXcgU3dpcGVyKCcuc3dpcGVyLWNvbnRhaW5lcjMnLCB7DQogICAgICAgICAgICAgICAgbmV4dEJ1dHRvbjogJy5zd2lwZXItYnV0dG9uLW5leHQzJywNCiAgICAgICAgICAgICAgICBwcmV2QnV0dG9uOiAnLnN3aXBlci1idXR0b24tcHJldjMnLA0KICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLA0KICAgICAgICAgICAgICAgIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUzJywNCiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcjMnLA0KICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsDQogICAgICAgICAgICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZTogZmFsc2UsDQogICAgICAgICAgICAgICAgYXV0b3BsYXk6IDI1MDAsDQogICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLA0KICAgICAgICAgICAgICAgIGF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb246IHRydWUsDQogICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsDQogICAgICAgICAgICAgICAgc3BlZWQ6IDUwMA0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIHZhciBzd2lwZXJfbWVkaWFzID0gbmV3IFN3aXBlcignLnN3aXBlci1jb250YWluZXItbWVkaWFzJywgew0KICAgICAgICAgICAgICAgIG5leHRCdXR0b246ICcuc3dpcGVyLWJ1dHRvbi1uZXh0LW1lZGlhcycsDQogICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogJy5zd2lwZXItYnV0dG9uLXByZXYtbWVkaWFzJywNCiAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJywNCiAgICAgICAgICAgICAgICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlLW1lZGlhcycsDQogICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXItbWVkaWFzJywNCiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLA0KICAgICAgICAgICAgICAgIHBhZ2luYXRpb25DbGlja2FibGU6IGZhbHNlLA0KICAgICAgICAgICAgICAgIGF1dG9wbGF5OiAyNTAwLA0KICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCwNCiAgICAgICAgICAgICAgICBhdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLA0KICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsDQogICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLA0KICAgICAgICAgICAgICAgIHNwZWVkOiA1MDANCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9Ow0KICAgIDwvc2NyaXB0PiAgICAgIA0KICAgIA0KICAgIA0KDQoNCiAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tLy8vLy8vLy8vLy8vLy8vLy8vL0ZpbiBkdSAubWFpbi0tPg0KDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwhLS0vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL0VORCBDb250ZW51IGR5bmFtaXF1ZSBkZSBsYSBwYWdlLS0+DQoNCg0KDQogICAgICAgICAgICA8IS0tLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9EZWJ1dCBkdSAuZm9vdGVyLS0+DQogICAgICAgICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgYmdCbG9jayI+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0iRGl2Rm9vdGVyQWdlbmNlcyIgY2xhc3M9ImNvbnRlbmVyIj48ZGl2IGNsYXNzPSJoMl9zdHlsZSI+Tm9zIGFnZW5jZXMgcHLDqHMgZGUgY2hleiB2b3VzPC9kaXY+DQo8ZGl2IGNsYXNzPSdsaXN0ZVZpbGxlJz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5Fc3Nvbm5lICg5MSk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSDDiXZyeSAtIENvdXJjb3Vyb25uZXMnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy/DqXZyeS0tLWNvdXJjb3Vyb25uZXMnPkFnZW5jZSBpbW1vYmlsacOocmUgw4l2cnkgLSBDb3VyY291cm9ubmVzPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5FdXJlICgyNyk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBFdnJldXgnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9ldnJldXgnPkFnZW5jZSBpbW1vYmlsacOocmUgRXZyZXV4PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEV6eSBzdXIgRXVyZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2V6eS1zdXItZXVyZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBFenkgc3VyIEV1cmU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgR2FpbGxvbicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2dhaWxsb24nPkFnZW5jZSBpbW1vYmlsacOocmUgR2FpbGxvbjwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBQYWN5IHN1ciBFdXJlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcGFjeS1zdXItZXVyZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBQYWN5IHN1ciBFdXJlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFZlcm5vbicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3Zlcm5vbic+QWdlbmNlIGltbW9iaWxpw6hyZSBWZXJub248L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkV1cmUtZXQtTG9pciAoMjgpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgRHJldXgnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9kcmV1eCc+QWdlbmNlIGltbW9iaWxpw6hyZSBEcmV1eDwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNYWludGVub24nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tYWludGVub24nPkFnZW5jZSBpbW1vYmlsacOocmUgTWFpbnRlbm9uPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5HYXJkICgzMCk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBOw65tZXMgQ2VudHJlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbsOubWVzLWNlbnRyZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBOw65tZXMgQ2VudHJlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE7Drm1lcyBFc3QnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9uw65tZXMtZXN0Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE7Drm1lcyBFc3Q8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkhhdXRlLVZpZW5uZSAoODcpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQWl4ZSBzdXIgdmllbm5lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvYWl4ZS1zdXItdmllbm5lJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEFpeGUgc3VyIHZpZW5uZTwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+SGF1dHMtZGUtU2VpbmUgKDkyKTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIENoYXZpbGxlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvY2hhdmlsbGUnPkFnZW5jZSBpbW1vYmlsacOocmUgQ2hhdmlsbGU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTGEgR2FyZW5uZS1Db2xvbWJlcycgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2xhLWdhcmVubmUtY29sb21iZXMnPkFnZW5jZSBpbW1vYmlsacOocmUgTGEgR2FyZW5uZS1Db2xvbWJlczwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+SWxsZS1ldC1WaWxhaW5lICgzNSk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBCZXR0b24nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9iZXR0b24nPkFnZW5jZSBpbW1vYmlsacOocmUgQmV0dG9uPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5MYSBSw6l1bmlvbiAoOTc0KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFNhaW50LXBpZXJyZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3NhaW50LXBpZXJyZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBTYWludC1waWVycmU8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPlBhcmlzICg3NSk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBQYXJpcyA1w6htZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3BhcmlzLTA1Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFBhcmlzIDXDqG1lPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFBhcmlzIDE3w6htZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3BhcmlzLTE3Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFBhcmlzIDE3w6htZTwvYT4NCjwvZGl2Pg0KPGRpdiBjbGFzcz0nbGlzdGVWaWxsZSc+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUGFyaXMgMTnDqG1lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcGFyaXMtMTknPkFnZW5jZSBpbW1vYmlsacOocmUgUGFyaXMgMTnDqG1lPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5TZWluZS1NYXJpdGltZSAoNzYpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgRMOpdmlsbGUgbGVzIHJvdWVuJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvZGV2aWxsZS1sZXMtcm91ZW4nPkFnZW5jZSBpbW1vYmlsacOocmUgRMOpdmlsbGUgbGVzIHJvdWVuPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1vbnQgc3QgYWlnbmFuJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbW9udC1zYWludC1haWduYW4nPkFnZW5jZSBpbW1vYmlsacOocmUgTW9udCBzdCBhaWduYW48L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUGF2aWxseScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3BhdmlsbHknPkFnZW5jZSBpbW1vYmlsacOocmUgUGF2aWxseTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBSb3VlbiByaXZlIGRyb2l0ZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3JvdWVuJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFJvdWVuIHJpdmUgZHJvaXRlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFJvdWVuIHJpdmUgZ2F1Y2hlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcm91ZW4tcml2ZS1nYXVjaGUnPkFnZW5jZSBpbW1vYmlsacOocmUgUm91ZW4gcml2ZSBnYXVjaGU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgU3QgZXRpZW5uZSBkdSByb3V2cmF5JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvc2FpbnQtZXRpZW5uZS1kdS1yb3V2cmF5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFN0IGV0aWVubmUgZHUgcm91dnJheTwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+VmFsIGQnT2lzZSAoOTUpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQmVhdWNoYW1wJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvYmVhdWNoYW1wJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEJlYXVjaGFtcDwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBCZXNzYW5jb3VydCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2Jlc3NhbmNvdXJ0Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEJlc3NhbmNvdXJ0PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIENlcmd5JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvY2VyZ3knPkFnZW5jZSBpbW1vYmlsacOocmUgQ2VyZ3k8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQ29ybWVpbGxlcyBlbiBwYXJpc2lzJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvY29ybWVpbGxlcy1lbi1wYXJpc2lzJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIENvcm1laWxsZXMgZW4gcGFyaXNpczwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBGcmFuY29udmlsbGUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9mcmFuY29udmlsbGUnPkFnZW5jZSBpbW1vYmlsacOocmUgRnJhbmNvbnZpbGxlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEhlcmJsYXknIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9oZXJibGF5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEhlcmJsYXk8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUGxlc3NpcyBCb3VjaGFyZCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3BsZXNzaXMtYm91Y2hhcmQnPkFnZW5jZSBpbW1vYmlsacOocmUgUGxlc3NpcyBCb3VjaGFyZDwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNYWdueSBlbiBWZXhpbicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21hZ255LWVuLXZleGluJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1hZ255IGVuIFZleGluPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1vbnRpZ255IGxlcyBDb3JtZWlsbGVzJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbW9udGlnbnktbGVzLWNvcm1laWxsZXMnPkFnZW5jZSBpbW1vYmlsacOocmUgTW9udGlnbnkgbGVzIENvcm1laWxsZXM8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTW9udG1hZ255JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbW9udG1hZ255Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1vbnRtYWdueTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBTYWludCBPdWVuIGwnQXVtb25lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvc2FpbnQtb3Vlbi1sLWF1bW9uZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBTYWludCBPdWVuIGwnQXVtb25lPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFNhbm5vaXMnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9zYW5ub2lzJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFNhbm5vaXM8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgVmF1csOpYWwnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy92YXVyZWFsJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFZhdXLDqWFsPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5WYWwtZGUtTWFybmUgKDk0KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE5vZ2VudCBzdXIgTWFybmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9ub2dlbnQtc3VyLW1hcm5lJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE5vZ2VudCBzdXIgTWFybmU8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPlZhciAoODMpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUHVnZXQtc3VyLUFyZ2VucycgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3B1Z2V0LXN1ci1hcmdlbnMnPkFnZW5jZSBpbW1vYmlsacOocmUgUHVnZXQtc3VyLUFyZ2VuczwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+WXZlbGluZXMgKDc4KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEFuZHLDqXN5JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvYW5kcmVzeSc+QWdlbmNlIGltbW9iaWxpw6hyZSBBbmRyw6lzeTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBBdWJlcmdlbnZpbGxlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvYXViZXJnZW52aWxsZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBBdWJlcmdlbnZpbGxlPC9hPg0KPC9kaXY+DQo8ZGl2IGNsYXNzPSdsaXN0ZVZpbGxlJz4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBCb25uacOocmVzIHN1ciBTZWluZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2Jvbm5pZXJlcy1zdXItc2VpbmUnPkFnZW5jZSBpbW1vYmlsacOocmUgQm9ubmnDqHJlcyBzdXIgU2VpbmU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQ2hhbWJvdXJjeScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2NoYW1ib3VyY3knPkFnZW5jZSBpbW1vYmlsacOocmUgQ2hhbWJvdXJjeTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBDaGF0b3UnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9jaGF0b3UnPkFnZW5jZSBpbW1vYmlsacOocmUgQ2hhdG91PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIENvbmZsYW5zIHN0ZSBIb25vcmluZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2NvbmZsYW5zJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIENvbmZsYW5zIHN0ZSBIb25vcmluZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBFbGFuY291cnQnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9lbGFuY291cnQnPkFnZW5jZSBpbW1vYmlsacOocmUgRWxhbmNvdXJ0PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEhvdWRhbicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2hvdWRhbic+QWdlbmNlIGltbW9iaWxpw6hyZSBIb3VkYW48L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgSXNzb3UnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9pc3NvdSc+QWdlbmNlIGltbW9iaWxpw6hyZSBJc3NvdTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBMZSBDaGVzbmF5JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbGUtY2hlc25heSc+QWdlbmNlIGltbW9iaWxpw6hyZSBMZSBDaGVzbmF5PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIExlIE1lc25pbC1TYWludC1EZW5pcycgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2xlLW1lc25pbC1zdC1kZW5pcyc+QWdlbmNlIGltbW9iaWxpw6hyZSBMZSBNZXNuaWwtU2FpbnQtRGVuaXM8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTGVzIENsYXllcyBTb3VzIEJvaXMnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9sZXMtY2xheWVzLXNvdXMtYm9pcyc+QWdlbmNlIGltbW9iaWxpw6hyZSBMZXMgQ2xheWVzIFNvdXMgQm9pczwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBMZXMgRXNzYXJ0cy1sZS1Sb2knIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9sZXMtZXNzYXJ0cy1sZS1yb2knPkFnZW5jZSBpbW1vYmlsacOocmUgTGVzIEVzc2FydHMtbGUtUm9pPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIExlcyBNdXJlYXV4JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbGVzLW11cmVhdXgnPkFnZW5jZSBpbW1vYmlsacOocmUgTGVzIE11cmVhdXg8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTWFnbmFudmlsbGUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tYWduYW52aWxsZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBNYWduYW52aWxsZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNYW50ZXMgbGEgSm9saWUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tYW50ZXMnPkFnZW5jZSBpbW1vYmlsacOocmUgTWFudGVzIGxhIEpvbGllPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1hbnRlcyBsYSBKb2xpZSBMT0NBVElPTicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21hbnRlcy1sb2NhdGlvbic+QWdlbmNlIGltbW9iaWxpw6hyZSBNYW50ZXMgbGEgSm9saWUgTE9DQVRJT048L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTWFybHkgbGUgUm9pJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbWFybHktbGUtcm9pJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1hcmx5IGxlIFJvaTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNYXVsZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21hdWxlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1hdWxlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1hdXJlY291cnQnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tYXVyZWNvdXJ0Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1hdXJlY291cnQ8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTWV1bGFuJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbWV1bGFuJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1ldWxhbjwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBQb2lzc3knIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9wb2lzc3knPkFnZW5jZSBpbW1vYmlsacOocmUgUG9pc3N5PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFJhbWJvdWlsbGV0JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcmFtYm91aWxsZXQnPkFnZW5jZSBpbW1vYmlsacOocmUgUmFtYm91aWxsZXQ8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgU2FpbnQgQ3lyIGwnRWNvbGUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9zYWludC1jeXItbC1lY29sZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBTYWludCBDeXIgbCdFY29sZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBTdCBHZXJtYWluIGVuIExheWUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9zYWludC1nZXJtYWluLWNoYXRlYXUnPkFnZW5jZSBpbW1vYmlsacOocmUgU3QgR2VybWFpbiBlbiBMYXllPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFN0IE5vbSBsYSBCcmV0ZWNoZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3NhaW50LW5vbS1sYS1icmV0ZWNoZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBTdCBOb20gbGEgQnJldGVjaGU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgVHJpZWwgc3VyIFNlaW5lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvdHJpZWwtc3VyLXNlaW5lJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFRyaWVsIHN1ciBTZWluZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBWw6lsaXp5LVZpbGxhY291YmxheScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3ZlbGl6eS12aWxsYWNvdWJsYXknPkFnZW5jZSBpbW1vYmlsacOocmUgVsOpbGl6eS1WaWxsYWNvdWJsYXk8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgVmVybmV1aWwgc3VyIFNlaW5lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvdmVybmV1aWwtc3VyLXNlaW5lJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFZlcm5ldWlsIHN1ciBTZWluZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBWb2lzaW5zLWxlLUJyZXRvbm5ldXgnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy92b2lzaW5zLWxlLWJyZXRvbm5ldXgnPkFnZW5jZSBpbW1vYmlsacOocmUgVm9pc2lucy1sZS1CcmV0b25uZXV4PC9hPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxsMkZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tU1RBUlQgQ0FMTDJGT09URVItLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGwyVmlsbGVzQWdlbmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FnZW5jZXMtaW1tb2JpbGllcmVzIiB0aXRsZT0iRGV2ZW5pciBmcmFuY2hpc8OpIExhIFLDqXNpZGVuY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5SZXRyb3V2ZXIgdG91dGVzIGxlcyBpbXBsYW50YXRpb25zIGRlIG5vcyBhZ2VuY2VzIHByw6hzIGRlIGNoZXogdm91cyAhPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImgzX3N0eWxlIj5Ucm91dmVyIHZvdHJlIGFnZW5jZTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxsMkZyYW5jaGlzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NyZWVyLWFmZmlsaWVyLWFnZW5jZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkRldmVuaXIgZnJhbmNoaXPDqSBMYSBSw6lzaWRlbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+VG91dCBzYXZvaXIgc3VyIGxhIGNyw6lhdGlvbiBvdSBsJ2FmZmlsaWF0aW9uIGRlIHZvdHJlIGFnZW5jZSBhdSByw6lzZWF1IExhIFLDqXNpZGVuY2UuPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImgzX3N0eWxlIj5EZXZlbmlyIGZyYW5jaGlzw6k8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsbDJGYWNlYm9vayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2xhcmVzaWRlbmNlaW1tb2JpbGllci8iIHRpdGxlPSJSZWpvaWduZXotbm91cyBzdXIgZmFjZWJvb2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TdWl2ZXogdG91dGUgbCdhY3R1YWxpdMOpIGRlIGwnaW1tb2JpbGllciBldCBkdSByw6lzZWF1IExhIFLDqXNpZGVuY2UuPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImgzX3N0eWxlIj5SZWpvaWduZXotbm91cw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXIgZmFjZWJvb2s8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS1FTkQgQ0FMTDJGT09URVItLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9mb290ZXI+DQogICAgICAgICAgICA8IS0tRU5EIEZPT1RFUi0tPg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJOYXYiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8iIHRpdGxlPSJhY2N1ZWlsIGR1IHNpdGUgTGEgUsOpc2lkZW5jZSI+QWNjdWVpbDwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3BsYW4tZHUtc2l0ZSIgdGl0bGU9Ik5hdmlndWVyIHN1ciBsZSBzaXRlIExhIFLDqXNpZGVuY2UiPlBsYW4gZHUgc2l0ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9jZ3UiIHRpdGxlPSJDb25kaXRpb25zIGfDqW7DqXJhbGVzIGQndXRpbGlzYXRpb24iPkNvbmRpdGlvbnMgZ8OpbsOpcmFsZXMgZCd1dGlsaXNhdGlvbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wb2xpdGlxdWUtY29uZmlkZW50aWFsaXRlIiB0aXRsZT0iUG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6kiPlBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3BvbGl0aXF1ZS1jb29raWVzIiB0aXRsZT0iUG9saXRpcXVlIGRlcyBjb29raWVzIj5Qb2xpdGlxdWUgZGVzIGNvb2tpZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwvdWw+DQoNCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNvcHlyaWdodCI+wqkgTGEgUsOpc2lkZW5jZSBEw6l2ZWxvcHBlbWVudCAyMDE4PC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDwvZGl2PjwhLS1GSU4gZHUgQ09OVEVORVIgR0xPQkFMIERFIExBIFBBR0UgLndyYXBwZXItLT4NCg0KICAgICAgICAgICAgPCEtLSBKYXZhU2NyaXB0IGF0IHRoZSBib3R0b20gZm9yIGZhc3QgcGFnZSBsb2FkaW5nIC0tPg0KICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy8vLy8vLy8vLy8vL1Njcm9sbCBUT1AgKyBjaGFyZ2VtZW50IGRlcyBKUy0tPg0KICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImdvX3RvcCIgdGl0bGU9IlJlbW9udGVyIj5SZW1vbnRlciA8L2E+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbl9wb3B1cF9kaXYiPg0KICAgICAgICAgICAgICAgIDxhIGlkPSJNZXNzYWdlQm94Q3RsX0xCRHVtbXkiIGhyZWY9ImphdmFzY3JpcHQ6X19kb1Bvc3RCYWNrKCYjMzk7Y3RsMDAkTWVzc2FnZUJveEN0bCRMQkR1bW15JiMzOTssJiMzOTsmIzM5OykiIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsiPjwvYT4NCjxkaXYgaWQ9Ik1lc3NhZ2VCb3hDdGxfUE1lc3NhZ2VCb3giIGNsYXNzPSJwb3B1cEluZm9ybWF0aXZlIj4NCgkNCiAgICA8ZGl2IGlkPSJNZXNzYWdlQm94Q3RsX1BJbmZvcyIgY2xhc3M9InBvcHVwQ3RuckluZm8iPg0KCQkNCiAgICAgICAgPGEgaWQ9Ik1lc3NhZ2VCb3hDdGxfTEJDbG9zZSIgY2xhc3M9ImNsb3NlQ3Jvc3MiIGhyZWY9ImphdmFzY3JpcHQ6X19kb1Bvc3RCYWNrKCYjMzk7Y3RsMDAkTWVzc2FnZUJveEN0bCRMQkNsb3NlJiMzOTssJiMzOTsmIzM5OykiPiAgICAgICAgDQogICAgICAgICAgICA8aW1nIGNsYXNzPSJjbG9zZXIiIHNyYz0iL2ltYWdlcy9jbG9zZV9waWMuc3ZnIiBhbHQ9IkZlcm1lciBsYSBmZW7DqnRyZSIvPg0KICAgICAgICA8L2E+DQogICAgICAgIDxkaXYgaWQ9Ik1lc3NhZ2VCb3hDdGxfVVBJbmZvcyI+DQoJCQkNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNZXNzYWdlQm94Q3RsX2g0VGl0bGUiIGNsYXNzPSJoNF9zdHlsZSI+SW5mb3JtYXRpdmUgcG9wdXAgYXZlYyBkZXMgc2F1dCBkZSBsaWduZTwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPHAgaWQ9Ik1lc3NhZ2VCb3hDdGxfcE1lc3NhZ2UiPg0KICAgICAgICAgICAgICAgICAgICBPbiBzYWl0IGRlcHVpcyBsb25ndGVtcHMgcXVlIHRyYXZhaWxsZXIgYXZlYyBkdSB0ZXh0ZSBsaXNpYmxlIGV0IGNvbnRlbmFudCBkdSBzZW5zIGVzdCBzb3VyY2UgZGUgZGlzdHJhY3Rpb25zLCBldCBlbXDDqmNoZSBkZSBzZSBjb25jZW50cmVyIHN1ciBsYSBtaXNlIGVuIHBhZ2UgZWxsZS1tw6ptZS4gTCdhdmFudGFnZSBkdSBMb3JlbSBJcHN1bSBzdXIgdW4gdGV4dGUgZ8OpbsOpcmlxdWUgY29tbWUgJ0R1IHRleHRlLiBEdSB0ZXh0ZS4gRHUgdGV4dGUuJyBlc3QgcXUnaWwgcG9zc8OoZGUgdW5lIGRpc3RyaWJ1dGlvbiBkZSBsZXR0cmVzIHBsdXMgb3UgbW9pbnMgbm9ybWFsZSwgZXQgZW4gdG91dCBjYXMgY29tcGFyYWJsZSBhdmVjIGNlbGxlIGR1IGZyYW7Dp2FpcyBzdGFuZGFyZC4NCiAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICANCgkJPC9kaXY+DQogICAgDQoJPC9kaXY+DQoNCjwvZGl2Pg0KDQoNCg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9IkZsb2F0aW5nVXBkYXRlUHJvZ3Jlc3NfVXBkYXRlUHJvZ3Jlc3MiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4NCgkNCiAgICAgICAgPGNlbnRlcj4NCiAgICAgICAgICAgIDxkaXYgaWQ9IkZsb2F0aW5nVXBkYXRlUHJvZ3Jlc3NfUGFuZWxQcm9ncmVzcyIgYWxpZ249ImNlbnRlciIgc3R5bGU9InotaW5kZXg6OTk5OTk5OTk7Ij4NCgkJDQogICAgICAgICAgICAgICAgPHRhYmxlIHN0eWxlPSJ3aWR0aDogMzAwcHg7Ij4NCiAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9IkZsb2F0aW5nVXBkYXRlUHJvZ3Jlc3NfSW1hZ2UiIHNyYz0iLi4vLi4vLi4vSW1hZ2VzL2FqYXgtbG9hZGVyLmdpZiIgYWx0PSJMb2FkZXIgaW1hZ2UiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9IkZsb2F0aW5nVXBkYXRlUHJvZ3Jlc3NfTGFiZWxQcm9ncmVzcyI+PGI+PGZvbnQgY29sb3I9IkdyYXkiIHNpemU9IjMiPk1pc2Ugw6Agam91ciBkZSBsJ2FmZmljaGFnZS4uLjwvZm9udD48L2I+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgDQoJPC9kaXY+DQogICAgICAgIDwvY2VudGVyPg0KICAgICAgICANCiAgICANCjwvZGl2Pg0KDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPCEtLU1lbnUgcmVzcG9uc2l2ZS0tPg0KICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9qcy9zaXRlLmpzIj48L3NjcmlwdD4NCg0KICAgICAgICAgICAgPCEtLSA0IHNjcmlwdHMgcG91ciBsZSBzY3JvbGwgYXV0byBkYW5zIGxlcyBwYWdlcyAtLT4NCiAgICAgICAgICAgIDxzY3JpcHQgc3JjPSIvanMvbG9jYWxzY3JvbGwvanF1ZXJ5LmxvY2Fsc2Nyb2xsLmpzIj48L3NjcmlwdD4NCiAgICAgICAgICAgIDxzY3JpcHQgc3JjPSIvanMvbGFuY2VtZW50LmpzIj48L3NjcmlwdD4NCiAgICAgICAgICAgIDwhLS0gcGVybWV0IGxlIGxhbmNlbWVudCBkZSBsYSBmb25jdGlvbiBkZSBzY3JvbGwgLS0+DQogICAgICAgICAgICA8c2NyaXB0IHNyYz0iL2pzL2xvY2Fsc2Nyb2xsL2pxdWVyeS5zY3JvbGxUby5qcyI+PC9zY3JpcHQ+DQogICAgICAgIA0KDQogICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgICAgICAgICAgJCgnI1BTZWFyY2hTaG9ydGN1dCcpLmNsaWNrKGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgIGlmICgkKCcjZGl2U2VhcmNoU2hvcnRjdXQnKS5oYXNDbGFzcygnZGl2U2VhcmNoU2hvcnRjdXRfY2xvc2VkJykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaXZTZWFyY2hTaG9ydGN1dCcpLnN3aXRjaENsYXNzKCdkaXZTZWFyY2hTaG9ydGN1dF9jbG9zZWQnLCdkaXZTZWFyY2hTaG9ydGN1dF9vcGVuZWQnLCA1MDAsICJlYXNlT3V0U2luZSIpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2RpdlNlYXJjaFNob3J0Y3V0Jykuc3dpdGNoQ2xhc3MoJ2RpdlNlYXJjaFNob3J0Y3V0X29wZW5lZCcsICdkaXZTZWFyY2hTaG9ydGN1dF9jbG9zZWQnLCA1MDAsICJlYXNlT3V0U2luZSIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgICAgICAgICAgJCgnI2J0bkxvZ0NwdGUnKS5jbGljayhmdW5jdGlvbiAoZSkgeyAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgLy8kKCcjZGl2TG9nQ3B0ZScpLnRvZ2dsZUNsYXNzKCdkaXZMb2dDcHRlX29wZW5lZCcsIDUwMCwgImVhc2VPdXRTaW5lIik7DQogICAgICAgICAgICAgICAgICAgIGlmICgkKCcjZGl2TG9nQ3B0ZScpLmhhc0NsYXNzKCdkaXZMb2dDcHRlX2Nsb3NlZCcpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcjZGl2TG9nQ3B0ZScpLnN3aXRjaENsYXNzKCdkaXZMb2dDcHRlX2Nsb3NlZCcsICdkaXZMb2dDcHRlX29wZW5lZCcsIDUwMCwgImVhc2VPdXRTaW5lIik7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcjZGl2TG9nQ3B0ZScpLnN3aXRjaENsYXNzKCdkaXZMb2dDcHRlX29wZW5lZCcsICdkaXZMb2dDcHRlX2Nsb3NlZCcsIDUwMCwgImVhc2VPdXRTaW5lIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgICAgICAgICAkKCIuaWdub3JlLWNsaWNrIikuY2xpY2soZnVuY3Rpb24gKGUpIHsgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIENvbmRpdGlvbiBkJ2FmZmljaGFnZSBkdSBib3V0b24NCiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5zY3JvbGxUb3AoKSA+IDEwMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5nb190b3AnKS5mYWRlSW4oKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5nb190b3AnKS5mYWRlT3V0KCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICAvLyBFdmVuZW1lbnQgYXUgY2xpYw0KICAgICAgICAgICAgICAgICAgICAkKCcuZ29fdG9wJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IDAgfSwgODAwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuX3BvcHVwX2RpdiI+DQogICAgICAgICAgICAgICAgPGEgaWQ9IkxCRHVtbXkiIGhyZWY9ImphdmFzY3JpcHQ6X19kb1Bvc3RCYWNrKCYjMzk7Y3RsMDAkTEJEdW1teSYjMzk7LCYjMzk7JiMzOTspIj48L2E+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0iUFBvcHVwQ29uY291cnMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICA8YSBpZD0iSExDb25jb3VycyIgaHJlZj0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvY29uY291cnMiIHRhcmdldD0iX2JsYW5rIj48aW1nIHNyYz0iLi4vLi4vLi4vSW1hZ2VzL0VOQ0FSVF9TSVRFX0FDQ1VFSUxfVFJPVVZFWl9CVU5OWS5qcGciIGFsdD0iIiAvPjwvYT4NCiAgICAgICAgICAgICAgICANCjwvZGl2PiAgIA0KICAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8YSBpZD0iTEJEdW1teUxpdnJlQmxhbmMiIGhyZWY9ImphdmFzY3JpcHQ6X19kb1Bvc3RCYWNrKCYjMzk7Y3RsMDAkTEJEdW1teUxpdnJlQmxhbmMmIzM5OywmIzM5OyYjMzk7KSI+PC9hPg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9IlBQb3B1cExpdnJlQmxhbmMiIGNsYXNzPSJwb3B1cExpdnJlQmxhbmMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW5ldXJQb3B1cExpdnJlQmxhbmMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xvc2VDcm9zc0ltZ1BvcHVwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTEJDbG9zZUxpdnJlQmxhbmMiIHRpdGxlPSJmZXJtZXIiIGhyZWY9ImphdmFzY3JpcHQ6V2ViRm9ybV9Eb1Bvc3RCYWNrV2l0aE9wdGlvbnMobmV3IFdlYkZvcm1fUG9zdEJhY2tPcHRpb25zKCZxdW90O2N0bDAwJExCQ2xvc2VMaXZyZUJsYW5jJnF1b3Q7LCAmcXVvdDsmcXVvdDssIGZhbHNlLCAmcXVvdDsmcXVvdDssICZxdW90Oy4uLy4uLy4uLyMmcXVvdDssIGZhbHNlLCB0cnVlKSkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9Dcm9zc0Nsb3NlUG9wdXBMaXZyZUJsYW5jLnBuZyIgYWx0PSJmZXJtZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRyZVBvcHVwTGl2cmVCbGFuYyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUsOpdXNzaXIgbGEgdmVudGUgZGUgdm90cmUgYmllbiBpbW1vYmlsaWVyDQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkZXRhaWxQb3B1cExpdnJlQmxhbmMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvdXIgdG91dCBzYXZvaXIgc3VyIGxlcyBib25uZXMgcXVlc3Rpb25zIMOgIHNlIHBvc2VyIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvdXIgcsOpdXNzaXIgbGEgdmVudGUgZGUgdm90cmUgYmllbg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxsMlBvcHVwTGl2cmVCbGFuYyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IkxCRG93bmxvYWRMaXZyZUJsYW5jIiBocmVmPSJqYXZhc2NyaXB0OldlYkZvcm1fRG9Qb3N0QmFja1dpdGhPcHRpb25zKG5ldyBXZWJGb3JtX1Bvc3RCYWNrT3B0aW9ucygmcXVvdDtjdGwwMCRMQkRvd25sb2FkTGl2cmVCbGFuYyZxdW90OywgJnF1b3Q7JnF1b3Q7LCBmYWxzZSwgJnF1b3Q7JnF1b3Q7LCAmcXVvdDsuLi8uLi8uLi9saXZyZS1ibGFuYy12ZW5kZXVyJnF1b3Q7LCBmYWxzZSwgdHJ1ZSkpIj4+IFTDqWzDqWNoYXJnZXIgbGUgZ3VpZGU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVmdXNUw6lsw6ljaGFyZ2VMaXZyZUJsYW5jIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTEJSZWZ1c0xpdnJlQmxhbmMiIGhyZWY9ImphdmFzY3JpcHQ6V2ViRm9ybV9Eb1Bvc3RCYWNrV2l0aE9wdGlvbnMobmV3IFdlYkZvcm1fUG9zdEJhY2tPcHRpb25zKCZxdW90O2N0bDAwJExCUmVmdXNMaXZyZUJsYW5jJnF1b3Q7LCAmcXVvdDsmcXVvdDssIGZhbHNlLCAmcXVvdDsmcXVvdDssICZxdW90Oy4uLy4uLy4uLyMmcXVvdDssIGZhbHNlLCB0cnVlKSkiPlVuZSBhdXRyZSBmb2lzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICANCjwvZGl2PiAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPGEgaWQ9IkxCRHVtbXlDb3ZpZDE5IiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCRHVtbXlDb3ZpZDE5JiMzOTssJiMzOTsmIzM5OykiPjwvYT4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJQUG9wdXBDb3ZpZDE5IiBjbGFzcz0icG9wdXBDb3ZpZDE5Ij4NCgkNCgkgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVuZXVyUG9wdXBDb3ZpZDE5Ij4NCgkJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsb3NlQ3Jvc3NJbWdQb3B1cCI+DQoJCQkgICAgICAgICAgICAgICAgPGEgaWQ9IkxCQ2xvc2VDb3ZpZDE5IiB0aXRsZT0iZmVybWVyIiBocmVmPSJqYXZhc2NyaXB0OldlYkZvcm1fRG9Qb3N0QmFja1dpdGhPcHRpb25zKG5ldyBXZWJGb3JtX1Bvc3RCYWNrT3B0aW9ucygmcXVvdDtjdGwwMCRMQkNsb3NlQ292aWQxOSZxdW90OywgJnF1b3Q7JnF1b3Q7LCBmYWxzZSwgJnF1b3Q7JnF1b3Q7LCAmcXVvdDsuLi8uLi8uLi8jJnF1b3Q7LCBmYWxzZSwgdHJ1ZSkpIj4NCgkJCQkgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvQ3Jvc3NDbG9zZVBvcHVwTGl2cmVCbGFuYy5wbmciIGFsdD0iZmVybWVyIi8+DQoJCQkgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgDQoJICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KPC9kaXY+ICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgaWQ9IlBBY2NlcHRDb29raWVzIiBjbGFzcz0iY29va2llc0JhciI+DQoJDQogICAgICAgICAgICAgICAgPHA+DQoJCQkgICAgRW4gcG91cnN1aXZhbnQgbGEgbmF2aWdhdGlvbiBzdXIgY2Ugc2l0ZSwgdm91cyBhY2NlcHRleiBsZSBkw6lww7R0IGRlIGNvb2tpZXMgZXQgYXV0cmVzIHRhZ3MgcG91ciB2b3VzIHByb3Bvc2VyIGRlcyBjb250ZW51cyBldCB1bmUgZXhww6lyaWVuY2UgZGUgbmF2aWdhdGlvbiBwZXJzb25uYWxpc8OpcywgZGVzIGZvbmN0aW9ucyBkZSBwYXJ0YWdlIHZlcnMgbGVzIHLDqXNlYXV4IHNvY2lhdXggZXQgYW5hbHlzZXIgbCdhdWRpZW5jZSBkdSBzaXRlIGludGVybmV0LiANCgkJCSAgICA8L3A+DQoJCQkJDQoJCQkgICAgPGRpdiBjbGFzcz0iYnRuQWNjZXB0Q29va2llcyI+DQogICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQkFjY2VwdENvb2tpZXMiIGhyZWY9ImphdmFzY3JpcHQ6X19kb1Bvc3RCYWNrKCYjMzk7Y3RsMDAkTEJBY2NlcHRDb29raWVzJiMzOTssJiMzOTsmIzM5OykiPkonYWNjZXB0ZTwvYT4JCQkJDQoJCQkgICAgPC9kaXY+DQogICAgICAgICAgICANCjwvZGl2PiAgICAgICAgDQoNCiAgICAgICAgDQoNCjxTY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4gDQp2YXIgTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdF9PTE1hcF9pbml0aWFsaXplZCA9IGZhbHNlO1N5cy5XZWJGb3Jtcy5QYWdlUmVxdWVzdE1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5hZGRfcGFnZUxvYWRlZChJbml0aWFsaXplX01haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXQpOw0KZnVuY3Rpb24gSW5pdGlhbGl6ZV9NYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0KCkgew0KaWYoTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdF9PTE1hcF9pbml0aWFsaXplZCA9PSB0cnVlKXtyZXR1cm47fSBlbHNlIHtNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X09MTWFwX2luaXRpYWxpemVkPXRydWU7fXZhciBNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X09MTWFwID0gbnVsbDsNCk1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfT0xNYXA9IG5ldyBPcGVuTGF5ZXJNYXAoJ01haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXQnKTsNCk1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfT0xNYXAuQWRkTGluZVN0cmluZ3MoW3siQ29sb3IiOiIxMDUsIDEwNSwgMTA1IiwiV2lkdGgiOjQsIkNvb3JkaW5hdGVzIjpbeyJsYXRpdHVkZSI6NDguODg0MzYzLCJsb25naXR1ZGUiOjIuMzY0NjExfSx7ImxhdGl0dWRlIjo0OC44ODY4OCwibG9uZ2l0dWRlIjoyLjM2NjgzNX0seyJsYXRpdHVkZSI6NDguODk0NTgzLCJsb25naXR1ZGUiOjIuMzcwMzE0fSx7ImxhdGl0dWRlIjo0OC44OTUyNTYsImxvbmdpdHVkZSI6Mi4zNzE3MzN9LHsibGF0aXR1ZGUiOjQ4Ljg5NTcwNiwibG9uZ2l0dWRlIjoyLjM3MTMwNX0seyJsYXRpdHVkZSI6NDguODk2NTI3LCJsb25naXR1ZGUiOjIuMzcwNDd9LHsibGF0aXR1ZGUiOjQ4LjkwMjIzNCwibG9uZ2l0dWRlIjoyLjM3MDM2MX0seyJsYXRpdHVkZSI6NDguOTAyNTMxLCJsb25naXR1ZGUiOjIuMzc5Njc4fSx7ImxhdGl0dWRlIjo0OC45MDI1MjQsImxvbmdpdHVkZSI6Mi4zODAxNzF9LHsibGF0aXR1ZGUiOjQ4LjkwMjYyNiwibG9uZ2l0dWRlIjoyLjM4NDAyOX0seyJsYXRpdHVkZSI6NDguOTAyNjEsImxvbmdpdHVkZSI6Mi4zODUxODd9LHsibGF0aXR1ZGUiOjQ4LjkwMTY1LCJsb25naXR1ZGUiOjIuMzg5NzIzfSx7ImxhdGl0dWRlIjo0OC45MDEzNTEsImxvbmdpdHVkZSI6Mi4zOTA5MTh9LHsibGF0aXR1ZGUiOjQ4LjkwMTI2LCJsb25naXR1ZGUiOjIuMzkxMjg2fSx7ImxhdGl0dWRlIjo0OC44OTg5NjksImxvbmdpdHVkZSI6Mi4zOTU0OH0seyJsYXRpdHVkZSI6NDguODk3OTM4LCJsb25naXR1ZGUiOjIuMzk2MTIxfSx7ImxhdGl0dWRlIjo0OC44OTYxMDYsImxvbmdpdHVkZSI6Mi4zOTcyMzh9LHsibGF0aXR1ZGUiOjQ4Ljg5MDQ1OSwibG9uZ2l0dWRlIjoyLjM5ODkyMn0seyJsYXRpdHVkZSI6NDguODg0NzkzLCJsb25naXR1ZGUiOjIuMzk5ODY0fSx7ImxhdGl0dWRlIjo0OC44ODI1MTYsImxvbmdpdHVkZSI6Mi40MDI4MDJ9LHsibGF0aXR1ZGUiOjQ4Ljg4MDUzMSwibG9uZ2l0dWRlIjoyLjQwOTYzOX0seyJsYXRpdHVkZSI6NDguODc4NTUzLCJsb25naXR1ZGUiOjIuNDExMTI0fSx7ImxhdGl0dWRlIjo0OC44NzYwNDIsImxvbmdpdHVkZSI6Mi40MDI2MjR9LHsibGF0aXR1ZGUiOjQ4Ljg3NTk2OSwibG9uZ2l0dWRlIjoyLjQwMjQ0fSx7ImxhdGl0dWRlIjo0OC44NzU1OTMsImxvbmdpdHVkZSI6Mi4zOTkyNDh9LHsibGF0aXR1ZGUiOjQ4Ljg3NTU4MiwibG9uZ2l0dWRlIjoyLjM5OTE2fSx7ImxhdGl0dWRlIjo0OC44NzUzMjgsImxvbmdpdHVkZSI6Mi4zOTQ5MzN9LHsibGF0aXR1ZGUiOjQ4Ljg3NTI2NCwibG9uZ2l0dWRlIjoyLjM4OTQ2fSx7ImxhdGl0dWRlIjo0OC44NzQ3NTgsImxvbmdpdHVkZSI6Mi4zODgxNjF9LHsibGF0aXR1ZGUiOjQ4Ljg3NDY1LCJsb25naXR1ZGUiOjIuMzg2NzQzfSx7ImxhdGl0dWRlIjo0OC44NzM4OTQsImxvbmdpdHVkZSI6Mi4zODUxNjl9LHsibGF0aXR1ZGUiOjQ4Ljg3MjAxNCwibG9uZ2l0dWRlIjoyLjM3Njc1Mn0seyJsYXRpdHVkZSI6NDguODc3OTUyLCJsb25naXR1ZGUiOjIuMzcwMjE0fSx7ImxhdGl0dWRlIjo0OC44ODE5ODEsImxvbmdpdHVkZSI6Mi4zNzAyNjd9LHsibGF0aXR1ZGUiOjQ4Ljg4MjcyMywibG9uZ2l0dWRlIjoyLjM2OTc0M30seyJsYXRpdHVkZSI6NDguODg0MjI2LCJsb25naXR1ZGUiOjIuMzY4Njc3fSx7ImxhdGl0dWRlIjo0OC44ODQzNjMsImxvbmdpdHVkZSI6Mi4zNjQ2MTF9XSwiVHlwZSI6IkxpbmVTdHJpbmciLCJOYW1lIjpudWxsLCJJZEZlYXR1cmUiOm51bGwsIkNsaWNrYWJsZSI6ZmFsc2V9LHsiQ29sb3IiOiIyNTUsIDAsIDAiLCJXaWR0aCI6NCwiQ29vcmRpbmF0ZXMiOlt7ImxhdGl0dWRlIjo0OC44ODAxNzQsImxvbmdpdHVkZSI6Mi4zOTgyOTJ9LHsibGF0aXR1ZGUiOjQ4Ljg4MDEyNywibG9uZ2l0dWRlIjoyLjM5ODQ5Nn0seyJsYXRpdHVkZSI6NDguODc5NjA0LCJsb25naXR1ZGUiOjIuMzk5NzE4fSx7ImxhdGl0dWRlIjo0OC44NzgwNTIsImxvbmdpdHVkZSI6Mi40MDAzMTl9LHsibGF0aXR1ZGUiOjQ4Ljg3NzQ2LCJsb25naXR1ZGUiOjIuNDAwMjc3fSx7ImxhdGl0dWRlIjo0OC44NzczNzcsImxvbmdpdHVkZSI6Mi40MDAwNDF9LHsibGF0aXR1ZGUiOjQ4Ljg3NTU5MywibG9uZ2l0dWRlIjoyLjM5OTI0OH0seyJsYXRpdHVkZSI6NDguODc1OTY5LCJsb25naXR1ZGUiOjIuNDAyNDR9LHsibGF0aXR1ZGUiOjQ4Ljg3NjA0MiwibG9uZ2l0dWRlIjoyLjQwMjYyNH0seyJsYXRpdHVkZSI6NDguODc4NTUzLCJsb25naXR1ZGUiOjIuNDExMTI0fSx7ImxhdGl0dWRlIjo0OC44ODA1MzEsImxvbmdpdHVkZSI6Mi40MDk2Mzl9LHsibGF0aXR1ZGUiOjQ4Ljg4MjUxNiwibG9uZ2l0dWRlIjoyLjQwMjgwMn0seyJsYXRpdHVkZSI6NDguODgwNjUsImxvbmdpdHVkZSI6Mi40MDEzNjl9LHsibGF0aXR1ZGUiOjQ4Ljg3OTUzOSwibG9uZ2l0dWRlIjoyLjQwMTI4OX0seyJsYXRpdHVkZSI6NDguODgwNjM4LCJsb25naXR1ZGUiOjIuMzk5OTl9LHsibGF0aXR1ZGUiOjQ4Ljg4MDI4MSwibG9uZ2l0dWRlIjoyLjM5ODI5N30seyJsYXRpdHVkZSI6NDguODgwMTc0LCJsb25naXR1ZGUiOjIuMzk4MjkyfV0sIlR5cGUiOiJMaW5lU3RyaW5nIiwiTmFtZSI6bnVsbCwiSWRGZWF0dXJlIjpudWxsLCJDbGlja2FibGUiOmZhbHNlfV0pOw0KfTsNCjwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCnZhciBHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9BdXRvQ29tcGxldGVSZWZfVEJBdXRvQ29tcGxldGVfQXV0b0NvbXBsZXRlTWFuYWdlcj1udWxsOw0KaWYoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQkF1dG9Db21wbGV0ZScpICE9IG51bGwpIHtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlJykub25mb2N1cyA9IGZ1bmN0aW9uIChlKSB7DQppZiAoR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlX0F1dG9Db21wbGV0ZU1hbmFnZXIgPT0gbnVsbCkgew0KdmFyIHNlYXJjaF9pbnB1dD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlJyk7DQp2YXIgdmFsdWVfaW5wdXQ9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQlZhbHVlJyk7DQp2YXIgcmVzdWx0c19kaXY9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9SZXN1bHRzRGl2Jyk7DQokKCcjR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlJykuYXR0cignYXV0b2NvbXBsZXRlJywgJ09mZicpOw0KJCgnI0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQkF1dG9Db21wbGV0ZScpLmNsb3Nlc3QoJ2Zvcm0nKS5hdHRyKCdhdXRvY29tcGxldGUnLCAnT2ZmJyk7DQppZihzZWFyY2hfaW5wdXQhPW51bGwgJiYgdmFsdWVfaW5wdXQhPW51bGwgJiYgcmVzdWx0c19kaXYhPW51bGwpew0KR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlX0F1dG9Db21wbGV0ZU1hbmFnZXI9IG5ldyBBdXRvQ29tcGxldGVNYW5hZ2VyKHNlYXJjaF9pbnB1dCwgdmFsdWVfaW5wdXQsIHJlc3VsdHNfZGl2LCAnL0F1dG9Db21wbGV0ZVNlcnZpY2UuYXNteC9HZXRSZWZzQ29tcGxldGlvbkxpc3QnLCAnQXVjdW4gcsOpc3VsdGF0JywgZmFsc2UsZmFsc2UsJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQkF1dG9Db21wbGV0ZScpOw0KfQ0KfQ0KfTsNCn0NCjwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCmdhKCdzZW5kJywgJ2V2ZW50JywgJ1Byb2R1aXRzJywgJ0NvbnN1bHRhdGlvbicsICcxMDAwMTQxMDg2OzIzNDA7UEFSSVMgMTknLCAxLHsnZGltZW5zaW9uMSc6JzEwMDAxNDEwODYnLCAnZGltZW5zaW9uMic6ICdvZmZlcmRldGFpbCcsICdkaW1lbnNpb24zJzogJzQ2ODAwMCd9KTs8L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4NCiAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAkLmFqYXgoew0KICAgICAgICAgICB1cmw6ICcvU3RhdGlzdGlxdWVzU2VydmljZS5hc214L0luY3JlbWVudFNjb3JlRGV0YWlsUHJvZHVpdCcsDQogICAgICAgICAgIGRhdGE6ICJ7ICdDb2RlUHJvZHVpdCc6IDg0MzE4OSwgJ0lzUmVjbyc6IGZhbHNlfSIsDQogICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsDQogICAgICAgICAgIHR5cGU6ICdQT1NUJywNCiAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgYXN5bmM6IHRydWUNCiAgICAgICB9KTsNCiAgIH0sIDEwMCk7DQo8L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+IA0KdmFyIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19UQklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19UQklucHV0Jyk7dmFyIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlcycpO01TRERNYW5hZ2VyKEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19UQklucHV0LEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19WYWx1ZXNEaXYsZmFsc2UpOzwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCnZhciBHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NVlRCVmlsbGVzX1RCQXV0b0NvbXBsZXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJBdXRvQ29tcGxldGUnKTt2YXIgR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVZUQlZpbGxlc19UQlZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJWYWx1ZScpO01WVEJNYW5hZ2VyKEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJBdXRvQ29tcGxldGUsIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJWYWx1ZSwnL0F1dG9Db21wbGV0ZVNlcnZpY2UuYXNteC9HZXRWaWxsZXNDb21wbGV0aW9uTGlzdCcsIHsgc3RhcnRUZXh0OiAnVmlsbGUgb3UgQ1AnLCBlbXB0eVRleHQ6ICdQYXMgZGUgcsOpc3VsdGF0JywgYXNIdG1sSUQ6ICdHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NVlRCVmlsbGVzJywgc2VsZWN0ZWRJdGVtUHJvcDogJ25hbWUnLCBzZWFyY2hPYmpQcm9wczogJ25hbWUnLCBhdXRvX3Bvc3RiYWNrOiBmYWxzZSwgcG9zdGJhY2tfdGFyZ2V0OiAnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVZUQlZpbGxlc19UQkF1dG9Db21wbGV0ZScsIHByZUZpbGw6IFtdfSk7PC9zY3JpcHQ+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCi8vPCFbQ0RBVEFbDQpTeXMuRXh0ZW5kZWQuVUkuTG9jYWxpemF0aW9uLlNldExvY2FsZSgiZnIiKTsvL11dPg0KPC9zY3JpcHQ+DQo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+DQogICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgdXJsOiAnL1N0YXRpc3RpcXVlc1NlcnZpY2UuYXNteC9JbmNyZW1lbnRTY29yZUxpc3RpbmdQcm9kdWl0JywNCiAgICAgICAgICAgZGF0YTogInsgJ0NvZGVQcm9kdWl0JzogNzEyODI3LCAnSXNSZWNvJzogdHJ1ZX0iLA0KICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLA0KICAgICAgICAgICB0eXBlOiAnUE9TVCcsDQogICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsDQogICAgICAgICAgIGFzeW5jOiB0cnVlDQogICAgICAgfSk7DQogICB9LCAxMDApOw0KPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPg0KICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICQuYWpheCh7DQogICAgICAgICAgIHVybDogJy9TdGF0aXN0aXF1ZXNTZXJ2aWNlLmFzbXgvSW5jcmVtZW50U2NvcmVMaXN0aW5nUHJvZHVpdCcsDQogICAgICAgICAgIGRhdGE6ICJ7ICdDb2RlUHJvZHVpdCc6IDgwNzk1OCwgJ0lzUmVjbyc6IHRydWV9IiwNCiAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywNCiAgICAgICAgICAgdHlwZTogJ1BPU1QnLA0KICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLA0KICAgICAgICAgICBhc3luYzogdHJ1ZQ0KICAgICAgIH0pOw0KICAgfSwgMTAwKTsNCjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4NCiAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAkLmFqYXgoew0KICAgICAgICAgICB1cmw6ICcvU3RhdGlzdGlxdWVzU2VydmljZS5hc214L0luY3JlbWVudFNjb3JlTGlzdGluZ1Byb2R1aXQnLA0KICAgICAgICAgICBkYXRhOiAieyAnQ29kZVByb2R1aXQnOiA4MjU4NTcsICdJc1JlY28nOiB0cnVlfSIsDQogICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsDQogICAgICAgICAgIHR5cGU6ICdQT1NUJywNCiAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgYXN5bmM6IHRydWUNCiAgICAgICB9KTsNCiAgIH0sIDEwMCk7DQo8L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+DQogICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgdXJsOiAnL1N0YXRpc3RpcXVlc1NlcnZpY2UuYXNteC9JbmNyZW1lbnRTY29yZUxpc3RpbmdQcm9kdWl0JywNCiAgICAgICAgICAgZGF0YTogInsgJ0NvZGVQcm9kdWl0JzogODQwNzYwLCAnSXNSZWNvJzogdHJ1ZX0iLA0KICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLA0KICAgICAgICAgICB0eXBlOiAnUE9TVCcsDQogICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsDQogICAgICAgICAgIGFzeW5jOiB0cnVlDQogICAgICAgfSk7DQogICB9LCAxMDApOw0KPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPg0KICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICQuYWpheCh7DQogICAgICAgICAgIHVybDogJy9TdGF0aXN0aXF1ZXNTZXJ2aWNlLmFzbXgvSW5jcmVtZW50U2NvcmVMaXN0aW5nUHJvZHVpdCcsDQogICAgICAgICAgIGRhdGE6ICJ7ICdDb2RlUHJvZHVpdCc6IDg1NTg3NiwgJ0lzUmVjbyc6IHRydWV9IiwNCiAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywNCiAgICAgICAgICAgdHlwZTogJ1BPU1QnLA0KICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLA0KICAgICAgICAgICBhc3luYzogdHJ1ZQ0KICAgICAgIH0pOw0KICAgfSwgMTAwKTsNCjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4NCiAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAkLmFqYXgoew0KICAgICAgICAgICB1cmw6ICcvU3RhdGlzdGlxdWVzU2VydmljZS5hc214L0luY3JlbWVudFNjb3JlTGlzdGluZ1Byb2R1aXQnLA0KICAgICAgICAgICBkYXRhOiAieyAnQ29kZVByb2R1aXQnOiA4NjI4MjQsICdJc1JlY28nOiB0cnVlfSIsDQogICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsDQogICAgICAgICAgIHR5cGU6ICdQT1NUJywNCiAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgYXN5bmM6IHRydWUNCiAgICAgICB9KTsNCiAgIH0sIDEwMCk7DQo8L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCi8vPCFbQ0RBVEFbDQpTeXMuRXh0ZW5kZWQuVUkuTG9jYWxpemF0aW9uLlNldExvY2FsZSgiZnIiKTtTeXMuRXh0ZW5kZWQuVUkuTG9jYWxpemF0aW9uLlNldExvY2FsZSgiZnIiKTtTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuVmFsaWRhdG9yQ2FsbG91dEJlaGF2aW9yLCB7IkNsaWVudFN0YXRlRmllbGRJRCI6Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZOb21fVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyX0NsaWVudFN0YXRlIiwiY2xvc2VJbWFnZVVybCI6Ii9XZWJSZXNvdXJjZS5heGQ/ZD1Ob0RkdjMwdzdhdmNLNmJDaDJQckZGWG5PdDkzSURSQWY1R0I1aGpvNEY1dkM2VXdUSFNjYjdyX093YU50SGFRVjZleVVGLTFVaVNERTlRalVxaXZOSWIwYUt4QTIwNVU2LTBTVEctTi1XRGpjTWY1Q0FVa0w2eGZreUhIWEtQMjN3aUo4N3RVT0pra1hISXlrMlMzdWYwNXQxVkt1d2NiQ2FQOWpQTHNvSnMxXHUwMDI2dD02MzY5NzAyMzA0ODAwMDAwMDAiLCJpZCI6IlJGVk5vbV9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXIiLCJwb3B1cFBvc2l0aW9uIjoyLCJ3YXJuaW5nSWNvbkltYWdlVXJsIjoiL1dlYlJlc291cmNlLmF4ZD9kPU5YVDlZSjhRcVMzYW5LLXFKeVhOQXg5RmVaSXJaaVlnMUdLR2FKR1RDZFRPN2EyMHY5SlVjQmdJalJiNFJkRVlXWjVvR0ZKLUlXaWtJTDBURWpxZ0NiNFNVNEdHT3JFMU1rNGJ1Y0gtTGt1OWNLX0JHeVJJOFR0M0xmQWZscDdCV2YwN2lxM1o1TlUzM1BtVmxhdE5yZ0o4Q3JSaWRGRWdXOUxEUk9Wek00VTFcdTAwMjZ0PTYzNjk3MDIzMDQ4MDAwMDAwMCJ9LCBudWxsLCBudWxsLCAkZ2V0KCJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfUkZWTm9tIikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuVmFsaWRhdG9yQ2FsbG91dEJlaGF2aW9yLCB7IkNsaWVudFN0YXRlRmllbGRJRCI6Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiLCJjbG9zZUltYWdlVXJsIjoiL1dlYlJlc291cmNlLmF4ZD9kPU5vRGR2MzB3N2F2Y0s2YkNoMlByRkZYbk90OTNJRFJBZjVHQjVoam80RjV2QzZVd1RIU2NiN3JfT3dhTnRIYVFWNmV5VUYtMVVpU0RFOVFqVXFpdk5JYjBhS3hBMjA1VTYtMFNURy1OLVdEamNNZjVDQVVrTDZ4Zmt5SEhYS1AyM3dpSjg3dFVPSmtrWEhJeWsyUzN1ZjA1dDFWS3V3Y2JDYVA5alBMc29KczFcdTAwMjZ0PTYzNjk3MDIzMDQ4MDAwMDAwMCIsImlkIjoiUkZWRW1haWxfVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyIiwicG9wdXBQb3NpdGlvbiI6Miwid2FybmluZ0ljb25JbWFnZVVybCI6Ii9XZWJSZXNvdXJjZS5heGQ/ZD1OWFQ5WUo4UXFTM2FuSy1xSnlYTkF4OUZlWklyWmlZZzFHS0dhSkdUQ2RUTzdhMjB2OUpVY0JnSWpSYjRSZEVZV1o1b0dGSi1JV2lrSUwwVEVqcWdDYjRTVTRHR09yRTFNazRidWNILUxrdTljS19CR3lSSThUdDNMZkFmbHA3QldmMDdpcTNaNU5VMzNQbVZsYXROcmdKOENyUmlkRkVnVzlMRFJPVnpNNFUxXHUwMDI2dD02MzY5NzAyMzA0ODAwMDAwMDAifSwgbnVsbCwgbnVsbCwgJGdldCgiTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1JGVkVtYWlsIikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuVmFsaWRhdG9yQ2FsbG91dEJlaGF2aW9yLCB7IkNsaWVudFN0YXRlRmllbGRJRCI6Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRVZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiLCJjbG9zZUltYWdlVXJsIjoiL1dlYlJlc291cmNlLmF4ZD9kPU5vRGR2MzB3N2F2Y0s2YkNoMlByRkZYbk90OTNJRFJBZjVHQjVoam80RjV2QzZVd1RIU2NiN3JfT3dhTnRIYVFWNmV5VUYtMVVpU0RFOVFqVXFpdk5JYjBhS3hBMjA1VTYtMFNURy1OLVdEamNNZjVDQVVrTDZ4Zmt5SEhYS1AyM3dpSjg3dFVPSmtrWEhJeWsyUzN1ZjA1dDFWS3V3Y2JDYVA5alBMc29KczFcdTAwMjZ0PTYzNjk3MDIzMDQ4MDAwMDAwMCIsImlkIjoiUkVWRW1haWxfVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyIiwicG9wdXBQb3NpdGlvbiI6Miwid2FybmluZ0ljb25JbWFnZVVybCI6Ii9XZWJSZXNvdXJjZS5heGQ/ZD1OWFQ5WUo4UXFTM2FuSy1xSnlYTkF4OUZlWklyWmlZZzFHS0dhSkdUQ2RUTzdhMjB2OUpVY0JnSWpSYjRSZEVZV1o1b0dGSi1JV2lrSUwwVEVqcWdDYjRTVTRHR09yRTFNazRidWNILUxrdTljS19CR3lSSThUdDNMZkFmbHA3QldmMDdpcTNaNU5VMzNQbVZsYXROcmdKOENyUmlkRkVnVzlMRFJPVnpNNFUxXHUwMDI2dD02MzY5NzAyMzA0ODAwMDAwMDAifSwgbnVsbCwgbnVsbCwgJGdldCgiTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1JFVkVtYWlsIikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuTW9kYWxQb3B1cEJlaGF2aW9yLCB7ImJhY2tncm91bmRDc3NDbGFzcyI6Im1vZGFsQmFja2dyb3VuZCIsImR5bmFtaWNTZXJ2aWNlUGF0aCI6Ii9maWNoZS1wcm9kdWl0LmFzcHgiLCJpZCI6Ik1lc3NhZ2VCb3hDdGxfUE1lc3NhZ2VCb3hfTW9kYWxQb3B1cEV4dGVuZGVyIiwib2tDb250cm9sSUQiOiJNZXNzYWdlQm94Q3RsX0xCQ2xvc2UiLCJwb3B1cENvbnRyb2xJRCI6Ik1lc3NhZ2VCb3hDdGxfUE1lc3NhZ2VCb3gifSwgbnVsbCwgbnVsbCwgJGdldCgiTWVzc2FnZUJveEN0bF9MQkR1bW15IikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuQWx3YXlzVmlzaWJsZUNvbnRyb2xCZWhhdmlvciwgeyJob3Jpem9udGFsT2Zmc2V0IjoxNTAsImhvcml6b250YWxTaWRlIjoxLCJpZCI6IkZsb2F0aW5nVXBkYXRlUHJvZ3Jlc3NfQWx3YXlzVmlzaWJsZUNvbnRyb2xFeHRlbmRlciIsInNjcm9sbEVmZmVjdER1cmF0aW9uIjoxMDAwLCJ2ZXJ0aWNhbFNpZGUiOjF9LCBudWxsLCBudWxsLCAkZ2V0KCJGbG9hdGluZ1VwZGF0ZVByb2dyZXNzX1BhbmVsUHJvZ3Jlc3MiKSk7DQp9KTsNClN5cy5BcHBsaWNhdGlvbi5hZGRfaW5pdChmdW5jdGlvbigpIHsNCiAgICAkY3JlYXRlKFN5cy5FeHRlbmRlZC5VSS5Nb2RhbFBvcHVwQmVoYXZpb3IsIHsiYmFja2dyb3VuZENzc0NsYXNzIjoibW9kYWxCYWNrZ3JvdW5kIiwiZHluYW1pY1NlcnZpY2VQYXRoIjoiL2ZpY2hlLXByb2R1aXQuYXNweCIsImlkIjoiUFBvcHVwQ29uY291cnNfTW9kYWxQb3B1cEV4dGVuZGVyIiwicG9wdXBDb250cm9sSUQiOiJQUG9wdXBDb25jb3VycyJ9LCBudWxsLCBudWxsLCAkZ2V0KCJMQkR1bW15IikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuTW9kYWxQb3B1cEJlaGF2aW9yLCB7ImJhY2tncm91bmRDc3NDbGFzcyI6Im1vZGFsQmFja2dyb3VuZCIsImNhbmNlbENvbnRyb2xJRCI6IkxCQ2xvc2VMaXZyZUJsYW5jIiwiZHluYW1pY1NlcnZpY2VQYXRoIjoiL2ZpY2hlLXByb2R1aXQuYXNweCIsImlkIjoiUFBvcHVwTGl2cmVCbGFuY19Nb2RhbFBvcHVwRXh0ZW5kZXIiLCJwb3B1cENvbnRyb2xJRCI6IlBQb3B1cExpdnJlQmxhbmMifSwgbnVsbCwgbnVsbCwgJGdldCgiTEJEdW1teUxpdnJlQmxhbmMiKSk7DQp9KTsNClN5cy5BcHBsaWNhdGlvbi5hZGRfaW5pdChmdW5jdGlvbigpIHsNCiAgICAkY3JlYXRlKFN5cy5FeHRlbmRlZC5VSS5Nb2RhbFBvcHVwQmVoYXZpb3IsIHsiYmFja2dyb3VuZENzc0NsYXNzIjoibW9kYWxCYWNrZ3JvdW5kIiwiY2FuY2VsQ29udHJvbElEIjoiTEJDbG9zZUNvdmlkMTkiLCJkeW5hbWljU2VydmljZVBhdGgiOiIvZmljaGUtcHJvZHVpdC5hc3B4IiwiaWQiOiJQUG9wdXBDb3ZpZDE5X01vZGFsUG9wdXBFeHRlbmRlciIsInBvcHVwQ29udHJvbElEIjoiUFBvcHVwQ292aWQxOSJ9LCBudWxsLCBudWxsLCAkZ2V0KCJMQkR1bW15Q292aWQxOSIpKTsNCn0pOw0KLy9dXT4NCjwvc2NyaXB0Pg0KPC9mb3JtPg0KDQogICAgICAgIA0KDQogICAgPC9ib2R5Pg0KDQo8L2h0bWw+DQo=
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:58 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-17/appartement/1000140912
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-17/appartement/1000140912
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:00 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE3L2FwcGFydGVtZW50LzEwMDAxNDA5MTIiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:58 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-17/appartement/1000140912
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=1crbb5j5nfb4gsennsigywcd; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=450393be-b644-4d66-adfe-ee963e8b3c25; expires=Thu, 01-Apr-2021 17:50:00
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:00
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:00 GMT
      Content-Length:
      - '38241'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:59 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-18/maison/1000138489
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-18/maison/1000138489
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:00 GMT
      Content-Length:
      - '196'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE4L21haXNvbi8xMDAwMTM4NDg5Ij5pY2k8L2E+PC9ib2R5Pg==
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:49:59 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-18/maison/1000138489
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=ms02dwuzpqomsxiuck3j2o1e; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=a29a4777-8cf0-4243-8beb-b7a316b4720a; expires=Thu, 01-Apr-2021 17:50:01
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:01
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:01 GMT
      Content-Length:
      - '34775'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:00 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-06/appartement/1000140716
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-06/appartement/1000140716
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:01 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTA2L2FwcGFydGVtZW50LzEwMDAxNDA3MTYiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:00 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-06/appartement/1000140716
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=betzdqguoy4wbfp5hg1dlzpo; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=a771b74d-7379-4a5f-af7c-22ccd559cd69; expires=Thu, 01-Apr-2021 17:50:02
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:02
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:03 GMT
      Content-Length:
      - '36820'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:01 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-05/appartement/1000137557
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-05/appartement/1000137557
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:03 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTA1L2FwcGFydGVtZW50LzEwMDAxMzc1NTciPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:01 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-05/appartement/1000137557
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=adyjfyaqtlbgngsjp5cr0aqb; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=be4e11a8-e4ae-4746-80c7-5f2afe982e91; expires=Thu, 01-Apr-2021 17:50:03
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:03
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:03 GMT
      Content-Length:
      - '41611'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:02 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-19/appartement/1000131956
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-19/appartement/1000131956
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:03 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxMzE5NTYiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:02 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-19/appartement/1000131956
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=1pzjkxnk0fhekxqvwtn4nhxm; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=45f7c672-2228-4627-8690-4b24d1ee88fe; expires=Thu, 01-Apr-2021 17:50:04
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:04
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:04 GMT
      Content-Length:
      - '36282'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:02 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-15/appartement/1000130719
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-15/appartement/1000130719
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:04 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE1L2FwcGFydGVtZW50LzEwMDAxMzA3MTkiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:02 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-15/appartement/1000130719
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=ikwlbzzmtkfgmvwgaov5nikb; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=170a383e-864f-46f6-ba60-58809aa91188; expires=Thu, 01-Apr-2021 17:50:04
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:04
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:05 GMT
      Content-Length:
      - '36624'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:03 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-05/appartement/1000117812
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-05/appartement/1000117812
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:05 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTA1L2FwcGFydGVtZW50LzEwMDAxMTc4MTIiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:03 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-05/appartement/1000117812
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=j5rqs100ay0h0i3iligf04cb; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=b2f0c6c6-dc03-48c4-95f9-83a77a47f172; expires=Thu, 01-Apr-2021 17:50:05
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:05
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:05 GMT
      Content-Length:
      - '38947'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:04 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-05/appartement/1000129253
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-05/appartement/1000129253
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:05 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTA1L2FwcGFydGVtZW50LzEwMDAxMjkyNTMiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:04 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-05/appartement/1000129253
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=cwfrfxkpsec2f0aa4nthltht; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=0c43ac59-9788-4e69-95ba-c02b25bfb3a6; expires=Thu, 01-Apr-2021 17:50:06
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:06
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:06 GMT
      Content-Length:
      - '35982'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:05 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-19/appartement/1000123019
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-19/appartement/1000123019
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:06 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxMjMwMTkiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:05 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-19/appartement/1000123019
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=rrcppmzfbn0ujabgve24zov5; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=de4b203c-f36c-4fd8-8f64-d6188aa4bfae; expires=Thu, 01-Apr-2021 17:50:07
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:07
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:07 GMT
      Content-Length:
      - '36894'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        DQoNCjwhRE9DVFlQRSBodG1sPg0KPGh0bWwgbGFuZz0iZnIiPg0KDQogICAgPGhlYWQ+PG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+PG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEuMTUsIHVzZXItc2NhbGFibGU9eWVzIiAvPjx0aXRsZT4NCglBY2hhdCBhcHBhcnRlbWVudCA0IHBpw6hjZXMgUGFyaXMgMTnDqG1lICAtIFLDqWY6IDIzMTQgIC0gTEEgUkVTSURFTkNFDQo8L3RpdGxlPjxsaW5rIGhyZWY9Ii9jc3MvcmVzZXQuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVyLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9ImFsbCIgLz48bGluayBocmVmPSIvY3NzL21lbnUuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3Mvc3R5bGVzLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9ImFsbCIgLz4gICAgDQogIA0KICAgICAgICA8bm9zY3JpcHQgaWQ9ImFzeW5jLXN0eWxlc2hlZXRzIj4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPGxpbmsgaHJlZj0iL2Nzcy9zdHlsZXByaW50LmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InByaW50IiAvPjxsaW5rIGhyZWY9Ii9jc3MvQ3VzdG9tRERTdHlsZXMuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3MvTXVsdGlWYWx1ZVRleHRCb3guY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPjxsaW5rIGhyZWY9Ii9jc3MvZGlhcG9TdHlsZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJhbGwiIC8+PGxpbmsgaHJlZj0iL2Nzcy9zd2lwZXIuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiAvPg0KICAgICAgICA8L25vc2NyaXB0Pg0KICAgICAgICAgICAgDQogICAgICAgIDwhLS0gTGluayBTd2lwZXIncyBDU1MgLS0+DQogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBocmVmPSIvaW1hZ2VzL2Zhdmljb24ucG5nIiAvPg0KICAgIA0KICAgICAgICA8c2NyaXB0IGlkPSJsb2FkaW5nX3NjcmlwdHMiPiAgICAgICAgICAgIA0KDQogICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkgeyAgDQogICAgICAgICAgICAgICAgdmFyIG5vc2NyaXB0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFzeW5jLXN0eWxlc2hlZXRzIik7ICANCiAgICAgICAgICAgICAgICBpZiAobm9zY3JpcHRDb250YWluZXIgIT0gbnVsbCkgeyAgDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsgIA0KICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gbm9zY3JpcHRDb250YWluZXIudGV4dENvbnRlbnQ7ICANCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpOyAgDQogICAgICAgICAgICAgICAgfSAgDQogICAgICAgICAgICB9LCBmYWxzZSk7ICANCg0KICAgICAgICA8L3NjcmlwdD4NCg0KICAgICAgICA8IS0tIFN3aXBlciBKUyAtLT4NCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgZnVuY3Rpb24gTU1fanVtcE1lbnUodGFyZywgc2VsT2JqLCByZXN0b3JlKSB7IC8vdjMuMA0KICAgICAgICAgICAgICAgIGV2YWwodGFyZyArICIubG9jYXRpb249JyIgKyBzZWxPYmoub3B0aW9uc1tzZWxPYmouc2VsZWN0ZWRJbmRleF0udmFsdWUgKyAiJyIpOw0KICAgICAgICAgICAgICAgIGlmIChyZXN0b3JlKSBzZWxPYmouc2VsZWN0ZWRJbmRleCA9IDA7DQogICAgICAgICAgICB9DQogICAgICAgIDwvc2NyaXB0Pg0KICAgICAgICANCiAgICAgICAgIDwhLS0gRmFjZWJvb2sgUGl4ZWwgQ29kZSAtLT4NCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgIWZ1bmN0aW9uIChmLCBiLCBlLCB2LCBuLCB0LCBzKSB7DQogICAgICAgICAgICAgICAgaWYgKGYuZmJxKSByZXR1cm47IG4gPSBmLmZicSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgbi5jYWxsTWV0aG9kID8NCiAgICAgICAgICAgICAgICAgICAgbi5jYWxsTWV0aG9kLmFwcGx5KG4sIGFyZ3VtZW50cykgOiBuLnF1ZXVlLnB1c2goYXJndW1lbnRzKQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgaWYgKCFmLl9mYnEpIGYuX2ZicSA9IG47IG4ucHVzaCA9IG47IG4ubG9hZGVkID0gITA7IG4udmVyc2lvbiA9ICcyLjAnOw0KICAgICAgICAgICAgICAgIG4ucXVldWUgPSBbXTsgdCA9IGIuY3JlYXRlRWxlbWVudChlKTsgdC5hc3luYyA9ICEwOw0KICAgICAgICAgICAgICAgIHQuc3JjID0gdjsgcyA9IGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSlbMF07DQogICAgICAgICAgICAgICAgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LCBzKTsNCiAgICAgICAgICAgIH0od2luZG93LCBkb2N1bWVudCwgJ3NjcmlwdCcsICdodHRwczovL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL2ZiZXZlbnRzLmpzJyk7ICAgICAgICANCiAgICAgICAgICAgIGZicSgnaW5pdCcsICcxNjUwMzc3Nzc0OTYxNzEnKTsNCiAgICAgICAgICAgIGZicSgndHJhY2tTaW5nbGUnLCcxNjUwMzc3Nzc0OTYxNzEnLCAnUGFnZVZpZXcnKTsNCiAgICAgICAgPC9zY3JpcHQ+DQogICAgICAgIDwhLS0gRW5kIEZhY2Vib29rIFBpeGVsIENvZGUgLS0+DQogICAgICAgIA0KICAgICAgICANCg0KICAgIDxsaW5rIGhyZWY9Ii9jc3MvZmljaGUtcHJvZHVpdC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJhbGwiIC8+DQoNCiAgICANCg0KDQogICAgPGxpbmsgaWQ9IkxpbmtDYW5vbmljYWwiIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxMjMwMTkiIC8+DQoNCiAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPnsNCiJAY29udGV4dCI6ICJodHRwOi8vc2NoZW1hLm9yZy8iLA0KIkB0eXBlIjogWyJodHRwOi8vc2NoZW1hLm9yZy9Ib3VzZSIsImh0dHA6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiXSwNCiJuYW1lIjogIkFjaGF0IGFwcGFydGVtZW50IDQgcGkmIzIzMjtjZXMgUGFyaXMgMTkmIzIzMjttZSAgLSBSJiMyMzM7ZjogMjMxNCAgLSBMQSBSRVNJREVOQ0UiLA0KInByb2R1Y3RJRCI6ICIxMDAwMTIzMDE5IiwNCiJicmFuZCI6IHsNCiJAdHlwZSI6ICJPcmdhbml6YXRpb24iLA0KIm5hbWUiOiAiTEEgUkVTSURFTkNFIg0KfSwNCiJpbWFnZSI6ICJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTIzMDE5LzA4Yjg5Nzk3LWI0ZmItNDI4ZC1hODM0LTc2N2U4OGMxNWYyOC5qcGciLA0KInBob3RvIjogImh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxMjMwMTkvMDhiODk3OTctYjRmYi00MjhkLWE4MzQtNzY3ZTg4YzE1ZjI4LmpwZyIsDQoidXJsIjogImh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL2FjaGV0ZXIvcGFyaXMtMTkvYXBwYXJ0ZW1lbnQvMTAwMDEyMzAxOSIsDQoidGVsZXBob25lIjogIjAxIDQwIDM3IDIyIDIyIiwNCiJmbG9vclNpemUiOiAiMTI1bcKyIiwNCiJudW1iZXJPZlJvb21zIjogIjQiLA0KImRlc2NyaXB0aW9uIjogIkVudHJlIGxlIG0mIzIzMzt0cm8gQ1JJTUVFIGV0IGxlIENBTkFMIGRlIEwmIzM5O09VUkNRLC4gIGRhbnMgdW4gYmVsIGltbWV1YmxlIGFuY2llbiwgYXUgM2UgJiMyMzM7dGFnZSBhdmVjIGFzY2Vuc2V1ciwgZXhwb3MmIzIzMzsgU1VEL09VRVNULCBhcHBhcnRlbWVudCBmYW1pbGlhbCBkZSA0IHBpJiMyMzI7Y2VzIGQmIzM5O3VuIiwNCiJvZmZlcnMiOiB7DQoiQHR5cGUiOiAiT2ZmZXIiLA0KInVybCI6ICJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxMjMwMTkiLA0KInByaWNlQ3VycmVuY3kiOiAiRVVSIiwNCiJwcmljZSI6ICI5MzAwMDAiLA0KImF2YWlsYWJpbGl0eSI6ICJodHRwOi8vc2NoZW1hLm9yZy9JblN0b2NrIiwNCiJzZWxsZXIiOiB7DQoiQHR5cGUiOiAiT3JnYW5pemF0aW9uIiwNCiJuYW1lIjogIkxBIFJFU0lERU5DRSINCn0NCn0NCn0NCjwvc2NyaXB0Pg0KICAgIA0KDQo8bGluayBocmVmPSIvY3NzL21lZGlhbWF4MTI4MC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSBhbmQgKG1heC13aWR0aDogMTI4MHB4KSIgLz48bGluayBocmVmPSIvY3NzL21lZGlhbWluNzY4bWF4OTkxLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIGFuZCAobWF4LXdpZHRoOiA5OTFweCkiIC8+PGxpbmsgaHJlZj0iL2Nzcy9tZWRpYW1vYmlsZW1heDMyMC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSIgLz48bGluayBocmVmPSIvY3NzL21lZGlhbW9iaWxlbWluNDgwbWF4NzY3LmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9InNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDgwcHgpIGFuZCAobWF4LXdpZHRoOiA3NjdweCkiIC8+PG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJBY2hhdCBhcHBhcnRlbWVudCA0IHBpw6hjZXMgUGFyaXMgMTnDqG1lICAtIFLDqWY6IDIzMTQgIC0gTEEgUkVTSURFTkNFIiAvPjxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJhcnRpY2xlIiAvPjxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iRW50cmUgbGUgbcOpdHJvIENSSU1FRSBldCBsZSBDQU5BTCBkZSBMJiMzOTtPVVJDUSwuICBkYW5zIHVuIGJlbCBpbW1ldWJsZSBhbmNpZW4sIGF1IDNlIMOpdGFnZSBhdmVjIGFzY2Vuc2V1ciwgZXhwb3PDqSBTVUQvT1VFU1QsIGFwcGFydGVtZW50IGZhbWlsaWFsIGRlIDQgcGnDqGNlcyBkJiMzOTt1biIgLz48bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxMjMwMTkiIC8+PG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSJodHRwOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxMjMwMTkvMDhiODk3OTctYjRmYi00MjhkLWE4MzQtNzY3ZTg4YzE1ZjI4LmpwZyIgLz48bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6c2VjdXJlX3VybCIgY29udGVudD0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDEyMzAxOS8wOGI4OTc5Ny1iNGZiLTQyOGQtYTgzNC03NjdlODhjMTVmMjguanBnIiAvPjxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTp0eXBlIiBjb250ZW50PSJpbWFnZS9qcGVnIiAvPjxtZXRhIHByb3BlcnR5PSJmYjphcHBfaWQiIGNvbnRlbnQ9IjE0MzU0ODQwNTgyNzMyNCIgLz48bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6d2lkdGgiIGNvbnRlbnQ9IjEyODAiIC8+PG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmhlaWdodCIgY29udGVudD0iNjIyIiAvPjxsaW5rIGhyZWY9Ii9XZWJSZXNvdXJjZS5heGQ/ZD1pVUpDV3ctSERyMDRrMFZGN2MzQXNxUDktMXVqeGRlOUlNeHh5cWhpcS1KTGEzcTJLYWRxb1RCNnBoS0ZUcUJYRUh1QUl4UnlFSWEzWC1PLUV6czV5SjRpUDBRU2JsWWk0SFNFbjRMd0dFZWxLeS1Jdkszb0ZxWkR6QVhPTFVfT2MxM0I5SnZ0TnVxQmFvbkR5enM1S3Y5MFk5OTFaWm95ZmlUUFltbWpYZlUxJmFtcDt0PTYzNjk3MDIzMDQ4MDAwMDAwMCIgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgLz48bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iRW50cmUgbGUgbcOpdHJvIENSSU1FRSBldCBsZSBDQU5BTCBkZSBMJiMzOTtPVVJDUSwuICBkYW5zIHVuIGJlbCBpbW1ldWJsZSBhbmNpZW4sIGF1IDNlIMOpdGFnZSBhdmVjIGFzY2Vuc2V1ciwgZXhwb3PDqSBTVUQvT1VFU1QsIGFwcGFydGVtZW50IGZhbWlsaWFsIGRlIDQgcGnDqGNlcyBkJiMzOTt1biIgLz48L2hlYWQ+DQoNCiAgICA8Ym9keT4NCiAgICANCiAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9hY2hldGVyL3BhcmlzLTE5L2FwcGFydGVtZW50LzEwMDAxMjMwMTkiIGlkPSJNYWluRm9ybSI+DQo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfX1ZJRVdTVEFURSIgaWQ9Il9fVklFV1NUQVRFIiB2YWx1ZT0iOWVPdmdIMDkybnNxSzdjNXkyRTNNNW9zYzVrRUlwYnhwelNmS0VZdmI5a2N3M0NOSzhzbmdkTytoM1RnMW5Ld0I4bWtJTDdQbW15Q3k3d0dyTUN0NjhLTzBWZVFuMVlCSGxhUkVhUWRBUjRkYTFQR3R0VXhweHFqYVA3ZkRmeUFidkVrRGNseCt2b1dRcStydUYrSTVEcGJKWUluZVdpOGRPcjJmb0E2VlB2a1JIODNCTzJxeVlOSUFHcGh1VGhqTmk3WFltMTRwdEd1cE5YZVFzMDliem1icmtxWXJNeDk0QjU3U0dEMUlzYklVTEo0eXJVQjE4OGJHS0ZSQm1MWEd3dDE5ekRZazljamJDVjM3ZjJqNXJoWkZBMEpDdUVpcXdnN2kzNXZPR2FldEJ1RGRST2dpR3ZQVEJvcWczRWxncm9GZUdEYnovMTBES1FtRHpQckg5b1BmTlVXU3hiS3V0b013THZlc0Q2eGxSc3R0MllnLzZFRWNGcVh4QkVTVHViL1ppRmFLbTdOZC9lbzcyaU15R0xvVGJpbW94YTQ4bHdBRSsvcTdoT0NRMGM1bFNRRUhRLy9jalBhZHIwKzN4NWxRU1BCZHdDbWtaTWhoZlFVZ1dvdmJkUHAvRWVjeEFERE5GL3Rzb1NYSWM0L0FzSHhUV0hwOGdnV2VTZXIrZ29BZTA2akpDL3ByaWJqWEN0MGE4c3pIZTlNY1BqSVNRdVREZmVqdFk2Rk4zcDZTWXpMaldPWjhuVGc4TWozdmlUdThta3JiTU5XVVRacmNZa3BibURYcTFKWFU2SUkrTDJtYmZETjZZMER1QW96K3dYT1E3WDlvODZacXAzM1BEYVVRVjg2YVRpeDlvQVRkQ2NwZkZtSG9hOXZhWXZHWXc2Uk96dzNQQmR5d3JsbmJIbzNJREV4d1QzVWRoNUtPeStyZGREWlEyNE53bm5Wbytvb1pvS3o5VHFqalNMYXg4b2lGOWdTOVREcWFaSWIyZ2NibHVxUEs0Njd0U0FoQmpYMEtOK2ZwdFRNaHdIR0plNU5tMDQxUTl3ekJLc2c1ZTIzeVptQ3U2SDhJb0w4NnhzaHZsc0hpbEltVUhlQll1bGZiR1krK1VVdU1NKy93RkpWeis4bE0xemVZbGZwazNMU0lyRjJxdHhVTThWNDJjSVl0NC9jSHlaM1FzYzdHTXh3WHhldG1semxmeUJiLy9taExPZzVUZThnbEhOdHZua1g0ZXk2QUVMOVNpY3UrVjdSdWZ5RkNJSFJsMVNTZXJqaTFJRkY1M05YbXlYT21XYkQ2Zkx4NEpOcmQzSUgwVE1BNFEzMDdXMnovZ3lBR25oYkJxYkhLNFJhdEhKd05naERzOFFmaWV6UkdPRC9zNTNnOHlLSEFKVE5VMmRpRGxobStlSGJBTnlnTnpDM3RKbzJ3TWswV1Q2enlDRDg3VW5KQU9ZNDQzWWtvaitBc1ZHY0c3QnB6MXhvWXFBZlhlSVo4S0ZzNDM4NGN4U3crOHNzYVp1TFYzVnRrdE8zeUV3eVpKNFZGQnREWTg3eEdSOE1Hd2t4S0RQYXBPYkRCYUw3Z2IwbTNxNjE0LzJ5M0FzZ1hLYTRnWFFHbWNRZXF1eTY4Mm5UbzhsOXNMNjh6cEg1bkc4WHJPSFF4N0d0VXlKOE1pTnRzZEFsS1RtbnVmZWcrOWpRMTd3YThQZVZoV3B1cXpBN3VacHZMd2hNZDUzbXpSMC9XeklEck9WVEV1MlBtblpCaE4yS2VzWkZJZFhVQk05Ty9adEE4RHRNS0RZL09tcWhOK2hJcHVJcHBUNUdvQ05qYUNMWlA5ZXlOa2xoclE2elNlaWIwUFZmVDk4NzlHOFRvUExZNm5QTzJaYnd2cGZ4V0lvSmRmbWtHVHM4eUVvRnl0VEdOQUVxNno5c2V2TVpFaVZ2eERmNXFRcjZnUGsxcXdLNWU3Z25yalhPbmFHam9ZQmFud0s2MGZBbUR5WWpEQ2xNQ2JzY05BOWRqcVB6cUowVkttTEw5NTIrclpDQVVJbkJJU29scWcrTEM3aWpiSDZOdFg3cU42bWE0TnRDZEFOb2lEeG1mdHR0dHJFSlNSakhMZXpXS1ZFZ1NxWld1czZOd1NOd3lUeHh5by9PbXZzZjJXeVBac2VJa0duaVVXbURpeEM4dmhQaHJJZXpRSlBSanJPM1AvWk5tSjQ4U0EweXdIVHI0Um1VVEZnbDRMekZNRTZINXp4QkJhcE8xZ1pTczJxR1B1dHp6RmpXTXFTNzViNDhXQzY2WW9PckFYN0RzUFArSHRsMGpkQTF2bXpld0k0TEVoUnNmc1VYSGUzM0pMWnBxT2dUTVNMR25SakcveVFvOHVxNTVody9xZG9tUEZocllPZVhmdmJGbDBtbFdpeEdXN21NbWc3cTFUbGw0SHJZQWtsNVY5WlZBREo1aHBGTlB1WGRWNVVqN2xEeUlGV09mM3ErWnVPcWh5SlVjOFBBdjQzRGVWeGVFeTNleEFiQnBSWmdRVHJnM2VVVkQ1RGMxb21pUHZPczg2ZlJGZUZxQXd5UmxCc2FjQUp2UGhkUVFPUm1HQVRxQWNGSi9DOWVxKzBiQjVrL1hFL3pURFcremYySElaaXpKMDhWaE5ZekkvWm9ubkpVMnEzNEtRRzd5ODh2VlBLTWZxazBDa2l0NDl4OWJLTHI2VVUzTmZydzRBNTZTUUJ4Vm9nVzVreWM1SldIVHVFZWRtamZMRmtqMFNUS0owejNzSkVHeVNObkNmVlQ1OUxNUGU3VVJrUFhOSUxnZHJmcnpRaGlySXBWOFFad1o4SFJaajBpaE9BUDA3Yk82QU14a3ZaakJuWjk1dnd3SGk3UTlsVndCMjg4Q2hIR2lPU3M3cDNzb0h3RGp2VVBFdzVLK21GQ0NBelZsTjBZZmhPTjFuS2dGUlMrUHdkN2dxalBYM2YvdHBtR0IzQVlQOFIyWlpiZDBUNTRpeGIvNkthNitKNEQ1d3ErSE9MMDQ4RXozM3hlNVIvQzJFY3hYcmZoM3lKZW9jVGJvMkJkS0Ryc0RLUE41WlN6WVlGd05nOVRDbGthdUI4L1BFVWEwcnA1Vm1PV3dENE4vNHVFdU1hek5YdWZoSHd2T21uTnRmN1ZVYXJDeFlBTU0vbVJhQ0Y5R3ExVXhhWDBIVXAzTktBVzJWZGtPbGxBRENtazQzcUFLNyswYzRMaFRmSGdoWDJBTklRaVpuMGR0NXIvNnFVcHpXMG1oQ3FPMXVVaXd3K2F0VjBlTURONlFiblF6MGZBR1NscXc2c25iNzMyUzFVWWo4c3hyRC9XODA3SExCUjNwV3F0LzBEaEYxZVkyb094ay9YYW53d1laMzU5anR4WTNUN3RyQ1loTytwNWxFWlh3Ykpzcy9TWEdMaDcvWVdrOUMydFZmelNRTUJEM20rc0JYQnpkcVJOMjdSZ0xjQW5VcWVGVHVJeTFXMnpjbWVqTy9Cd1RVZ3dsTGlKODFmMDZXcFNIWnBKemdyS2tqQWxxcjJlQzF6c3ZKZXRGeGhXblRsS3RFUHhzSDJOQmF6b1Q3UUY5VzBXbWppQVpYNmdZSk5tcG9ZYWZqZlp4WmFKTk5hVitXNDhIRnFsMXhTdFgyWjE0NWQ1NHgyTVN4Nmo2RHNma285WTM5TDVrbDBsU1NualBXUGdzZHNvZ01ZQkk2azlBZks0dmxiQU9oSnFXa2l6di9WYzZNeEhBNTE1VW9iZHlPaG5TaEVyN3FrT3czK1RMeVcrQlNCU2k1SCtpM0NmSEgwUlp6azdVbjFKVmVnNjFKVVYzc3JQcitUeHF2dTZ0SUdUb3hLbXUwK2JkRzlSd3hWbnJ4K1FpYlV6bHpITkU0dzJ3TUJDenloTCt4d21OYmgvbVlVSzRjQVJmZTJWMlY3R0cvNllHbDVnZUZOZDlSdVhramtwV2tmNzhyQlBUUEY2RkZHbWkzQjhFRTl2bUtUNWxneEFaN2s3azNQUFVOdTBZTVdIOGtwWmJKQVpCS0hQQkRuK3A0SC9GN1BKZjRwVUY0QUdNYTYwb2F4ckRCNnRhMnkxQWNsTWRkTTZJeEtFVnhtT2x4RXIyZElvTjZEV0R5VU4xUisvY0NNZ1Izb1dEUE1uVDVlMDEwclBoUkZhK2xpMEE2N1BsbHlTVFh3b0tPMmRTTnpQeDQ2L1B4L3Z5UVd1S05BRkZQZG9hdHVxMUFxbVhiWjhiQ1A4U0NFd2hzUGFJRGFsamRxWHpQUzdIUGdoK1ZGeGlaVEZoWkl3Y1h1WU84K0toMDhyTmpqM1psTHRGbTZOVCtYMkhxSVl0V0VpcWtyTUlIdlRneWdDeTRKM0ozeUdES3hCSXlTVU5LOTJ6TU5raHVLamVIYWErTGpBODBkMHZFUXcyRTI5V2ZDcnkvczJQMXU4Y3NNakY1U1BUaEp6NStNUW1uNzRzYzBEdUZnT2tHZDNVZlFSSCtTY1BuVWFwdWEvWUFOVjM5Y2ZlWWp2elVBWmxVbjFzMUN1bVlzeDlxc0lXOVF3OG5sVmdKL1pjZG10RkJ2RGxwM1dvMUtpUnVCcG5TNy91anBESmZ6NmFSbEN4c0x3QWlIbUlnNmhOVG9TbFpza1VjbmNzbnpxMkZGL0NIV3cwblhJT1EwTyt3VURkUXRMZTZpWGNPSWNVa056bVNBWEYycWVjWDBjTnQxcnc1OU9qcy9JNTVkdCs0eElScjBIMjRsblNSaldSamU1YVJMaVVQZkNSeDQyMHo3THRMSVpNcmthbTdwVE5XcWkwWjB4Z250enBtZlZ2d1JVOVV0S2RFRTFIaWl5Q3BsaFRhb2NXNXArYSs3RnZOUGtiVmZqaEZOZE9OaWpOdmxaWk1qZXdreVhXUFh4Z2JvclhLc0pHN1RpNXVKY1R6ejRBUy9wdlJaUXpPc1Z3c3hXYldIalpaUklHOXBZWjZMWXg1UXRuUDJPWVVId2ZndTF2ZEZYazkrQmhjMFp2dTBNbGIyVGJFS2pWdTFIOVZTOWRSTGtyc1RWWXl5ZzdZRmxocHlyRVZRK2d5d21sOW9DcVQwM0NhL3c3RUlpeGF6Unlrc2lCdDJUby9zUlVDUTZrREFqWXRMSDdRTm9QWWRnTTFVRHpxR3BKOVcra2lvdTM2aU5ZTlFwSGdWMjJvSlIyYkJqL0pqeWVVSnRqRXh5TnFaTGE0QXlYdUdDeExHQUIreUtuR2RNcUtYZjlPWTJMYUpIZjJhRllFRTRZcWo1SnZya0FOVVVOSzRkZkoyWWU1eWVHMlQxU0g5aDRjNkFFSDdtMzJ6ZG4ydDdmTHBHS1Y3ejVqclFWUTdhbVNJalB1Z3kxS3BaaVl2UUo3S1d4Q1BJV1NJdDJJOXYzQ29Eb3BveUdHY3A1QWFGYUVEYld6QUJGUGViUGYwTVhtdGxuUUlwVWNidXlPOUJzcmtTTWJIK0R6eUZQUDdBcFJ3UGNuU3RRVW9pSkJlY3VabXJBQUNDTEpKaTB2Um9EZENaT0x5d2hMZGdPN2ZZSW9NSXdJamRvOU12TUdyMm1RdDc5YlVRcE1OdUp3N3hERHlNanlZbGVBWnBSR2Rsd0plQzY4SDRSZ0JoTG83dFNTUytTaWtodVhVMnNMcW0wL2pZT3pRUk9ORzFoQ0ZDV2VWckFzSHUrOEZqL01vL3VlND0iIC8+DQoNCg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0zLjEuMS5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvanF1ZXJ5LXVpLTEuMTIuMS5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21vZGVybml6ci5jdXN0b20uODYwODAuanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3N3aXBlci5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2FjY29yZGlvbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+IA0KKGZ1bmN0aW9uIChpLCBzLCBvLCBnLCByLCBhLCBtKSB7aVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7KGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpfSwgaVtyXS5sID0gMSAqIG5ldyBEYXRlKCk7IGEgPSBzLmNyZWF0ZUVsZW1lbnQobyksbSA9IHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07IGEuYXN5bmMgPSAxOyBhLnNyYyA9IGc7IG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgbSl9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJ2h0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpO2dhKCdjcmVhdGUnLCAnVUEtNDQzNjUzMTktMScsICdhdXRvJywge3VzZXJJZDogJ2RlNGIyMDNjLWYzNmMtNGZkOC04ZjY0LWQ2MTg4YWE0YmZhZSd9KTtnYSgnc2VuZCcsICdwYWdldmlldycpOzwvc2NyaXB0Pg0KDQo8c2NyaXB0IHNyYz0iLi4vLi4vLi4vU2NyaXB0cy9XZWJGb3Jtcy9Nc0FqYXgvTWljcm9zb2Z0QWpheC5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9RnVKbUZ3ckJ0VGkzRnhqWFJCakRvNXlRT1JxdGVjVlBTT09LYTRhXy1iZUVYVmFWOVRZZGZ5eG1UZFJQMnFNRW1mOFBuc1dWbVhUYVZTQTV1YUF5Q2ZXM09jY3J4YTBOeDZqX016VUd6M0lTbF9wX2dFNUhrU3dtX0k5QTVyWmMxMDYxZTBkS1RuWEJfeTFsbW1taVZFVDE3clU5WEt0a1M2WDg1U3JKZWFfMmZNakZWOU1LM05rVmVtZ1pONFpWeEgtM2tUb05VYldkaW5JSXJIdGNnUEo3dU95WjZmbHFHOUdIRHM5R0tLRG1fUVZWb0RrNWg1b3k3ZmFEa0Q0bkZHeVUwR3UxWjRvUGVsd1NWQ3F4ZFVPdE8ydlgtRVdONGJoVTdjY1JSaWRJcE9takRmVURTa1BGQ2RtYi1JajFqbExCb0dCTmlITmY3VmkxVUdiWkN1RjF2dVNJa0xtUE5YZ0NPeFpEZ09JWmxpV01VNjZ2dTZIRHlMOTRSTHpwb1NtQm1lQUJxeUZVaHdJLWxEdlRfTzlodWVocnZ5ZVVrdzVtVmM3V1VWZHlzS1BvajR4V3VhQVhZcTl0UHlZV3pCNGpqQ011Y2xLREN3UzFzV3hFRUEyIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD1ZM202VXJWTWJxSlZFLWtROWdpb0g1NzVoNFVRV3JXSjZqbXNoLVA4c2xadU4waWs4cUdwUlpia0dCcDBsOWlXR3RxMEVvZW84MlhBQkpkTnVYcnAtRlNneFU1eXFxYmdSLWNocDZVYVUyWUdIOEhPMkt4VTRMR1otNlFUMEhSWjAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9S1FBMy05b212UGtsLURRRHFTcTBtRG1pakdnd0lVVTV3dDk0R1g5bGZ3T1UwcmdNMEFYUEZNbFhfbDFNQWJGa0xJNmxwZl9qVk92U2RIX2Z1Y0NrdlowY01mWXhDYlgtb1JBdG1fUXBMdzRKQTRZeUV3U2VHTlJvaXMtRmxfckRWOFgxZFF6Nko3TURHNjVmRGZfUmZnMiZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD1nV2NySEItRUdDMXA0THRaYS1sYmp3YXRoLWItYm04Q0FLNlBJN3NIbXNldFNaMkkzS1ZBQkV6c3B6VXBvWnY5S3ZmQzhNOTdpYWExOC1OeUNvSXBTaFpROVBjYkVIQ2lfbEh4X2xVMF9sMDEmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9WUdRa0tFckhGRGRHZUNNWTQ0dWtfaTNQYVRPWmxlcTN1ejJ1a2tFT0lZcGl5NDBYR1NJdjZHS0pjNjJsdXkyNWJOQXFUU1JsSnh4bXZFT0Z0MHlmTUhIQTZpUFVvTFFtN2d3LUtzWDk0bEFjQjQzQVhvSGhYY1U0MjUxeWNxc0UwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPV9zR3A4XzliTkhZTnlRcXhkdlFScWVrMWJ1ZGRERFd0QVFkU2x0dzgzaTZpR0VZQUNEN3VRakpFR1NPQ0hvOU5sRUxrZlVSYU1NMlkyRkZsWmxSOFB2UGhvamFEb0xDaE1oeXZzLXNsclVJUkpSbkhvVEtyblQ3UmhTWnI1NHpoMCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD0wWnJNS1ZQMlU3d1FEWlEtNjJLVU5ZUlk0ZllTZERQdDZOWl9ybTJrQmNwYktVZjJ0OHFZaXpTRUhnMFhOZW5BeUZyYy1IY1F1dHVxZk9JdTJqMG51cjdXQVp1cmlmWXlVV2NMczZOZ2NtZzBXR0pydlBaR2l4aUxIOXRUcFRlTDAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9emhCNFRuTmc1U0NuVHVkMG5QWlYwSXRwU2tzY1RtNWJtSzVqcUZfUkQ4Y3dBMlJLdjhXQkdnaV8zZXRHeW1SRE1XUmR5amFNckpHWXlWX2tqdHZjOXI1S1NHV3NndFpFY2ZVUkgtbXdybktldVAtTDlBd1BBa0ZGc3QyMTg5cEMwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPVNidG5WV3M4THRkdlczR3hpZVlabGRGTWs1WFZoUTJDXzZKWUZVdlRJVVo4WnRBcVNqTEl2T0g0M0p0NllHOVB3Z1FJRXNvVnpMYmNrcXRRZndUWGZ5ZHFrR2dmQzB5SEhEbHJ0Q18xZUIxbXZQRmZlbGNnOWZnd0h5aE1nWE52MCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD11a28wLTgzZDlxaG13b0VlMnhOOEJucFJEZHNyTnpPQWdLd21ybDZUY1Z2b05qWHZoWU4zRVVvOERGNS1mVVN5dUxaa0RFa1NIY3hUNFcyWEpJdDlnUU51dU43c2Zqd3BCM3RhYVBZUHg3UTEmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9aG1JcWY5RTR3NGo2d1NILXF5MG1FNjJseW9KdzZyNzAybjl4SDE0UnVGVmUzSE1ZcU1JSjhlanpUeDh2eExQcHIySzYybjlLWjIxLW9rbWJ2RmdWMUtzTkI4QUVmNV8zZ3RxU2oxWldLZTlJZVdYc2hfYVVCNE5tRndfQTBPVDgwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPWNJSUhoZXREMEZPOEZ5RmpvaTZnaFlrRjhVOWJrSmRBdzVnZnJWTVlEUl9HblphSmJFeFpnc2FQU0FUOTdoQjd1cHhuSnM1clZLNFFVT2FPR0dlaklQT0lYWkdlRHFjdmtfY25zbTF4djI5V29KMkZfdVc5LWUyNDk4YUwya3dyMCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD1sZUlxLXJuNk5pbThjUFNlODRDSUFnZVNUR1UwZjktU0dGNjNOVkhDajZHLUJrcHlEOG1pbld0anE5RVZyaVc5ZDRkQWFiT1h6WkVVY3pJU1VNY1lQTW1wTDZ6SWxtMnQ0MWlvQ3haNUxRWDRuY0VQSmh2MDdnS0pOT3hwMkdLUzAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9NlQwSHBGUmNtUjVzb29zVmdlZmFiZVI1WjMtLVFRbkxNa1piZ3F5UmJrcVRXOVVXYThOaVlqQnlPZHk5bXpsZmswckJiSmtrZUV2ZGhOYnF6R25ZaXRRWFB2X0xua01DaVVOZnpsS191ejBHVERsamxKSUdxZTNKeUp2bXF6RGUwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPUk3VXB0OWtGVnRCWmlxWm0tNENwS2gxcTE3S3prOF9EVVhCTXBlS0hVMUdRRGlqZ0dKUXhIRkpyZ1g2QWlDOFFILWNXMUdlWEVlWHRNSkE4UVloT29IQklweVkxRFBNZXdUcGtOdUNxSDVtb01DMDFVQzBNT0xtR2VuUG54dDNLMCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9TY3JpcHRSZXNvdXJjZS5heGQ/ZD0yR2ttTnhERjhydmhkYkVERHdQcW1nYWdFVUNPUTdCRnFaaVlQYThJNkZuSlZ3Szd6RklTWUJZSjhjbXY2a1pXOFEwc1VFdDZKR2oxQjY4YlhqWmVhRFhFN2VZZWRxdnA3WHFLdFNINWRqSlZrb0oxcTdweDNWWm5YclVOX1pOSjAmYW1wO3Q9ZmZmZmZmZmZiNTZhZGMxZiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0UmVzb3VyY2UuYXhkP2Q9SWZHWWVRemdxMXgtcFpDRlphR2RBMXhDQUIzczlKaDdpUUVreVFvWjI4X19heURzX2gxdVRvM3lYMGFvX1dSWFh1c2xpOXlRSzdZZDk5U2lGWGV0bGt3aWlDTUNfUWoyS2E5YWU3VHhwNm1IM3FTYXV5dDQ5TEZ0QVoyT0hGcnIwJmFtcDt0PWZmZmZmZmZmYjU2YWRjMWYiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdFJlc291cmNlLmF4ZD9kPXd0VWg3VFB3TDFEck00RnEwWDdqdmp5XzNHVklMSHJuUmlzVWQ2YkNEcUlBcG9vVnRRN3dJQmFzWWVTRHBGM0lieUNnRUhQZVNnc1lzSEkzRktsWjFBNXBjcWl3WW1jME1nSDFxZ0NTZVNYNXVsTFJLd1BBb2NqRW45SEJMcGw5MCZhbXA7dD1mZmZmZmZmZmI1NmFkYzFmIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEVHRU5FUkFUT1IiIGlkPSJfX1ZJRVdTVEFURUdFTkVSQVRPUiIgdmFsdWU9IjA3NEQ1RkFEIiAvPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEVFTkNSWVBURUQiIGlkPSJfX1ZJRVdTVEFURUVOQ1JZUFRFRCIgdmFsdWU9IiIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9fUFJFVklPVVNQQUdFIiBpZD0iX19QUkVWSU9VU1BBR0UiIHZhbHVlPSIzZXRhZVgwcjdNaUh6Wjdia0hLcERzbkhPS01iaWV1U1NlbGNKclJ5Q2xhM1g2R0tXUmJhTWwyd05UU0FTbmNIUUFwQzB3ZUd1WHYxTUFhNWNybTlYSlRYWktxb3N1NTM4NUNpMGhRWnZRWTEiIC8+DQogICAgICAgICAgICANCg0KICAgICAgICAgICAgPHVsIGNsYXNzPSJjYi1zbGlkZXNob3ciIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgPGxpPjxzcGFuPjwvc3Bhbj48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48c3Bhbj48L3NwYW4+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PHNwYW4+PC9zcGFuPjwvbGk+ICAgDQogICAgICAgICAgICAgICAgPGxpPjxzcGFuPjwvc3Bhbj48L2xpPg0KICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgPCEtLURFQlVUIGR1IE9DTlRFTkVSIEdMT0JBTCBERSBMQSBQQUdFIC53cmFwcGVyLS0+DQogICAgICAgIA0KICAgICAgICAgICAgPGRpdiBpZD0iUEhlYWRlciIgY2xhc3M9IndyYXBwZXIiPg0KCQ0KDQogICAgICAgICAgICAgICAgPGRpdiBpZD0ic2lkZWJhciIgY2xhc3M9Im1lbnVTbWFsbFNjcmVlbiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICA8IS0tREVCVVQgZGUgbGEgbmF2aWdhdGlvbiByZXNwb25zaXZlLS0+DQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGlkPSJtZW51LXNtYWxsLWhpZGUiPk1FTlUgPC9hPg0KDQogICAgICAgICAgICAgICAgICAgIDx1bCBpZD0ibWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyI+QWNjdWVpbDwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hldGVyIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij5BY2hldGVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hldGVyIiB0aXRsZT0iVmVudGUgaW1tb2JpbGllciAtIEFjaGF0IGltbW9iaWxpZXIiPnJlY2hlcmNoZXIgdW4gYmllbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvbW1lbnQtYmllbi1hY2hldGVyIiB0aXRsZT0iQ29tbWVudCBiaWVuIGFjaGV0ZXIgc29uIGJpZW4gaW1tb2JpbGllciAiPiBjb21tZW50IGJpZW4gYWNoZXRlcjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3JldXNzaXItYWNoYXQtaW1tb2JpbGllciIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgcsOpdXNzaXIgc29uIGFjaGF0IGltbW9iaWxpZXIgIj5Sw6l1c3NpciBtb24gYWNoYXQgaW1tb2JpbGllcjwvYT48L2xpPiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hldGVyL2ZpbmFuY2VtZW50IiB0aXRsZT0iRmluYW5jZXIgc29uIGJpZW4gaW1tb2JpbGllciI+RmluYW5jZXIgbW9uIGFjaGF0PC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2RlbWVuYWdlbWVudCIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgYmllbiBkw6ltw6luYWdlciAtIFByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQiPlByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVuZHJlIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij5WZW5kcmU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUiIHRpdGxlPSLDiXZhbHVhdGlvbiBldCBlc3RpbWF0aW9uIGltbW9iaWxpw6hyZSBncmF0dWl0ZSBlbiBsaWduZSI+ZXN0aW1hdGlvbiBpbW1vYmlsacOocmU8L2E+PC9saT4gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbWFuZGF0LXZlbnRlLWltbW9iaWxpZXIiIHRpdGxlPSJNYW5kYXQgZGUgdmVudGUgaW1tb2JpbGllciA6IGNlIHF1J2lsIGZhdXQgc2F2b2lyIj5sZSBtYW5kYXQgZGUgdmVudGU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9maXNjYWxpdGUtcGx1cy12YWx1ZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkZpc2NhbGl0w6kgZXQgcGx1cy12YWx1ZSBpbW1vYmlsacOocmUiPkZpc2NhbGl0w6kgZXQgcGx1cy12YWx1ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvbmZpZXItYmllbi1pbW1vYmlsaWVyIiB0aXRsZT0iQ29uZmllei1ub3VzIGxhIHZlbnRlIGRlIHZvdHJlIGJpZW4gaW1tb2JpbGllciI+Q29uZmllciB2b3RyZSBiaWVuPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYmllbi12ZW5kcmUiIHRpdGxlPSJDb21tZW50IGJpZW4gdmVuZHJlIHNvbiBiaWVuIGltbW9iaWxpZXIgIj5Db21tZW50IGJpZW4gdmVuZHJlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdmVuZHJlLWF2ZWMtc2Fucy1hZ2VudC1pbW1vYmlsaWVyIiB0aXRsZT0iVmVudGUgc2FucyBhZ2VuY2UgaW1tb2JpbGnDqHJlIDogYXZhbnRhZ2VzIGV0IGluY29udsOpbmllbnRzIj5WZW5kcmUgc2FucyBhZ2VuY2U8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9kZW1hcmNoZXMtYWRtaW5pc3RyYXRpdmVzIiB0aXRsZT0iRMOpbWFyY2hlcyBldCBmb3JtYWxpdMOpcyBwb3VyIGFjaGV0ZXIgb3UgdmVuZHJlIHVuIGJpZW4gaW1tb2JpbGllciI+RMOpbWFyY2hlcyBhZG1pbmlzdHJhdGl2ZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9kaWFnbm9zdGljcyIgdGl0bGU9IkRpYWdub3N0aWNzIHRlY2huaXF1ZXMgYXZhbnQgdmVudGUgaW1tb2JpbGnDqHJlIj5MZXMgZGlhZ25vc3RpY3MgdGVjaG5pcXVlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2RlbWVuYWdlbWVudCIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgYmllbiBkw6ltw6luYWdlciAtIFByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQiPlByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbG91ZXItcmVjaGVyY2hlciIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+TG91ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2FpZGVzLWxvY2F0aXZlcyIgdGl0bGU9IkFpZGVzIGxvY2F0aXZlcyAoQVBMLCBBTCwgZ2FyYW50aWUgTG9jYS1QYXNz4oCmKSI+TGVzIGFpZGVzIGxvY2F0aXZlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NoYXJnZXMtbG9jYXRpdmVzIiB0aXRsZT0iQ2hhcmdlcyBsb2NhdGl2ZXMiPkxlcyBjaGFyZ2VzIGRlIGxvY2F0aW9uPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2dlc3Rpb24tbG9jYXRpdmUiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPmZhaXJlIGfDqXJlcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbm9zLXNlcnZpY2VzIiB0aXRsZT0iU2VydmljZXMgZGUgZ2VzdGlvbiBsb2NhdGl2ZSI+Tm9zIHNlcnZpY2VzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdm9zLWFzc3VyYW5jZXMiIHRpdGxlPSJBc3N1cmFuY2VzIGV0IGdhcmFudGllcyBnZXN0aW9uIGxvY2F0aXZlIj5Bc3N1cmFuY2VzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvaW50cmFuZXQtZ2VzdGlvbiIgdGl0bGU9IkVzcGFjZSBpbnRyYW5ldCI+RXNwYWNlIGludHJhbmV0PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+aW52ZXN0aXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ludmVzdGlyLWltbW9iaWxpZXItbG9jYXRpZiIgdGl0bGU9IkludmVzdGlzc2VtZW50IGxvY2F0aWYgLSBJbnZlc3RpciBkYW5zIGwnaW1tb2JpbGllciI+SW52ZXN0aXIgZGFucyA8YnIgLz5sJ2ltbW9iaWxpZXIgbG9jYXRpZjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Rpc3Bvc2l0aWZzLWRlZmlzY2FsaXNhdGlvbiIgdGl0bGU9IkxlcyBkaXNwb3NpdGlmcyBkZSBkw6lmaXNjYWxpc2F0aW9uIGltbW9iaWxpw6hyZSAoTG9pIFBpbmVsLCBQRVJQ4oCmKSI+RGlzcG9zaXRpZnMgPGJyIC8+ZGUgZMOpZmlzY2FsaXNhdGlvbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hZ2VuY2VzLWltbW9iaWxpZXJlcyIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+Tm9zIGFnZW5jZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2FnZW5jZXMtaW1tb2JpbGllcmVzIiB0aXRsZT0iVG91dGVzIGxlcyBhZ2VuY2VzIGR1IHLDqXNlYXUgTGEgUsOpc2lkZW5jZSI+bGlzdGUgZGVzIGFnZW5jZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9xdWktc29tbWVzLW5vdXMiIHRpdGxlPSJQb3VyIG1pZXV4IG5vdXMgY29ubmFpdHJlIj5xdWkgc29tbWVzIG5vdXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbm91cy1yZWpvaW5kcmUiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPk5vdXMgcmVqb2luZHJlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9ub3VzLXJlam9pbmRyZSI+Tm91cyByZWpvaW5kcmU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9yZWNydXRlbWVudCI+UmVjcnV0ZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9jcmVlci1hZmZpbGllci1hZ2VuY2UtaW1tb2JpbGllcmUvIj5DcsOpZXIgb3UgYWZmaWxpZXIgdW5lIGFnZW5jZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLUZJTiBkZSBsYSBuYXZpZ2F0aW9uIHJlc3BvbnNpdmUtLT4NCg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImhlYWRlckhhdXQiIGNsYXNzPSJoZWFkZXJIYXV0IGNmIj4NCg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS0NCiAgICAgICAgICAgICAgICA8ZGl2ICBjbGFzcz0iYnRuTG9nQ3B0ZSBiZ0Jsb2NrIiBpZD0iYnRuTG9nQ3B0ZSI+DQogICAgICAgICAgICAJICAgIDxhIGhyZWY9IiMiIHRpdGxlPSJjb25uZWN0aW9uIMOgIHZvdHJlIGNvbXB0ZSI+DQogICAgICAgICAgICAJCSAgICBNb24gY29tcHRlIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIC0tPg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS1TVEFSVCBSYWNjb3VyY2lzIGNvbXB0ZSArIGFsZXJ0ZXMtLT4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmFjY291cmNpQnRuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9IlBTZWFyY2hTaG9ydGN1dCIgY2xhc3M9ImJ0blNlYXJjaFNob3J0Y3V0MDIgYmdCbG9jayI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQlNlYXJjaFNob3J0Y3V0IiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCU2VhcmNoU2hvcnRjdXQmIzM5OywmIzM5OyYjMzk7KSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0blNlYXJjaFNob3J0Y3V0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4gICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImJ0blNlYXJjaFNob3J0Y3V0MDJfdHh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcm91dmVyIHVuIGJpZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj48IS0tIEB3aGl0ZXNwYWNlDQoNCiAgICAgICAgICAgICAgICAgICAgLS0+PGRpdiBjbGFzcz0iYnRuU2hvcnRDb21wdGUgYmdCbG9jayI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TaG9ydEFsZXJ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbXB0ZS1hbGVydGVzIiB0aXRsZT0iTWVzIGFsZXJ0ZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TaG9ydEZhdm9yaXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29tcHRlLXNlbGVjdGlvbiIgdGl0bGU9Ik1lcyBmYXZvcmlzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuU2hvcnRQaG90b3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29tcHRlLXBob3RvcyIgdGl0bGU9Ik1lcyBwaG90b3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TaG9ydENwdGUiIGlkPSJidG5Mb2dDcHRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9Ik1vbiBjb21wdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS1GSU4gUmFjY291cmNpcyBjb21wdGUgKyBhbGVydGVzLS0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iLyIgdGl0bGU9IlJldmVuaXIgw6AgbCdhY2N1ZWlsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9sb2dvLnN2ZyIgYWx0PSJsb2dvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPGhlYWRlciBpZD0iaGVhZGVyQmFzIiBjbGFzcz0iaGVhZGVyQmFzIGJnQmxvY2s0Ij4NCiAgICAgICAgICAgICAgICAgICAgPCEtLURlYnV0IGR1IC5oZWFkZXItLT4NCiAgICAgICAgICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy9TVEFSVCBOQVZJR0FUSU9OIFBSSU5DSVBBTEUvLy8vLy8vLy8vLS0+DQogICAgICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im1lbnVMYXJnZVNjcmVlbiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJydWJyaWsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiB0aXRsZT0iUmV2ZW5pciDDoCBsJ2FjY3VlaWwiPkFjY3VlaWw8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hldGVyIiB0aXRsZT0iYWNoZXRlciB1biBiaWVuIGltbW9iaWxpZXIiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPmFjaGV0ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2FjaGV0ZXIiIHRpdGxlPSJWZW50ZSBpbW1vYmlsaWVyIC0gQWNoYXQgaW1tb2JpbGllciI+cmVjaGVyY2hlciA8YnIgLz51biBiaWVuPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2NvbW1lbnQtYmllbi1hY2hldGVyIiB0aXRsZT0iQ29tbWVudCBiaWVuIGFjaGV0ZXIgc29uIGJpZW4gaW1tb2JpbGllciAiPiAgY29tbWVudCA8YnIgLz5iaWVuIGFjaGV0ZXI8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvcmV1c3Npci1hY2hhdC1pbW1vYmlsaWVyIiB0aXRsZT0iQ29uc2VpbHMgcG91ciByw6l1c3NpciBzb24gYWNoYXQgaW1tb2JpbGllciAiPlLDqXVzc2lyIG1vbjxiciAvPiBhY2hhdCBpbW1vYmlsaWVyPC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9hY2hldGVyL2ZpbmFuY2VtZW50IiB0aXRsZT0iRmluYW5jZXIgc29uIGJpZW4gaW1tb2JpbGllciI+RmluYW5jZXIgPGJyIC8+bW9uIGFjaGF0PC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9kZW1lbmFnZW1lbnQiIHRpdGxlPSJDb25zZWlscyBwb3VyIGJpZW4gZMOpbcOpbmFnZXIgLSBQcsOpcGFyZXIgc29uIGTDqW3DqW5hZ2VtZW50Ij5QcsOpcGFyZXIgc29uPGJyIC8+IGTDqW3DqW5hZ2VtZW50PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAtLT48bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW5kcmUiIHRpdGxlPSJWZW5kcmUgdW4gYmllbiBpbW1vYmlsaWVyIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij52ZW5kcmU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9lc3RpbWF0aW9uLWltbW9iaWxpZXJlIiB0aXRsZT0iw4l2YWx1YXRpb24gZXQgZXN0aW1hdGlvbiBpbW1vYmlsacOocmUgZ3JhdHVpdGUgZW4gbGlnbmUiPmVzdGltYXRpb24gPGJyIC8+aW1tb2JpbGnDqHJlPC9hPjwvbGk+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9tYW5kYXQtdmVudGUtaW1tb2JpbGllciIgdGl0bGU9Ik1hbmRhdCBkZSB2ZW50ZSBpbW1vYmlsaWVyIDogY2UgcXUnaWwgZmF1dCBzYXZvaXIiPmxlIG1hbmRhdCA8YnIgLz5kZSB2ZW50ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9maXNjYWxpdGUtcGx1cy12YWx1ZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkZpc2NhbGl0w6kgZXQgcGx1cy12YWx1ZSBpbW1vYmlsacOocmUiPkZpc2NhbGl0w6kgZXQgPGJyIC8+cGx1cy12YWx1ZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9jb25maWVyLWJpZW4taW1tb2JpbGllciIgdGl0bGU9IkNvbmZpZXotbm91cyBsYSB2ZW50ZSBkZSB2b3RyZSBiaWVuIGltbW9iaWxpZXIiPkNvbmZpZXIgPGJyIC8+dm90cmUgYmllbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9iaWVuLXZlbmRyZSIgdGl0bGU9IkNvbW1lbnQgYmllbiB2ZW5kcmUgc29uIGJpZW4gaW1tb2JpbGllciAiPkNvbW1lbnQgPGJyIC8+YmllbiB2ZW5kcmU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvdmVuZHJlLWF2ZWMtc2Fucy1hZ2VudC1pbW1vYmlsaWVyIiB0aXRsZT0iVmVudGUgc2FucyBhZ2VuY2UgaW1tb2JpbGnDqHJlIDogYXZhbnRhZ2VzIGV0IGluY29udsOpbmllbnRzIj5WZW5kcmUgPGJyIC8+c2FucyBhZ2VuY2U8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvZGVtYXJjaGVzLWFkbWluaXN0cmF0aXZlcyIgdGl0bGU9IkTDqW1hcmNoZXMgZXQgZm9ybWFsaXTDqXMgcG91ciBhY2hldGVyIG91IHZlbmRyZSB1biBiaWVuIGltbW9iaWxpZXIiPkTDqW1hcmNoZXMgPGJyIC8+YWRtaW5pc3RyYXRpdmVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2RpYWdub3N0aWNzIiB0aXRsZT0iRGlhZ25vc3RpY3MgdGVjaG5pcXVlcyBhdmFudCB2ZW50ZSBpbW1vYmlsacOocmUiPkxlcyBkaWFnbm9zdGljcyA8YnIgLz50ZWNobmlxdWVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2RlbWVuYWdlbWVudCIgdGl0bGU9IkNvbnNlaWxzIHBvdXIgYmllbiBkw6ltw6luYWdlciAtIFByw6lwYXJlciBzb24gZMOpbcOpbmFnZW1lbnQiPlByw6lwYXJlciBzb248YnIgLz4gZMOpbcOpbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAtLT48bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9sb3Vlci1yZWNoZXJjaGVyIiB0aXRsZT0iVHJvdXZlciB1biBsb2dlbWVudCDDoCBsb3VlciIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+bG91ZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2FpZGVzLWxvY2F0aXZlcyIgdGl0bGU9IkFpZGVzIGxvY2F0aXZlcyAoQVBMLCBBTCwgZ2FyYW50aWUgTG9jYS1QYXNz4oCmKSI+TGVzIGFpZGVzIGxvY2F0aXZlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9jaGFyZ2VzLWxvY2F0aXZlcyIgdGl0bGU9IkNoYXJnZXMgbG9jYXRpdmVzIj5MZXMgY2hhcmdlcyBkZSBsb2NhdGlvbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IkZhaXRlcyBnw6lyZXIgdm90cmUgYmllbiIgb25jbGljaz0icmV0dXJuIGZhbHNlOyI+ZmFpcmUgZ8OpcmVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InNvdXNSdWJyaWsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9ub3Mtc2VydmljZXMiIHRpdGxlPSJTZXJ2aWNlcyBkZSBnZXN0aW9uIGxvY2F0aXZlIj5Ob3Mgc2VydmljZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvdm9zLWFzc3VyYW5jZXMiIHRpdGxlPSJBc3N1cmFuY2VzIGV0IGdhcmFudGllcyBnZXN0aW9uIGxvY2F0aXZlIj5Bc3N1cmFuY2VzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2ludHJhbmV0LWdlc3Rpb24iIHRpdGxlPSJFc3BhY2UgaW50cmFuZXQiPkVzcGFjZSBpbnRyYW5ldDwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgICAgICAgICAgLS0+PGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0aXRsZT0iSW52ZXN0aXIgZGFucyBsJ2ltbW9iaWxpZXIiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPmludmVzdGlyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InNvdXNSdWJyaWsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9pbnZlc3Rpci1pbW1vYmlsaWVyLWxvY2F0aWYiIHRpdGxlPSJJbnZlc3Rpc3NlbWVudCBsb2NhdGlmIC0gSW52ZXN0aXIgZGFucyBsJ2ltbW9iaWxpZXIiPkludmVzdGlyIGRhbnMgPGJyIC8+bCdpbW1vYmlsaWVyIGxvY2F0aWY8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvZGlzcG9zaXRpZnMtZGVmaXNjYWxpc2F0aW9uIiB0aXRsZT0iTGVzIGRpc3Bvc2l0aWZzIGRlIGTDqWZpc2NhbGlzYXRpb24gaW1tb2JpbGnDqHJlIChMb2kgUGluZWwsIFBFUlDigKYpIj5EaXNwb3NpdGlmcyA8YnIgLz5kZSBkw6lmaXNjYWxpc2F0aW9uPC9hPjwvbGk+ICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48IS0tIEB3aGl0ZXNwYWNlICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IlZvdHJlIGNhcnJpw6hyZSBhdSBzZWluIGR1IHLDqXNlYXUiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiPkxlIHLDqXNlYXU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic291c1J1YnJpayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL25vdXMtcmVqb2luZHJlIiB0aXRsZT0iUmVqb2luZHJlIGxlIHLDqXNlYXUiPk5vdXMgcmVqb2luZHJlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL3JlY3J1dGVtZW50IiB0aXRsZT0iVHJvdXZlciB1biBlbXBsb2kgZGFucyB1bmUgZGUgbm9zIGFnZW5jZXMiPnJlY3J1dGVtZW50PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1YiI+PGEgaHJlZj0iL2NyZWVyLWFmZmlsaWVyLWFnZW5jZS1pbW1vYmlsaWVyZSIgdGl0bGU9IkNyw6llciB1bmUgYWdlbmNlIExhIFLDqXNpZGVuY2UiPmNyw6llciBvdSBhZmZpbGllciB1bmUgYWdlbmNlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48IS0tIEB3aGl0ZXNwYWNlIA0KICAgICAgICAgICAgICAgICAgICAgICAgIC0tPjxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IlRyb3V2ZXIgdW5lIGFnZW5jZSBMYSBSw6lzaWRlbmNlIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij5ub3MgYWdlbmNlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzb3VzUnVicmlrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViIj48YSBocmVmPSIvYWdlbmNlcy1pbW1vYmlsaWVyZXMiIHRpdGxlPSJUb3V0ZXMgbGVzIGFnZW5jZXMgZHUgcsOpc2VhdSBMYSBSw6lzaWRlbmNlIj5saXN0ZSBkZXMgYWdlbmNlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWIiPjxhIGhyZWY9Ii9xdWktc29tbWVzLW5vdXMiIHRpdGxlPSJQb3VyIG1pZXV4IG5vdXMgY29ubmFpdHJlIj5xdWkgc29tbWVzIG5vdXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0vLy8vLy8vLy8vRklOIE5BVklHQVRJT04gUFJJTkNJUEFMRS8vLy8vLy8vLy8vLS0+DQogICAgICAgICAgICAgICAgPC9oZWFkZXI+DQogICAgICAgICAgICAgICAgPCEtLUZpbiBkdSAuaGVhZGVyLS0+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJVUExvZ0NwdGUiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImRpdkxvZ0NwdGUiIGNsYXNzPSJkaXZMb2dDcHRlX2Nsb3NlZCIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iUFVzZXJOb3RMb2dnZWQiIGNsYXNzPSJmb3JtTG9nQ3B0ZSBiZ0Jsb2NrIj4NCgkJCQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImgzX3N0eWxlIj5TRSBDT05ORUNURVI8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW50cmV6IHZvcyBpZGVudGlmaWFudHMgZGUgY29ubmVjdGlvbiBwb3VyIGFjY8OpZGVyIMOgIHZvdHJlIGVzcGFjZSBwZXJzb25uZWw8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0iPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZW1haWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRUQlVzZXJOYW1lIiB0eXBlPSJlbWFpbCIgaWQ9IlRCVXNlck5hbWUiIHBsYWNlaG9sZGVyPSJFbWFpbCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGFzc3dvcmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRUQlVzZXJQYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiIGlkPSJUQlVzZXJQYXNzd29yZCIgcGxhY2Vob2xkZXI9Ik1vdCBkZSBwYXNzZSIgY2xhc3M9ImZlZWRiYWNrLWlucHV0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iQ0JSZW1lbWJlck1lIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkQ0JSZW1lbWJlck1lIiBjaGVja2VkPSJjaGVja2VkIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IkNCUmVtZW1iZXJNZSI+PHNwYW4+PC9zcGFuPlNlIHNvdXZlbmlyIGRlIG1vaTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IkxCTW90RGVQYXNzZU91YmxpZSIgdGl0bGU9IlLDqWN1cMOpcmVyIHZvdHJlIG1vdCBkZSBwYXNzZSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRMQk1vdERlUGFzc2VPdWJsaWUmIzM5OywmIzM5OyYjMzk7KSI+TW90IGRlIHBhc3NlIG91Ymxpw6kgPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQkNyZWVyQ29tcHRlIiB0aXRsZT0iQ3LDqWVyIHVuIG5vdXZlYXUgY29tcHRlIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJExCQ3JlZXJDb21wdGUmIzM5OywmIzM5OyYjMzk7KSI+Q3LDqWVyIHVuIGNvbXB0ZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VibWl0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRCVXNlckxvZyIgdmFsdWU9IlNFIENPTk5FQ1RFUiIgb25jbGljaz0iamF2YXNjcmlwdDpXZWJGb3JtX0RvUG9zdEJhY2tXaXRoT3B0aW9ucyhuZXcgV2ViRm9ybV9Qb3N0QmFja09wdGlvbnMoJnF1b3Q7Y3RsMDAkQlVzZXJMb2cmcXVvdDssICZxdW90OyZxdW90OywgdHJ1ZSwgJnF1b3Q7TG9naW5Hcm91cCZxdW90OywgJnF1b3Q7JnF1b3Q7LCBmYWxzZSwgZmFsc2UpKSIgaWQ9IkJVc2VyTG9nIiBjbGFzcz0ic20tbG9naW4tYnV0dG9uIiB0eXBlPSJzdWJtaXQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNmIj48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQk8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCg0KICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgDQoNCiAgICAgICAgICAgIDxkaXYgaWQ9ImRpdlNlYXJjaFNob3J0Y3V0IiBjbGFzcz0iZGl2U2VhcmNoU2hvcnRjdXRfY2xvc2VkIGJnQmxvY2siIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KDQo8IS0tIFNUQVJUIFNFQVJDSCBBQ0hBVC0tPg0KPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUE1haW4iIGNsYXNzPSJzZWFyY2gwMiI+DQoJDQogICAgDQogICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfSDJUaXRsZSIgY2xhc3M9ImgyX3N0eWxlIj5SZWNoZXJjaGVyIHVuIGJpZW48L2Rpdj4NCiAgICAgICAgICAgIA0KICAgICANCiAgICA8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9QU2VhcmNoQmFyUmVmIiBjbGFzcz0ic2VhcmNoQmFyUmVmIj4NCgkJDQogICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRBdXRvQ29tcGxldGVSZWYkVEJBdXRvQ29tcGxldGUiIHR5cGU9InRleHQiIGF1dG9jb21wbGV0ZT0ib2ZmIiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlIiBjbGFzcz0ic2VhcmNoQmFyUmVmVHh0IiBwbGFjZWhvbGRlcj0iRW50cmV6IHVuZSByw6lmw6lyZW5jZSBvdSB1biBudW3DqXJvIGRlIG1hbmRhdCIgLz4NCjxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRBdXRvQ29tcGxldGVSZWYkVEJWYWx1ZSIgdHlwZT0idGV4dCIgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQlZhbHVlIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIC8+DQo8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9BdXRvQ29tcGxldGVSZWZfUmVzdWx0c0RpdiIgY2xhc3M9ImJhcnJlUmVjaGVyY2hlUmVmUmVzdWx0c0RpdiI+PC9kaXY+DQoNCg0KICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRCTGF1bmNoUmVmU2VhcmNoIiB2YWx1ZT0iIiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQkxhdW5jaFJlZlNlYXJjaCIgY2xhc3M9InNlYXJjaEJhclJlZkJ0biIgLz4NCiAgICANCgk8L2Rpdj4gICAgICAgICAgICANCiAgICA8cCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfcFN1YlRpdGxlIj5OZSByZW1wbGlzc2V6IHF1ZSBsZXMgY2hhbXBzIHF1aSB2b3VzIGludGVyZXNzZW50PC9wPg0KDQogICAgPGRpdiBjbGFzcz0ic2VhcmNoQ3JpdGVyZXMwMiI+DQoNCiAgICAgICAgPCEtLTxkaXYgY2xhc3M9ImJvdXRvblJhZGlvMDIiPg0KICAgICAgICAgICAgPGEgaHJlZj0iIyI+QWNoZXRlcjwvYT4NCiAgICAgICAgPC9kaXY+LS0+DQoNCiAgICAgICAgPHNwYW4gaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1JCTFR5cGVTZWFyY2giIGNsYXNzPSJzZWFyY2gtdHlwZS1yYWRpb3MiPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJMVHlwZVNlYXJjaF8wIiB0eXBlPSJyYWRpbyIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkUkJMVHlwZVNlYXJjaCIgdmFsdWU9IkJhYyIgY2hlY2tlZD0iY2hlY2tlZCIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQkxUeXBlU2VhcmNoXzAiPkFDSEFUPC9sYWJlbD48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1JCTFR5cGVTZWFyY2hfMSIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCTFR5cGVTZWFyY2giIHZhbHVlPSJMb2MiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJMVHlwZVNlYXJjaF8xIj5MT0NBVElPTjwvbGFiZWw+PC9zcGFuPg0KICAgICAgICA8YnIgLz4NCiAgICAgICAgPGJyIC8+DQoNCiAgICAgICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX01haW5EaXYiIHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTsiIGNsYXNzPSJtdWx0aS1zZWxlY3QtZHJvcGRvd24iPg0KICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkVEJJbnB1dCIgdHlwZT0idGV4dCIgYXV0b2NvbXBsZXRlPSJvZmYiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfVEJJbnB1dCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0MiIgcGxhY2Vob2xkZXI9IlR5cGUgZGUgYmllbiIgLz4NCiAgICA8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfVmFsdWVzRGl2IiBjbGFzcz0idmFsdWVzLWRpdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsgcG9zaXRpb246YWJzb2x1dGU7IGJhY2tncm91bmQtY29sb3I6d2hpdGU7IHotaW5kZXg6OTk5OTsiPg0KICAgICAgICA8YnIgLz4NCiAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpibG9jazsgdGV4dC1hbGlnbjpyaWdodDsiPg0KICAgICAgICAgICAgPGEgaHJlZj0iIyI+VmFsaWRlcjwvYT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxzcGFuIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjp3aGl0ZTsiPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18wIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkTVNERFR5cGVzJENCTFZhbHVlcyQwIiB2YWx1ZT0iMjAiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18wIj5NYWlzb248L2xhYmVsPjxiciAvPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18xIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkTVNERFR5cGVzJENCTFZhbHVlcyQxIiB2YWx1ZT0iMSIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzEiPkFwcGFydGVtZW50PC9sYWJlbD48YnIgLz48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfMiIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1TRERUeXBlcyRDQkxWYWx1ZXMkMiIgdmFsdWU9IjMiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18yIj5UZXJyYWluPC9sYWJlbD48YnIgLz48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfMyIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1TRERUeXBlcyRDQkxWYWx1ZXMkMyIgdmFsdWU9IjUiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlc18zIj5Db21tZXJjZTwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzQiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDQiIHZhbHVlPSIxNCIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzQiPkltbWV1YmxlPC9sYWJlbD48YnIgLz48aW5wdXQgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfNSIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1TRERUeXBlcyRDQkxWYWx1ZXMkNSIgdmFsdWU9IjMwIiAvPjxsYWJlbCBmb3I9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXNfNSI+UGFya2luZzwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzYiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDYiIHZhbHVlPSIzMiIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzYiPkJ1cmVhdTwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzciIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDciIHZhbHVlPSIzMSIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzciPkJveDwvbGFiZWw+PGJyIC8+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzgiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRNU0REVHlwZXMkQ0JMVmFsdWVzJDgiIHZhbHVlPSIxMSIgLz48bGFiZWwgZm9yPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NU0REVHlwZXNfQ0JMVmFsdWVzXzgiPlZpYWdlcjwvbGFiZWw+PC9zcGFuPg0KICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OmJsb2NrOyB0ZXh0LWFsaWduOnJpZ2h0OyI+DQogICAgICAgICAgICA8YSBocmVmPSIjIj5WYWxpZGVyPC9hPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4gICAgDQo8L2Rpdj4NCiAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICA8aW5wdXQgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkVEJQcml4TWluIiB0eXBlPSJ0ZXh0IiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfVEJQcml4TWluIiBjbGFzcz0iZmVlZGJhY2staW5wdXQyIG1hcmdpblRvcDYiIHBsYWNlaG9sZGVyPSJQcml4IE1pbiDigqwiIC8+PCEtLSBAd2hpdGVzcGFjZQ0KDQogICAgICAgIC0tPjxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRUQlByaXhNYXgiIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlByaXhNYXgiIGNsYXNzPSJmZWVkYmFjay1pbnB1dDIiIHBsYWNlaG9sZGVyPSJQcml4IE1heCDigqwiIC8+DQoNCiAgICAgICAgPGlucHV0IG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFRCTmJQaWVjZXNNaW4iIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQk5iUGllY2VzTWluIiBjbGFzcz0iZmVlZGJhY2staW5wdXQyIG1hcmdpblRvcDYiIHBsYWNlaG9sZGVyPSJQacOoY2VzIE1pbiIgLz48IS0tIEB3aGl0ZXNwYWNlDQoNCiAgICAgICAgLS0+PGlucHV0IG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFRCTmJQaWVjZXNNYXgiIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQk5iUGllY2VzTWF4IiBjbGFzcz0iZmVlZGJhY2staW5wdXQyICIgcGxhY2Vob2xkZXI9IlBpw6hjZXMgTWF4IiAvPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICA8aW5wdXQgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkVEJOYkNoYW1icmVzTWluIiB0eXBlPSJ0ZXh0IiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfVEJOYkNoYW1icmVzTWluIiBjbGFzcz0iZmVlZGJhY2staW5wdXQyIG1hcmdpblRvcDYiIHBsYWNlaG9sZGVyPSJDaGFtYnJlcyBNaW4iIC8+PCEtLSBAd2hpdGVzcGFjZQ0KDQogICAgICAgIC0tPjxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRUQk5iQ2hhbWJyZXNNYXgiIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQk5iQ2hhbWJyZXNNYXgiIGNsYXNzPSJmZWVkYmFjay1pbnB1dDIgIiBwbGFjZWhvbGRlcj0iQ2hhbWJyZXMgTWF4IiAvPg0KDQogICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRUQlN1cmZhY2VNaW4iIHR5cGU9InRleHQiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlN1cmZhY2VNaW4iIGNsYXNzPSJmZWVkYmFjay1pbnB1dDIgbWFyZ2luVG9wNiIgcGxhY2Vob2xkZXI9IlN1cmYuIE1pbiBtMiIgLz48IS0tIEB3aGl0ZXNwYWNlDQoNCiAgICAgICAgLS0+PGlucHV0IG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFRCU3VyZmFjZU1heCIgdHlwZT0idGV4dCIgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCU3VyZmFjZU1heCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0MiAiIHBsYWNlaG9sZGVyPSJTdXJmLiBNYXggbTIiIC8+DQogICAgICAgIA0KICAgIDwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCg0KCS0tPjxkaXYgY2xhc3M9InNlYXJjaENyaXRlcmVzMDIiPg0KICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgICAgIDxkaXYgY2xhc3M9Im1hcmdpbkJvdHRvbTMiPg0KICAgICAgICAgICAgDQoNCg0KPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCiAgICANCiAgICBtdnRiX2lucHV0IHsNCiAgICAgICAgY29sb3I6IzY2NjsNCgkgICAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjsNCgkgICAgZm9udC13ZWlnaHQ6MzAwOw0KCSAgICBmb250LXNpemU6IDAuOWVtOw0KCSAgICBsaW5lLWhlaWdodDogMWVtOw0KICAgICAgICAgICAgdmVydGljYWwtYWxpZ246dGV4dC10b3A7DQoJICAgIGJhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjcpOw0KCSAgICBwYWRkaW5nOiAycHg7DQoJICAgIHdpZHRoOjEwMCU7DQogICAgICAgIGhlaWdodDo0MHB4Ow0KCSAgICBib3JkZXI6MXB4IHNvbGlkICM2NjY7DQoJICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuM3M7DQoJICAgIC1tb3otdHJhbnNpdGlvbjogYWxsIDAuM3M7DQoJICAgIC1vLXRyYW5zaXRpb246IGFsbCAwLjNzOw0KCSAgICAtbXMtdHJhbnNpdGlvbjogYWxsIDAuM3M7DQoJICAgIHRyYW5zaXRpb246IGFsbCAwLjNzOw0KCSAgICBkaXNwbGF5OmlubGluZS1ibG9jazsNCiAgICAgICAgIHdoaXRlLXNwYWNlOm5vd3JhcDsNCiAgICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsNCiAgICAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lOw0KICAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAwcHggMHB4IHJnYmEoMCwwLDAsMCkgLyogbMOpZ8OocmUgb21icmUgaW50ZXJuZSAqLw0KICAgIH0NCiAgICBtdnRiX2lucHV0OmZvY3Vzew0KICAgICAgIA0KCSAgICBib3JkZXI6MXB4IHNvbGlkICM2NjY7DQoJICAgDQogICAgfQ0KDQo8L3N0eWxlPg0KDQo8aW5wdXQgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkTVZUQlZpbGxlcyRUQkF1dG9Db21wbGV0ZSIgdHlwZT0idGV4dCIgYXV0b2NvbXBsZXRlPSJvZmYiIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NVlRCVmlsbGVzX1RCQXV0b0NvbXBsZXRlIiBjbGFzcz0ibXZ0Yl9pbnB1dCIgYXV0b2NvbXBsZXRlPSJPZmYiIHBsYWNlaG9sZGVyPSJWaWxsZSBvdSBDUCIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJE1WVEJWaWxsZXMkVEJWYWx1ZSIgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJWYWx1ZSIgLz4NCg0KICAgICAgICA8L2Rpdj4gDQogICAgICAgIA0KICAgICAgICA8ZGl2IGNsYXNzPSJuYlBpZWNlQnRuMDIgbWFyZ2luVG9wMiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+w4lsYXJnaXIgbGEgcmVjaGVyY2hlIChlbiBrbSk8L2Rpdj4NCiAgICAgICAgICAgIDxzcGFuIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQlBlcmltZXRyZSIgY2xhc3M9ImJvdXRvblJhZGlvTmJQaWVjZXMwMiI+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQlBlcmltZXRyZV8wIiB0eXBlPSJyYWRpbyIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkUkJQZXJpbWV0cmUiIHZhbHVlPSIiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMCI+LTwvbGFiZWw+PGlucHV0IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9SQlBlcmltZXRyZV8xIiB0eXBlPSJyYWRpbyIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkUkJQZXJpbWV0cmUiIHZhbHVlPSI1IiAvPjxsYWJlbCBmb3I9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1JCUGVyaW1ldHJlXzEiPjU8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMiIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMTAiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMiI+MTA8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMyIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMTUiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfMyI+MTU8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNCIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMjAiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNCI+MjA8L2xhYmVsPjxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNSIgdHlwZT0icmFkaW8iIG5hbWU9ImN0bDAwJEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsJFJCUGVyaW1ldHJlIiB2YWx1ZT0iMjUiIC8+PGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUkJQZXJpbWV0cmVfNSI+MjUrPC9sYWJlbD48L3NwYW4+DQogICAgICAgIDwvZGl2PiAgICAgICAgDQogICAgICAgIA0KICAgICAgICA8ZGl2IGNsYXNzPSJtYXJnaW5Ub3AyIj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQ0JWZW50ZXNQcml2ZWVzIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3RsMDAkR3JhbmRNb3RldXJSZWNoZXJjaGVDdGwkQ0JWZW50ZXNQcml2ZWVzIiAvPg0KICAgICAgICAgICAgPGxhYmVsIGZvcj0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQ0JWZW50ZXNQcml2ZWVzIj48c3Bhbj48L3NwYW4+VlAvZXhjbHVzaXZpdMOpcyB1bmlxdWVtZW50PC9sYWJlbD4NCiAgICAgICAgPC9kaXY+IA0KDQogICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgPC9kaXY+PCEtLSBAd2hpdGVzcGFjZQ0KDQoNCiAgICAtLT48ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9QQnV0dG9uIiBjbGFzcz0iYnRuU2VhcmNoMDIiPg0KCQkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUENyZWF0ZUFsZXJ0ZSIgY2xhc3M9ImJ0bkFsZXJ0ZU1haWwwMiI+DQoJCQkNCiAgICAgICAgICAgIDxhIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9MQkFsZXJ0ZU1haWwiIGNsYXNzPSJiZ0Jsb2NrM2IiIHRpdGxlPSJjcsOpZXIgdW5lIGFsZXJ0ZSBtYWlsIG91IHNtcyIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRMQkFsZXJ0ZU1haWwmIzM5OywmIzM5OyYjMzk7KSI+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5BbGVydGVNYWlsVHh0MDIiPkNyw6llciA8YnIgLz51bmUgYWxlcnRlIDxiciAvPm1haWwgb3Ugc21zPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2FsZXJ0TWFpbFBpY3Quc3ZnIiBhbHQ9ImNyw6llciB1bmUgYWxlcnRlIG1haWwgb3Ugc21zIiAvPiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvYT4NCiAgICAgICAgDQoJCTwvZGl2Pg0KICAgICAgICANCiAgICAgICAgPGRpdiBjbGFzcz0iYnRuU2F2ZUNyaXRlcmVzMDIiIHN0eWxlPSJ2aXNpYmlsaXR5OmhpZGRlbjsiPg0KICAgICAgICAgICAgPGEgaWQ9IkdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0xCU2F1dmVnYXJkZUNyaXRlcmVzIiBjbGFzcz0iYmdCbG9jazNiIiB0aXRsZT0ic2F1dmVnYXJkZXIgdm9zIGNyaXRlcmVzIGRlIHJlY2hlcmNoZSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRMQlNhdXZlZ2FyZGVDcml0ZXJlcyYjMzk7LCYjMzk7JiMzOTspIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuU2F2ZUNyaXRlcmVzVHh0MDIiPlNhdXZlZ2FyZGVyIDxiciAvPnZvcyBjcml0w6hyZXMgPGJyIC8+ZGUgcmVjaGVyY2hlPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL3NhdmVTZWFyY2hQaWN0LnN2ZyIgYWx0PSJzYXV2ZWdhcmRlciB2b3MgY3JpdGVyZSBkZSByZWNoZXJjaGUiIC8+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgPGRpdiBpZD0iR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfUFNlYXJjaCIgY2xhc3M9ImJ0blZhbGlkU2VhcmNoMDIiPg0KCQkJDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9VUFNlYXJjaCI+DQoJCQkJDQogICAgICAgICAgICAgICAgICAgIDxhIGlkPSJHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9MQlNlYXJjaCIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRHcmFuZE1vdGV1clJlY2hlcmNoZUN0bCRMQlNlYXJjaCYjMzk7LCYjMzk7JiMzOTspIj5UUk9VVkVSPC9hPg0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+ICAgICAgICAgICAgDQogICAgICAgIA0KCQk8L2Rpdj4NCiAgICANCgk8L2Rpdj4gICAgDQoNCg0KPC9kaXY+DQogICAgICAgIA0KPCEtLUVORCBTRUFSQ0ggQUNIQVQtLT4NCg0KIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICBTeXMuV2ViRm9ybXMuUGFnZVJlcXVlc3RNYW5hZ2VyLmdldEluc3RhbmNlKCkuYWRkX3BhZ2VMb2FkZWQoR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfcGFnZUxvYWRlZEhhbmRsZXIpOw0KDQogICAgIGZ1bmN0aW9uIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX3BhZ2VMb2FkZWRIYW5kbGVyKHNlbmRlciwgYXJncykgew0KDQogICAgICAgICAgICB2YXIgc3VyZmFjZU1pbl9pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlN1cmZhY2VNaW4nKTsNCiAgICAgICAgICAgIHZhciBzdXJmYWNlTWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCU3VyZmFjZU1heCcpOw0KDQogICAgICAgICAgICB2YXIgcHJpeE1pbl9pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9UQlByaXhNaW4nKTsNCiAgICAgICAgICAgIHZhciBwcml4TWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCUHJpeE1heCcpOw0KDQogICAgICAgICAgICB2YXIgbmJwaWVjZXNNaW5faW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfVEJOYlBpZWNlc01pbicpOw0KICAgICAgICAgICAgdmFyIG5icGllY2VzTWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCTmJQaWVjZXNNYXgnKTsNCg0KICAgICAgICAgICAgdmFyIG5iY2hicmVzTWluX2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCTmJDaGFtYnJlc01pbicpOw0KICAgICAgICAgICAgdmFyIG5iY2hicmVzTWF4X2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX1RCTmJDaGFtYnJlc01heCcpOw0KDQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KHN1cmZhY2VNaW5faW5wdXQsICIgbcKyIG1pbiIsIGZhbHNlKTsNCiAgICAgICAgICAgIEluaXROdW1lcmljSW5wdXQoc3VyZmFjZU1heF9pbnB1dCwgIiBtwrIgbWF4IiwgZmFsc2UpOw0KICAgICAgICAgICAgSW5pdE51bWVyaWNJbnB1dChwcml4TWluX2lucHV0LCAiIOKCrCBtaW4iLCBmYWxzZSk7DQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KHByaXhNYXhfaW5wdXQsICIg4oKsIG1heCIsIGZhbHNlKTsNCiAgICAgICAgICAgIEluaXROdW1lcmljSW5wdXQobmJwaWVjZXNNaW5faW5wdXQsICIgcGnDqGNlcyBtaW4iLCBmYWxzZSk7DQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KG5icGllY2VzTWF4X2lucHV0LCAiIHBpw6hjZXMgbWF4IiwgZmFsc2UpOw0KICAgICAgICAgICAgSW5pdE51bWVyaWNJbnB1dChuYmNoYnJlc01pbl9pbnB1dCwgIiBjaGFtYnJlcyBtaW4iLCBmYWxzZSk7DQogICAgICAgICAgICBJbml0TnVtZXJpY0lucHV0KG5iY2hicmVzTWF4X2lucHV0LCAiIGNoYW1icmVzIG1heCIsIGZhbHNlKTsNCg0KICAgICAgICB9Ow0KICAgICAgICAgIA0KICAgIDwvc2NyaXB0Pg0KDQoNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vU1RBUlQgQ29udGVudSBkeW5hbWlxdWUgZGUgbGEgcGFnZS0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIGJvZHktY29udGVudCI+DQoNCiAgICAgICAgICAgICAgICA8IS0tLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9EZWJ1dCBkdSAubWFpbi0tPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4gY2YiIGlkPSJtYWluIiByb2xlPSJtYWluIj4NCg0KICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvanF1ZXJ5LTMuMS4xLm1pbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjEyLjEubWluLmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgICAgIA0KDQogICAgDQogICAgICAgIA0KICAgIDxkaXYgaWQ9ImZiLXJvb3QiPjwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgKGZ1bmN0aW9uIChkLCBzLCBpZCkgew0KICAgICAgICAgICAgdmFyIGpzLCBmanMgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdOw0KICAgICAgICAgICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSByZXR1cm47DQogICAgICAgICAgICBqcyA9IGQuY3JlYXRlRWxlbWVudChzKTsganMuaWQgPSBpZDsNCiAgICAgICAgICAgIGpzLnNyYyA9ICIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2ZyX0ZSL3Nkay5qcyN4ZmJtbD0xJnZlcnNpb249djIuNCI7DQogICAgICAgICAgICBmanMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIGZqcyk7DQogICAgICAgIH0oZG9jdW1lbnQsICdzY3JpcHQnLCAnZmFjZWJvb2stanNzZGsnKSk7DQoNCiAgICA8L3NjcmlwdD4NCiAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRkNvZGVBZ2VuY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfSEZDb2RlQWdlbmNlIiB2YWx1ZT0iNjEiIC8+DQogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkSEZDb2RlVmlsbGUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfSEZDb2RlVmlsbGUiIHZhbHVlPSIyMTc1OSIgLz4NCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRlBob3Rvc0ZpbHRlclN0cmluZyIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9IRlBob3Rvc0ZpbHRlclN0cmluZyIgdmFsdWU9InBob3Rvc3ludGg9MCBBTkQgQ29kZV9Qcm9kdWl0PTczNDQyNiIgLz4NCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRlJlZlByb2R1aXQiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfSEZSZWZQcm9kdWl0IiB2YWx1ZT0iMTAwMDEyMzAxOSIgLz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFyaWFuZSI+DQogICAgICAgICAgICAgICAgPCEtLXN0YXJ0IEZJTCBBUklBTk5FLS0+DQogICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyIgdGl0bGU9InJldmVuaXIgw6AgbCdhY2N1ZWlsIGR1IHNpdGUgTGEgUsOpc2lkZW5jZSI+QWNjdWVpbDwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxsaSBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpQWNoZXRlciI+PGEgaHJlZj0iL2FjaGV0ZXIiIHRpdGxlPSJhY2hldGVyIHVuIGJpZW4iPkFjaGV0ZXI8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8bGk+RmljaGUgZGVzY3JpcHRpdmUgZHUgYmllbjwvbGk+DQoNCiAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8IS0tZmluIEZJTCBBUklBTk5FLS0+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpY2hlQWZmYWlyZVdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDwhLS1zdGFydCBmaWNoZUFmZmFpcmVXcmFwcGVyLS0+DQoNCiAgICAgICAgICAgICAgICA8aDE+w4AgUGFyaXMgMTnDqG1lIDxici8+IMOAIHZlbmRyZSBhcHBhcnRlbWVudCA0IHBpw6hjZXM8L2gxPg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9VcGRhdGVQYW5lbDIiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYm91dG9uUmV0b3VyUHJpbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImJhcmVtZTIgYmdCbG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Jy9iYXJlbWUtYWdlbmNlLXBhcmlzLTE5Jz5CYXLDqm1lIGQnaG9ub3JhaXJlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHJpbnQgYmdCbG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScjJyBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjxzcGFuPjwvc3Bhbj5JbXByaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibW9kaWZTZWFyY2ggYmdCbG9jazIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xCTW9kaWZ5U2VhcmNoIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRMQk1vZGlmeVNlYXJjaCYjMzk7LCYjMzk7JiMzOTspIj48c3Bhbj48L3NwYW4+TW9kaWZpZXIgbGEgcmVjaGVyY2hlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogDQogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICANCjwvZGl2PiAgDQogICAgICAgICAgICAgICANCiAgICAgICAgDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlIHBhZ2VUeHQgYmdCbG9jayIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSI+Tm91dmVhdXTDqSAhPC9kaXY+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InR4dDMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ2xpcXVleiBzdXIgPGltZyBzcmM9Ii9pbWFnZXMvcGljdG9Db2V1ci5zdmciIC8+IHBvdXIgYWpvdXRlciDDoCAiTWVzIHBob3RvcyIuIERlcyBiaWVucyBlbiBhY2NvcmQgYXZlYyB2b3MgcHLDqWbDqXJlbmNlcyB2aXN1ZWxsZXMgdm91cyBzZXJvbnQgc3VnZ8OpcsOpcyAhDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0icmFjY291cmNpU2VjdGlvbkZpY2hlUHJvZHVpdCBzZWN0aW9uQWdlbmNlTWFyZ2luVG9wNDgiPjwhLS0gRGVidXQgc2VjdGlvbkFnZW5jZSAwMiAtLT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYmdCbG9jayI+PGEgaHJlZj0iI3Bob3Rvc19hbmNob3IiPlBob3RvczwvYT48L3RkPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAtLT48dGQgY2xhc3M9ImJnQmxvY2siPjxhIGhyZWY9IiNtZWRpYXNfYW5jaG9yIj5NZWRpYXM8L2E+PC90ZD48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgLS0+PHRkIGNsYXNzPSJiZ0Jsb2NrIj48YSBocmVmPSIjZGVzY3JpcHRpZl9hbmNob3IiPkRlc2NyaXB0aWY8L2E+PC90ZD48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgLS0+PHRkIGNsYXNzPSJiZ0Jsb2NrIj48YSBocmVmPSIjY29udGFjdF9hbmNob3IiPkwnYWdlbmNlPC9hPjwvdGQ+PCEtLSBAd2hpdGVzcGFjZQ0KICAgICAgICAgICAgICAgIC0tPjx0ZCBjbGFzcz0iYmdCbG9jayI+PGEgaHJlZj0iI2xvY2FsaXNhdGlvbl9hbmNob3IiPkxvY2FsaXNhdGlvbjwvYT48L3RkPjwhLS0gQHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICAtLT48dGQgY2xhc3M9ImJnQmxvY2siPjxhIGhyZWY9IiNzdWdnZXN0aW9uX2FuY2hvciI+U3VnZ2VzdGlvbnM8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQoNCg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlIGJnQmxvY2siPg0KICAgICAgICAgICAgICAgICAgICA8IS0tc3RhcnQgZmljaGVBZmZhaXJlICsgQmdCbG9jay0tPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlTGVmdFNpZGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iVGV4dFB1YkFmZmFpcmUiPiAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICA8aDI+QXBwYXJ0ZW1lbnQgMTI1bTIgLSA5MzDCoDAwMCDigqwqICAtICBSw6lmLiAyMzE0PC9oMj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlckZpY2hlQWZmYWlyZSIgaWQ9InBob3Rvc19hbmNob3IiPg0KICAgICAgICAgICAgICAgICAgICA8IS0tc3RhcnQgc2xpZGVyRmljaGVBZmZhaXJlLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZXJDb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItY29udGFpbmVyMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItd3JhcHBlcjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b18wIiBjbGFzcz0ic3dpcGVyLXNsaWRlMyI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfVVBMaWtlUGhvdG9fMCI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkUGhvdG9zUmVwZWF0ZXIkY3RsMDAkQkxpa2VQaG90byIgdmFsdWU9IiIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9CTGlrZVBob3RvXzAiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9MDhiODk3OTctYjRmYi00MjhkLWE4MzQtNzY3ZTg4YzE1ZjI4IiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9MDhiODk3OTctYjRmYi00MjhkLWE4MzQtNzY3ZTg4YzE1ZjI4Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTIzMDE5LzA4Yjg5Nzk3LWI0ZmItNDI4ZC1hODM0LTc2N2U4OGMxNWYyOC5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF8wIiBkYXRhLWRlbGF5PSI1MDAwIiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0mIzM5O0ltYWdlcy9waG90b01hbnF1ZS5qcGcmIzM5OzsiIHN0eWxlPSJvYmplY3QtZml0OmNvbnRhaW47IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfUFBob3RvXzEiIGNsYXNzPSJzd2lwZXItc2xpZGUzIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9VUExpa2VQaG90b18xIj4NCgkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRQaG90b3NSZXBlYXRlciRjdGwwMSRCTGlrZVBob3RvIiB2YWx1ZT0iIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX0JMaWtlUGhvdG9fMSIgY2xhc3M9InBpY3RvLWFqb3V0ZXItcGhvdG8iIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Bob3RvLXZydmlldy5hc3B4P1JlZj1iMzhjNTNiYi1jMDk5LTQwZGMtYmExYS04ZmU2NjBlNzYzN2UiIGNsYXNzPSJmYW5jeWJveCBmYW5jeWJveC5pZnJhbWUiIGRhdGEtZmFuY3lib3g9IlBob3RvcyIgZGF0YS1jYXB0aW9uPSIiIGRhdGEtZmFuY3lib3gtdHlwZT0iaWZyYW1lIiBkYXRhLWZhbmN5Ym94LWhyZWY9InBob3RvLXZydmlldy5hc3B4P1JlZj1iMzhjNTNiYi1jMDk5LTQwZGMtYmExYS04ZmU2NjBlNzYzN2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxMjMwMTkvYjM4YzUzYmItYzA5OS00MGRjLWJhMWEtOGZlNjYwZTc2MzdlLmpwZyIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9pbWFnZV9wcm9kdWl0XzEiIGRhdGEtZGVsYXk9IjUwMDAiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSYjMzk7SW1hZ2VzL3Bob3RvTWFucXVlLmpwZyYjMzk7OyIgc3R5bGU9Im9iamVjdC1maXQ6Y29udGFpbjsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9QUGhvdG9fMiIgY2xhc3M9InN3aXBlci1zbGlkZTMiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1VQTGlrZVBob3RvXzIiPg0KCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JFBob3Rvc1JlcGVhdGVyJGN0bDAyJEJMaWtlUGhvdG8iIHZhbHVlPSIiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfQkxpa2VQaG90b18yIiBjbGFzcz0icGljdG8tYWpvdXRlci1waG90byIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTBjOTQ3M2Y4LTVhNzgtNDRjNy05Y2UzLTAzYTk4YjI5YTExNiIgY2xhc3M9ImZhbmN5Ym94IGZhbmN5Ym94LmlmcmFtZSIgZGF0YS1mYW5jeWJveD0iUGhvdG9zIiBkYXRhLWNhcHRpb249IiIgZGF0YS1mYW5jeWJveC10eXBlPSJpZnJhbWUiIGRhdGEtZmFuY3lib3gtaHJlZj0icGhvdG8tdnJ2aWV3LmFzcHg/UmVmPTBjOTQ3M2Y4LTVhNzgtNDRjNy05Y2UzLTAzYTk4YjI5YTExNiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDEyMzAxOS8wYzk0NzNmOC01YTc4LTQ0YzctOWNlMy0wM2E5OGIyOWExMTYuanBnIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX2ltYWdlX3Byb2R1aXRfMiIgZGF0YS1kZWxheT0iNTAwMCIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9JiMzOTtJbWFnZXMvcGhvdG9NYW5xdWUuanBnJiMzOTs7IiBzdHlsZT0ib2JqZWN0LWZpdDpjb250YWluOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1Bob3Rvc1JlcGVhdGVyX1BQaG90b18zIiBjbGFzcz0ic3dpcGVyLXNsaWRlMyI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfVVBMaWtlUGhvdG9fMyI+DQoJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkUGhvdG9zUmVwZWF0ZXIkY3RsMDMkQkxpa2VQaG90byIgdmFsdWU9IiIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QaG90b3NSZXBlYXRlcl9CTGlrZVBob3RvXzMiIGNsYXNzPSJwaWN0by1ham91dGVyLXBob3RvIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9waG90by12cnZpZXcuYXNweD9SZWY9ZjA1NzgzMDAtMjE1ZS00Yjk5LWE4OTUtYTQ5ODEyNjYyZmE4IiBjbGFzcz0iZmFuY3lib3ggZmFuY3lib3guaWZyYW1lIiBkYXRhLWZhbmN5Ym94PSJQaG90b3MiIGRhdGEtY2FwdGlvbj0iIiBkYXRhLWZhbmN5Ym94LXR5cGU9ImlmcmFtZSIgZGF0YS1mYW5jeWJveC1ocmVmPSJwaG90by12cnZpZXcuYXNweD9SZWY9ZjA1NzgzMDAtMjE1ZS00Yjk5LWE4OTUtYTQ5ODEyNjYyZmE4Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTIzMDE5L2YwNTc4MzAwLTIxNWUtNGI5OS1hODk1LWE0OTgxMjY2MmZhOC5qcGciIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUGhvdG9zUmVwZWF0ZXJfaW1hZ2VfcHJvZHVpdF8zIiBkYXRhLWRlbGF5PSI1MDAwIiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0mIzM5O0ltYWdlcy9waG90b01hbnF1ZS5qcGcmIzM5OzsiIHN0eWxlPSJvYmplY3QtZml0OmNvbnRhaW47IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBBZGQgQXJyb3dzIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItYnV0dG9uLW5leHQzIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLWJ1dHRvbi1wcmV2MyI+PC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLWVuZCBzbGlkZXJGaWNoZUFmZmFpcmUtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGV0YWlsc0FmZmFpcmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLXN0YXJ0IGRldGFpbHNBZmZhaXJlLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJUZXh0UHViQWZmYWlyZSIgaWQ9ImRlc2NyaXB0aWZfYW5jaG9yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFyaWZzTG9pMjAxNyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHJpeExpZ25lMUxvaTIwMTciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogUHJpeCA6IDxzdHJvbmc+OTMwwqAwMDAg4oKsIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaXhMaWduZTJMb2kyMDE3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByaXggaG9ub3JhaXJlcyBleGNsdXMgOiA4OTDCoDAwMCDigqwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaXhEZXRhaWxzTG9pMjAxNyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIb25vcmFpcmVzIGRlIDQsNSUgw6AgbGEgY2hhcmdlIGRlIGwnYWNxdcOpcmV1cg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVudHJlIGxlIG3DqXRybyBDUklNRUUgZXQgbGUgQ0FOQUwgZGUgTCdPVVJDUSw8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbnMgdW4gYmVsIGltbWV1YmxlIGFuY2llbiwgYXUgM2Ugw6l0YWdlIGF2ZWMgYXNjZW5zZXVyLCBleHBvc8OpIFNVRC9PVUVTVCwgYXBwYXJ0ZW1lbnQgZmFtaWxpYWwgZGUgNCBwacOoY2VzIGQndW5lIHN1cmZhY2UgZGUgMTI1IG3CsiBlbnZpcm9uLCBjb21wcmVuYW50IHVuZSBlbnRyw6llIGRlc3NlcnZhbnQgdW4gdmFzdGUgc8Opam91ciBsdW1pbmV1eCBkZSA0NSBtwrIsIHVuZSBjdWlzaW5lIGFtw6luYWfDqWUgZXQgaW5kw6lwZW5kYW50ZSwgMyBjaGFtYnJlcyBzcGFjaWV1c2VzLCBwcsOpdm9pciBjcsOpYXRpb24gZGUgc2RiLCBXQyBzw6lwYXLDqXMgZXQgQ2F2ZSBhdSBzb3VzLXNvbC4gQSByw6lub3ZlciBlbnRpw6hyZW1lbnQgISEgRm9ydCBwb3RlbnRpZWwgISEgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVuZSB2aXNpdGUgcydpbXBvc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndyYXBTaGFyZUFjdHUyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmItc2hhcmUtYnV0dG9uIiBkYXRhLWhyZWY9J2h0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL2FjaGV0ZXIvcGFyaXMtMTkvYXBwYXJ0ZW1lbnQvMTAwMDEyMzAxOScgZGF0YS1sYXlvdXQ9ImJ1dHRvbl9jb3VudCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyYWN0ZXJpc3RpcXVlc0JpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5DYXJhY3TDqXJpc3RpcXVlcyBkdSBiaWVuPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9Imdyb3VwZVVsIG1hcmdlRHJvaXRlR3BlVWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5UeXBlIGRlIGJpZW4gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5HZW5yZSA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPk5iIGRlIHBpw6hjZShzKSA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+TmIgZGUgY2hhbWJyZShzKSA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+U3VyZi4gaGFiaXQuIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTI1bTxwPjI8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5TYWxsZSBkZSBiYWlucyA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPlNhbGxlIGQnZWF1IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+V0MgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5UZXJyYWluL0phcmRpbiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb24gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgICAgICAgICAgLS0+PHRhYmxlIGNsYXNzPSJncm91cGVVbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPlRlcnJhc3NlIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vbiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5DaGF1ZmZhZ2UgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRpdmlkdWVsIEdheiBSYWRpYXRldXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+R2FyYWdlL2JveCA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhbnM8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5EYXRlIGRlIGNvbnN0cnVjdGlvbiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE5MzANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+QmllbiBlbiBjb3Byb3ByacOpdMOpIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE91aSA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImxpYmVsbGVDYXJhY3RlcmVCaWVuIj5OYi4gZGUgbG90cyBkZSBjb3Byby4gPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InZhbHVlQ2FyYWN0ZXJlQmllbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibGliZWxsZUNhcmFjdGVyZUJpZW4iPkNoYXJnZXMgYW5udWVsbGVzIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ2YWx1ZUNhcmFjdGVyZUJpZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNzUyIOKCrC9hbiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJsaWJlbGxlQ2FyYWN0ZXJlQmllbiI+UHJvY8OpZHVyZSBlbiBjb3VycyA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idmFsdWVDYXJhY3RlcmVCaWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2PjwhLS1lbmQgZGV0YWlsc0FmZmFpcmUtLT4NCiAgICAgICAgICAgICAgICAgIDwvZGl2PjwhLS1lbmQgZmljaGVBZmZhaXJlTGVmdFNpZGUtLT48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgLS0+PGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlUmlnaHRTaWRlIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZW5jYXJ0TGlua0FnZW5jZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tU1RBUlQgZW5jYXJ0TGlua0FnZW5jZS0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1zdGFydCBsaW5rRmljaGVBZmZhaXJlLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVuY2FydEFnZW5jZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImgzX3N0eWxlIiBpZD0iY29udGFjdF9hbmNob3IiPkNlIGJpZW4gdm91cyBlc3QgcHJvcG9zw6kgcGFyPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZ2VuY2UgTGEgUsOpc2lkZW5jZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDDoCBQYXJpcyAxOcOobWUgNzUwMTk8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNTIsIGF2ZW51ZSBkZSBGbGFuZHJlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImxpbmtQYWdlQWdlbmNlIiBocmVmPSIvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcGFyaXMtMTkiPlNpdGUgZGUgbCdhZ2VuY2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1VQU2hvd1RlbCI+DQoJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9MQlNob3dUZWxBZ2VuY2UiIGNsYXNzPSJsaW5rQWdlbmNlIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRGVkFnZW5jZSRMQlNob3dUZWxBZ2VuY2UmIzM5OywmIzM5OyYjMzk7KSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb250YWN0QWdlbmNlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfTFNob3dUZWxBZ2VuY2UiPkFmZmljaGVyIGxlIHTDqWzDqXBob25lPC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KPC9kaXY+PC9saT48IS0tIEB3aGl0ZXNwYWNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+PGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1VQQWpvdXRTZWxlY3Rpb24iPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX0xCQWpvdXRTZWxlY3Rpb24iIGNsYXNzPSJsaW5rQWdlbmNlIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRGVkFnZW5jZSRMQkFqb3V0U2VsZWN0aW9uJiMzOTssJiMzOTsmIzM5OykiPjxzcGFuIGNsYXNzPSJmYXZvcmlzIj48L3NwYW4+QWpvdXRlciAmIzIyNDsgbWEgcyYjMjMzO2xlY3Rpb248L2E+DQo8L2Rpdj48L2xpPjwvdWw+PGJyIC8+PGRpdiBjbGFzcz0iZmljaGUtcHJvZHVpdC1mb3JtdWxhaXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSI+RGVtYW5kZSBkJ2luZm9ybWF0aW9uczwvZGl2PjxpbnB1dCBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkVEJOb20iIHR5cGU9InRleHQiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfVEJOb20iIGNsYXNzPSJmZWVkYmFjay1pbnB1dCIgcGxhY2Vob2xkZXI9IkluZGlxdWV6IHZvdHJlIG5vbSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkUkZWTm9tX1ZhbGlkYXRvckNhbGxvdXRFeHRlbmRlcl9DbGllbnRTdGF0ZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZOb21fVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyX0NsaWVudFN0YXRlIiAvPg0KDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEZWQWdlbmNlJFRCVGVsZXBob25lIiB0eXBlPSJ0ZWwiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfVEJUZWxlcGhvbmUiIGNsYXNzPSJmZWVkYmFjay1pbnB1dCIgcGxhY2Vob2xkZXI9IlTDqWzDqXBob25lIiAvPjxpbnB1dCBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkVEJFbWFpbCIgdHlwZT0iZW1haWwiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfVEJFbWFpbCIgY2xhc3M9ImZlZWRiYWNrLWlucHV0IiBwbGFjZWhvbGRlcj0iRW1haWwiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEZWQWdlbmNlJFJGVkVtYWlsX1ZhbGlkYXRvckNhbGxvdXRFeHRlbmRlcl9DbGllbnRTdGF0ZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkUkVWRW1haWxfVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyX0NsaWVudFN0YXRlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1JFVkVtYWlsX1ZhbGlkYXRvckNhbGxvdXRFeHRlbmRlcl9DbGllbnRTdGF0ZSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkRlZBZ2VuY2UkVEJNZXNzYWdlIiByb3dzPSIyIiBjb2xzPSIyMCIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9UQk1lc3NhZ2UiIGNsYXNzPSJmZWVkYmFjay1pbnB1dCBtZXNzYWdlIiBwbGFjZWhvbGRlcj0iTWVzc2FnZSI+DQo8L3RleHRhcmVhPjxkaXYgY2xhc3M9ImJ0bkZpY2hlUHJvZHVpdENvbnRhY3RBZ2VuY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX0xCRW52b3llck1lc3NhZ2UiIGhyZWY9ImphdmFzY3JpcHQ6V2ViRm9ybV9Eb1Bvc3RCYWNrV2l0aE9wdGlvbnMobmV3IFdlYkZvcm1fUG9zdEJhY2tPcHRpb25zKCZxdW90O2N0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRGVkFnZW5jZSRMQkVudm95ZXJNZXNzYWdlJnF1b3Q7LCAmcXVvdDsmcXVvdDssIHRydWUsICZxdW90O0RlbWFuZGVJbmZvc1Byb2R1aXQmcXVvdDssICZxdW90OyZxdW90OywgZmFsc2UsIHRydWUpKSI+RW52b3llcjwvYT48L2Rpdj48ZGl2IHN0eWxlPSJmb250LXNpemU6eC1zbWFsbDsgZGlzcGxheTpibG9jazsgbGluZS1oZWlnaHQ6MS40ZW07IG1hcmdpbi10b3A6MTJweDsiPkluZm9ybcOpKGUpIGRlIGxhIHBvc3NpYmlsaXTDqSBkZSBtJ29wcG9zZXIgw6AgbCd1dGlsaXNhdGlvbiBkZSBtZXMgY29vcmRvbm7DqWVzIHTDqWzDqXBob25pcXVlcyDDoCBkZXMgZmlucyBkZSBwcm9zcGVjdGlvbiBjb21tZXJjaWFsZSAod3d3LmJsb2N0ZWwuZ291di5mciksIGonYXV0b3Jpc2UgbCdhZ2VuY2UgTGEgUsOpc2lkZW5jZSBkZSBQYXJpcyAxOSYjMjMyO21lw6AgbWUgY29udGFjdGVyIGF1IG51bcOpcm8gcmVuc2VpZ27DqS48L2Rpdj48L2Rpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLWVuZCBlbmNhcnRMaW5rQWdlbmNlLS0+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mb0NvbXBBZmZhaXJlIj48IS0tc3RhcnQgaW5mb0NvbXBBZmZhaXJlLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoM19zdHlsZSI+SW5mb3MgY29tcGzDqW1lbnRhaXJlczwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRkxhdGl0dWRlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0hGTGF0aXR1ZGUiIHZhbHVlPSI0OC44OTIyNzQ2IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRIRkxvbmdpdHVkZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9IRkxvbmdpdHVkZSIgdmFsdWU9IjIuMzc5NDY3IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpY2hlQWZmYWlyZVRyYW5zcG9ydCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAwJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMCIgdmFsdWU9IjM3MDIiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkxlcyBnYXJlcyDDoCBwcm94aW1pdMOpPC9kaXY+PGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcmltw6llIH4gMjAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDAkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMF9IRklkU2VydmljZV8wIiB2YWx1ZT0iMTMzIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvNS81Zi9QYXJpc19tXzZfam1zLnN2Zy8xNnB4LVBhcmlzX21fNl9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgNicgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAwJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDEkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzBfSEZJZFNlcnZpY2VfMSIgdmFsdWU9IjEzNCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2UvZTEvUGFyaXNfbV83X2ptcy5zdmcvMTZweC1QYXJpc19tXzdfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDcnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDEkSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV8xIiB2YWx1ZT0iMzcwMSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvcmVudGluIENhcmlvdSB+IDMwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAxJFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzFfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjEzMyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzUvNWYvUGFyaXNfbV82X2ptcy5zdmcvMTZweC1QYXJpc19tXzZfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDYnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwMSRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAxJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8xX0hGSWRTZXJ2aWNlXzEiIHZhbHVlPSIxMzQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi9lL2UxL1BhcmlzX21fN19qbXMuc3ZnLzE2cHgtUGFyaXNfbV83X2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSA3JyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDAyJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMiIgdmFsdWU9IjM3MDMiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSaXF1ZXQgfiA3MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwMiRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8yX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMzMiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi81LzVmL1BhcmlzX21fNl9qbXMuc3ZnLzE2cHgtUGFyaXNfbV82X2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSA2JyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDIkU2VydmljZXNSZXBlYXRlciRjdGwwMSRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMl9IRklkU2VydmljZV8xIiB2YWx1ZT0iMTM0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvZS9lMS9QYXJpc19tXzdfam1zLnN2Zy8xNnB4LVBhcmlzX21fN19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgNycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwMyRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzMiIHZhbHVlPSIzNzAwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9ydGUgZGUgbGEgVmlsbGV0dGVDaXTDqSBkZXMgU2NpZW5jZXMgZXQgZGUgbCdJbmR1c3RyaWUgfiA3MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwMyRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl8zX0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMzMiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi81LzVmL1BhcmlzX21fNl9qbXMuc3ZnLzE2cHgtUGFyaXNfbV82X2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSA2JyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDMkU2VydmljZXNSZXBlYXRlciRjdGwwMSRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfM19IRklkU2VydmljZV8xIiB2YWx1ZT0iMTM0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvZS9lMS9QYXJpc19tXzdfam1zLnN2Zy8xNnB4LVBhcmlzX21fN19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgNycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwNCRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzQiIHZhbHVlPSIzNjY0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3VyY3EgfiA4MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwNCRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl80X0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMzIiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi8zLzNkL1BhcmlzX21fNV9qbXMuc3ZnLzE2cHgtUGFyaXNfbV81X2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSA1JyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA1JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfNSIgdmFsdWU9IjM2NjUiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYXVtacOocmUgfiA4MDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwNSRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl81X0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMzIiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi8zLzNkL1BhcmlzX21fNV9qbXMuc3ZnLzE2cHgtUGFyaXNfbV81X2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSA1JyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA2JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfNiIgdmFsdWU9IjM4NjMiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3J0ZSBkZSBQYW50aW5QYXJjIGRlIGxhIFZpbGxldHRlIH4gMTAwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA2JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzZfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjEzMiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzMvM2QvUGFyaXNfbV81X2ptcy5zdmcvMTZweC1QYXJpc19tXzVfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDUnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDckSEZJZEdhcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9IRklkR2FyZV83IiB2YWx1ZT0iMzYwMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YWxpbmdyYWQgfiAxMzAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDckU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfN19IRklkU2VydmljZV8wIiB2YWx1ZT0iMTI4IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvMi8yNi9QYXJpc19tXzJfam1zLnN2Zy8xNnB4LVBhcmlzX21fMl9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMicgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA3JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDEkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzdfSEZJZFNlcnZpY2VfMSIgdmFsdWU9IjEzMiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzMvM2QvUGFyaXNfbV81X2ptcy5zdmcvMTZweC1QYXJpc19tXzVfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDUnIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwNyRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAyJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl83X0hGSWRTZXJ2aWNlXzIiIHZhbHVlPSIxMzMiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi81LzVmL1BhcmlzX21fNl9qbXMuc3ZnLzE2cHgtUGFyaXNfbV82X2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSA2JyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDckU2VydmljZXNSZXBlYXRlciRjdGwwMyRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfN19IRklkU2VydmljZV8zIiB2YWx1ZT0iMTM0IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvZS9lMS9QYXJpc19tXzdfam1zLnN2Zy8xNnB4LVBhcmlzX21fN19qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgNycgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwOCRIRklkR2FyZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX0hGSWRHYXJlXzgiIHZhbHVlPSIzNjAxIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSmF1csOocyB+IDEzMDBtKiogPC9wPjx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGVlByb2R1aXQkR2FyZXNSZXBlYXRlciRjdGwwOCRTZXJ2aWNlc1JlcGVhdGVyJGN0bDAwJEhGSWRTZXJ2aWNlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfU2VydmljZXNSZXBlYXRlcl84X0hGSWRTZXJ2aWNlXzAiIHZhbHVlPSIxMjgiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aW1nIHNyYz0naHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi8yLzI2L1BhcmlzX21fMl9qbXMuc3ZnLzE2cHgtUGFyaXNfbV8yX2ptcy5zdmcucG5nJyBhbHQ9J03DqXRybyBsaWduZSAyJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMDgkU2VydmljZXNSZXBlYXRlciRjdGwwMSRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfOF9IRklkU2VydmljZV8xIiB2YWx1ZT0iMTMyIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGltZyBzcmM9J2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvMy8zZC9QYXJpc19tXzVfam1zLnN2Zy8xNnB4LVBhcmlzX21fNV9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgNScgLz48L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA4JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDIkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzhfSEZJZFNlcnZpY2VfMiIgdmFsdWU9IjEzNSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzUvNTAvUGFyaXNfbV83YmlzX2ptcy5zdmcvMTZweC1QYXJpc19tXzdiaXNfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDcgYmlzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA5JEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfOSIgdmFsdWU9IjM3MjkiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCb2xpdmFyIH4gMTQwMG0qKiA8L3A+PHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDA5JFNlcnZpY2VzUmVwZWF0ZXIkY3RsMDAkSEZJZFNlcnZpY2UiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfR2FyZXNSZXBlYXRlcl9TZXJ2aWNlc1JlcGVhdGVyXzlfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjEzNSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iLzUvNTAvUGFyaXNfbV83YmlzX2ptcy5zdmcvMTZweC1QYXJpc19tXzdiaXNfam1zLnN2Zy5wbmcnIGFsdD0nTcOpdHJvIGxpZ25lIDcgYmlzJyAvPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRHYXJlc1JlcGVhdGVyJGN0bDEwJEhGSWRHYXJlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0dhcmVzUmVwZWF0ZXJfSEZJZEdhcmVfMTAiIHZhbHVlPSIzODE2IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFyeCBEb3Jtb3kgfiAxNDAwbSoqIDwvcD48dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JEdhcmVzUmVwZWF0ZXIkY3RsMTAkU2VydmljZXNSZXBlYXRlciRjdGwwMCRIRklkU2VydmljZSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9HYXJlc1JlcGVhdGVyX1NlcnZpY2VzUmVwZWF0ZXJfMTBfSEZJZFNlcnZpY2VfMCIgdmFsdWU9IjE0MCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpbWcgc3JjPSdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2YvZmMvUGFyaXNfbV8xMl9qbXMuc3ZnLzE2cHgtUGFyaXNfbV8xMl9qbXMuc3ZnLnBuZycgYWx0PSdNw6l0cm8gbGlnbmUgMTInIC8+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmljaGVBZmZhaXJlRGlhZ25vc3RpYyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkNvbnNvbW1hdGlvbiBkJ8OpbmVyZ2llIDxiciAvPihlbiBLd2gvbTIvYW4pPC9kaXY+PHA+TG9nZW1lbnQgw6ljb25vbWU8L3A+PHNwYW4+TG9nZW1lbnQ8L3NwYW4+IDxkaXYgY2xhc3M9ImRpYWdJbWFnZUluYWN0aWYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvZGlhZ0ltYWdlSW5hY3RpZi5wbmciIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpYWdBY3RpZl9OQyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5EUEUgdmllcmdlPC9wPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhc3Rlcmlza0FmZmFpcmUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPioqIGRpc3RhbmNlIGVzdGltw6llIMOgIHZvbCBkJ29pc2VhdTwvcD48L2Rpdj48L2Rpdj48IS0tZW5kIGluZm9Db21wQWZmYWlyZS0tPjxkaXYgY2xhc3M9ImNhbGwyRXN0aW1GaWNoZVByb2R1aXQgYmdCbG9jazIiPjwhLS1TdGFydCBjYWxsMkVzdGltRmljaGVQcm9kdWl0LS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2VzdGltYXRpb24taW1tb2JpbGllcmUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfYUVzdGltIiB0aXRsZT0iRmFpdGVzIGVzdGltZXIgdm90cmUgYmllbiBncmF0dWl0ZW1lbnQiIHRhcmdldD0iX3BhcmVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvcGljdG9Fc3RpbUNhbGwyQWN0aW9uQXNpZGUuc3ZnIiBhbHQ9IkZhaXRlcyBlc3RpbWVyIHZvdHJlIGJpZW4gZ3JhdHVpdGVtZW50IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoMl9zdHlsZSI+RmFpdGVzIGVzdGltZXIgPGJyIC8+dm90cmUgYmllbiA8c3Ryb25nPjxiciAvPmdyYXR1aXRlbWVudDwvc3Ryb25nPiA8L2Rpdj48L2E+PC9kaXY+PCEtLUVuZCBjYWxsMkVzdGltRmljaGVQcm9kdWl0LS0+PC9kaXY+PCEtLWVuZCBmaWNoZUFmZmFpcmVSaWdodFNpZGUtLT48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRGl2TWFwUHJvZHVpdCIgY2xhc3M9Im1hcEZpY2hlQWZmYWlyZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDNfc3R5bGUiIGlkPSJsb2NhbGlzYXRpb25fYW5jaG9yIj5Mb2NhbGlzYXRpb24gZHUgYmllbjwvZGl2PjxkaXYgY2xhc3M9Im1hcC1wcm9kdWl0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KDQo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Jy4uLy4uLy4uL1N0eWxlcy9vbC5jc3MnIHR5cGU9InRleHQvY3NzIiAvPg0KDQoNCjxzdHlsZT4NCiAgICAubWFwIHsNCiAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgICAgICB3aWR0aDogMTAwJTsNCiAgICB9DQoNCiAgICAudG9vbHRpcCB7DQogICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgcGFkZGluZzogM3B4Ow0KICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNyk7DQogICAgICAgIGNvbG9yOiB3aGl0ZTsNCiAgICAgICAgb3BhY2l0eTogMC44NTsNCiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCiAgICAgICAgZm9udDogMTBwdCBzYW5zLXNlcmlmOw0KICAgIH0NCg0KICAgIC5hcnJvd19ib3ggew0KICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgICAgIGJhY2tncm91bmQ6ICNmZmY7DQogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDNjODg7DQogICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICAgICAgcGFkZGluZzogMTBweDsNCiAgICB9DQoNCiAgICAuYXJyb3dfYm94OmFmdGVyLCAuYXJyb3dfYm94OmJlZm9yZSB7DQogICAgICAgIHRvcDogMTAwJTsNCiAgICAgICAgbGVmdDogNTAlOw0KICAgICAgICBib3JkZXI6IHNvbGlkIHRyYW5zcGFyZW50Ow0KICAgICAgICBjb250ZW50OiAiICI7DQogICAgICAgIGhlaWdodDogMDsNCiAgICAgICAgd2lkdGg6IDA7DQogICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQogICAgfQ0KDQogICAgLmFycm93X2JveDphZnRlciB7DQogICAgICAgIGJvcmRlci1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwKTsNCiAgICAgICAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZjsNCiAgICAgICAgYm9yZGVyLXdpZHRoOiAxMHB4Ow0KICAgICAgICBtYXJnaW4tbGVmdDogLTEwcHg7DQogICAgfQ0KDQogICAgLmFycm93X2JveDpiZWZvcmUgew0KICAgICAgICBib3JkZXItY29sb3I6IHJnYmEoMTUzLCAxNTMsIDE1MywgMCk7DQogICAgICAgIGJvcmRlci10b3AtY29sb3I6ICMwMDNjODg7DQogICAgICAgIGJvcmRlci13aWR0aDogMTFweDsNCiAgICAgICAgbWFyZ2luLWxlZnQ6IC0xMXB4Ow0KICAgIH0NCjwvc3R5bGU+DQoNCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRPTE1hcFByb2R1aXQkSEZfTG9uZ2l0dWRlIiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdF9IRl9Mb25naXR1ZGUiIHZhbHVlPSIyLjM4Mzc3NiIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRPTE1hcFByb2R1aXQkSEZfTGF0aXR1ZGUiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X0hGX0xhdGl0dWRlIiB2YWx1ZT0iNDguODk2NTQ1NSIgLz4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEZWUHJvZHVpdCRPTE1hcFByb2R1aXQkSEZfWm9vbSIgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfSEZfWm9vbSIgdmFsdWU9IjE0IiAvPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkRlZQcm9kdWl0JE9MTWFwUHJvZHVpdCRIRl9TaG93Wm9vbUNvbnRyb2wiIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X0hGX1Nob3dab29tQ29udHJvbCIgdmFsdWU9InRydWUiIC8+DQoNCjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfUGFuZWxNYXAiIGNsYXNzPSJtYXAiPg0KCQ0KICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfUGFuZWxUb29sdGlwIiBjbGFzcz0idG9vbHRpcCI+DQoNCgk8L2Rpdj4NCiAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X1BvcHVwQ29udGFpbmVyIiBjbGFzcz0iYXJyb3dfYm94Ij4NCgkJDQogICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfUG9wdXBDb250ZW50Ij4NCgkJCQ0KDQogICAgICAgIA0KCQk8L2Rpdj4NCiAgICANCgk8L2Rpdj4NCg0KDQo8L2Rpdj4NCg0KDQoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpZkxvY2FsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9EaXZEZXNjcmlwdFZpbGxlIiBjbGFzcz0iZGVzY3JpcHRWaWxsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkRlc2NyaXB0aWYgZGUgbGEgdmlsbGU8c3Bhbj48L3NwYW4+PC9kaXY+PHAgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9QRGVzY3JpcHRWaWxsZSI+TGUgMTkmIzIzMjttZSBhcnJvbmRpc3NlbWVudCBkZSBQYXJpcyBjb21wdGUgMTg2IDEyMCBoYWJpdGFudHMuIExhIHZpbGxlIGNvbXB0ZSAxODYgMTIwIGhhYml0YW50cyBldCA0MyAzNDAgZmFtaWxsZXMgZG9udCA1OSAlIG9udCBkZXMgZW5mYW50cy4gMzAgJSBkZXMgaGFiaXRhbnRzIHNvbnQgcHJvcHJpJiMyMzM7dGFpcmVzLiA5OCAlIGRlcyBsb2dlbWVudHMgc29udCBkZXMgYXBwYXJ0ZW1lbnRzIGV0IDMgJSBzb250IGRlcyByJiMyMzM7c2lkZW5jZXMgc2Vjb25kYWlyZXMuIExhIGNvbW11bmUgZXN0IGJpZW4gZGVzc2VydmllIGVuIHRyYW5zcG9ydHMgZW4gY29tbXVuIGF2ZWMgNjEgJSBkZSBtJiMyMzM7bmFnZXMgbmUgcG9zcyYjMjMzO2RhbnQgcGFzIGRlIHZvaXR1cmUuIExlcyBoYWJpdGFudHMgdXRpbGlzZW50IGVuIG1ham9yaXQmIzIzMzsgbGVzIHRyYW5zcG9ydHMgZW4gY29tbXVuIHBvdXIgYWxsZXIgdHJhdmFpbGxlciAmIzIyNDsgODAgJS4gSWwgeSBhIDIgODMwIGNvbW1lcmNlcyBkZSBwcm94aW1pdCYjMjMzOy4gLjwvcD48L2Rpdj48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfRGl2RGVzY3JpcHRRdWFydGllciIgY2xhc3M9ImRlc2NyaXB0UXVhcnRpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Img0X3N0eWxlIj5EZXNjcmlwdGlmIGR1IHF1YXJ0aWVyPHNwYW4+PC9zcGFuPjwvZGl2PjxwIGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfUERlc2NyaXB0UXVhcnRpZXIiPlBvcnRlIGRlIGxhIFZpbGxldHRlIGVzdCB1biBxdWFydGllciBkdSAxOSYjMjMyO21lIGFycm9uZGlzc2VtZW50IGRlIFBhcmlzLiBMZSBxdWFydGllciBjb21wdGUgMjMgOTkwIGhhYml0YW50cyBldCA1IDQ4MCBmYW1pbGxlcyBkb250IDY1ICUgb250IGRlcyBlbmZhbnRzLiA4MyAlIGRlcyBoYWJpdGFudHMgc29udCBsb2NhdGFpcmVzLiA5OSAlIGRlcyBsb2dlbWVudHMgc29udCBkZXMgYXBwYXJ0ZW1lbnRzLiBMZSBxdWFydGllciBlc3QgYmllbiBkZXNzZXJ2aSBlbiB0cmFuc3BvcnRzIGVuIGNvbW11biBhdmVjIDYyICUgZGUgbSYjMjMzO25hZ2VzIG5lIHBvc3MmIzIzMztkYW50IHBhcyBkZSB2b2l0dXJlLiBMZXMgaGFiaXRhbnRzIHV0aWxpc2VudCBlbiBtYWpvcml0JiMyMzM7IGxlcyB0cmFuc3BvcnRzIGVuIGNvbW11biBwb3VyIGFsbGVyIHRyYXZhaWxsZXIgJiMyMjQ7IDgwICUuIElsIHkgYSAzNzAgY29tbWVyY2VzIGRlIHByb3hpbWl0JiMyMzM7LiAuPC9wPjwvZGl2PjwvZGl2PjwvZGl2PjwhLS1lbmQgbWFwRmljaGVBZmZhaXJlLS0+PC9kaXY+PCEtLWVuZCBmaWNoZUFmZmFpcmUgKyBCZ0Jsb2NrLS0+PGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X1BSZWNvUHJvZHVpdHMiIGNsYXNzPSJkZXJuaWVyQmllbnNWZW5kdXMyIj4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImgyX3N0eWxlIiBpZD0ic3VnZ2VzdGlvbl9hbmNob3IiPkF1dHJlcyBwcm9kdWl0cyByZWNvbW1hbmTDqXM8L2Rpdj48ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfVVBQcm9kdWl0cyI+DQoJCSAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KDQogICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuXzAiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nMyI+DQoJCQkNCiAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19VUFByb2R1aXRfMCI+DQoJCQkJICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScvYWNoZXRlci9jaGF0b3UvYXBwYXJ0ZW1lbnQvMTAwMDEyOTMwOC1yZWNvJz4gICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QUGljdG9WcF8wIiBjbGFzcz0icGljdG8tYWZmYWlyZS1leGNsdSI+DQoNCgkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9J2h0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxMjkzMDgvNzNlNTU4NjMtZDI3NS00ZWQzLTgzYWEtMTFjZDMyMGU0ZmQyXzM2NC5qcGcnIHRpdGxlPSJBcHBhcnRlbWVudCDDoCB2ZW5kcmUgw6AgQ2hhdG91IiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0nSW1hZ2VzL3Bob3RvTWFucXVlLmpwZyc7IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5MaXN0aW5nSW5mb18wIiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZ0luZm8iPg0KCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRpdHJlTGlzdF8wIiBjbGFzcz0idmlnbmV0dGVCaWVuVGl0cmUiPg0KCQkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCA3OW0yPGJyLz5DaGF0b3UgKDc4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRleHRlTGlzdF8wIiBjbGFzcz0idmlnbmV0dGVCaWVuVGV4dGUiPg0KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBjaGFtYnJlKHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUsOpZsOpcmVuY2UgMjUxMTM3PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QU291c1RpdHJlTGlzdF8wIiBjbGFzcz0idmlnbmV0dGVCaWVuUHJpeEZBSSI+DQoJCQkJCQkyOTnCoDAwMCDigqwgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJPC9kaXY+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgDQoJCTwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCiAgICANCiAgICAgICAgLS0+PGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5fMSIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmczIj4NCgkJCQ0KICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1VQUHJvZHVpdF8xIj4NCgkJCQkgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Jy9hY2hldGVyL21vbnRtYWdueS9hcHBhcnRlbWVudC8xMDAwMDkwOTQ3LXJlY28nPiAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSdodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMDkwOTQ3LzA2MTVmYTUxLTliYWYtNGQyNi05NmU1LTNhYmE0YzM5YTEzMl8zNjQuanBnJyB0aXRsZT0iQXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIMOgIE1vbnRtYWdueSIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9J0ltYWdlcy9waG90b01hbnF1ZS5qcGcnOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuTGlzdGluZ0luZm9fMSIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmdJbmZvIj4NCgkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUaXRyZUxpc3RfMSIgY2xhc3M9InZpZ25ldHRlQmllblRpdHJlIj4NCgkJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgNzVtMjxici8+TW9udG1hZ255ICg5NSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUZXh0ZUxpc3RfMSIgY2xhc3M9InZpZ25ldHRlQmllblRleHRlIj4NCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMgY2hhbWJyZShzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIDIzMDYyPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QU291c1RpdHJlTGlzdF8xIiBjbGFzcz0idmlnbmV0dGVCaWVuUHJpeEZBSSI+DQoJCQkJCQkxOTnCoDAwMCDigqwgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJPC9kaXY+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgDQoJCTwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCiAgICANCiAgICAgICAgLS0+PGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5fMiIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmczIj4NCgkJCQ0KICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1VQUHJvZHVpdF8yIj4NCgkJCQkgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Jy9hY2hldGVyL3Nhbm5vaXMvYXBwYXJ0ZW1lbnQvMTAwMDEzMjAxMi1yZWNvJz4gICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0naHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDEzMjAxMi85ZGJhZjg5NS01OTg4LTRjMmMtYWE3NC1mMDFlMjA3NTE5YTdfMzY0LmpwZycgdGl0bGU9IkFwcGFydGVtZW50IMOgIHZlbmRyZSDDoCBTYW5ub2lzIiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0nSW1hZ2VzL3Bob3RvTWFucXVlLmpwZyc7IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5MaXN0aW5nSW5mb18yIiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZ0luZm8iPg0KCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRpdHJlTGlzdF8yIiBjbGFzcz0idmlnbmV0dGVCaWVuVGl0cmUiPg0KCQkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCAxMTFtMjxici8+U2Fubm9pcyAoOTUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGV4dGVMaXN0XzIiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UZXh0ZSI+DQoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IGNoYW1icmUocykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSA1MDU3PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QU291c1RpdHJlTGlzdF8yIiBjbGFzcz0idmlnbmV0dGVCaWVuUHJpeEZBSSI+DQoJCQkJCQkzMTXCoDAwMCDigqwgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJPC9kaXY+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgDQoJCTwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCiAgICANCiAgICAgICAgLS0+PGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5fMyIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmczIj4NCgkJCQ0KICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1VQUHJvZHVpdF8zIj4NCgkJCQkgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Jy9hY2hldGVyL2ZyYW5jb252aWxsZS9hcHBhcnRlbWVudC8xMDAwMTM5MTc4LXJlY28nPiAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSdodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9Qcm9kdWl0cy8xMDAwMTM5MTc4L2Q1OTM4ZWIwLWM5ZDMtNGVkOS04MGM5LTI3ZjVmMDhmMmM3ZF8zNjQuanBnJyB0aXRsZT0iQXBwYXJ0ZW1lbnQgw6AgdmVuZHJlIMOgIEZyYW5jb252aWxsZSIgb25lcnJvcj0idGhpcy5vbmVycm9yPW51bGw7dGhpcy5zcmM9J0ltYWdlcy9waG90b01hbnF1ZS5qcGcnOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuTGlzdGluZ0luZm9fMyIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmdJbmZvIj4NCgkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUaXRyZUxpc3RfMyIgY2xhc3M9InZpZ25ldHRlQmllblRpdHJlIj4NCgkJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgNzFtMjxici8+RnJhbmNvbnZpbGxlICg5NSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BUZXh0ZUxpc3RfMyIgY2xhc3M9InZpZ25ldHRlQmllblRleHRlIj4NCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMgY2hhbWJyZShzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlIDIwNTY4NjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCgkJCQkJPC9kaXY+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFNvdXNUaXRyZUxpc3RfMyIgY2xhc3M9InZpZ25ldHRlQmllblByaXhGQUkiPg0KCQkJCQkJMTg1wqAwMDAg4oKsIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCTwvZGl2PiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCgkJCTwvZGl2Pg0KICAgICAgICAgICAgDQogICAgICAgIA0KCQk8L2Rpdj48IS0tIEB3aGl0ZXNwYWNlDQogICAgDQogICAgICAgIC0tPjxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVmlnbmV0dGVCaWVuXzQiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nMyI+DQoJCQkNCiAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19VUFByb2R1aXRfNCI+DQoJCQkJICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScvYWNoZXRlci9ydWVpbC1tYWxtYWlzb24vYXBwYXJ0ZW1lbnQvMTAwMDEyNjcyMy1yZWNvJz4gICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QUGljdG9WcF80IiBjbGFzcz0icGljdG8tYWZmYWlyZS1leGNsdSI+DQoNCgkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9J2h0dHBzOi8vd3d3LmxhcmVzaWRlbmNlLmZyL1Byb2R1aXRzLzEwMDAxMjY3MjMvN2VkNTY2NzktMzI2MC00NGIzLTg4ZGMtM2NmNGY4YjUzMGIxXzM2NC5qcGcnIHRpdGxlPSJBcHBhcnRlbWVudCDDoCB2ZW5kcmUgw6AgUnVlaWwtTWFsbWFpc29uIiBvbmVycm9yPSJ0aGlzLm9uZXJyb3I9bnVsbDt0aGlzLnNyYz0nSW1hZ2VzL3Bob3RvTWFucXVlLmpwZyc7IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5MaXN0aW5nSW5mb180IiBjbGFzcz0idmlnbmV0dGVCaWVuTGlzdGluZ0luZm8iPg0KCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRpdHJlTGlzdF80IiBjbGFzcz0idmlnbmV0dGVCaWVuVGl0cmUiPg0KCQkJCQkJDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCA4OW0yPGJyLz5SdWVpbC1NYWxtYWlzb24gKDkyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFRleHRlTGlzdF80IiBjbGFzcz0idmlnbmV0dGVCaWVuVGV4dGUiPg0KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBjaGFtYnJlKHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUsOpZsOpcmVuY2UgMjUxMTE1PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCQkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QU291c1RpdHJlTGlzdF80IiBjbGFzcz0idmlnbmV0dGVCaWVuUHJpeEZBSSI+DQoJCQkJCQk1NTDCoDAwMCDigqwgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJPC9kaXY+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KCQkJPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgDQoJCTwvZGl2PjwhLS0gQHdoaXRlc3BhY2UNCiAgICANCiAgICAgICAgLS0+PGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BWaWduZXR0ZUJpZW5fNSIgY2xhc3M9InZpZ25ldHRlQmllbkxpc3RpbmczIj4NCgkJCQ0KICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1VQUHJvZHVpdF81Ij4NCgkJCQkgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Jy9hY2hldGVyL2ZyYW5jb252aWxsZS9hcHBhcnRlbWVudC8xMDAwMTQxNzgxLXJlY28nPiAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BQaWN0b1ZwXzUiIGNsYXNzPSJwaWN0by1hZmZhaXJlLWV4Y2x1Ij4NCg0KCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0naHR0cHM6Ly93d3cubGFyZXNpZGVuY2UuZnIvUHJvZHVpdHMvMTAwMDE0MTc4MS81YjVjYmVmYS1kNGU3LTQ5Y2EtYTcwYS1iMzFjMTAxM2Y5ZmFfMzY0LmpwZycgdGl0bGU9IkFwcGFydGVtZW50IMOgIHZlbmRyZSDDoCBGcmFuY29udmlsbGUiIG9uZXJyb3I9InRoaXMub25lcnJvcj1udWxsO3RoaXMuc3JjPSdJbWFnZXMvcGhvdG9NYW5xdWUuanBnJzsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJNYWluQ29udGVudF9GVlByb2R1aXRfTGlzdGluZ1Byb2R1aXRzQ3RsX1Byb2R1aXRzTGlzdFZpZXdfUFZpZ25ldHRlQmllbkxpc3RpbmdJbmZvXzUiIGNsYXNzPSJ2aWduZXR0ZUJpZW5MaXN0aW5nSW5mbyI+DQoJCQkJCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGl0cmVMaXN0XzUiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UaXRyZSI+DQoJCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IDcxbTI8YnIvPkZyYW5jb252aWxsZSAoOTUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9MaXN0aW5nUHJvZHVpdHNDdGxfUHJvZHVpdHNMaXN0Vmlld19QVGV4dGVMaXN0XzUiIGNsYXNzPSJ2aWduZXR0ZUJpZW5UZXh0ZSI+DQoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzIGNoYW1icmUocykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZSAyMDU3MDE8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCTwvZGl2PiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0xpc3RWaWV3X1BTb3VzVGl0cmVMaXN0XzUiIGNsYXNzPSJ2aWduZXR0ZUJpZW5Qcml4RkFJIj4NCgkJCQkJCTE5NcKgMDAwIOKCrCANCgkJCQkJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICANCgkJCQk8L2Rpdj4gICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQoJCQk8L2Rpdj4NCiAgICAgICAgICAgIA0KICAgICAgICANCgkJPC9kaXY+PCEtLSBAd2hpdGVzcGFjZQ0KICAgIA0KLS0+PGJyIC8+DQo8c3BhbiBpZD0iTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0xpc3RpbmdQcm9kdWl0c0N0bF9Qcm9kdWl0c0RhdGFQYWdlckJvdHRvbSIgY2xhc3M9ImRhdGEtcGFnZXIiPjxzcGFuPjE8L3NwYW4+Jm5ic3A7PC9zcGFuPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KCTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICANCjwvZGl2PiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLWVuZCBmaWNoZUFmZmFpcmVXcmFwcGVyLS0+DQogICAgICAgICAgICANCiAgICANCg0KICAgIDwhLS0gSW5pdGlhbGl6ZSBTd2lwZXIgLS0+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICBTeXMuV2ViRm9ybXMuUGFnZVJlcXVlc3RNYW5hZ2VyLmdldEluc3RhbmNlKCkuYWRkX3BhZ2VMb2FkZWQoSW5pdGlhbGl6ZV9Td2lwZXIpOw0KDQogICAgICAgIGZ1bmN0aW9uIEluaXRpYWxpemVfU3dpcGVyKHNlbmRlciwgYXJncykgew0KDQogICAgICAgICAgICB2YXIgc3dpcGVyMyA9IG5ldyBTd2lwZXIoJy5zd2lwZXItY29udGFpbmVyMycsIHsNCiAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiAnLnN3aXBlci1idXR0b24tbmV4dDMnLA0KICAgICAgICAgICAgICAgIHByZXZCdXR0b246ICcuc3dpcGVyLWJ1dHRvbi1wcmV2MycsDQogICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsDQogICAgICAgICAgICAgICAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZTMnLA0KICAgICAgICAgICAgICAgIHdyYXBwZXJDbGFzczogJ3N3aXBlci13cmFwcGVyMycsDQogICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSwNCiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uQ2xpY2thYmxlOiBmYWxzZSwNCiAgICAgICAgICAgICAgICBhdXRvcGxheTogMjUwMCwNCiAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsDQogICAgICAgICAgICAgICAgYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSwNCiAgICAgICAgICAgICAgICBsb29wOiB0cnVlLA0KICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSwNCiAgICAgICAgICAgICAgICBzcGVlZDogNTAwDQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgdmFyIHN3aXBlcl9tZWRpYXMgPSBuZXcgU3dpcGVyKCcuc3dpcGVyLWNvbnRhaW5lci1tZWRpYXMnLCB7DQogICAgICAgICAgICAgICAgbmV4dEJ1dHRvbjogJy5zd2lwZXItYnV0dG9uLW5leHQtbWVkaWFzJywNCiAgICAgICAgICAgICAgICBwcmV2QnV0dG9uOiAnLnN3aXBlci1idXR0b24tcHJldi1tZWRpYXMnLA0KICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLA0KICAgICAgICAgICAgICAgIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtbWVkaWFzJywNCiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlci1tZWRpYXMnLA0KICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsDQogICAgICAgICAgICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZTogZmFsc2UsDQogICAgICAgICAgICAgICAgYXV0b3BsYXk6IDI1MDAsDQogICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLA0KICAgICAgICAgICAgICAgIGF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb246IHRydWUsDQogICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsDQogICAgICAgICAgICAgICAgc3BlZWQ6IDUwMA0KICAgICAgICAgICAgfSk7DQogICAgICAgIH07DQogICAgPC9zY3JpcHQ+ICAgICAgDQogICAgDQogICAgDQoNCg0KICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0vLy8vLy8vLy8vLy8vLy8vLy8vRmluIGR1IC5tYWluLS0+DQoNCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPCEtLS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vRU5EIENvbnRlbnUgZHluYW1pcXVlIGRlIGxhIHBhZ2UtLT4NCg0KDQoNCiAgICAgICAgICAgIDwhLS0vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL0RlYnV0IGR1IC5mb290ZXItLT4NCiAgICAgICAgICAgIDxmb290ZXIgY2xhc3M9ImZvb3RlciBiZ0Jsb2NrIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJEaXZGb290ZXJBZ2VuY2VzIiBjbGFzcz0iY29udGVuZXIiPjxkaXYgY2xhc3M9ImgyX3N0eWxlIj5Ob3MgYWdlbmNlcyBwcsOocyBkZSBjaGV6IHZvdXM8L2Rpdj4NCjxkaXYgY2xhc3M9J2xpc3RlVmlsbGUnPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkVzc29ubmUgKDkxKTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIMOJdnJ5IC0gQ291cmNvdXJvbm5lcycgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL8OpdnJ5LS0tY291cmNvdXJvbm5lcyc+QWdlbmNlIGltbW9iaWxpw6hyZSDDiXZyeSAtIENvdXJjb3Vyb25uZXM8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkV1cmUgKDI3KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEV2cmV1eCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2V2cmV1eCc+QWdlbmNlIGltbW9iaWxpw6hyZSBFdnJldXg8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgRXp5IHN1ciBFdXJlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvZXp5LXN1ci1ldXJlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEV6eSBzdXIgRXVyZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBHYWlsbG9uJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvZ2FpbGxvbic+QWdlbmNlIGltbW9iaWxpw6hyZSBHYWlsbG9uPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFBhY3kgc3VyIEV1cmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9wYWN5LXN1ci1ldXJlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFBhY3kgc3VyIEV1cmU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgVmVybm9uJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvdmVybm9uJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFZlcm5vbjwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+RXVyZS1ldC1Mb2lyICgyOCk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBEcmV1eCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2RyZXV4Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIERyZXV4PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1haW50ZW5vbicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21haW50ZW5vbic+QWdlbmNlIGltbW9iaWxpw6hyZSBNYWludGVub248L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkdhcmQgKDMwKTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE7Drm1lcyBDZW50cmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9uw65tZXMtY2VudHJlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE7Drm1lcyBDZW50cmU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTsOubWVzIEVzdCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL27Drm1lcy1lc3QnPkFnZW5jZSBpbW1vYmlsacOocmUgTsOubWVzIEVzdDwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+SGF1dGUtVmllbm5lICg4Nyk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBBaXhlIHN1ciB2aWVubmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9haXhlLXN1ci12aWVubmUnPkFnZW5jZSBpbW1vYmlsacOocmUgQWl4ZSBzdXIgdmllbm5lPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5IYXV0cy1kZS1TZWluZSAoOTIpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQ2hhdmlsbGUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9jaGF2aWxsZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBDaGF2aWxsZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBMYSBHYXJlbm5lLUNvbG9tYmVzJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbGEtZ2FyZW5uZS1jb2xvbWJlcyc+QWdlbmNlIGltbW9iaWxpw6hyZSBMYSBHYXJlbm5lLUNvbG9tYmVzPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5JbGxlLWV0LVZpbGFpbmUgKDM1KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEJldHRvbicgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2JldHRvbic+QWdlbmNlIGltbW9iaWxpw6hyZSBCZXR0b248L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPkxhIFLDqXVuaW9uICg5NzQpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgU2FpbnQtcGllcnJlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvc2FpbnQtcGllcnJlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFNhaW50LXBpZXJyZTwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+UGFyaXMgKDc1KTwvZGl2Pg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFBhcmlzIDXDqG1lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcGFyaXMtMDUnPkFnZW5jZSBpbW1vYmlsacOocmUgUGFyaXMgNcOobWU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUGFyaXMgMTfDqG1lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcGFyaXMtMTcnPkFnZW5jZSBpbW1vYmlsacOocmUgUGFyaXMgMTfDqG1lPC9hPg0KPC9kaXY+DQo8ZGl2IGNsYXNzPSdsaXN0ZVZpbGxlJz4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBQYXJpcyAxOcOobWUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9wYXJpcy0xOSc+QWdlbmNlIGltbW9iaWxpw6hyZSBQYXJpcyAxOcOobWU8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPlNlaW5lLU1hcml0aW1lICg3Nik8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBEw6l2aWxsZSBsZXMgcm91ZW4nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9kZXZpbGxlLWxlcy1yb3Vlbic+QWdlbmNlIGltbW9iaWxpw6hyZSBEw6l2aWxsZSBsZXMgcm91ZW48L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTW9udCBzdCBhaWduYW4nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tb250LXNhaW50LWFpZ25hbic+QWdlbmNlIGltbW9iaWxpw6hyZSBNb250IHN0IGFpZ25hbjwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBQYXZpbGx5JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcGF2aWxseSc+QWdlbmNlIGltbW9iaWxpw6hyZSBQYXZpbGx5PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFJvdWVuIHJpdmUgZHJvaXRlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcm91ZW4nPkFnZW5jZSBpbW1vYmlsacOocmUgUm91ZW4gcml2ZSBkcm9pdGU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUm91ZW4gcml2ZSBnYXVjaGUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9yb3Vlbi1yaXZlLWdhdWNoZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBSb3VlbiByaXZlIGdhdWNoZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBTdCBldGllbm5lIGR1IHJvdXZyYXknIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9zYWludC1ldGllbm5lLWR1LXJvdXZyYXknPkFnZW5jZSBpbW1vYmlsacOocmUgU3QgZXRpZW5uZSBkdSByb3V2cmF5PC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5WYWwgZCdPaXNlICg5NSk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBCZWF1Y2hhbXAnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9iZWF1Y2hhbXAnPkFnZW5jZSBpbW1vYmlsacOocmUgQmVhdWNoYW1wPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEJlc3NhbmNvdXJ0JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvYmVzc2FuY291cnQnPkFnZW5jZSBpbW1vYmlsacOocmUgQmVzc2FuY291cnQ8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQ2VyZ3knIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9jZXJneSc+QWdlbmNlIGltbW9iaWxpw6hyZSBDZXJneTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBDb3JtZWlsbGVzIGVuIHBhcmlzaXMnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9jb3JtZWlsbGVzLWVuLXBhcmlzaXMnPkFnZW5jZSBpbW1vYmlsacOocmUgQ29ybWVpbGxlcyBlbiBwYXJpc2lzPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEZyYW5jb252aWxsZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2ZyYW5jb252aWxsZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBGcmFuY29udmlsbGU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgSGVyYmxheScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2hlcmJsYXknPkFnZW5jZSBpbW1vYmlsacOocmUgSGVyYmxheTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBQbGVzc2lzIEJvdWNoYXJkJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcGxlc3Npcy1ib3VjaGFyZCc+QWdlbmNlIGltbW9iaWxpw6hyZSBQbGVzc2lzIEJvdWNoYXJkPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1hZ255IGVuIFZleGluJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbWFnbnktZW4tdmV4aW4nPkFnZW5jZSBpbW1vYmlsacOocmUgTWFnbnkgZW4gVmV4aW48L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTW9udGlnbnkgbGVzIENvcm1laWxsZXMnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tb250aWdueS1sZXMtY29ybWVpbGxlcyc+QWdlbmNlIGltbW9iaWxpw6hyZSBNb250aWdueSBsZXMgQ29ybWVpbGxlczwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNb250bWFnbnknIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tb250bWFnbnknPkFnZW5jZSBpbW1vYmlsacOocmUgTW9udG1hZ255PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFNhaW50IE91ZW4gbCdBdW1vbmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9zYWludC1vdWVuLWwtYXVtb25lJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFNhaW50IE91ZW4gbCdBdW1vbmU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgU2Fubm9pcycgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3Nhbm5vaXMnPkFnZW5jZSBpbW1vYmlsacOocmUgU2Fubm9pczwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBWYXVyw6lhbCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3ZhdXJlYWwnPkFnZW5jZSBpbW1vYmlsacOocmUgVmF1csOpYWw8L2E+DQo8YnIvPg0KPGRpdiBjbGFzcz0iaDRfc3R5bGUiPlZhbC1kZS1NYXJuZSAoOTQpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTm9nZW50IHN1ciBNYXJuZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL25vZ2VudC1zdXItbWFybmUnPkFnZW5jZSBpbW1vYmlsacOocmUgTm9nZW50IHN1ciBNYXJuZTwvYT4NCjxici8+DQo8ZGl2IGNsYXNzPSJoNF9zdHlsZSI+VmFyICg4Myk8L2Rpdj4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBQdWdldC1zdXItQXJnZW5zJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvcHVnZXQtc3VyLWFyZ2Vucyc+QWdlbmNlIGltbW9iaWxpw6hyZSBQdWdldC1zdXItQXJnZW5zPC9hPg0KPGJyLz4NCjxkaXYgY2xhc3M9Img0X3N0eWxlIj5ZdmVsaW5lcyAoNzgpPC9kaXY+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQW5kcsOpc3knIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9hbmRyZXN5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEFuZHLDqXN5PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEF1YmVyZ2VudmlsbGUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9hdWJlcmdlbnZpbGxlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEF1YmVyZ2VudmlsbGU8L2E+DQo8L2Rpdj4NCjxkaXYgY2xhc3M9J2xpc3RlVmlsbGUnPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEJvbm5pw6hyZXMgc3VyIFNlaW5lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvYm9ubmllcmVzLXN1ci1zZWluZSc+QWdlbmNlIGltbW9iaWxpw6hyZSBCb25uacOocmVzIHN1ciBTZWluZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBDaGFtYm91cmN5JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvY2hhbWJvdXJjeSc+QWdlbmNlIGltbW9iaWxpw6hyZSBDaGFtYm91cmN5PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIENoYXRvdScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2NoYXRvdSc+QWdlbmNlIGltbW9iaWxpw6hyZSBDaGF0b3U8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgQ29uZmxhbnMgc3RlIEhvbm9yaW5lJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvY29uZmxhbnMnPkFnZW5jZSBpbW1vYmlsacOocmUgQ29uZmxhbnMgc3RlIEhvbm9yaW5lPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIEVsYW5jb3VydCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2VsYW5jb3VydCc+QWdlbmNlIGltbW9iaWxpw6hyZSBFbGFuY291cnQ8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgSG91ZGFuJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvaG91ZGFuJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIEhvdWRhbjwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBJc3NvdScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2lzc291Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIElzc291PC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIExlIENoZXNuYXknIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9sZS1jaGVzbmF5Jz5BZ2VuY2UgaW1tb2JpbGnDqHJlIExlIENoZXNuYXk8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTGUgTWVzbmlsLVNhaW50LURlbmlzJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbGUtbWVzbmlsLXN0LWRlbmlzJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIExlIE1lc25pbC1TYWludC1EZW5pczwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBMZXMgQ2xheWVzIFNvdXMgQm9pcycgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2xlcy1jbGF5ZXMtc291cy1ib2lzJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIExlcyBDbGF5ZXMgU291cyBCb2lzPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIExlcyBFc3NhcnRzLWxlLVJvaScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL2xlcy1lc3NhcnRzLWxlLXJvaSc+QWdlbmNlIGltbW9iaWxpw6hyZSBMZXMgRXNzYXJ0cy1sZS1Sb2k8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTGVzIE11cmVhdXgnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9sZXMtbXVyZWF1eCc+QWdlbmNlIGltbW9iaWxpw6hyZSBMZXMgTXVyZWF1eDwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNYWduYW52aWxsZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21hZ25hbnZpbGxlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1hZ25hbnZpbGxlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1hbnRlcyBsYSBKb2xpZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21hbnRlcyc+QWdlbmNlIGltbW9iaWxpw6hyZSBNYW50ZXMgbGEgSm9saWU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTWFudGVzIGxhIEpvbGllIExPQ0FUSU9OJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbWFudGVzLWxvY2F0aW9uJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIE1hbnRlcyBsYSBKb2xpZSBMT0NBVElPTjwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNYXJseSBsZSBSb2knIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tYXJseS1sZS1yb2knPkFnZW5jZSBpbW1vYmlsacOocmUgTWFybHkgbGUgUm9pPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIE1hdWxlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvbWF1bGUnPkFnZW5jZSBpbW1vYmlsacOocmUgTWF1bGU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgTWF1cmVjb3VydCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL21hdXJlY291cnQnPkFnZW5jZSBpbW1vYmlsacOocmUgTWF1cmVjb3VydDwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBNZXVsYW4nIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9tZXVsYW4nPkFnZW5jZSBpbW1vYmlsacOocmUgTWV1bGFuPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFBvaXNzeScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3BvaXNzeSc+QWdlbmNlIGltbW9iaWxpw6hyZSBQb2lzc3k8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgUmFtYm91aWxsZXQnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy9yYW1ib3VpbGxldCc+QWdlbmNlIGltbW9iaWxpw6hyZSBSYW1ib3VpbGxldDwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBTYWludCBDeXIgbCdFY29sZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3NhaW50LWN5ci1sLWVjb2xlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFNhaW50IEN5ciBsJ0Vjb2xlPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFN0IEdlcm1haW4gZW4gTGF5ZScgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3NhaW50LWdlcm1haW4tY2hhdGVhdSc+QWdlbmNlIGltbW9iaWxpw6hyZSBTdCBHZXJtYWluIGVuIExheWU8L2E+DQo8YSB0aXRsZT0nQWdlbmNlIGltbW9iaWxpw6hyZSBMQSBSRVNJREVOQ0UgU3QgTm9tIGxhIEJyZXRlY2hlJyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvc2FpbnQtbm9tLWxhLWJyZXRlY2hlJz5BZ2VuY2UgaW1tb2JpbGnDqHJlIFN0IE5vbSBsYSBCcmV0ZWNoZTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBUcmllbCBzdXIgU2VpbmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy90cmllbC1zdXItc2VpbmUnPkFnZW5jZSBpbW1vYmlsacOocmUgVHJpZWwgc3VyIFNlaW5lPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFbDqWxpenktVmlsbGFjb3VibGF5JyBocmVmPScvYWdlbmNlcy1pbW1vYmlsaWVyZXMvdmVsaXp5LXZpbGxhY291YmxheSc+QWdlbmNlIGltbW9iaWxpw6hyZSBWw6lsaXp5LVZpbGxhY291YmxheTwvYT4NCjxhIHRpdGxlPSdBZ2VuY2UgaW1tb2JpbGnDqHJlIExBIFJFU0lERU5DRSBWZXJuZXVpbCBzdXIgU2VpbmUnIGhyZWY9Jy9hZ2VuY2VzLWltbW9iaWxpZXJlcy92ZXJuZXVpbC1zdXItc2VpbmUnPkFnZW5jZSBpbW1vYmlsacOocmUgVmVybmV1aWwgc3VyIFNlaW5lPC9hPg0KPGEgdGl0bGU9J0FnZW5jZSBpbW1vYmlsacOocmUgTEEgUkVTSURFTkNFIFZvaXNpbnMtbGUtQnJldG9ubmV1eCcgaHJlZj0nL2FnZW5jZXMtaW1tb2JpbGllcmVzL3ZvaXNpbnMtbGUtYnJldG9ubmV1eCc+QWdlbmNlIGltbW9iaWxpw6hyZSBWb2lzaW5zLWxlLUJyZXRvbm5ldXg8L2E+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGwyRm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TVEFSVCBDQUxMMkZPT1RFUi0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsbDJWaWxsZXNBZ2VuY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWdlbmNlcy1pbW1vYmlsaWVyZXMiIHRpdGxlPSJEZXZlbmlyIGZyYW5jaGlzw6kgTGEgUsOpc2lkZW5jZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlJldHJvdXZlciB0b3V0ZXMgbGVzIGltcGxhbnRhdGlvbnMgZGUgbm9zIGFnZW5jZXMgcHLDqHMgZGUgY2hleiB2b3VzICE8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDNfc3R5bGUiPlRyb3V2ZXIgdm90cmUgYWdlbmNlPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGwyRnJhbmNoaXNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY3JlZXItYWZmaWxpZXItYWdlbmNlLWltbW9iaWxpZXJlIiB0aXRsZT0iRGV2ZW5pciBmcmFuY2hpc8OpIExhIFLDqXNpZGVuY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Ub3V0IHNhdm9pciBzdXIgbGEgY3LDqWF0aW9uIG91IGwnYWZmaWxpYXRpb24gZGUgdm90cmUgYWdlbmNlIGF1IHLDqXNlYXUgTGEgUsOpc2lkZW5jZS48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDNfc3R5bGUiPkRldmVuaXIgZnJhbmNoaXPDqTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxsMkZhY2Vib29rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vbGFyZXNpZGVuY2VpbW1vYmlsaWVyLyIgdGl0bGU9IlJlam9pZ25lei1ub3VzIHN1ciBmYWNlYm9vayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlN1aXZleiB0b3V0ZSBsJ2FjdHVhbGl0w6kgZGUgbCdpbW1vYmlsaWVyIGV0IGR1IHLDqXNlYXUgTGEgUsOpc2lkZW5jZS48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDNfc3R5bGUiPlJlam9pZ25lei1ub3VzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1ciBmYWNlYm9vazwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLUVORCBDQUxMMkZPT1RFUi0tPg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgICAgIDwhLS1FTkQgRk9PVEVSLS0+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlck5hdiI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVuZXIiPg0KICAgICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyIgdGl0bGU9ImFjY3VlaWwgZHUgc2l0ZSBMYSBSw6lzaWRlbmNlIj5BY2N1ZWlsPC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcGxhbi1kdS1zaXRlIiB0aXRsZT0iTmF2aWd1ZXIgc3VyIGxlIHNpdGUgTGEgUsOpc2lkZW5jZSI+UGxhbiBkdSBzaXRlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NndSIgdGl0bGU9IkNvbmRpdGlvbnMgZ8OpbsOpcmFsZXMgZCd1dGlsaXNhdGlvbiI+Q29uZGl0aW9ucyBnw6luw6lyYWxlcyBkJ3V0aWxpc2F0aW9uPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3BvbGl0aXF1ZS1jb25maWRlbnRpYWxpdGUiIHRpdGxlPSJQb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqSI+UG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6k8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcG9saXRpcXVlLWNvb2tpZXMiIHRpdGxlPSJQb2xpdGlxdWUgZGVzIGNvb2tpZXMiPlBvbGl0aXF1ZSBkZXMgY29va2llczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY29weXJpZ2h0Ij7CqSBMYSBSw6lzaWRlbmNlIETDqXZlbG9wcGVtZW50IDIwMTg8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPC9kaXY+PCEtLUZJTiBkdSBDT05URU5FUiBHTE9CQUwgREUgTEEgUEFHRSAud3JhcHBlci0tPg0KDQogICAgICAgICAgICA8IS0tIEphdmFTY3JpcHQgYXQgdGhlIGJvdHRvbSBmb3IgZmFzdCBwYWdlIGxvYWRpbmcgLS0+DQogICAgICAgICAgICA8IS0tLy8vLy8vLy8vLy8vLy8vLy8vLy8vU2Nyb2xsIFRPUCArIGNoYXJnZW1lbnQgZGVzIEpTLS0+DQogICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iZ29fdG9wIiB0aXRsZT0iUmVtb250ZXIiPlJlbW9udGVyIDwvYT4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuX3BvcHVwX2RpdiI+DQogICAgICAgICAgICAgICAgPGEgaWQ9Ik1lc3NhZ2VCb3hDdGxfTEJEdW1teSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRNZXNzYWdlQm94Q3RsJExCRHVtbXkmIzM5OywmIzM5OyYjMzk7KSIgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyI+PC9hPg0KPGRpdiBpZD0iTWVzc2FnZUJveEN0bF9QTWVzc2FnZUJveCIgY2xhc3M9InBvcHVwSW5mb3JtYXRpdmUiPg0KCQ0KICAgIDxkaXYgaWQ9Ik1lc3NhZ2VCb3hDdGxfUEluZm9zIiBjbGFzcz0icG9wdXBDdG5ySW5mbyI+DQoJCQ0KICAgICAgICA8YSBpZD0iTWVzc2FnZUJveEN0bF9MQkNsb3NlIiBjbGFzcz0iY2xvc2VDcm9zcyIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRNZXNzYWdlQm94Q3RsJExCQ2xvc2UmIzM5OywmIzM5OyYjMzk7KSI+ICAgICAgICANCiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImNsb3NlciIgc3JjPSIvaW1hZ2VzL2Nsb3NlX3BpYy5zdmciIGFsdD0iRmVybWVyIGxhIGZlbsOqdHJlIi8+DQogICAgICAgIDwvYT4NCiAgICAgICAgPGRpdiBpZD0iTWVzc2FnZUJveEN0bF9VUEluZm9zIj4NCgkJCQ0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9Ik1lc3NhZ2VCb3hDdGxfaDRUaXRsZSIgY2xhc3M9Img0X3N0eWxlIj5JbmZvcm1hdGl2ZSBwb3B1cCBhdmVjIGRlcyBzYXV0IGRlIGxpZ25lPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8cCBpZD0iTWVzc2FnZUJveEN0bF9wTWVzc2FnZSI+DQogICAgICAgICAgICAgICAgICAgIE9uIHNhaXQgZGVwdWlzIGxvbmd0ZW1wcyBxdWUgdHJhdmFpbGxlciBhdmVjIGR1IHRleHRlIGxpc2libGUgZXQgY29udGVuYW50IGR1IHNlbnMgZXN0IHNvdXJjZSBkZSBkaXN0cmFjdGlvbnMsIGV0IGVtcMOqY2hlIGRlIHNlIGNvbmNlbnRyZXIgc3VyIGxhIG1pc2UgZW4gcGFnZSBlbGxlLW3Dqm1lLiBMJ2F2YW50YWdlIGR1IExvcmVtIElwc3VtIHN1ciB1biB0ZXh0ZSBnw6luw6lyaXF1ZSBjb21tZSAnRHUgdGV4dGUuIER1IHRleHRlLiBEdSB0ZXh0ZS4nIGVzdCBxdSdpbCBwb3Nzw6hkZSB1bmUgZGlzdHJpYnV0aW9uIGRlIGxldHRyZXMgcGx1cyBvdSBtb2lucyBub3JtYWxlLCBldCBlbiB0b3V0IGNhcyBjb21wYXJhYmxlIGF2ZWMgY2VsbGUgZHUgZnJhbsOnYWlzIHN0YW5kYXJkLg0KICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgIA0KCQk8L2Rpdj4NCiAgICANCgk8L2Rpdj4NCg0KPC9kaXY+DQoNCg0KDQogICAgICAgICAgICAgICAgPGRpdiBpZD0iRmxvYXRpbmdVcGRhdGVQcm9ncmVzc19VcGRhdGVQcm9ncmVzcyIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KCQ0KICAgICAgICA8Y2VudGVyPg0KICAgICAgICAgICAgPGRpdiBpZD0iRmxvYXRpbmdVcGRhdGVQcm9ncmVzc19QYW5lbFByb2dyZXNzIiBhbGlnbj0iY2VudGVyIiBzdHlsZT0iei1pbmRleDo5OTk5OTk5OTsiPg0KCQkNCiAgICAgICAgICAgICAgICA8dGFibGUgc3R5bGU9IndpZHRoOiAzMDBweDsiPg0KICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iRmxvYXRpbmdVcGRhdGVQcm9ncmVzc19JbWFnZSIgc3JjPSIuLi8uLi8uLi9JbWFnZXMvYWpheC1sb2FkZXIuZ2lmIiBhbHQ9IkxvYWRlciBpbWFnZSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iRmxvYXRpbmdVcGRhdGVQcm9ncmVzc19MYWJlbFByb2dyZXNzIj48Yj48Zm9udCBjb2xvcj0iR3JheSIgc2l6ZT0iMyI+TWlzZSDDoCBqb3VyIGRlIGwnYWZmaWNoYWdlLi4uPC9mb250PjwvYj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICANCgk8L2Rpdj4NCiAgICAgICAgPC9jZW50ZXI+DQogICAgICAgIA0KICAgIA0KPC9kaXY+DQoNCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8IS0tTWVudSByZXNwb25zaXZlLS0+DQogICAgICAgICAgICA8c2NyaXB0IHNyYz0iL2pzL3NpdGUuanMiPjwvc2NyaXB0Pg0KDQogICAgICAgICAgICA8IS0tIDQgc2NyaXB0cyBwb3VyIGxlIHNjcm9sbCBhdXRvIGRhbnMgbGVzIHBhZ2VzIC0tPg0KICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9qcy9sb2NhbHNjcm9sbC9qcXVlcnkubG9jYWxzY3JvbGwuanMiPjwvc2NyaXB0Pg0KICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9qcy9sYW5jZW1lbnQuanMiPjwvc2NyaXB0Pg0KICAgICAgICAgICAgPCEtLSBwZXJtZXQgbGUgbGFuY2VtZW50IGRlIGxhIGZvbmN0aW9uIGRlIHNjcm9sbCAtLT4NCiAgICAgICAgICAgIDxzY3JpcHQgc3JjPSIvanMvbG9jYWxzY3JvbGwvanF1ZXJ5LnNjcm9sbFRvLmpzIj48L3NjcmlwdD4NCiAgICAgICAgDQoNCiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgICAgICAgICAkKCcjUFNlYXJjaFNob3J0Y3V0JykuY2xpY2soZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCQoJyNkaXZTZWFyY2hTaG9ydGN1dCcpLmhhc0NsYXNzKCdkaXZTZWFyY2hTaG9ydGN1dF9jbG9zZWQnKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2RpdlNlYXJjaFNob3J0Y3V0Jykuc3dpdGNoQ2xhc3MoJ2RpdlNlYXJjaFNob3J0Y3V0X2Nsb3NlZCcsJ2RpdlNlYXJjaFNob3J0Y3V0X29wZW5lZCcsIDUwMCwgImVhc2VPdXRTaW5lIik7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcjZGl2U2VhcmNoU2hvcnRjdXQnKS5zd2l0Y2hDbGFzcygnZGl2U2VhcmNoU2hvcnRjdXRfb3BlbmVkJywgJ2RpdlNlYXJjaFNob3J0Y3V0X2Nsb3NlZCcsIDUwMCwgImVhc2VPdXRTaW5lIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgICAgICAgICAkKCcjYnRuTG9nQ3B0ZScpLmNsaWNrKGZ1bmN0aW9uIChlKSB7ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAvLyQoJyNkaXZMb2dDcHRlJykudG9nZ2xlQ2xhc3MoJ2RpdkxvZ0NwdGVfb3BlbmVkJywgNTAwLCAiZWFzZU91dFNpbmUiKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCQoJyNkaXZMb2dDcHRlJykuaGFzQ2xhc3MoJ2RpdkxvZ0NwdGVfY2xvc2VkJykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaXZMb2dDcHRlJykuc3dpdGNoQ2xhc3MoJ2RpdkxvZ0NwdGVfY2xvc2VkJywgJ2RpdkxvZ0NwdGVfb3BlbmVkJywgNTAwLCAiZWFzZU91dFNpbmUiKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaXZMb2dDcHRlJykuc3dpdGNoQ2xhc3MoJ2RpdkxvZ0NwdGVfb3BlbmVkJywgJ2RpdkxvZ0NwdGVfY2xvc2VkJywgNTAwLCAiZWFzZU91dFNpbmUiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgICAgICQoIi5pZ25vcmUtY2xpY2siKS5jbGljayhmdW5jdGlvbiAoZSkgeyAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gQ29uZGl0aW9uIGQnYWZmaWNoYWdlIGR1IGJvdXRvbg0KICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnNjcm9sbFRvcCgpID4gMTAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmdvX3RvcCcpLmZhZGVJbigpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmdvX3RvcCcpLmZhZGVPdXQoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIC8vIEV2ZW5lbWVudCBhdSBjbGljDQogICAgICAgICAgICAgICAgICAgICQoJy5nb190b3AnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogMCB9LCA4MDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW5fcG9wdXBfZGl2Ij4NCiAgICAgICAgICAgICAgICA8YSBpZD0iTEJEdW1teSIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRMQkR1bW15JiMzOTssJiMzOTsmIzM5OykiPjwvYT4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJQUG9wdXBDb25jb3VycyI+DQoJDQogICAgICAgICAgICAgICAgICAgIDxhIGlkPSJITENvbmNvdXJzIiBocmVmPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9jb25jb3VycyIgdGFyZ2V0PSJfYmxhbmsiPjxpbWcgc3JjPSIuLi8uLi8uLi9JbWFnZXMvRU5DQVJUX1NJVEVfQUNDVUVJTF9UUk9VVkVaX0JVTk5ZLmpwZyIgYWx0PSIiIC8+PC9hPg0KICAgICAgICAgICAgICAgIA0KPC9kaXY+ICAgDQogICAgICAgICAgICAgICAgICAgICANCg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDxhIGlkPSJMQkR1bW15TGl2cmVCbGFuYyIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRMQkR1bW15TGl2cmVCbGFuYyYjMzk7LCYjMzk7JiMzOTspIj48L2E+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0iUFBvcHVwTGl2cmVCbGFuYyIgY2xhc3M9InBvcHVwTGl2cmVCbGFuYyI+DQoJDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbmV1clBvcHVwTGl2cmVCbGFuYyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbG9zZUNyb3NzSW1nUG9wdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQkNsb3NlTGl2cmVCbGFuYyIgdGl0bGU9ImZlcm1lciIgaHJlZj0iamF2YXNjcmlwdDpXZWJGb3JtX0RvUG9zdEJhY2tXaXRoT3B0aW9ucyhuZXcgV2ViRm9ybV9Qb3N0QmFja09wdGlvbnMoJnF1b3Q7Y3RsMDAkTEJDbG9zZUxpdnJlQmxhbmMmcXVvdDssICZxdW90OyZxdW90OywgZmFsc2UsICZxdW90OyZxdW90OywgJnF1b3Q7Li4vLi4vLi4vIyZxdW90OywgZmFsc2UsIHRydWUpKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1hZ2VzL0Nyb3NzQ2xvc2VQb3B1cExpdnJlQmxhbmMucG5nIiBhbHQ9ImZlcm1lciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdHJlUG9wdXBMaXZyZUJsYW5jIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6l1c3NpciBsYSB2ZW50ZSBkZSB2b3RyZSBiaWVuIGltbW9iaWxpZXINCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRldGFpbFBvcHVwTGl2cmVCbGFuYyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUG91ciB0b3V0IHNhdm9pciBzdXIgbGVzIGJvbm5lcyBxdWVzdGlvbnMgw6Agc2UgcG9zZXIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG91ciByw6l1c3NpciBsYSB2ZW50ZSBkZSB2b3RyZSBiaWVuDQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGwyUG9wdXBMaXZyZUJsYW5jIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTEJEb3dubG9hZExpdnJlQmxhbmMiIGhyZWY9ImphdmFzY3JpcHQ6V2ViRm9ybV9Eb1Bvc3RCYWNrV2l0aE9wdGlvbnMobmV3IFdlYkZvcm1fUG9zdEJhY2tPcHRpb25zKCZxdW90O2N0bDAwJExCRG93bmxvYWRMaXZyZUJsYW5jJnF1b3Q7LCAmcXVvdDsmcXVvdDssIGZhbHNlLCAmcXVvdDsmcXVvdDssICZxdW90Oy4uLy4uLy4uL2xpdnJlLWJsYW5jLXZlbmRldXImcXVvdDssIGZhbHNlLCB0cnVlKSkiPj4gVMOpbMOpY2hhcmdlciBsZSBndWlkZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZWZ1c1TDqWzDqWNoYXJnZUxpdnJlQmxhbmMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJMQlJlZnVzTGl2cmVCbGFuYyIgaHJlZj0iamF2YXNjcmlwdDpXZWJGb3JtX0RvUG9zdEJhY2tXaXRoT3B0aW9ucyhuZXcgV2ViRm9ybV9Qb3N0QmFja09wdGlvbnMoJnF1b3Q7Y3RsMDAkTEJSZWZ1c0xpdnJlQmxhbmMmcXVvdDssICZxdW90OyZxdW90OywgZmFsc2UsICZxdW90OyZxdW90OywgJnF1b3Q7Li4vLi4vLi4vIyZxdW90OywgZmFsc2UsIHRydWUpKSI+VW5lIGF1dHJlIGZvaXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KPC9kaXY+ICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8YSBpZD0iTEJEdW1teUNvdmlkMTkiIGhyZWY9ImphdmFzY3JpcHQ6X19kb1Bvc3RCYWNrKCYjMzk7Y3RsMDAkTEJEdW1teUNvdmlkMTkmIzM5OywmIzM5OyYjMzk7KSI+PC9hPg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9IlBQb3B1cENvdmlkMTkiIGNsYXNzPSJwb3B1cENvdmlkMTkiPg0KCQ0KCSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW5ldXJQb3B1cENvdmlkMTkiPg0KCQkgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xvc2VDcm9zc0ltZ1BvcHVwIj4NCgkJCSAgICAgICAgICAgICAgICA8YSBpZD0iTEJDbG9zZUNvdmlkMTkiIHRpdGxlPSJmZXJtZXIiIGhyZWY9ImphdmFzY3JpcHQ6V2ViRm9ybV9Eb1Bvc3RCYWNrV2l0aE9wdGlvbnMobmV3IFdlYkZvcm1fUG9zdEJhY2tPcHRpb25zKCZxdW90O2N0bDAwJExCQ2xvc2VDb3ZpZDE5JnF1b3Q7LCAmcXVvdDsmcXVvdDssIGZhbHNlLCAmcXVvdDsmcXVvdDssICZxdW90Oy4uLy4uLy4uLyMmcXVvdDssIGZhbHNlLCB0cnVlKSkiPg0KCQkJCSAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9Dcm9zc0Nsb3NlUG9wdXBMaXZyZUJsYW5jLnBuZyIgYWx0PSJmZXJtZXIiLz4NCgkJCSAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgDQoJCSAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICANCgkgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQo8L2Rpdj4gICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBpZD0iUEFjY2VwdENvb2tpZXMiIGNsYXNzPSJjb29raWVzQmFyIj4NCgkNCiAgICAgICAgICAgICAgICA8cD4NCgkJCSAgICBFbiBwb3Vyc3VpdmFudCBsYSBuYXZpZ2F0aW9uIHN1ciBjZSBzaXRlLCB2b3VzIGFjY2VwdGV6IGxlIGTDqXDDtHQgZGUgY29va2llcyBldCBhdXRyZXMgdGFncyBwb3VyIHZvdXMgcHJvcG9zZXIgZGVzIGNvbnRlbnVzIGV0IHVuZSBleHDDqXJpZW5jZSBkZSBuYXZpZ2F0aW9uIHBlcnNvbm5hbGlzw6lzLCBkZXMgZm9uY3Rpb25zIGRlIHBhcnRhZ2UgdmVycyBsZXMgcsOpc2VhdXggc29jaWF1eCBldCBhbmFseXNlciBsJ2F1ZGllbmNlIGR1IHNpdGUgaW50ZXJuZXQuIA0KCQkJICAgIDwvcD4NCgkJCQkNCgkJCSAgICA8ZGl2IGNsYXNzPSJidG5BY2NlcHRDb29raWVzIj4NCiAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IkxCQWNjZXB0Q29va2llcyIgaHJlZj0iamF2YXNjcmlwdDpfX2RvUG9zdEJhY2soJiMzOTtjdGwwMCRMQkFjY2VwdENvb2tpZXMmIzM5OywmIzM5OyYjMzk7KSI+SidhY2NlcHRlPC9hPgkJCQkNCgkJCSAgICA8L2Rpdj4NCiAgICAgICAgICAgIA0KPC9kaXY+ICAgICAgICANCg0KICAgICAgICANCg0KPFNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCnZhciBNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X09MTWFwX2luaXRpYWxpemVkID0gZmFsc2U7U3lzLldlYkZvcm1zLlBhZ2VSZXF1ZXN0TWFuYWdlci5nZXRJbnN0YW5jZSgpLmFkZF9wYWdlTG9hZGVkKEluaXRpYWxpemVfTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdCk7DQpmdW5jdGlvbiBJbml0aWFsaXplX01haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXQoKSB7DQppZihNYWluQ29udGVudF9GVlByb2R1aXRfT0xNYXBQcm9kdWl0X09MTWFwX2luaXRpYWxpemVkID09IHRydWUpe3JldHVybjt9IGVsc2Uge01haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfT0xNYXBfaW5pdGlhbGl6ZWQ9dHJ1ZTt9dmFyIE1haW5Db250ZW50X0ZWUHJvZHVpdF9PTE1hcFByb2R1aXRfT0xNYXAgPSBudWxsOw0KTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdF9PTE1hcD0gbmV3IE9wZW5MYXllck1hcCgnTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdCcpOw0KTWFpbkNvbnRlbnRfRlZQcm9kdWl0X09MTWFwUHJvZHVpdF9PTE1hcC5BZGRMaW5lU3RyaW5ncyhbeyJDb2xvciI6IjEwNSwgMTA1LCAxMDUiLCJXaWR0aCI6NCwiQ29vcmRpbmF0ZXMiOlt7ImxhdGl0dWRlIjo0OC44ODQzNjMsImxvbmdpdHVkZSI6Mi4zNjQ2MTF9LHsibGF0aXR1ZGUiOjQ4Ljg4Njg4LCJsb25naXR1ZGUiOjIuMzY2ODM1fSx7ImxhdGl0dWRlIjo0OC44OTQ1ODMsImxvbmdpdHVkZSI6Mi4zNzAzMTR9LHsibGF0aXR1ZGUiOjQ4Ljg5NTI1NiwibG9uZ2l0dWRlIjoyLjM3MTczM30seyJsYXRpdHVkZSI6NDguODk1NzA2LCJsb25naXR1ZGUiOjIuMzcxMzA1fSx7ImxhdGl0dWRlIjo0OC44OTY1MjcsImxvbmdpdHVkZSI6Mi4zNzA0N30seyJsYXRpdHVkZSI6NDguOTAyMjM0LCJsb25naXR1ZGUiOjIuMzcwMzYxfSx7ImxhdGl0dWRlIjo0OC45MDI1MzEsImxvbmdpdHVkZSI6Mi4zNzk2Nzh9LHsibGF0aXR1ZGUiOjQ4LjkwMjUyNCwibG9uZ2l0dWRlIjoyLjM4MDE3MX0seyJsYXRpdHVkZSI6NDguOTAyNjI2LCJsb25naXR1ZGUiOjIuMzg0MDI5fSx7ImxhdGl0dWRlIjo0OC45MDI2MSwibG9uZ2l0dWRlIjoyLjM4NTE4N30seyJsYXRpdHVkZSI6NDguOTAxNjUsImxvbmdpdHVkZSI6Mi4zODk3MjN9LHsibGF0aXR1ZGUiOjQ4LjkwMTM1MSwibG9uZ2l0dWRlIjoyLjM5MDkxOH0seyJsYXRpdHVkZSI6NDguOTAxMjYsImxvbmdpdHVkZSI6Mi4zOTEyODZ9LHsibGF0aXR1ZGUiOjQ4Ljg5ODk2OSwibG9uZ2l0dWRlIjoyLjM5NTQ4fSx7ImxhdGl0dWRlIjo0OC44OTc5MzgsImxvbmdpdHVkZSI6Mi4zOTYxMjF9LHsibGF0aXR1ZGUiOjQ4Ljg5NjEwNiwibG9uZ2l0dWRlIjoyLjM5NzIzOH0seyJsYXRpdHVkZSI6NDguODkwNDU5LCJsb25naXR1ZGUiOjIuMzk4OTIyfSx7ImxhdGl0dWRlIjo0OC44ODQ3OTMsImxvbmdpdHVkZSI6Mi4zOTk4NjR9LHsibGF0aXR1ZGUiOjQ4Ljg4MjUxNiwibG9uZ2l0dWRlIjoyLjQwMjgwMn0seyJsYXRpdHVkZSI6NDguODgwNTMxLCJsb25naXR1ZGUiOjIuNDA5NjM5fSx7ImxhdGl0dWRlIjo0OC44Nzg1NTMsImxvbmdpdHVkZSI6Mi40MTExMjR9LHsibGF0aXR1ZGUiOjQ4Ljg3NjA0MiwibG9uZ2l0dWRlIjoyLjQwMjYyNH0seyJsYXRpdHVkZSI6NDguODc1OTY5LCJsb25naXR1ZGUiOjIuNDAyNDR9LHsibGF0aXR1ZGUiOjQ4Ljg3NTU5MywibG9uZ2l0dWRlIjoyLjM5OTI0OH0seyJsYXRpdHVkZSI6NDguODc1NTgyLCJsb25naXR1ZGUiOjIuMzk5MTZ9LHsibGF0aXR1ZGUiOjQ4Ljg3NTMyOCwibG9uZ2l0dWRlIjoyLjM5NDkzM30seyJsYXRpdHVkZSI6NDguODc1MjY0LCJsb25naXR1ZGUiOjIuMzg5NDZ9LHsibGF0aXR1ZGUiOjQ4Ljg3NDc1OCwibG9uZ2l0dWRlIjoyLjM4ODE2MX0seyJsYXRpdHVkZSI6NDguODc0NjUsImxvbmdpdHVkZSI6Mi4zODY3NDN9LHsibGF0aXR1ZGUiOjQ4Ljg3Mzg5NCwibG9uZ2l0dWRlIjoyLjM4NTE2OX0seyJsYXRpdHVkZSI6NDguODcyMDE0LCJsb25naXR1ZGUiOjIuMzc2NzUyfSx7ImxhdGl0dWRlIjo0OC44Nzc5NTIsImxvbmdpdHVkZSI6Mi4zNzAyMTR9LHsibGF0aXR1ZGUiOjQ4Ljg4MTk4MSwibG9uZ2l0dWRlIjoyLjM3MDI2N30seyJsYXRpdHVkZSI6NDguODgyNzIzLCJsb25naXR1ZGUiOjIuMzY5NzQzfSx7ImxhdGl0dWRlIjo0OC44ODQyMjYsImxvbmdpdHVkZSI6Mi4zNjg2Nzd9LHsibGF0aXR1ZGUiOjQ4Ljg4NDM2MywibG9uZ2l0dWRlIjoyLjM2NDYxMX1dLCJUeXBlIjoiTGluZVN0cmluZyIsIk5hbWUiOm51bGwsIklkRmVhdHVyZSI6bnVsbCwiQ2xpY2thYmxlIjpmYWxzZX0seyJDb2xvciI6IjI1NSwgMCwgMCIsIldpZHRoIjo0LCJDb29yZGluYXRlcyI6W3sibGF0aXR1ZGUiOjQ4LjkwMjIzNCwibG9uZ2l0dWRlIjoyLjM3MDM2MX0seyJsYXRpdHVkZSI6NDguODk2NTI3LCJsb25naXR1ZGUiOjIuMzcwNDd9LHsibGF0aXR1ZGUiOjQ4Ljg5NTcwNiwibG9uZ2l0dWRlIjoyLjM3MTMwNX0seyJsYXRpdHVkZSI6NDguODk1MjU2LCJsb25naXR1ZGUiOjIuMzcxNzMzfSx7ImxhdGl0dWRlIjo0OC44OTQ1ODMsImxvbmdpdHVkZSI6Mi4zNzAzMTR9LHsibGF0aXR1ZGUiOjQ4Ljg5Mzg2MiwibG9uZ2l0dWRlIjoyLjM3MzMwMX0seyJsYXRpdHVkZSI6NDguODkzNjE2LCJsb25naXR1ZGUiOjIuMzc2NTY2fSx7ImxhdGl0dWRlIjo0OC44OTM1MzEsImxvbmdpdHVkZSI6Mi4zNzY3MjV9LHsibGF0aXR1ZGUiOjQ4Ljg5MjM3NSwibG9uZ2l0dWRlIjoyLjM3ODkzNH0seyJsYXRpdHVkZSI6NDguODkwNDY1LCJsb25naXR1ZGUiOjIuMzgyNjIzfSx7ImxhdGl0dWRlIjo0OC44OTA4MjksImxvbmdpdHVkZSI6Mi4zODQ2MzJ9LHsibGF0aXR1ZGUiOjQ4Ljg5MDg1MSwibG9uZ2l0dWRlIjoyLjM4NDY4Mn0seyJsYXRpdHVkZSI6NDguODkwOTc2LCJsb25naXR1ZGUiOjIuMzg0Njc2fSx7ImxhdGl0dWRlIjo0OC44OTUzNzgsImxvbmdpdHVkZSI6Mi4zOTMzNDZ9LHsibGF0aXR1ZGUiOjQ4Ljg5NjA4NCwibG9uZ2l0dWRlIjoyLjM5NjgyMn0seyJsYXRpdHVkZSI6NDguODk1OTk0LCJsb25naXR1ZGUiOjIuMzk2ODc1fSx7ImxhdGl0dWRlIjo0OC44OTYxMDYsImxvbmdpdHVkZSI6Mi4zOTcyMzh9LHsibGF0aXR1ZGUiOjQ4Ljg5NzkzOCwibG9uZ2l0dWRlIjoyLjM5NjEyMX0seyJsYXRpdHVkZSI6NDguODk4OTY5LCJsb25naXR1ZGUiOjIuMzk1NDh9LHsibGF0aXR1ZGUiOjQ4LjkwMTI2LCJsb25naXR1ZGUiOjIuMzkxMjg2fSx7ImxhdGl0dWRlIjo0OC45MDEzNTEsImxvbmdpdHVkZSI6Mi4zOTA5MTh9LHsibGF0aXR1ZGUiOjQ4LjkwMTY1LCJsb25naXR1ZGUiOjIuMzg5NzIzfSx7ImxhdGl0dWRlIjo0OC45MDI2MSwibG9uZ2l0dWRlIjoyLjM4NTE4N30seyJsYXRpdHVkZSI6NDguOTAyNjI2LCJsb25naXR1ZGUiOjIuMzg0MDI5fSx7ImxhdGl0dWRlIjo0OC45MDI1MjQsImxvbmdpdHVkZSI6Mi4zODAxNzF9LHsibGF0aXR1ZGUiOjQ4LjkwMjUzMSwibG9uZ2l0dWRlIjoyLjM3OTY3OH0seyJsYXRpdHVkZSI6NDguOTAyMjM0LCJsb25naXR1ZGUiOjIuMzcwMzYxfV0sIlR5cGUiOiJMaW5lU3RyaW5nIiwiTmFtZSI6bnVsbCwiSWRGZWF0dXJlIjpudWxsLCJDbGlja2FibGUiOmZhbHNlfV0pOw0KfTsNCjwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCnZhciBHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9BdXRvQ29tcGxldGVSZWZfVEJBdXRvQ29tcGxldGVfQXV0b0NvbXBsZXRlTWFuYWdlcj1udWxsOw0KaWYoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQkF1dG9Db21wbGV0ZScpICE9IG51bGwpIHtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlJykub25mb2N1cyA9IGZ1bmN0aW9uIChlKSB7DQppZiAoR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlX0F1dG9Db21wbGV0ZU1hbmFnZXIgPT0gbnVsbCkgew0KdmFyIHNlYXJjaF9pbnB1dD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlJyk7DQp2YXIgdmFsdWVfaW5wdXQ9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQlZhbHVlJyk7DQp2YXIgcmVzdWx0c19kaXY9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9SZXN1bHRzRGl2Jyk7DQokKCcjR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlJykuYXR0cignYXV0b2NvbXBsZXRlJywgJ09mZicpOw0KJCgnI0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQkF1dG9Db21wbGV0ZScpLmNsb3Nlc3QoJ2Zvcm0nKS5hdHRyKCdhdXRvY29tcGxldGUnLCAnT2ZmJyk7DQppZihzZWFyY2hfaW5wdXQhPW51bGwgJiYgdmFsdWVfaW5wdXQhPW51bGwgJiYgcmVzdWx0c19kaXYhPW51bGwpew0KR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfQXV0b0NvbXBsZXRlUmVmX1RCQXV0b0NvbXBsZXRlX0F1dG9Db21wbGV0ZU1hbmFnZXI9IG5ldyBBdXRvQ29tcGxldGVNYW5hZ2VyKHNlYXJjaF9pbnB1dCwgdmFsdWVfaW5wdXQsIHJlc3VsdHNfZGl2LCAnL0F1dG9Db21wbGV0ZVNlcnZpY2UuYXNteC9HZXRSZWZzQ29tcGxldGlvbkxpc3QnLCAnQXVjdW4gcsOpc3VsdGF0JywgZmFsc2UsZmFsc2UsJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX0F1dG9Db21wbGV0ZVJlZl9UQkF1dG9Db21wbGV0ZScpOw0KfQ0KfQ0KfTsNCn0NCjwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCmdhKCdzZW5kJywgJ2V2ZW50JywgJ1Byb2R1aXRzJywgJ0NvbnN1bHRhdGlvbicsICcxMDAwMTIzMDE5OzIzMTQ7UEFSSVMgMTknLCAxLHsnZGltZW5zaW9uMSc6JzEwMDAxMjMwMTknLCAnZGltZW5zaW9uMic6ICdvZmZlcmRldGFpbCcsICdkaW1lbnNpb24zJzogJzkzMDAwMCd9KTs8L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4NCiAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAkLmFqYXgoew0KICAgICAgICAgICB1cmw6ICcvU3RhdGlzdGlxdWVzU2VydmljZS5hc214L0luY3JlbWVudFNjb3JlRGV0YWlsUHJvZHVpdCcsDQogICAgICAgICAgIGRhdGE6ICJ7ICdDb2RlUHJvZHVpdCc6IDczNDQyNiwgJ0lzUmVjbyc6IGZhbHNlfSIsDQogICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsDQogICAgICAgICAgIHR5cGU6ICdQT1NUJywNCiAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgYXN5bmM6IHRydWUNCiAgICAgICB9KTsNCiAgIH0sIDEwMCk7DQo8L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+IA0KdmFyIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19UQklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19UQklucHV0Jyk7dmFyIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19DQkxWYWx1ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVNERFR5cGVzX0NCTFZhbHVlcycpO01TRERNYW5hZ2VyKEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19UQklucHV0LEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01TRERUeXBlc19WYWx1ZXNEaXYsZmFsc2UpOzwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPiANCnZhciBHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NVlRCVmlsbGVzX1RCQXV0b0NvbXBsZXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJBdXRvQ29tcGxldGUnKTt2YXIgR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVZUQlZpbGxlc19UQlZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJWYWx1ZScpO01WVEJNYW5hZ2VyKEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJBdXRvQ29tcGxldGUsIEdyYW5kTW90ZXVyUmVjaGVyY2hlQ3RsX01WVEJWaWxsZXNfVEJWYWx1ZSwnL0F1dG9Db21wbGV0ZVNlcnZpY2UuYXNteC9HZXRWaWxsZXNDb21wbGV0aW9uTGlzdCcsIHsgc3RhcnRUZXh0OiAnVmlsbGUgb3UgQ1AnLCBlbXB0eVRleHQ6ICdQYXMgZGUgcsOpc3VsdGF0JywgYXNIdG1sSUQ6ICdHcmFuZE1vdGV1clJlY2hlcmNoZUN0bF9NVlRCVmlsbGVzJywgc2VsZWN0ZWRJdGVtUHJvcDogJ25hbWUnLCBzZWFyY2hPYmpQcm9wczogJ25hbWUnLCBhdXRvX3Bvc3RiYWNrOiBmYWxzZSwgcG9zdGJhY2tfdGFyZ2V0OiAnR3JhbmRNb3RldXJSZWNoZXJjaGVDdGxfTVZUQlZpbGxlc19UQkF1dG9Db21wbGV0ZScsIHByZUZpbGw6IFtdfSk7PC9zY3JpcHQ+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCi8vPCFbQ0RBVEFbDQpTeXMuRXh0ZW5kZWQuVUkuTG9jYWxpemF0aW9uLlNldExvY2FsZSgiZnIiKTsvL11dPg0KPC9zY3JpcHQ+DQo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+DQogICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgdXJsOiAnL1N0YXRpc3RpcXVlc1NlcnZpY2UuYXNteC9JbmNyZW1lbnRTY29yZUxpc3RpbmdQcm9kdWl0JywNCiAgICAgICAgICAgZGF0YTogInsgJ0NvZGVQcm9kdWl0JzogNzcyNDU0LCAnSXNSZWNvJzogdHJ1ZX0iLA0KICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLA0KICAgICAgICAgICB0eXBlOiAnUE9TVCcsDQogICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsDQogICAgICAgICAgIGFzeW5jOiB0cnVlDQogICAgICAgfSk7DQogICB9LCAxMDApOw0KPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPg0KICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICQuYWpheCh7DQogICAgICAgICAgIHVybDogJy9TdGF0aXN0aXF1ZXNTZXJ2aWNlLmFzbXgvSW5jcmVtZW50U2NvcmVMaXN0aW5nUHJvZHVpdCcsDQogICAgICAgICAgIGRhdGE6ICJ7ICdDb2RlUHJvZHVpdCc6IDc4MDQxNywgJ0lzUmVjbyc6IHRydWV9IiwNCiAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywNCiAgICAgICAgICAgdHlwZTogJ1BPU1QnLA0KICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLA0KICAgICAgICAgICBhc3luYzogdHJ1ZQ0KICAgICAgIH0pOw0KICAgfSwgMTAwKTsNCjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4NCiAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAkLmFqYXgoew0KICAgICAgICAgICB1cmw6ICcvU3RhdGlzdGlxdWVzU2VydmljZS5hc214L0luY3JlbWVudFNjb3JlTGlzdGluZ1Byb2R1aXQnLA0KICAgICAgICAgICBkYXRhOiAieyAnQ29kZVByb2R1aXQnOiA3OTgwOTAsICdJc1JlY28nOiB0cnVlfSIsDQogICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsDQogICAgICAgICAgIHR5cGU6ICdQT1NUJywNCiAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgYXN5bmM6IHRydWUNCiAgICAgICB9KTsNCiAgIH0sIDEwMCk7DQo8L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+DQogICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgdXJsOiAnL1N0YXRpc3RpcXVlc1NlcnZpY2UuYXNteC9JbmNyZW1lbnRTY29yZUxpc3RpbmdQcm9kdWl0JywNCiAgICAgICAgICAgZGF0YTogInsgJ0NvZGVQcm9kdWl0JzogODM4NTgzLCAnSXNSZWNvJzogdHJ1ZX0iLA0KICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLA0KICAgICAgICAgICB0eXBlOiAnUE9TVCcsDQogICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsDQogICAgICAgICAgIGFzeW5jOiB0cnVlDQogICAgICAgfSk7DQogICB9LCAxMDApOw0KPC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPg0KICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICQuYWpheCh7DQogICAgICAgICAgIHVybDogJy9TdGF0aXN0aXF1ZXNTZXJ2aWNlLmFzbXgvSW5jcmVtZW50U2NvcmVMaXN0aW5nUHJvZHVpdCcsDQogICAgICAgICAgIGRhdGE6ICJ7ICdDb2RlUHJvZHVpdCc6IDg0MzI3MywgJ0lzUmVjbyc6IHRydWV9IiwNCiAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywNCiAgICAgICAgICAgdHlwZTogJ1BPU1QnLA0KICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLA0KICAgICAgICAgICBhc3luYzogdHJ1ZQ0KICAgICAgIH0pOw0KICAgfSwgMTAwKTsNCjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4NCiAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAkLmFqYXgoew0KICAgICAgICAgICB1cmw6ICcvU3RhdGlzdGlxdWVzU2VydmljZS5hc214L0luY3JlbWVudFNjb3JlTGlzdGluZ1Byb2R1aXQnLA0KICAgICAgICAgICBkYXRhOiAieyAnQ29kZVByb2R1aXQnOiA4NTI0MzYsICdJc1JlY28nOiB0cnVlfSIsDQogICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsDQogICAgICAgICAgIHR5cGU6ICdQT1NUJywNCiAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgYXN5bmM6IHRydWUNCiAgICAgICB9KTsNCiAgIH0sIDEwMCk7DQo8L3NjcmlwdD4NCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCi8vPCFbQ0RBVEFbDQpTeXMuRXh0ZW5kZWQuVUkuTG9jYWxpemF0aW9uLlNldExvY2FsZSgiZnIiKTtTeXMuRXh0ZW5kZWQuVUkuTG9jYWxpemF0aW9uLlNldExvY2FsZSgiZnIiKTtTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuVmFsaWRhdG9yQ2FsbG91dEJlaGF2aW9yLCB7IkNsaWVudFN0YXRlRmllbGRJRCI6Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZOb21fVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyX0NsaWVudFN0YXRlIiwiY2xvc2VJbWFnZVVybCI6Ii9XZWJSZXNvdXJjZS5heGQ/ZD1Ob0RkdjMwdzdhdmNLNmJDaDJQckZGWG5PdDkzSURSQWY1R0I1aGpvNEY1dkM2VXdUSFNjYjdyX093YU50SGFRVjZleVVGLTFVaVNERTlRalVxaXZOSWIwYUt4QTIwNVU2LTBTVEctTi1XRGpjTWY1Q0FVa0w2eGZreUhIWEtQMjN3aUo4N3RVT0pra1hISXlrMlMzdWYwNXQxVkt1d2NiQ2FQOWpQTHNvSnMxXHUwMDI2dD02MzY5NzAyMzA0ODAwMDAwMDAiLCJpZCI6IlJGVk5vbV9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXIiLCJwb3B1cFBvc2l0aW9uIjoyLCJ3YXJuaW5nSWNvbkltYWdlVXJsIjoiL1dlYlJlc291cmNlLmF4ZD9kPU5YVDlZSjhRcVMzYW5LLXFKeVhOQXg5RmVaSXJaaVlnMUdLR2FKR1RDZFRPN2EyMHY5SlVjQmdJalJiNFJkRVlXWjVvR0ZKLUlXaWtJTDBURWpxZ0NiNFNVNEdHT3JFMU1rNGJ1Y0gtTGt1OWNLX0JHeVJJOFR0M0xmQWZscDdCV2YwN2lxM1o1TlUzM1BtVmxhdE5yZ0o4Q3JSaWRGRWdXOUxEUk9Wek00VTFcdTAwMjZ0PTYzNjk3MDIzMDQ4MDAwMDAwMCJ9LCBudWxsLCBudWxsLCAkZ2V0KCJNYWluQ29udGVudF9GVlByb2R1aXRfRlZBZ2VuY2VfUkZWTm9tIikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuVmFsaWRhdG9yQ2FsbG91dEJlaGF2aW9yLCB7IkNsaWVudFN0YXRlRmllbGRJRCI6Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRlZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiLCJjbG9zZUltYWdlVXJsIjoiL1dlYlJlc291cmNlLmF4ZD9kPU5vRGR2MzB3N2F2Y0s2YkNoMlByRkZYbk90OTNJRFJBZjVHQjVoam80RjV2QzZVd1RIU2NiN3JfT3dhTnRIYVFWNmV5VUYtMVVpU0RFOVFqVXFpdk5JYjBhS3hBMjA1VTYtMFNURy1OLVdEamNNZjVDQVVrTDZ4Zmt5SEhYS1AyM3dpSjg3dFVPSmtrWEhJeWsyUzN1ZjA1dDFWS3V3Y2JDYVA5alBMc29KczFcdTAwMjZ0PTYzNjk3MDIzMDQ4MDAwMDAwMCIsImlkIjoiUkZWRW1haWxfVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyIiwicG9wdXBQb3NpdGlvbiI6Miwid2FybmluZ0ljb25JbWFnZVVybCI6Ii9XZWJSZXNvdXJjZS5heGQ/ZD1OWFQ5WUo4UXFTM2FuSy1xSnlYTkF4OUZlWklyWmlZZzFHS0dhSkdUQ2RUTzdhMjB2OUpVY0JnSWpSYjRSZEVZV1o1b0dGSi1JV2lrSUwwVEVqcWdDYjRTVTRHR09yRTFNazRidWNILUxrdTljS19CR3lSSThUdDNMZkFmbHA3QldmMDdpcTNaNU5VMzNQbVZsYXROcmdKOENyUmlkRkVnVzlMRFJPVnpNNFUxXHUwMDI2dD02MzY5NzAyMzA0ODAwMDAwMDAifSwgbnVsbCwgbnVsbCwgJGdldCgiTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1JGVkVtYWlsIikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuVmFsaWRhdG9yQ2FsbG91dEJlaGF2aW9yLCB7IkNsaWVudFN0YXRlRmllbGRJRCI6Ik1haW5Db250ZW50X0ZWUHJvZHVpdF9GVkFnZW5jZV9SRVZFbWFpbF9WYWxpZGF0b3JDYWxsb3V0RXh0ZW5kZXJfQ2xpZW50U3RhdGUiLCJjbG9zZUltYWdlVXJsIjoiL1dlYlJlc291cmNlLmF4ZD9kPU5vRGR2MzB3N2F2Y0s2YkNoMlByRkZYbk90OTNJRFJBZjVHQjVoam80RjV2QzZVd1RIU2NiN3JfT3dhTnRIYVFWNmV5VUYtMVVpU0RFOVFqVXFpdk5JYjBhS3hBMjA1VTYtMFNURy1OLVdEamNNZjVDQVVrTDZ4Zmt5SEhYS1AyM3dpSjg3dFVPSmtrWEhJeWsyUzN1ZjA1dDFWS3V3Y2JDYVA5alBMc29KczFcdTAwMjZ0PTYzNjk3MDIzMDQ4MDAwMDAwMCIsImlkIjoiUkVWRW1haWxfVmFsaWRhdG9yQ2FsbG91dEV4dGVuZGVyIiwicG9wdXBQb3NpdGlvbiI6Miwid2FybmluZ0ljb25JbWFnZVVybCI6Ii9XZWJSZXNvdXJjZS5heGQ/ZD1OWFQ5WUo4UXFTM2FuSy1xSnlYTkF4OUZlWklyWmlZZzFHS0dhSkdUQ2RUTzdhMjB2OUpVY0JnSWpSYjRSZEVZV1o1b0dGSi1JV2lrSUwwVEVqcWdDYjRTVTRHR09yRTFNazRidWNILUxrdTljS19CR3lSSThUdDNMZkFmbHA3QldmMDdpcTNaNU5VMzNQbVZsYXROcmdKOENyUmlkRkVnVzlMRFJPVnpNNFUxXHUwMDI2dD02MzY5NzAyMzA0ODAwMDAwMDAifSwgbnVsbCwgbnVsbCwgJGdldCgiTWFpbkNvbnRlbnRfRlZQcm9kdWl0X0ZWQWdlbmNlX1JFVkVtYWlsIikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuTW9kYWxQb3B1cEJlaGF2aW9yLCB7ImJhY2tncm91bmRDc3NDbGFzcyI6Im1vZGFsQmFja2dyb3VuZCIsImR5bmFtaWNTZXJ2aWNlUGF0aCI6Ii9maWNoZS1wcm9kdWl0LmFzcHgiLCJpZCI6Ik1lc3NhZ2VCb3hDdGxfUE1lc3NhZ2VCb3hfTW9kYWxQb3B1cEV4dGVuZGVyIiwib2tDb250cm9sSUQiOiJNZXNzYWdlQm94Q3RsX0xCQ2xvc2UiLCJwb3B1cENvbnRyb2xJRCI6Ik1lc3NhZ2VCb3hDdGxfUE1lc3NhZ2VCb3gifSwgbnVsbCwgbnVsbCwgJGdldCgiTWVzc2FnZUJveEN0bF9MQkR1bW15IikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuQWx3YXlzVmlzaWJsZUNvbnRyb2xCZWhhdmlvciwgeyJob3Jpem9udGFsT2Zmc2V0IjoxNTAsImhvcml6b250YWxTaWRlIjoxLCJpZCI6IkZsb2F0aW5nVXBkYXRlUHJvZ3Jlc3NfQWx3YXlzVmlzaWJsZUNvbnRyb2xFeHRlbmRlciIsInNjcm9sbEVmZmVjdER1cmF0aW9uIjoxMDAwLCJ2ZXJ0aWNhbFNpZGUiOjF9LCBudWxsLCBudWxsLCAkZ2V0KCJGbG9hdGluZ1VwZGF0ZVByb2dyZXNzX1BhbmVsUHJvZ3Jlc3MiKSk7DQp9KTsNClN5cy5BcHBsaWNhdGlvbi5hZGRfaW5pdChmdW5jdGlvbigpIHsNCiAgICAkY3JlYXRlKFN5cy5FeHRlbmRlZC5VSS5Nb2RhbFBvcHVwQmVoYXZpb3IsIHsiYmFja2dyb3VuZENzc0NsYXNzIjoibW9kYWxCYWNrZ3JvdW5kIiwiZHluYW1pY1NlcnZpY2VQYXRoIjoiL2ZpY2hlLXByb2R1aXQuYXNweCIsImlkIjoiUFBvcHVwQ29uY291cnNfTW9kYWxQb3B1cEV4dGVuZGVyIiwicG9wdXBDb250cm9sSUQiOiJQUG9wdXBDb25jb3VycyJ9LCBudWxsLCBudWxsLCAkZ2V0KCJMQkR1bW15IikpOw0KfSk7DQpTeXMuQXBwbGljYXRpb24uYWRkX2luaXQoZnVuY3Rpb24oKSB7DQogICAgJGNyZWF0ZShTeXMuRXh0ZW5kZWQuVUkuTW9kYWxQb3B1cEJlaGF2aW9yLCB7ImJhY2tncm91bmRDc3NDbGFzcyI6Im1vZGFsQmFja2dyb3VuZCIsImNhbmNlbENvbnRyb2xJRCI6IkxCQ2xvc2VMaXZyZUJsYW5jIiwiZHluYW1pY1NlcnZpY2VQYXRoIjoiL2ZpY2hlLXByb2R1aXQuYXNweCIsImlkIjoiUFBvcHVwTGl2cmVCbGFuY19Nb2RhbFBvcHVwRXh0ZW5kZXIiLCJwb3B1cENvbnRyb2xJRCI6IlBQb3B1cExpdnJlQmxhbmMifSwgbnVsbCwgbnVsbCwgJGdldCgiTEJEdW1teUxpdnJlQmxhbmMiKSk7DQp9KTsNClN5cy5BcHBsaWNhdGlvbi5hZGRfaW5pdChmdW5jdGlvbigpIHsNCiAgICAkY3JlYXRlKFN5cy5FeHRlbmRlZC5VSS5Nb2RhbFBvcHVwQmVoYXZpb3IsIHsiYmFja2dyb3VuZENzc0NsYXNzIjoibW9kYWxCYWNrZ3JvdW5kIiwiY2FuY2VsQ29udHJvbElEIjoiTEJDbG9zZUNvdmlkMTkiLCJkeW5hbWljU2VydmljZVBhdGgiOiIvZmljaGUtcHJvZHVpdC5hc3B4IiwiaWQiOiJQUG9wdXBDb3ZpZDE5X01vZGFsUG9wdXBFeHRlbmRlciIsInBvcHVwQ29udHJvbElEIjoiUFBvcHVwQ292aWQxOSJ9LCBudWxsLCBudWxsLCAkZ2V0KCJMQkR1bW15Q292aWQxOSIpKTsNCn0pOw0KLy9dXT4NCjwvc2NyaXB0Pg0KPC9mb3JtPg0KDQogICAgICAgIA0KDQogICAgPC9ib2R5Pg0KDQo8L2h0bWw+DQo=
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:05 GMT
- request:
    method: get
    uri: https://www.laresidence.fr//acheter/paris-18/appartement/1000105904
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://www.laresidence.fr/acheter/paris-18/appartement/1000105904
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:07 GMT
      Content-Length:
      - '201'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IGTDqXBsYWPDqTwvdGl0bGU+PC9oZWFkPgo8Ym9keT48aDE+T2JqZXQgZMOpcGxhY8OpPC9oMT5DZSBkb2N1bWVudCBwZXV0IMOqdHJlIGNvbnN1bHTDqSA8YSBIUkVGPSJodHRwczovL3d3dy5sYXJlc2lkZW5jZS5mci9hY2hldGVyL3BhcmlzLTE4L2FwcGFydGVtZW50LzEwMDAxMDU5MDQiPmljaTwvYT48L2JvZHk+
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:05 GMT
- request:
    method: get
    uri: https://www.laresidence.fr/acheter/paris-18/appartement/1000105904
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding,Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=1wlod2pej4tzlwgsy04emwpi; path=/; HttpOnly; SameSite=Lax
      - CodeType=; path=/
      - CodeVille=; path=/
      - Etat=; path=/
      - NombreDeChambresMin=; path=/
      - NombreDePiecesMin=; path=/
      - PrixMax=; path=/
      - PrixMin=; path=/
      - SecteurElargi=; path=/
      - Selection=; path=/
      - SurfaceMax=; path=/
      - SurfaceMin=; path=/
      - SurfaceTerrainMax=; path=/
      - SurfaceTerrainMin=; path=/
      - UserAcceptCookies=; path=/
      - UserContactId=; path=/
      - UserEmail=; path=/
      - UserGUID=20c3c659-955b-4f4d-a961-0a46f24e23a7; expires=Thu, 01-Apr-2021 17:50:07
        GMT; path=/
      - UserLogged=; path=/
      - UserName=; path=/
      - UserPassword=; path=/
      - UserPhone=; path=/
      - UserPhotos=; path=/
      - UserRememberMe=; path=/
      - UserSearch=Etats%3dBac%26autosave%3dtrue; expires=Thu, 01-Apr-2021 17:50:07
        GMT; path=/
      - UserSelection=; path=/
      - l=; path=/
      - p=; path=/
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 01 Apr 2020 17:50:07 GMT
      Content-Length:
      - '35828'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 01 Apr 2020 17:50:06 GMT
recorded_with: VCR 5.1.0
