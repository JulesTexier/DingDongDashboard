---
http_interactions:
- request:
    method: get
    uri: https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS.php?currency=EUR&sort=date_desc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Pragma:
      - no-cache
      Fromserver:
      - dc2.10.102.2.48
      Loadtime:
      - D=925097 t=1585824377154972
      X-Ua-Compatible:
      - IE=edge,chrome=1
      Server:
      - elb
      X-Akamai-Transformed:
      - 9 - 0 pmb=mRUM,3
      Vary:
      - Accept-Encoding
      Cache-Control:
      - no-cache, no-store, must-revalidate, post-check=0, pre-check=0
      Expires:
      - Thu, 02 Apr 2020 10:46:55 GMT
      Date:
      - Thu, 02 Apr 2020 10:46:55 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Server-Timing:
      - cdn-cache; desc=HIT
      - edge; dur=1
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1 maximum-scale=1.0, user-scalable=no">
    <meta name="description" content="Achat et vente immobilier de luxe PARIS entre 500.000 € et 15 millions € . Villa, appartement de luxe à vendre.">
    <meta name="keywords" content="" >
    <meta name="robots" content="NOINDEX, FOLLOW" >

    <link rel="shortcut icon" type="image/x-icon" href="/v5/img/favicon.ico">
    <link rel="icon" type="image/x-icon" href="/v5/img/favicon.ico">
    <link rel="icon" type="image/png" href ="/v5/img/favicon.png">
    <link rel="apple-touch-icon" href="/v5/img/apple-touch-icon.png">

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" >    <title>Vente Immobilier de luxe PARIS: appartements-villas de prestige</title>    <link href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS-2.php/?currency=EUR&amp;sort=date_desc" rel="next" >
<link href="https://fonts.googleapis.com/css?family=Playfair+Display:400,400italic,700,700italic" media="screen" rel="stylesheet" type="text/css" >
<link href="/v5/dist/dist-pr.min.css" media="screen" rel="stylesheet" type="text/css" >    
    <!--script type = "text/javascript" src="https://www.googletagservices.com/tag/js/gpt.js"></script-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.2.5/polyfill.js"></script>
<script type="text/javascript" async=false defer=false
        src="https://cdnjs.cloudflare.com/ajax/libs/react/16.10.2/umd/react.production.min.js"></script>
<script type="text/javascript" async=false defer=false
        src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.10.2/umd/react-dom.production.min.js"></script>
<!--script type="text/javascript" src="https://www.googletagservices.com/tag/js/gpt.js"></script-->
<script type="application/json" class="CookieConsentParam">
      {
        "url": "https://www.lux-residence.com/vendor/cookie-consent-module",
        "confTheshield": {
            "site": "Lux-residence",
            "projectName": "Lux-residence",
            "cguUrl": "https://www.lux-residence.com/fr/cgu-et-politique-de-confidentialite",
            "wording": {
                "heading": "Lux-residence est optimisé grâce à des cookies",
                "content": "Certaines fonctionnalités de notre site s'appuient sur des services proposés par des sites tiers. Ces fonctionnalités déposent des cookies permettant notamment à ces sites de tracer votre navigation. Vous pouvez les accepter ou les refuser soit globalement pour l'ensemble du site et l'ensemble des services, soit service par service. Pour connaître les partenaires qui peuvent déposer des cookies sur notre site, vous pouvez consulter la section INFORMATIONS CONCERNANT L'UTILISATION DES COOKIES de nos <a target='_blank' style='text-decoration:underline' href='https://www.lux-residence.com/fr/cgu-et-politique-de-confidentialite'>CGU</a>.",
                "content2": "En poursuivant votre navigation, vous acceptez la mise en place des cookies permettant le bon fonctionnement de notre site, et l'utilisation de la part du Groupe DCF et de ses partenaires, de cookies et autres traceurs servant à mesurer l'audience, à comprendre votre navigation, à vous proposer des offres et publicités adaptées à votre profil et à partager sur les réseaux sociaux. <a target='_blank' style='text-decoration:underline' href='https://www.lux-residence.com/fr/cgu-et-politique-de-confidentialite'>En savoir plus.</a>"
            }
        },
        "idgtm": "GTM-KXKRTLV",
        "pushThor": true,
        "pushTheshield": true
      }

</script>

<script type="text/javascript" defer="false" src="/vendor/cookie-consent-module/dist/dist.min.js"></script>

<script type="text/javascript">
  function pushGPT() {
    if (window.GDPRLib && window.GDPRLib.GDPR) {
      if (!window.GDPRLib.GDPR.isAllowed()) {
        window.GDPRLib.GDPR.onConsent(function(){
          if (window.theShield.isAdsEnable) {
            let s = document.createElement( 'script' );
            s.setAttribute('type',"text/javascript");
            s.setAttribute( 'src', 'https://www.googletagservices.com/tag/js/gpt.js' );
            document.body.appendChild( s );
          }
        });
      } else {
        if (window.theShield.isAdsEnable) {
            let s = document.createElement( 'script' );
            s.setAttribute('type',"text/javascript");
            s.setAttribute( 'src', 'https://www.googletagservices.com/tag/js/gpt.js' );
            document.body.appendChild( s );
        }
      }
    } else {
      setTimeout(pushGPT, 250);
    }
  }
  pushGPT();

  // Gestion Publicite par google tag
  window.myGoogleTagBuffer = [];
  window.googletag = window.googletag || {cmd: []};

  function unloadGoogleTagBuffer() {
    window.myGoogleTagBuffer.map(
      function (func) {
        googletag.cmd.push(func);
      }
    );
    window.myGoogleTagBuffer = [];
  }

  var myIterator = 0;

  function checkMyGoogleTagBuffer() {
    var pubConsent = typeof CookieConsent !== 'undefined' ? CookieConsent.checkConsent(4) : false;

    if (window.myGoogleTagBuffer.length && pubConsent && googletag.pubadsReady) {
      unloadGoogleTagBuffer();
    }

    if (myIterator++ < 5) {
      setTimeout(checkMyGoogleTagBuffer, 1000);
    }
  }

</script>

<script type="text/javascript" >
    function pending() {
      if (window.cookieConsent !== undefined) {
        GDPRLib.GDPR.onConsent(function () {
          __pendings.forEach(function (args) {
            if (args.type === "evt") {
              __oldPushEvent.apply(thor, args.data);
            } else {
              __oldPushVar.apply(thor, args.data);
            }
          })
        });
      } else {
      setTimeout(pending, 500);
      }
    }

    function pushEmptyView() {
      if (window.GDPRLib && window.GDPRLib.GDPR) {
        if (!window.GDPRLib.GDPR.isAllowed()) {
          window.GDPRLib.GDPR.onConsent(function(){
            thor.pushEvent("viewOnConsent",[]);
          });
        } else {
          thor.pushEvent("viewOnConsent",[]);
        }
      } else {
        setTimeout(pushEmptyView, 500);
      }
    }
    pushEmptyView();


</script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/v5/dist/style.min.css?v=20200402">


    <!--googletagservices-->
    <script type="text/javascript">
  function pushAdAdvs() {
    if (window.GDPRLib && window.GDPRLib.GDPR  && typeof googletag !== "undefined") {
      if (!window.GDPRLib.GDPR.isAllowed()) {
        CookieConsent.hitOnConsent(setAdAdvs, 4);
      } else {
        setAdAdvs()
      }
    } else {
      setTimeout(pushAdAdvs, 1000);
    }
  }

  function setAdAdvs() {
    googletag.cmd.push(function () {
      googletag.pubads().setTargeting('cp', '75')
        .setTargeting('pxmin', '0')
        .setTargeting('pxmax', '999000000')
        .setTargeting('idtypebien', '0')
        .setTargeting('idtt', '2')
        .setTargeting('langue', 'fr')
        .setTargeting('geodp', '75')
        .setTargeting('luxreg', '0')
        .setTargeting('currency', 'EUR');

      googletag.pubads().setTargeting('testinterne', ['0']);

      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 250]], 'div-gpt-ad-pave-haut')
        .setTargeting('pos', ['pave-haut']).addService(googletag.pubads());
      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 102]], 'div-gpt-ad-mv1')
        .setTargeting('pos', ['mv1']).addService(googletag.pubads());
      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 102]], 'div-gpt-ad-mv2')
        .setTargeting('pos', ['mv2']).addService(googletag.pubads());
      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 102]], 'div-gpt-ad-mv3')
        .setTargeting('pos', ['mv3']).addService(googletag.pubads());
      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 102]], 'div-gpt-ad-mv4')
        .setTargeting('pos', ['mv4']).addService(googletag.pubads());
      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 102]], 'div-gpt-ad-mv5')
        .setTargeting('pos', ['mv5']).addService(googletag.pubads());
      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 102]], 'div-gpt-ad-mv6')
        .setTargeting('pos', ['mv6']).addService(googletag.pubads());
      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 102]], 'div-gpt-ad-mv7')
        .setTargeting('pos', ['mv7']).addService(googletag.pubads());
      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 102]], 'div-gpt-ad-mv8')
        .setTargeting('pos', ['mv8']).addService(googletag.pubads());
      googletag.defineSlot('/199043128/LuxResidence/Achat_Page-de-liste', [[300, 102]], 'div-gpt-ad-mv9')
        .setTargeting('pos', ['mv9']).addService(googletag.pubads());

      googletag.pubads().enableSingleRequest();
      googletag.pubads().collapseEmptyDivs();

      googletag.enableServices();
    });

    unloadGoogleTagBuffer();
  }

  pushAdAdvs();
</script>    <!--fin googletagservices-->
    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- AB Tasty -->
    <script type="text/javascript" src="//try.abtasty.com/1eb904b9aa4e20a1322c982c49d91503.js"></script>

  <script>(window.BOOMR_mq=window.BOOMR_mq||[]).push(["addVar",{"rua.upush":"false","rua.cpush":"false","rua.upre":"false","rua.cpre":"false","rua.uprl":"false","rua.cprl":"false","rua.cprf":"false","rua.trans":"","rua.cook":"false","rua.ims":"false","rua.ufprl":"false","rua.cfprl":"false"}]);</script>
  <script>!function(){function o(n,i){if(n&&i)for(var r in i)i.hasOwnProperty(r)&&(void 0===n[r]?n[r]=i[r]:n[r].constructor===Object&&i[r].constructor===Object?o(n[r],i[r]):n[r]=i[r])}try{var n=decodeURIComponent("");if(n.length>0&&window.JSON&&"function"==typeof window.JSON.parse){var i=JSON.parse(n);void 0!==window.BOOMR_config?o(window.BOOMR_config,i):window.BOOMR_config=i}}catch(r){window.console&&"function"==typeof window.console.error&&console.error("mPulse: Could not parse configuration",r)}}();</script>
  <script>!function(a){var e="https://s.go-mpulse.net/boomerang/",t="addEventListener";if("False"=="True")a.BOOMR_config=a.BOOMR_config||{},a.BOOMR_config.PageParams=a.BOOMR_config.PageParams||{},a.BOOMR_config.PageParams.pci=!0,e="https://s2.go-mpulse.net/boomerang/";if(window.BOOMR_API_key="66N4L-G438S-AB33S-X2346-6PDP4",function(){function n(e){a.BOOMR_onload=e&&e.timeStamp||(new Date).getTime()}if(!a.BOOMR||!a.BOOMR.version&&!a.BOOMR.snippetExecuted){a.BOOMR=a.BOOMR||{},a.BOOMR.snippetExecuted=!0;var i,o,_,r=document.createElement("iframe");if(a[t])a[t]("load",n,!1);else if(a.attachEvent)a.attachEvent("onload",n);r.src="javascript:void(0)",r.title="",r.role="presentation",(r.frameElement||r).style.cssText="width:0;height:0;border:0;display:none;",_=document.getElementsByTagName("script")[0],_.parentNode.insertBefore(r,_);try{o=r.contentWindow.document}catch(O){i=document.domain,r.src="javascript:var d=document.open();d.domain='"+i+"';void(0);",o=r.contentWindow.document}o.open()._l=function(){var a=this.createElement("script");if(i)this.domain=i;a.id="boomr-if-as",a.src=e+"66N4L-G438S-AB33S-X2346-6PDP4",BOOMR_lstart=(new Date).getTime(),this.body.appendChild(a)},o.write("<bo"+'dy onload="document._l();">'),o.close()}}(),"".length>0)if(a&&"performance"in a&&a.performance&&"function"==typeof a.performance.setResourceTimingBufferSize)a.performance.setResourceTimingBufferSize();!function(){if(BOOMR=a.BOOMR||{},BOOMR.plugins=BOOMR.plugins||{},!BOOMR.plugins.AK){var e=""=="true"?1:0,t="",n="k3xhgz24ppwhuxufykpq-f-994c54531-clientnsv4-s.akamaihd.net",i={"ak.v":"26","ak.cp":"407005","ak.ai":parseInt("255930",10),"ak.ol":"0","ak.cr":5,"ak.ipv":4,"ak.proto":"","ak.rid":"379c56cc","ak.r":36990,"ak.a2":e,"ak.m":"j","ak.n":"essl","ak.bpcip":"86.238.115.0","ak.cport":54168,"ak.gh":"92.123.236.118","ak.quicv":"","ak.tlsv":"tls1.3","ak.0rtt":"","ak.csrc":"-","ak.acc":"reno","ak.t":"1585824415","ak.ak":"hOBiQwZUYzCg5VSAfCLimQ==1ulvY1aXFGg0+dNIN6ylj1/3eRRMB0PppnTTgMJxgdffXRRq6B8PIKr1xzo/e7MN38tHHLZGVy4wORTGyQoecKaHoNtEHU/q+HChzYjZk5uiAr+FXLgm5Jg7Fyzxmo5SU0WCV1Q4OC7AedPL3MBNgy+EatiFUAEncx5TZJ4Hzkwjlfn5ImatHtgVOJhoZwXkmFkLL0jB8cKSEmXgG1+tag7Fp2R/VJBkr1y22nD+q8dkAkLew5I3bGiu3hw+gpGlMpFqUYfzhUz43QASz3vlXkckwA3goJvALMdpCeDIlZ6Bi7llsPAMFsTljSVJ9d0Wo7fgiJtHc7XRqjWL1kfZ77Ul0tTYKl/Yc9aZQ8J+qHQH2B6kTBfRBGZyKkSYoQOxPh9Kv5pVF//yPWzXgr+zuQqTAwUOPDcaK5/xzk4r+n0="};if(""!==t)i["ak.ruds"]=t;var o={i:!1,av:function(e){var t="http.initiator";if(e&&(!e[t]||"spa_hard"===e[t]))i["ak.feo"]=void 0!==a.aFeoApplied?1:0,BOOMR.addVar(i)},rv:function(){var a=["ak.bpcip","ak.cport","ak.cr","ak.csrc","ak.gh","ak.ipv","ak.m","ak.n","ak.ol","ak.proto","ak.quicv","ak.tlsv","ak.0rtt","ak.r","ak.acc","ak.t"];BOOMR.removeVar(a)}};BOOMR.plugins.AK={akVars:i,akDNSPreFetchDomain:n,init:function(){if(!o.i){var a=BOOMR.subscribe;a("before_beacon",o.av,null,null),a("onbeacon",o.rv,null,null),o.i=!0}return this},is_complete:function(){return!0}}}}()}(window);</script></head>
<body id="pl" >
<!--[if (IE) ]><div id="IE"><![endif]-->

<!--Xiti-->
<script type="text/javascript">
  <!--

  xtnv = document;
  xtsd = "https://logs";
  xtsite = "251650";
  xtcustom = {
    "device": "desktop"
  };
  xtn2 = "9";
  xtpage = "Liste_de_resultats::Liste_de_resultats_Vente_1";
  xtdi = "";
  xt_multc = "&x1=1&x2=1&x3=&x4=1&x5=FR&x6=1&x7=100&x8=&x10=&x11=1&x13=";
  xt_at = "";
  xt_ac = "";
    //-->

  //console.log("start cookie consent");

  function myPushThorEvent(event, dataLayer) {
    if (window.cookieConsent !== undefined) {
      //console.log("myPushThorEvent: CookieConsent.getInstance().pushThorEvent", dataLayer);
      //console.log(window.dataLayer);
      CookieConsent.getInstance().pushThorEvent(event, dataLayer);
    } else {
      //console.log("myPushThorEvent: setTimeout(myPushThorEvent, 500, event, dataLayer)");
      setTimeout(myPushThorEvent, 500, event, dataLayer);
    }
  }

  //console.log("end cookie consent");
  // CookieConsent.debug(); -> DEBUG: Use it in navigator's console.

  // Gestion Publicite par google tag
  window.myGoogleTagBuffer = [];

  function unloadGoogleTagBuffer() {
    window.myGoogleTagBuffer.map(
      (func) => googletag.cmd.push(func)
    );
  }

  // Page View Hit
  myPushThorEvent('view', {"level2":9,"chapter1":"Liste_de_resultats","chapter2":"","chapter3":"","pageLabel":"Liste_de_resultats_Vente_1","pageType":"1","language":1,"products":[{"idannonce":"41E19C7E-A0E4-8015-78D8-8944701A2039","price":1290000},{"idannonce":"FF690996-76EF-9652-0566-739AE3FB512C","price":1950000},{"idannonce":"3B2A978A-AD44-78DF-2A29-81D454E9E28B","price":5775000},{"idannonce":"99C3E00C-9035-2775-4613-8DFD982CAA16","price":2600000},{"idannonce":"79D31D1A-E92A-A281-7E79-D58D564C3385","price":3500000},{"idannonce":"E1E975EB-FBA3-9CEC-712C-ED354C3959FC","price":4800000},{"idannonce":"20776965-4042-8799-2155-77A59FE55F0D","price":1990000},{"idannonce":"BC821A2B-FA54-4F5E-082B-285240A245AA","price":2880000},{"idannonce":"0F9F775A-DDDC-C21B-9721-319C806AE397","price":2855000},{"idannonce":"D3FC98BE-CB34-90CF-344C-410EE1C05962","price":3690000},{"idannonce":"C7E1D863-22B4-EB34-AC8F-C7AB73019196","price":5950000},{"idannonce":"3092EFAB-7BFE-C023-8030-2F688F5C8B52","price":2580000}],"transactionType":1,"localite":[{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"},{"country":"FR","region":"75000","department":"75","postalcode":"75016"}],"propertyType":"","budget":"","diffusionSupport":5,"uploadDate":"","agency":"","siteLayout":"desktop","publisher":[{"campaignId":"1","creation":"73129636","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73447016","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73754017","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73240536","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73039587","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73123183","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73240535","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73090438","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73037829","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73129619","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73039586","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"},{"campaignId":"1","creation":"73061359","variant":"","format":"","generalPlacement":"LUX","detailedPlacement":"010101","advertiserId":"RC-632272"}]});
</script>
<!--/Xiti-->


  

<header id="head" class="container">
<div class="navHeader">
    <button type="button" class="navmob-btn mob" data-toggle="collapse" data-target="#wrap"><span class="isprite hamburger"></span></button><!--
    --><a class="logo mob" href="https://www.lux-residence.com/fr/vente.php"><img src="/v5/img/logo.png" alt="lux-residence.com" title="lux-residence.com" /></a><!--
    --><a class="logo_lux mob-hid" href="https://www.lux-residence.com/fr/vente.php"></a><!--
    --><div class="brand">
        <p class="baseline mob-hid">The ultimate real estate</p>
                <p class="ad-num mob-hid fr"><span>37 236 </span> annonces immobilières de prestige</p>
            </div><!--
    --><nav class="navtop mob-hid">
        <ul class="actions">
            <li><span class="isprite i-book"></span>
                <a class="agencyCustomLink" title="Nos agences" data-customlink="https://www.lux-residence.com/fr/agences/PARIS" href="https://www.lux-residence.com/fr/agences/PARIS">Nos agences</a>
            </li><!--
            --><li><span class="badge mySelectionCounter">0</span><span class="isprite i-like"></span>
                <a title="Votre sélection" data-href="https://www.lux-residence.com/fr/my-selection" href="" class ="header-my-selection">                Votre sélection                </a>                 </li><!--
            --><li id="flaglist">
                <div class="selectimg">
                    <div class="dropdown">
                        <p class="selectitle"><span class="selected-p">Fr</span></p>
                        <img class="selected-img" src="/v5/img/icons/flag-fr@2x.png" width="19" alt="">
                        <a class="dropdown-toggle" data-toggle="dropdown" href="#"><span class="isprite ch-sm-dn"></span></a> 
                        <ul class="dropdown-menu">                           
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/en/real-estate-listings/sale/luxury-real-estate-PARIS.php/?currency=EUR&sort=date_desc"><input type="radio" id="elmt1" name="selectimg"  ><label for="elmt1"><span>En</span><img src="/v5/img/icons/flag-en@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS.php/?currency=EUR&sort=date_desc"><input type="radio" id="elmt2" name="selectimg" checked="checked" ><label for="elmt2"><span>Fr</span><img src="/v5/img/icons/flag-fr@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/it/annunci/vendita/immobili-di-lusso-PARIGI.php/?currency=EUR&sort=date_desc"><input type="radio" id="elmt3" name="selectimg"  ><label for="elmt3"><span>It</span><img src="/v5/img/icons/flag-it@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/de/inserate/verkauf/Prestige-Immobilien-PARIS.php/?currency=EUR&sort=date_desc"><input type="radio" id="elmt4" name="selectimg"  ><label for="elmt4"><span>De</span><img src="/v5/img/icons/flag-de@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/nl/advertenties/verkoop/prestige-vastgoed-PARIJS.php/?currency=EUR&sort=date_desc"><input type="radio" id="elmt5" name="selectimg"  ><label for="elmt5"><span>Nl</span><img src="/v5/img/icons/flag-nl@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/ru/obyavleniya/prodaja/prestijnaya-nedvijimost-%D0%9F%D0%90%D0%A0%D0%98%D0%96.php/?currency=EUR&sort=date_desc"><input type="radio" id="elmt6" name="selectimg"  ><label for="elmt6"><span>Ru</span><img src="/v5/img/icons/flag-ru@2x.png" alt=""></label></a></li>
                                                    </ul>
                    </div>
                </div>
            </li>
        </ul>
    </nav>
    <div class="icons-actions mob">
        <div class="lang">
            <div class="selectflag">
                <div class="dropdown">
                    <a class="dropdown-toggle" data-toggle="dropdown" href="#"><img class="selected-img" src="/v5/img/icons/flag-fr@2x.png" alt=""></a>
                    <ul class="dropdown-menu">
                                                    <li><a class="lang-selector-link" href="https://www.lux-residence.com/en/real-estate-listings/sale/luxury-real-estate-PARIS.php/?currency=EUR&sort=date_desc"><input type="radio" id="elm1" name="selectflag" ><label for="elm1"><span>En</span><img src="/v5/img/icons/flag-en@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS.php/?currency=EUR&sort=date_desc"><input type="radio" id="elm2" name="selectflag" checked="checked"><label for="elm2"><span>Fr</span><img src="/v5/img/icons/flag-fr@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/it/annunci/vendita/immobili-di-lusso-PARIGI.php/?currency=EUR&sort=date_desc"><input type="radio" id="elm3" name="selectflag" ><label for="elm3"><span>It</span><img src="/v5/img/icons/flag-it@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/de/inserate/verkauf/Prestige-Immobilien-PARIS.php/?currency=EUR&sort=date_desc"><input type="radio" id="elm4" name="selectflag" ><label for="elm4"><span>De</span><img src="/v5/img/icons/flag-de@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/nl/advertenties/verkoop/prestige-vastgoed-PARIJS.php/?currency=EUR&sort=date_desc"><input type="radio" id="elm5" name="selectflag" ><label for="elm5"><span>Nl</span><img src="/v5/img/icons/flag-nl@2x.png" alt=""></label></a></li>
                                                        <li><a class="lang-selector-link" href="https://www.lux-residence.com/ru/obyavleniya/prodaja/prestijnaya-nedvijimost-%D0%9F%D0%90%D0%A0%D0%98%D0%96.php/?currency=EUR&sort=date_desc"><input type="radio" id="elm6" name="selectflag" ><label for="elm6"><span>Ru</span><img src="/v5/img/icons/flag-ru@2x.png" alt=""></label></a></li>
                                                </ul>
                </div>
            </div>
        </div><!--
        --><span class="sep1"></span><!--
        --><div class="like">
            <a class="header-my-selection" title="Votre sélection" data-href="https://www.lux-residence.com/fr/my-selection"  href="">                <span class="badge mySelectionCounter">0</span><img src="/v5/img/icons/like@2x.png" alt="">
                </a>        </div>
    </div>
    <div id="wrap" class="collapse width">
        <div id="navmob">
            <ul class="mob-actions">
                <li><p><span class="badge mySelectionCounter">0</span><span class="isprite i-like"></span></p><a data-href="https://www.lux-residence.com/fr/my-selection" href="" class ="header-my-selection">Votre sélection</a></li>
                <li><p><span class="isprite i-book"></span></p>
                <a class="agencyCustomLink" title="Nos agences" data-customlink="https://www.lux-residence.com/fr/agences/PARIS" href="https://www.lux-residence.com/fr/agences/PARIS">Nos agences</a>
                </li>
            </ul>
            <a class="btn btn-default" href="https://www.lux-residence.com/fr/email-alert"><span class="isprite alert"></span>Alerte email</a>
        </div>
    </div>
</div>
</header>
<aside class="noticeBar" id="noticeBar">
    <p class='message'>
        Même à la maison, les équipes Lux-Residence et les professionnels de l'immobilier sont tous mobilisés à votre service.        <br />
        Prenez soin de vous. 💙    </p>
    <span class='closeBtn' id="closeNoticeBarBtn">
      Fermer    </span>
    <script>
      function initElement() {
        var covidMsg = sessionStorage['covidMsg'];
        if(covidMsg) {
          noticeBar.classList.add('hide');
        }

        var closedCTA = document.getElementById("closeNoticeBarBtn");
        closedCTA.onclick = closedNoticeBar;
      }

      function closedNoticeBar() {
        var noticeBar = document.getElementById("noticeBar");
        noticeBar.classList.add('hide');

        sessionStorage['covidMsg'] = true;
      }

      initElement();
    </script>
</aside>
<script>
   window.cur = "EUR";
   //localités pour le préremplissage du champ localité multi ville
    window.locs = ["PARIS"];
   // transaction 
   window.transaction = 'sale';
   // rentType
   window.rentType = '';
   // propertyTypes;
   window.propertyTypes = [];
</script>

<script>
window.priceRanges ={"EUR":{"min":{"0.5":"500.000","0.75":"750.000","1":"1.000.000","1.5":"1.500.000","2":"2.000.000","3":"3.000.000","4":"4.000.000","6":"6.000.000","8":"8.000.000","11":"11.000.000","15":"15.000.000","20":"20.000.000","25":"25.000.000","35":"35.000.000"},"max":{"0.75":"750.000","1":"1.000.000","1.5":"1.500.000","2":"2.000.000","3":"3.000.000","4":"4.000.000","6":"6.000.000","8":"8.000.000","11":"11.000.000","15":"15.000.000","20":"20.000.000","25":"25.000.000","35":"35.000.000","999":"> 35.000.000"}},"CHF":{"min":{"0.5":"593.800","0.75":"890.700","1":"1.187.600","1.5":"1.781.400","2":"2.375.200","3":"3.562.800","4":"4.750.400","6":"7.125.600","8":"9.500.800","11":"13.063.600","15":"17.814.000","20":"23.752.000","25":"29.690.000","35":"41.566.000"},"max":{"0.75":"890.700","1":"1.187.600","1.5":"1.781.400","2":"2.375.200","3":"3.562.800","4":"4.750.400","6":"7.125.600","8":"9.500.800","11":"13.063.600","15":"17.814.000","20":"23.752.000","25":"29.690.000","35":"41.566.000","999":"> 41.566.000"}},"GBP":{"min":{"0.5":"432.350","0.75":"648.525","1":"864.700","1.5":"1.297.050","2":"1.729.400","3":"2.594.100","4":"3.458.800","6":"5.188.200","8":"6.917.600","11":"9.511.700","15":"12.970.500","20":"17.294.000","25":"21.617.500","35":"30.264.500"},"max":{"0.75":"648.525","1":"864.700","1.5":"1.297.050","2":"1.729.400","3":"2.594.100","4":"3.458.800","6":"5.188.200","8":"6.917.600","11":"9.511.700","15":"12.970.500","20":"17.294.000","25":"21.617.500","35":"30.264.500","999":"> 30.264.500"}},"USD":{"min":{"0.5":"613.300","0.75":"919.950","1":"1.226.600","1.5":"1.839.900","2":"2.453.200","3":"3.679.800","4":"4.906.400","6":"7.359.600","8":"9.812.800","11":"13.492.600","15":"18.399.000","20":"24.532.000","25":"30.665.000","35":"42.931.000"},"max":{"0.75":"919.950","1":"1.226.600","1.5":"1.839.900","2":"2.453.200","3":"3.679.800","4":"4.906.400","6":"7.359.600","8":"9.812.800","11":"13.492.600","15":"18.399.000","20":"24.532.000","25":"30.665.000","35":"42.931.000","999":"> 42.931.000"}}};
</script>

<section id="ad-head">
    <div class="searchrecap">
    
        <div class="container">
            <div class="row mob-hid">
                <div class="col-sm-7 col-md-10 col-lg-10 searchbox" >

                    <p class="top">Votre recherche :</p><!--

                    --><div class="search-form sf-5">
                        <div class="filter">
                            <a id="myTabDrop1" class="dropdown-toggle" data-toggle="dropdown" href="#" aria-controls="myTabDrop1-contents">Vente<span class="isprite ch-dn"></span></a>
                            <ul id="myTabDrop1-contents" class="dropdown-menu dropsel3" aria-labelledby="myTabDrop1" role="tablist">
                                <li class="active" ><a href="#tabs-1" id="tab-trigger1" aria-controls="tabs-1" role="tab" data-toggle="tab">Vente</a></li>
                                <li  ><a href="#tabs-2" id="tab-trigger2" aria-controls="tabs-2" role="tab" data-toggle="tab">Location</a></li>
                            </ul>
                        </div>
                    </div>


                    <div id="tabs-1" role="tabpanel" class="tab-pane active" aria-labelledby="tab-trigger1">

                        <form method="post" action="" id="searchVente" class="searchPrefill">
                            <div class="search-form sf-1">
                                <div class="loc-box"><span class="isprite i-drop"></span></div><!--
                                --><textarea id="autotags3" rows="1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"
                                             placeholder="Ajouter une localité" class="tagged-text-area"></textarea>
                            </div><!--

                            --><div class="search-form sf-2">
                                <div class="dropdown">
                                    <select id="typesearch" multiple="multiple" tabindex="-1">
                                                                                    <option value="p"  >Propriété / Villa</option>
                                                                                    <option value="hp"  >Hôtel particulier</option>
                                                                                    <option value="an"  >Appartement neuf</option>
                                                                                    <option value="a"  >Appartement</option>
                                                                                    <option value="l"  >Loft</option>
                                                                                    <option value="ct"  >Château / Manoir</option>
                                                                                    <option value="pv"  >Propriété équestre et viticole</option>
                                                                                    <option value="cl"  >Chalet</option>
                                                                                    <option value="t"  >Terrain</option>
                                                                                    <option value="y"  >Yacht</option>
                                                                                    <option value="b"  >Bastide</option>
                                                                                    <option value="i"  >Immeuble</option>
                                                                            </select>
                                </div>
                            </div><!--

                            --><div class="search-form sf-3 prices-desktop">
                                <div class="filter">
                                    <a class="dropdown-toggle" data-toggle="dropdown" href="#"><span class="text">Prices</span><span class="isprite ch-dn"></span></a>
                                    <ul class="dropdown-menu dropsel3">
                                        <li class="mn-li">
                                            <div class="selbox-wrap wp1">
                                                <select id="selectbox1" >
                                                    <option value="">Prix min.</option>
                                                                                                            <option " value='0.5'></option>
                                                                                                            <option " value='0.75'></option>
                                                                                                            <option " value='1'></option>
                                                                                                            <option " value='1.5'></option>
                                                                                                            <option " value='2'></option>
                                                                                                            <option " value='3'></option>
                                                                                                            <option " value='4'></option>
                                                                                                            <option " value='6'></option>
                                                                                                            <option " value='8'></option>
                                                                                                            <option " value='11'></option>
                                                                                                            <option " value='15'></option>
                                                                                                            <option " value='20'></option>
                                                                                                            <option " value='25'></option>
                                                                                                            <option " value='35'></option>
                                                                                                    </select>
                                            </div><!--
                                            --><p class="uslss">-</p><!--
                                            --><div class="selbox-wrap wp2">
                                                <select id="selectbox2" >
                                                    <option value="">Prix max.</option>
                                                                                                            <option  value='0.75'></option>
                                                                                                            <option  value='1'></option>
                                                                                                            <option  value='1.5'></option>
                                                                                                            <option  value='2'></option>
                                                                                                            <option  value='3'></option>
                                                                                                            <option  value='4'></option>
                                                                                                            <option  value='6'></option>
                                                                                                            <option  value='8'></option>
                                                                                                            <option  value='11'></option>
                                                                                                            <option  value='15'></option>
                                                                                                            <option  value='20'></option>
                                                                                                            <option  value='25'></option>
                                                                                                            <option  value='35'></option>
                                                                                                    </select>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </div><!--

                            --><div class="search-form sf-4">
                                <div class="filter">
                                    <a class="dropdown-toggle" data-toggle="dropdown" href="#">€<span class="isprite ch-dn"></span></a>
                                    <ul class="dropdown-menu dropsel3">
                                                                                    <li><a cur="EUR">€</a></li>
                                                                                    <li><a cur="GBP">£</a></li>
                                                                                    <li><a cur="CHF">CHF</a></li>
                                                                                    <li><a cur="USD">$</a></li>
                                                                            </ul>
                                </div>
                            </div><!--

                            --><input type="submit" class="btn btn-default" value="Rechercher" /> 
                        </form>
                    </div>


                    <div id="tabs-2" role="tabpanel" class="tab-pane " aria-labelledby="tab-trigger2">
                        <form method="post" action="" id="searchLoc">

                            <div class="search-form sf-1">
                                <div class="loc-box"><span class="isprite i-drop"></span></div><!--
                                    --><textarea id="autotags3" class="tagged-text-area" rows="1"
                                                 autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"
                                                 placeholder="Ajouter une localité"></textarea>
                            </div><!--
                            --><div class="search-form sf-2 loc">
                                <div class="dropdown">
                                    <select id="typesearch" multiple="multiple" tabindex="-1">
                                                                                    <option value="p"  >Propriété</option>
                                                                                    <option value="hp"  >Hôtel particulier</option>
                                                                                    <option value="a"  >Appartement</option>
                                                                                    <option value="ct"  >Château / Manoir</option>
                                                                                    <option value="cl"  >Chalet</option>
                                                                                    <option value="y"  >Yacht</option>
                                                                                    <option value="b"  >Bastide</option>
                                                                            </select>
                                </div>
                            </div><!--
                            --><div class="search-form sf-3 loc">
                                <div class="filter">
                                    <a class="dropdown-toggle rentTypeSelector" data-toggle="dropdown" href="#">Type de location<span class="isprite ch-dn"></span></a>
                                    <ul class="dropdown-menu dropsel3">
                                        <li><a href="#">Type de location</a></li>
                                        <li><a class="rentType" rentType="holiday" href="#">Saisonnière</a></li>
                                        <li><a class="rentType" rentType="longterm" href="#">Longue durée</a></li>
                                    </ul>
                                </div>
                            </div><!--

                            --><input type="submit" class="btn btn-default" value="Rechercher" />
                        </form>
                    </div>
                </div>
            </div>




            <!-- ./ row -->
            <div class="row mob">
                <div class="col-xs-12 col-sm-12 searchbox">
                    <a class="back" href="https://www.lux-residence.com/fr/vente.php"><span class="isprite ch-bk-lsm"></span></a><!--
                        --><div class="panel-group">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="panel-title top">
                                    <a class="opn" data-toggle="collapse" href="#srch1"><span class="info-1">Votre recherche vente</span><span class="isprite ch-bk-dsm"></span></a>
                                </div>
                            </div>
                            <div id="srch1" class="panel-collapse collapse">



                                <div class="panel-body">

                                    <div class="search-form sf-5">
                                        <div class="filter">
                                            <a class="dropdown-toggle" data-toggle="dropdown" href="#">Vente<span class="isprite ch-dn"></span></a>
                                            <ul class="dropdown-menu dropsel3" role="tablist">
                                                <li class="active"><a href="#tabs-12" aria-controls="tabs-12" role="tab" data-toggle="tab">Vente</a></li>
                                                <li ><a href="#tabs-11" aria-controls="tabs-11" role="tab" data-toggle="tab">Location</a></li>
                                            </ul>
                                        </div>
                                    </div>

                                    <div class="tab-pane " role="tabpanel" id="tabs-11">

                                        <form method="get" action="" id="searchMob01">
                                            <div class="search-form sf-1">
                                                <div class="loc-box"><span class="isprite i-drop"></span></div><!--
                                                --><textarea id="autotags3" class="tagged-text-area-mobile" rows="1"
                                                             autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"
                                                             placeholder="Ajouter une localité"></textarea>
                                            </div><!--
                                            --><div id="search-2" class="search-form sf-2">
                                                <div class="dropdown">
                                                    <select id="typesearch" multiple="multiple">
                                                                                                                    <option value="p"  >Propriété</option>
                                                                                                                    <option value="hp"  >Hôtel particulier</option>
                                                                                                                    <option value="a"  >Appartement</option>
                                                                                                                    <option value="ct"  >Château / Manoir</option>
                                                                                                                    <option value="cl"  >Chalet</option>
                                                                                                                    <option value="y"  >Yacht</option>
                                                                                                                    <option value="b"  >Bastide</option>
                                                                                                            </select>
                                                </div>
                                            </div><!--
                                            --><div class="search-form sf-3 loc">
                                                <div class="filter">
                                                    <a class="dropdown-toggle rentTypeSelector" data-toggle="dropdown" href="#">Type de location<span class="isprite ch-dn"></span></a>
                                                    <ul class="dropdown-menu dropsel3">
                                                        <li><a class="rentType" rentType="rent" href="#">Type de location</a></li>
                                                        <li><a class="rentType" rentType="holiday" href="#">Saisonnière</a></li>
                                                        <li><a class="rentType" rentType="longterm" href="#">Longue durée</a></li>
                                                    </ul>
                                                </div>
                                            </div><!--
                                            --><input type="submit" class="btn btn-default x-btn" value="Rechercher" />
                                        </form>
                                    </div>




                                    <div class="tab-pane active" role="tabpanel" id="tabs-12">
                                        <form method="get" action="" id="searchMob02">
                                            <div class="search-form sf-1">
                                                <div class="loc-box"><span class="isprite i-drop"></span></div><!--
                                                --><textarea id="autotags3" class="tagged-text-area-mobile" rows="1"
                                                             autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"
                                                             placeholder="Ajouter une localité"></textarea>
                                            </div><!--
                                                    --><div class="search-form sf-2">
                                                <div class="dropdown">
                                                    <select id="typesearch" multiple="multiple">
                                                                                                                    <option value="p"  >Propriété / Villa</option>
                                                                                                                    <option value="hp"  >Hôtel particulier</option>
                                                                                                                    <option value="an"  >Appartement neuf</option>
                                                                                                                    <option value="a"  >Appartement</option>
                                                                                                                    <option value="l"  >Loft</option>
                                                                                                                    <option value="ct"  >Château / Manoir</option>
                                                                                                                    <option value="pv"  >Propriété équestre et viticole</option>
                                                                                                                    <option value="cl"  >Chalet</option>
                                                                                                                    <option value="t"  >Terrain</option>
                                                                                                                    <option value="y"  >Yacht</option>
                                                                                                                    <option value="b"  >Bastide</option>
                                                                                                                    <option value="i"  >Immeuble</option>
                                                                                                            </select>
                                                </div>
                                            </div><!--

                                            --><div class="search-form sf-3 prices-mobile">
                                                <div class="filter">
                                                    <a class="dropdown-toggle" data-toggle="dropdown" href="#"><span class="text">Prices</span><span class="isprite ch-dn"></span></a>
                                                    <ul class="dropdown-menu dropsel3">
                                                        <li class="mn-li">
                                                            <div class="selbox-wrap wp1">
                                                                <select id="selectbox1" class="selectbox1-mobile" >
                                                                    <option value="">Prix min.</option>
                                                                                                                                            <option  value='0.5'></option>
                                                                                                                                            <option  value='0.75'></option>
                                                                                                                                            <option  value='1'></option>
                                                                                                                                            <option  value='1.5'></option>
                                                                                                                                            <option  value='2'></option>
                                                                                                                                            <option  value='3'></option>
                                                                                                                                            <option  value='4'></option>
                                                                                                                                            <option  value='6'></option>
                                                                                                                                            <option  value='8'></option>
                                                                                                                                            <option  value='11'></option>
                                                                                                                                            <option  value='15'></option>
                                                                                                                                            <option  value='20'></option>
                                                                                                                                            <option  value='25'></option>
                                                                                                                                            <option  value='35'></option>
                                                                                                                                    </select>
                                                            </div><!--
                                                            --><p class="uslss">-</p><!--
                                                            --><div class="selbox-wrap wp2">
                                                                <select id="selectbox2" class="selectbox2-mobile">
                                                                    <option value="">Prix max.</option>
                                                                                                                                            <option  value='0.75'></option>
                                                                                                                                            <option  value='1'></option>
                                                                                                                                            <option  value='1.5'></option>
                                                                                                                                            <option  value='2'></option>
                                                                                                                                            <option  value='3'></option>
                                                                                                                                            <option  value='4'></option>
                                                                                                                                            <option  value='6'></option>
                                                                                                                                            <option  value='8'></option>
                                                                                                                                            <option  value='11'></option>
                                                                                                                                            <option  value='15'></option>
                                                                                                                                            <option  value='20'></option>
                                                                                                                                            <option  value='25'></option>
                                                                                                                                            <option  value='35'></option>
                                                                                                                                    </select>
                                                            </div>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div><!--

                                            --><div class="search-form sf-4">
                                                <div class="filter">
                                                    <a class="dropdown-toggle" data-toggle="dropdown" href="#">€<span class="isprite ch-dn"></span></a>
                                                    <ul class="dropdown-menu dropsel3">
                                                                                                                    <li><a cur="EUR">€</a></li>
                                                                                                                    <li><a cur="GBP">£</a></li>
                                                                                                                    <li><a cur="CHF">CHF</a></li>
                                                                                                                    <li><a cur="USD">$</a></li>
                                                                                                            </ul>
                                                </div>
                                            </div><!--
                                            --><input type="submit" class="btn btn-default x-btn" value="Rechercher" />
                                        </form>
                                    </div>

                                </div>


                            </div>
                        </div>
                    </div>
                </div><!--

                    --><div class="col-xs-12 results fr">

                    <div class="ads-num">
                        <div class="filter">

                                                            <div class="ulfil">
                                    <p style="margin-right:3px;">Trier par </p><a class="dropdown-toggle" data-toggle="dropdown" href="#"> Les plus récentes<span class="isprite ch-dn-br"></span></a><ul style="top:105%;" class="dropdown-menu dropsel" onchange="location = this.options[this.selectedIndex].value">
    <li ><a href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS.php/?currency=EUR&amp;sort=price_desc" >Prix décroissant</a></li>
    <li ><a href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS.php/?currency=EUR&amp;sort=price_asc" >Prix croissant</a></li>
    <li ><a href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS.php/?currency=EUR&amp;sort=date_desc" >Les plus récentes</a></li>
</ul>
                                </div><!--
                                        --><a class="a-alert fr" href="https://www.lux-residence.com/fr/email-alert"><span class="isprite alert-br"></span>Créer une alerte</a>
                            
                        </div>
                    </div>
                </div>
            </div>
            <!-- ./ row -->
            <div class="epub mob-hid">
                <div id="oas_Right" >
                    <div class='' id='div-gpt-ad-pave-haut'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-pave-haut');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
                </div>
            </div>
        </div>
        <!-- ./ container -->
    </div>
    <div class="container">
        <div class="row">
            <div id="prod-left" class="col-md-12 col-lg-8">


                <ul class="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList">
                     
<li class = "breadcrumb-1" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
<a class = "" href="https://www.lux-residence.com/fr/vente.php" title="Accueil" itemprop="item"><span itemprop="name">Accueil</span></a>
        <meta itemprop="position" content="1" />
        </li>
 
<li class = "breadcrumb-2" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
<a class = "" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-ILE+DE+FRANCE.php" title="ILE DE FRANCE" itemprop="item"><span itemprop="name">ILE DE FRANCE</span></a>
        <meta itemprop="position" content="2" />
        </li>
 
<li class = "breadcrumb-3" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
<span itemprop="name">Immobilier de luxe PARIS</span>      	
      	<meta itemprop="position" content="3" />
</li>
                </ul>
                <!--
                                --><div class="results">

                    <div class="ads-num col-xs-6 col-md-6 col-lg-6">
                                                    <h1 class="annonces">1197 biens de luxe à vendre PARIS</h1>
                            <div class="filter mob-hid">
                                <p style="margin-right:3px;">Trier par </p><a class="dropdown-toggle" data-toggle="dropdown" href="#"> Les plus récentes<span class="isprite ch-dn-br"></span></a><ul style="top:105%;" class="dropdown-menu dropsel" onchange="location = this.options[this.selectedIndex].value">
    <li ><a href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS.php/?currency=EUR&amp;sort=price_desc" >Prix décroissant</a></li>
    <li ><a href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS.php/?currency=EUR&amp;sort=price_asc" >Prix croissant</a></li>
    <li ><a href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS.php/?currency=EUR&amp;sort=date_desc" >Les plus récentes</a></li>
</ul>                            </div>
                                            </div>

                    <div class="mob-hid col-xs-6 col-md-6 col-lg-6">
                        <a class="btn btn-default" href="https://www.lux-residence.com/fr/email-alert"><span class="isprite alert"></span>Créer une alerte pour cette recherche </a>
                    </div>

                </div>

            </div>
        </div>
    </div>
</section>
<!-- ./ ad-head -->
    <div class="popin-contact contactform-popup popin">
        <div class="ctt-full-popin">
            <a class="popin-close" href="#"></a>
            <div id="contact-popup-holder" class="contactform-popup-holder visible-contact-form-container">
                
            </div>
        </div>
</div>            <section id="prod-list" class="fr">
    <div class="container">
        <div id="pushMeaPlux"></div>
        <!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="41E19C7E-A0E4-8015-78D8-8944701A2039"
                        formUrl="https://www.lux-residence.com/fr/ad/form/41E19C7E-A0E4-8015-78D8-8944701A2039/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="41E19C7E-A0E4-8015-78D8-8944701A2039"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="41E19C7E-A0E4-8015-78D8-8944701A2039"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/41e/d/d85f87a6-5274-4143-9ec8-79f11b32ebd5.jpg" alt="Appartement de luxe à vendre PARIS 16E, 106 m², 3 Chambres, 1&nbsp;290&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/41e/d/d85f87a6-5274-4143-9ec8-79f11b32ebd5.jpg" alt="Appartement de luxe à vendre PARIS 16E, 106 m², 3 Chambres, 1&nbsp;290&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/41E19C7E-A0E4-8015-78D8-8944701A2039/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/41E19C7E-A0E4-8015-78D8-8944701A2039/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Auteuil</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        1&nbsp;290&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>106 m<sup>2</sup>					    </span>                             | <span>5 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3312043</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. Paris 16 - Michel Ange - étage - élevé - 3 chambres Dans un immeuble 1950, récemment ravalé, appartement de 106 m² au 4ème étage avec balcon. Il se compose d'une entrée ouvrant sur un double séjour de 31 m²,...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3312043</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/41E19C7E-A0E4-8015-78D8-8944701A2039/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/41E19C7E-A0E4-8015-78D8-8944701A2039/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="FF690996-76EF-9652-0566-739AE3FB512C"
                        formUrl="https://www.lux-residence.com/fr/ad/form/FF690996-76EF-9652-0566-739AE3FB512C/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="FF690996-76EF-9652-0566-739AE3FB512C"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="FF690996-76EF-9652-0566-739AE3FB512C"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/ff6/5/5d3dd252-021d-4f4f-b500-81cbc3c00470.jpg" alt="Appartement de luxe à vendre PARIS 16E, 118 m², 3 Chambres, 1&nbsp;950&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/ff6/5/5d3dd252-021d-4f4f-b500-81cbc3c00470.jpg" alt="Appartement de luxe à vendre PARIS 16E, 118 m², 3 Chambres, 1&nbsp;950&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/FF690996-76EF-9652-0566-739AE3FB512C/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/FF690996-76EF-9652-0566-739AE3FB512C/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Muette</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        1&nbsp;950&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>118 m<sup>2</sup>					    </span>                             | <span>4 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3621838</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. PARIS 16 - PASSY/MUETTE - APPARTEMENT FAMILIAL ETAGE ELEVE Paris 16 - Passy/Muette - Dans un immeuble de 1900, bel appartement traversant situé au 5ème étage avec un large balcon filant. Il se compose d'une entrée, d'un séjour, de 3...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3621838</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/FF690996-76EF-9652-0566-739AE3FB512C/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/FF690996-76EF-9652-0566-739AE3FB512C/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="3B2A978A-AD44-78DF-2A29-81D454E9E28B"
                        formUrl="https://www.lux-residence.com/fr/ad/form/3B2A978A-AD44-78DF-2A29-81D454E9E28B/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="3B2A978A-AD44-78DF-2A29-81D454E9E28B"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="3B2A978A-AD44-78DF-2A29-81D454E9E28B"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/3b2/7/76a7e5f8-2a99-48a6-8d1c-92cdf3990207.jpg" alt="Appartement de luxe à vendre PARIS 16E, 385 m², 6 Chambres, 5&nbsp;775&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/3b2/7/76a7e5f8-2a99-48a6-8d1c-92cdf3990207.jpg" alt="Appartement de luxe à vendre PARIS 16E, 385 m², 6 Chambres, 5&nbsp;775&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/3B2A978A-AD44-78DF-2A29-81D454E9E28B/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/3B2A978A-AD44-78DF-2A29-81D454E9E28B/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Muette</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        5&nbsp;775&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>385 m<sup>2</sup>					    </span>                             | <span>9 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> A-63113</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. PARIS 16 - PASSY / SQUARE ALBONI - DUPLEX DE PRESTIGE - 6 CHAMBRES Paris 16ème - Passy / Square Alboni- Situé au 5ème et 6ème étages d'un immeuble Art Déco 1913, duplex de 385 m² possédant une triple réception...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> A-63113</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/3B2A978A-AD44-78DF-2A29-81D454E9E28B/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/3B2A978A-AD44-78DF-2A29-81D454E9E28B/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<div class='geobCarousel '><ul class='carousel-inner'><li><div class='item' id='div-gpt-ad-mv1'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-mv1');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
</li><li><div class='item' id='div-gpt-ad-mv2'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-mv2');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
</li><li><div class='item' id='div-gpt-ad-mv3'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-mv3');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
</li></ul></div><!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="99C3E00C-9035-2775-4613-8DFD982CAA16"
                        formUrl="https://www.lux-residence.com/fr/ad/form/99C3E00C-9035-2775-4613-8DFD982CAA16/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="99C3E00C-9035-2775-4613-8DFD982CAA16"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="99C3E00C-9035-2775-4613-8DFD982CAA16"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/99c/3/3a87a15e-0e05-4414-a686-68f903c67552.jpg" alt="Appartement de luxe à vendre PARIS 16E, 191 m², 3 Chambres, 2&nbsp;600&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/99c/3/3a87a15e-0e05-4414-a686-68f903c67552.jpg" alt="Appartement de luxe à vendre PARIS 16E, 191 m², 3 Chambres, 2&nbsp;600&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/99C3E00C-9035-2775-4613-8DFD982CAA16/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/99C3E00C-9035-2775-4613-8DFD982CAA16/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Muette</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        2&nbsp;600&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>191 m<sup>2</sup>					    </span>                             | <span>5 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3404583</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. PARIS 16 - MUETTE - PAUL DOUMER - APPARTEMENT 3 CHAMBRES Paris 16 - Paul Doumer/Tour - Au 3ème étage d'un immeuble ancien, appartement de réception et familial. Il se compose, d'une entrée, d'un double séjour, d'une salle à manger,...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3404583</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/99C3E00C-9035-2775-4613-8DFD982CAA16/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/99C3E00C-9035-2775-4613-8DFD982CAA16/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="79D31D1A-E92A-A281-7E79-D58D564C3385"
                        formUrl="https://www.lux-residence.com/fr/ad/form/79D31D1A-E92A-A281-7E79-D58D564C3385/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="79D31D1A-E92A-A281-7E79-D58D564C3385"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="79D31D1A-E92A-A281-7E79-D58D564C3385"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/79d/b/b2b4814d-ee0d-421e-9c3c-b23c2786d921.jpg" alt="Appartement de luxe à vendre PARIS 16E, 251 m², 5 Chambres, 3&nbsp;500&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/79d/b/b2b4814d-ee0d-421e-9c3c-b23c2786d921.jpg" alt="Appartement de luxe à vendre PARIS 16E, 251 m², 5 Chambres, 3&nbsp;500&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/79D31D1A-E92A-A281-7E79-D58D564C3385/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/79D31D1A-E92A-A281-7E79-D58D564C3385/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Auteuil</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        3&nbsp;500&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement - Exclusivité                        </p>

                        PARIS 16E                         | <span>251 m<sup>2</sup>					    </span>                             | <span>7 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3477566</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. Paris 16- Assomption /Place Rodin - Duplex en rez de jardin Paris 16- Assomption / Place Rodin - Dans un ancien hôtel particulier 1930, très bel appartement en duplex récemment rénové avec terrasse et jardin. Beaux volumes, parquet, cheminée. Une...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3477566</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/79D31D1A-E92A-A281-7E79-D58D564C3385/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/79D31D1A-E92A-A281-7E79-D58D564C3385/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="E1E975EB-FBA3-9CEC-712C-ED354C3959FC"
                        formUrl="https://www.lux-residence.com/fr/ad/form/E1E975EB-FBA3-9CEC-712C-ED354C3959FC/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="E1E975EB-FBA3-9CEC-712C-ED354C3959FC"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="E1E975EB-FBA3-9CEC-712C-ED354C3959FC"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/e1e/4/4754f1a5-208c-412d-99a9-a37c1c8d2e17.jpg" alt="Appartement de luxe à vendre PARIS 16E, 298 m², 3 Chambres, 4&nbsp;800&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/e1e/4/4754f1a5-208c-412d-99a9-a37c1c8d2e17.jpg" alt="Appartement de luxe à vendre PARIS 16E, 298 m², 3 Chambres, 4&nbsp;800&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/E1E975EB-FBA3-9CEC-712C-ED354C3959FC/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/E1E975EB-FBA3-9CEC-712C-ED354C3959FC/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Muette</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        4&nbsp;800&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>298 m<sup>2</sup>					    </span>                             | <span>5 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3405065</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. Paris 16 - OCDE - Appartement - 3 chambres TRIANGLE D'OR DE LA MUETTE - Au coeur du quartier de l'OCDE, situé au troisième étage d'un immeuble art déco de grand standing, appartement de réception de 297 m². Il offre...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3405065</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/E1E975EB-FBA3-9CEC-712C-ED354C3959FC/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/E1E975EB-FBA3-9CEC-712C-ED354C3959FC/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<div class='geobCarousel '><ul class='carousel-inner'><li><div class='item' id='div-gpt-ad-mv4'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-mv4');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
</li><li><div class='item' id='div-gpt-ad-mv5'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-mv5');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
</li><li><div class='item' id='div-gpt-ad-mv6'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-mv6');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
</li></ul></div><!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="20776965-4042-8799-2155-77A59FE55F0D"
                        formUrl="https://www.lux-residence.com/fr/ad/form/20776965-4042-8799-2155-77A59FE55F0D/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="20776965-4042-8799-2155-77A59FE55F0D"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="20776965-4042-8799-2155-77A59FE55F0D"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/207/c/c374d11e-d75b-47c4-bef4-17f07104d716.jpg" alt="Appartement de luxe à vendre PARIS 16E, 128 m², 3 Chambres, 1&nbsp;990&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/207/c/c374d11e-d75b-47c4-bef4-17f07104d716.jpg" alt="Appartement de luxe à vendre PARIS 16E, 128 m², 3 Chambres, 1&nbsp;990&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/20776965-4042-8799-2155-77A59FE55F0D/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/20776965-4042-8799-2155-77A59FE55F0D/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Muette</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        1&nbsp;990&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>128 m<sup>2</sup>					    </span>                             | <span>5 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3459462</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. Paris 16 - La Muette / La Tour - Duplex avec Terrasse Duplex de 128 m², baigné de lumière, situé aux 6ème et 7ème étages d'un immeuble récent à proximité des écoles et des commerces. Le premier niveau, au 7ème...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3459462</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/20776965-4042-8799-2155-77A59FE55F0D/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/20776965-4042-8799-2155-77A59FE55F0D/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="BC821A2B-FA54-4F5E-082B-285240A245AA"
                        formUrl="https://www.lux-residence.com/fr/ad/form/BC821A2B-FA54-4F5E-082B-285240A245AA/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="BC821A2B-FA54-4F5E-082B-285240A245AA"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="BC821A2B-FA54-4F5E-082B-285240A245AA"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/bc8/b/b49e6325-9f33-4b7d-b8f5-dc0eeb01194a.jpg" alt="Appartement de luxe à vendre PARIS 16E, 180 m², 4 Chambres, 2&nbsp;880&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/bc8/b/b49e6325-9f33-4b7d-b8f5-dc0eeb01194a.jpg" alt="Appartement de luxe à vendre PARIS 16E, 180 m², 4 Chambres, 2&nbsp;880&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/BC821A2B-FA54-4F5E-082B-285240A245AA/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/BC821A2B-FA54-4F5E-082B-285240A245AA/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Auteuil</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        2&nbsp;880&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>180 m<sup>2</sup>					    </span>                             | <span>8 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3314840</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. Paris 16ème - Duplex familial - Terrasse/jardin Paris 16ème - Très beau duplex d'environ 180m² qui se compose d'une vaste entrée &quot;toute hauteur&quot; sur les deux derniers étages de l'immeuble, un grand salon avec une cheminée (à gaz), une salle...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3314840</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/BC821A2B-FA54-4F5E-082B-285240A245AA/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/BC821A2B-FA54-4F5E-082B-285240A245AA/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="0F9F775A-DDDC-C21B-9721-319C806AE397"
                        formUrl="https://www.lux-residence.com/fr/ad/form/0F9F775A-DDDC-C21B-9721-319C806AE397/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="0F9F775A-DDDC-C21B-9721-319C806AE397"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="0F9F775A-DDDC-C21B-9721-319C806AE397"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/0f9/e/eb2d944a-5231-4767-9e53-c2e5f594e1fa.jpg" alt="Appartement de luxe à vendre PARIS 16E, 232 m², 4 Chambres, 2&nbsp;855&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/0f9/e/eb2d944a-5231-4767-9e53-c2e5f594e1fa.jpg" alt="Appartement de luxe à vendre PARIS 16E, 232 m², 4 Chambres, 2&nbsp;855&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/0F9F775A-DDDC-C21B-9721-319C806AE397/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/0F9F775A-DDDC-C21B-9721-319C806AE397/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Muette</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        2&nbsp;855&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>232 m<sup>2</sup>					    </span>                             | <span>6 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3338181</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. Paris 16 - Passy- Appartement familial - 4 chambres Paris 16ème - Passy - Au 3ème étage d'un immeuble haussmannien de standing avec gardien, appartement de 232 m² avec une belle hauteur sous plafond de 3,51 m. Il se compose...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3338181</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/0F9F775A-DDDC-C21B-9721-319C806AE397/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/0F9F775A-DDDC-C21B-9721-319C806AE397/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<div class='geobCarousel '><ul class='carousel-inner'><li><div class='item' id='div-gpt-ad-mv7'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-mv7');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
</li><li><div class='item' id='div-gpt-ad-mv8'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-mv8');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
</li><li><div class='item' id='div-gpt-ad-mv9'>
    <script type="text/javascript">

      function pendingDisplayGoogleTag() {
        if (window.GDPRLib && window.GDPRLib.GDPR && typeof googletag !== "undefined" && typeof googletag.display !== "undefined") {
          if (!window.GDPRLib.GDPR.isAllowed()) {
            CookieConsent.hitOnConsent(
              displayGoogleTag
              , 4);
          } else {
            displayGoogleTag()
          }
        } else {
          setTimeout(pendingDisplayGoogleTag, 1000);
        }
      }

      function displayGoogleTag() {
        googletag.display('div-gpt-ad-mv9');
      }

      pendingDisplayGoogleTag();
    </script>
</div>
</li></ul></div><!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="D3FC98BE-CB34-90CF-344C-410EE1C05962"
                        formUrl="https://www.lux-residence.com/fr/ad/form/D3FC98BE-CB34-90CF-344C-410EE1C05962/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="D3FC98BE-CB34-90CF-344C-410EE1C05962"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="D3FC98BE-CB34-90CF-344C-410EE1C05962"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/d3f/3/39a4e020-456f-4380-8d49-7feecee25422.jpg" alt="Appartement de luxe à vendre PARIS 16E, 264 m², 4 Chambres, 3&nbsp;690&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/d3f/3/39a4e020-456f-4380-8d49-7feecee25422.jpg" alt="Appartement de luxe à vendre PARIS 16E, 264 m², 4 Chambres, 3&nbsp;690&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/D3FC98BE-CB34-90CF-344C-410EE1C05962/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/D3FC98BE-CB34-90CF-344C-410EE1C05962/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Muette</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        3&nbsp;690&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>264 m<sup>2</sup>					    </span>                             | <span>6 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3153411</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. Paris 16 - Muette- Appartement de prestige - 4/5 chambres Dans un immeuble haussmannien de grand standing, au premier étage, bel appartement de réception ou familial de 263 m². Il se compose d'une galerie d'entrée, d'une double réception, d'un bureau...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3153411</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/D3FC98BE-CB34-90CF-344C-410EE1C05962/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/D3FC98BE-CB34-90CF-344C-410EE1C05962/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="C7E1D863-22B4-EB34-AC8F-C7AB73019196"
                        formUrl="https://www.lux-residence.com/fr/ad/form/C7E1D863-22B4-EB34-AC8F-C7AB73019196/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="C7E1D863-22B4-EB34-AC8F-C7AB73019196"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="C7E1D863-22B4-EB34-AC8F-C7AB73019196"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/c7e/3/3d46a95c-4135-4400-b0bb-bc18293a9610.jpg" alt="Appartement de luxe à vendre PARIS 16E, 299 m², 5 Chambres, 5&nbsp;950&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/c7e/3/3d46a95c-4135-4400-b0bb-bc18293a9610.jpg" alt="Appartement de luxe à vendre PARIS 16E, 299 m², 5 Chambres, 5&nbsp;950&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">9<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/C7E1D863-22B4-EB34-AC8F-C7AB73019196/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/C7E1D863-22B4-EB34-AC8F-C7AB73019196/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Muette</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        5&nbsp;950&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>299 m<sup>2</sup>					    </span>                             | <span>8 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3383061</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. Paris 16 - OCDE - Appartement de réception - 5 chambres PARIS 16 - OCDE - Appartement aux superbes volumes de 299 m² au 2ème étage d'un superbe immeuble 1890 avec vue sur un grand jardin très calme et plein...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3383061</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/C7E1D863-22B4-EB34-AC8F-C7AB73019196/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/C7E1D863-22B4-EB34-AC8F-C7AB73019196/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>
<!-- schema.org - ApartmentComplex -->
<div itemscope itemtype="https://schema.org/ApartmentComplex">
    <div class="row ">
        <div class="prod-l">
            <div class="mob-hid">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="3092EFAB-7BFE-C023-8030-2F688F5C8B52"
                        formUrl="https://www.lux-residence.com/fr/ad/form/3092EFAB-7BFE-C023-8030-2F688F5C8B52/Liste_Annonces/popup-myselection"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band fr">Ajouter à ma sélection</span>
                    <span class="band bandRemove fr">Retirer de ma sélection</span>

                </button>
            </div>
            <div class="mob">
                <button id=""
                        class="fav likeAd add"
                        onclick='myPushThorEvent("event_click", {"clicType":"action","niveau2":{"0":"9"},"chapter1":"Ajouter_a_ma_selection","chapter2":"","chapter3":"","pageLabel":"Ajouter_a_ma_selection_Liste_Annonces"})'
                        adid="3092EFAB-7BFE-C023-8030-2F688F5C8B52"
                        href="javascript:void(0);">
                    <span class="isprite"></span><span
                            class="band">Ajouter à ma sélection</span>
                    <span class="band bandRemove">Retirer de ma sélection</span>

                </button>
            </div>
            <a class="search-alert" popin="3092EFAB-7BFE-C023-8030-2F688F5C8B52"></a>
            <div class="result_img">
                                    <img data-src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/309/b/b1695891-1397-49fe-a998-6822c3c444b1.jpg" alt="Appartement de luxe à vendre PARIS 16E, 165 m², 3 Chambres, 2&nbsp;580&nbsp;000&nbsp;€" class="lazyload" title=""/>
                                <noscript>
                    <img itemprop="image" src="https://mmf.lux-residence.com/mmf/ads/photo-prop-500x330/309/b/b1695891-1397-49fe-a998-6822c3c444b1.jpg" alt="Appartement de luxe à vendre PARIS 16E, 165 m², 3 Chambres, 2&nbsp;580&nbsp;000&nbsp;€"/>
                </noscript>
                <p class="pics">10<span class="isprite camera"></span></p>
            </div>
            <!-- annonce à la une page 2 -->
                        <!-- fin annonce à la une page 2 -->
            <!-- annonce puissance lux page 1 -->
                        <!-- fin annonce à la une page 1 -->
            <!-- Annonce en groupe 3 -->
            
            <a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/3092EFAB-7BFE-C023-8030-2F688F5C8B52/" class="cover"></a>
        </div><!--
				--><a href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/3092EFAB-7BFE-C023-8030-2F688F5C8B52/" style="color:black;">
            <div class="prod-r prod-desc">
                <div itemprop="name">
                    <div class="city" style="margin-bottom:0px;"><p
                                style="display:inline-block;text-align:left;">Muette</p>
                        <span class="isprite ch-rg-br mob" style="width:10px;text-align:right;"></span></div><!--
					--><p id="valuePrice" class="price">
                        2&nbsp;580&nbsp;000&nbsp;€                    </p>

                    <h2 class="titleAnnounce">
                        <p style="margin-bottom:0.6rem;font-size:1.4rem;">

                            Vente                            - Appartement                        </p>

                        PARIS 16E                         | <span>165 m<sup>2</sup>					    </span>                             | <span>5 Pièces</span>
                    </h2>
                </div>
                <h4>Agence : BARNES PASSY - LA MUETTE</h4>
                <!--					<p class="ref">Référence annonce : <span> 3335384</span>
					-->
                <p class="description"
                   style="min-height:64px;max-height:64px;overflow:hidden;">Achat appartement PARIS 16E. Paris 16 - Passy/Paul Doumer - Appartement - 3 chambres Dans un immeuble 1930 de très bon standing, appartement familial de 165 m² situé au 4ème étage, composé d'un salon, d'une salle à manger, d'une cuisine dînatoire, de trois chambres,...</p>
                <span class="refAnnounce">
                    Référence annonce :
                        <span> 3335384</span>                </span>
                <div class="cta-line fr">
                    <a class="btn btn-inverse"
                       href="https://www.lux-residence.com/fr/vente/appartement/ILE+DE+FRANCE/75/PARIS+16E/3092EFAB-7BFE-C023-8030-2F688F5C8B52/">Voir le détail</a>
                    <a class="btn btn-default open-mail-popup"
                       href="https://www.lux-residence.com/fr/ad/form/3092EFAB-7BFE-C023-8030-2F688F5C8B52/Liste_Annonces">Contacter l'agence</a>
                </div>
            </div>
        </a>
    </div>
</div>

    </div>
</section>

<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
<script src="https://cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js"></script>

<div class="search-alert popin-alert popin" role="alert" id="popin-alert">
    <div class="ctt-full-popin">
        <script src="/v5/js/fillForm.js?v=04072017"></script>
<div id="popin-alert-head" class="ctt-popin-alert grey" style="padding: 5px 20px;">
    <a class="popin-close" href="#"></a>
    <h5 style="margin-bottom: 10px;">
        <span class="isprite alert-br"></span>
        Créer une alerte    </h5>
    <p>Rappel de vos critères :</p>

    <ul class="filters">
        <li class="transaction">
            <span class="text-label rentType" val="sale">
            Vente             </span>
        </li>

                    <li>
                <span class="text-label locality" val="PARIS">
                    PARIS                </span>
                <a class="text-remove" type="locality" val="PARIS"></a>
            </li>
                                <li>
                    <span class="text-label propertyType" val="All">
                        Tous types de biens                    </span>
                </li>
                            </ul>
    <div>
        <p class="localityError">Veuillez saisir au moins une localité (maximum 5)</p>
        <p class="ajout-crit">
            <a href="https://www.lux-residence.com/fr/email-alert">
                Ajouter des critères            </a>
        </p>
    </div>
    <div class="clear"></div>
</div>
<div class="ctt-popin-alert white" style="padding: 15px 30px;">
    <form id="search-popin"
          class="ajax-alert-form alertPopupForm formPrefill"
          action="https://www.lux-residence.com/fr/email-alert/subscribe"
          method="post">
        <div class="al-5" style="margin: 0;">
            <p>Renseignez votre email pour recevoir toutes les nouvelles annonces immobilières personnalisées et la sélection des professionnels du secteur.</p>
            <div class="identity">
                <div class="identity-names">
                    <div class="lastname">
                        <label for="lastname" class="required">Nom</label>

<input type="text" name="lastname" id="lastname" value="" class="namePrefill" maxlength="55" size="20">                    </div>
                    <div class="firstname">
                        <label for="firstname" class="optional">Prénom</label>

<input type="text" name="firstname" id="firstname" value="" class="firstNamePrefill" maxlength="55" size="20">                    </div>
                </div>
                <div class="more" style="width: 100%">
                    <label for="email" class="required">Email</label>

<input type="text" name="email" id="email" value="" class="emailPrefill" maxlength="255" size="20">                </div>
                <div>
                    <label id="email-error-php" class="error" for="email" style="display:none;"></label>
                    <div class="contactEmail2">
                        
<input type="text" name="email2" id="email2" value="" maxlength="255">                        Vous ne devez pas remplir le champ ci-dessus
                    </div>
                </div>
                <button type="button"
                        class="a-link tog-btn"
                        data-toggle="collapse"
                        data-target="#allp">En savoir plus                    <span class="isprite ch-dn-br"></span>
                </button>
                <div id="allp" class="collapse" style="margin-bottom:10px;">
                    <p class="tog-p" style="font-size: 10px;
                                            text-align: justify;
                                            width: 94%;">
                        En vous inscrivant au service alerte email vous recevrez par email les nouvelles annonces immobilières correspondant à vos critères de recherche et les informations sur le secteur. Vous acceptez aussi de recevoir les offres des partenaires de lux-residence.com qui vous proposeront des suggestions immobilières. Vous pourrez à tout moment vous désinscrire des offres d'alerte ainsi que des offres de lux-residence.com et de ses partenaires.                    </p>
                </div>

                <label for="phone" class="optional">Téléphone</label>

<input type="text" name="phone" id="phone" value="" class="phonePrefill" maxlength="25" size="20">                <input type="hidden" name="transactiontype" value="sale"/>
            </div>

            
<input type="hidden" name="relation" value="0"><input type="checkbox" name="relation" id="relation" value="1">            <label class="displayed" for="relation" style="margin: 0; height: 25px; width: 100%">
                <p style="width: 94%">
                    Oui, j‘accepte de recevoir les offres des partenaires Lux-residence.com.                </p>
            </label>
        </div>

        <div class="al-6">
                        <ul class="prot-pers">
                <li class="not_underline">* Champs obligatoires</li>
            </ul>
            <ul class="cta-confirm">
                <li><a class="cancel" href="#">Annuler</a></li>
                <li class="send">
                    <div class="side-form-button-container">
                        <input class="submit" type="submit" value="Envoyer">
                        <!--<i class="fa fa-spin fa-2x fa-circle-o-notch fa-fw loading-icon"></i>-->
                    </div>
                </li>
            </ul>
            <ul class="cta-confirm" style="text-align: justify">
                <li>
                    <div class="legal_mentions_mail_alert_popup_form">
                        <div class="legal_notices_popin">
    <span class="legal_notice_popin_1">
        Vos informations sont traitées par Digital Classifieds France et transmises au professionnel de l’immobilier que vous souhaitez contacter afin de gérer votre demande. Pour exercer vos droits conformément à la loi Informatique et Libertés        <span id="comma">, </span>
        <span id="toggle_show_legal_mention_popin"
              class="simple_underline pointer">
            cliquez ici        </span>.
    </span>
    <br style="margin-bottom: 5px"/>
    <span class="legal_notice_popin_2">
        Vous pouvez accéder aux données vous concernant, les faire rectifier ou demander leur effacement. Vous disposez également d'un droit d’opposition, d’un droit à la portabilité et d’un droit à la limitation du traitement des données qui vous concernent que vous pouvez exercer en vous adressant à : Logic-Immo.com / Digital Classifieds France - 65 Rue Ordener, 75880 Paris Cedex 18. Pour plus d’informations, vous pouvez également consulter nos        <a href="https://www.lux-residence.com/fr/cgu-et-politique-de-confidentialite"
           class="simple_underline pointer">
            CGU − Politique de Confidentialité        </a>&nbsp;
        <span id="toggle_hide_legal_mention_popin"
              class="simple_underline pointer">
            Masquer.
        </span>
    </span>
</div>                    </div>
                </li>
            </ul>
                    </div>
        <div class="clear"></div>
    </form>
</div>

<!-- jQuery -->
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>

<script type="text/javascript">
  $(document).ready(function () {

    initError();

    $('.identity').find('label').attr('style', 'display:none;');

    $('#firstname').attr('placeholder', 'Prénom');
    $('#lastname').attr('placeholder', 'Nom *');
    $('#email').attr('placeholder', 'Email *');
    $('#phone').attr('placeholder', 'Téléphone *');
    var error = $('#phone').attr('class');

    if (error != undefined && error.indexOf('error') !== -1) {
      $('#phone').show();
    }
    else {
      $('#phone').hide();
    }
    // appeler cette fonction uniquement si la popin est affichée    
    if ($('#popin-alert').hasClass('is-visible')) {
      initSearchFormCookie();
    }

    $('#relation').off('click').click(function () {
      $('#phone').toggle();
      $('#phone-error').toggle();

    })

    initAlertPopup();

  })

  //cette fonction sert aussi pour le formulaire de la popup d'inscription à alerte email en PR
  function submitPopupContactForm(button) {
    // ce code sert juste à submit le formulaire de contact en popup en cliquant sur un lien qui n'est pas le submit du form.
    alert('click bouton submit');
    form = jQuery(button).closest('.ctt-popin-alert').find("form");
    jQuery(form).find(':submit').click();
  }

  /* Affiche un message d'erreur sous le champ email
     Réajuste des éléments dans le popin  */
  function initError() {
    var popin = $('#popin-alert').html();
    var emailState = $('#email').attr('class');
    var emailError = emailState.indexOf('error');
    if (emailError > 0) {
      $('#popin-alert-head h5').css('display', 'block');
      $('#popin-alert-head p').css('display', 'inline-block');
      $('.ctt-popin-alert .grey').css('display', 'none');
      $('.popin-alert .white').css('padding', '20px 20px 0');
      $('#email-error-php').css('display', 'inline-block');
      $('#email-error-php').css('color', 'red');
      $('#email-error-php').html(wrongEmail());
      $('#email input[type=text]').css('border', '1px solid red');
    }
  }

</script>    </div>
</div>

<!-- ./ list -->
<section id="pagin-nav" class="container">
    <ul class="pagination">
        

    
            
            

                                                                                <li><a  class = "active" href="#">1</a></li>
                                                                
                                                                                <li><a title="2" '' page="2" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS-2.php/?currency=EUR&sort=date_desc">
                                        2                                </a></li>
                                
                                                                
                                                                                <li><a title="3" '' page="3" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS-3.php/?currency=EUR&sort=date_desc">
                                        3                                </a></li>
                                
                                                                
                                                                                <li><a title="4" '' page="4" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS-4.php/?currency=EUR&sort=date_desc">
                                        4                                </a></li>
                                
                                                                
                                                                                <li><a title="5" '' page="5" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS-5.php/?currency=EUR&sort=date_desc">
                                        5                                </a></li>
                                
                                                                
                                                                                <li><a title="6" '' page="6" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS-6.php/?currency=EUR&sort=date_desc">
                                        6                                </a></li>
                                
                                                                
                                


                                <li><a title="Suivante" page="2" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS-2.php/?currency=EUR&sort=date_desc">&gt;</a></li>
                            

                <li><a page="100" href="https://www.lux-residence.com/fr/annonces/vente/immobilier-prestige-PARIS-100.php/?currency=EUR&sort=date_desc" >&gt;&gt;</a></li>
                         
             <!--        <li><a title="Haut de page" href="#header" ><span class="isprite ch-bk-usm"></span></a></li>
    -->

<!-- jQuery -->
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
<script src="https://cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js"></script>
<script type="text/javascript">

        $(document).ready(function(){
            if($(window).width() >= 1024 ){
                $('.popin-search').addClass('popin-trigger');
            }
        })

</script>
    </ul>

    <!-- Appelle la vue des dernières annonces vues par l'utilisateur -->
    <div id="initAds" last-viewd-ads-url="https://www.lux-residence.com/fr/last-viewed-ads"></div>
    <div class="mob">
        <div id="oas_Right3" >
        </div>
    </div>
</section>
<!-- ./ pagination -->
<script type="text/javascript">
var datalayerlux = {
    lux_pagetype: "searchresults",
    lux_totalvalue: 0,
    lux_transaction: "vente",
    lux_locality: "PARIS",
    lux_nbRooms: "0"
};
</script>
<script type="text/javascript" src="https://hubtr.mindlytix.com/adlp/luxres/" async="true"></script>

<!-- jQuery -->
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
<script type="text/javascript">

    $(document).ready(function(){
      popIns();
        initSearchFormsPr('{"transaction":"sale","locality":["PARIS"],"GoodsCriteria":[],"pmin":null,"pmax":999,"sort":"initial","rentType":null,"currency":"EUR"}');
        $('#searchVente input[type="hidden"], #searchLoc input[type="hidden"], #searchMob01 input[type="hidden"], #searchMob02 input[type="hidden"], #srch1 input[type="hidden"]').attr('name', 's').val('').on('change', function(){
            var that = $(this);
            var t = setTimeout(function(){

                // check size & pass to two lines if necessary
                var tags = that.parent().find('.text-tag');

                if(tags.length){
                    that.valid();
                }

            }, 100);
        });

        // prevent default value validation
        jQuery.validator.addMethod("defaultInvalid", function(value, element) {
            switch (element.value) {
                case "[]":
                    return false;
                    break;
                default: return true;
                    break;
            }
        });

        // Popin alerte
        if($(window).width() >= 680 ){
            page = "1";
            if(page==2){
                var timer001;
                var hit = true;
                $(window).bind('scroll', function(){
                    timer001 = setTimeout(function(){ // set imer to show popin after 3s
                        var p = $('#popin-alert');
                        if(hit){
                            hit=false;

                          var alertDataLayer = {
                            "clicType" : "action",
                            "niveau2" : 28,
                            "chapter1" : "Pop-In_Inscription_Alerte",
                            "chapter2" : "Pop-In_Inscription_Alerte_Achat",
                            "chapter3" : "",
                            "pageLabel" : "Pop-In_Inscription_Alerte_Liste_Resultats_Pop-in_Resultats"
                          };
                          myPushThorEvent('event_click', alertDataLayer);
                         }
                        p.addClass('is-visible');
                        $(window).unbind('scroll');
                    }, 500);
                })
            }


        }

    });

</script>

<footer>
    <section id="rea" class="fr">
        <div class="container">
            <ul>
                <li>
                    <span class="isprite prest"></span>
                    <p>Des biens de prestiges</p>
                </li><!--
                --><li>
                    <span class="isprite user"></span>
                    <p>Un suivi personnalisé</p>
                </li><!--
                --><li>
                    <span class="isprite int"></span>
                    <p>Des biens à l'international</p>
                </li><!--
                --><li>
                    <span class="isprite users"></span>
                    <p>Des experts à votre écoute</p>
                </li>
            </ul>
        </div>
    </section>
    <!-- ./ reassurance -->
    <section id="links" class="fr">
        <div class="container">
            <div class="row">
                <div class="col-md-12 col-lg-12">
                    <ul class="listLinksFooter">
                        <li class="listLinks listLinksAllProperties">
                            <p>Tous nos biens</p>
                            <a href="https://www.lux-residence.com/fr/vente/top-villes-immobilier-luxe.php">Achat immobilier</a>
                            <a href="https://www.lux-residence.com/fr/location-saisonniere/top-villes-location-immobilier-luxe.php">Locations saisonnières</a>
                            <a href="https://www.lux-residence.com/fr/location-longue-duree/top-villes-location-immobilier-luxe.php">Locations longues durées</a>

                        </li><!--
                        --><li class="listLinks">
                            <p>Nos services</p>
                            <a title="Annuaire des agences" href="https://www.lux-residence.com/fr/agences/PARIS">Annuaire des agences</a>
                            <a title="Espace Presse" href="https://www.lux-residence.com/fr/press-area">Espace Presse</a>
                            
                        </li><!--
                        --><li class="listLinks">
                            <p>Liens utiles</p>
                            <a title="Notre magazine" href="https://www.lux-residence.com/fr/immobilier-prestige/magazine-immobilier.php">Notre magazine</a>
                                <a id="popinContactUsFooter"
                                   class="popinContactUs last-child">
                                    Nous contacter                                </a>
                            <a  href="https://www.lux-residence.com/fr/plan-du-site.php">Plan du site</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </section>
    <script>
      window.addEventListener("load", function(event) {
        $("#popinContactUs, #popinContactUsFooter").click(function(e) {
          $.ajax({
            url : 'https://www.lux-residence.com/fr/ajax/contact.php'
          }).done(function( data ) {
            $('#popinContainerContactUs').html(data);
            $('#overlayContactUs, #popinContainerContactUs').show();
          });
        });

        $(document).on("click","#overlayContactUs",function() {
          $('#overlayContactUs, #popinContainerContactUs').hide();
        });
      });
    </script>
    <div id="popinContainerContactUs" class="popinContainerContactUs"></div>
    <div id="overlayContactUs" class="overlayContactUs"></div>
    <style>
        @media(max-width: 768px) {
            .contactUsFormPopin {
                top: 0;
                bottom: 0;
                left: 0;
                right: 0;
                max-height: 100%;
                max-width: none;
                margin-left: 0;
            }
        }

        .popinContactUs {
            cursor: pointer;
        }

        .overlayContactUs {
            display: none;
            position: fixed;
            z-index: 1999;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            cursor: pointer;
        }
    </style>
    <!-- ./ links list -->

        <section id="seo">
            <div class="container">

                                                                        <div class="panel-group">
                        <div class="panel panel-default">

                            <a data-toggle="collapse" aria-expanded="true" href="#collapse7" class="fr">
                                Dernières annonces immobilier luxe                            </a>
                            <div id="collapse7" class="panel-collapse collapse">
                                <ul>
                                    <li><a href="https://www.lux-residence.com/fr/annonces-de-jeudi.html" title="Annonces immobilier prestige de jeudi">Jeudi 26-03</a></li>
<li><a href="https://www.lux-residence.com/fr/annonces-de-vendredi.html" title="Annonces immobilier prestige de vendredi">Vendredi 27-03</a></li>
<li><a href="https://www.lux-residence.com/fr/annonces-de-samedi.html" title="Annonces immobilier prestige de samedi">Samedi 28-03</a></li>
<li><a href="https://www.lux-residence.com/fr/annonces-de-dimanche.html" title="Annonces immobilier prestige de dimanche">Dimanche 29-03</a></li>
<li><a href="https://www.lux-residence.com/fr/annonces-de-lundi.html" title="Annonces immobilier prestige de lundi">Lundi 30-03</a></li>
<li><a href="https://www.lux-residence.com/fr/annonces-de-mardi.html" title="Annonces immobilier prestige de mardi">Mardi 31-03</a></li>
<li><a href="https://www.lux-residence.com/fr/annonces-de-mercredi.html" title="Annonces immobilier prestige de mercredi">Mercredi 01-04</a></li>
                                </ul>
                            </div>

                        </div>
                    </div>
                            </div>
        </section>

        <!-- ./ links seo -->
    <section id="social">
        <ul>
            <li><a href="https://www.facebook.com/lux.residence/" target = "_blank"><span class="isprite fb" tabindex="1"></span></a></li><!--
            --><li><a href="https://www.instagram.com/luxresidencecom" target = "_blank"><span class="isprite insta" tabindex="1"></span></a></li>
        </ul>
    </section>
    <!-- ./ social icons -->
    <section id="legal">
        <div class="bt-foot">
            <div class="container">
                <div class="btft fr">
                    <a title="Espace professionnel" target="_blank" href="https://www.luxresidencepro.com/extpro-web/connexion-lux.html">Espace professionnel</a>
                    <a title="Nous recrutons" target="_blank" href="https://www.welcometothejungle.co/companies/logic-immo-com">Nous recrutons</a>
                    <a title="Paramétrer mes cookies" class="SetMyCookies" onclick="theShield.showAdvancedSettings()">Paramétrer mes cookies</a>
                                            <a title="Conditions générales d‘utilisation et Politique de Confidentialité" href="https://www.lux-residence.com/fr/cgu-et-politique-de-confidentialite" target = "_blank">Conditions générales d‘utilisation et Politique de Confidentialité</a>
                                    </div>
                <div class="btft fr"><p>Copyright © 2020 Concept Multimédia. Tous droits réservés.</p></div>
            </div>
        </div>
    </section>
    <!-- ./ legal -->
</footer>
<!-- jQuery -->
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>

<!-- Custom JavaScript -->
<script type="text/javascript" src="/v5/js/acquereur-plus.js"></script>
<script type="text/javascript" src="/v5/dist/dist-pr.min.js"></script>
<script type="text/javascript" src="/v5/dist/new-dist-layout.min.js?v=20200402"></script>
<script type="text/javascript" src='/v5/js/mobileDetect/mobile-detect.js'></script>

<script type="text/javascript" src="/v5/js/fillForm.js"></script>
<script type="text/javascript">$(document).ready(function(){
            selectimg();
            selectflag();
            tagsSearch();
            multiCheck();
            styledSel();
            favLike();
            popIns();
            previousTags();
            toggleNumber();
            initListCarousels();

            $('#searchVente input[type="hidden"], #searchLoc input[type="hidden"], #searchMob01 input[type="hidden"], #searchMob02 input[type="hidden"], #srch1 input[type="hidden"]').attr('name', 's').on('change', function(){
                var that = $(this);
                var t = setTimeout(function(){
                    // check size & pass to two lines if necessary
                    var tags = that.parent().find('.text-tag');

                    if(tags.length){
                        that.valid();
                    }
                }, 100);
            });

            // prevent default value validation
            jQuery.validator.addMethod("defaultInvalid", function(value, element) {
                if(window.yachtSearch === true){
                    window.yachtSearch = false;
                    return true;
                }
                switch (element.value) {
                    case "[]":
                      return false;
                    default:
                      return true;
                }
            });

            $("#searchVente").validate({
                ignore: [],
                rules : {
                    s : "required defaultInvalid"
                },
                messages: {
                    s: {
                      required: invalidLocality(5),
                      defaultInvalid: invalidLocality(5)
                    }
                },
                highlight: function(element) {
                    $(element).closest('.search-form').addClass("field-error");
                },
                unhighlight: function(element) {
                    $(element).closest('.search-form').removeClass("field-error");
                }
            });

            $("#searchLoc").validate({
                ignore: [],
                rules : {
                    s : "required defaultInvalid"
                },
                messages: {
                    s: {
                      required: invalidLocality(5),
                      defaultInvalid: invalidLocality(5)
                    }
                },
                highlight: function(element) {
                    $(element).closest('.search-form').addClass("field-error");
                },
                unhighlight: function(element) {
                    $(element).closest('.search-form').removeClass("field-error");
                }
            });

            $("#searchMob01").validate({
                ignore: [],
                rules : {
                    s : "required defaultInvalid"
                },
                messages: {
                    s: {
                      required: invalidLocality(5),
                      defaultInvalid: invalidLocality(5)
                    }
                },
                highlight: function(element) {
                    $(element).closest('.search-form').addClass("field-error");
                },
                unhighlight: function(element) {
                    $(element).closest('.search-form').removeClass("field-error");
                }
            });   
            $("#searchMob02").validate({
                ignore: [],
                rules : {
                    s : "required defaultInvalid"
                },
                messages: {
                    s: {
                      required: invalidLocality(5),
                      defaultInvalid: invalidLocality(5)
                    }
                },
                highlight: function(element) {
                    $(element).closest('.search-form').addClass("field-error");
                },
                unhighlight: function(element) {
                    $(element).closest('.search-form').removeClass("field-error");
                }
            });

            $("#search48").validate({
                ignore: [],
                rules : {
                    s : "required defaultInvalid"
                },
                messages: {
                    s: {
                      required: invalidLocality(3),
                      defaultInvalid: invalidLocality(3)
                    }
                },
                highlight: function(element) {
                    $(element).closest('.search-form').addClass("field-error");
                },
                unhighlight: function(element) {
                    $(element).closest('.search-form').removeClass("field-error");
                }
            });

            $("#search-popin").validate({
                rules : {
                    name : "required",
                    email : invalidMail(),
                    phone : "luxValidatePhone"
                },
                messages: {
                    name: {
                      required : requiredName()
                    },
                    email: {
                      required : invalidMail(),
                      email : wrongEmail(),
                    },
                    phone: {
                        luxValidatePhone: wrongPhone()
                    }
                }

            });

});

function initFlexSlider(){
    // store the slider in a local variable
    var $window = $(window),
        flexslider = { vars:{} };

    // tiny helper function to add breakpoints
    function getGridSize() {
        return (window.innerWidth < 600) ? 1 :
            (window.innerWidth < 900) ? 2 : 3;
    }

    $('.flexslider').flexslider({
        animation: "slide",
        animationLoop: true,
        itemWidth: 300,
        slideshow: true,
        slideshowSpeed: 6000,
        itemMargin: 5,
        minItems: getGridSize(), // use function to pull in initial value
        maxItems: getGridSize(), // use function to pull in initial value
        touch: true,
        nextText: "",
        prevText: "",
    });
    $('.flexslider').addClass('flex-centered');
    // check grid size on resize event
    $window.resize(function() {
        var gridSize = getGridSize();

        flexslider.vars.minItems = gridSize;
        flexslider.vars.maxItems = gridSize;
    });
}</script> <script type="text/javascript">var handleSearchForm = function(formElement) {
if (typeof String.prototype.trim != "function") {
  String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/g, '');
  };
}
        var rentUrl = '/fr/annonces/location/immobilier-prestige-noloc.php';var rentLongtermUrl = '/fr/annonces/location-longue-duree/immobilier-prestige-noloc.php';var  rentHolidayUrl = '/fr/annonces/location-saisonniere/immobilier-prestige-noloc.php';var saleUrl = '/fr/annonces/vente/immobilier-prestige-noloc.php';var renseignLoc = "Pays, ville ou code postal…";var t = new Array();t['sale']= new Array();t['sale']['p']='propriete';t['sale']['hp']='hotel-particulier';t['sale']['l']='loft';t['sale']['a']='appartement';t['sale']['ct']='chateau';t['sale']['cl']='chalet';t['sale']['pv']='propriete-viticole';t['sale']['t']='terrain';t['sale']['y']='yacht';t['sale']['an']='appartement-neuf';t['sale']['pn']='new-house';t['sale']['b']='bastide';t['sale']['i']='immeuble';t['rent']= new Array();t['rent']['p']='propriete';t['rent']['hp']='hotel-particulier';t['rent']['a']='appartement';t['rent']['ct']='chateau';t['rent']['cl']='chalet';t['rent']['y']='yacht';t['rent']['b']='bastide';var txtSearch = 'Recherche en cours…';var txtContact = 'Merci';
saleUrl = saleUrl.substring(0,saleUrl.indexOf("noloc")-1);
rentUrl = rentUrl.substring(0,rentUrl.indexOf("noloc")-1);
rentLongtermUrl = rentLongtermUrl.substring(0,rentLongtermUrl.indexOf("noloc")-1);
rentHolidayUrl = rentHolidayUrl.substring(0,rentHolidayUrl.indexOf("noloc")-1);

var urlLocation ="";

if( $(formElement).attr('id') === 'searchLoc' || $(formElement).attr('id') === 'searchMob01'){
    transactionType = "rent";

    rentType = $(formElement).find(".rentType:contains("+ $(formElement).find(".rentTypeSelector").text()+")").attr("rentType");

    if(rentType == 'holiday'){
        urlLocation =  rentHolidayUrl;
    }else if(rentType == 'longterm'){
        urlLocation = rentLongtermUrl;
    }else{
        urlLocation = rentUrl;
    }

}else{
    transactionType = "sale";
    urlLocation = saleUrl;    
}

//on doit maintenant traiter le type de bien  
var checkboxes =  $(formElement).find('.multiselect-container.dropdown-menu li.active input');

var type = "immobilier-prestige";
var multiTypes = false;

if (checkboxes.length==1){
    type = t[transactionType][checkboxes.val()];
    var index = urlLocation.indexOf(".php",index);
    if (index>20 || index<0)index=0;
    for (var i=0;i<4;i++){
        index = urlLocation.indexOf("/",index);
        index++;
    }
    urlLocation = urlLocation.substring(0,index)+type;
}else if (checkboxes.length>1){
    multiTypes = true;
}

//on ajoute ensuite la localité
locText = $(formElement).find("textarea").textext()[0].hiddenInput().val();

if( $(formElement).hasClass('hp-search') &&  (locText.match(/"/g) || []).length > 6  ){
    return true;
}
if( (!locText || locText == "[]") && type !== 'yacht' ){
    return true;
}
cleanLocText = locText.replace("[,","[");
locArray = $.parseJSON(cleanLocText);

cleanAr = cleanArray(locArray);

var loc = cleanAr.join(',');


var val = CleanLocName(loc);
val = val.trim();
val = val.replace(' ', '+');

urlLocation += "-"+encodeURI(val)+".php?";

var maxPropertyType = [];
maxPropertyType['sale'] = 12;
maxPropertyType['rent'] = 7;


// ajout des types de bien, si il y en a plusieurs
if (multiTypes){

    if(maxPropertyType[transactionType] !== checkboxes.length) {
        for (var i = 0; i < checkboxes.length; i++) {
            urlLocation += "&"+$(checkboxes[i]).val()+"=1";
        }
    }
}

if(transactionType == 'sale'){

    // gestion du prix
    var pmin = $(formElement).find("#selectbox1").val();
    var pmax = $(formElement).find("#selectbox2").val();

//    if(pmin == ""){
//        pmin = 0;
//    }
    if(pmax == ""){
        pmax = 999;
    }        

    if( $.isNumeric(pmin) ){
        urlLocation += "&pmin="+pmin;
    }
    if( pmax != 999){
        urlLocation += "&pmax="+pmax;
    }


    // gestion de la devise
    currencySymbol = $(formElement).find(".search-form.sf-4 a.dropdown-toggle").clone().children().remove().end().text();
    curs = {EUR:"€", USD:"$", GBP:"£", CHF:"CHF"};
    cur = getKeyByValue(curs,currencySymbol);
    urlLocation += '&currency=' + cur ;


}

if(  type === 'yacht' ){
    window.yachtSearch = true;
}
//suppression du l'eventuel ? inutilise à la fin
if (urlLocation.charAt(urlLocation.length-1)=="?"){
    urlLocation= urlLocation.slice(0, -1);
}
createCookie('last-pr-visited',urlLocation,1);
window.location = urlLocation;
return false;

}</script>
</div> <!-- balise fermeture conditions IE -->
</body>
</html>

    http_version: null
  recorded_at: Thu, 02 Apr 2020 10:46:55 GMT
recorded_with: VCR 5.1.0
