---
http_interactions:
- request:
    method: get
    uri: https://www.iadfrance.fr/rechercher/annonces?departments=Paris&frequency=Journali%C3%A8re&generic_type%5B%5D=AP&generic_type%5B%5D=MV&id=&price_max=&price_min=&surface_max=&surface_min=&tags_list=%5B%7B%22type%22:%22departments%22,%22value%22:%22Paris%22,%22name%22:%22Paris%20%22%7D%5D&transaction_type=Vente
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 31 Mar 2020 16:38:48 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=b5ef98319b8a51e535c2a772a6a6907c; path=/; HttpOnly
      - country=fr; expires=Wed, 31-Mar-2021 16:38:48 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Wed, 31-Mar-2021 16:38:48 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ICAgIDwhRE9DVFlQRSBodG1sPgoKICAgIDxoZWFkPgogICAgICAgIDwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIChmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzogbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPScvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JytpK2RsO2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaixmKTt9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1XUEtOU0Q5Jyk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ii8+CiAgICAgICAgPHRpdGxlPmlhZCAtICAgICAgICAgICAgICAgICAgICAgVmVudGUsIGFjaGF0LCBsb2NhdGlvbiwgbWFpc29uLCBhcHBhcnRlbWVudCwgaW1tb2JpbGllciBkZSBwcm94aW1pdMOpCiAgICAgICAgICAgIDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgY29udGVudD0iICAgICAgICAgICAgICAgICAgICBpYWQgOiBsZSBzaXRlIGR1IHLDqXNlYXUgZGUgbWFuZGF0YWlyZXMgaW1tb2JpbGllcnMuIENvbnN1bHRleiBkZXMgbWlsbGllcnMgZCdhbm5vbmNlcyBkZSBsb2NhdGlvbiwgdmVudGUgc3VyIHRvdXRlIGxhIEZyYW5jZS4gQWNoZXRleiwgbG91ZXogb3UgdmVuZGV6IHVuIGJpZW4gaW1tb2JpbGllciBwYXJ0b3V0IGVuIEZyYW5jZSBhdmVjIGlhZCBvdSByZWpvaWduZXogbGUgMWVyIHLDqXNlYXUgZnJhbsOnYWlzIGRlIGNvbnNlaWxsZXJzIGVuIGltbW9iaWxpZXIuCiAgICAgICAgICAgICIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJpYWQgaW1tb2JpbGllciIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICAgICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtaW5pbXVtLXNjYWxlPTEiPgogICAgICAgIDxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0iTTNDVWlwenBkQWRNekxaZ29LS1hZT0k4enlybW5UbG5tMl8xUUVnMlFqcyIvPgogICAgICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2ltZy9sb2ctaWFkLXJlY3RhbmdsZS5qcGciLz4KICAgICAgICAgICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNhY2hlLWNvbnRyb2wiIGNvbnRlbnQ9Im1heC1hZ2U9MCIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNhY2hlLWNvbnRyb2wiIGNvbnRlbnQ9Im5vLWNhY2hlIi8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iZXhwaXJlcyIgY29udGVudD0iMCIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImV4cGlyZXMiIGNvbnRlbnQ9IlR1ZSwgMDEgSmFuIDE5ODAgMTowMDowMCBHTVQiLz4KICAgICAgICA8bWV0YSBodHRwLWVxdWl2PSJwcmFnbWEiIGNvbnRlbnQ9Im5vLWNhY2hlIi8+CgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMzJ4MzIiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi0zMngzMi5wbmciPgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMTZ4MTYiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi0xNngxNi5wbmciPgogICAgICAgIDxsaW5rIHJlbD0ibWFuaWZlc3QiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvbWFuaWZlc3QuanNvbiI+CiAgICAgICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiNmZmZmZmYiPgogICAgICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSIvaW1nL2Zhdmljb25zL21zLWljb24tMTQ0eDE0NC5wbmciPgogICAgICAgIDxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjZmZmZmZmICI+CgogICAgICAgICAgICAgICAgICAgIDwhLS0gKiogR09PR0xFIEZPTlRTICoqIC0tPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9R2xvcmlhK0hhbGxlbHVqYWgiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9TGF0bzozMDAsNDAwLDcwMCwzMDBpdGFsaWMsNDAwaXRhbGljLDcwMGl0YWxpYyIKICAgICAgICAgICAgICAgICAgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICAgICAgICAgIDxsaW5rIGhyZWY9Ii8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Ecm9pZCtTYW5zOjQwMCw3MDAiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um91Z2UrU2NyaXB0IiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KCiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy92ZW5kb3ItYTE1MTU4OWJlOC5taW4uY3NzIj4KICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvYWxsLmNzcyI+CiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9tYWluLTQyMTFkNzU2MWYubWluLmNzcyI+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxzdHlsZT4KICAgICAgICAgICAgZGl2LmNjLXdpbmRvdy5jYy1iYW5uZXIgewogICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDBweDsKICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAwcHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGEuY2MtYnRuIHsKICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC43ZW07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNwYW4uY2MtbWVzc2FnZSB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDExcHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGEuY2MtYnRuLmNjLWRpc21pc3M6aG92ZXIgewogICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGEuY2MtYnRuLmNjLWFsbG93OmhvdmVyIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZGVmZjU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5oaWRlUHQgewogICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTsKICAgICAgICAgICAgfQogICAgICAgIDwvc3R5bGU+CgoKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNS4wL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyI+CiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi5pY28iLz4KCiAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9hbGwuanMiPjwvc2NyaXB0PgogICAgICAgICAgICA8L2hlYWQ+CgoKCjxib2R5ICBjbGFzcz0iaG9tZSIgaXRlbXNjb3BlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9XZWJQYWdlIj4KPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+Cjxub3NjcmlwdD4KICAgIDxpZnJhbWUgc3JjPSIvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1XUEtOU0Q5IiBoZWlnaHQ9IjAiIHdpZHRoPSIwIiBzdHlsZT0iZGlzcGxheTpub25lO3Zpc2liaWxpdHk6aGlkZGVuIj48L2lmcmFtZT4KPC9ub3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgoKPGRpdiBpZD0iZmItcm9vdCI+PC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcmUtaGVhZGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgUG91ciB1bmUgbWVpbGxldXJlIGV4cMOpcmllbmNlIHN1ciBub3RyZSBzaXRlIDogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluIj48L2k+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtIGZvcm1fX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgTG9jYWxpc2V6LXZvdXMgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iZm9ybV9fbG9jYWxpemF0aW9uIiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19hcnJvdy0xIiB2YWx1ZT0iIiB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXJsPSIvZ2VvLXNlYXJjaC8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdXNlcmNvdW50cnk9IiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY291bnRyeT0iZnIiPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fY2xvc2UiPjxzcGFuIGNsYXNzPSJoaWRkZW4teHMiPkZlcm1lcjwvc3Bhbj4gPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWNyb3NzIj48L2k+PC9hPgogICAgICAgIDwvZGl2PgogICAgCiAgICAKPGRpdiBjbGFzcz0ibWFpbi1oZWFkZXItd3JhcHBlciI+CiAgICA8ZGl2IGlkPSJtYWluIiBjbGFzcz0ibWFpbi1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b25fX21lbnUtY29udGFpbmVyIj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uX19tZW51LW9wZW4iPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1tZW51Ij48L2k+PC9idXR0b24+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbl9fbWVudS1jbG9zZSI+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWNyb3NzIj48L2k+PC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGhlYWRlciBpZD0iaGVhZGVyIiBjbGFzcz0iIGhlYWRlciIgaXRlbXNjb3BlCiAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1dQSGVhZGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlcl9fbG9nbyI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyLyIgY2xhc3M9ImhlYWRlcl9fbG9nby1saW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvaWFkLWxvZ28ucG5nIiBhbHQ9IklBRCA6IExvY2F0aW9uIGV0IHZlbnRlIGVuIGltbW9iaWxpZXIiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPG5hdiBpZD0ibWVudSIgY2xhc3M9Im1lbnUgbWVudV9fbW9iaWxlICIKICAgICAgICAgICAgICAgICAgICAgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9TaXRlTmF2aWdhdGlvbkVsZW1lbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaXJzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hY2hhdC9saXN0ZS9hbm5vbmNlcz9zb3J0PWFkLmZpcnN0UHVibGlzaERhdGUmYW1wO2Rpcj1kZXNjIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIEFjaGV0ZXIKCiAgICAgICAgPGkgY2xhc3M9Im1lbnUtaWNvbjIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9sb2NhdGlvbi9saXN0ZS9hbm5vbmNlcz9zb3J0PWFkLmZpcnN0UHVibGlzaERhdGUmYW1wO2Rpcj1kZXNjIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIExvdWVyCgogICAgICAgIDxpIGNsYXNzPSJtZW51LWljb24zIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvdmVuZHJlIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIFZlbmRyZQoKICAgICAgICA8aSBjbGFzcz0ibWVudS1pY29uMyI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2VzdGltZXItdm90cmUtYmllbiIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBFc3RpbWVyCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Iml0ZW0taGlnaGxpZ2h0ZWQiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvdmVudGUvYW5ub25jZXMvaW1tb2JpbGllci1wcmVzdGlnZS9saXN0ZS1yZXN1bHRhdD9yYWRpdXM9MjAmYW1wO3RyYW5zYWN0aW9uX3R5cGU9VmVudGUmYW1wO3RhZ3MlNUIwJTVEPXByZXN0aWdlIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIFBSRVNUSUdFCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNob3cteHMiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvdHJvdXZlci11bi1jb25zZWlsbGVyIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIFRyb3V2ZXIgdW4gY29uc2VpbGxlcgoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzaG93LXhzIGxhc3QiIGljb249ImRlbW8taWNvbiBpY29uLXVzZXJfem9vbSI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGV2ZW5pci1jb25zZWlsbGVyLmlhZGZyYW5jZS5mciIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBOb3VzIHJlam9pbmRyZQoKICAgICAgICA8aSBjbGFzcz0iLyI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCgogICAgPC91bD4KCiAgICAgICAgICAgICAgICA8L25hdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51X19zZWNvbmQgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImhpZGRlbi14cyBmaXJzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci90cm91dmVyLXVuLWNvbnNlaWxsZXIiICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX3NlY29uZCBidXR0b25fX21lZGl1bSI+CiAgICAgICAgICAgIFRyb3V2ZXIgdW4gY29uc2VpbGxlcioKCiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXVzZXJfem9vbSI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGlkZGVuLXhzIiBpY29uPSJkZW1vLWljb24gaWNvbi11c2VyX3pvb20iPiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RldmVuaXItY29uc2VpbGxlci5pYWRmcmFuY2UuZnIiICAgICB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX19tYWluIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICAgICAgTm91cyByZWpvaW5kcmUKCiAgICAgICAgPGkgY2xhc3M9Ii8iPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhcy1jaGlsZCBjb3VudHJ5LWNob3Nlbi1mciBsaW5rLWlhZCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcHJvZmlsIj4KICAgICAgICAgICAgaWFkIEZyYW5jZQoKICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctZG93biI+PC9pPgogICAgPC9hPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJtZW51X2xldmVsXzEiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmlyc3QiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvL3d3dy5pYWRlc3BhbmEuZXMiICAgICBjbGFzcz0idGV4dC1jZW50ZXIgbWVudS1pdGVtLXVuY2VudGVyZWQgaWFkLWZyYW5jZSI+CiAgICAgICAgICAgIGlhZCBFc3Bhw7FhCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vd3d3LmlhZC1pdGFsaWEuaXQiICAgICBjbGFzcz0idGV4dC1jZW50ZXIgbWVudS1pdGVtLXVuY2VudGVyZWQgaWFkLWZyYW5jZSI+CiAgICAgICAgICAgIGlhZCBJdGFsaWEKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGFzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vd3d3LmlhZHBvcnR1Z2FsLnB0IiAgICAgY2xhc3M9InRleHQtY2VudGVyIG1lbnUtaXRlbS11bmNlbnRlcmVkIGlhZC1mcmFuY2UiPgogICAgICAgICAgICBpYWQgUG9ydHVnYWwKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCgogICAgPC91bD4KCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoYXMtY2hpbGQgdXNlci1tZW51IGxhc3QiPiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiAgICAgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3Byb2ZpbCI+CiAgICAgICAgICAgIAoKICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdXNlci00Ij48L2k+CiAgICA8L2E+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im1lbnVfbGV2ZWxfMSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGlkPSJsb2dpbl9idG4iIGNsYXNzPSJkZW1vLWljb24gaWNvbi11c2VyLTMgd2lkZSBmaXJzdCIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0ibG9naW4tdGFiIj4gICAgICAgIDxzcGFuPiAgICBTZSBjb25uZWN0ZXIKPC9zcGFuPiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGlkPSJjcmVhdGVfYnRuIiBjbGFzcz0iZGVtby1pY29uIGljb24tdXNlci0yIHdpZGUgbGFzdCIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4gICAgICAgIDxzcGFuPiAgICBDcsOpZXIgdW4gY29tcHRlCjwvc3Bhbj4gICAgICAgIAogICAgPC9saT4KCgogICAgPC91bD4KCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oZWFkZXI+CiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCgo8bWFpbiBpZD0ibWFpbl9fY29udGVudCIgY2xhc3M9Im1haW5fX2NvbnRlbnQiIGl0ZW1zY29wZSBpdGVtcHJvcD0ibWFpbkNvbnRlbnRPZlBhZ2UiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9CbG9nIj4KICAgIDxzZWN0aW9uIGlkPSJjb250ZW50IiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgIDxmb3JtIGlkPSJzZWFyY2hGb3JtIiBjbGFzcz0ic2VhcmNoX19iYXIiIGFjdGlvbj0iL3JlY2hlcmNoZXIvYW5ub25jZXMiIG1ldGhvZD0iR0VUIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fZmlsdGVycyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLW5hbWU9IkFjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+QWN0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9InRyYW5zYWN0aW9uX3R5cGUiIGlkPSJzZWFyY2gtbmF2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWxlY3RlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJWZW50ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY2hldGVyICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkxvY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvdWVyICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iVmlhZ2VyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpYWdlciAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+LS0+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9InRydWUiIGRhdGEtbmFtZT0iTGlldSh4KSIKICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0aW9ubmVzPSJzw6lsZWN0aW9ubsOpcyIgZGF0YS1hbGxzZWxlY3Rpb25uZXM9IlRvdXMgc8OpbGVjdGlvbm7DqXMiCiAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYy1zZWxlY3QgIG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+MSBMaWV1KHgpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJnZW9fdmFsdWUiIGNsYXNzPSJzZWxlY3RfX2lucHV0IHdoZXJlVG9CdXlfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0id2hlcmVUb0J1eSIgY2xhc3M9IndoZXJlVG9CdXlTZWFyY2hCYXIgc2VhcmNoLWJpZy1maWVsZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Ik/DuSA/IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL2F1dG9jb21wbGV0ZS1nYy8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbG9jYXRpb249InUwOXFxZWsyaGY5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcnNsZXktZXJyb3JzLW1lc3NhZ2VzLWRpc2FibGVkPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWdzX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0YWciIGRhdGEtdHlwZT0iZGVwYXJ0bWVudHMiIGRhdGEtdmFsdWU9IlBhcmlzIiBkYXRhLW5hbWU9IlBhcmlzICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9InRydWUiIGRhdGEtbmFtZT0iVHlwZShzKSBkZSBiaWVuIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYy1zZWxlY3QgbXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlR5cGUocykgZGUgYmllbjwvYT4KICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJnZW5lcmljX3R5cGVbXSIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlbGVjdGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IkFQIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcHBhcnRlbWVudC0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VsZWN0ZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iTVYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1haXNvbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJQQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZ2FyYWdlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdhcmFnZSAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJGQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tY29tbWVyY2UtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVyY2UgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iSU0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFwcGFydGVtZW50LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIELDonRpbWVudCAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJCVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYnVyZWF1LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1cmVhdSAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0idGVycmFpbiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJURSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXJyYWluICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbmFtZT0iU3VyZmFjZSBtaW4vbWF4IiBkYXRhLXN0YXJ0X2F0PSJkZSIgIGRhdGEtc3RhcnRfdG89IsOgIiBjbGFzcz0iYy1zZWxlY3QgbWluX19tYXgKICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlN1cmZhY2UgbWluL21heDwvYT4KICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pbiA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJzdXJmYWNlX21pbiIgbmFtZT0ic3VyZmFjZV9taW4iIHZhbHVlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyc2xleS1yZXF1aXJlZD0iZmFsc2UiIGRhdGEtcGFyc2xleS10eXBlPSJudW1iZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPm3Csjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF4IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9InN1cmZhY2VfbWF4IiBuYW1lPSJzdXJmYWNlX21heCIgdmFsdWU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJmYWxzZSIgZGF0YS1wYXJzbGV5LXR5cGU9Im51bWJlciIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZSI+bcKyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLXVzZS1uYW1lPSJmYWxzZSIgZGF0YS1uYW1lPSJQacOoY2UocykiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InBpZWNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlBpw6hjZShzKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0icm9vbXNbXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGRhdGEtdmFsdWU9IjEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBwacOoY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzIHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1IHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTYiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA2IHBpw6hjZXMgZXQgcGx1cyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1uYW1lPSJQcml4IG1pbi9tYXgiIGRhdGEtc3RhcnRfYXQ9ImRlIiAgZGF0YS1zdGFydF90bz0iw6AiIGNsYXNzPSJjLXNlbGVjdCAgbWluX19tYXgKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+UHJpeCBtaW4vbWF4PC9hPgogICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdHJhbnNhY3Rpb24tdHlwZT0iVmVudGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXByaWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaW4gOiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0icHJpY2VfbWluIiB0eXBlPSJ0ZXh0IiB0aXRsZT0iUHJpeCBtaW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdHJhbnNhY3Rpb24tdHlwZT0iTG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXByaWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXggOiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0icHJpY2VfbWF4IiB0eXBlPSJ0ZXh0IiB0aXRsZT0iUHJpeCBtYXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fYm94X19tb3JlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9ImZhbHNlIiBpZD0iY2hhbWJyZXMiIGRhdGEtbmFtZT0iQ2hhbWJyZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYy1zZWxlY3QgbXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+IENoYW1icmVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iYmVkcm9vbXNbXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBjaGFtYnJlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgY2hhbWJyZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBjaGFtYnJlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSI0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IGNoYW1icmVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUgY2hhbWJyZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNiBjaGFtYnJlcyBldCBwbHVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJUYWcocykiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VGFnKHMpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJ0YWdzW10iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9ImV4Y2x1c2l2ZSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGNsdXNpdml0w6kgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJ0b3AiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ291cCBkZSBjb2V1ciAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Im5ldyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3V2ZWF1ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0icHJpY2VfZG93biIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYWlzc2UgZGUgcHJpeCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9ImNvbXByb21pcyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb3VzIGNvbXByb21pcyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Im5ld19idWlsZGluZyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXVmICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJwcmVzdGlnZSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByZXN0aWdlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9InRydWUiIGRhdGEtbmFtZT0iRFBFIgogICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCBtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPkRQRTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iY2xhc3NfZF9wX2VbXSIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJBKyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJCIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkItIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEItCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJDIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJGIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLXNlbGVjdCIgZGF0YS1uYW1lPSJUeXBlIGRlIG1hbmRhdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlR5cGUgZGUgbWFuZGF0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJleGNsdXNpdmUiIGNsYXNzPSJzZWxlY3RfX2lucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGRhdGEtdmFsdWU9IjEiPkV4Y2x1c2lmPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iMCI+Tm9uLWV4Y2x1c2lmPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLW5hbWU9IsOJdGVuZHJlIGxhIHJlY2hlcmNoZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPsOJdGVuZHJlIGxhIHJlY2hlcmNoZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0icmFkaXVzIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNWttPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTBrbTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE1a208L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMGttPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJpZCIgaWQ9Im1pZCIgcGxhY2Vob2xkZXI9Ik7CsCBkZSBtYW5kYXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYXJjaC1zbWFsbC1maWVsZCIgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJmYWxzZSIgZGF0YS1wYXJzbGV5LXR5cGU9Im51bWJlciIvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMyByaWdodF9faW5mbyI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdGEgYWxpZ24tY29sdW1uLWNlbnRlciI+CgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19zZWNvbmQgYnV0dG9uX19hY3Rpb24iPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zZWFyY2gtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlJlY2hlcmNoZTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX2FsZXJ0IGJ1dHRvbl9fbWVkaXVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFiPSJsb2dpbi10YWIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DcsOpZXIgdW5lIGFsZXJ0ZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPCEtLTxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fYWN0aW9uIGJ1dHRvbl9fc2Vjb25kIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXNlYXJjaC0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlJlY2hlcmNoZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4tLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgaWQ9InBhcmFtcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkZXBhcnRtZW50cyIgdmFsdWU9IlBhcmlzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZ2VuZXJpY190eXBlW10iIHZhbHVlPSJBUCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZ2VuZXJpY190eXBlW10iIHZhbHVlPSJNViIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJleGNsdXNpdmUiIHZhbHVlPSIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idGFnc19saXN0IiB2YWx1ZT0iW3smcXVvdDt0eXBlJnF1b3Q7OiZxdW90O2RlcGFydG1lbnRzJnF1b3Q7LCZxdW90O3ZhbHVlJnF1b3Q7OiZxdW90O1BhcmlzJnF1b3Q7LCZxdW90O25hbWUmcXVvdDs6JnF1b3Q7UGFyaXMgJnF1b3Q7fV0iLz4KICAgIDwvZGl2PgogICAgPGEgY2xhc3M9Im1vcmUgbW9yZS0taG9tZSIgaHJlZj0iIyI+CiAgICAgICAgZGUgY3JpdMOocmVzICAgIDwvYT4KPC9mb3JtPgoKPGRpdiBjbGFzcz0iZm9vdGVyLW1vYmlsZSI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgaWQ9InNlYXJjaC1tb2JpbGUiIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fc2Vjb25kICI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zZWFyY2gtMiI+PC9pPgogICAgICAgICAgICA8c3Bhbj5SZWNoZXJjaGU8L3NwYW4+CiAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX19hbGVydCBidXR0b25fX21lZGl1bSBidXR0b25fX2FsZXJ0X19tb2JpbGUiCiAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbG9naW4iCiAgICAgICAgICAgICAgICAgICAgZGF0YS10YWI9ImxvZ2luLXRhYiIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXJpbmciPjwvaT4KICAgICAgICAgICAgICAgIDxzcGFuPkNyw6llciB1bmUgYWxlcnRlPC9zcGFuPgogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgoKCiAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsLXJlc3VsdCI+CiAgICAKCjwvZGl2Pgo8ZGl2IGNsYXNzPSJsLXJlc3VsdCIgc3R5bGU9PgogICAgPGRpdiBjbGFzcz0ibGVmdCI+CiAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxODEgcsOpc3VsdGF0cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJhY3RpdmUgaXRlbS1nYWxlcmllIGhpZGRlbi14cyIKICAgICAgICAgICAgICAgdGl0bGU9IlZvaXIgZW4gZ2FsZXJpZSI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLXdpbmRvdyI+PC9pPiBHYWxlcmllPC9hPgogICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iIGl0ZW0tbGlzdCBoaWRkZW4teHMiCiAgICAgICAgICAgICAgIHRpdGxlPSJWb2lyIGVuIGxpc3RlIj48aQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGVtby1pY29uIGljb24tbWVudSI+PC9pPiBMaXN0ZTwvYT4KICAgICAgICAgICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icmlnaHQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvY2stbWFwLW1vYmlsZSIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPgogICAgICAgICAgICA8YSBocmVmPSIiIG9uY2xpY2s9InRvU2VsbEdvb2RzKCkiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNtb2RhbC1tYXAiCiAgICAgICAgICAgICAgIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhbCBmYS1tYXAtbWFya2VkLWFsdCI+PC9pPgogICAgICAgICAgICA8L2E+CgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBkYXRhLW5hbWU9IlRyaWUiIGNsYXNzPSJjLXNlbGVjdCBzb3J0X19maWx0ZXIiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+UHJpeCBjcm9pc3NhbnQ8L2E+CgogICAgICAgICAgICAgICAgPHVsIGlkPSJzZWFyY2hTb3J0IiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgPGxpICBjbGFzcz0iIHNvcnRhYmxlIiAgZGF0YS11cmw9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP2dlbmVyaWNfdHlwZSU1QjAlNUQ9QVAmYW1wO2dlbmVyaWNfdHlwZSU1QjElNUQ9TVYmYW1wO3N1cmZhY2VfbWluPSZhbXA7c3VyZmFjZV9tYXg9JmFtcDtwcmljZV9taW49JmFtcDtwcmljZV9tYXg9JmFtcDtpZD0mYW1wO2RlcGFydG1lbnRzPVBhcmlzJmFtcDt0YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmRlcGFydG1lbnRzJTIyJTJDJTIydmFsdWUlMjIlM0ElMjJQYXJpcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJQYXJpcyUyMCUyMiU3RCU1RCZhbXA7dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7ZnJlcXVlbmN5PUpvdXJuYWxpJUMzJUE4cmUmYW1wO3NvcnQ9YWQucHJpY2UmYW1wO2Rpcj1hc2MmYW1wO3BhZ2U9MSI+UHJpeCBjcm9pc3NhbnQ8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGkgIGNsYXNzPSIgc29ydGFibGUiICBkYXRhLXVybD0iL3JlY2hlcmNoZXIvYW5ub25jZXM/Z2VuZXJpY190eXBlJTVCMCU1RD1BUCZhbXA7Z2VuZXJpY190eXBlJTVCMSU1RD1NViZhbXA7c3VyZmFjZV9taW49JmFtcDtzdXJmYWNlX21heD0mYW1wO3ByaWNlX21pbj0mYW1wO3ByaWNlX21heD0mYW1wO2lkPSZhbXA7ZGVwYXJ0bWVudHM9UGFyaXMmYW1wO3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZGVwYXJ0bWVudHMlMjIlMkMlMjJ2YWx1ZSUyMiUzQSUyMlBhcmlzJTIyJTJDJTIybmFtZSUyMiUzQSUyMlBhcmlzJTIwJTIyJTdEJTVEJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDtmcmVxdWVuY3k9Sm91cm5hbGklQzMlQThyZSZhbXA7c29ydD1hZC5wcmljZSZhbXA7ZGlyPWRlc2MmYW1wO3BhZ2U9MSI+UHJpeCBkw6ljcm9pc3NhbnQ8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGkgIGNsYXNzPSJzZWxlY3RlZCBkZXNjIiAgZGF0YS11cmw9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP2dlbmVyaWNfdHlwZSU1QjAlNUQ9QVAmYW1wO2dlbmVyaWNfdHlwZSU1QjElNUQ9TVYmYW1wO3N1cmZhY2VfbWluPSZhbXA7c3VyZmFjZV9tYXg9JmFtcDtwcmljZV9taW49JmFtcDtwcmljZV9tYXg9JmFtcDtpZD0mYW1wO2RlcGFydG1lbnRzPVBhcmlzJmFtcDt0YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmRlcGFydG1lbnRzJTIyJTJDJTIydmFsdWUlMjIlM0ElMjJQYXJpcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJQYXJpcyUyMCUyMiU3RCU1RCZhbXA7dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7ZnJlcXVlbmN5PUpvdXJuYWxpJUMzJUE4cmUmYW1wO3NvcnQ9YWQuZmlyc3RQdWJsaXNoRGF0ZSZhbXA7ZGlyPWFzYyZhbXA7cGFnZT0xIj5MZXMgcGx1cyByw6ljZW50czwvbGk+CgogICAgICAgICAgICAgICAgICAgIDxsaSAgY2xhc3M9IiBkZXNjIiAgZGF0YS11cmw9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP2dlbmVyaWNfdHlwZSU1QjAlNUQ9QVAmYW1wO2dlbmVyaWNfdHlwZSU1QjElNUQ9TVYmYW1wO3N1cmZhY2VfbWluPSZhbXA7c3VyZmFjZV9tYXg9JmFtcDtwcmljZV9taW49JmFtcDtwcmljZV9tYXg9JmFtcDtpZD0mYW1wO2RlcGFydG1lbnRzPVBhcmlzJmFtcDt0YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmRlcGFydG1lbnRzJTIyJTJDJTIydmFsdWUlMjIlM0ElMjJQYXJpcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJQYXJpcyUyMCUyMiU3RCU1RCZhbXA7dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7ZnJlcXVlbmN5PUpvdXJuYWxpJUMzJUE4cmUmYW1wO3NvcnQ9YWQuZmlyc3RQdWJsaXNoRGF0ZSZhbXA7ZGlyPWFzYyZhbXA7cGFnZT0xIj5MZXMgbW9pbnMgcsOpY2VudHM8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGkgIGNsYXNzPSIgc29ydGFibGUiICBkYXRhLXVybD0iL3JlY2hlcmNoZXIvYW5ub25jZXM/Z2VuZXJpY190eXBlJTVCMCU1RD1BUCZhbXA7Z2VuZXJpY190eXBlJTVCMSU1RD1NViZhbXA7c3VyZmFjZV9taW49JmFtcDtzdXJmYWNlX21heD0mYW1wO3ByaWNlX21pbj0mYW1wO3ByaWNlX21heD0mYW1wO2lkPSZhbXA7ZGVwYXJ0bWVudHM9UGFyaXMmYW1wO3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZGVwYXJ0bWVudHMlMjIlMkMlMjJ2YWx1ZSUyMiUzQSUyMlBhcmlzJTIyJTJDJTIybmFtZSUyMiUzQSUyMlBhcmlzJTIwJTIyJTdEJTVEJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDtmcmVxdWVuY3k9Sm91cm5hbGklQzMlQThyZSZhbXA7c29ydD1hZC5zdXJmYWNlJmFtcDtkaXI9YXNjJmFtcDtwYWdlPTEiPlN1cmZhY2UgY3JvaXNzYW50PC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpICBjbGFzcz0iIHNvcnRhYmxlIiAgZGF0YS11cmw9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP2dlbmVyaWNfdHlwZSU1QjAlNUQ9QVAmYW1wO2dlbmVyaWNfdHlwZSU1QjElNUQ9TVYmYW1wO3N1cmZhY2VfbWluPSZhbXA7c3VyZmFjZV9tYXg9JmFtcDtwcmljZV9taW49JmFtcDtwcmljZV9tYXg9JmFtcDtpZD0mYW1wO2RlcGFydG1lbnRzPVBhcmlzJmFtcDt0YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmRlcGFydG1lbnRzJTIyJTJDJTIydmFsdWUlMjIlM0ElMjJQYXJpcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJQYXJpcyUyMCUyMiU3RCU1RCZhbXA7dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7ZnJlcXVlbmN5PUpvdXJuYWxpJUMzJUE4cmUmYW1wO3NvcnQ9YWQuc3VyZmFjZSZhbXA7ZGlyPWRlc2MmYW1wO3BhZ2U9MSI+U3VyZmFjZSBkw6ljcm9pc3NhbnQ8L2xpPgoKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImwtcmVzdWx0X19saXN0IHJvdyAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0zLXBpZWNlcy1wYXJpcy0xMjhtMi9yNzUyMTE5P19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1ob2xkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MzAzOC5qcGciCiAgICAgICAgICAgICAgICAgICAgIGFsdD0iUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MzAzOC5qcGciIGNsYXNzPSJsYXp5Ii8+CgkJCQkJPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fbmV3Ij5Ob3V2ZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fcHJlc3RpZ2UiPlByZXN0aWdlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fZXhjbHVzaXZpdGUiPkV4Y2x1c2l2aXTDqTwvc3Bhbj4KICAgIAogICAgPC9kaXY+CiAgICA8c3BhbiBjbGFzcz0iYy1vZmZlcl9fZmF2Ij4KICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMy1waWVjZXMtcGFyaXMtMTI4bTIvcjc1MjExOT9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJHdWlsbGF1bWUgRFVDSEVTTkUiIGl0ZW1wcm9wPSJzYW1lQXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FnZW50X3Bob3RvX3RodW1iL2F2YXRhci8xODUwMDA0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9Ikd1aWxsYXVtZSBEVUNIRVNORSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTEyOG0yL3I3NTIxMTk/X2xvY2FsZT1mciI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IGRlIDEyOCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fZmF2b3JpdGVzICIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4tMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGlzdHJpY3Q/dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJncF9pZCUyMiUyQyUyMnZhbHVlJTIyJTNBMjA0MzMyMzgxOCUyQyUyMm5hbWUlMjIlM0ElMjJQQVJJUyUyQiUyODc1MDE3JTI5JTJCUGFyaXMlMkIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCZhbXA7Z3BfaWQ9MjA0MzMyMzgxOCI+UEFSSVMgKDc1MDE3KTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Sw6lmw6lyZW5jZSA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNzUyMTE5CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIDU5OCA4NTAgPHNwYW4+JmV1cm87PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0IGMtb2ZmZXJfX2Rlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpYWQgRnJhbmNlIC0gR3VpbGxhdW1lIERVQ0hFU05FICgwNiAxNCA1OCA1OSAzMikgdm91cyBwcm9wb3NlIDogUGFyaXMgMTfDqG1lIC0gQm91bGV2YXJkIGRlcyBCYXRpZ25vbGxlcyAtIEVuIGNldHRlIHDDqXJpb2RlIGRlIGNvbmZpbmVtZW50LCBqZSByZXN0ZSBkaXNwb25pYmxlIGV0IHLDqWFjdGlmIMOgIHRvdXRlIGRlbWFuZGUgZGUgdm90cmUgcGFydCBldCB2b3VzIHByb3Bvc2UgOiBBdSA1w6htZSDDqXRhZ2UgZCYjMDM5O3VuIGltbWV1YmxlIGhhdXMuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDEyOCBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0zIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPiA8c3Bhbj4yPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL0dVSUxMQVVNRS5EVUNIRVNORSIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnNlaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3RleiB2b3RyZSBjb25zZWlsbGVyPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlc3RhdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW1nIGMtb2ZmZXJfX2ltZ19mciIgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtNS1waWVjZXMtcGFyaXMtMTM4bTIvcjc2MjEwOS0xP19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1ob2xkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MjEyMi5qcGciCiAgICAgICAgICAgICAgICAgICAgIGFsdD0iUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MjEyMi5qcGciIGNsYXNzPSJsYXp5Ii8+CgkJCQkJPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fbmV3Ij5Ob3V2ZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fcHJlc3RpZ2UiPlByZXN0aWdlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIAogICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fcHJvZmlsIGMtb2ZmZXJfX3Byb2ZpbF9pbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTUtcGllY2VzLXBhcmlzLTEzOG0yL3I3NjIxMDktMT9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJNYXJpZSBNSVFVRUFVIiBpdGVtcHJvcD0ic2FtZUFzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZ2VudF9waG90b190aHVtYi9hdmF0YXIvMTg1NDE4NC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJNYXJpZSBNSVFVRUFVIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IGltZyIgaXRlbXByb3A9ImltYWdlIj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbmFtZSI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjLW9mZmVyX190aXRsZSIgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtNS1waWVjZXMtcGFyaXMtMTM4bTIvcjc2MjEwOS0xP19sb2NhbGU9ZnIiPgogICAgICAgICAgICAgICAgICAgICAgICBEdXBsZXggZGUgMTM4IG3CsiAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjU4MzElMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMyUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjU4MzEiPlBBUklTICg3NTAxMyk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc2MjEwOS0xCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIDYwMCAwMDAgPHNwYW4+JmV1cm87PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0IGMtb2ZmZXJfX2Rlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpYWQgRnJhbmNlIC0gTWFyaWUgTUlRVUVBVSAoMDYgMzIgNzkgMDQgNDYpIHZvdXMgcHJvcG9zZSA6IFBBUklTIDEzIC8gUVVBUlRJRVIgQk5GIC8gIFJFUiBDIC8gTUVUUk8gMTQvIFQzYSBMRSBRVUFSVElFUjogTGEgQk5GLCBs4oCZdW5pdmVyc2l0w6kgRGlkZXJvdCwgbGVzIEZyaWdvcywgbGUgY2luw6ltYSBNSzLigKYuLmJpZW52ZW51ZSBkYW5zIGxhIGp1bmdsZSB1cmJhaW5lIGRlIGNlIHF1YXJ0aWVyIGR1IDEzw6htZSBhcnJvbmRpc3NlbWVudC4uLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZm9vdGVyIHJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4gMTM4IG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL01BUklFLk1JUVVFQVUiIGNsYXNzPSJidXR0b24gYnV0dG9uX19tZWRpdW0gYnV0dG9uX19jb25zZWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0ZXogdm90cmUgY29uc2VpbGxlcjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXN0YXRlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ltZyBjLW9mZmVyX19pbWdfZnIiICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLXBpZWNlLXBhcmlzLTMybTIvcjc2MjEwOS0yP19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1ob2xkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MjEzMi5qcGciCiAgICAgICAgICAgICAgICAgICAgIGFsdD0iUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MjEzMi5qcGciIGNsYXNzPSJsYXp5Ii8+CgkJCQkJPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fbmV3Ij5Ob3V2ZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtcGllY2UtcGFyaXMtMzJtMi9yNzYyMTA5LTI/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iTWFyaWUgTUlRVUVBVSIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NTQxODQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iTWFyaWUgTUlRVUVBVSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLXBpZWNlLXBhcmlzLTMybTIvcjc2MjEwOS0yP19sb2NhbGU9ZnIiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSAzMiBtwrIgLSBQQVJJUwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uX19mYXZvcml0ZXMgIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbG9naW4iIGRhdGEtdGFiPSJyZWdpc3Rlci10YWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19sb2NhbGl6YXRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpbi0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9kaXN0cmljdD90YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmdwX2lkJTIyJTJDJTIydmFsdWUlMjIlM0EyMDQzMzI1ODMxJTJDJTIybmFtZSUyMiUzQSUyMlBBUklTJTJCJTI4NzUwMTMlMjklMkJQYXJpcyUyQiU1Q3UwMGNlbGUtZGUtRnJhbmNlJTIyJTdEJTVEJmFtcDtncF9pZD0yMDQzMzI1ODMxIj5QQVJJUyAoNzUwMTMpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3JlX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX190aW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlLDqWbDqXJlbmNlIDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3NjIxMDktMgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTIwIDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBNYXJpZSBNSVFVRUFVICgwNiAzMiA3OSAwNCA0Nikgdm91cyBwcm9wb3NlIDogUEFSSVMgMTMgLyBRVUFSVElFUiBCTkYgLyAgUkVSIEMgLyBNRVRSTyAxNC8gVDNhIExFIFFVQVJUSUVSOiBMYSBCTkYsIGzigJl1bml2ZXJzaXTDqSBEaWRlcm90LCBsZXMgRnJpZ29zLCBsZSBjaW7DqW1hIE1LMuKApi4uYmllbnZlbnVlIGRhbnMgbGEganVuZ2xlIHVyYmFpbmUgZGUgY2UgcXVhcnRpZXIgZHUgMTPDqG1lIGFycm9uZGlzc2VtZW50Li4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiAzMiBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9NQVJJRS5NSVFVRUFVIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy00OG0yL3I3NjIxMDktMz9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctaG9sZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI5NDIxNDQuanBnIgogICAgICAgICAgICAgICAgICAgICBhbHQ9IlBBUklTIgogICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI5NDIxNDQuanBnIiBjbGFzcz0ibGF6eSIvPgoJCQkJCTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX25ldyI+Tm91dmVhdTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fcHJvZmlsIGMtb2ZmZXJfX3Byb2ZpbF9pbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTItcGllY2VzLXBhcmlzLTQ4bTIvcjc2MjEwOS0zP19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9Ik1hcmllIE1JUVVFQVUiIGl0ZW1wcm9wPSJzYW1lQXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FnZW50X3Bob3RvX3RodW1iL2F2YXRhci8xODU0MTg0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9Ik1hcmllIE1JUVVFQVUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkgaW1nIiBpdGVtcHJvcD0iaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19uYW1lIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImMtb2ZmZXJfX3RpdGxlIiBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy00OG0yL3I3NjIxMDktMz9fbG9jYWxlPWZyIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgNDggbcKyIC0gUEFSSVMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fZmF2b3JpdGVzICIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4tMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGlzdHJpY3Q/dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJncF9pZCUyMiUyQyUyMnZhbHVlJTIyJTNBMjA0MzMyNTgzMSUyQyUyMm5hbWUlMjIlM0ElMjJQQVJJUyUyQiUyODc1MDEzJTI5JTJCUGFyaXMlMkIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCZhbXA7Z3BfaWQ9MjA0MzMyNTgzMSI+UEFSSVMgKDc1MDEzKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Sw6lmw6lyZW5jZSA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNzYyMTA5LTMKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3ByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU3NiAwMDAgPHNwYW4+JmV1cm87PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0IGMtb2ZmZXJfX2Rlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpYWQgRnJhbmNlIC0gTWFyaWUgTUlRVUVBVSAoMDYgMzIgNzkgMDQgNDYpIHZvdXMgcHJvcG9zZSA6IFBBUklTIDEzIC8gUVVBUlRJRVIgQk5GIC8gIFJFUiBDIC8gTUVUUk8gMTQvIFQzYSBMRSBRVUFSVElFUjogTGEgQk5GLCBs4oCZdW5pdmVyc2l0w6kgRGlkZXJvdCwgbGVzIEZyaWdvcywgbGUgY2luw6ltYSBNSzLigKYuLmJpZW52ZW51ZSBkYW5zIGxhIGp1bmdsZSB1cmJhaW5lIGRlIGNlIHF1YXJ0aWVyIGR1IDEzw6htZSBhcnJvbmRpc3NlbWVudC4uLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZm9vdGVyIHJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4gNDggbcKyPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGllY2UtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvTUFSSUUuTUlRVUVBVSIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnNlaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3RleiB2b3RyZSBjb25zZWlsbGVyPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlc3RhdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW1nIGMtb2ZmZXJfX2ltZ19mciIgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMy1waWVjZXMtcGFyaXMtOTVtMi9yNzYyMTA5LTQ/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTQyMTU2LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTQyMTU2LmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19uZXciPk5vdXZlYXU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19wcmVzdGlnZSI+UHJlc3RpZ2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMy1waWVjZXMtcGFyaXMtOTVtMi9yNzYyMTA5LTQ/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iTWFyaWUgTUlRVUVBVSIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NTQxODQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iTWFyaWUgTUlRVUVBVSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTk1bTIvcjc2MjEwOS00P19sb2NhbGU9ZnIiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSA5NSBtwrIgLSBQQVJJUwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uX19mYXZvcml0ZXMgIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbG9naW4iIGRhdGEtdGFiPSJyZWdpc3Rlci10YWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19sb2NhbGl6YXRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpbi0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9kaXN0cmljdD90YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmdwX2lkJTIyJTJDJTIydmFsdWUlMjIlM0EyMDQzMzI1ODMxJTJDJTIybmFtZSUyMiUzQSUyMlBBUklTJTJCJTI4NzUwMTMlMjklMkJQYXJpcyUyQiU1Q3UwMGNlbGUtZGUtRnJhbmNlJTIyJTdEJTVEJmFtcDtncF9pZD0yMDQzMzI1ODMxIj5QQVJJUyAoNzUwMTMpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3JlX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX190aW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlLDqWbDqXJlbmNlIDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3NjIxMDktNAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSA1NzAgMDAwIDxzcGFuPiZldXJvOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCBjLW9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWFkIEZyYW5jZSAtIE1hcmllIE1JUVVFQVUgKDA2IDMyIDc5IDA0IDQ2KSB2b3VzIHByb3Bvc2UgOiBQQVJJUyAxMyAvIFFVQVJUSUVSIEJORiAvICBSRVIgQyAvIE1FVFJPIDE0LyBUM2EgTEUgUVVBUlRJRVI6IExhIEJORiwgbOKAmXVuaXZlcnNpdMOpIERpZGVyb3QsIGxlcyBGcmlnb3MsIGxlIGNpbsOpbWEgTUsy4oCmLi5iaWVudmVudWUgZGFucyBsYSBqdW5nbGUgdXJiYWluZSBkZSBjZSBxdWFydGllciBkdSAxM8OobWUgYXJyb25kaXNzZW1lbnQuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDk1IG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL01BUklFLk1JUVVFQVUiIGNsYXNzPSJidXR0b24gYnV0dG9uX19tZWRpdW0gYnV0dG9uX19jb25zZWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0ZXogdm90cmUgY29uc2VpbGxlcjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXN0YXRlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ltZyBjLW9mZmVyX19pbWdfZnIiICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTQtcGllY2VzLXBhcmlzLTEyMm0yL3I3NjIxMDktNT9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctaG9sZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI5NDIxNjguanBnIgogICAgICAgICAgICAgICAgICAgICBhbHQ9IlBBUklTIgogICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI5NDIxNjguanBnIiBjbGFzcz0ibGF6eSIvPgoJCQkJCTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX25ldyI+Tm91dmVhdTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX3ByZXN0aWdlIj5QcmVzdGlnZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAKICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX3Byb2ZpbCBjLW9mZmVyX19wcm9maWxfaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS00LXBpZWNlcy1wYXJpcy0xMjJtMi9yNzYyMTA5LTU/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iTWFyaWUgTUlRVUVBVSIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NTQxODQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iTWFyaWUgTUlRVUVBVSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTQtcGllY2VzLXBhcmlzLTEyMm0yL3I3NjIxMDktNT9fbG9jYWxlPWZyIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgMTIyIG3CsiAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjU4MzElMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMyUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjU4MzEiPlBBUklTICg3NTAxMyk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc2MjEwOS01CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIDMwMCAwMDAgPHNwYW4+JmV1cm87PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0IGMtb2ZmZXJfX2Rlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpYWQgRnJhbmNlIC0gTWFyaWUgTUlRVUVBVSAoMDYgMzIgNzkgMDQgNDYpIHZvdXMgcHJvcG9zZSA6IFBBUklTIDEzIC8gUVVBUlRJRVIgQk5GIC8gIFJFUiBDIC8gTUVUUk8gMTQvIFQzYSBMRSBRVUFSVElFUjogTGEgQk5GLCBs4oCZdW5pdmVyc2l0w6kgRGlkZXJvdCwgbGVzIEZyaWdvcywgbGUgY2luw6ltYSBNSzLigKYuLmJpZW52ZW51ZSBkYW5zIGxhIGp1bmdsZSB1cmJhaW5lIGRlIGNlIHF1YXJ0aWVyIGR1IDEzw6htZSBhcnJvbmRpc3NlbWVudC4uLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZm9vdGVyIHJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4gMTIyIG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL01BUklFLk1JUVVFQVUiIGNsYXNzPSJidXR0b24gYnV0dG9uX19tZWRpdW0gYnV0dG9uX19jb25zZWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0ZXogdm90cmUgY29uc2VpbGxlcjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXN0YXRlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ltZyBjLW9mZmVyX19pbWdfZnIiICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTUtcGllY2VzLXBhcmlzLTE3MW0yL3I3NjIxMDktNj9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctaG9sZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI5NDIxNzguanBnIgogICAgICAgICAgICAgICAgICAgICBhbHQ9IlBBUklTIgogICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI5NDIxNzguanBnIiBjbGFzcz0ibGF6eSIvPgoJCQkJCTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX25ldyI+Tm91dmVhdTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX3ByZXN0aWdlIj5QcmVzdGlnZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAKICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX3Byb2ZpbCBjLW9mZmVyX19wcm9maWxfaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS01LXBpZWNlcy1wYXJpcy0xNzFtMi9yNzYyMTA5LTY/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iTWFyaWUgTUlRVUVBVSIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NTQxODQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iTWFyaWUgTUlRVUVBVSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTUtcGllY2VzLXBhcmlzLTE3MW0yL3I3NjIxMDktNj9fbG9jYWxlPWZyIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgMTcxIG3CsiAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjU4MzElMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMyUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjU4MzEiPlBBUklTICg3NTAxMyk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc2MjEwOS02CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIDkyMCAwMDAgPHNwYW4+JmV1cm87PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0IGMtb2ZmZXJfX2Rlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpYWQgRnJhbmNlIC0gTWFyaWUgTUlRVUVBVSAoMDYgMzIgNzkgMDQgNDYpIHZvdXMgcHJvcG9zZSA6IFBBUklTIDEzIC8gUVVBUlRJRVIgQk5GIC8gIFJFUiBDIC8gTUVUUk8gMTQvIFQzYSBMRSBRVUFSVElFUjogTGEgQk5GLCBs4oCZdW5pdmVyc2l0w6kgRGlkZXJvdCwgbGVzIEZyaWdvcywgbGUgY2luw6ltYSBNSzLigKYuLmJpZW52ZW51ZSBkYW5zIGxhIGp1bmdsZSB1cmJhaW5lIGRlIGNlIHF1YXJ0aWVyIGR1IDEzw6htZSBhcnJvbmRpc3NlbWVudC4uLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZm9vdGVyIHJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4gMTcxIG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL01BUklFLk1JUVVFQVUiIGNsYXNzPSJidXR0b24gYnV0dG9uX19tZWRpdW0gYnV0dG9uX19jb25zZWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0ZXogdm90cmUgY29uc2VpbGxlcjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXN0YXRlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ltZyBjLW9mZmVyX19pbWdfZnIiICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTItcGllY2VzLXBhcmlzLTUwbTIvcjc2MjEwOS03P19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1ob2xkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MjE5MC5qcGciCiAgICAgICAgICAgICAgICAgICAgIGFsdD0iUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MjE5MC5qcGciIGNsYXNzPSJsYXp5Ii8+CgkJCQkJPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fbmV3Ij5Ob3V2ZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMi1waWVjZXMtcGFyaXMtNTBtMi9yNzYyMTA5LTc/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iTWFyaWUgTUlRVUVBVSIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NTQxODQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iTWFyaWUgTUlRVUVBVSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTItcGllY2VzLXBhcmlzLTUwbTIvcjc2MjEwOS03P19sb2NhbGU9ZnIiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSA1MCBtwrIgLSBQQVJJUwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uX19mYXZvcml0ZXMgIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbG9naW4iIGRhdGEtdGFiPSJyZWdpc3Rlci10YWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19sb2NhbGl6YXRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpbi0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9kaXN0cmljdD90YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmdwX2lkJTIyJTJDJTIydmFsdWUlMjIlM0EyMDQzMzI1ODMxJTJDJTIybmFtZSUyMiUzQSUyMlBBUklTJTJCJTI4NzUwMTMlMjklMkJQYXJpcyUyQiU1Q3UwMGNlbGUtZGUtRnJhbmNlJTIyJTdEJTVEJmFtcDtncF9pZD0yMDQzMzI1ODMxIj5QQVJJUyAoNzUwMTMpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3JlX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX190aW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlLDqWbDqXJlbmNlIDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3NjIxMDktNwogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgODA2IDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBNYXJpZSBNSVFVRUFVICgwNiAzMiA3OSAwNCA0Nikgdm91cyBwcm9wb3NlIDogUEFSSVMgMTMgLyBRVUFSVElFUiBCTkYgLyAgUkVSIEMgLyBNRVRSTyAxNC8gVDNhIExFIFFVQVJUSUVSOiBMYSBCTkYsIGzigJl1bml2ZXJzaXTDqSBEaWRlcm90LCBsZXMgRnJpZ29zLCBsZSBjaW7DqW1hIE1LMuKApi4uYmllbnZlbnVlIGRhbnMgbGEganVuZ2xlIHVyYmFpbmUgZGUgY2UgcXVhcnRpZXIgZHUgMTPDqG1lIGFycm9uZGlzc2VtZW50Li4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiA1MCBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9NQVJJRS5NSVFVRUFVIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS1waWVjZS1wYXJpcy0zM20yL3I3NDI1NTg/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTM4OTk3LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTM4OTk3LmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19jb21wcm9taXMiPlNvdXMgY29tcHJvbWlzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtcGllY2UtcGFyaXMtMzNtMi9yNzQyNTU4P19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkNvcmlubmUgTU9VR0VPVCIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NTQ0MDAuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQ29yaW5uZSBNT1VHRU9UIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IGltZyIgaXRlbXByb3A9ImltYWdlIj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbmFtZSI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjLW9mZmVyX190aXRsZSIgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtcGllY2UtcGFyaXMtMzNtMi9yNzQyNTU4P19sb2NhbGU9ZnIiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSAzMyBtwrIgLSBQQVJJUwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uX19mYXZvcml0ZXMgaGlkZWZhdm9yaSIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4tMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGlzdHJpY3Q/dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJncF9pZCUyMiUyQyUyMnZhbHVlJTIyJTNBMjA0MzMyODc4NiUyQyUyMm5hbWUlMjIlM0ElMjJQQVJJUyUyQiUyODc1MDE1JTI5JTJCUGFyaXMlMkIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCZhbXA7Z3BfaWQ9MjA0MzMyODc4NiI+UEFSSVMgKDc1MDE1KTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Sw6lmw6lyZW5jZSA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNzQyNTU4CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MTAgMDAwIDxzcGFuPiZldXJvOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCBjLW9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWFkIEZyYW5jZSAtIENvcmlubmUgTU9VR0VPVCAoMDYgMjcgNTYgNTEgNTApIHZvdXMgcHJvcG9zZSA6IEdyYW5kIHN0dWRpbyBhdmVjIHRlcnJhc3NlIHNpdHXDqSBhdSA3w6htZSDDqXRhZ2UuIMOAIHByb3hpbWl0w6kgZGVzIGNvbW1lcmNlcyBldCBkdSBtw6l0cm8gVm9sb250YWlyZXMuIFJhZnJhw65jaGlzc2VtZW50IMOgIHByw6l2b2lyLiBVbmUgY2F2ZSBldCB1bmUgcGxhY2UgZGUgcGFya2luZyBkYW5zIGwmIzAzOTtpbW1ldWJsZSBjb21wbMOodGUgY2UgYi4uLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZm9vdGVyIHJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4gMzMgbcKyPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGllY2UtMSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvQ09SSU5ORS5NT1VHRU9UIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9sb2Z0LWF0ZWxpZXItc3VyZmFjZS12ZW50ZS00LXBpZWNlcy1wYXJpcy0xMDltMi9yNzU5MjUwP19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1ob2xkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83MjkzNzM4MS5qcGciCiAgICAgICAgICAgICAgICAgICAgIGFsdD0iUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83MjkzNzM4MS5qcGciIGNsYXNzPSJsYXp5Ii8+CgkJCQkJPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fbmV3Ij5Ob3V2ZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvbG9mdC1hdGVsaWVyLXN1cmZhY2UtdmVudGUtNC1waWVjZXMtcGFyaXMtMTA5bTIvcjc1OTI1MD9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJKdWxpZXR0ZSBNVVJBQ0NJT0xFIiBpdGVtcHJvcD0ic2FtZUFzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZ2VudF9waG90b190aHVtYi9hdmF0YXIvMTg1NDQ1OC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJKdWxpZXR0ZSBNVVJBQ0NJT0xFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IGltZyIgaXRlbXByb3A9ImltYWdlIj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbmFtZSI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjLW9mZmVyX190aXRsZSIgaHJlZj0iL2Fubm9uY2UvbG9mdC1hdGVsaWVyLXN1cmZhY2UtdmVudGUtNC1waWVjZXMtcGFyaXMtMTA5bTIvcjc1OTI1MD9fbG9jYWxlPWZyIj4KICAgICAgICAgICAgICAgICAgICAgICAgTG9mdCBkZSAxMDkgbcKyIC0gMyBjaGFtYnJlcyAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjQyNjQlMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMSUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjQyNjQiPlBBUklTICg3NTAxMSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc1OTI1MAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgODYwIDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBKdWxpZXR0ZSBNVVJBQ0NJT0xFICgwNiA1OCAwOSAxNSA2Nykgdm91cyBwcm9wb3NlIDogUGFyaXMgMTHDqG1lLCBNw6l0cm8gUGFybWVudGllciBldCBDb3Vyb25uZXNBdSByZXotZGUtY2hhdXNzw6llIGTigJl1biBpbW1ldWJsZSBhbmNpZW4sIHZlbmV6IGTDqWNvdXZyaXIgdW4gbGlldSBhdHlwaXF1ZSAsIHVuZSBhZ2VuY2UgZOKAmWFyY2hpdGVjdHVyZSBkZSAxMDkgbTIgZW52aXJvbiB0cmFuc2Zvcm1hYmxlcyBlbiBMb2Z0Li4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiAxMDkgbcKyPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGllY2UtNCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4gPHNwYW4+Mzwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9KVUxJRVRURS5NVVJBQ0NJT0xFIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy0yN20yL3I3NTYzMTc/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTI5NTQ5LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTI5NTQ5LmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19uZXciPk5vdXZlYXU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2V4Y2x1c2l2aXRlIj5FeGNsdXNpdml0w6k8L3NwYW4+CiAgICAKICAgIDwvZGl2PgogICAgPHNwYW4gY2xhc3M9ImMtb2ZmZXJfX2ZhdiI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fcHJvZmlsIGMtb2ZmZXJfX3Byb2ZpbF9pbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTItcGllY2VzLXBhcmlzLTI3bTIvcjc1NjMxNz9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJZdmVzIEtPSyIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NTIzMDIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iWXZlcyBLT0siCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkgaW1nIiBpdGVtcHJvcD0iaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19uYW1lIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImMtb2ZmZXJfX3RpdGxlIiBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy0yN20yL3I3NTYzMTc/X2xvY2FsZT1mciI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IGRlIDI3IG3CsiAtIDEgY2hhbWJyZSAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjU0OTElMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxOSUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjU0OTEiPlBBUklTICg3NTAxOSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc1NjMxNwogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjc5IDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBZdmVzIEtPSyAoMDYgNjMgMjIgMjQgOTUpIHZvdXMgcHJvcG9zZSA6ICoqKiBESVNQT1NJVElPTlMgQ09WSUQgMTksIHBsdXMgZCYjMDM5O2luZm9zIGVuIG1lIGNvbnRhY3RhbnQgKioqIFBhcmlzIDE5w6htZSwgw6AgNCBtaW51dGVzIGR1IG3DqXRybyBDUklNRUUsIHBhc3NhZ2UgcGVycGVuZGljdWxhaXJlIMOgIGxhIHJ1ZSBDdXJpYWwuIENvdXAgZGUgY29ldXIgcG91ciBjZSBkZXV4IHBpw6hjZXMgZGUgc3RhbmRpbmcgISBFbiByLi4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiAyNyBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPiA8c3Bhbj4xPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL1lWRVMuS09LIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS1waWVjZS1wYXJpcy0xMG0yL3I3NTUwMjc/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTI5NTE5LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyOTI5NTE5LmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19uZXciPk5vdXZlYXU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX3Byb2ZpbCBjLW9mZmVyX19wcm9maWxfaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS1waWVjZS1wYXJpcy0xMG0yL3I3NTUwMjc/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUmFjaGlkIEFNTU9VUiIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NDYzNzQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iUmFjaGlkIEFNTU9VUiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLXBpZWNlLXBhcmlzLTEwbTIvcjc1NTAyNz9fbG9jYWxlPWZyIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgMTAgbcKyIC0gMSBjaGFtYnJlIC0gUEFSSVMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fZmF2b3JpdGVzICIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4tMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGlzdHJpY3Q/dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJncF9pZCUyMiUyQyUyMnZhbHVlJTIyJTNBMjA0MzMyNzkwMSUyQyUyMm5hbWUlMjIlM0ElMjJQQVJJUyUyQiUyODc1MDA4JTI5JTJCUGFyaXMlMkIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCZhbXA7Z3BfaWQ9MjA0MzMyNzkwMSI+UEFSSVMgKDc1MDA4KTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Sw6lmw6lyZW5jZSA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNzU1MDI3CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxODUgMDAwIDxzcGFuPiZldXJvOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCBjLW9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWFkIEZyYW5jZSAtIFJhY2hpZCBBTU1PVVIgKDA2IDE5IDg2IDM0IDE1KSB2b3VzIHByb3Bvc2UgOiBBdSBjb2V1ciBsZSB0cmlhbmdsZSBkJiMwMzk7T3IgcGFyaXNpZW4sIGNvdXJzIEFsYmVydCAxZXIsIGNoYW1icmUgZGUgOSw1bcKyIGVudmlyb24gcsOpbm92w6llIGV0IHNpdHXDqWUgYXUgMWVyIMOpdGFnZSBkJiMwMzk7dW4gaW1tZXVibGUgZGUgOCDDqXRhZ2UuIEEgcXVlbHF1ZXMgcGFzIGRlcyBDaGFtcHMtRWx5c8OpZXMsIGlkw6lhbCBwb3VyIHVuIHBpZWQgw6AuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDEwIG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+IDxzcGFuPjE8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvUkFDSElELkFNTU9VUiIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnNlaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3RleiB2b3RyZSBjb25zZWlsbGVyPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlc3RhdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW1nIGMtb2ZmZXJfX2ltZ19mciIgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMy1waWVjZXMtcGFyaXMtNjdtMi9yNzYxOTg5P19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1ob2xkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MDAwMi5qcGciCiAgICAgICAgICAgICAgICAgICAgIGFsdD0iUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83Mjk0MDAwMi5qcGciIGNsYXNzPSJsYXp5Ii8+CgkJCQkJPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fbmV3Ij5Ob3V2ZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KICAgIDxzcGFuIGNsYXNzPSJjLW9mZmVyX19mYXYiPgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX3Byb2ZpbCBjLW9mZmVyX19wcm9maWxfaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0zLXBpZWNlcy1wYXJpcy02N20yL3I3NjE5ODk/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iTG/Dr2MgREVMTkVTVEUiIGl0ZW1wcm9wPSJzYW1lQXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FnZW50X3Bob3RvX3RodW1iL2F2YXRhci8xODQ5NTAwLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9Ikxvw69jIERFTE5FU1RFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IGltZyIgaXRlbXByb3A9ImltYWdlIj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbmFtZSI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjLW9mZmVyX190aXRsZSIgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMy1waWVjZXMtcGFyaXMtNjdtMi9yNzYxOTg5P19sb2NhbGU9ZnIiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSA2NyBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fZmF2b3JpdGVzICIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4tMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGlzdHJpY3Q/dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJncF9pZCUyMiUyQyUyMnZhbHVlJTIyJTNBMjA0MzMyOTAwMCUyQyUyMm5hbWUlMjIlM0ElMjJQQVJJUyUyQiUyODc1MDA5JTI5JTJCUGFyaXMlMkIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCZhbXA7Z3BfaWQ9MjA0MzMyOTAwMCI+UEFSSVMgKDc1MDA5KTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Sw6lmw6lyZW5jZSA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNzYxOTg5CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA4MjYgMDAwIDxzcGFuPiZldXJvOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCBjLW9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWFkIEZyYW5jZSAtIExvw69jIERFTE5FU1RFICgwNyA4MyAyOCAwNyA4OSkgdm91cyBwcm9wb3NlIDogUlVFIENPTkRPUkNFVCwgYXUgM8OobWUgw6l0YWdlIGF2ZWMgYXNjZW5zZXVyIGQmIzAzOTt1biBiZWwgaW1tZXVibGUgSGF1c3NtYW5pZW4gZGUgMTkxMC4gQXBwYXJ0ZW1lbnQgMyBwacOoY2VzIGRlIDY3bTIgZW52aXJvbiDDoCByw6lub3ZlciBlbnRpw6hyZW1lbnQsIGNvbXByZW5hbnQgdW5lIGVudHLDqWUsIHVuIGTDqWJhcnJhcywgdW5lIGN1aXNpbmUuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDY3IG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+IDxzcGFuPjI8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvTE9JQy5ERUxORVNURSIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnNlaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3RleiB2b3RyZSBjb25zZWlsbGVyPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlc3RhdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW1nIGMtb2ZmZXJfX2ltZ19mciIgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMy1waWVjZXMtcGFyaXMtNjFtMi9yNzYwNDM2P19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1ob2xkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83MjkxNzEyNS5qcGciCiAgICAgICAgICAgICAgICAgICAgIGFsdD0iUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJpbWFnZSIKICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b19zbWFsbC9waG90by83MjkxNzEyNS5qcGciIGNsYXNzPSJsYXp5Ii8+CgkJCQkJPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWJib25zIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fbmV3Ij5Ob3V2ZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19leGNsdXNpdml0ZSI+RXhjbHVzaXZpdMOpPC9zcGFuPgogICAgCiAgICA8L2Rpdj4KICAgIDxzcGFuIGNsYXNzPSJjLW9mZmVyX19mYXYiPgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX3Byb2ZpbCBjLW9mZmVyX19wcm9maWxfaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0zLXBpZWNlcy1wYXJpcy02MW0yL3I3NjA0MzY/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iQ2hyeXN0ZWxsZSBBVUdFTkRSRSIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NDY1NzQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQ2hyeXN0ZWxsZSBBVUdFTkRSRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTYxbTIvcjc2MDQzNj9fbG9jYWxlPWZyIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgNjEgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjg5MTklMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMiUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjg5MTkiPlBBUklTICg3NTAxMik8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc2MDQzNgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNjYwIDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBDaHJ5c3RlbGxlIEFVR0VORFJFICgwNiA4MiA1NyA3OCA2Mikgdm91cyBwcm9wb3NlIDogQmVsIGFwcGFydGVtZW50IHBhcmlzaWVuIGRlIDYxTTIgZW52aXJvbiBhdmVjIDMgcGnDqGNlcyBkYW5zIHVuIGltbWV1YmxlIGRlcyBhbm7DqWVzIDUwIMOgIHNhaXNpciByYXBpZGVtZW50ICEgQXUgNMOobWUgw6l0YWdlIGF2ZWMgdW5lIHZ1ZSBkw6lnYWfDqWUsIGFzY2Vuc2V1ciBldCBnYXJkaWVuLCB2b3VzIGRpc3Bvc2VyZXogZGUuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDYxIG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+IDxzcGFuPjI8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvQ0hSWVNURUxMRS5BVUdFTkRSRSIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnNlaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3RleiB2b3RyZSBjb25zZWlsbGVyPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlc3RhdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW1nIGMtb2ZmZXJfX2ltZ19mciIgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvbWFpc29uLXZpbGxhLXZlbnRlLTItcGllY2VzLXBhcmlzLTI5bTIvcjc0MTY5Mz9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctaG9sZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI4ODg4MDQuanBnIgogICAgICAgICAgICAgICAgICAgICBhbHQ9IlBBUklTIgogICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI4ODg4MDQuanBnIiBjbGFzcz0ibGF6eSIvPgoJCQkJCTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2NvbXByb21pcyI+U291cyBjb21wcm9taXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZmF2IiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX3Byb2ZpbCBjLW9mZmVyX19wcm9maWxfaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9tYWlzb24tdmlsbGEtdmVudGUtMi1waWVjZXMtcGFyaXMtMjltMi9yNzQxNjkzP19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkFudG9pbmUgQ0FJTExFQVVEIiBpdGVtcHJvcD0ic2FtZUFzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZ2VudF9waG90b190aHVtYi9hdmF0YXIvMTg0Nzk4Mi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBbnRvaW5lIENBSUxMRUFVRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL21haXNvbi12aWxsYS12ZW50ZS0yLXBpZWNlcy1wYXJpcy0yOW0yL3I3NDE2OTM/X2xvY2FsZT1mciI+CiAgICAgICAgICAgICAgICAgICAgICAgIE1haXNvbi92aWxsYSBkZSAyOSBtwrIgLSAxIGNoYW1icmUgLSBQQVJJUwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uX19mYXZvcml0ZXMgaGlkZWZhdm9yaSIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4tMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGlzdHJpY3Q/dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJncF9pZCUyMiUyQyUyMnZhbHVlJTIyJTNBMjA0MzMyNDI2NCUyQyUyMm5hbWUlMjIlM0ElMjJQQVJJUyUyQiUyODc1MDExJTI5JTJCUGFyaXMlMkIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCZhbXA7Z3BfaWQ9MjA0MzMyNDI2NCI+UEFSSVMgKDc1MDExKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Sw6lmw6lyZW5jZSA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNzQxNjkzCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNTAgMDAwIDxzcGFuPiZldXJvOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCBjLW9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWFkIEZyYW5jZSAtIEFudG9pbmUgQ0FJTExFQVVEICgwNiA2NCAyNyA4NiA5NSkgdm91cyBwcm9wb3NlIDogQXUgY2FsbWUsIHN1ciBjb3VycywgYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIGNvbXBvc8OpIGQmIzAzOTt1bmUgYmVsbGUgcGnDqGNlIGRlIHZpZSBhdmVjIGN1aXNpbmUgYW3DqXJpY2FpbmUsIHVuZSBjaGFtYnJlLCB1bmUgc2FsbGUgZGUgYmFpbi4gRHJlc3Npbmcgc8OpcGFyw6ksIHRvaWxldHRlIHPDqXBhcsOpZSBldCBjYXZlLkxhIHByw6lzZW50ZSBhLi4uCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mb290ZXIgcm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPiAyOSBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPiA8c3Bhbj4xPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL0FOVE9JTkUuQ0FJTExFQVVEIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS1waWVjZS1wYXJpcy0zMm0yL3I3NTE5OTc/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyODU4MjcxLmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyODU4MjcxLmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19uZXciPk5vdXZlYXU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDwvZGl2PgogICAgPHNwYW4gY2xhc3M9ImMtb2ZmZXJfX2ZhdiI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fcHJvZmlsIGMtb2ZmZXJfX3Byb2ZpbF9pbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLXBpZWNlLXBhcmlzLTMybTIvcjc1MTk5Nz9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJGYWJpZW4gR1VFWiIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE3NDQ1MDAuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRmFiaWVuIEdVRVoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkgaW1nIiBpdGVtcHJvcD0iaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19uYW1lIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImMtb2ZmZXJfX3RpdGxlIiBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS1waWVjZS1wYXJpcy0zMm0yL3I3NTE5OTc/X2xvY2FsZT1mciI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IGRlIDMyIG3CsiAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjgzMzElMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxNiUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjgzMzEiPlBBUklTICg3NTAxNik8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc1MTk5NwogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDI3IDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBGYWJpZW4gR1VFWiAoMDYgNDIgMTkgMDQgMTIpIHZvdXMgcHJvcG9zZSA6IEV4Y2x1c2lmLCBhdXggcGllZHMgZGUgbGEgTWFpc29uIGRlIGxhIFJhZGlvIFBhcmlzIDE2IMOobWUuR3JhbmQgc3R1ZGlvIGRlIDMyIG0yIGVudmlyb24gYXZlYyBiYWxjb24gZGUgNSBtMiBlbnZpcm9uIGF1IDTDqG1lIMOpdGFnZSBhdmVjIGFzY2Vuc2V1ci4gdW5lIGNhdmUgY29tcG9zZSBjZSBiaWVuLiBDb21tZXJjZXMsIG3DqXRybywgdW4uLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDMyIG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL0ZBQklFTi5HVUVaIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy0zMG0yL3I3MTUzNDc/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyODM4OTQ4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyODM4OTQ4LmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19uZXciPk5vdXZlYXU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDwvZGl2PgogICAgPHNwYW4gY2xhc3M9ImMtb2ZmZXJfX2ZhdiI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fcHJvZmlsIGMtb2ZmZXJfX3Byb2ZpbF9pbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTItcGllY2VzLXBhcmlzLTMwbTIvcjcxNTM0Nz9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJDYXJvbGluZSBQSU5UTyIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE4NDQ4MzAuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQ2Fyb2xpbmUgUElOVE8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkgaW1nIiBpdGVtcHJvcD0iaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19uYW1lIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImMtb2ZmZXJfX3RpdGxlIiBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy0zMG0yL3I3MTUzNDc/X2xvY2FsZT1mciI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IGRlIDMwIG3CsiAtIDEgY2hhbWJyZSAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjY5ODklMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAwNiUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjY5ODkiPlBBUklTICg3NTAwNik8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcxNTM0NwogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDkwIDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBDYXJvbGluZSBQSU5UTyAoMDYgMTIgOTkgMTcgNDUpIHZvdXMgcHJvcG9zZSA6IEVYQ0xVU0lWSVRFISBDQVJSRUZPVVIgQlVDSSBTaXR1w6kgYXUgNMOobWUgw6l0YWdlIHNhbnMgYXNjZW5zZXVyIGQmIzAzOTt1bmUgam9saWUgY29wcm9wcmnDqXTDqSBlbnRpw6hyZW1lbnQgcsOpbm92w6llLCB0csOocyBjaGFybWFudCBkZXV4IHBpw6hjZXMgY29tcHJlbmFudCBlbnRyw6llLCBjaGFybWFudCBzw6lqb3VyIGF2ZWMgY3Vpc2luZSB1cyBhbcOpbmEuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDMwIG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+IDxzcGFuPjE8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvQ0FST0xJTkUuUElOVE8iIGNsYXNzPSJidXR0b24gYnV0dG9uX19tZWRpdW0gYnV0dG9uX19jb25zZWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0ZXogdm90cmUgY29uc2VpbGxlcjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXN0YXRlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ltZyBjLW9mZmVyX19pbWdfZnIiICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTY0bTIvcjc2MDY5Nj9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctaG9sZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI4MjIxMDAuanBnIgogICAgICAgICAgICAgICAgICAgICBhbHQ9IlBBUklTIgogICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzI4MjIxMDAuanBnIiBjbGFzcz0ibGF6eSIvPgoJCQkJCTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDwvZGl2PgogICAgPHNwYW4gY2xhc3M9ImMtb2ZmZXJfX2ZhdiI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fcHJvZmlsIGMtb2ZmZXJfX3Byb2ZpbF9pbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTY0bTIvcjc2MDY5Nj9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJFbG9kaWUgQ0hBUlBFTlRJRVIiIGl0ZW1wcm9wPSJzYW1lQXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FnZW50X3Bob3RvX3RodW1iL2F2YXRhci8xODQ4MzYyLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkVsb2RpZSBDSEFSUEVOVElFUiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTY0bTIvcjc2MDY5Nj9fbG9jYWxlPWZyIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgNjQgbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjQyNjElMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxOCUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjQyNjEiPlBBUklTICg3NTAxOCk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc2MDY5NgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTk5IDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBFbG9kaWUgQ0hBUlBFTlRJRVIgKDA3IDgxIDczIDIzIDcyKSB2b3VzIHByb3Bvc2UgOiBWb3VzIHJlY2hlcmNoZXogdW4gYmllbiBzYW5zIHRyYXZhdXgsIGF1IGNhbG1lLCBkYW5zIHVuIHNlY3RldXIgcmVjaGVyY2jDqSBkdSAxOCDDqG1lIGFycm9uZGlzc2VtZW50IGV0IHByb2NoZSBkdSBtYXJjaMOpIGRlIGwmIzAzOTtPbGl2ZSA/IE4mIzAzOTtow6lzaXRleiBwYXMsIGNlIGJpZW4gZXN0IGZhaXQgcG91ciB2b3VzICEgQXUgY2lucXVpw6guLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDY0IG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+IDxzcGFuPjI8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvRUxPRElFLkNIQVJQRU5USUVSIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy02N20yL3I3Mzg5OTU/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyNzkzNDE0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyNzkzNDE0LmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19jb21wcm9taXMiPlNvdXMgY29tcHJvbWlzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fcHJlc3RpZ2UiPlByZXN0aWdlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIAogICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19mYXYiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS1oZWFydCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fcHJvZmlsIGMtb2ZmZXJfX3Byb2ZpbF9pbWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTItcGllY2VzLXBhcmlzLTY3bTIvcjczODk5NT9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJTb3BoaWUgQk9VUlNJRVIiIGl0ZW1wcm9wPSJzYW1lQXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FnZW50X3Bob3RvX3RodW1iL2F2YXRhci8xNjcyODg4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IlNvcGhpZSBCT1VSU0lFUiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTItcGllY2VzLXBhcmlzLTY3bTIvcjczODk5NT9fbG9jYWxlPWZyIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgNjcgbcKyIC0gMSBjaGFtYnJlIC0gUEFSSVMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fZmF2b3JpdGVzIGhpZGVmYXZvcmkiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjg3OTclMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAwNSUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjg3OTciPlBBUklTICg3NTAwNSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDczODk5NQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgODk1IDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBTb3BoaWUgQk9VUlNJRVIgKDA3IDcwIDI0IDQ4IDMzKSB2b3VzIHByb3Bvc2UgOiBEYW5zIGxlIDXDqG1lIGFycm9uZGlzc2VtZW50IGRlIFBhcmlzLCBhdSBjb2V1ciBkdSBRdWFydGllciBMYXRpbiwgw6AgZGV1eCBwYXMgZHUgUGFudGjDqW9uIGV0IGR1IEJvdWxldmFyZCBTYWludCBHZXJtYWluLiBEYW5zIHVuIGJlbCBpbW1ldWJsZSBoYXVzc21hbm5pZW4gcGFyZmFpdGVtZW50IGVudHJldGVudSBldCBhdmVjIGFzY2UuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDY3IG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+IDxzcGFuPjE8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvU09QSElFLkJPVVJTSUVSIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0yLXBpZWNlcy1wYXJpcy00MG0yL3I3MzgyMTE/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyNzkzMzk4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyNzkzMzk4LmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19jb21wcm9taXMiPlNvdXMgY29tcHJvbWlzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19leGNsdXNpdml0ZSI+RXhjbHVzaXZpdMOpPC9zcGFuPgogICAgCiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMi1waWVjZXMtcGFyaXMtNDBtMi9yNzM4MjExP19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlNvcGhpZSBCT1VSU0lFUiIgaXRlbXByb3A9InNhbWVBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWdlbnRfcGhvdG9fdGh1bWIvYXZhdGFyLzE2NzI4ODguanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iU29waGllIEJPVVJTSUVSIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IGltZyIgaXRlbXByb3A9ImltYWdlIj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbmFtZSI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjLW9mZmVyX190aXRsZSIgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtMi1waWVjZXMtcGFyaXMtNDBtMi9yNzM4MjExP19sb2NhbGU9ZnIiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSA0MCBtwrIgLSAxIGNoYW1icmUgLSBQQVJJUwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uX19mYXZvcml0ZXMgaGlkZWZhdm9yaSIgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4tMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGlzdHJpY3Q/dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJncF9pZCUyMiUyQyUyMnZhbHVlJTIyJTNBMjA0MzMyNDI2MSUyQyUyMm5hbWUlMjIlM0ElMjJQQVJJUyUyQiUyODc1MDE4JTI5JTJCUGFyaXMlMkIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCZhbXA7Z3BfaWQ9MjA0MzMyNDI2MSI+UEFSSVMgKDc1MDE4KTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZV9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fdGltZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Sw6lmw6lyZW5jZSA6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNzM4MjExCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzOTUgMDAwIDxzcGFuPiZldXJvOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCBjLW9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWFkIEZyYW5jZSAtIFNvcGhpZSBCT1VSU0lFUiAoMDcgNzAgMjQgNDggMzMpIHZvdXMgcHJvcG9zZSA6IFBBUklTIDE4IMOobWUgYXJyb25kaXNzZW1lbnQgLSBNw6l0cm8gR3V5IE1vcXVldC4gRGFucyB1biBiZWwgaW1tZXVibGUgYW5jaWVuLCBjaGFybWFudCAyIHBpw6hjZXMgdHJhdmVyc2FudCwgZG9ubmFudCBzdXIgY291ciBkZXMgZGV1eCBjb3TDqXMsIHZvdXMgY2hhcm1lcmEgcGFyIHNvbiBjYWxtZSBldCBzb24gY2FjaGV0LiBDZSBiaWUuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDQwIG3CsjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+IDxzcGFuPjE8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvU09QSElFLkJPVVJTSUVSIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVzdGF0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19pbWcgYy1vZmZlcl9faW1nX2ZyIiAgPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS00LXBpZWNlcy1wYXJpcy04NG0yL3I3NjAyODQ/X2xvY2FsZT1mciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWhvbGRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyNzkwNTAwLmpwZyIKICAgICAgICAgICAgICAgICAgICAgYWx0PSJQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIgogICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3NtYWxsL3Bob3RvLzcyNzkwNTAwLmpwZyIgY2xhc3M9ImxhenkiLz4KCQkJCQk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpYmJvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fcHJlc3RpZ2UiPlByZXN0aWdlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NtYWxsIGJ1dHRvbl9faGlnaGxpZ2h0IGhpZ2hsaWdodF9fZXhjbHVzaXZpdGUiPkV4Y2x1c2l2aXTDqTwvc3Bhbj4KICAgIAogICAgPC9kaXY+CiAgICA8c3BhbiBjbGFzcz0iYy1vZmZlcl9fZmF2Ij4KICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtNC1waWVjZXMtcGFyaXMtODRtMi9yNzYwMjg0P19sb2NhbGU9ZnIiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkthaGluYSBLQUNJIiBpdGVtcHJvcD0ic2FtZUFzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZ2VudF9waG90b190aHVtYi9hdmF0YXIvMTg1MjIwOC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJLYWhpbmEgS0FDSSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGF6eSBpbWciIGl0ZW1wcm9wPSJpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX25hbWUiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYy1vZmZlcl9fdGl0bGUiIGhyZWY9Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTQtcGllY2VzLXBhcmlzLTg0bTIvcjc2MDI4ND9fbG9jYWxlPWZyIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgODQgbcKyIC0gMyBjaGFtYnJlcyAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyAiIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xvY2FsaXphdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGluLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rpc3RyaWN0P3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZ3BfaWQlMjIlMkMlMjJ2YWx1ZSUyMiUzQTIwNDMzMjQyNjQlMkMlMjJuYW1lJTIyJTNBJTIyUEFSSVMlMkIlMjg3NTAxMSUyOSUyQlBhcmlzJTJCJTVDdTAwY2VsZS1kZS1GcmFuY2UlMjIlN0QlNUQmYW1wO2dwX2lkPTIwNDMzMjQyNjQiPlBBUklTICg3NTAxMSk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW5mb3JtYXRpb25zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3RpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UsOpZsOpcmVuY2UgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc2MDI4NAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iYy1vZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSAwNzUgMDAwIDxzcGFuPiZldXJvOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCBjLW9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWFkIEZyYW5jZSAtIEthaGluYSBLQUNJICgwNyA4NiAwMCAwMSA3OCkgdm91cyBwcm9wb3NlIDogRGFucyBsZSAxMcOobWUgYXJyb25kaXNzZW1lbnQgZGUgUGFyaXMsIGF1IGNvZXVyIGR1ICYjMDM5O1ZpbGxhZ2UgUG9waW5jb3VydCYjMDM5OyA6IEF1IDTDqG1lIGV0IGRlcm5pZXIgw6l0YWdlIGQmIzAzOTt1bmUgcGV0aXRlIGNvcHJvcHJpw6l0w6kgZW4gZm9uZCBkZSBjb3VyLCBiZWwgYXBwYXJ0ZW1lbnQgNCBwacOoY2VzIGRlIDg1bTIgZW52aXJvbiBjb21wb3PDqSBkJiMwMzk7dS4uLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fZm9vdGVyIHJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4gODQgbcKyPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcGllY2UtNCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4gPHNwYW4+Mzwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9LQUhJTkEuS0FDSSIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnNlaWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3RleiB2b3RyZSBjb25zZWlsbGVyPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFycm93LXJpZ2h0Ij48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJwYWdpbmF0aW9uIj4KCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcmVjaGVyY2hlci9hbm5vbmNlcz9nZW5lcmljX3R5cGUlNUIwJTVEPUFQJmFtcDtnZW5lcmljX3R5cGUlNUIxJTVEPU1WJmFtcDtzdXJmYWNlX21pbj0mYW1wO3N1cmZhY2VfbWF4PSZhbXA7cHJpY2VfbWluPSZhbXA7cHJpY2VfbWF4PSZhbXA7aWQ9JmFtcDtkZXBhcnRtZW50cz1QYXJpcyZhbXA7dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJkZXBhcnRtZW50cyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyUGFyaXMlMjIlMkMlMjJuYW1lJTIyJTNBJTIyUGFyaXMlMjAlMjIlN0QlNUQmYW1wO3RyYW5zYWN0aW9uX3R5cGU9VmVudGUmYW1wO2ZyZXF1ZW5jeT1Kb3VybmFsaSVDMyVBOHJlJmFtcDtzb3J0PWFkLmZpcnN0UHVibGlzaERhdGUmYW1wO2Rpcj1kZXNjJmFtcDtwYWdlPTEiPjE8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP2dlbmVyaWNfdHlwZSU1QjAlNUQ9QVAmYW1wO2dlbmVyaWNfdHlwZSU1QjElNUQ9TVYmYW1wO3N1cmZhY2VfbWluPSZhbXA7c3VyZmFjZV9tYXg9JmFtcDtwcmljZV9taW49JmFtcDtwcmljZV9tYXg9JmFtcDtpZD0mYW1wO2RlcGFydG1lbnRzPVBhcmlzJmFtcDt0YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmRlcGFydG1lbnRzJTIyJTJDJTIydmFsdWUlMjIlM0ElMjJQYXJpcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJQYXJpcyUyMCUyMiU3RCU1RCZhbXA7dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7ZnJlcXVlbmN5PUpvdXJuYWxpJUMzJUE4cmUmYW1wO3NvcnQ9YWQuZmlyc3RQdWJsaXNoRGF0ZSZhbXA7ZGlyPWRlc2MmYW1wO3BhZ2U9MiI+MjwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/Z2VuZXJpY190eXBlJTVCMCU1RD1BUCZhbXA7Z2VuZXJpY190eXBlJTVCMSU1RD1NViZhbXA7c3VyZmFjZV9taW49JmFtcDtzdXJmYWNlX21heD0mYW1wO3ByaWNlX21pbj0mYW1wO3ByaWNlX21heD0mYW1wO2lkPSZhbXA7ZGVwYXJ0bWVudHM9UGFyaXMmYW1wO3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZGVwYXJ0bWVudHMlMjIlMkMlMjJ2YWx1ZSUyMiUzQSUyMlBhcmlzJTIyJTJDJTIybmFtZSUyMiUzQSUyMlBhcmlzJTIwJTIyJTdEJTVEJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDtmcmVxdWVuY3k9Sm91cm5hbGklQzMlQThyZSZhbXA7c29ydD1hZC5maXJzdFB1Ymxpc2hEYXRlJmFtcDtkaXI9ZGVzYyZhbXA7cGFnZT0zIj4zPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcmVjaGVyY2hlci9hbm5vbmNlcz9nZW5lcmljX3R5cGUlNUIwJTVEPUFQJmFtcDtnZW5lcmljX3R5cGUlNUIxJTVEPU1WJmFtcDtzdXJmYWNlX21pbj0mYW1wO3N1cmZhY2VfbWF4PSZhbXA7cHJpY2VfbWluPSZhbXA7cHJpY2VfbWF4PSZhbXA7aWQ9JmFtcDtkZXBhcnRtZW50cz1QYXJpcyZhbXA7dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJkZXBhcnRtZW50cyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyUGFyaXMlMjIlMkMlMjJuYW1lJTIyJTNBJTIyUGFyaXMlMjAlMjIlN0QlNUQmYW1wO3RyYW5zYWN0aW9uX3R5cGU9VmVudGUmYW1wO2ZyZXF1ZW5jeT1Kb3VybmFsaSVDMyVBOHJlJmFtcDtzb3J0PWFkLmZpcnN0UHVibGlzaERhdGUmYW1wO2Rpcj1kZXNjJmFtcDtwYWdlPTQiPjQ8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP2dlbmVyaWNfdHlwZSU1QjAlNUQ9QVAmYW1wO2dlbmVyaWNfdHlwZSU1QjElNUQ9TVYmYW1wO3N1cmZhY2VfbWluPSZhbXA7c3VyZmFjZV9tYXg9JmFtcDtwcmljZV9taW49JmFtcDtwcmljZV9tYXg9JmFtcDtpZD0mYW1wO2RlcGFydG1lbnRzPVBhcmlzJmFtcDt0YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmRlcGFydG1lbnRzJTIyJTJDJTIydmFsdWUlMjIlM0ElMjJQYXJpcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJQYXJpcyUyMCUyMiU3RCU1RCZhbXA7dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7ZnJlcXVlbmN5PUpvdXJuYWxpJUMzJUE4cmUmYW1wO3NvcnQ9YWQuZmlyc3RQdWJsaXNoRGF0ZSZhbXA7ZGlyPWRlc2MmYW1wO3BhZ2U9NSI+NTwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGlzYWJsZWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4maGVsbGlwOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/Z2VuZXJpY190eXBlJTVCMCU1RD1BUCZhbXA7Z2VuZXJpY190eXBlJTVCMSU1RD1NViZhbXA7c3VyZmFjZV9taW49JmFtcDtzdXJmYWNlX21heD0mYW1wO3ByaWNlX21pbj0mYW1wO3ByaWNlX21heD0mYW1wO2lkPSZhbXA7ZGVwYXJ0bWVudHM9UGFyaXMmYW1wO3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZGVwYXJ0bWVudHMlMjIlMkMlMjJ2YWx1ZSUyMiUzQSUyMlBhcmlzJTIyJTJDJTIybmFtZSUyMiUzQSUyMlBhcmlzJTIwJTIyJTdEJTVEJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDtmcmVxdWVuY3k9Sm91cm5hbGklQzMlQThyZSZhbXA7c29ydD1hZC5maXJzdFB1Ymxpc2hEYXRlJmFtcDtkaXI9ZGVzYyZhbXA7cGFnZT05Ij45PC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBpdGVtcHJvcD0idXJsIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSIgbmV4dCIgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/Z2VuZXJpY190eXBlJTVCMCU1RD1BUCZhbXA7Z2VuZXJpY190eXBlJTVCMSU1RD1NViZhbXA7c3VyZmFjZV9taW49JmFtcDtzdXJmYWNlX21heD0mYW1wO3ByaWNlX21pbj0mYW1wO3ByaWNlX21heD0mYW1wO2lkPSZhbXA7ZGVwYXJ0bWVudHM9UGFyaXMmYW1wO3RhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZGVwYXJ0bWVudHMlMjIlMkMlMjJ2YWx1ZSUyMiUzQSUyMlBhcmlzJTIyJTJDJTIybmFtZSUyMiUzQSUyMlBhcmlzJTIwJTIyJTdEJTVEJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDtmcmVxdWVuY3k9Sm91cm5hbGklQzMlQThyZSZhbXA7c29ydD1hZC5maXJzdFB1Ymxpc2hEYXRlJmFtcDtkaXI9ZGVzYyZhbXA7cGFnZT0yIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KCiAgICAKICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgIDxoMiBjbGFzcz0iaDIgdGl0bGVfX21haW4iPgogICAgICAgIETDqWNvdXZyZXogbm9zIDxiPnTDqW1vaWduYWdlcyBjbGllbnQ8L2I+ICAgIDwvaDI+CiAgICA8ZGl2IGNsYXNzPSJ0ZXh0X19jZW50ZXIiPgogICAgICAgIDxzY3JpcHQgc3JjPSIvL3dpZGdldC5pbW1vZHZpc29yLmNvbS9qcy93aWRnZXQuanMiPjwvc2NyaXB0PgogICAgICAgIDxhIGhyZWY9Ii8vd2lkZ2V0LmltbW9kdmlzb3IuY29tIiBpZD0iaW1tb2R2aXNvci13aWRnZXQiIGRhdGEtaW0tYXBpa2V5PSI4OVNEOS01MzBJLVowQUc0OS1XN04xLTJUMTQyIiBkYXRhLWltLXRoZW1lPSJibHVlIiBkYXRhLWltLWJvcmRlcj0idHJ1ZSIgZGF0YS1pbS1yZXZpZXdzPSJ0cnVlIiBkYXRhLWltLXdpZHRoPSI4MCUiIGRhdGEtaW0taGVpZ2h0PSI1NTAiPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItY2l0aWVzIj4KICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL0FuZ2Vycy80OSIgdGl0bGU9ImFjaGV0ZXIgw6AgQW5nZXJzIj5BbmdlcnMgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9BbWllbnMvODAiIHRpdGxlPSJhY2hldGVyIMOgIEFtaWVucyI+QW1pZW5zIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvc2VhcmNoX3JlZ3JvdXBlX3ppcGNvZGUvQXZpZ25vbi84NCIgdGl0bGU9ImFjaGV0ZXIgw6AgQXZpZ25vbiI+QXZpZ25vbiA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL0JvcmRlYXV4LzMzIiB0aXRsZT0iYWNoZXRlciDDoCBCb3JkZWF1eCI+Qm9yZGVhdXggPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9DYW5uZXMvMDYiIHRpdGxlPSJhY2hldGVyIMOgIENhbm5lcyI+Q2FubmVzIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvc2VhcmNoX3JlZ3JvdXBlX3ppcGNvZGUvRGlqb24vMjEiIHRpdGxlPSJhY2hldGVyIMOgIERpam9uIj5EaWpvbiA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL0dyZW5vYmxlLzM4IiB0aXRsZT0iYWNoZXRlciDDoCBHcmVub2JsZSI+R3Jlbm9ibGUgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP3RyYW5zYWN0aW9uX3R5cGU9VmVudGUmYXJlYXM9UkUmdGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJhcmVhcyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyUkUlMjIlMkMlMjJuYW1lJTIyJTNBJTIyTGElMjBSJUMzJUE5dW5pb24lMjIlN0QlNUQiIHRpdGxlPSJhY2hldGVyIMOgIExhIFLDqXVuaW9uIj5MYSBSw6l1bmlvbiA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL0xhJTIwUm9jaGVsbGUvMTciIHRpdGxlPSJhY2hldGVyIMOgIExhIFJvY2hlbGxlIj5MYSBSb2NoZWxsZSA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL0dyYW5kJTIwTHlvbi82OSIgdGl0bGU9ImFjaGV0ZXIgw6AgR3JhbmQgTHlvbiI+R3JhbmQgTHlvbiA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL0xlJTIwSGF2cmUvNzYiIHRpdGxlPSJhY2hldGVyIMOgIExlIEhhdnJlIj5MZSBIYXZyZSA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL0xpbGxlLzU5IiB0aXRsZT0iYWNoZXRlciDDoCBMaWxsZSI+TGlsbGUgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9MZSUyME1hbnMvNzIiIHRpdGxlPSJhY2hldGVyIMOgIExlIE1hbnMiPkxlIE1hbnMgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9MaW1vZ2VzLzg3IiB0aXRsZT0iYWNoZXRlciDDoCBMaW1vZ2VzIj5MaW1vZ2VzIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvc2VhcmNoX3JlZ3JvdXBlX3ppcGNvZGUvTWFyc2VpbGxlLzEzIiB0aXRsZT0iYWNoZXRlciDDoCBNYXJzZWlsbGUiPk1hcnNlaWxsZSA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL01lYXV4Lzc3IiB0aXRsZT0iYWNoZXRlciDDoCBNZWF1eCI+TWVhdXggPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9Nb250cGVsbGllci8zNCIgdGl0bGU9ImFjaGV0ZXIgw6AgTW9udHBlbGxpZXIiPk1vbnRwZWxsaWVyIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvc2VhcmNoX3JlZ3JvdXBlX3ppcGNvZGUvTWV0ei81NyIgdGl0bGU9ImFjaGV0ZXIgw6AgTWV0eiI+TWV0eiA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL05pY2UvMDYiIHRpdGxlPSJhY2hldGVyIMOgIE5pY2UiPk5pY2UgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9OYW50ZXMvNDQiIHRpdGxlPSJhY2hldGVyIMOgIE5hbnRlcyI+TmFudGVzIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvc2VhcmNoX3JlZ3JvdXBlX3ppcGNvZGUvTmltZXMvMzAiIHRpdGxlPSJhY2hldGVyIMOgIE5pbWVzIj5OaW1lcyA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL09ybCVDMyVBOWFucy80NSIgdGl0bGU9ImFjaGV0ZXIgw6AgT3Jsw6lhbnMiPk9ybMOpYW5zIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvcmVjaGVyY2hlci9hbm5vbmNlcz90cmFuc2FjdGlvbl90eXBlPVZlbnRlJmRlcGFydG1lbnRzPVBhcmlzJnRhZ3NfbGlzdD0lNUIlN0IlMjJ0eXBlJTIyJTNBJTIyZGVwYXJ0bWVudHMlMjIlMkMlMjJ2YWx1ZSUyMiUzQSUyMlBhcmlzJTIyJTJDJTIybmFtZSUyMiUzQSUyMlBhcmlzJTIyJTdEJTVEIiB0aXRsZT0iYWNoZXRlciDDoCBQYXJpcyI+UGFyaXMgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9QYXUvNjQiIHRpdGxlPSJhY2hldGVyIMOgIFBhdSI+UGF1IDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvc2VhcmNoX3JlZ3JvdXBlX3ppcGNvZGUvUGVycGlnbmFuLzY2IiB0aXRsZT0iYWNoZXRlciDDoCBQZXJwaWduYW4iPlBlcnBpZ25hbiA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL1BvaXRpZXJzLzg2IiB0aXRsZT0iYWNoZXRlciDDoCBQb2l0aWVycyI+UG9pdGllcnMgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9SZW5uZXMvMzUiIHRpdGxlPSJhY2hldGVyIMOgIFJlbm5lcyI+UmVubmVzIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvc2VhcmNoX3JlZ3JvdXBlX3ppcGNvZGUvUm91ZW4vNzYiIHRpdGxlPSJhY2hldGVyIMOgIFJvdWVuIj5Sb3VlbiA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL1NlbnMvODkiIHRpdGxlPSJhY2hldGVyIMOgIFNlbnMiPlNlbnMgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9TdHJhc2JvdXJnLzY3IiB0aXRsZT0iYWNoZXRlciDDoCBTdHJhc2JvdXJnIj5TdHJhc2JvdXJnIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvc2VhcmNoX3JlZ3JvdXBlX3ppcGNvZGUvU2FpbnQtJUMzJTg5dGllbm5lLzQyIiB0aXRsZT0iYWNoZXRlciDDoCBTYWludC3DiXRpZW5uZSI+U2FpbnQtw4l0aWVubmUgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9Ub3Vsb3VzZS8zMSIgdGl0bGU9ImFjaGV0ZXIgw6AgVG91bG91c2UiPlRvdWxvdXNlIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJpdGVtX19jaXR5Ij48YSBocmVmPSIvc2VhcmNoX3JlZ3JvdXBlX3ppcGNvZGUvVG91bG9uLzgzIiB0aXRsZT0iYWNoZXRlciDDoCBUb3Vsb24iPlRvdWxvbiA8L2E+IMOgIHZlbmRyZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaXRlbV9fY2l0eSI+PGEgaHJlZj0iL3NlYXJjaF9yZWdyb3VwZV96aXBjb2RlL1RvdXJzLzM3IiB0aXRsZT0iYWNoZXRlciDDoCBUb3VycyI+VG91cnMgPC9hPiDDoCB2ZW5kcmU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Iml0ZW1fX2NpdHkiPjxhIGhyZWY9Ii9zZWFyY2hfcmVncm91cGVfemlwY29kZS9Ucm95ZXMvMTAiIHRpdGxlPSJhY2hldGVyIMOgIFRyb3llcyI+VHJveWVzIDwvYT4gw6AgdmVuZHJlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8L3NlY3Rpb24+CjwvbWFpbj4KCiAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIiIGlkPSJmb290ZXIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvV1BGb290ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBvdGhlcl9fbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpcnN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlL2Fubm9uY2VzL2V4Y2x1c2l2aXRlL2xpc3RlL2Fubm9uY2UtcmVzdWx0YXQ/ZXhjbHVzaXZlPTEiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgTGVzIGV4Y2x1c2l2aXTDqXMgaWFkCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lc3RpbWVyLXZvdHJlLWJpZW4iICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgRXN0aW1leiB2b3RyZSBiaWVuCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci90cm91dmVyLXVuLWNvbnNlaWxsZXIiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgVHJvdXZleiB1biBjb25zZWlsbGVyCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbWFjb25jaWVyZ2VyaWUtaWFkLmZyLyIgICAgIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iIj4KICAgICAgICAgICAgQ29uY2llcmdlcmllIGlhZAoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQvY291cC1kZS1jb2V1ci9saXN0ZS9hbm5vbmNlcyIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBOb3MgY291cHMgZGUgY29ldXIKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaXRlbS1oaWdobGlnaHRlZCBsYXN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlL2Fubm9uY2VzL2ltbW9iaWxpZXItcHJlc3RpZ2UvbGlzdGUtcmVzdWx0YXQ/cmFkaXVzPTIwJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDt0YWdzJTVCMCU1RD1wcmVzdGlnZSIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBBY2hhdCBkZSBwcmVzdGlnZQoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNvY2lhbCI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlX19sYXJnZS0xIj5TdWl2ZXogbm91cyA6PC9wPgogICAgICAgICAgICAgICAgICAgIDx1bCBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT3JnYW5pemF0aW9uIj4KCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0lBREZyYW5jZSIgaXRlbXByb3A9InNhbWVBcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmItcm9uZCI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9JQURGcmFuY2UiIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaW1tb2JpbGllci1kb21pY2lsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxpbmtlZGluLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvSUFERnJhbmNlIiBpdGVtcHJvcD0ic2FtZUFzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi15b3V0dWJlLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaWFkZnJhbmNlb2ZmaWNpZWwvIiBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkZW1vLWljb24gaWNvbi1pbnN0YWdyYW0tcm9uZCI+PC9pPjwvYT48L2xpPgoJCQkgICAgICAgIAkJCQkJCQkKICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCQkJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBwYXJ0bmVycyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPmlhZCBlc3QgbWVtYnJlIDogPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9VbmlzX0xvZ290eXBlX3NvbG9fQ291bGV1ci5wbmciIHdpZHRoPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIiIGFsdD0iVW5pcyI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudV9fdGhpcmQiPgogICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZmlyc3QiPjxhIGhyZWY9Ii8iPkFjY3VlaWw8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3F1aS1zb21tZXMtbm91cyI+UXVpIHNvbW1lcy1ub3VzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvZXNwYWNlLXByZXNzZSI+RXNwYWNlIFByZXNzZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL21lbnRpb25zLWxlZ2FsZXMiPk1lbnRpb25zIGzDqWdhbGVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvUG9saXRpcXVlLWRlLWNvbmZpZGVudGlhbGl0ZSI+UG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6k8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9tZWRpYXRpb24iPk3DqWRpYXRpb248L2E+PC9saT4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvbnRhY3Rlei1ub3VzIj5Ob3VzIGNvbnRhY3RlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vYmFyZW1lLmlhZGZyYW5jZS5mci8iIHRhcmdldD0iX2JsYW5rIj5CYXLDqG1lIGQnaG9ub3JhaXJlczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvaW1ncy85OTYwNzExNDdhYzFiOGIxMzVjNjg3NTRiNzlmZDE1ZC5wZGYiIHRhcmdldD0iX2JsYW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYXLDqG1lIEUmYW1wO0MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgPC9kaXY+CjwvZGl2PgogICAgPC9mb290ZXI+CgogICAgPCEtLSBNb2RhbCAtLT4KICAgIDxkaXYgY2xhc3M9Im1vZGFsRGlhbG9nIG1vZGFsIGZhZGUiIGlkPSJtZXNzYWdlLW1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVzc2FnZSBtZXNzYWdlLWNvbnRlbnQiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJub19yZXN1bHQiIGNsYXNzPSJtb2RhbERpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIGZ1bGwtd2lkdGgiIGlkPSJhbGVydC1uby1yZXN1bHQtbW9kYWwiPgogICAgICAgIDxzcGFuIGNsYXNzPSJjbG9zZS1tb2RhbCB0ZXh0LXJpbmciIGlkPSJjbG9zZS1hbGVydC1uby1yZXN1bHQiPng8L3NwYW4+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0X3JpbmciPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yaW5nIj48L2k+IENyw6llciB1bmUgYWxlcnRlIHBvdXIgY2V0dGUgcmVjaGVyY2hlIDwvZGl2PgogICAgICAgICAgICA8cD48c3Ryb25nPkF1Y3VuZSBhbm5vbmNlIG5lIGNvcnJlc3BvbmQgw6Agdm90cmUgcmVjaGVyY2hlPzwvc3Ryb25nPjwvcD4KICAgICAgICAgICAgPHA+TW9kaWZpZXogdm9zIGNyaXTDqHJlcyBvdSBsYWlzc2V6IHZvdXMgZ3VpZGVyIHBhciBub3Mgc3VnZ2VzdGlvbnMuPC9wPgogICAgICAgICAgICA8cD48c3Ryb25nPlJhcHBlbCBkZSB2b3MgY3JpdMOocmVzIDo8L3N0cm9uZz48L3A+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNyaXRlcmlhcyI+CgkJCQkJCSAgICAgICAgICAgIAoJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgIDxmb3JtIGlkPSJhbGVydE5vUmVzdWx0Rm9ybSI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBwbGFjZWhvbGRlcj0iRW1haWwiIGNsYXNzPSJ0ZXh0LWRhbmdlciBmb3JtLWNvbnRyb2wgaW5uZXItYnV0dG9uIiBpZD0iYWxlcnQtZW1haWwiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0idGV4dC1yaW5nIG5vLWJvcmRlciIgaWQ9ImFsZXJ0LWVtYWlsLWJ1dHRvbiIgaHJlZj0iL3Byb2ZpbGUvYWxlcnQvYWRkIj5PSzwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PiAgICA8ZGl2IGlkPSJidXNpbmVzc0NhcmRNb2RhbCIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9ImMtbW9kYWwiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQgYnVzaW5lc3NDYXJkQ29udGVudCI+PC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8ZGl2IGlkPSJjb250YWN0QWdlbnRNb2RhbCIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9ImMtbW9kYWwiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPjwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBpZD0ibG9naW4iIGNsYXNzPSJtb2RhbERpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIHRhYi1jb25uZWN0Ij4KICAgICAgICA8dWwgY2xhc3M9InRhYnMiPgogICAgICAgICAgICA8bGkgY2xhc3M9InRhYi1saW5rIGN1cnJlbnQiIGRhdGEtdGFiPSJsb2dpbi10YWIiPlNlIGNvbm5lY3RlcjwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0idGFiLWxpbmsiIGRhdGEtdGFiPSJyZWdpc3Rlci10YWIiPkNyw6llciB1biBjb21wdGU8L2xpPgogICAgICAgIDwvdWw+CgogICAgICAgIDxkaXYgaWQ9ImxvZ2luLXRhYiIgY2xhc3M9InRhYi1jb250ZW50IGN1cnJlbnQiPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvbG9naW5fY2hlY2siCiAgICAgICAgICBuYW1lPSJjb25uZXhpb24iIG1ldGhvZD0icG9zdCIgY2xhc3M9ImZvcm1fX2Nvbm5leGlvbiI+CiAgICAgICAgPCEtLXAgY2xhc3M9InRpdGxlIj5Db25uZWN0ZXotdm91cyBhdmVjIGxlcyByw6lzZWF1eCBzb2NpYXV4PC9wPgogICAgICAgIDxkaXYgY2xhc3M9Imwtc29jaWFsIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2Nvbm5lY3QvZmFjZWJvb2siIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iZmIiPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZiLXJvbmQiPjwvaT4KPC9hPgo8YSBocmVmPSIvY29ubmVjdC90d2l0dGVyIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9InR3Ij4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10d2l0dGVyLXJvbmQiPjwvaT4KPC9hPgo8YSBocmVmPSIvY29ubmVjdC9nb29nbGUiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0ieXQiPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWdvb2dsZS1wbHVzLXJvbmQiPjwvaT4KPC9hPgo8YSBocmVmPSIvY29ubmVjdC9saW5rZWRpbiIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJsa2QiPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxpbmtlZGluLXJvbmQiPjwvaT4KPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciI+CiAgICAgICAgICAgIDxwPk91PC9wPgogICAgICAgIDwvZGl2LS0+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX2NzcmZfdG9rZW4iIHZhbHVlPSJlTUs4WTdkenNpRmEtcV9zdnBnRTB0Y3FoRFE2TjdudVdHeVFFOERDZkZZIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIHBsYWNlaG9sZGVyPSJFbWFpbCIgbmFtZT0iX3VzZXJuYW1lIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJfcGFzc3dvcmQiIHR5cGU9InBhc3N3b3JkIiBwbGFjZWhvbGRlcj0iTW90IGRlIHBhc3NlIiBpZD0icGFzc3dvcmQiPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2luZm9ybWF0aW9ucyByb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJyZW1lbWJlciIgbmFtZT0iX3JlbWVtYmVyX21lIiB2YWx1ZT0ib24iPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icmVtZW1iZXIiPlNlIHNvdXZlbmlyIGRlIG1vaTwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjcGFzc19mb3JnZXRfZGl2IiBjbGFzcz0iZm9ybV9fZm9yZ2V0IgogICAgICAgICAgICAgICAgICAgaWQ9ImNvbm5lY3RfZm9yZ2V0X3Bhc3N3b3JkIj4KICAgICAgICAgICAgICAgICAgICBNb3QgZGUgcGFzc2UgcGVyZHUgPyAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2Zvb3RlciI+CiAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBpZD0ic3VibWl0X2Nvbm5lY3Rpb24iIG5hbWU9Il9zdWJtaXQiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSI+CiAgICAgICAgICAgICAgICBDb25uZXhpb24gICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZm9ybT4KCgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGlkPSJyZWdpc3Rlci10YWIiIGNsYXNzPSJ0YWItY29udGVudCI+CiAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii9yZWdpc3Rlci8iCiAgICAgICAgICBuYW1lPSJyZWdpc3RyYXRpb24iIG1ldGhvZD0icG9zdCIgY2xhc3M9ImZvcm1fX3JlZ2lzdGVyIj4KCQkgIAogICAgICAgIDxwIGNsYXNzPSJ0aXRsZV9fbWFpbiI+CgkJCQlDcsOpZXogdm90cmUgY29tcHRlIHBvdXIgYsOpbsOpZmljaWVyIGTigJl1biBzdWl2aSBwZXJzb25uYWxpc8OpCQkJCTwvcD4KICAgICAgICA8IS0tcCBjbGFzcz0idGl0bGUiPkNvbm5lY3Rlei12b3VzIGF2ZWMgbGVzIHLDqXNlYXV4IHNvY2lhdXg8L3A+CiAgICAgICAgPGRpdiBjbGFzcz0ibC1zb2NpYWwiPgogICAgICAgICAgICA8YSBocmVmPSIvY29ubmVjdC9mYWNlYm9vayIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJmYiI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmItcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L3R3aXR0ZXIiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0idHciPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L2dvb2dsZSIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ5dCI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZ29vZ2xlLXBsdXMtcm9uZCI+PC9pPgo8L2E+CjxhIGhyZWY9Ii9jb25uZWN0L2xpbmtlZGluIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImxrZCI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGlua2VkaW4tcm9uZCI+PC9pPgo8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VwYXJhdG9yIj4KICAgICAgICAgICAgPHA+T3U8L3A+CiAgICAgICAgPC9kaXYtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBpZD0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1fZW1haWwiIG5hbWU9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtW2VtYWlsXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iU2Fpc2lzc2V6IHVuZSBhZHJlc3NlIGUtbWFpbCIgcGF0dGVybj0iLipALiooXC5bYS16QS1aMC05Li1dKykrJCIgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCByb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGlkPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybV9wbGFpblBhc3N3b3JkX2ZpcnN0IiBuYW1lPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybVtwbGFpblBhc3N3b3JkXVtmaXJzdF0iIHJlcXVpcmVkPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9IkNyw6lleiB1biBtb3QgZGUgcGFzc2UiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGlkPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybV9wbGFpblBhc3N3b3JkX3NlY29uZCIgbmFtZT0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1bcGxhaW5QYXNzd29yZF1bc2Vjb25kXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iVmFsaWRleiBsZSBtb3QgZGUgcGFzc2UiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgPGRpdiBpZD0icmVjYXB0Y2hhUmVnaXN0ZXIiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX2NndSIgbmFtZT0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1bY2d1XSIgcmVxdWlyZWQ9InJlcXVpcmVkIiB2YWx1ZT0iMSIgLz4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybV9jZ3UiPgoJCQkJCSAgICAgCQkJCQkJSuKAmWFjY2VwdGUgbGVzIGNvbmRpdGlvbnMgZ8OpbsOpcmFsZXMgZOKAmXV0aWxpc2F0aW9uIGRlIGlhZDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN1Yi10eHQiPgogICAgICAgICAgICAgICAgICAgICAgICBFbiB2b3VzIGVucmVnaXN0cmFudCwgdm91cyBjb25zZW50ZXogw6AgbOKAmWjDqWJlcmdlbWVudCBldCBhdSB0cmFpdGVtZW50IGRlIHZvcyBkb25uw6llcyDDoCBjYXJhY3TDqHJlIHBlcnNvbm5lbCBwYXIgSUBEIEZyYW5jZSBkYW5zIGxlcyBjb25kaXRpb25zIGTDqWNyaXRlcyBkYW5zIGxhIAogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvZnIvUG9saXRpcXVlLWRlLWNvbmZpZGVudGlhbGl0ZSI+UG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6kuPC9hPiAgKCBPYmxpZ2F0b2lyZSApCiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KCQkJCQkJICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyICI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJyZWdpc3Rlcl9uZXdzbGV0dGVyUiIgaWQ9InJlZ2lzdGVyX25ld3NsZXR0ZXJSIi8+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icmVnaXN0ZXJfbmV3c2xldHRlclIiPgogICAgICAgICAgICAgICAgICAgICAgICBKZSBzb3VoYWl0ZSByZWNldm9pciBwYXIgbmV3c2xldHRlciBkZXMgYW5ub25jZXMgc3VzY2VwdGlibGVzIGRlIG3igJlpbnTDqXJlc3NlciBldCBkZXMgY29uc2VpbHMgw6AgbOKAmWFjaGF0IGRlIGxhIHBhcnQgZOKAmWlhZAogICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0icHJvbW8iIG5hbWU9InByb21vUCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icHJvbW8iPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBK4oCZYWNjZXB0ZSBkZSByZWNldm9pciBkZXMgcHJvbW9zIGRlcyBwYXJ0ZW5haXJlcyBkZSBpYWQJCQkJCQkgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19mb290ZXIiPgogICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX21lZGl1bSI+UydpbnNjcmlyZTwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybV9fdG9rZW4iIG5hbWU9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtW190b2tlbl0iIHZhbHVlPSItby00RW9UREgxLXl6RVVaTVl3a1pUXzhrWngzYTBRbDRtTEsyR3hrUmU0IiAvPgogICAgPC9mb3JtPgoKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDxkaXYgaWQ9InBhc3NfZm9yZ2V0X2RpdiIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9ImMtbW9kYWwiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPjxzcGFuIGNsYXNzPSJjdXN0b20taWNvbiBtb2RhbC1jbG9zZS1pY29uIiBkYXRhLWRpc21pc3M9Im1vZGFsIj48L3NwYW4+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZV9fbWFpbiI+TW90IGRlIHBhc3NlIG91Ymxpw6k8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9InRleHQiPgogICAgICAgICAgICAgICAgPHA+RW50cmV6IHZvdHJlIGFkcmVzc2UgRW1haWwgZXQgbm91cyB2b3VzIGVudmVycm9ucyBsYSBtYXJjaGUgw6Agc3VpdnJlPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvcmVzZXR0aW5nL3NlbmQtZW1haWwiIG5hbWU9ImNvbm5leGlvbiIgbWV0aG9kPSJwb3N0IgogICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybV9fcGFzc19mb3JnZXQiIG9uc3VibWl0PSJzdWJtbWl0ZWQoKSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19lcnJvciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBwbGFjZWhvbGRlcj0iRW1haWwiIGlkPSIiIG5hbWU9InVzZXJuYW1lIiByZXF1aXJlZD0icmVxdWlyZWQiPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19mb290ZXIiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBpZD0ic3VibWl0X3Bhc3NfZm9yZ2V0IiBuYW1lPSIiIGNsYXNzPSJidXR0b24gYnV0dG9uX19tZWRpdW0iPgogICAgICAgICAgICAgICAgICAgICAgICBFbnZveWVyICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQ+CiAgICBmdW5jdGlvbiBzdWJtbWl0ZWQoKSB7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RleHQnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgfQo8L3NjcmlwdD4gICAgPGRpdiBpZD0ibmV3QWxlcnRNb2RhbCIgY2xhc3M9Im1vZGFsRGlhbG9nIgogICAgIGRhdGEtbWVzc2FnZT0iVm91cyBkZXZleiByZW5zZWlnbmVyIGF1IG1vaW5zIHVuIGxpZXUgcG91ciBwb3V2b2lyIGVucmVnaXN0cmVyIHVuZSBhbGVydGUiPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCBmdWxsLXdpZHRoIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50IHRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGVfX21haW4iPkFsZXJ0ZSBFLW1haWw8L2Rpdj4KICAgICAgICAgICAgPHA+VW5lIGFsZXJ0ZSBlLW1haWwgc2VyYSBjcsOpw6llIMOgIHBhcnRpciBkZXMgY3JpdMOocmVzIGRlIHZvdHJlIHJlY2hlcmNoZS48L3A+CiAgICAgICAgICAgIDxwPlZldWlsbGV6IGNob2lzaXIgbGEgPHN0cm9uZz5mcmVxdWVuY2UgZGUgbCdhbGVydGU8L3N0cm9uZz4gOjwvcD4KICAgICAgICAgICAgPGZvcm0gaWQ9InVzZXJBbGVydEZvcm0iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5GcsOpcXVlbmNlIGRlIGwnYWxlcnRlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJmcmVxdWVuY3kiIGlkPSJhbGVydC1zZWFyY2gtbmF2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VsZWN0ZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iSm91cm5hbGnDqHJlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKb3VybmFsacOocmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJIZWJkb21hZGFpcmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYmRvbWFkYWlyZSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Ik1lbnN1ZWxsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVuc3VlbGxlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiIHN0eWxlPSJwYWRkaW5nLWJvdHRvbTogMjBweDsiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3RhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX2FsZXJ0IGJ1dHRvbl9fbWVkaXVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWRkLWFsZXJ0IiBocmVmPSIvcHJvZmlsZS9hbGVydC9hZGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q3LDqWVyIGwnYWxlcnRlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgogICAgPCEtLSBlbmQgTW9kYWwgLS0+CiAgICAgICAgICAgICAgICAKCiAgICAKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICB2YXIgZ2xvYmFsX2N1cnJlbnRfY291bnRyeSA9ICdmcic7CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9hcHAtZWVhYzI4YTdkYS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcz9vbmxvYWQ9b25sb2FkQ2FsbGJhY2smcmVuZGVyPWV4cGxpY2l0JmhsPWZyIgogICAgICAgICAgICBhc3luYyBkZWZlcj48L3NjcmlwdD4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIgogICAgICAgICAgaHJlZj0iLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvY29va2llY29uc2VudDIvMy4wLjMvY29va2llY29uc2VudC5taW4uY3NzIi8+CiAgICA8c2NyaXB0IHNyYz0iLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvY29va2llY29uc2VudDIvMy4wLjMvY29va2llY29uc2VudC5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJyZXF1aWVyZWRNZXNzYWdlIiB2YWx1ZT0iQ2UgY2hhbXAgZXN0IHJlcXVpcyI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iaW52YWxpZE1lc3NhZ2UiIHZhbHVlPSJWb3RyZSBhZHJlc3NlIGUtbWFpbCBlc3QgaW52YWxpZGUiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9InJlcXVpZXJlZE1lc3NhZ2VDQiIKICAgICAgICAgICB2YWx1ZT0iVmV1aWxsZXogY29jaGVyIGNldHRlIGNhc2Ugc2kgdm91cyBzb3VoYWl0ZXogY29udGludWVyIj4KCgoJCTwvYm9keT4KPC9odG1sPgo=
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:48 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-3-pieces-paris-128m2/r752119?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 31 Mar 2020 16:38:48 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=719ae8c3fd1e7d972b0cde3b7a728240; path=/; HttpOnly
      - country=fr; expires=Wed, 31-Mar-2021 16:38:48 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Wed, 31-Mar-2021 16:38:48 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ICAgIDwhRE9DVFlQRSBodG1sPgoKICAgIDxoZWFkPgogICAgICAgIDwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIChmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzogbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPScvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JytpK2RsO2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaixmKTt9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1XUEtOU0Q5Jyk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ii8+CiAgICAgICAgPHRpdGxlPmlhZCAtICAgIEFwcGFydGVtZW50IGRlIDEyOCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMKPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICBjb250ZW50PSIgICAgICAgICAgICBpYWQgRnJhbmNlIC0gR3VpbGxhdW1lIERVQ0hFU05FICB2b3VzIHByb3Bvc2UgOiBQYXJpcyAxN8OobWUgLSBCb3VsZXZhcmQgZGVzIEJhdGlnbm9sbGVzIC0gRW4gY2V0dGUgcMOpcmlvZGUgZGUgY29uZmluZW1lbnQsIGplIHJlc3RlIGRpc3BvbmlibGUgZXQgcsOpYWN0aWYgw6AgdG91dC4uLgogICAgIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9ImlhZCBpbW1vYmlsaWVyIi8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgICAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1pbmltdW0tc2NhbGU9MSI+CiAgICAgICAgPG1ldGEgbmFtZT0iZ29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uIiBjb250ZW50PSJNM0NVaXB6cGRBZE16TFpnb0tLWFlPSTh6eXJtblRsbm0yXzFRRWcyUWpzIi8+CiAgICAgICAgICAgIDxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0iaW5kZXgsIGZvbGxvdyIvPgogICAgICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0zLXBpZWNlcy1wYXJpcy0xMjhtMi9yNzUyMTE5P19sb2NhbGU9ZnIiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IklBRCIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJBcHBhcnRlbWVudCBkZSAxMjggbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6bG9jYWxlIiBjb250ZW50PSJmcl9GUiIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmxvY2FsZTphbHRlcm5hdGUiIGNvbnRlbnQ9ImVuX1VTIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0id2Vic2l0ZSIvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSIgICAgCiAgICAgICAgaWFkIEZyYW5jZSAtIEd1aWxsYXVtZSBEVUNIRVNORSAoMDYgMTQgNTggNTkgMzIpIHZvdXMgcHJvcG9zZSA6IFBhcmlzIDE3w6htZSAtIEJvdWxldmFyZCBkZXMgQmF0aWdub2xsZXMgLSBFbiBjZXR0ZSBww6lyaW9kZSBkZSBjb25maW5lbWVudCwgamUgcmVzdGUgZGlzcG9uaWJsZSBldCByw6lhY3RpZiDDoCB0b3V0ZSBkZW1hbmRlIGRlIHZvdHJlIHBhcnQgZXQgdm91cyBwcm9wb3NlIDogQXUgNcOobWUgw6l0YWdlIGQndW4gaW1tZXVibGUgaGF1c3NtYW5uaWVuIGF2ZWMgYXNjZW5zZXVyLCBvcmllbnTDqSBzdWQgYXZlYyBzb24gYmFsY29uLi4uCiAgICAiLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTEyOG0yL3I3NTIxMTkiLz4KICAgICAgICAgICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIgogICAgICAgICAgICAgIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90b190aHVtYi9waG90by83Mjk0MzAzOC5qcGciLz4KICAgICAgICA8bWV0YSBwcm9wZXJ0eT0idHdpdHRlcjppbWFnZSIKICAgICAgICAgICAgICBjb250ZW50PSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fdGh1bWIvcGhvdG8vNzI5NDMwMzguanBnIi8+CiAgICAgICAgPG1ldGEgcHJvcGVydHk9InR3aXR0ZXI6c2l0ZSIgY29udGVudD0iaWFkIi8+CiAgICA8bWV0YSBwcm9wZXJ0eT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5Ii8+CiAgICA8bWV0YSBwcm9wZXJ0eT0idHdpdHRlcjp0aXRsZSIgY29udGVudD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIvPgogICAgPG1ldGEgcHJvcGVydHk9InR3aXR0ZXI6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiAgICAgICAgICAgICAgICBpYWQgRnJhbmNlIC0gR3VpbGxhdW1lIERVQ0hFU05FICgwNiAxNCA1OCA1OSAzMikgdm91cyBwcm9wb3NlIDogUGFyaXMgMTfDqG1lIC0gQm91bGV2YXJkIGRlcyBCYXRpZ25vbGxlcyAtIEVuIGNldHRlIHDDqXJpb2RlIGRlIGNvbmZpbmVtZW50LCBqZSByZXN0ZSBkaXNwb25pYmxlIGV0IHLDqWFjdGlmIMOgIHRvdXRlIGRlbWFuZGUgZGUgdm90cmUgcGFydCBldCB2b3VzIHByb3Bvc2UgOiBBdSA1w6htZSDDqXRhZ2UgZCd1biBpbW1ldWJsZSBoYXVzc21hbm5pZW4gYXZlYyBhc2NlbnNldXIsIG9yaWVudMOpIHN1ZCBhdmVjIHNvbiBiYWxjb24uLi4KICAgICIvPgoKCiAgICAgICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNhY2hlLWNvbnRyb2wiIGNvbnRlbnQ9Im1heC1hZ2U9MCIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNhY2hlLWNvbnRyb2wiIGNvbnRlbnQ9Im5vLWNhY2hlIi8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iZXhwaXJlcyIgY29udGVudD0iMCIvPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImV4cGlyZXMiIGNvbnRlbnQ9IlR1ZSwgMDEgSmFuIDE5ODAgMTowMDowMCBHTVQiLz4KICAgICAgICA8bWV0YSBodHRwLWVxdWl2PSJwcmFnbWEiIGNvbnRlbnQ9Im5vLWNhY2hlIi8+CgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMzJ4MzIiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi0zMngzMi5wbmciPgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMTZ4MTYiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi0xNngxNi5wbmciPgogICAgICAgIDxsaW5rIHJlbD0ibWFuaWZlc3QiIGhyZWY9Ii9pbWcvZmF2aWNvbnMvbWFuaWZlc3QuanNvbiI+CiAgICAgICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiNmZmZmZmYiPgogICAgICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSIvaW1nL2Zhdmljb25zL21zLWljb24tMTQ0eDE0NC5wbmciPgogICAgICAgIDxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjZmZmZmZmICI+CgogICAgICAgICAgICAgICAgICAgIDwhLS0gKiogR09PR0xFIEZPTlRTICoqIC0tPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9R2xvcmlhK0hhbGxlbHVqYWgiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9TGF0bzozMDAsNDAwLDcwMCwzMDBpdGFsaWMsNDAwaXRhbGljLDcwMGl0YWxpYyIKICAgICAgICAgICAgICAgICAgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICAgICAgICAgIDxsaW5rIGhyZWY9Ii8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Ecm9pZCtTYW5zOjQwMCw3MDAiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgogICAgICAgICAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um91Z2UrU2NyaXB0IiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KCiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy92ZW5kb3ItYTE1MTU4OWJlOC5taW4uY3NzIj4KICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvYWxsLmNzcyI+CiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9tYWluLTQyMTFkNzU2MWYubWluLmNzcyI+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxzdHlsZT4KICAgICAgICAgICAgZGl2LmNjLXdpbmRvdy5jYy1iYW5uZXIgewogICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDBweDsKICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAwcHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGEuY2MtYnRuIHsKICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC43ZW07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNwYW4uY2MtbWVzc2FnZSB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDExcHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGEuY2MtYnRuLmNjLWRpc21pc3M6aG92ZXIgewogICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGEuY2MtYnRuLmNjLWFsbG93OmhvdmVyIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZGVmZjU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5oaWRlUHQgewogICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTsKICAgICAgICAgICAgfQogICAgICAgIDwvc3R5bGU+CgoKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNS4wL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyI+CiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Ii9pbWcvZmF2aWNvbnMvZmF2aWNvbi5pY28iLz4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgc3JjPSIvYWxsLmpzIj48L3NjcmlwdD4KICAgICAgICAKICAgIAogICAgPC9oZWFkPgoKCgo8Ym9keSAgY2xhc3M9InByZXN0aWdlIiBpdGVtc2NvcGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1dlYlBhZ2UiPgo8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KPG5vc2NyaXB0PgogICAgPGlmcmFtZSBzcmM9Ii8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLVdQS05TRDkiIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPgo8L25vc2NyaXB0Pgo8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgLS0+Cgo8ZGl2IGlkPSJmYi1yb290Ij48L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByZS1oZWFkZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoaWRkZW4teHMiPgogICAgICAgICAgICAgICAgICAgICAgICBQb3VyIHVuZSBtZWlsbGV1cmUgZXhww6lyaWVuY2Ugc3VyIG5vdHJlIHNpdGUgOiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waW4iPjwvaT4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0gZm9ybV9fbG9jYWxpemF0aW9uIj4KICAgICAgICAgICAgICAgICAgICBMb2NhbGlzZXotdm91cyAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJmb3JtX19sb2NhbGl6YXRpb24iIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Fycm93LTEiIHZhbHVlPSIiIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9nZW8tc2VhcmNoLyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11c2VyY291bnRyeT0iICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jb3VudHJ5PSJmciI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidXR0b24gYnV0dG9uX19jbG9zZSI+PHNwYW4gY2xhc3M9ImhpZGRlbi14cyI+RmVybWVyPC9zcGFuPiA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tY3Jvc3MiPjwvaT48L2E+CiAgICAgICAgPC9kaXY+CiAgICAKICAgIAo8ZGl2IGNsYXNzPSJtYWluLWhlYWRlci13cmFwcGVyIj4KICAgIDxkaXYgaWQ9Im1haW4iIGNsYXNzPSJtYWluLWNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbl9fbWVudS1jb250YWluZXIiPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b25fX21lbnUtb3BlbiI+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLW1lbnUiPjwvaT48L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uX19tZW51LWNsb3NlIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24tY3Jvc3MiPjwvaT48L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aGVhZGVyIGlkPSJoZWFkZXIiIGNsYXNzPSIgaGVhZGVyIiBpdGVtc2NvcGUKICAgICAgICAgICAgICAgICAgICBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvV1BIZWFkZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyX19sb2dvIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvIiBjbGFzcz0iaGVhZGVyX19sb2dvLWxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9pYWQtbG9nby5wbmciIGFsdD0iSUFEIDogTG9jYXRpb24gZXQgdmVudGUgZW4gaW1tb2JpbGllciI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8bmF2IGlkPSJtZW51IiBjbGFzcz0ibWVudSBtZW51X19tb2JpbGUgIgogICAgICAgICAgICAgICAgICAgICBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1NpdGVOYXZpZ2F0aW9uRWxlbWVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpcnN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FjaGF0L2xpc3RlL2Fubm9uY2VzP3NvcnQ9YWQuZmlyc3RQdWJsaXNoRGF0ZSZhbXA7ZGlyPWRlc2MiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgQWNoZXRlcgoKICAgICAgICA8aSBjbGFzcz0ibWVudS1pY29uMiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2xvY2F0aW9uL2xpc3RlL2Fubm9uY2VzP3NvcnQ9YWQuZmlyc3RQdWJsaXNoRGF0ZSZhbXA7ZGlyPWRlc2MiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgTG91ZXIKCiAgICAgICAgPGkgY2xhc3M9Im1lbnUtaWNvbjMiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW5kcmUiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgVmVuZHJlCgogICAgICAgIDxpIGNsYXNzPSJtZW51LWljb24zIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZXN0aW1lci12b3RyZS1iaWVuIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIEVzdGltZXIKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaXRlbS1oaWdobGlnaHRlZCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW50ZS9hbm5vbmNlcy9pbW1vYmlsaWVyLXByZXN0aWdlL2xpc3RlLXJlc3VsdGF0P3JhZGl1cz0yMCZhbXA7dHJhbnNhY3Rpb25fdHlwZT1WZW50ZSZhbXA7dGFncyU1QjAlNUQ9cHJlc3RpZ2UiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgUFJFU1RJR0UKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2hvdy14cyI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci90cm91dmVyLXVuLWNvbnNlaWxsZXIiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgVHJvdXZlciB1biBjb25zZWlsbGVyCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNob3cteHMgbGFzdCIgaWNvbj0iZGVtby1pY29uIGljb24tdXNlcl96b29tIj4gICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kZXZlbmlyLWNvbnNlaWxsZXIuaWFkZnJhbmNlLmZyIiAgICAgY2xhc3M9IiI+CiAgICAgICAgICAgIE5vdXMgcmVqb2luZHJlCgogICAgICAgIDxpIGNsYXNzPSIvIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgICAgICAgICAgICAgIDwvbmF2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lbnVfX3NlY29uZCAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGlkZGVuLXhzIGZpcnN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3Ryb3V2ZXItdW4tY29uc2VpbGxlciIgICAgIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fc2Vjb25kIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICAgICAgVHJvdXZlciB1biBjb25zZWlsbGVyKgoKICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdXNlcl96b29tIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoaWRkZW4teHMiIGljb249ImRlbW8taWNvbiBpY29uLXVzZXJfem9vbSI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGV2ZW5pci1jb25zZWlsbGVyLmlhZGZyYW5jZS5mciIgICAgIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX21haW4gYnV0dG9uX19tZWRpdW0iPgogICAgICAgICAgICBOb3VzIHJlam9pbmRyZQoKICAgICAgICA8aSBjbGFzcz0iLyI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGFzLWNoaWxkIGNvdW50cnktY2hvc2VuLWZyIGxpbmstaWFkIj4gICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgICAgIGNsYXNzPSJidXR0b24gYnV0dG9uX19wcm9maWwiPgogICAgICAgICAgICBpYWQgRnJhbmNlCgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1kb3duIj48L2k+CiAgICA8L2E+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im1lbnVfbGV2ZWxfMSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaXJzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vd3d3LmlhZGVzcGFuYS5lcyIgICAgIGNsYXNzPSJ0ZXh0LWNlbnRlciBtZW51LWl0ZW0tdW5jZW50ZXJlZCBpYWQtZnJhbmNlIj4KICAgICAgICAgICAgaWFkIEVzcGHDsWEKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgPGEgaHJlZj0iLy93d3cuaWFkLWl0YWxpYS5pdCIgICAgIGNsYXNzPSJ0ZXh0LWNlbnRlciBtZW51LWl0ZW0tdW5jZW50ZXJlZCBpYWQtZnJhbmNlIj4KICAgICAgICAgICAgaWFkIEl0YWxpYQoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsYXN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iLy93d3cuaWFkcG9ydHVnYWwucHQiICAgICBjbGFzcz0idGV4dC1jZW50ZXIgbWVudS1pdGVtLXVuY2VudGVyZWQgaWFkLWZyYW5jZSI+CiAgICAgICAgICAgIGlhZCBQb3J0dWdhbAoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhcy1jaGlsZCB1c2VyLW1lbnUgbGFzdCI+ICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcHJvZmlsIj4KICAgICAgICAgICAgCgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi11c2VyLTQiPjwvaT4KICAgIDwvYT4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibWVudV9sZXZlbF8xIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgaWQ9ImxvZ2luX2J0biIgY2xhc3M9ImRlbW8taWNvbiBpY29uLXVzZXItMyB3aWRlIGZpcnN0IiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbG9naW4iIGRhdGEtdGFiPSJsb2dpbi10YWIiPiAgICAgICAgPHNwYW4+ICAgIFNlIGNvbm5lY3Rlcgo8L3NwYW4+ICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGkgaWQ9ImNyZWF0ZV9idG4iIGNsYXNzPSJkZW1vLWljb24gaWNvbi11c2VyLTIgd2lkZSBsYXN0IiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbG9naW4iIGRhdGEtdGFiPSJyZWdpc3Rlci10YWIiPiAgICAgICAgPHNwYW4+ICAgIENyw6llciB1biBjb21wdGUKPC9zcGFuPiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgIDwvbGk+CgoKICAgIDwvdWw+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2hlYWRlcj4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgoKCjxtYWluIGlkPSJtYWluX19jb250ZW50IiBjbGFzcz0ibWFpbl9fY29udGVudCIgaXRlbXNjb3BlIGl0ZW1wcm9wPSJtYWluQ29udGVudE9mUGFnZSIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0Jsb2ciPgogICAgPHNlY3Rpb24gaWQ9ImNvbnRlbnQiIGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgPGZvcm0gaWQ9InNlYXJjaEZvcm0iIGNsYXNzPSJzZWFyY2hfX2JhciIgYWN0aW9uPSIvcmVjaGVyY2hlci9hbm5vbmNlcyIgbWV0aG9kPSJHRVQiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19maWx0ZXJzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1zZWxlY3QiIGRhdGEtbmFtZT0iQWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5BY3Rpb248L2E+CiAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0idHJhbnNhY3Rpb25fdHlwZSIgaWQ9InNlYXJjaC1uYXYiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlbGVjdGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IlZlbnRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjaGV0ZXIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iTG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG91ZXIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJWaWFnZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlhZ2VyICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4tLT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJMaWV1KHgpIgogICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCAgbXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4gTGlldSh4KTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iZ2VvX3ZhbHVlIiBjbGFzcz0ic2VsZWN0X19pbnB1dCB3aGVyZVRvQnV5X19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9IndoZXJlVG9CdXkiIGNsYXNzPSJ3aGVyZVRvQnV5U2VhcmNoQmFyIHNlYXJjaC1iaWctZmllbGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJPw7kgPyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11cmw9Ii9hdXRvY29tcGxldGUtZ2MvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcnNsZXktZXJyb3JzLW1lc3NhZ2VzLWRpc2FibGVkPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWdzX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJUeXBlKHMpIGRlIGJpZW4iCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0aW9ubmVzPSJzw6lsZWN0aW9ubsOpcyIgZGF0YS1hbGxzZWxlY3Rpb25uZXM9IlRvdXMgc8OpbGVjdGlvbm7DqXMiCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjLXNlbGVjdCBtdWx0aXBsZSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VHlwZShzKSBkZSBiaWVuPC9hPgogICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImdlbmVyaWNfdHlwZVtdIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSJBUCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXBwYXJ0ZW1lbnQtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iTVYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1haXNvbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJQQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tZ2FyYWdlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdhcmFnZSAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJGQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tY29tbWVyY2UtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVyY2UgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iSU0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWFwcGFydGVtZW50LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIELDonRpbWVudCAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJCVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYnVyZWF1LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1cmVhdSAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0idGVycmFpbiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJURSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXJyYWluICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbmFtZT0iU3VyZmFjZSBtaW4vbWF4IiBkYXRhLXN0YXJ0X2F0PSJkZSIgIGRhdGEtc3RhcnRfdG89IsOgIiBjbGFzcz0iYy1zZWxlY3QgbWluX19tYXgKICAgICAgICAgICAgICAgICAgICAiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlN1cmZhY2UgbWluL21heDwvYT4KICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pbiA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJzdXJmYWNlX21pbiIgbmFtZT0ic3VyZmFjZV9taW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyc2xleS1yZXF1aXJlZD0iZmFsc2UiIGRhdGEtcGFyc2xleS10eXBlPSJudW1iZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPm3Csjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZsYXQtMiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF4IDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9InN1cmZhY2VfbWF4IiBuYW1lPSJzdXJmYWNlX21heCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPSJmYWxzZSIgZGF0YS1wYXJzbGV5LXR5cGU9Im51bWJlciIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZSI+bcKyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLXVzZS1uYW1lPSJmYWxzZSIgZGF0YS1uYW1lPSJQacOoY2UocykiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InBpZWNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlBpw6hjZShzKTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0icm9vbXNbXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGRhdGEtdmFsdWU9IjEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBwacOoY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzIHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1IHBpw6hjZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpZWNlLTYiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA2IHBpw6hjZXMgZXQgcGx1cyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1uYW1lPSJQcml4IG1pbi9tYXgiIGRhdGEtc3RhcnRfYXQ9ImRlIiAgZGF0YS1zdGFydF90bz0iw6AiIGNsYXNzPSJjLXNlbGVjdCAgbWluX19tYXgKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+UHJpeCBtaW4vbWF4PC9hPgogICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdHJhbnNhY3Rpb24tdHlwZT0iVmVudGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXByaWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaW4gOiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0icHJpY2VfbWluIiB0eXBlPSJ0ZXh0IiB0aXRsZT0iUHJpeCBtaW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdHJhbnNhY3Rpb24tdHlwZT0iTG9jYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXByaWNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXggOiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0icHJpY2VfbWF4IiB0eXBlPSJ0ZXh0IiB0aXRsZT0iUHJpeCBtYXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWUiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fYm94X19tb3JlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdXNlLW5hbWU9ImZhbHNlIiBpZD0iY2hhbWJyZXMiIGRhdGEtbmFtZT0iQ2hhbWJyZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZWxlY3Rpb25uZXM9InPDqWxlY3Rpb25uw6lzIiBkYXRhLWFsbHNlbGVjdGlvbm5lcz0iVG91cyBzw6lsZWN0aW9ubsOpcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYy1zZWxlY3QgbXVsdGlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+IENoYW1icmVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iYmVkcm9vbXNbXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBjaGFtYnJlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgY2hhbWJyZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBjaGFtYnJlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSI0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0IGNoYW1icmVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IjUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYmVkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUgY2hhbWJyZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1iZWQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNiBjaGFtYnJlcyBldCBwbHVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJUYWcocykiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VGFnKHMpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJ0YWdzW10iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9ImV4Y2x1c2l2ZSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGNsdXNpdml0w6kgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJ0b3AiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdGFnIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ291cCBkZSBjb2V1ciAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Im5ldyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3V2ZWF1ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0icHJpY2VfZG93biIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYWlzc2UgZGUgcHJpeCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9ImNvbXByb21pcyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb3VzIGNvbXByb21pcyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9Im5ld19idWlsZGluZyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXVmICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS11c2UtbmFtZT0idHJ1ZSIgZGF0YS1uYW1lPSJEUEUiCiAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNlbGVjdGlvbm5lcz0ic8OpbGVjdGlvbm7DqXMiIGRhdGEtYWxsc2VsZWN0aW9ubmVzPSJUb3VzIHPDqWxlY3Rpb25uw6lzIgogICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImMtc2VsZWN0IG11bHRpcGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+RFBFPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJjbGFzc19kX3BfZVtdIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkErIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEErCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJBIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iQi0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQi0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iRCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBECiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPSJFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc3Rhci0xIiBzdHlsZT0iZm9udC1zaXplOiAxNnB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiIHN0eWxlPSJmb250LXNpemU6IDE2cHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT0iRyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSIgc3R5bGU9ImZvbnQtc2l6ZTogMTZweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLW5hbWU9IlR5cGUgZGUgbWFuZGF0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VHlwZSBkZSBtYW5kYXQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBkYXRhLXR5cGU9ImV4Y2x1c2l2ZSIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgZGF0YS12YWx1ZT0iMSI+RXhjbHVzaWY8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpICBkYXRhLXZhbHVlPSIwIj5Ob24tZXhjbHVzaWY8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1zZWxlY3QiIGRhdGEtbmFtZT0iw4l0ZW5kcmUgbGEgcmVjaGVyY2hlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+w4l0ZW5kcmUgbGEgcmVjaGVyY2hlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgZGF0YS10eXBlPSJyYWRpdXMiIGNsYXNzPSJzZWxlY3RfX2lucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSI1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1a208L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMGttPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTVrbTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwa208L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImlkIiBpZD0ibWlkIiBwbGFjZWhvbGRlcj0iTsKwIGRlIG1hbmRhdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VhcmNoLXNtYWxsLWZpZWxkIiBkYXRhLXBhcnNsZXktcmVxdWlyZWQ9ImZhbHNlIiBkYXRhLXBhcnNsZXktdHlwZT0ibnVtYmVyIi8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC0zIHJpZ2h0X19pbmZvIj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0YSBhbGlnbi1jb2x1bW4tY2VudGVyIj4KCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3NlY29uZCBidXR0b25fX2FjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXNlYXJjaC0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjaGVyY2hlPC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b24gYnV0dG9uX19yb3VuZGVkIGJ1dHRvbl9fYWxlcnQgYnV0dG9uX19tZWRpdW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWI9ImxvZ2luLXRhYiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNyw6llciB1bmUgYWxlcnRlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8IS0tPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19hY3Rpb24gYnV0dG9uX19zZWNvbmQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tc2VhcmNoLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjaGVyY2hlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPi0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBpZD0icGFyYW1zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImV4Y2x1c2l2ZSIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ0YWdzX2xpc3QiIHZhbHVlPSIiLz4KICAgIDwvZGl2PgogICAgPGEgY2xhc3M9Im1vcmUgbW9yZS0taG9tZSIgaHJlZj0iIyI+CiAgICAgICAgZGUgY3JpdMOocmVzICAgIDwvYT4KPC9mb3JtPgoKPGRpdiBjbGFzcz0iZm9vdGVyLW1vYmlsZSI+CiAgICAgICAgICAgICAgICAgICAgPGNlbnRlcj4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJjb250YWN0LW1vYmlsZS1hZC1zaG93IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX3NlY29uZCAiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWVudmVsb3BlIj48L2k+CiAgICAgICAgICAgICAgICA8c3Bhbj5Db250YWN0ZXIgbGUgY29uc2VpbGxlcjwvc3Bhbj4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9jZW50ZXI+CiAgICAgICAgPC9kaXY+CgoKCiAgICA8ZGl2IGNsYXNzPSJicmVhZGNydW1iIj4KICAgIDx1bD4KICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iPgogICAgICAgICAgICAgICAgVmVudGUsIGFjaGF0LCBsb2NhdGlvbiwgbCdpbW1vYmlsaWVyIGRlIHByb3hpbWl0w6kgICAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImFycm93Ij4mZ3Q7PC9saT4KCiAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIvcmVjaGVyY2hlci9hbm5vbmNlcz90cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDthcmVhcz1GUkE4JmFtcDt0YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmFyZWFzJTIyJTJDJTIydmFsdWUlMjIlM0ElMjJGUkE4JTIyJTJDJTIybmFtZSUyMiUzQSUyMiU1Q3UwMGNlbGUtZGUtRnJhbmNlJTIyJTdEJTVEIj4KICAgICAgICAgICAgICAgIFZlbnRlCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iYXJyb3ciPiZndDs8L2xpPgogICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL3JlY2hlcmNoZXIvYW5ub25jZXM/YXJlYXM9RlJBOCZhbXA7dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJhcmVhcyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyRlJBOCUyMiUyQyUyMm5hbWUlMjIlM0ElMjIlNUN1MDBjZWxlLWRlLUZyYW5jZSUyMiU3RCU1RCI+CiAgICAgICAgICAgICAgICAgICAgw45sZS1kZS1GcmFuY2UKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhcnJvdyI+Jmd0OzwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvcmVjaGVyY2hlci9hbm5vbmNlcz90cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDtkZXBhcnRtZW50cz1QYXJpcyZhbXA7dGFnc19saXN0PSU1QiU3QiUyMnR5cGUlMjIlM0ElMjJkZXBhcnRtZW50cyUyMiUyQyUyMnZhbHVlJTIyJTNBJTIyUGFyaXMlMjIlMkMlMjJuYW1lJTIyJTNBJTIyUGFyaXMlMjg3NSUyOSUyMiU3RCU1RCI+CiAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhcnJvdyI+Jmd0OzwvbGk+CiAgICAgICAgICAgICAgICAgICAgCQkJCTxsaT4KCQk8YSBocmVmPSIjIj4KICAgICAgICAgICAgQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUwogICAgICAgICAgICAJCQk8L2E+CQkJCQogICAgICAgIDwvbGk+CiAgICA8L3VsPgo8L2Rpdj4KCjxkaXYgY2xhc3M9Im9mZmVyX19vdGhlciI+CiAgICA8ZGl2IGNsYXNzPSJsZWZ0Ij4KICAgICAgICAgICAgIDxhIGhyZWY9Ii9yZWNoZXJjaGVyL2Fubm9uY2VzP2dwX2lkPTIwNDMzMjM4MTgmYW1wO3RhZ3NfbGlzdD0lNUIlNUQiPgoKICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctMSI+PC9pPiBSZXRvdXIgw6AgbGEgcGFnZSBkZSByZWNoZXJjaGUgPC9hPgo8L2Rpdj4KPC9kaXY+CgogICAgCTxkaXYgaWQ9ImZpY2hlLWJpZW4iPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX25ldyI+Tm91dmVhdTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX3ByZXN0aWdlIj5QcmVzdGlnZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2V4Y2x1c2l2aXRlIj5FeGNsdXNpdml0w6k8L3NwYW4+CiAgICAKICAgIDwvZGl2PgogICAgPHNwYW4gY2xhc3M9ImMtb2ZmZXJfX2ZhdiI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICA8L3NwYW4+CiAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24taG91c2UtaGVhcnQiPjwvaT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlciI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzcyOTQzMDM4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzcyOTQzMDQwLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzcyOTQzMDQyLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzcyOTQzMDQ0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzcyOTQzMDQ2LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzcyOTQzMDQ4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX3NsaWRlci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvX3RodW1iL3Bob3RvLzcyOTQzMDUwLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIgY2xhc3M9ImltZyI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFncmFuZGlyIiBocmVmPSIjbGlnaHRib3gtaW1hZ2UiIGRhdGEtdG9nZ2xlPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1yZXNpemUtZnVsbCI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgICAgIDxkaXYgaWQ9ImxpZ2h0Ym94LWltYWdlIiBjbGFzcz0ibW9kYWxEaWFsb2ciIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIj4KICAgICAgICAgICAgPGRpdiBpZD0iY2xvc2UtYnRuIiBjbGFzcz0iY2xvc2UtYnRuIj5YPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGVyX19saWdodGJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG8vcGhvdG8vNzI5NDMwMzguanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDEyOCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWcgY2VudGVyLXNsaWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvL3Bob3RvLzcyOTQzMDQwLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSAxMjggbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nIGNlbnRlci1zbGlkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90by9waG90by83Mjk0MzA0Mi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyBjZW50ZXItc2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG8vcGhvdG8vNzI5NDMwNDQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDEyOCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWcgY2VudGVyLXNsaWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FkX3Bob3RvL3Bob3RvLzcyOTQzMDQ2LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBcHBhcnRlbWVudCBkZSAxMjggbcKyIC0gMiBjaGFtYnJlcyAtIFBBUklTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nIGNlbnRlci1zbGlkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZF9waG90by9waG90by83Mjk0MzA0OC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iQXBwYXJ0ZW1lbnQgZGUgMTI4IG3CsiAtIDIgY2hhbWJyZXMgLSBQQVJJUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyBjZW50ZXItc2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG8vcGhvdG8vNzI5NDMwNTAuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkFwcGFydGVtZW50IGRlIDEyOCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWcgY2VudGVyLXNsaWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9faW5mb3JtYXRpb24tMSI+CiAgICAgICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQiPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgUsOpZsOpcmVuY2UgZGUgbCdhbm5vbmNlIDogICAgICAgICAgICAgICAgICAgIDxzcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNzUyMTE5CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodCI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2VuZC10by1mcmllbmQvMTc1NTg3NiIKICAgICAgICAgICAgICAgICAgIHRpdGxlPSJFbnZveWVyIGNlIGJpZW4gw6AgdW4gYW1pIgogICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNzZW5kVG9GcmllbmRNb2RhbCIgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgIEVudm9pIHBhciBlbWFpbCAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWVudmVsb3BlIj48L2k+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hZC8xNzU1ODc2L3ByaW50IgogICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJJbXByaW1lciBsYSBmaWNoZSBkZSBjZSBiaWVuIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIEltcHJpbWVyICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXByaW50ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibC1zaGFyZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UGFydGFnZXIgOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZmIteGZibWwtcGFyc2UtaWdub3JlIGNpcmNsZS1mYWNlYm9vayIgZGF0YS1zaGFyZS10aXRsZT0iUGFydGFnZSBGYWNlYm9vayIKICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/dT1odHRwcyUzQSUyRiUyRnd3dy5pYWRmcmFuY2UuZnIlMkZhbm5vbmNlJTJGYXBwYXJ0ZW1lbnQtdmVudGUtMy1waWVjZXMtcGFyaXMtMTI4bTIlMkZyNzUyMTE5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBmYiBpY29uLWZiLXJvbmQiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNpcmNsZS10d2l0dGVyIgogICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vc2hhcmU/dXJsPWh0dHBzJTNBJTJGJTJGd3d3LmlhZGZyYW5jZS5mciUyRmFubm9uY2UlMkZhcHBhcnRlbWVudC12ZW50ZS0zLXBpZWNlcy1wYXJpcy0xMjhtMiUyRnI3NTIxMTkiCiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlBhcnRhZ2UgVHdpdHRlciIgZGF0YS10eXBlPSJzaGFyZS1saW5rIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2hhcmUtdGl0bGU9IlBhcnRhZ2UgVHdpdHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gdHcgaWNvbi10d2l0dGVyLXJvbmQiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNpcmNsZS13aGF0c2FwcCB3aGF0c2FwcF9saW5rIgogICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93YS5tZT90ZXh0PWh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTEyOG0yL3I3NTIxMTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWN0aW9uPSJzaGFyZS93aGF0c2FwcC9zaGFyZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IldoYXRzYXBwIHNoYXJlIiBkYXRhLXR5cGU9InNoYXJlLWxpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2hhcmUtdGl0bGU9IldoYXRzYXBwIHNoYXJlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL3NvY2lhbC93aGF0c2FwcF9ncmV5LnBuZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19oZWFkZXIiPgogICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTgiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZV9fbWFpbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIFZlbnRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDigKIgUEFSSVMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDc1MDE3KSAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9ImgxIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IGRlIDEyOCBtwrIgLSAyIGNoYW1icmVzIC0gUEFSSVMKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9oMT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0IGdyYXBoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkZXNjIj5BdSBwcml4IGRlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIDU5OCA4NTAgPHNwYW4+JmV1cm87PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTIgNDkxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmZXVybzsvbcKyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJsaW5rLXNlbGVjdGlvbiBidXR0b24gYnV0dG9uX19tYWluIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fcm91bmRlZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNsb2dpbiIgZGF0YS10YWI9InJlZ2lzdGVyLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1zdGFyLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VpdnJlIGNlIGJpZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2luZm9ybWF0aW9uLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSI+U3VyZmFjZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImVsZW1lbnQtaWNvbmUiPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mbGF0LTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEyOCBtwrIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlIj5OYiBkZSBwacOoY2VzPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS0zIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSI+TmIgZGUgY2hhbWJyZXM8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPiAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19jb250ZW50IG9mZmVyX19kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImgyIj5EZXNjcmlwdGlmPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+aWFkIEZyYW5jZSAtIEd1aWxsYXVtZSBEVUNIRVNORSAgdm91cyBwcm9wb3NlIDogUGFyaXMgMTfDqG1lIC0gQm91bGV2YXJkIGRlcyBCYXRpZ25vbGxlcyAtIEVuIGNldHRlIHDDqXJpb2RlIGRlIGNvbmZpbmVtZW50LCBqZSByZXN0ZSBkaXNwb25pYmxlIGV0IHLDqWFjdGlmIMOgIHRvdXRlIGRlbWFuZGUgZGUgdm90cmUgcGFydCBldCB2b3VzIHByb3Bvc2UgOiBBdSA1w6htZSDDqXRhZ2UgZCd1biBpbW1ldWJsZSBoYXVzc21hbm5pZW4gYXZlYyBhc2NlbnNldXIsIG9yaWVudMOpIHN1ZCBhdmVjIHNvbiBiYWxjb24gZmlsYW50LCBjZXQgYXBwYXJ0ZW1lbnQgZGUgMTI4IG0yIGVudmlyb24gw6AgcsOpbm92ZXIsIHByb2NoZSBkZSB0b3VzIGNvbW1lcmNlcyBldCB0cmFuc3BvcnRzIHByb3Bvc2UgdW4gcG90ZW50aWVsIGQnYW3DqW5hZ2VtZW50IGVuIDMgb3UgNCBjaGFtYnJlcy48YnI+SWwgZXN0IGNvbXBvc8OpIGQndW5lIGdhbGVyaWUgZCdlbnRyw6llLCBkJ3VuIGdyYW5kIGV0IHBldGl0IHNhbG9uIChvdSAyw6htZSBjaGFtYnJlKSBhdmVjIGNoZW1pbsOpZXMsIGQndW5lIGdyYW5kZSBjaGFtYnJlIHBhcmVudGFsZSwgZCd1bmUgc2FsbGUgw6AgbWFuZ2VyLCBkJ3VuZSBjdWlzaW5lLCBkJ3VuZSBzYWxsZSBkZSBkb3VjaGUgYXZlYyB3YywgZCd1bmUgc2FsbGUgZGUgYmFpbiBldCBkJ3VuIDLDqG1lIHdjIHPDqXBhcsOpLjxicj5MJ2ltbWV1YmxlIGVzdCBzw6ljdXJpc8OpIHBhciB1biBkaWdpY29kZSwgdW4gaW50ZXJwaG9uZSBldCB1bmUgZ2FyZGllbm5lLjxicj5VbmUgY2F2ZSBldCB1bmUgY2hhbWJyZSBkZSBzZXJ2aWNlIHZpZW5uZW50IGNvbXBsw6l0ZXIgY2UgYmllbi48YnI+PGJyPkxhIHByw6lzZW50ZSBhbm5vbmNlIGltbW9iaWxpw6hyZSB2aXNlIDEgbG90IHByaW5jaXBhbCBzaXR1w6kgZGFucyB1bmUgY29wcm9wcmnDqXTDqSBmb3JtYW50IDUgbG90cyBhdSB0b3RhbCBuZSBmYWlzYW50IGwnb2JqZXQgZCdhdWN1bmUgcHJvY8OpZHVyZSBlbiBjb3VycyBldCBkJ3VuIG1vbnRhbnQgZGUgY2hhcmdlcyBk4oCZZW52aXJvbiAzMTcg4oKsIHBhciBtb2lzIChzb2l0IDM4MDQg4oKsIGFubnVlbCkgZMOpY2xhcsOpIHBhciBsZSB2ZW5kZXVyLkhvbm9yYWlyZXMgZOKAmWFnZW5jZSDDoCBsYSBjaGFyZ2UgZHUgdmVuZGV1ci5JbmZvcm1hdGlvbiBkJ2FmZmljaGFnZSDDqW5lcmfDqXRpcXVlIHN1ciBjZSBiaWVuIDogRFBFIEMgaW5kaWNlIDEwNyBldCBHRVMgRCBpbmRpY2UgMjUuIExhIHByw6lzZW50ZSBhbm5vbmNlIGltbW9iaWxpw6hyZSBhIMOpdMOpIHLDqWRpZ8OpZSBzb3VzIGxhIHJlc3BvbnNhYmlsaXTDqSDDqWRpdG9yaWFsZSBkZSBNLiBHdWlsbGF1bWUgRFVDSEVTTkUgKElEIDQxNzE0KSwgQWdlbnQgQ29tbWVyY2lhbCBtYW5kYXRhaXJlIGVuIGltbW9iaWxpZXIgaW1tYXRyaWN1bMOpIGF1IFJlZ2lzdHJlIFNww6ljaWFsIGRlcyBBZ2VudHMgQ29tbWVyY2lhdXggKFJTQUMpIGR1IFRyaWJ1bmFsIGRlIENvbW1lcmNlIGRlIFZlcnNhaWxsZXMgc291cyBsZSBudW3DqXJvIDg0NDcwMjA5Mi4gPGJyPlJldHJvdXZleiB0b3VzIG5vcyBiaWVucyBzdXIgbm90cmUgc2l0ZSBpbnRlcm5ldC4gd3d3LmlhZGZyYW5jZS5jb208L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19jb250ZW50IG9mZmVyX19pbmZvcm1hdGlvbi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fZXF1aXBlbWVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImgyIj5FcXVpcGVtZW50PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkV0YWdlPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzY2Vuc2V1cjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYXZlPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpZ2ljb2RlPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkludGVycGhvbmU8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2FyZGllbjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaGVtaW7DqWU8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGxhY2FyZHM8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2VuZXJneSI+CiAgICA8aDIgY2xhc3M9ImgyIj5CaWxhbiDDqW5lcmdldGlxdWU8L2gyPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgICAgICA8cCBjbGFzcz0idGl0bGUiPkNvbnNvbW1hdGlvbiBkJ8OpbmVyZ2llPC9wPgogICAgICAgICAgICA8cCBjbGFzcz0idGl0bGVfX3NlY29uZCI+TG9nZW1lbnQgw6ljb25vbWU8L3A+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyX19ncmFwaCI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48c3Bhbj4mbHQ7IDUwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5BPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+NTEgw6AgOTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjdXJyZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+OTEgw6AgMTUwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5DPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjdXJyZW50X19ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwNwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48c3Bhbj4xNTEgw6AgMjMwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5EPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PHNwYW4+MjMxIMOgIDMzMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+RTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxzcGFuPjMzMSDDoCA0NTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48c3Bhbj4mZ3Q7IDQ1MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+Rzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZV9fc2Vjb25kIj5Mb2dlbWVudCBlbmVyZ2l2b3JlPC9wPgogICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgICAgICA8cCBjbGFzcz0idGl0bGUiPkVtaXNzaW9uIGRlIGdheiDDoCBlZmZldCBkZSBzZXJyZTwvcD4KICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlX19zZWNvbmQiPkZhaWJsZSDDqW1pc3Npb24gZGUgR0VTPC9wPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlcl9fZ3JhcGggb2ZmZXJfX2dyYXBoLTIiPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Jmx0OyA1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj42IMOgIDEwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4xMSDDoCAyMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5DPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImN1cnJlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+MjEgw6AgMzU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29kZSI+RDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImN1cnJlbnRfX2JvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjM2IMOgIDU1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvZGUiPkU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj41NiDDoCA4MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5GPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Jmd0OyA4MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2RlIj5HPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8cCBjbGFzcz0idGl0bGVfX3NlY29uZCI+Rm9ydGUgw6ltaXNzaW9uIGRlIEdFUzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib2ZmZXJfX2NvbnRlbnQgb2ZmZXJfX3BlcnNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iaDMiPkplIHN1aXMgaW50w6lyZXNzw6koZSkgcGFyIGNlIGJpZW48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCjxmb3JtIG5hbWU9ImNvbnRhY3QiIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS0zLXBpZWNlcy1wYXJpcy0xMjhtMi9yNzUyMTE5P19sb2NhbGU9ZnIiIGNsYXNzPSJmb3JtX19vZmZlciIgZGF0YS1wYXJzbGV5LXZhbGlkYXRlPSJ0cnVlIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImNvbnRhY3RfX3Rva2VuIiBuYW1lPSJjb250YWN0W190b2tlbl0iIHZhbHVlPSJJUmlCWTF3b3FzRHJSRlJDem1rUWlsX2s5clJ5UWRPVnpIZ0VYYVF2VkpNIiAvPgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0IiBkYXRhLXRpdGxlPSJOwrA3NTIxMTkiPgogICAgICAgICAgICA8YSBocmVmPSIjIj5Nb3RpZjwvYT4KICAgICAgICAgICAgPHVsIGlkPSJtb3RpZl9hZ2VudCIgZGF0YS10eXBlPSJjb250YWN0W21vdGlmcHRdIiBkYXRhLW5hbWU9Im1vdGlmIiBjbGFzcz0ic2VsZWN0X19pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxIiBjbGFzcz0ic2VsZWN0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgICBKZSBzdWlzIGludMOpcsOpc3PDqShlKSBwYXIgdW4gYmllbgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIyIiA+CiAgICAgICAgICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlcmFpcyBhdm9pciBwbHVzIGQmIzAzOTtpbmZvcm1hdGlvbnMKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iMyIgPgogICAgICAgICAgICAgICAgICAgICAgICBKZSBzb3VoYWl0ZXJhaXMgdmlzaXRlciBjZSBiaWVuCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjQiID4KICAgICAgICAgICAgICAgICAgICAgICAgSmUgc291aGFpdGVyYWlzIG1lIHJlbnNlaWduZXIgc3VyIGxlcyBiaWVucyBhdXggYWxlbnRvdXJzCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RbbW90aWZwdF0iLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJjb250YWN0X2xhc3RfbmFtZSIgbmFtZT0iY29udGFjdFtsYXN0X25hbWVdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJOb20gKiIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9maXJzdF9uYW1lIiBuYW1lPSJjb250YWN0W2ZpcnN0X25hbWVdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJQcsOpbm9tICoiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgaWQ9ImNvbnRhY3RfZW1haWwiIG5hbWU9ImNvbnRhY3RbZW1haWxdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJFbWFpbCAqIiBwYXR0ZXJuPSIuKkAuKihcLlthLXpBLVowLTkuLV0rKSskIiBkYXRhLXBhcnNsZXktdHlwZT0iZW1haWwiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCTxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY29udGFjdF9waG9uZSIgbmFtZT0iY29udGFjdFtwaG9uZV0iIHBsYWNlaG9sZGVyPSJUw6lsw6lwaG9uZSIgbWluTGVuZ3RoPSI2IiBwYXR0ZXJuPSJcZCoiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgIDx0ZXh0YXJlYSBpZD0iY29udGFjdF9tZXNzYWdlIiBuYW1lPSJjb250YWN0W21lc3NhZ2VdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJNZXNzYWdlIj48L3RleHRhcmVhPgogICAgPC9kaXY+CgkKPC9kaXY+CjxkaXYgaWQ9ImNhcHRjaGEiIGNsYXNzPSJnLXJlY2FwdGNoYSIgZGF0YS1zaXRla2V5PSI2TGNIVURNVUFBQUFBRkJYeDk1LVFEWWszNXhmc3hXMmpYLXZ4Y1N4Ij48L2Rpdj4KPGRpdiBjbGFzcz0iZm9ybV9fZm9vdGVyIj4KICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX193aGl0ZSBidXR0b25fX21lZGl1bSI+CiAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxldHRlciI+PC9pPgogICAgICAgIDxzcGFuPkNvbnRhY3RlciB2b3RyZSBjb25zZWlsbGVyPC9zcGFuPgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPgogICAgPC9idXR0b24+CjwvZGl2Pgo8L2Zvcm0+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8YXNpZGUgY2xhc3M9InNpZGViYXIgY29sLTQiIGlkPSJzaWRlYmFyIiByb2xlPSJjb21wbGVtZW50YXJ5IiBpdGVtc2NvcGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1dQU2lkZUJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImwtZm9ybV9fcGVyc29uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBlcnNvbl9faW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9HVUlMTEFVTUUuRFVDSEVTTkUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJhZEFnZW50Q29udGFjdEZvcm0iIGNsYXNzPSJwZXJzb25fX2hlYWRlciBjLW9mZmVyX19wcm9maWxfaW1nX2FkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2NhY2hlL2FnZW50X3Bob3RvX3RodW1iL2F2YXRhci8xODUwMDA0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJHdWlsbGF1bWUgRFVDSEVTTkUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsYXp5IGltZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXByb3A9ImltYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBlcnNvbl9fYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHdWlsbGF1bWUgRFVDSEVTTkUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9iYXJlbWUuaWFkZnJhbmNlLmZyL2RldGFpbC80MTcxNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4tYmFyZW1lLWRlc2t0b3AgYnRuLWJhcmVtZS1hZCIgc3R5bGU9ImNvbG9yOiAjZmZmIiB0YXJnZXQ9Il9ibGFuayI+QmFyw6htZSBkJ2hvbm9yYWlyZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHNyYz0iLy93aWRnZXQuaW1tb2R2aXNvci5jb20vanMvd2lkZ2V0LmpzIj48L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vd2lkZ2V0LmltbW9kdmlzb3IuY29tIiBpZD0iaW1tb2R2aXNvci13aWRnZXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWltLWFwaWtleT0iVFdINy1aUDI5WS0wRTdJWi1FTllFLVNGVzcwRiIgZGF0YS1pbS10aGVtZT0iYmx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaW0tcmV2aWV3cz0iZmFsc2UiIGRhdGEtaW0td2lkdGg9IjEyNSIgZGF0YS1pbS1oZWlnaHQ9IjI0NSI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNhbGxfdHJhY2tpbmcgYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX21lZGl1bSBidXR0b25fX2NvbnRhY3QgYnV0dG9uX19zZWNvbmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL2FnZW50Q2FsbEV2ZW50LzU1Mjc4Lzc1MjExOT9wYWdlPWFubm9uY2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbW9kYWwtc2hvdy1udW1iZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1tb2JpbGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iY2FsbF90cmFja2luZ190ZXh0Ij5BZmZpY2hlciBsZSBudW3DqXJvPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKPGZvcm0gbmFtZT0iY29udGFjdF9hZ2VudCIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9hbm5vbmNlL2FwcGFydGVtZW50LXZlbnRlLTMtcGllY2VzLXBhcmlzLTEyOG0yL3I3NTIxMTk/X2xvY2FsZT1mciIgY2xhc3M9ImZvcm1fX3BlcnNvbiIgZGF0YS1wYXJzbGV5LXZhbGlkYXRlPSJ0cnVlIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImNvbnRhY3RfYWdlbnRfX3Rva2VuIiBuYW1lPSJjb250YWN0X2FnZW50W190b2tlbl0iIHZhbHVlPSI1T1Z1dEFENWhTQWNHRGpuSTdCdjBCSXN1RHFlY1p6M0JsU01ua0ZXTmZRIiAvPgo8ZGl2IGNsYXNzPSJjLXNlbGVjdCIgZGF0YS1uYW1lPSJNb3RpZiIgZGF0YS10aXRsZT0iTsKwNzUyMTE5Ij4KICAgIDxhIGhyZWY9IiMiPk1vdGlmPC9hPgogICAgPHVsIGRhdGEtdHlwZT0iY29udGFjdF9hZ2VudFttb3RpZnB0XSIgZGF0YS1uYW1lPSJtb3RpZiIgY2xhc3M9InNlbGVjdF9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIxIj4KICAgICAgICAgICAgICAgIEplIHN1aXMgaW50w6lyw6lzc8OpKGUpIHBhciB1biBiaWVuCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdmFsdWU9IjIiPgogICAgICAgICAgICAgICAgSmUgc291aGFpdGVyYWlzIGF2b2lyIHBsdXMgZCYjMDM5O2luZm9ybWF0aW9ucwogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSIzIj4KICAgICAgICAgICAgICAgIEplIHNvdWhhaXRlcmFpcyB2aXNpdGVyIGNlIGJpZW4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iNCI+CiAgICAgICAgICAgICAgICBKZSBzb3VoYWl0ZXJhaXMgbWUgcmVuc2VpZ25lciBzdXIgbGVzIGJpZW5zIGF1eCBhbGVudG91cnMKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNvbnRhY3RfYWdlbnRbbW90aWZwdF0iLz4KPC9kaXY+CjxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbnRhY3RfYWdlbnRfZmlyc3RfbmFtZSIgbmFtZT0iY29udGFjdF9hZ2VudFtmaXJzdF9uYW1lXSIgcmVxdWlyZWQ9InJlcXVpcmVkIiBwbGFjZWhvbGRlcj0iUHLDqW5vbSAqIiAvPgogICAgPC9kaXY+CjxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbnRhY3RfYWdlbnRfbGFzdF9uYW1lIiBuYW1lPSJjb250YWN0X2FnZW50W2xhc3RfbmFtZV0iIHJlcXVpcmVkPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9Ik5vbSAqIiAvPgogICAgPC9kaXY+CjxkaXYgY2xhc3M9ImZvcm1fX2lucHV0Ij4KICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgaWQ9ImNvbnRhY3RfYWdlbnRfZW1haWwiIG5hbWU9ImNvbnRhY3RfYWdlbnRbZW1haWxdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJFbWFpbCAqIiBwYXR0ZXJuPSIuKkAuKihcLlthLXpBLVowLTkuLV0rKSskIiBkYXRhLXBhcnNsZXktdHlwZT0iZW1haWwiIC8+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbnRhY3RfYWdlbnRfcGhvbmUiIG5hbWU9ImNvbnRhY3RfYWdlbnRbcGhvbmVdIiBwbGFjZWhvbGRlcj0iVMOpbMOpcGhvbmUiIG1pbkxlbmd0aD0iNiIgcGF0dGVybj0iXGQqIiAvPgo8L2Rpdj4KCjx0ZXh0YXJlYSBpZD0iY29udGFjdF9hZ2VudF9tZXNzYWdlIiBuYW1lPSJjb250YWN0X2FnZW50W21lc3NhZ2VdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJNZXNzYWdlIj48L3RleHRhcmVhPgo8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCByb3cgIj4KPGlucHV0IGNsYXNzPSJjb2wtMSIgdHlwZT0iY2hlY2tib3giIHN0eWxlPSJ0b3A6MnB4O2xlZnQ6OHB4IiBuYW1lPSJyZWdpc3Rlcl9uZXdzbGV0dGVyIiBpZD0icmVnaXN0ZXJfbmV3c2xldHRlciIvPgo8bGFiZWwgY2xhc3M9ImNvbC0xMCBhY2NlcHRfbmV3c2xldHRlciIgc3R5bGU9ImNvbG9yOndoaXRlO2ZvbnQtc2l6ZToxMnB4IiBmb3I9InJlZ2lzdGVyX25ld3NsZXR0ZXIiPgogICAgSmUgc291aGFpdGUgcmVjZXZvaXIgcGFyIG5ld3NsZXR0ZXIgZGVzIGFubm9uY2VzIHN1c2NlcHRpYmxlcyBkZSBt4oCZaW50w6lyZXNzZXIgZXQgZGVzIGNvbnNlaWxzIMOgIGzigJlhY2hhdCBkZSBsYSBwYXJ0IGTigJlpYWQuCjwvbGFiZWw+CjwvZGl2Pgo8ZGl2IGlkPSJhc2lkZS1jYXB0Y2hhIiBjbGFzcz0iZy1yZWNhcHRjaGEiIGRhdGEtc2l0ZWtleT0iNkxjSFVETVVBQUFBQUZCWHg5NS1RRFlrMzV4ZnN4VzJqWC12eGNTeCI+PC9kaXY+Cgo8ZGl2IGNsYXNzPSJmb3JtX19mb290ZXIiPgogICAgPGJ1dHRvbiBpZD0iYnRuLWFjaGF0IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX3doaXRlIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tbGV0dGVyIj48L2k+CiAgICAgICAgPHNwYW4+TWUgY29udGFjdGVyPC9zcGFuPgogICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1hcnJvdy1yaWdodCI+PC9pPgogICAgPC9idXR0b24+CjwvZGl2Pgo8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25zZWlsbGVyLWltbW9iaWxpZXIvR1VJTExBVU1FLkRVQ0hFU05FIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkZW1vLWljb24gaWNvbi1ob3VzZS0yIj48L2k+IE1lcyBhbm5vbmNlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmx1ZS1ncmFkaWVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3VuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tY2FsY3VsYXRvciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbGN1bGF0ZXVyIGRlIG1lbnN1YWxpdMOpIGRlIGJpZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlmcmFtZSBpZD0iY2FsY3VsYXRvci1pZnJhbWUiIHNyYz0iaHR0cHM6Ly93d3cuZXVyb3BlYW4tc29mdC5jb20vc2VydmljZXMtd2ViL2NhcGFjaXRlLWFjaGF0LnBocD9pZF9zaXRlPTUwJnRleHRlPW91aSZpbXByaW1lcj1vdWkmY3NzPWh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jc3MvY2FsY3VsYXRvci1kNWYyMDE2N2M1Lm1pbi5jc3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lYm9yZGVyPSIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaWZyYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNpZGU+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgPC9kaXY+CgoKICAgICAgICAgICAgPGRpdiBpZD0ic2ltaWxhckFkcyIgY2xhc3M9IndyYXBwZXIgb2ZmZXJfX3NsaWRlci0yIiBzdHlsZT0icGFkZGluZy10b3A6IDUwcHgiPgogICAgICAgICAgICA8aDMgY2xhc3M9ImgzIHRpdGxlX19tYWluIj48Yj5Bbm5vbmNlcyBzaW1pbGFpcmVzPC9iPiDDoCAgICAgICAgICAgICAgICBQQVJJUwogICAgICAgICAgICAgICAgPHA+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fcm91bmRlZCBidXR0b25fX2FsZXJ0IGJ1dHRvbl9fbWVkaXVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2xvZ2luIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFiPSJsb2dpbi10YWIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6IC45Mzc1cmVtOyBwb3NpdGlvbjogcmVsYXRpdmU7IGZvbnQtd2VpZ2h0OjYwMCA7cGFkZGluZzogMTBweCAxNXB4O2Rpc3BsYXk6IGlubGluZS1ibG9jaztiYWNrZ3JvdW5kOiAjMDA0OTc2OyBib3JkZXI6IDA7IGNvbG9yOiAjZmZmOyBmb250LXNpemU6IDE1cHg7OyBmb250LWZhbWlseTogc2Fucy1zZXJpZiwnU291cmNlIENvZGUgUHJvJyI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXJpbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNyw6llciB1bmUgYWxlcnRlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgPC9oMz4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBzbGlkZXJfX2Fubm9uY2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlc3RhdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9faW1nIGMtb2ZmZXJfX2ltZ19mciIgID4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fubm9uY2UvYXBwYXJ0ZW1lbnQtdmVudGUtNS1waWVjZXMtcGFyaXMtMTUwbTIvcjcxMDkwNz9fbG9jYWxlPWZyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctaG9sZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzA3MzIwMDQuanBnIgogICAgICAgICAgICAgICAgICAgICBhbHQ9IlBBUklTIgogICAgICAgICAgICAgICAgICAgICBpdGVtcHJvcD0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwczovL3d3dy5pYWRmcmFuY2UuZnIvY2FjaGUvYWRfcGhvdG9fc21hbGwvcGhvdG8vNzA3MzIwMDQuanBnIiBjbGFzcz0ibGF6eSIvPgoJCQkJCTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmliYm9ucyI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b24gYnV0dG9uX19zbWFsbCBidXR0b25fX2hpZ2hsaWdodCBoaWdobGlnaHRfX2NvbXByb21pcyI+U291cyBjb21wcm9taXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fc21hbGwgYnV0dG9uX19oaWdobGlnaHQgaGlnaGxpZ2h0X19wcmVzdGlnZSI+UHJlc3RpZ2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2ZhdiIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWhvdXNlLWhlYXJ0Ij48L2k+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2JvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19wcm9maWwgYy1vZmZlcl9fcHJvZmlsX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnNlaWxsZXItaW1tb2JpbGllci9ERUxQSElORS5EVU1PVUxJTiIKICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iRGVscGhpbmUgRFUgTU9VTElOIiBpdGVtcHJvcD0ic2FtZUFzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vd3d3LmlhZGZyYW5jZS5mci9jYWNoZS9hZ2VudF9waG90b190aHVtYi9hdmF0YXIvMTg0OTk2MC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJEZWxwaGluZSBEVSBNT1VMSU4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhenkgaW1nIiBpdGVtcHJvcD0iaW1hZ2UiPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19uYW1lIj4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImMtb2ZmZXJfX3RpdGxlIiBocmVmPSIvYW5ub25jZS9hcHBhcnRlbWVudC12ZW50ZS01LXBpZWNlcy1wYXJpcy0xNTBtMi9yNzEwOTA3P19sb2NhbGU9ZnIiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBhcnRlbWVudCBkZSAxNTAgbcKyIC0gMyBjaGFtYnJlcyAtIFBBUklTCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX2Zhdm9yaXRlcyBoaWRlZmF2b3JpIiBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbG9naW4iIGRhdGEtdGFiPSJyZWdpc3Rlci10YWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXN0YXItMSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19sb2NhbGl6YXRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXBpbi0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9kaXN0cmljdD90YWdzX2xpc3Q9JTVCJTdCJTIydHlwZSUyMiUzQSUyMmdwX2lkJTIyJTJDJTIydmFsdWUlMjIlM0EyMDQzMzIzODE4JTJDJTIybmFtZSUyMiUzQSUyMlBBUklTJTJCJTI4NzUwMTclMjklMkJQYXJpcyUyQiU1Q3UwMGNlbGUtZGUtRnJhbmNlJTIyJTdEJTVEJmFtcDtncF9pZD0yMDQzMzIzODE4Ij5QQVJJUyAoNzUwMTcpPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2luZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3JlX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYy1vZmZlcl9fbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjLW9mZmVyX190aW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlLDqWbDqXJlbmNlIDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3MTA5MDcKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImMtb2ZmZXJfX3ByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgNTUwIDAwMCA8c3Bhbj4mZXVybzs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2xpc3QgYy1vZmZlcl9fZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhZCBGcmFuY2UgLSBEZWxwaGluZSBEVSBNT1VMSU4gKDA2IDYxIDQxIDMzIDg3KSB2b3VzIHByb3Bvc2UgOiBTT1VTIENPTVBST01JUy5URVJORVMvTUFJTExPVC4gQkVMIEFQUEFSVEVNRU5UIGRlIDE1MG0yIGVudmlyb24gZGFucyB1biBpbW1ldWJsZSAxOTMwIHNpdHXDqSBhdSA1IMOobWUgw6l0YWdlIHBsdXMgdW5lIGNoYW1icmUgZGUgc2VydmljZSBkZSA5bTIgZW52aXJvbiBkb250IGxhIGZlbsOqdHJlIG9mZnJlIHVuZSB2dWUgZMOpZ2Fnw6kuLi4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtb2ZmZXJfX2Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmxhdC0yIj48L2k+IDE1MCBtwrI8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1waWVjZS01Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWJlZCI+PC9pPiA8c3Bhbj4zPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjLW9mZmVyX19saXN0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uc2VpbGxlci1pbW1vYmlsaWVyL0RFTFBISU5FLkRVTU9VTElOIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIGJ1dHRvbl9fY29uc2VpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1sZXR0ZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdGV6IHZvdHJlIGNvbnNlaWxsZXI8aSBjbGFzcz0iZGVtby1pY29uIGljb24tYXJyb3ctcmlnaHQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJtb2RhbC1zaG93LW51bWJlciIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxwPjA2MTQ1ODU5MzI8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiIHN0eWxlPSJiYWNrZ3JvdW5kOiBub25lO2NvbG9yOiBibGFjazsiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj5Bbm51bGVyPC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgb25jbGljaz0ibG9jYXRpb24uaHJlZj0ndGVsOjA2MTQ1ODU5MzInOyIgdmFsdWU9IkFwcGVsZXIiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAKICAgICAgICA8L3NlY3Rpb24+CjwvbWFpbj4KCiAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIiIGlkPSJmb290ZXIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvV1BGb290ZXIiPgogICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBvdGhlcl9fbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpcnN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlL2Fubm9uY2VzL2V4Y2x1c2l2aXRlL2xpc3RlL2Fubm9uY2UtcmVzdWx0YXQ/ZXhjbHVzaXZlPTEiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgTGVzIGV4Y2x1c2l2aXTDqXMgaWFkCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lc3RpbWVyLXZvdHJlLWJpZW4iICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgRXN0aW1leiB2b3RyZSBiaWVuCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci90cm91dmVyLXVuLWNvbnNlaWxsZXIiICAgICBjbGFzcz0iIj4KICAgICAgICAgICAgVHJvdXZleiB1biBjb25zZWlsbGVyCgogICAgICAgIDxpIGNsYXNzPSIiPjwvaT4KICAgIDwvYT4KICAgICAgICAKICAgIDwvbGk+CgogICAgCiAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbWFjb25jaWVyZ2VyaWUtaWFkLmZyLyIgICAgIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iIj4KICAgICAgICAgICAgQ29uY2llcmdlcmllIGlhZAoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKICAgIAogICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICA8YSBocmVmPSIvYWNoYXQvY291cC1kZS1jb2V1ci9saXN0ZS9hbm5vbmNlcyIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBOb3MgY291cHMgZGUgY29ldXIKCiAgICAgICAgPGkgY2xhc3M9IiI+PC9pPgogICAgPC9hPgogICAgICAgIAogICAgPC9saT4KCiAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaXRlbS1oaWdobGlnaHRlZCBsYXN0Ij4gICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbnRlL2Fubm9uY2VzL2ltbW9iaWxpZXItcHJlc3RpZ2UvbGlzdGUtcmVzdWx0YXQ/cmFkaXVzPTIwJmFtcDt0cmFuc2FjdGlvbl90eXBlPVZlbnRlJmFtcDt0YWdzJTVCMCU1RD1wcmVzdGlnZSIgICAgIGNsYXNzPSIiPgogICAgICAgICAgICBBY2hhdCBkZSBwcmVzdGlnZQoKICAgICAgICA8aSBjbGFzcz0iIj48L2k+CiAgICA8L2E+CiAgICAgICAgCiAgICA8L2xpPgoKCiAgICA8L3VsPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHNvY2lhbCI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlX19sYXJnZS0xIj5TdWl2ZXogbm91cyA6PC9wPgogICAgICAgICAgICAgICAgICAgIDx1bCBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT3JnYW5pemF0aW9uIj4KCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0lBREZyYW5jZSIgaXRlbXByb3A9InNhbWVBcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIj48aSBjbGFzcz0iZGVtby1pY29uIGljb24tZmItcm9uZCI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9JQURGcmFuY2UiIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLXR3aXR0ZXItcm9uZCI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaW1tb2JpbGllci1kb21pY2lsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxpbmtlZGluLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvSUFERnJhbmNlIiBpdGVtcHJvcD0ic2FtZUFzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiPjxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi15b3V0dWJlLXJvbmQiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaWFkZnJhbmNlb2ZmaWNpZWwvIiBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkZW1vLWljb24gaWNvbi1pbnN0YWdyYW0tcm9uZCI+PC9pPjwvYT48L2xpPgoJCQkgICAgICAgIAkJCQkJCQkKICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCQkJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBwYXJ0bmVycyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPmlhZCBlc3QgbWVtYnJlIDogPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9VbmlzX0xvZ290eXBlX3NvbG9fQ291bGV1ci5wbmciIHdpZHRoPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIiIGFsdD0iVW5pcyI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudV9fdGhpcmQiPgogICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZmlyc3QiPjxhIGhyZWY9Ii8iPkFjY3VlaWw8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL3F1aS1zb21tZXMtbm91cyI+UXVpIHNvbW1lcy1ub3VzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvZXNwYWNlLXByZXNzZSI+RXNwYWNlIFByZXNzZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZyL21lbnRpb25zLWxlZ2FsZXMiPk1lbnRpb25zIGzDqWdhbGVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZnIvUG9saXRpcXVlLWRlLWNvbmZpZGVudGlhbGl0ZSI+UG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6k8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mci9tZWRpYXRpb24iPk3DqWRpYXRpb248L2E+PC9saT4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2NvbnRhY3Rlei1ub3VzIj5Ob3VzIGNvbnRhY3RlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vYmFyZW1lLmlhZGZyYW5jZS5mci8iIHRhcmdldD0iX2JsYW5rIj5CYXLDqG1lIGQnaG9ub3JhaXJlczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvaW1ncy85OTYwNzExNDdhYzFiOGIxMzVjNjg3NTRiNzlmZDE1ZC5wZGYiIHRhcmdldD0iX2JsYW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYXLDqG1lIEUmYW1wO0MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgPC9kaXY+CjwvZGl2PgogICAgPC9mb290ZXI+CgogICAgICAgICAgICA8IS0tIE1vZGFsIC0tPgogICAgPGRpdiBjbGFzcz0ibW9kYWxEaWFsb2cgbW9kYWwgZmFkZSIgaWQ9Im1lc3NhZ2UtbW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXNzYWdlIG1lc3NhZ2UtY29udGVudCI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgaWQ9Im5vX3Jlc3VsdCIgY2xhc3M9Im1vZGFsRGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9ImMtbW9kYWwgZnVsbC13aWR0aCIgaWQ9ImFsZXJ0LW5vLXJlc3VsdC1tb2RhbCI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImNsb3NlLW1vZGFsIHRleHQtcmluZyIgaWQ9ImNsb3NlLWFsZXJ0LW5vLXJlc3VsdCI+eDwvc3Bhbj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50IHRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnRfcmluZyI+PGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLXJpbmciPjwvaT4gQ3LDqWVyIHVuZSBhbGVydGUgcG91ciBjZXR0ZSByZWNoZXJjaGUgPC9kaXY+CiAgICAgICAgICAgIDxwPjxzdHJvbmc+QXVjdW5lIGFubm9uY2UgbmUgY29ycmVzcG9uZCDDoCB2b3RyZSByZWNoZXJjaGU/PC9zdHJvbmc+PC9wPgogICAgICAgICAgICA8cD5Nb2RpZmlleiB2b3MgY3JpdMOocmVzIG91IGxhaXNzZXogdm91cyBndWlkZXIgcGFyIG5vcyBzdWdnZXN0aW9ucy48L3A+CiAgICAgICAgICAgIDxwPjxzdHJvbmc+UmFwcGVsIGRlIHZvcyBjcml0w6hyZXMgOjwvc3Ryb25nPjwvcD4KICAgICAgICAgICAgPGRpdiBpZD0iY3JpdGVyaWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CiAgICAgICAgICAgICAgICA8Zm9ybSBpZD0iYWxlcnROb1Jlc3VsdEZvcm0iPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgcGxhY2Vob2xkZXI9IkVtYWlsIiBjbGFzcz0idGV4dC1kYW5nZXIgZm9ybS1jb250cm9sIGlubmVyLWJ1dHRvbiIgaWQ9ImFsZXJ0LWVtYWlsIj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9InRleHQtcmluZyBuby1ib3JkZXIiIGlkPSJhbGVydC1lbWFpbC1idXR0b24iIGhyZWY9Ii9wcm9maWxlL2FsZXJ0L2FkZCI+T0s8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJICAgIAkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4gICAgPGRpdiBpZD0iYnVzaW5lc3NDYXJkTW9kYWwiIGNsYXNzPSJtb2RhbERpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50IGJ1c2luZXNzQ2FyZENvbnRlbnQiPjwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBpZD0iY29udGFjdEFnZW50TW9kYWwiIGNsYXNzPSJtb2RhbERpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij48L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDxkaXYgaWQ9ImxvZ2luIiBjbGFzcz0ibW9kYWxEaWFsb2ciPgogICAgPGRpdiBjbGFzcz0iYy1tb2RhbCB0YWItY29ubmVjdCI+CiAgICAgICAgPHVsIGNsYXNzPSJ0YWJzIj4KICAgICAgICAgICAgPGxpIGNsYXNzPSJ0YWItbGluayBjdXJyZW50IiBkYXRhLXRhYj0ibG9naW4tdGFiIj5TZSBjb25uZWN0ZXI8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InRhYi1saW5rIiBkYXRhLXRhYj0icmVnaXN0ZXItdGFiIj5DcsOpZXIgdW4gY29tcHRlPC9saT4KICAgICAgICA8L3VsPgoKICAgICAgICA8ZGl2IGlkPSJsb2dpbi10YWIiIGNsYXNzPSJ0YWItY29udGVudCBjdXJyZW50Ij4KICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iL2xvZ2luX2NoZWNrIgogICAgICAgICAgbmFtZT0iY29ubmV4aW9uIiBtZXRob2Q9InBvc3QiIGNsYXNzPSJmb3JtX19jb25uZXhpb24iPgogICAgICAgIDwhLS1wIGNsYXNzPSJ0aXRsZSI+Q29ubmVjdGV6LXZvdXMgYXZlYyBsZXMgcsOpc2VhdXggc29jaWF1eDwvcD4KICAgICAgICA8ZGl2IGNsYXNzPSJsLXNvY2lhbCI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9jb25uZWN0L2ZhY2Vib29rIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImZiIj4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1mYi1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvdHdpdHRlciIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJ0dyI+CiAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tdHdpdHRlci1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvZ29vZ2xlIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9Inl0Ij4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1nb29nbGUtcGx1cy1yb25kIj48L2k+CjwvYT4KPGEgaHJlZj0iL2Nvbm5lY3QvbGlua2VkaW4iIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0ibGtkIj4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi1saW5rZWRpbi1yb25kIj48L2k+CjwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzZXBhcmF0b3IiPgogICAgICAgICAgICA8cD5PdTwvcD4KICAgICAgICA8L2Rpdi0tPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9jc3JmX3Rva2VuIiB2YWx1ZT0iQ3VBX0lnalRadEZkby14M3M5U2RsZ3JsWUt6WGl5M3dNeGZlZS0zcnU5OCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iRW1haWwiIG5hbWU9Il91c2VybmFtZSI+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICA8aW5wdXQgbmFtZT0iX3Bhc3N3b3JkIiB0eXBlPSJwYXNzd29yZCIgcGxhY2Vob2xkZXI9Ik1vdCBkZSBwYXNzZSIgaWQ9InBhc3N3b3JkIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbmZvcm1hdGlvbnMgcm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0icmVtZW1iZXIiIG5hbWU9Il9yZW1lbWJlcl9tZSIgdmFsdWU9Im9uIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InJlbWVtYmVyIj5TZSBzb3V2ZW5pciBkZSBtb2k8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI3Bhc3NfZm9yZ2V0X2RpdiIgY2xhc3M9ImZvcm1fX2ZvcmdldCIKICAgICAgICAgICAgICAgICAgIGlkPSJjb25uZWN0X2ZvcmdldF9wYXNzd29yZCI+CiAgICAgICAgICAgICAgICAgICAgTW90IGRlIHBhc3NlIHBlcmR1ID8gICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19mb290ZXIiPgogICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgaWQ9InN1Ym1pdF9jb25uZWN0aW9uIiBuYW1lPSJfc3VibWl0IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidXR0b24gYnV0dG9uX19tZWRpdW0iPgogICAgICAgICAgICAgICAgQ29ubmV4aW9uICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CgoKICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBpZD0icmVnaXN0ZXItdGFiIiBjbGFzcz0idGFiLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvcmVnaXN0ZXIvIgogICAgICAgICAgbmFtZT0icmVnaXN0cmF0aW9uIiBtZXRob2Q9InBvc3QiIGNsYXNzPSJmb3JtX19yZWdpc3RlciI+CgkJICAKICAgICAgICA8cCBjbGFzcz0idGl0bGVfX21haW4iPgoJCQkJQ3LDqWV6IHZvdHJlIGNvbXB0ZSBwb3VyIGLDqW7DqWZpY2llciBk4oCZdW4gc3VpdmkgcGVyc29ubmFsaXPDqQkJCQk8L3A+CiAgICAgICAgPCEtLXAgY2xhc3M9InRpdGxlIj5Db25uZWN0ZXotdm91cyBhdmVjIGxlcyByw6lzZWF1eCBzb2NpYXV4PC9wPgogICAgICAgIDxkaXYgY2xhc3M9Imwtc29jaWFsIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2Nvbm5lY3QvZmFjZWJvb2siIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iZmIiPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWZiLXJvbmQiPjwvaT4KPC9hPgo8YSBocmVmPSIvY29ubmVjdC90d2l0dGVyIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9InR3Ij4KICAgIDxpIGNsYXNzPSJkZW1vLWljb24gaWNvbi10d2l0dGVyLXJvbmQiPjwvaT4KPC9hPgo8YSBocmVmPSIvY29ubmVjdC9nb29nbGUiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0ieXQiPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWdvb2dsZS1wbHVzLXJvbmQiPjwvaT4KPC9hPgo8YSBocmVmPSIvY29ubmVjdC9saW5rZWRpbiIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJsa2QiPgogICAgPGkgY2xhc3M9ImRlbW8taWNvbiBpY29uLWxpbmtlZGluLXJvbmQiPjwvaT4KPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvciI+CiAgICAgICAgICAgIDxwPk91PC9wPgogICAgICAgIDwvZGl2LS0+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgaWQ9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtX2VtYWlsIiBuYW1lPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybVtlbWFpbF0iIHJlcXVpcmVkPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9IlNhaXNpc3NleiB1bmUgYWRyZXNzZSBlLW1haWwiIHBhdHRlcm49Ii4qQC4qKFwuW2EtekEtWjAtOS4tXSspKyQiIC8+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQgcm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBpZD0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1fcGxhaW5QYXNzd29yZF9maXJzdCIgbmFtZT0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1bcGxhaW5QYXNzd29yZF1bZmlyc3RdIiByZXF1aXJlZD0icmVxdWlyZWQiIHBsYWNlaG9sZGVyPSJDcsOpZXogdW4gbW90IGRlIHBhc3NlIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBpZD0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1fcGxhaW5QYXNzd29yZF9zZWNvbmQiIG5hbWU9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtW3BsYWluUGFzc3dvcmRdW3NlY29uZF0iIHJlcXVpcmVkPSJyZXF1aXJlZCIgcGxhY2Vob2xkZXI9IlZhbGlkZXogbGUgbW90IGRlIHBhc3NlIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbnB1dCI+CiAgICAgICAgICAgIDxkaXYgaWQ9InJlY2FwdGNoYVJlZ2lzdGVyIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtX19pbmZvcm1hdGlvbnMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybV9jZ3UiIG5hbWU9ImZvc191c2VyX3JlZ2lzdHJhdGlvbl9mb3JtW2NndV0iIHJlcXVpcmVkPSJyZXF1aXJlZCIgdmFsdWU9IjEiIC8+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1fY2d1Ij4KCQkJCQkgICAgIAkJCQkJCUrigJlhY2NlcHRlIGxlcyBjb25kaXRpb25zIGfDqW7DqXJhbGVzIGTigJl1dGlsaXNhdGlvbiBkZSBpYWQ8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdWItdHh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgRW4gdm91cyBlbnJlZ2lzdHJhbnQsIHZvdXMgY29uc2VudGV6IMOgIGzigJlow6liZXJnZW1lbnQgZXQgYXUgdHJhaXRlbWVudCBkZSB2b3MgZG9ubsOpZXMgw6AgY2FyYWN0w6hyZSBwZXJzb25uZWwgcGFyIElARCBGcmFuY2UgZGFucyBsZXMgY29uZGl0aW9ucyBkw6ljcml0ZXMgZGFucyBsYSAKICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaWFkZnJhbmNlLmZyL2ZyL1BvbGl0aXF1ZS1kZS1jb25maWRlbnRpYWxpdGUiPlBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpLjwvYT4gICggT2JsaWdhdG9pcmUgKQogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgkJCQkJCSAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiAiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0icmVnaXN0ZXJfbmV3c2xldHRlclIiIGlkPSJyZWdpc3Rlcl9uZXdzbGV0dGVyUiIvPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InJlZ2lzdGVyX25ld3NsZXR0ZXJSIj4KICAgICAgICAgICAgICAgICAgICAgICAgSmUgc291aGFpdGUgcmVjZXZvaXIgcGFyIG5ld3NsZXR0ZXIgZGVzIGFubm9uY2VzIHN1c2NlcHRpYmxlcyBkZSBt4oCZaW50w6lyZXNzZXIgZXQgZGVzIGNvbnNlaWxzIMOgIGzigJlhY2hhdCBkZSBsYSBwYXJ0IGTigJlpYWQKICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InByb21vIiBuYW1lPSJwcm9tb1AiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InByb21vIj4KCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgSuKAmWFjY2VwdGUgZGUgcmVjZXZvaXIgZGVzIHByb21vcyBkZXMgcGFydGVuYWlyZXMgZGUgaWFkCQkJCQkJICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fZm9vdGVyIj4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidXR0b24gYnV0dG9uX19tZWRpdW0iPlMnaW5zY3JpcmU8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iZm9zX3VzZXJfcmVnaXN0cmF0aW9uX2Zvcm1fX3Rva2VuIiBuYW1lPSJmb3NfdXNlcl9yZWdpc3RyYXRpb25fZm9ybVtfdG9rZW5dIiB2YWx1ZT0iVXZTSFFCNG1mR2VaXzVlLUtBamY3bUZPemtjQ2toNGxZTTNGTWpFRVhaSSIgLz4KICAgIDwvZm9ybT4KCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8ZGl2IGlkPSJwYXNzX2ZvcmdldF9kaXYiIGNsYXNzPSJtb2RhbERpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJjLW1vZGFsIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij48c3BhbiBjbGFzcz0iY3VzdG9tLWljb24gbW9kYWwtY2xvc2UtaWNvbiIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+PC9zcGFuPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGVfX21haW4iPk1vdCBkZSBwYXNzZSBvdWJsacOpPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgIDxwPkVudHJleiB2b3RyZSBhZHJlc3NlIEVtYWlsIGV0IG5vdXMgdm91cyBlbnZlcnJvbnMgbGEgbWFyY2hlIMOgIHN1aXZyZTwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iL3Jlc2V0dGluZy9zZW5kLWVtYWlsIiBuYW1lPSJjb25uZXhpb24iIG1ldGhvZD0icG9zdCIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm1fX3Bhc3NfZm9yZ2V0IiBvbnN1Ym1pdD0ic3VibW1pdGVkKCkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fZXJyb3IiPjwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9faW5wdXQiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgcGxhY2Vob2xkZXI9IkVtYWlsIiBpZD0iIiBuYW1lPSJ1c2VybmFtZSIgcmVxdWlyZWQ9InJlcXVpcmVkIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9fZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgaWQ9InN1Ym1pdF9wYXNzX2ZvcmdldCIgbmFtZT0iIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbl9fbWVkaXVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgRW52b3llciAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo8c2NyaXB0PgogICAgZnVuY3Rpb24gc3VibW1pdGVkKCkgewogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXh0Jykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgIH0KPC9zY3JpcHQ+ICAgIDxkaXYgaWQ9Im5ld0FsZXJ0TW9kYWwiIGNsYXNzPSJtb2RhbERpYWxvZyIKICAgICBkYXRhLW1lc3NhZ2U9IlZvdXMgZGV2ZXogcmVuc2VpZ25lciBhdSBtb2lucyB1biBsaWV1IHBvdXIgcG91dm9pciBlbnJlZ2lzdHJlciB1bmUgYWxlcnRlIj4KICAgIDxkaXYgY2xhc3M9ImMtbW9kYWwgZnVsbC13aWR0aCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlX19tYWluIj5BbGVydGUgRS1tYWlsPC9kaXY+CiAgICAgICAgICAgIDxwPlVuZSBhbGVydGUgZS1tYWlsIHNlcmEgY3LDqcOpZSDDoCBwYXJ0aXIgZGVzIGNyaXTDqHJlcyBkZSB2b3RyZSByZWNoZXJjaGUuPC9wPgogICAgICAgICAgICA8cD5WZXVpbGxleiBjaG9pc2lyIGxhIDxzdHJvbmc+ZnJlcXVlbmNlIGRlIGwnYWxlcnRlPC9zdHJvbmc+IDo8L3A+CiAgICAgICAgICAgIDxmb3JtIGlkPSJ1c2VyQWxlcnRGb3JtIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImMtc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+RnLDqXF1ZW5jZSBkZSBsJ2FsZXJ0ZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGRhdGEtdHlwZT0iZnJlcXVlbmN5IiBpZD0iYWxlcnQtc2VhcmNoLW5hdiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlbGVjdGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9IkpvdXJuYWxpw6hyZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSm91cm5hbGnDqHJlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS12YWx1ZT0iSGViZG9tYWRhaXJlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWJkb21hZGFpcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXZhbHVlPSJNZW5zdWVsbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lbnN1ZWxsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIiBzdHlsZT0icGFkZGluZy1ib3R0b206IDIwcHg7Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiBidXR0b25fX3JvdW5kZWQgYnV0dG9uX19hbGVydCBidXR0b25fX21lZGl1bSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFkZC1hbGVydCIgaHJlZj0iL3Byb2ZpbGUvYWxlcnQvYWRkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZGVtby1pY29uIGljb24tcmluZyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNyw6llciBsJ2FsZXJ0ZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KICAgIDwhLS0gZW5kIE1vZGFsIC0tPgogICAgICAgICAgICAgICAgCgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUgbW9kYWxEaWFsb2ciIGlkPSJzZW5kVG9GcmllbmRNb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij48L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgIAoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICB2YXIgZ2xvYmFsX2N1cnJlbnRfY291bnRyeSA9ICdmcic7CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9hcHAtZWVhYzI4YTdkYS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcz9vbmxvYWQ9b25sb2FkQ2FsbGJhY2smcmVuZGVyPWV4cGxpY2l0JmhsPWZyIgogICAgICAgICAgICBhc3luYyBkZWZlcj48L3NjcmlwdD4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIgogICAgICAgICAgaHJlZj0iLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvY29va2llY29uc2VudDIvMy4wLjMvY29va2llY29uc2VudC5taW4uY3NzIi8+CiAgICA8c2NyaXB0IHNyYz0iLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvY29va2llY29uc2VudDIvMy4wLjMvY29va2llY29uc2VudC5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJyZXF1aWVyZWRNZXNzYWdlIiB2YWx1ZT0iQ2UgY2hhbXAgZXN0IHJlcXVpcyI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iaW52YWxpZE1lc3NhZ2UiIHZhbHVlPSJWb3RyZSBhZHJlc3NlIGUtbWFpbCBlc3QgaW52YWxpZGUiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9InJlcXVpZXJlZE1lc3NhZ2VDQiIKICAgICAgICAgICB2YWx1ZT0iVmV1aWxsZXogY29jaGVyIGNldHRlIGNhc2Ugc2kgdm91cyBzb3VoYWl0ZXogY29udGludWVyIj4KCiAgICA8L2JvZHk+CjwvaHRtbD4K
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:48 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-5-pieces-paris-138m2/r762109-1?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 31 Mar 2020 16:38:48 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=3678b52b60d726bb02779cc3ee360809; path=/; HttpOnly
      - country=fr; expires=Wed, 31-Mar-2021 16:38:48 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Wed, 31-Mar-2021 16:38:48 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:48 GMT
- request:
    method: get
    uri: https://www.iadfrance.fr/annonce/appartement-vente-piece-paris-32m2/r762109-2?_locale=fr
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 31 Mar 2020 16:38:49 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Accept-Encoding
      Set-Cookie:
      - PHPSESSID=8b316cb238189bc5ef38a03a90554767; path=/; HttpOnly
      - country=fr; expires=Wed, 31-Mar-2021 16:38:49 GMT; Max-Age=31536000; path=/;
        HttpOnly
      - locale=fr; expires=Wed, 31-Mar-2021 16:38:49 GMT; Max-Age=31536000; path=/;
        HttpOnly
      Cache-Control:
      - private, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - "-1"
      X-Cache:
      - MISS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:38:49 GMT
recorded_with: VCR 5.1.0
