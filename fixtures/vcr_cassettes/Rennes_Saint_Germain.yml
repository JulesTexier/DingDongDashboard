---
http_interactions:
- request:
    method: get
    uri: https://www.rennes-st-germain.com/recherche/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:16 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=bvorp188unqbedahfev80rk248; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '11273'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:16 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/recherche/2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:16 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=unm94bualt5ukrhbgra7p4jjh0; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '11271'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:17 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/33-APPARTEMENT-5-PIECES-136m-DE-PRESTIGE-A-VENDRE-PARIS-6EME-RUE-DU-CHERCHE-MIDI.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:17 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=uu9o05jqiihq4l8cs2o7ktqfkc; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13148'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:17 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/44-GRAND-APPARTEMENT-6-PIECES-118m-HAUSSMANIEN-A-VENDRE-BOULEVARD-DU-MONTPARNASSE-PARIS-14EME-QUARTIER-RASPAIL-P.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:17 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=hmlj3pjp08np0q1mv9qu0ogq7k; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13794'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:17 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/32-SUPERBE-APPARTEMENT-FAMILIAL-5-PIECES-95-m-A-VENDRE-PARIS-5EME-RUE-CARDINAL-LEMOINE.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:17 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=vj9jcks3g00ht4cgbn6fjsn72q; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13909'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:17 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/42-SPLENDIDE-APPARTEMENT-3-PIECES-A-VENDRE-AVENUE-DE-LA-GRANDE-ARMEE-PARIS-17EME.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:17 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=21jftjddmeq6qm3v073uu3i7kd; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14947'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:17 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/20-Vente-5-pieces-116m-au-3eme-ascenseur-Paris-13eme-Butte-aux-Cailles.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:17 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=9s1b7b24t1t4sa6ts9e4mumrl7; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14552'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:17 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/31-APPARTEMENT-3-PIECES-STYLE-ANCIEN-A-VENDRE-PARIS-6EME-PROCHE-CHERCHE-MIDI.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:17 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=pudvfs2np6j5r1evrdaj01tk40; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14661'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:17 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/29-TRES-BEL-APPARTEMENT-62m-A-VENDRE-PARIS-5EME-PLACE-MONGE-RUE-MONGE.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:18 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=0m181ma7o6scd0tm37um135b17; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13919'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:18 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/38-PARIS-6EME-BUCI-ODEON-RUE-SAINT-ANDRE-DES-ARTS-BEAU-DUPLEX-46m-A-VENDRE-60m-au-sol.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:18 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=b1fvmahsntofi1d2jrsj7t5gc8; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14314'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIiBjbGFzcz0ibm8tanMiPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICAgICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wIj4KICAgICAgICA8dGl0bGU+dmVudGUgUEFSSVMgNkVNRS4gQlVDSSBPREVPTiBSVUUgU0FJTlQgQU5EUkUgREVTIEFSVFMuIEJFQVUgRFVQTEVYIDQ2bcKyIEEgVkVORFJFLiA2MG3CsiBhdSBzb2wuIHwgUmVubmVzIFNhaW50LUdlcm1haW4gSW1tb2JpbGllcjwvdGl0bGU+CiAgICAgICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9InZlbnRlIGR1cGxleCAyIHBpw6hjZXMgUGFyaXMgOiBQQVJJUyA2RU1FLiBCVUNJIE9ERU9OIFJVRSBTQUlOVCBBTkRSRSBERVMgQVJUUy4gQkVBVSBEVVBMRVggNDZtwrIgQSBWRU5EUkUuIDYwbcKyIGF1IHNvbC4uIE5vcyBhZ2VudHMgaW1tb2JpbGllcnMgc29udCBkaXNwb25pYmxlcyBwb3VyIHVuZSBxdWVzdGlvbiwgdW5lIHZpc2l0ZSwgY29udGFjdGV6LWxlcyBlbiBsZXVyIGluZGlxdWFudCBsZSBudW3DqXJvIGRlIHLDqWbDqXJlbmNlIGRlIGwnYW5ub25jZS4iPgogICAgICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4KICAgICAgICAKICAgICAgICAgICAgPGxpbmsgcmVsPSJpY29uIiBocmVmPSJpbWFnZXMvZmF2aWNvbi5wbmciIHR5cGU9ImltYWdlL3BuZyIgLz4KICAgICAgICAgICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJpbWFnZXMvZmF2aWNvbi5wbmciIHR5cGU9ImltYWdlL3BuZyIgLz4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgbmFtZT0iZ2VuZXJhdG9yIiBjb250ZW50PSJ2ZW5pY2UiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmsgIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3d3dy5yZW5uZXMtc3QtZ2VybWFpbi5jb20vMzgtUEFSSVMtNkVNRS1CVUNJLU9ERU9OLVJVRS1TQUlOVC1BTkRSRS1ERVMtQVJUUy1CRUFVLURVUExFWC00Nm0tQS1WRU5EUkUtNjBtLWF1LXNvbC5odG1sIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIHByb3BlcnR5PSJnZW5lcmF0b3IiIGNvbnRlbnQ9ImJPYmNhdCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgCgogICAgICAgIDxiYXNlIGhyZWY9Imh0dHBzOi8vd3d3LnJlbm5lcy1zdC1nZXJtYWluLmNvbS8iPgoKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgCiAgICAKICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IlBBUklTIDZFTUUuIEJVQ0kgT0RFT04gUlVFIFNBSU5UIEFORFJFIERFUyBBUlRTLiBCRUFVIERVUExFWCA0Nm0mc3VwMjsgQSBWRU5EUkUuIDYwbSZzdXAyOyBhdSBzb2wuIiAvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJBcnRpY2xlIiAvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9vcmlnaW5hbC9waG90b18zZjU1ZDJlZGVhOTkzMTI4OGJjMDg2MGYwYWEyYzNlNi5qcGciIC8+CiAgICAKCiAgICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL2Nzcy9idWlsZF9jYTFiODljN2MyYjhlMGZhNTZhZmZlMTMzZTZlMjlkYy5jc3MiIC8+CiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii8vY29kZS5qcXVlcnkuY29tL3VpLzEuMTAuNC90aGVtZXMvc21vb3RobmVzcy9qcXVlcnktdWkuY3NzIiAvPgogICAgICAgIAogICAgICAgICAKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvY3NzL2ZvbnRzL3N0eWxlLmNzcyIgLz4KICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvY3NzL2V4cHJlLmNzcyIgLz4KICAgICAgICAgCiAgICAgICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPgogICAgICAgIDwhLS1baWYgbHQgSUUgOV0+CiAgICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0PgogICAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4KICAgICAgICA8IVtlbmRpZl0tLT4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CjxzY3JpcHQ+KGZ1bmN0aW9uKHcsZCxzLGwsaSl7IHdbbF09d1tsXXx8W107d1tsXS5wdXNoKCB7ICdndG0uc3RhcnQnOgogICAgbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLAogICAgICAgICAgICBqPWQuY3JlYXRlRWxlbWVudChzKSxkbD1sIT0nZGF0YUxheWVyJz8nJmw9JytsOicnO2ouYXN5bmM9dHJ1ZTtqLnNyYz0KICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nK2krZGw7Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLGYpOwogICAgICAgICAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1LUEtaUUJOJyk7PC9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgIDwvaGVhZD4KCiAgICA8Ym9keSBpZD0icGFnZURldGFpbCIgY2xhc3M9IiI+CgogICAgICAgICAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgo8bm9zY3JpcHQ+PGlmcmFtZSBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLUtQS1pRQk4iCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgoKICAgIAoKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgCiAgICAKCgogICAgCiAgICAKICAgICAgICAgICAgCiAgICAgICAgCgoKCgogICAgCgogICAgCgoKCiAgICAKICAgIAogICAgICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAoKCgoKICAgIAoKIAogICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICAgICAgCiAgIAogICAgCiAgICAgICAgPGhlYWRlciBjbGFzcz0icHJpbmNpcGFsSGVhZGVyIj4KICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9ImhlYWRlclRvcCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxsSGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjdGlvbi1uYXYiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjdGlvbi1pdGVtIGxhbmd1ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXBpbGxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmbGFnIGZsYWdfZnIgYWN0aXZlTGFuZyI+PC9zcGFuPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiIHJvbGU9Im1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGFnIGZsYWdfZW4gZmxhZ19lbl9mYWRlZCByaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvL3d3dy5yZW5uZXMtc3QtZ2VybWFpbi5jb20vMzgtUEFSSVMtNkVNRS1CVUNJLU9ERU9OLVJVRS1TQUlOVC1BTkRSRS1ERVMtQVJUUy1CRUFVLURVUExFWC00Nm0tQS1WRU5EUkUtNjBtLWF1LXNvbC5odG1sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImxhbmciIHZhbHVlPSJlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxhZyBmbGFnX2RlIGZsYWdfZGVfZmFkZWQgcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBtZXRob2Q9InBvc3QiIGFjdGlvbj0iLy93d3cucmVubmVzLXN0LWdlcm1haW4uY29tLzM4LVBBUklTLTZFTUUtQlVDSS1PREVPTi1SVUUtU0FJTlQtQU5EUkUtREVTLUFSVFMtQkVBVS1EVVBMRVgtNDZtLUEtVkVORFJFLTYwbS1hdS1zb2wuaHRtbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYW5nIiB2YWx1ZT0iZGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IiAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY3Rpb24taXRlbSBwYW5pZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zZWxlY3Rpb24uaHRtbCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtcGxhY2VtZW50PSJsZWZ0IiA+PHNwYW4gY2xhc3M9Imljb24tcGFuaWVyIGljb25zLWR0Ij48c3BhbiBjbGFzcz0iYmFkZ2UgbmJTZWxlY3Rpb24iPjA8L3NwYW4+PC9zcGFuPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIGxvZ28iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8iIGlkPSJsb2dvU2l0ZSIgPjxpbWcgc3JjPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9sb2dvU2l0ZS5wbmciIC8+PC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtZW51Ij4KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCAgYWZmaXgtdG9wICI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSBidG4tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjbmF2YmFyIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1jb250cm9scz0ibmF2YmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRvZ2dsZUVsdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IndvcmQiPk1lbnU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRvZ2dsZUVsdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im5hdmJhclRoZW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xvc2VOYXYgdmlzaWJsZS14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4mbGVmdGFycm93Ozwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci1uYXYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGxpIGNsYXNzPSIgIj4KICAgICAgICAgICAgPGEgaHJlZj0iLyIgdGFyZ2V0PSIiID5BY2N1ZWlsPC9hPgogICAgCiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvYS12ZW5kcmUvMSIgdGFyZ2V0PSIiID5BY2hldGVyPC9hPgogICAgCiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvYS1sb3Vlci8xIiB0YXJnZXQ9IiIgPkxvdWVyPC9hPgogICAgCiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvYmllbnMtdmVuZHVzLzEiIHRhcmdldD0iIiA+QmllbnMgdmVuZHVzPC9hPgogICAgCiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvYmllbnMtbG91ZXMvMSIgdGFyZ2V0PSIiID5CaWVucyBsb3XDqXM8L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxsaSBjbGFzcz0iICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9kZW1hbmRlLWVzdGltYXRpb24uaHRtbCIgdGFyZ2V0PSIiID5EZW1hbmRlIGQnZXN0aW1hdGlvbjwvYT4KICAgIAogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGxpIGNsYXNzPSIgIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnRhY3QuaHRtbCIgdGFyZ2V0PSIiID5Db250YWN0PC9hPgogICAgCiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9uYXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9InNlYXJjaFpvbmUgc2VhcmNoSW5uZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIHNlYXJjaCI+CiAgICAgICAgICAgICAgICAgICAgDQoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBjbGFzcz0iY29udGFpbmVyU2VhcmNoIHYyIiBkYXRhLXNlbGVjdHBpY2tlci1ub3Jlc3VsdHMgPSAiQXVjdW4gcsOpc3VsdGF0IiBhY3Rpb249Ii9yZWNoZXJjaGUvIiByb2xlPSJmb3JtIj4KICAgIAogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wteHMtMTIgY29sLXhzLTEyIj4gIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LW9mZnJlIj4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgPGEgaHJlZj0iMCI+VmVudGU8L2E+CiAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSIiPgogICAgICAgICAgICA8YSBocmVmPSIyIj5Mb2NhdGlvbjwvYT4KICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9IiI+CiAgICAgICAgICAgIDxhIGhyZWY9IjgiPk9mZnJlcyBsb2NhdGlvbnMgdmFjYW5jZXM8L2E+CiAgICAgICAgPC9saT4KICAgIDwvdWw+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIHZhbHVlPSIwIiBuYW1lPSJkYXRhW1NlYXJjaF1bb2ZmcmVkZW1dIiBpZD0iaW5wdXRUeXBlT2ZmcmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0zIGNvbC1zbS02IGNvbC14cy0xMiI+ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJkYXRhW1NlYXJjaF1baWR0eXBlXVtdIiBpZD0iaW5wdXRUeXBlQmllbl90cmFuc2FjIiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdHBpY2tlciIgbXVsdGlwbGUgdGl0bGU9IlR5cGUgZGUgYmllbiIgIGRhdGEtc3R5bGU9ImJ0bi1zZWxlY3RwaWNrZXIiPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ2b2lkIj5UeXBlIGRlIGJpZW48L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjQiID4KICAgICAgICAgICAgU3R1ZGlvCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIiID4KICAgICAgICAgICAgQXBwYXJ0ZW1lbnQKICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjYiID4KICAgICAgICAgICAgUmV6IGRlIGphcmRpbgogICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxOCIgPgogICAgICAgICAgICBEdXBsZXgKICAgICAgICA8L29wdGlvbj4KICAgIDwvc2VsZWN0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0zIGNvbC1zbS02IGNvbC14cy0xMiI+ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iZGF0YVtTZWFyY2hdW2lkdmlsbGVjb2RlXVtdIiBpZD0iaW5wdXRMb2NhbGlzYXRpb24iIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0cGlja2VyIiBtdWx0aXBsZSB0aXRsZT0iTG9jYWxpc2F0aW9uIiBkYXRhLWxpdmUtc2VhcmNoPXRydWUgZGF0YS1zdHlsZT0iYnRuLXNlbGVjdHBpY2tlciI+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InZvaWQiPkxvY2FsaXNhdGlvbjwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idmlsbGUtMSIgPgogICAgICAgICAgICBUb3V0ZSBsYSB2aWxsZSAtIFBhcmlzCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImNvZGUtMyIgPgogICAgICAgICAgICA3NTAwMyAtIFBhcmlzCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImNvZGUtNSIgPgogICAgICAgICAgICA3NTAwNSAtIFBhcmlzCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImNvZGUtNiIgPgogICAgICAgICAgICA3NTAwNiAtIFBhcmlzCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImNvZGUtNyIgPgogICAgICAgICAgICA3NTAwNyAtIFBhcmlzCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImNvZGUtMTMiID4KICAgICAgICAgICAgNzUwMTMgLSBQYXJpcwogICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJjb2RlLTE0IiA+CiAgICAgICAgICAgIDc1MDE0IC0gUGFyaXMKICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iY29kZS0xNSIgPgogICAgICAgICAgICA3NTAxNSAtIFBhcmlzCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImNvZGUtMTciID4KICAgICAgICAgICAgNzUwMTcgLSBQYXJpcwogICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJjb2RlLTIwIiA+CiAgICAgICAgICAgIDc1MDIwIC0gUGFyaXMKICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idmlsbGUtNCIgPgogICAgICAgICAgICA5MjMwMCAtIExldmFsbG9pcy1QZXJyZXQKICAgICAgICA8L29wdGlvbj4KICAgIDwvc2VsZWN0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0yIGNvbC1zbS02IGNvbC14cy0xMiI+ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJkYXRhW1NlYXJjaF1bcHJpeG1heF0iIHBsYWNlaG9sZGVyPSJCdWRnZXQgbWF4aSIgaWQ9ImlucHV0X3ByaXhNYXgiIHZhbHVlPSIiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0yIGNvbC1zbS02IGNvbC14cy0xMiI+ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJkYXRhW1NlYXJjaF1bcGllY2VzbWluXSIgcGxhY2Vob2xkZXI9Ik5iLiBwacOoY2VzIG1pbi4iIGlkPSJpbnB1dFBpZWNlc01pbiIgdmFsdWU9IiIgY2xhc3M9ImZvcm0tY29udHJvbCBudW1lcmljSW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0blNlYXJjaCBjb2wteHMtMTIgY29sLW1kLTIgY29sLXNtLTEyIGNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPlJlY2hlcmNoZXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZHZTZWFyY2hCdG4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+ICsgZGUgY3JpdMOocmVzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbkZsZWNoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1taW5pLWYtcmlnaHQgIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgCiAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgYWR2U2VhcmNoICI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0zIGNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImRhdGFbU2VhcmNoXVtOT19ET1NTSUVSXSIgcGxhY2Vob2xkZXI9IlLDqWbDqXJlbmNlIiBpZD0iaW5wdXRSZWYiIGNsYXNzPSJmb3JtLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNvbC14cy0xMiBjb2wtbWQtMyBjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpc3RhbmNlIGVsZW1lbnRTZWFyY2giPgogICAgPHNwYW4gY2xhc3M9InR4dGRpc3RhbmNlIj48aT48L2k+PC9zcGFuPgogICAgPGRpdiBjbGFzcz0iZmllbGREaXN0YW5jZSBuby1ldmVudHMiPgogICAgICAgIDxkaXYgY2xhc3M9InJhZGlvLWlubGluZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhb3VuZDEiPgogICAgICAgICAgICAgICAgPGlucHV0IGlkPSJyYWRpbzEiIG5hbWU9ImRhdGFbU2VhcmNoXVtkaXN0YW5jZV0iIGNsYXNzPSJyYWRpb0Rpc3RhbmNlIiB0eXBlPSJyYWRpbyIgdmFsdWU9IjUiICBkYXRhLWxhYmVsPSI1S20iPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icmFkaW8xIj48L2xhYmVsPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxhYmVsVmFsIj41S008L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJhZGlvLWlubGluZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhb3VuZDIiPgogICAgICAgICAgICAgICAgPGlucHV0IGlkPSJyYWRpbzIiIG5hbWU9ImRhdGFbU2VhcmNoXVtkaXN0YW5jZV0iIGNsYXNzPSJyYWRpb0Rpc3RhbmNlIiB0eXBlPSJyYWRpbyIgdmFsdWU9IjEwIiAgZGF0YS1sYWJlbD0iMTBLbSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyYWRpbzIiPjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFiZWxWYWwiPjEwS008L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJhZGlvLWlubGluZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhb3VuZDMiPgogICAgICAgICAgICAgICAgPGlucHV0IGlkPSJyYWRpbzMiIG5hbWU9ImRhdGFbU2VhcmNoXVtkaXN0YW5jZV0iIGNsYXNzPSJyYWRpb0Rpc3RhbmNlIiB0eXBlPSJyYWRpbyIgdmFsdWU9IjI1IiAgZGF0YS1sYWJlbD0iMjVLbSI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyYWRpbzMiPjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFiZWxWYWwiPjI1S008L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRhdGFbU2VhcmNoXVtkaXN0YW5jZV9pZHZpbGxlY29kZV0iIGNsYXNzPSJkaXN0YW5jZVZpbGxlIiB2YWx1ZT0iIj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wteHMtMTIgY29sLW1kLTIgY29sLXhzLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iZGF0YVtTZWFyY2hdW3ByaXhtaW5dIiBwbGFjZWhvbGRlcj0iQnVkZ2V0IG1pbmltdW0iIGlkPSJpbnB1dF9kdWFsUHJpeE1pbiIgdmFsdWU9IiIgIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wteHMtMTIgY29sLW1kLTIgY29sLXhzLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iZGF0YVtTZWFyY2hdW3N1cmZtaW5dIiBwbGFjZWhvbGRlcj0iU3VyZmFjZSBtaW4uIChtwrIpIiBpZD0iaW5wdXRTdXJmTWluIiB2YWx1ZT0iIiBjbGFzcz0iZm9ybS1jb250cm9sIG51bWVyaWNJbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGFkdlNlYXJjaFRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JpdMOocmVzIHN1cHBsw6ltZW50YWlyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0xMiBjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveC1pbmxpbmUiPgogICAgPGRpdiBjbGFzcz0iYWR2Q2hlY2siPgogICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGF0YVtTZWFyY2hdW1BJU0NJTkVdIiBpZD0iUElTQ0lORSIgdmFsdWU9Ik9VSSIgZGF0YS1sYWJlbD0iUGlzY2luZSI+IAogICAgICAgIDxsYWJlbCBmb3I9IlBJU0NJTkUiPjwvbGFiZWw+CiAgICAgICAgPHNwYW4gY2xhc3M9ImFkdkNoZWNrVGVybSI+UGlzY2luZTwvc3Bhbj4KICAgIDwvZGl2Pgo8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveC1pbmxpbmUiPgogICAgPGRpdiBjbGFzcz0iYWR2Q2hlY2siPgogICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGF0YVtTZWFyY2hdW3BhcmtpbmddIiBpZD0icGFya2luZyIgdmFsdWU9Ik9VSSIgZGF0YS1sYWJlbD0iUGFya2luZyI+IAogICAgICAgIDxsYWJlbCBmb3I9InBhcmtpbmciPjwvbGFiZWw+CiAgICAgICAgPHNwYW4gY2xhc3M9ImFkdkNoZWNrVGVybSI+UGFya2luZzwvc3Bhbj4KICAgIDwvZGl2Pgo8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGVja2JveC1pbmxpbmUiPgogICAgPGRpdiBjbGFzcz0iYWR2Q2hlY2siPgogICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGF0YVtTZWFyY2hdW1RFUlJBU1NFXSIgaWQ9IlRFUlJBU1NFIiB2YWx1ZT0iT1VJIiBkYXRhLWxhYmVsPSJUZXJyYXNzZSI+IAogICAgICAgIDxsYWJlbCBmb3I9IlRFUlJBU1NFIj48L2xhYmVsPgogICAgICAgIDxzcGFuIGNsYXNzPSJhZHZDaGVja1Rlcm0iPlRlcnJhc3NlPC9zcGFuPgogICAgPC9kaXY+CjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgPC9mb3JtPiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgIAogICAgCiAgICAgICAgICAgIAogICAgICAgIDwvaGVhZGVyPgogICAgCiAgICAKICAgICAgICAKICAgIAogICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKICAgIAogICAgCiAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKCiAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9IkNhbGN1bGV0dGUiIGNsYXNzPSJtb2RhbCBmYWRlIiAgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0ibXlMYXJnZU1vZGFsTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIiBhY3Rpb249IiIgb25zdWJtaXQ9InJldHVybiBjYWxjdWxhdGVDcmVkaXQodGhpcyk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIHRoZW1UaXRsZSI+Q2FsY3VsZXR0ZTwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtb250YW50IiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCI+TW9udGFudCAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0IiBuYW1lPSJtb250YW50IiBpZD0ibW9udGFudCIgdmFsdWU9Ijg0NTAwMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idGF1eCIgY2xhc3M9ImNvbC1tZC00IGNvbnRyb2wtbGFiZWwiPlRhdXggKCUpICogPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgc3RlcD0iMC4wMSIgbWluPSIwIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJ0YXV4IiBpZD0idGF1eCIgcmVxdWlyZWQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYXBwb3J0IiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCI+QXBwb3J0IDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBudW1lcmljSW5wdXQiIG5hbWU9ImFwcG9ydCIgaWQ9ImFwcG9ydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZHVyZWUiIGNsYXNzPSJjb2wtbWQtNCBjb250cm9sLWxhYmVsIj5EdXLDqWUgKEFubsOpZXMpICogPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0IiBuYW1lPSJkdXJlZSIgaWQ9ImR1cmVlIiByZXF1aXJlZD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImR1cmVlIiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCB0ZXh0LWxlZnQiPk1lbnN1YWxpdMOpcyA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXN1bHQiPiA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCBvYmxpZ0NoYW1wIHB1bGwtbGVmdCI+KkNoYW1wcyBvYmxpZ2F0b2lyZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgcmlnaHQiPkNhbGN1bGVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWNvbnRlbnQgLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtZGlhbG9nIC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9InNlbmRGcmllbmQiIGNsYXNzPSJtb2RhbCBmYWRlIiAgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0ibXlMYXJnZU1vZGFsTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iLzM4LVBBUklTLTZFTUUtQlVDSS1PREVPTi1SVUUtU0FJTlQtQU5EUkUtREVTLUFSVFMtQkVBVS1EVVBMRVgtNDZtLUEtVkVORFJFLTYwbS1hdS1zb2wuaHRtbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhY3Rpb24iIHZhbHVlPSJzZW5kRnJpZW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRhdGFbQ29udGFjdF1bdXJsXSIgdmFsdWU9Imh0dHBzOi8vd3d3LnJlbm5lcy1zdC1nZXJtYWluLmNvbS8zOC1QQVJJUy02RU1FLUJVQ0ktT0RFT04tUlVFLVNBSU5ULUFORFJFLURFUy1BUlRTLUJFQVUtRFVQTEVYLTQ2bS1BLVZFTkRSRS02MG0tYXUtc29sLmh0bWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUgdGhlbVRpdGxlIj5QYXJ0YWdlcjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkYXRhW0NvbnRhY3RdW25vbV0iIGNsYXNzPSJjb2wtbWQtNCBjb250cm9sLWxhYmVsIj5Wb3RyZSBub20gKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJkYXRhW0NvbnRhY3RdW25vbV0iIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0YVtDb250YWN0XVtmcm9tXSIgY2xhc3M9ImNvbC1tZC00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIGFkcmVzc2UgbWFpbCAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJkYXRhW0NvbnRhY3RdW2Zyb21dIiByZXF1aXJlZD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRhdGFbQ29udGFjdF1bdG9dIiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCI+TWFpbCBkZSB2b3RyZSBhbWkgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iZGF0YVtDb250YWN0XVt0b10iIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhc2JyeXciIHN0eWxlPSJkaXNwbGF5Om5vbmUiPgo8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXNfZHluYSIgZGF0YS13YWl0PSJhYjRhNzhkNmI2MjBhOTlhMjdmYzM0MTllZDBkMjk4OSIgZGF0YS1vcmlnPSI0YWY0ZGI3NDM2MGFmYTg2MzYxY2UzMmYxYzQzM2U3ZSIgY2xhc3M9ImFzX2ZpZWxkIGFzX2ZpZWxkLTIgMiIgdmFsdWU9IjRhZjRkYjc0MzYwYWZhODYzNjFjZTMyZjFjNDMzZTdlIi8+CjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhc19zdGF0IiBjbGFzcz0iYXNfZmllbGQgYXNfZmllbGQtMSAxIiB2YWx1ZT0iIi8+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0YVtDb250YWN0XVttZXNzYWdlXSIgY2xhc3M9ImNvbC1tZC00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIG1lc3NhZ2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJtZXNzYWdlIiBuYW1lPSJkYXRhW0NvbnRhY3RdW21lc3NhZ2VdIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCBvYmxpZ0NoYW1wIHB1bGwtbGVmdCI+KkNoYW1wcyBvYmxpZ2F0b2lyZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHJpZ2h0Ij5FbnZveWVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PjwhLS0gLy5tb2RhbC1jb250ZW50IC0tPgogICAgICAgICAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWRpYWxvZyAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJDb250YWN0IiBjbGFzcz0ibW9kYWwgZmFkZSIgIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im15TGFyZ2VNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbWQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvcm0taG9yaXpvbnRhbCIgcm9sZT0iZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii8zOC1QQVJJUy02RU1FLUJVQ0ktT0RFT04tUlVFLVNBSU5ULUFORFJFLURFUy1BUlRTLUJFQVUtRFVQTEVYLTQ2bS1BLVZFTkRSRS02MG0tYXUtc29sLmh0bWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdmFsdWU9Ind3dy5yZW5uZXMtc3QtZ2VybWFpbi5jb20vMzgtUEFSSVMtNkVNRS1CVUNJLU9ERU9OLVJVRS1TQUlOVC1BTkRSRS1ERVMtQVJUUy1CRUFVLURVUExFWC00Nm0tQS1WRU5EUkUtNjBtLWF1LXNvbC5odG1sIiBuYW1lPSJkYXRhW0NvbnRhY3RdW29yaWdpbmVtYWlsXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iai53YXNlcnN6dHJ1bUBnbWFpbC5jb20iICBuYW1lPSJkYXRhW0NvbnRhY3RdW3RvXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIHRoZW1UaXRsZSI+Q29udGFjdGVyPC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgIGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgbm9tICAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgICBwbGFjZWhvbGRlcj0iIiAgbmFtZT0iZGF0YVtDb250YWN0XVtub21dIiBjbGFzcz0iZm9ybS1jb250cm9sIiByZXF1aXJlZCBvbmludmFsaWQ9InNldEN1c3RvbVZhbGlkaXR5KCdWZXVpbGxleiByZW5zZWlnbmVyIGNlIGNoYW1wcycpIiBvbmlucHV0PSJzZXRDdXN0b21WYWxpZGl0eSgnJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgIGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgYWRyZXNzZSBtYWlsICAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiICAgcGxhY2Vob2xkZXI9IiIgIG5hbWU9ImRhdGFbQ29udGFjdF1bZW1haWxdIiBjbGFzcz0iZm9ybS1jb250cm9sIiByZXF1aXJlZCBvbmludmFsaWQ9InNldEN1c3RvbVZhbGlkaXR5KCdWZXVpbGxleiByZW5zZWlnbmVyIGNlIGNoYW1wcycpIiBvbmlucHV0PSJzZXRDdXN0b21WYWxpZGl0eSgnJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgIGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgVMOpbMOpcGhvbmUgICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtc20tOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW3RlbF0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlcXVpcmVkIG9uaW52YWxpZD0ic2V0Q3VzdG9tVmFsaWRpdHkoJ1ZldWlsbGV6IHJlbnNlaWduZXIgY2UgY2hhbXBzJykiIG9uaW5wdXQ9InNldEN1c3RvbVZhbGlkaXR5KCcnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCAgY2xhc3M9ImNvbC14cy0xMiBjb2wtc20tNCBjb250cm9sLWxhYmVsIj5Wb3RyZSB2aWxsZSAgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiICAgcGxhY2Vob2xkZXI9IiIgIG5hbWU9ImRhdGFbQ29udGFjdF1bdmlsbGVdIiBjbGFzcz0iZm9ybS1jb250cm9sIiByZXF1aXJlZCBvbmludmFsaWQ9InNldEN1c3RvbVZhbGlkaXR5KCdWZXVpbGxleiByZW5zZWlnbmVyIGNlIGNoYW1wcycpIiBvbmlucHV0PSJzZXRDdXN0b21WYWxpZGl0eSgnJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgIGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgbWVzc2FnZSA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtc20tOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJkYXRhW0NvbnRhY3RdW21lc3NhZ2VdIiBjbGFzcz0iZm9ybS1jb250cm9sIiBwbGFjZWhvbGRlcj0iIiA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtc20tOCBjb2wtc20tcHVzaC00IGNvbnRyb2wtbGFiZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFLDqWbDqXJlbmNlOiAxMDMxMDIxMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRhdGFbaWRiaWVuXVtdIiB2YWx1ZT0iMzgiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFzYnJ5dyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+CjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhc19keW5hIiBkYXRhLXdhaXQ9ImFiNGE3OGQ2YjYyMGE5OWEyN2ZjMzQxOWVkMGQyOTg5IiBkYXRhLW9yaWc9IjRhZjRkYjc0MzYwYWZhODYzNjFjZTMyZjFjNDMzZTdlIiBjbGFzcz0iYXNfZmllbGQgYXNfZmllbGQtMiAyIiB2YWx1ZT0iNGFmNGRiNzQzNjBhZmE4NjM2MWNlMzJmMWM0MzNlN2UiLz4KPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImFzX3N0YXQiIGNsYXNzPSJhc19maWVsZCBhc19maWVsZC0xIDEiIHZhbHVlPSIiLz4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmdwZC1jaGVja2JveCI+CiAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InJncGQtYWdyZWVtZW50IiBpZD0icmdwZC1hZ3JlZW1lbnRtb2RhbCIgLz4KICAgIDxsYWJlbCBmb3I9InJncGQtYWdyZWVtZW50bW9kYWwiPkonYWNjZXB0ZSBsZXMgY29uZGl0aW9ucyBkJ3V0aWxpc2F0aW9uIGRlcyBkb25uw6llcyAoKik8L2xhYmVsPgo8L2Rpdj4KPHNjcmlwdD4KICAndXNlIHN0cmljdCc7CgogIChmdW5jdGlvbiAoKSB7CiAgICB2YXIgYWdyZWVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JncGQtYWdyZWVtZW50bW9kYWwnKTsKICAgIHZhciBmb3JtID0gYWdyZWVtZW50LmNsb3Nlc3QoJ2Zvcm0nKTsKICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIGlmICghYWdyZWVtZW50LmNoZWNrZWQpIHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGFsZXJ0KCJWZXVpbGxleiBhY2NlcHRlciBsJ3V0aWxpc2F0aW9uIGRlIHZvcyBkb25uw6llcyBwb3VyIGNvbnRpbnVlci4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0pOwogIH0pKCk7Cjwvc2NyaXB0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic21hbGwgb2JsaWdDaGFtcCBwdWxsLWxlZnQiPipDaGFtcHMgb2JsaWdhdG9pcmVzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCByaWdodCI+RW52b3llcjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJyZ3BkLWxlZ2FscyI+KiA6IExlcyBpbmZvcm1hdGlvbnMgcmVjdWVpbGxpZXMgc3VyIGNlIGZvcm11bGFpcmUgc29udCBlbnJlZ2lzdHLDqWVzIGRhbnMgdW4gZmljaGllciBpbmZvcm1hdGlzw6kgcGFyIExhIEJvaXRlIEltbW8gcG91ciBsYSBnZXN0aW9uIGRlIGxhIGNsaWVudMOobGUvcHJvc3BlY3RzIGRlIFJlbm5lcyBTYWludC1HZXJtYWluIEltbW9iaWxpZXIuCkVsbGVzIHNvbnQgY29uc2VydsOpZXMganVzcXUnw6AgZGVtYW5kZSBkZSBzdXBwcmVzc2lvbiBldCBzb250IGRlc3RpbsOpZXMgw6AgUmVubmVzIFNhaW50LUdlcm1haW4gSW1tb2JpbGllci4KQ29uZm9ybcOpbWVudCDDoCBsYSBsb2kgwqsgaW5mb3JtYXRpcXVlIGV0IGxpYmVydMOpcyDCuywgdm91cyBwb3V2ZXogZXhlcmNlciB2b3RyZSBkcm9pdCBkJ2FjY8OocyBhdXggZG9ubsOpZXMgdm91cyBjb25jZXJuYW50IGV0IGxlcyBmYWlyZSByZWN0aWZpZXIgZW4gY29udGFjdGFudCBSZW5uZXMgU2FpbnQtR2VybWFpbiBJbW1vYmlsaWVyLgpOb3VzIHZvdXMgaW5mb3Jtb25zIGRlIGzigJlleGlzdGVuY2UgZGUgbGEgbGlzdGUgZCdvcHBvc2l0aW9uIGF1IGTDqW1hcmNoYWdlIHTDqWzDqXBob25pcXVlIMKrIEJsb2N0ZWwgwrssIHN1ciBsYXF1ZWxsZSB2b3VzIHBvdXZleiB2b3VzIGluc2NyaXJlIGljaSA6IGh0dHBzOi8vY29uc28uYmxvY3RlbC5mci88L3A+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWNvbnRlbnQgLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtZGlhbG9nIC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAogICAKICAgIAogICAKICAgIDxzZWN0aW9uIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiIGNsYXNzPSJjb250YWluZXJEZXRhaWwgY29udGVudFBhZ2UgICI+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUgaDFQYWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGl0ZW1wcm9wPSJuYW1lIj5QQVJJUyA2RU1FLiBCVUNJIE9ERU9OIFJVRSBTQUlOVCBBTkRSRSBERVMgQVJUUy4gQkVBVSBEVVBMRVggNDZtwrIgQSBWRU5EUkUuIDYwbcKyIGF1IHNvbC48L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSdhcHBsaWNhdGlvbi9sZCtqc29uJz4KICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJAY29udGV4dCI6Imh0dHBzOi8vc2NoZW1hLm9yZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJAdHlwZSI6IkJyZWFkY3J1bWJMaXN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW1MaXN0RWxlbWVudCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjoiTGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBvc2l0aW9uIjoxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW0iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkBpZCI6Ii8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjoiQWNjdWVpbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAdHlwZSI6Ikxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwb3NpdGlvbiI6MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpdGVtIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAaWQiOiIvMzgtUEFSSVMtNkVNRS1CVUNJLU9ERU9OLVJVRS1TQUlOVC1BTkRSRS1ERVMtQVJUUy1CRUFVLURVUExFWC00Nm0tQS1WRU5EUkUtNjBtLWF1LXNvbC5odG1sIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IlBBUklTIDZFTUUuIEJVQ0kgT0RFT04gUlVFIFNBSU5UIEFORFJFIERFUyBBUlRTLiBCRUFVIERVUExFWCA0Nm3CsiBBIFZFTkRSRS4gNjBtwrIgYXUgc29sLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9ImJyZWFkY3J1bWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8iID5BY2N1ZWlsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ltbW9iaWxpZXItMS1wYXJpcy8xIiA+UGFyaXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QQVJJUyA2RU1FLiBCVUNJIE9ERU9OIFJVRSBTQUlOVCBBTkRSRSBERVMgQVJUUy4gQkVBVSBEVVBMRVggNDZtwrIgQSBWRU5EUkUuIDYwbcKyIGF1IHNvbC48L2xpPgogICAgICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lckR0IGNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgZG9jcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYnRuRHQiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGJhY2tsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgYmFjayI+PCBSZXRvdXI8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgYWN0aW9uRHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5PdXRpbHMgcHJhdGlxdWVzPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZHQiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNDb250YWN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWNvbnRhY3RtYWlsMiBpY29ucy1kdCIgPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWR0IiBvbmNsaWNrPSJ3aW5kb3cub3BlbignL2FkbWluL3BkZi5waHA/bGFuZz1mciZpZGFubj0zOCZmaWNoZV90eXBlPXZpc2l0ZSZwZGZfb3JpZW50YXRpb249UCZwZGZfdGVtcGxhdGU9MScpOyByZXR1cm4gZmFsc2U7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWltcHJpbWVyMiBpY29ucy1kdCIgPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1kdCIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI0NhbGN1bGV0dGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWNhbGN1bGV0dGUyIGljb25zLWR0IiA+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1kdCBidG4tc2VsZWN0IiByZWw9IjM4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLXBhbmllciBpY29ucy1kdCIgPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHZhbHVlPSIzOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCByc3ZEdCIgZGF0YS11cmw9Imh0dHBzOi8vd3d3LnJlbm5lcy1zdC1nZXJtYWluLmNvbS8zOC1QQVJJUy02RU1FLUJVQ0ktT0RFT04tUlVFLVNBSU5ULUFORFJFLURFUy1BUlRTLUJFQVUtRFVQTEVYLTQ2bS1BLVZFTkRSRS02MG0tYXUtc29sLmh0bWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPHAgY2xhc3M9InBhcnRhZ2UtZHQ0Ij5QYXJ0YWdlciBsJ2Fubm9uY2U8L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImZhY2Vib29rIiBkYXRhLXVybD0iaHR0cHM6Ly93d3cucmVubmVzLXN0LWdlcm1haW4uY29tLzM4LVBBUklTLTZFTUUtQlVDSS1PREVPTi1SVUUtU0FJTlQtQU5EUkUtREVTLUFSVFMtQkVBVS1EVVBMRVgtNDZtLUEtVkVORFJFLTYwbS1hdS1zb2wuaHRtbD9sYW5nPWZyIiBkYXRhLXRpdGxlPSIgIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InR3aXR0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNoYXJlIGljb24tdHdpdHRlcjMgaWNvbnMtZHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P29yaWdpbmFsX3JlZmVyZXI9aHR0cHM6Ly93d3cucmVubmVzLXN0LWdlcm1haW4uY29tLzM4LVBBUklTLTZFTUUtQlVDSS1PREVPTi1SVUUtU0FJTlQtQU5EUkUtREVTLUFSVFMtQkVBVS1EVVBMRVgtNDZtLUEtVkVORFJFLTYwbS1hdS1zb2wuaHRtbCZyZWZfc3JjPXR3c3JjXnRmdyZ0ZXh0PXZlbnRlIFBBUklTIDZFTUUuIEJVQ0kgT0RFT04gUlVFIFNBSU5UIEFORFJFIERFUyBBUlRTLiBCRUFVIERVUExFWCA0Nm3CsiBBIFZFTkRSRS4gNjBtwrIgYXUgc29sLiB8IFJlbm5lcyBTYWludC1HZXJtYWluIEltbW9iaWxpZXImdHdfcD10d2VldGJ1dHRvbiZ1cmw9aHR0cHM6Ly93d3cucmVubmVzLXN0LWdlcm1haW4uY29tLzM4LVBBUklTLTZFTUUtQlVDSS1PREVPTi1SVUUtU0FJTlQtQU5EUkUtREVTLUFSVFMtQkVBVS1EVVBMRVgtNDZtLUEtVkVORFJFLTYwbS1hdS1zb2wuaHRtbCI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Imdvb2dsZXBsdXMiIGRhdGEtdXJsPSJodHRwczovL3d3dy5yZW5uZXMtc3QtZ2VybWFpbi5jb20vMzgtUEFSSVMtNkVNRS1CVUNJLU9ERU9OLVJVRS1TQUlOVC1BTkRSRS1ERVMtQVJUUy1CRUFVLURVUExFWC00Nm0tQS1WRU5EUkUtNjBtLWF1LXNvbC5odG1sIiBkYXRhLXRpdGxlPSIgIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaGFycnJlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjc2VuZEZyaWVuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1wYXJ0YWdlcjIgaWNvbnMtZHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXR1cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50RHQgZHQ0Ij4KICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBwNSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BEdDQgc2xpZGVyVjIiPiAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvc0R0NEhhdXQgcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImNvbC1tZC05IGNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIER1cGxleCAtIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJpcyAoNzUwMDYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIDQ2IG0mc3VwMjsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gPHNwYW4gaXRlbXByb3A9InByb2R1Y3RJRCI+UmVmIDogMTAzMTAyMTA8c3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tMTIgcHJpeGR0NCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJvZmZlcnMiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InByaWNlIiBjb250ZW50PSI4NDUwMDAiPjg0NSAwMDA8L3NwYW4+IDxzcGFuIGl0ZW1wcm9wPSJwcmljZUN1cnJlbmN5Ij7igqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzbWFsbCI+IEhBSSo8L3NwYW4+ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9Im1haW5JbWcgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxvYWRlciI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvbG9hZGluZy5naWYiIGFsdD0iZ2FsbGVyeSBsb2FkZXIiLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8dWwgY2xhc3M9ImltYWdlR2FsbGVyeSBpbWFnZUhDICBsb2FkaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b18zZjU1ZDJlZGVhOTkzMTI4OGJjMDg2MGYwYWEyYzNlNi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvXzNmNTVkMmVkZWE5OTMxMjg4YmMwODYwZjBhYTJjM2U2LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fM2Y1NWQyZWRlYTk5MzEyODhiYzA4NjBmMGFhMmMzZTYuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fM2Y1NWQyZWRlYTk5MzEyODhiYzA4NjBmMGFhMmMzZTYuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aHVtYj0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvXzcxZTg3N2Q4ZWI0MWNlNjA2MmFmNTY0NTg5ZTBlNzgwLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fNzFlODc3ZDhlYjQxY2U2MDYyYWY1NjQ1ODllMGU3ODAuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYy1mb3J0aHVtYj0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b183MWU4NzdkOGViNDFjZTYwNjJhZjU2NDU4OWUwZTc4MC5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b183MWU4NzdkOGViNDFjZTYwNjJhZjU2NDU4OWUwZTc4MC5qcGciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWl0ZXJhdG9yPSIyIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRodW1iPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tLzIwMHgyMDAvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fYjA5Zjk4MTY1NTVhNjdjZmQzNzY0NzhhMTMzYWVmNmMuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b19iMDlmOTgxNjU1NWE2N2NmZDM3NjQ3OGExMzNhZWY2Yy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjLWZvcnRodW1iPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvX2IwOWY5ODE2NTU1YTY3Y2ZkMzc2NDc4YTEzM2FlZjZjLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvX2IwOWY5ODE2NTU1YTY3Y2ZkMzc2NDc4YTEzM2FlZjZjLmpwZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b19iODE2Y2U5MjI0OGYxMjc2MTgzN2I5M2FhZDNlZWE3Yy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvX2I4MTZjZTkyMjQ4ZjEyNzYxODM3YjkzYWFkM2VlYTdjLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fYjgxNmNlOTIyNDhmMTI3NjE4MzdiOTNhYWQzZWVhN2MuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fYjgxNmNlOTIyNDhmMTI3NjE4MzdiOTNhYWQzZWVhN2MuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iNCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aHVtYj0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvXzYzYzQ4MDQwOTE2MWNjOGQ5OTBmZmZhM2U4NGZjMjE2LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fNjNjNDgwNDA5MTYxY2M4ZDk5MGZmZmEzZTg0ZmMyMTYuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYy1mb3J0aHVtYj0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b182M2M0ODA0MDkxNjFjYzhkOTkwZmZmYTNlODRmYzIxNi5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b182M2M0ODA0MDkxNjFjYzhkOTkwZmZmYTNlODRmYzIxNi5qcGciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWl0ZXJhdG9yPSI1IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRodW1iPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tLzIwMHgyMDAvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fMDkxMGI4ZDJkN2JkZWVlMWQ0MWVmN2UxYzk0MDc4NWYuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b18wOTEwYjhkMmQ3YmRlZWUxZDQxZWY3ZTFjOTQwNzg1Zi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjLWZvcnRodW1iPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvXzA5MTBiOGQyZDdiZGVlZTFkNDFlZjdlMWM5NDA3ODVmLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvXzA5MTBiOGQyZDdiZGVlZTFkNDFlZjdlMWM5NDA3ODVmLmpwZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b18yZTdhZThjN2E4ODc0ZDc1MjE4MDdiM2IwYjYzNDE1Yi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvXzJlN2FlOGM3YTg4NzRkNzUyMTgwN2IzYjBiNjM0MTViLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fMmU3YWU4YzdhODg3NGQ3NTIxODA3YjNiMGI2MzQxNWIuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fMmU3YWU4YzdhODg3NGQ3NTIxODA3YjNiMGI2MzQxNWIuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iNyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aHVtYj0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xLzIzOWRlODA4ZTkwZWIyZWM3MWVjMmQ2MjU1NDc5NWVkL3Bob3RvXzNhMTI5OTlmNmY4NWIwYzU4ZDJjN2QxYmNlMGJhOGI0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvMjM5ZGU4MDhlOTBlYjJlYzcxZWMyZDYyNTU0Nzk1ZWQvcGhvdG9fM2ExMjk5OWY2Zjg1YjBjNThkMmM3ZDFiY2UwYmE4YjQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYy1mb3J0aHVtYj0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b18zYTEyOTk5ZjZmODViMGM1OGQyYzdkMWJjZTBiYThiNC5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS8yMzlkZTgwOGU5MGViMmVjNzFlYzJkNjI1NTQ3OTVlZC9waG90b18zYTEyOTk5ZjZmODViMGM1OGQyYzdkMWJjZTBiYThiNC5qcGciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAKCiAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSIgIGNvbC1tZC02IGNvcnAtZWxlbWVudER0NiAgZWxlbWVudER0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUgZWxlbWVudER0VGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVzY3JpcHRpb24gZGUgbCdvZmZyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgaXRlbXByb3A9ImRlc2NyaXB0aW9uIj5QQVJJUyA2RU1FIFJVRSBTQUlOVCBBTkRSRSBERVMgQVJUUy4gMiBQSUVDRVMgYXR5cGlxdWUgZGFucyB1biBiZWwgaG90ZWwgcGFydGljdWxpZXIgZHUgWFZJSUnDqG1lIHNpw6hjbGUsIGRlIDQ2bcKyIENhcnJleiAgZXQgNjBtwrIgYXUgc29sLCBhdSBjb2V1ciBkdSBxdWFydGllciBCdWNpLU9kZW9uU2l0dcOpIGF1IDLDqG1lIMOpdGFnZSwgaWwgY29tcHJlbmQgYXUgcHJlbWllciBuaXZlYXU6ICB1bmUgZW50csOpZSwgdW4gc8Opam91ciDDqWNsYWlyw6kgcGFyIDIgZ3JhbmRlcyBmZW7DqnRyZXMsIHVuZSBzYWxsZSDDoCBtYW5nZXIgZXQgdW5lIGN1aXNpbmUgYmllbiDDqXF1aXDDqWUsIHVuZSBzYWxsZSBkZSBiYWlucyBldCB1biBXQy5BdSBzZWNvbmQgbml2ZWF1LCBwYXIgbGVxdWVsIG9uIGFjY8OoZGUgcGFyIHVuIGVzY2FsaWVyIGludMOpcmlldXI6dW5lIGNoYW1icmUgZXQgdW4gYnVyZWF1LkwnYXBwYXJ0ZW1lbnQgIGVzdCBjYWxtZSBldCBsdW1pbmV1eCwgbCdlc2NhbGllciBkZSBsJ2ltbWV1YmxlIGVzdCBjbGFzc8OpLlRheGUgZm9uY2nDqHJlPTkwMOKCrCBwYXIgYW4uQ2hhcmdlcz0xNTPigqwgcGFyIG1vaXMuQklFTiBPUklHSU5BTC1CRUFVIFZPTFVNRS1JREVBTCBQSUVEIEEgVEVSUkUuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0iY29sLW1kLTYgZGF0YS1lbGVtZW50RHQ0IGVsZW1lbnREdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGRpdiBjbGFzcz0idGhlbVRpdGxlIGVsZW1lbnREdFRpdGxlIj4KICAgICAgICA8aDE+RGVzY3JpcHRpZiBkdSBiaWVuPC9oMT4KICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0YUJpZW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGlkPSJkYXRhVGl0bGUiIGNsYXNzPSJuYXYgbmF2LXRhYnMiIHJvbGU9InRhYmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+PGEgaHJlZj0iI2luZm9zIiBjbGFzcz0iYnRuLWRlZmF1bHQiPkfDqW7DqXJhbDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiI+PGEgaHJlZj0iI2RldGFpbHMiIGNsYXNzPSJidG4tZGVmYXVsdCI+RMOpdGFpbHMgKzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiI+PGEgaHJlZj0iI2NvcHJvIiBjbGFzcz0iYnRuLWRlZmF1bHQiPkNvcHJvcHJpw6l0w6k8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSIiPjxhIGhyZWY9IiNpbmZvc2ZpIiBjbGFzcz0iYnRuLWRlZmF1bHQiPkZpbmFuY2llcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJkYXRhQ29udGVudCIgY2xhc3M9InRhYi1jb250ZW50Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItcGFuZSBmYWRlICBhY3RpdmUgaW4iIGlkPSJpbmZvcyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPlByaXggZHUgYmllbiAKICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MiPiAKICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgODQ1IDAwMCDigqwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICA8aHI+IAogICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5WaWxsZSAKICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MiPiAKICAgICAgICAgICAgICAgICAgICAgICAgUEFSSVMKICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICA8aHI+IAogICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5UeXBlIGRlIGJpZW5zIAogICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyI+IAogICAgICAgICAgICAgICAgICAgICAgICBEdXBsZXgKICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+Q29kZSBwb3N0YWwgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MiPiA3NTAwNjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPlN1cmZhY2UgaGFiaXRhYmxlIChtwrIpIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zIj4gNDYgbcKyPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+U3VyZmFjZSBsb2kgQ2FycmV6IChtwrIpIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zIj4gNDY8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5Ob21icmUgZGUgY2hhbWJyZShzKSA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyI+IDE8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5Ob21icmUgZGUgcGnDqGNlcyA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyI+IDI8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5FdGFnZSA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyI+IDI8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5Ob21icmUgZGUgbml2ZWF1eCA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyI+IDI8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5Bc2NlbnNldXIgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MiPiBOT048L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iZGV0YWlscyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPk5iIGRlIHNhbGxlIGRlIGJhaW5zIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zIj4gMTwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPkludGVycGhvbmUgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MiPiBPVUk8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5WaXNpb3Bob25lIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zIj4gTk9OPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+QmFsY29uIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zIj4gTk9OPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+VGVycmFzc2UgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MiPiBOT048L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5FeHBvc2l0aW9uIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zIj4gRVNUPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+QW5uw6llIGRlIGNvbnN0cnVjdGlvbiA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyI+IDE3NDA8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iY29wcm8iPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5jb3Byb3ByacOpdMOpIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zIj4gT1VJPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+bm9tYnJlIGRlIGxvdHMgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MiPiAxODwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPlF1b3RlIFBhcnQgYW5udWVsbGUgZGVzIGNoYXJnZXMgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MiPiAxIDg0MCDigqw8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5wbGFuIGRlIHNhdXZlZ2FyZGUgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MiPiBPVUk8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iaW5mb3NmaSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPlByaXggZGUgdmVudGUgaG9ub3JhaXJlcyBUVEMgaW5jbHVzIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zIj4gODQ1IDAwMCDigqw8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj48c3BhbiBjbGFzcz0ic21hbGxpbmZvcyI+UHJpeCBkZSB2ZW50ZSBob25vcmFpcmVzIFRUQyBleGNsdXM8L3NwYW4+IDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zIj4gODIwIDAwMCDigqw8L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj5Ib25vcmFpcmVzIFRUQyDDoCBsYSBjaGFyZ2UgYWNxdcOpcmV1ciA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyI+IDMsMDUgJTwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgIDwvZGl2PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9ImVuZXJneSAgY29sLW1kLTYgZWxlbWVudER0Ij4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRoZW1UaXRsZSBlbGVtZW50RHRUaXRsZSAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPkRpYWdub3N0aWNzIGRlIHBlcmZvcm1hbmNlIMOpbmVyZ8OpdGlxdWU8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVuZXJneSByb3cgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIGNvbC1tZC02ICBkcGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2FkbWluL2RwZS5waHA/bGFuZz1mciZhbXA7aWRhbm49MzgiIGFsdD0iRFBFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiBjb2wtbWQtNiAgZ2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9hZG1pbi9kcGUucGhwP3R5cGU9R0VTJmFtcDtsYW5nPWZyJmFtcDtpZGFubj0zOCIgYWx0PSJEUEUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjb2wtbWQtNiBlbGVtZW50RHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUgZWxlbWVudER0VGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPkNldHRlIGFubm9uY2Ugdm91cyBpbnTDqXJlc3NlID88L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii8zOC1QQVJJUy02RU1FLUJVQ0ktT0RFT04tUlVFLVNBSU5ULUFORFJFLURFUy1BUlRTLUJFQVUtRFVQTEVYLTQ2bS1BLVZFTkRSRS02MG0tYXUtc29sLmh0bWwiIGNsYXNzPSJmb3JtLWhvcml6b250YWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgbm9tICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW25vbV0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlcXVpcmVkIG9uaW52YWxpZD0ic2V0Q3VzdG9tVmFsaWRpdHkoJ1ZldWlsbGV6IHJlbnNlaWduZXIgY2UgY2hhbXBzJykiIG9uaW5wdXQ9InNldEN1c3RvbVZhbGlkaXR5KCcnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgYWRyZXNzZSBtYWlsICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgICBwbGFjZWhvbGRlcj0iIiAgbmFtZT0iZGF0YVtDb250YWN0XVtlbWFpbF0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlcXVpcmVkIG9uaW52YWxpZD0ic2V0Q3VzdG9tVmFsaWRpdHkoJ1ZldWlsbGV6IHJlbnNlaWduZXIgY2UgY2hhbXBzJykiIG9uaW5wdXQ9InNldEN1c3RvbVZhbGlkaXR5KCcnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgVMOpbMOpcGhvbmUgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiICAgcGxhY2Vob2xkZXI9IiIgIG5hbWU9ImRhdGFbQ29udGFjdF1bdGVsXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVxdWlyZWQgb25pbnZhbGlkPSJzZXRDdXN0b21WYWxpZGl0eSgnVmV1aWxsZXogcmVuc2VpZ25lciBjZSBjaGFtcHMnKSIgb25pbnB1dD0ic2V0Q3VzdG9tVmFsaWRpdHkoJycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgIGNsYXNzPSJjb2wtc20tNCBjb250cm9sLWxhYmVsIj5Wb3RyZSB2aWxsZSAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgICBwbGFjZWhvbGRlcj0iIiAgbmFtZT0iZGF0YVtDb250YWN0XVt2aWxsZV0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlcXVpcmVkIG9uaW52YWxpZD0ic2V0Q3VzdG9tVmFsaWRpdHkoJ1ZldWlsbGV6IHJlbnNlaWduZXIgY2UgY2hhbXBzJykiIG9uaW5wdXQ9InNldEN1c3RvbVZhbGlkaXR5KCcnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgbWVzc2FnZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9ImRhdGFbQ29udGFjdF1bbWVzc2FnZV0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSIiID48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXNicnl3IiBzdHlsZT0iZGlzcGxheTpub25lIj4KPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImFzX2R5bmEiIGRhdGEtd2FpdD0iYWI0YTc4ZDZiNjIwYTk5YTI3ZmMzNDE5ZWQwZDI5ODkiIGRhdGEtb3JpZz0iNGFmNGRiNzQzNjBhZmE4NjM2MWNlMzJmMWM0MzNlN2UiIGNsYXNzPSJhc19maWVsZCBhc19maWVsZC0yIDIiIHZhbHVlPSI0YWY0ZGI3NDM2MGFmYTg2MzYxY2UzMmYxYzQzM2U3ZSIvPgo8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXNfc3RhdCIgY2xhc3M9ImFzX2ZpZWxkIGFzX2ZpZWxkLTEgMSIgdmFsdWU9IiIvPgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmdwZC1jaGVja2JveCI+CiAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InJncGQtYWdyZWVtZW50IiBpZD0icmdwZC1hZ3JlZW1lbnQiIC8+CiAgICA8bGFiZWwgZm9yPSJyZ3BkLWFncmVlbWVudCI+SidhY2NlcHRlIGxlcyBjb25kaXRpb25zIGQndXRpbGlzYXRpb24gZGVzIGRvbm7DqWVzICgqKTwvbGFiZWw+CjwvZGl2Pgo8c2NyaXB0PgogICd1c2Ugc3RyaWN0JzsKCiAgKGZ1bmN0aW9uICgpIHsKICAgIHZhciBhZ3JlZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmdwZC1hZ3JlZW1lbnQnKTsKICAgIHZhciBmb3JtID0gYWdyZWVtZW50LmNsb3Nlc3QoJ2Zvcm0nKTsKICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIGlmICghYWdyZWVtZW50LmNoZWNrZWQpIHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGFsZXJ0KCJWZXVpbGxleiBhY2NlcHRlciBsJ3V0aWxpc2F0aW9uIGRlIHZvcyBkb25uw6llcyBwb3VyIGNvbnRpbnVlci4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0pOwogIH0pKCk7Cjwvc2NyaXB0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZGF0YVtpZGJpZW5dW10iIHZhbHVlPSIzOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS04IGNvbC1zbS1wdXNoLTQgY29sLXhzLTExIGNvbC14cy1wdXNoLTEgYnRuU2VuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0Ij5FbnZveWVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvYmxpZyI+KiBDaGFtcHMgb2JsaWdhdG9pcmVzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJyZ3BkLWxlZ2FscyI+KiA6IExlcyBpbmZvcm1hdGlvbnMgcmVjdWVpbGxpZXMgc3VyIGNlIGZvcm11bGFpcmUgc29udCBlbnJlZ2lzdHLDqWVzIGRhbnMgdW4gZmljaGllciBpbmZvcm1hdGlzw6kgcGFyIExhIEJvaXRlIEltbW8gcG91ciBsYSBnZXN0aW9uIGRlIGxhIGNsaWVudMOobGUvcHJvc3BlY3RzIGRlIFJlbm5lcyBTYWludC1HZXJtYWluIEltbW9iaWxpZXIuCkVsbGVzIHNvbnQgY29uc2VydsOpZXMganVzcXUnw6AgZGVtYW5kZSBkZSBzdXBwcmVzc2lvbiBldCBzb250IGRlc3RpbsOpZXMgw6AgUmVubmVzIFNhaW50LUdlcm1haW4gSW1tb2JpbGllci4KQ29uZm9ybcOpbWVudCDDoCBsYSBsb2kgwqsgaW5mb3JtYXRpcXVlIGV0IGxpYmVydMOpcyDCuywgdm91cyBwb3V2ZXogZXhlcmNlciB2b3RyZSBkcm9pdCBkJ2FjY8OocyBhdXggZG9ubsOpZXMgdm91cyBjb25jZXJuYW50IGV0IGxlcyBmYWlyZSByZWN0aWZpZXIgZW4gY29udGFjdGFudCBSZW5uZXMgU2FpbnQtR2VybWFpbiBJbW1vYmlsaWVyLgpOb3VzIHZvdXMgaW5mb3Jtb25zIGRlIGzigJlleGlzdGVuY2UgZGUgbGEgbGlzdGUgZCdvcHBvc2l0aW9uIGF1IGTDqW1hcmNoYWdlIHTDqWzDqXBob25pcXVlIMKrIEJsb2N0ZWwgwrssIHN1ciBsYXF1ZWxsZSB2b3VzIHBvdXZleiB2b3VzIGluc2NyaXJlIGljaSA6IGh0dHBzOi8vY29uc28uYmxvY3RlbC5mci88L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBiaWdEYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPSJtYXAtaW5mb3MtY2l0eSBlbGVtZW50RHQiPgogICAgICAgIDxkaXYgY2xhc3M9InRpdGxlIHRoZW1UaXRsZSBlbGVtZW50RHRUaXRsZSI+CiAgICAgICAgICAgIDxoMT5MYSB2aWxsZSBkZSBQYXJpcyAoNzUwMDYpPC9oMT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgbWFwIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtYXBJbmZvc0NpdHkiIHN0eWxlPSJ3aWR0aDoxMDAlO2hlaWdodDozMDBweDsiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcC1idXR0b25zIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgc3RhdCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic3RhdHNJbmZvc0NpdHkiPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgogICAgCiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICAgICNzdGF0c0luZm9zQ2l0eSB7CiAgICAgICAgfQogICAgICAgICNzdGF0c0luZm9zQ2l0eSB1bHsKICAgICAgICAgICAgbWFyZ2luOjA7IHBhZGRpbmc6MDsgbGlzdC1zdHlsZTogaW5zaWRlIG5vbmU7CiAgICAgICAgfQogICAgICAgICNzdGF0c0luZm9zQ2l0eSBsaXsKICAgICAgICAgICAgZm9udC1zaXplOiAwLjg1ZW07CiAgICAgICAgICAgIHBhZGRpbmc6MXB4OwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycHg7CiAgICAgICAgfQogICAgICAgICNzdGF0c0luZm9zQ2l0eSAudGl0bGV7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOjVweDsKICAgICAgICB9CiAgICAgICAgI3N0YXRzSW5mb3NDaXR5IGxpLm9kZHsKICAgICAgICAgICAgYmFja2dyb3VuZDojZWZlZmVmOwogICAgICAgIH0KICAgICAgICAjc3RhdHNJbmZvc0NpdHkgbGkgc3BhbnsKICAgICAgICAgICAgZGlzcGxheTppbmxpbmUtYmxvY2s7CiAgICAgICAgfQogICAgICAgICNzdGF0c0luZm9zQ2l0eSBsaSAudmFsdWV7CiAgICAgICAgICAgIHRleHQtYWxpZ246cmlnaHQ7CiAgICAgICAgICAgIGZsb2F0OnJpZ2h0OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiA1cHg7CiAgICAgICAgfQogICAgICAgICNtYXBJbmZvc0NpdHkgaW1nIHsKICAgICAgICAgICAgbWF4LXdpZHRoOiBub25lOwogICAgICAgIH0KICAgICAgICAubWFwLWJ1dHRvbnN7CiAgICAgICAgICAgIGhlaWdodDozMHB4OwogICAgICAgIH0KICAgICAgICAubWFwLWJ1dHRvbnMgYXsKICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgICAgIGZsb2F0OiBsZWZ0OwogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZTBlMGUwOwogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgICAgIHdpZHRoOjMwcHg7IGhlaWdodDozMHB4OwogICAgICAgICAgICBtYXJnaW46MCAwLjVweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBmb250LXNpemU6OHB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiaWVuU2ltIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+YXV0cmVzIGFubm9uY2VzIGltbW9iaWxpw6hyZXMgY29ycmVzcG9uZGFudCDDoMKgIHZvdHJlIHJlY2hlcmNoZTwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkxlcyBiaWVucyBzaW1pbGFpcmVzIHBvdXIgOiA8c3BhbiBjbGFzcz0idXBwZXIiPlZlbnRlIER1cGxleCBQYXJpcyAoNzUwMDYpPC9zcGFuPiA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjYXJvdXNlbFNpbSIgY2xhc3M9ImNhcm91c2VsIHNsaWRlIiBkYXRhLXJpZGU9ImNhcm91c2VsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iY2Fyb3VzZWwtaW5uZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Iml0ZW0gYWN0aXZlIGxpc3QtaW5saW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgb25DbGljaz0ibG9jYXRpb24uaHJlZj0nLzctVkVOVEUtMy1QSUVDRVMtUkVOT1ZFLWRlLTYwbS01ZW1lLWV0YWdlLUF2LUZlbGl4LUZhdXJlLmh0bWwnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWdTaW0gbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vMjIweDIyMC9pbWFnZXMvYmllbnMvMS80OGJhMjZmYWQ1ZDJkZjVlY2U0YmE1NDUzMmVmMjVhNi9vcmlnaW5hbC9waG90b18zYTczYzMxNDRhZTI3Nzk0MjFkY2Q1NzFmYjE0OWQ0Yi5qcGciIHdpZHRoPSIyMjAiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcml4U2ltIj42NzkgMDAwIOKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmZvc1NpbSBsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+UGFyaXM8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj48aT5BcHBhcnRlbWVudDwvaT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgb25DbGljaz0ibG9jYXRpb24uaHJlZj0nLzE3LVNBSU5ULUdFUk1BSU4tQkVBVVgtQVJUUy03NTAwNy0zLVBJRUNFUy1BLVZFTkRSRS5odG1sJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nU2ltIGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tLzIyMHgyMjAvaW1hZ2VzL2JpZW5zLzEvMDRiOWRlODIwMzJhYTIyNjczNzk2OWE2OGZjYjliNzYvb3JpZ2luYWwvcGhvdG9fMDI3MzcxMGNhZmQzODI0MjM3OThjYWUxYjU3NjAzZGUuanBnIiB3aWR0aD0iMjIwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpeFNpbSI+NjYwIDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mb3NTaW0gbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlBhcmlzPC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+PGk+QXBwYXJ0ZW1lbnQ8L2k+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIG9uQ2xpY2s9ImxvY2F0aW9uLmhyZWY9Jy8yOS1UUkVTLUJFTC1BUFBBUlRFTUVOVC02Mm0tQS1WRU5EUkUtUEFSSVMtNUVNRS1QTEFDRS1NT05HRS1SVUUtTU9OR0UuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZ1NpbSBsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9yZW5uZXNzdGdlcm1haW4uc3RhdGljbGJpLmNvbS8yMjB4MjIwL2ltYWdlcy9iaWVucy8xL2E2ODVmZDg0ZmQ5YmIyNjgwOTdlNTUyZWM1NzA4NjZkL29yaWdpbmFsL3Bob3RvXzAyYTYxMjNlNzYyYTk3ZTNhNTIyYWUxYWJlYTYzMThmLmpwZyIgd2lkdGg9IjIyMCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaXhTaW0iPjg1MCAwMDAg4oKsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm9zU2ltIGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5QYXJpczwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPjxpPkFwcGFydGVtZW50PC9pPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBvbkNsaWNrPSJsb2NhdGlvbi5ocmVmPScvNDMtNS1QSUVDRVMtQS1WRU5EUkUtUEFSSVMtMjBFTUUtUVVBUlRJRVItR0FNQkVUVEEtU0FJTlQtRkFSR0VBVS5odG1sJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nU2ltIGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tLzIyMHgyMjAvaW1hZ2VzL2JpZW5zLzEvN2JhODJhMWJlOGI2ZDlhNWU5MjZlOTk4ZjU4ZWM4NWYvb3JpZ2luYWwvcGhvdG9fZjc5ZjA0MTA5YTQyMzI0Y2IyM2MxYTgzYWQ2NzJmZmMuanBnIiB3aWR0aD0iMjIwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpeFNpbSI+NjgzIDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mb3NTaW0gbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlBhcmlzPC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+PGk+QXBwYXJ0ZW1lbnQ8L2k+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsZWZ0IGNhcm91c2VsLWNvbnRyb2wiIGhyZWY9IiNjYXJvdXNlbFNpbSIgZGF0YS1zbGlkZT0icHJldiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tbWluaS1mLWxlZnQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJyaWdodCBjYXJvdXNlbC1jb250cm9sIiBocmVmPSIjY2Fyb3VzZWxTaW0iIGRhdGEtc2xpZGU9Im5leHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLW1pbmktZi1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L3NlY3Rpb24+CgogICAgCiAgICAKICAgICAgICAgICAgCiAgICAKICAgICAKCiAgICAKCiAgICAgICAgCiAgICAgICAgPHNlY3Rpb24gY2xhc3M9Im1haW5GdHIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9ImJhbmRlYXVCbG9jIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5Ob3VzIENvbnRhY3RlcjwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1tYWluRnRyIGNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvb3Jkc0Zvb3RlciByb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIDx1bCBjbGFzcz0iY29vcmRzIGRlZmF1bHRDb29yZHMgY29sLXhzLTEyICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFkcmVzcyI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudENvb3JkcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWxDb29yZHMgYWRyZXNzZSI+NjEsIHJ1ZSBkZSBWYXVnaXJhcmQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbENvb3JkcyBjcCI+NzUwMDY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbENvb3JkcyB2aWxsZSI+UGFyaXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBob25lIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbGVtZW50Q29vcmRzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9InRlbDowMSA1MyA2MyAwNCA0MCI+MDEgNTMgNjMgMDQgNDA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImVtYWlsIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbGVtZW50Q29vcmRzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Im1haWx0bzpqLndhc2Vyc3p0cnVtQGdtYWlsLmNvbSI+ai53YXNlcnN6dHJ1bUBnbWFpbC5jb208L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImJ0bi1wcmltYXJ5IGJ0bi1mdHIiPgogICAgICAgIDxhIGhyZWY9Ii8jIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjQ29udGFjdCIgPkNvbnRhY3Q8L2E+CiAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvc2VjdGlvbj4KICAgIAogICAgCiAgICAKICAgICAgICA8c2VjdGlvbiBjbGFzcz0iZnRyLWJvdHRvbSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9ImNvbC1zbS0xMiBlbGVtZW50RnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+QWRow6lyZW50czwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudEZ0ciBwYXJ0bmVycyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vcmVubmVzc3RnZXJtYWluLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2dhbGlhbi5wbmciIGNsYXNzPSIiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L3NlY3Rpb24+CiAgICAKICAgIAogICAgICAgIDxmb290ZXIgY2xhc3M9Imp1bWJvdHJvbiBsYXN0RnRyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC1zbS02IGJsb2NrX2xhc3RGdHIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+JmNvcHk7IDIwMjAgfCBUb3VzIGRyb2l0cyByw6lzZXJ2w6lzIHwgVHJhZHVjdGlvbiBwb3dlcmVkIGJ5IEdvb2dsZSA8YnIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wbGFuLWR1LXNpdGUuaHRtbCIgPlBsYW4gZHUgc2l0ZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Ii9pL3JlZGFjL2xlZ2FscyIgPk1lbnRpb25zIGzDqWdhbGVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSIvbm9zLWxpZW5zLmh0bWwiID5MaWVuczwvYT4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSIvYWRtaW4vIiB0YXJnZXQ9Il9ibGFuayIgPkFkbWluPC9hPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Ii90b3V0ZXMtbm9zLWFubm9uY2VzLmh0bWwiID5Ub3V0ZXMgbm9zIGFubm9uY2VzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLXNtLTYgYmxvY2tfbGFzdEZ0ciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uUmVzcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tbXVsdGlzdXBwb3J0Ij48L3NwYW4+PHAgY2xhc3M9ImNvbnRlbnRSZXNwIj5TaXRlIGludGVybmV0IGNvbXBhdGlibGUgbXVsdGktc3VwcG9ydHMsPGJyLz51biBzZXVsIHNpdGUgYWRhcHRhYmxlIMOgIHRvdXMgbGVzIHR5cGVzIGQnw6ljcmFucy48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC1zbS0xMiBibG9ja19sYXN0RnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3Jlbm5lc3N0Z2VybWFpbi5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9sb2dvTEJJLnBuZyIgYWx0PSJMYSBib2l0ZSBpbW1vIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Zvb3Rlcj4KICAgIAoKCiAgICAKICAgIAoKCiAgICAgICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTAuMS9qcXVlcnkubWluLmpzIiA+PC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5dWkvMS4xMC4zL2pxdWVyeS11aS5taW4uanMiID48L3NjcmlwdD4KICAgICAgICAKICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9qcy9idWlsZF9jOWI5Y2FiN2M3YjVkNzYzNTgxN2YwZGJhNzA3MzBhMS5qcyIgZGF0YS1tb2RlbD0ndmVuaWNlJyBpZD0ncHJpbmNpcGFsSnMnPjwvc2NyaXB0PgogICAgICAgIAoKICAgICAgICAgCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgICAgICAgICAgJCggIi5iYWNrIiApLmNsaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIHVybCA9ICIvL3d3dy5yZW5uZXMtc3QtZ2VybWFpbi5jb20iOwogICAgICAgICAgICAgICAgJChsb2NhdGlvbikuYXR0cignaHJlZicsdXJsKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgCiAgICAgICAgIC8qKioqKioqKioqKiBiaWVuIGNvbmZpZyBvcHRpb24gZ2VvbG9jICoqKioqKioqKioqIC8KICAgICAgICAgICoKICAgICAgICAgICogQHR5cGUgQXJyYXl8QXJyYXkKICAgICAgICAgICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJzID0ge307CiAgICAgICAgdmFyIG1hcDsKICAgICAgICB2YXIgaXNNYXBEcmFnZ2luZzsKICAgICAgICB2YXIgaWRsZVNraXBwZWQ7CiAgICAgICAgdmFyIHZpc2libGU7CiAgICAgICAgdmFyIHRyYW5zbGF0ZXMgPSB7fTsKICAgICAgICB2YXIgZ2VvY29kZXI7CgogICAgICAgIHZhciBjb2xvck1hcmtlcnM7CiAgICAgICAgIAoKCiAgICAgICAgZnVuY3Rpb24gZ2V0TWFwKE1hcCl7CgogICAgICAgICAgICB2YXIgbWFwID0gTWFwLm1hcDsKICAgICAgICAgICAgb3B0aW9uc0NpcmNsZSA9IHsKICAgICAgICAgICAgICAgIG1hcDogbWFwLAogICAgICAgICAgICAgICAgY2VudGVyOiB7IGxhdCA6IDQ4Ljg1MzExMTU2ODcyNSAsIGxuZzogIDIuMzM3NDEyOTg3Njk1MiB9LAogICAgICAgICAgICAgICAgcmFkaXVzOiAxNTAwLAogICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjQjNEMTAwJywKICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDAuOCwKICAgICAgICAgICAgICAgIHN0cm9rZVdlaWdodDogMSwKICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNCM0QxMDAnLAogICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuMzUKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFwLnNldENlbnRlcihuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKDQ4Ljg2MDAwMDYxMCwgMi4zNDQ0NDk5OTcpKTsKICAgICAgICAgICAgICAgICAgICBNYXAuc2V0Q2VudGVyKG1hcCwgeyBsYXQ6IDQ4Ljg1MzExMTU2ODcyNSwgbG5nOiAyLjMzNzQxMjk4NzY5NTIgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkTGlzdGVuZXJzKE1hcCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMoTWFwKXsKICAgICAgICAgIE1hcC5zZXRNaW5ab29tKE1hcC5tYXAsIDEyKTsKICAgICAgICAgIGNhbGxNYXJrZXJzKE1hcCk7CiAgICAgICAgICBNYXAuYWRkTWFwTGlzdGVuZXIoTWFwLm1hcCwgJ2lkbGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKGlzTWFwRHJhZ2dpbmcpIHsKICAgICAgICAgICAgICBpZGxlU2tpcHBlZCA9IHRydWU7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlkbGVTa2lwcGVkID0gZmFsc2U7CiAgICAgICAgICAgIGNhbGxNYXJrZXJzKE1hcCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIE1hcC5hZGRNYXBMaXN0ZW5lcihNYXAubWFwLCAnZHJhZ3N0YXJ0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpc01hcERyYWdnaW5nID0gdHJ1ZTsKICAgICAgICAgIH0pOwogICAgICAgICAgTWFwLmFkZE1hcExpc3RlbmVyKE1hcC5tYXAsICdkcmFnZW5kJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlzTWFwRHJhZ2dpbmcgPSBmYWxzZTsKICAgICAgICAgICAgaWYgKGlkbGVTa2lwcGVkID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgY2FsbE1hcmtlcnMoTWFwKTsKICAgICAgICAgICAgICBpZGxlU2tpcHBlZCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CgoKICAgICAgICBmdW5jdGlvbiBjYWxsTWFya2VycyhNYXApewogICAgICAgICAgICB2YXIgYm91bmRzID0gTWFwLmdldEJvdW5kcyhNYXAubWFwKTsKICAgICAgICAgICAgdmFyIGJvdW5kc0Nvb3JkcyA9IE1hcC5nZXRMYXRMbmdNaW5NYXgoYm91bmRzKTsKICAgICAgICAgICAgdmFyIG14THQgPSBib3VuZHNDb29yZHMubGF0Lm1heDsKICAgICAgICAgICAgdmFyIG1uTHQgPSBib3VuZHNDb29yZHMubGF0Lm1pbjsKICAgICAgICAgICAgdmFyIG14TGcgPSBib3VuZHNDb29yZHMubG5nLm1heDsKICAgICAgICAgICAgdmFyIG1uTGcgPSBib3VuZHNDb29yZHMubG5nLm1pbjsKICAgICAgICAgICAgJC5nZXQoIi9pL3BvaS9nZXRQb2lCZXR3ZWVuP21pbkxhdD0iK21uTHQrIiZtYXhMYXQ9IitteEx0KyImbWluTG5nPSIrbW5MZysiJm1heExuZz0iK214TGcpLmRvbmUoZnVuY3Rpb24oanNvbk1hcmtlcnMpewogICAgICAgICAgICAgICAgaWYoanNvbk1hcmtlcnMgPT09IG51bGwpewogICAgICAgICAgICAgICAgICAgIGpzb25NYXJrZXJzID0gW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjbGVhbk1hcmtlcnMoKTsKICAgICAgICAgICAgICAgIGFkZE1hcmtlcnMoanNvbk1hcmtlcnMsIE1hcCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gY2xlYW5NYXJrZXJzKCl7CiAgICAgICAgICAgIHZpc2libGUgPSBbXTsKICAgICAgICAgICAgZm9yKGtleSBpbiBtYXJrZXJzKXsKICAgICAgICAgICAgICAgIGlmKG1hcmtlcnMuaGFzT3duUHJvcGVydHkoa2V5KSl7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG1hcmtlcnNba2V5XSwgZnVuY3Rpb24oaywgbWFya2VyKXsKICAgICAgICAgICAgICAgICAgICAgIHZhciBNYXAgPSBtYXJrZXIuZGF0YUNvbnRhaW5lci5NYXA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hcmtlci5kYXRhQ29udGFpbmVyLm1hcCAhPT0gbnVsbCAmJiB2aXNpYmxlLmluZGV4T2Yoa2V5KTwwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUucHVzaChrZXkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIE1hcC5yZW1vdmVNYXJrZXIoTWFwLm1hcCwgbWFya2VyKTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyLmRhdGFDb250YWluZXIubWFwID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBtYXJrZXJzW2tleV0gPSBbXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBmdW5jdGlvbiBhZGRNYXJrZXJzKGpzb25NYXJrZXJzLCBNYXApewogICAgICAgICAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgdmFyIG1hcmtlckRhdGEgPSB0aGlzOwogICAgICAgICAgICAgICAgaWYoIW1hcmtlcnMuaGFzT3duUHJvcGVydHkodGhpcy5ub20pKXsKICAgICAgICAgICAgICAgICAgICBtYXJrZXJzW3RoaXMubm9tXSA9IFtdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0geyBsYXQ6IG1hcmtlckRhdGEueSwgbG5nOiBtYXJrZXJEYXRhLnh9OwogICAgICAgICAgICAgICAgdmFyIG1hcE1hcmtlciA9IHZpc2libGUuaW5kZXhPZih0aGlzLm5vbSk+PTAgPyBNYXAubWFwIDogbnVsbDsKICAgICAgICAgICAgICAgIHRyYW5zbGF0ZXNbdGhpcy5ub21dID0gdGhpcy50cmFuc2xhdGU7CiAgICAgICAgICAgICAgdmFyIG1hcmtlck9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy50cmFuc2xhdGUsCiAgICAgICAgICAgICAgICBpY29uOiBNYXAuY3JlYXRlSWNvbignL2kvcG9pL2dldEljb25NYXA/dHlwZT0nK3RoaXMubm9tLCBbMzIsNTRdKQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IE1hcC5jcmVhdGVNYXBNYXJrZXIocG9zaXRpb24sIG1hcmtlck9wdGlvbnMsIHsKICAgICAgICAgICAgICAgIG1hcDogbWFwTWFya2VyLAogICAgICAgICAgICAgICAgTWFwOiBNYXAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBpZiAodmlzaWJsZS5pbmRleE9mKHRoaXMubm9tKT49MCkgewogICAgICAgICAgICAgICAgTWFwLmFkZE1hcmtlcihNYXAubWFwLCBtYXJrZXIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG1hcmtlcnNbdGhpcy5ub21dLnB1c2gobWFya2VyKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICBhZGRCdXR0b25zKCk7CiAgICAgICAgfQogICAgICAgIAoKICAgICAgICBmdW5jdGlvbiBhZGRCdXR0b25zKCl7CiAgICAgICAgICAgICQoIi5tYXAtYnV0dG9ucyIpLmVtcHR5KCk7CiAgICAgICAgICAgICQuZWFjaChtYXJrZXJzLCBmdW5jdGlvbihrLCBta3MpewogICAgICAgICAgICAgICAgaWYobWtzLmxlbmd0aCA+IDApewogICAgICAgICAgICAgICAgICAgIHZhciBpc1Zpc2libGUgPSAodmlzaWJsZS5pbmRleE9mKGspID4gLTEpOwogICAgICAgICAgICAgICAgICAgIGFkZFR5cGVCdXR0b24oaywgaXNWaXNpYmxlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgICAgICBmdW5jdGlvbiBzaG93SGlkZU1hcmtlcnModHlwZSl7CiAgICAgICAgICAgICAgICBpZihtYXJrZXJzLmhhc093blByb3BlcnR5KHR5cGUpKXsKICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbWFya2Vyc1t0eXBlXS5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgaWYobWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLm1hcCA9PT0gbnVsbCApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLm1hcCA9IG1hcmtlcnNbdHlwZV1baV0uZGF0YUNvbnRhaW5lci5NYXAubWFwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLk1hcC5hZGRNYXJrZXIobWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLm1hcCwgbWFya2Vyc1t0eXBlXVtpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yVHlwZSh0eXBlLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLk1hcC5yZW1vdmVNYXJrZXIobWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLm1hcCwgbWFya2Vyc1t0eXBlXVtpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzW3R5cGVdW2ldLmRhdGFDb250YWluZXIubWFwID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JUeXBlKHR5cGUsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFR5cGVCdXR0b24odHlwZSwgaXNWaXNpYmxlKXsKICAgICAgICAgICAgICAgIHZhciBiYXIgPSAkKCIubWFwLWJ1dHRvbnMiKTsKICAgICAgICAgICAgICAgIHZhciBhID0gJCgiPGEvPiIpOwogICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IHRyYW5zbGF0ZXNbdHlwZV07CiAgICAgICAgICAgICAgICBhLmF0dHIoImNsYXNzIiwibWFwLWJ1dHRvbiIpOwogICAgICAgICAgICAgICAgYS5hdHRyKCJyZWwiLCB0eXBlKTsKICAgICAgICAgICAgICAgIGEuYXR0cigiaHJlZiIsIiMiKTsKICAgICAgICAgICAgICAgIHZhciBpbWcgPSAkKCI8aW1nLz4iKTsKICAgICAgICAgICAgICAgIGltZy5hdHRyKCdzcmMnLCAnL2kvcG9pL2dldEljb25CYXI/dHlwZT0nK3R5cGUpOwogICAgICAgICAgICAgICAgaW1nLmF0dHIoJ3RpdGxlJywgdHJhbnNsYXRlKTsKICAgICAgICAgICAgICAgIGltZy5hdHRyKCdhbHQnLCB0eXBlKTsKICAgICAgICAgICAgICAgIGlmKGlzVmlzaWJsZSl7CiAgICAgICAgICAgICAgICAgICAgaW1nLmNzcygnYmFja2dyb3VuZC1jb2xvcicsICcjJytjb2xvck1hcmtlcnNbdHlwZV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYS5hcHBlbmQoaW1nKTsKICAgICAgICAgICAgICAgIAogICAgYS5hcHBlbmQoJzxzcGFuIGNsYXNzPSJ0eXBlTGluayI+Jyt0cmFuc2xhdGUrJzwvc3Bhbj4nKTsKCiAgICAgICAgICAgICAgICBiYXIuYXBwZW5kKGEpOwogICAgICAgICAgICB9CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbG9yVHlwZSh0eXBlLCBzaG93KXsKICAgICAgICAgICAgICAgIHZhciBjb2xvcjsKICAgICAgICAgICAgICAgIGlmKHNob3cpewogICAgICAgICAgICAgICAgICAgIGNvbG9yID0gJyMnK2NvbG9yTWFya2Vyc1t0eXBlXTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSAndHJhbnNwYXJlbnQnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJCgnaW1nW2FsdD0iJyt0eXBlKyciXScpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGNvbG9yKTsKICAgICAgICAgICAgfQogICAgICAgIAogICAgICAgIGZ1bmN0aW9uIGFwcCAoKXsKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJC5nZXRTY3JpcHQoJy9pL2pzb24vZ2V0TGJpbWFwc0xpYicsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkLmFqYXgoJy9pL2pzb24vZ2V0QXBpS2V5cz90eXBlPWRldGFpbCcpLmRvbmUoZnVuY3Rpb24gKGFwaUtleXMpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm92aWRlciA9ICdqYXdnJzsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb20gOiAxNCAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblpvb20gOiAxMiAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhbkNvbnRyb2wgOiAxICwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVDb250cm9sIDogMSAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb21Db250cm9sIDogMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgfSwgbWFwT3B0aW9ucywgewogICAgICAgICAgICAgICAgICAgICAgICBtYXBDb250YWluZXI6ICcjbWFwSW5mb3NDaXR5JywKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IGFwaUtleXNbcHJvdmlkZXJdLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogd2luZG93LmdldE1hcAogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICBsYmltYXBzLmNhbGxiYWNrKGxiaW1hcHMucHJvdmlkZXJzW3Byb3ZpZGVyXSkob3B0aW9ucykKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCIubWFwLWJ1dHRvbiIsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSAkKHRoaXMpLmF0dHIoInJlbCIpOwogICAgICAgICAgICAgICAgICAgIHNob3dIaWRlTWFya2Vycyh0eXBlKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICQuZ2V0KCcvaS9wb2kvZ2V0SWNvbkNvbG9ycycpLmRvbmUoZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWFya2VycyA9IHJlc3VsdDsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAkLmdldCgiL2kvcG9pL2dldFN0YXRzP2lkbG9jYWxpdGU9ODMiLHt9LCdqc29uJykuZG9uZShmdW5jdGlvbihzdGF0cyl7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgdmFyIGkgPSAwOwogICAgdmFyIHVsID0gJCgiPHVsIGNsYXNzPSdsZWZ0U3RhdCcvPiIpOwogICAgdmFyIHVsMiA9ICQoIjx1bCBjbGFzcz0ncmlnaHRTdGF0Jy8+Iik7CiAgICAkKCcjc3RhdHNJbmZvc0NpdHknKS5hcHBlbmQoJzxkaXYgY2xhc3M9InRoZW1UaXRsZSI+U3RhdGlzdGlxdWVzPC9kaXY+Jyk7CiAgICAkLmVhY2goc3RhdHMsIGZ1bmN0aW9uKGssIHN0YXQpewogICAgICAgIHZhciBsaSA9ICQoIjxsaS8+Iik7CiAgICAgICAgaWYoaSUyID09PSAwKXsKICAgICAgICAgICAgbGkuYWRkQ2xhc3MoJ2V2ZW4nKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsaS5hZGRDbGFzcygnb2RkJyk7CiAgICAgICAgfQogICAgICAgIHZhciB1bml0ZSA9ICIlIjsKICAgICAgICBpZiAoKHN0YXQudHJhbnNsYXRlKS5pbmNsdWRlcygiTm9tYnJlIil8fHN0YXQucHJvdmlkZXIgPT0gJ2FwaScpewogICAgICAgICAgIHVuaXRlID0gIiI7CiAgICAgICAgfQogICAgICAgIGxpLmh0bWwoJzxzcGFuIGNsYXNzPSJuYW1lIj4nK3N0YXQudHJhbnNsYXRlKyc8L3NwYW4+PHNwYW4gY2xhc3M9InZhbHVlIj4nK3N0YXQuc3RhdCsnICcrdW5pdGUrJzwvc3Bhbj4nKTsKICAgICAgICBpZiAoaSA8IDcpewogICAgICAgICAgICB1bC5hcHBlbmQobGkpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChpID4gNiAmJiBpIDwgMTQpewogICAgICAgICAgICAkKCIjc3RhdHNJbmZvc0NpdHkiKS5hcHBlbmQodWwpOwogICAgICAgICAgICB1bDIuYXBwZW5kKGxpKTsKICAgICAgICB9CiAgICAgICAgaSsrOwogICAgfSk7CiAgICAkKCIjc3RhdHNJbmZvc0NpdHkiKS5hcHBlbmQodWwyKTsKCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIAogICAgICAgICAgICBhcHAoKTsKICAgICAgICAKCiAgICAgICAgCiAgICA8L3NjcmlwdD4KICAgICAgICAKCiAgICAgICAgCiAgICAgICAgIAogICAgICAgICAgPCEtLSDDoCB1dGlsaXNlciBzaSBvbiB2ZXV0IGFqb3V0ZXIgdW4gZmljaGllciBqcyBzcMOpY2lmaXF1ZSBhdSBzaXRlIC0tPgoKCiAgICAgICAgCiAgICAKICAgICAgICAgICAgCiAgICA8c2NyaXB0PgpqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGpRdWVyeShkb2N1bWVudCkub24oJ3N1Ym1pdCcsICdmb3JtJywgZnVuY3Rpb24oKXsgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgbXlmb3JtID0galF1ZXJ5KHRoaXMpOwogICAgICAgICAgICAgICAgdmFyIGFzID0galF1ZXJ5KCcuYXNicnl3JywgbXlmb3JtKTsgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZihhcy5sZW5ndGgpeyAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgdmFyIGR5bmFtaWMgPSBqUXVlcnkoJy4yJywgYXMpOwogICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50dmFsdWUgPSBkeW5hbWljLnZhbCgpOwogICAgICAgICAgICAgICAgICAgIHZhciBvcmlndmFsdWUgPSBkeW5hbWljLmF0dHIoJ2RhdGEtb3JpZycpOwogICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnR2YWx1ZSA9PT0gb3JpZ3ZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3YWl0ZWR2YWx1ZSA9IGR5bmFtaWMuYXR0cignZGF0YS13YWl0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWMudmFsKHdhaXRlZHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7Cjwvc2NyaXB0PgoKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzY3JvbGxUb1RvcCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1mbGVjaGUgZnMtNDAiPjwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgICAgIAogICAgICAgIAogICAgPC9ib2R5Pgo8L2h0bWw+Cg==
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:18 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/43-5-PIECES-A-VENDRE-PARIS-20EME-QUARTIER-GAMBETTA-SAINT-FARGEAU.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:18 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=l9dfie7b9e316g7oid8a8hfaqr; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14512'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:18 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/7-VENTE-3-PIECES-RENOVE-de-60m-5eme-etage-Av-Felix-Faure.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:18 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=ueoo47ia6kqvvefaandkh6uvq6; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13704'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:18 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/17-SAINT-GERMAIN-BEAUX-ARTS-75007-3-PIECES-A-VENDRE.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:18 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=b5bh73o3gs3g1fm0bmbeu1lhjg; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13679'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:18 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/16-PARIS-7eme-2-Pieces-de-35m-refait-a-neuf-598000.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:18 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=nf9l0qkmibfjdat166mr6f8k1r; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13456'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:18 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/12-BEAU-3-PIECES-58-32m-EN-EXCELLENT-ETAT-AVEC-VUE-SUR-COUR-JARDIN-A-VENDRE-PARIS-13EME-QUARTIER-BUTTE-AUX-CAILL.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:18 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=i6g6spuu67gqjvss6thto08ie5; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13549'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:18 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/30-APPARTEMENT-2-PIECES-A-VENDRE-PARIS-15EME-CONVENTION.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:18 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=q224tgpo9731oq3h8ookm27qj7; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13256'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:18 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/15-2-PIECES-EN-REZ-DE-CHAUSSEE-A-VENDRE-RUE-DES-BOULANGERS-PARIS-5EME.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:19 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=paroksuodgi81iaticol8ambjq; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13527'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:19 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/41-BEAU-2-PIECES-A-VENDRE-AU-1ER-ETAGE-D-UN-BEL-IMMEUBLE-ANCIEN-A-LEVALLOIS-PERRET-92300.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:19 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=4cvfk1ka3ec5dqtdrggedp1h3m; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13715'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:19 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/25-VENTE-APPARTEMENT-2-PIECES-25-10-m.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:19 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=m2i5q8oi66lofcp43hn8a2iu8j; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13684'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:19 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/24-STUDIO-PLACE-DES-VOSGES-au-1er-etage-ascenseur.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:19 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=096hm4cca3vqek1551nfmcd73f; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13640'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:19 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/46-TRES-BEAU-STUDIO-A-VENDRE-RUE-LHOMOND-PARIS-5EME-PROCHE-PANTHEON-MOUFFETARD-STUDIO-EN-DUPLEX-DE-24m-AU-SOL.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:19 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=kno6h1sta9ikcclag3osg0ct58; path=/
      - SRV=c83; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13815'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:19 GMT
- request:
    method: get
    uri: https://www.rennes-st-germain.com/3-Vente-Immeuble-PARIS-75-Avenue-des-Gobelins.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 14:06:19 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=fds1qmbg8uirr2knrt3a7dgvln; path=/
      - SRV=c84; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster8-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13504'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 14:06:19 GMT
recorded_with: VCR 5.1.0
