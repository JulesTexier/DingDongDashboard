---
http_interactions:
- request:
    method: get
    uri: http://www.arcales.fr/recherche/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 31 Mar 2020 16:42:34 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=l11phqu5oodtikkmbr9ke9q99s; path=/
      - SRV=c34; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '8409'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:42:35 GMT
- request:
    method: get
    uri: http://www.arcales.fr/recherche/2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 31 Mar 2020 16:42:35 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=npjglggt4tp4odba6jgtco1t3c; path=/
      - SRV=c34; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '7350'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:42:35 GMT
- request:
    method: get
    uri: http://www.arcales.fr/recherche/3
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 31 Mar 2020 16:42:35 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=rcfak659sf93gg7kkuk49emkev; path=/
      - SRV=c34; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '5478'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:42:35 GMT
- request:
    method: get
    uri: http://www.arcales.fr/991-Studio-Rue-des-Haies.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 31 Mar 2020 16:42:35 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=f9v1jq8v4hdbgbe168phvlmpm1; path=/
      - SRV=c34; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '10421'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:42:35 GMT
- request:
    method: get
    uri: http://www.arcales.fr/974-Studio-Belleville.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 31 Mar 2020 16:42:35 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=dtkorq4lqlvkov5tk6hd2je2mu; path=/
      - SRV=c34; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '10335'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:42:35 GMT
- request:
    method: get
    uri: http://www.arcales.fr/996-Studio-Belleville.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 31 Mar 2020 16:42:35 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.202003235.rev1
      Set-Cookie:
      - PHPSESSID=vjcokcd3ucenv1o4vmiku914o7; path=/
      - SRV=c34; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '10301'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 31 Mar 2020 16:42:35 GMT
recorded_with: VCR 5.1.0
