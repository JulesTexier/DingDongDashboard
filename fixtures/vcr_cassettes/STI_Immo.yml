---
http_interactions:
- request:
    method: get
    uri: http://www.sti-immo.com/recherche/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 09 Apr 2020 14:32:41 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200409.rev1
      Set-Cookie:
      - PHPSESSID=qb59i72pql6dh4u1hu3t71f5jt; path=/
      - SRV=c64; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster6-w4
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '8468'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 09 Apr 2020 14:32:42 GMT
- request:
    method: get
    uri: http://www.sti-immo.com/5787-Appartement-de-38m-en-vente-dernier-etage-a-Paris-14.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 09 Apr 2020 14:32:42 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200409.rev1
      Set-Cookie:
      - PHPSESSID=4gn2183k537sc0o6lpmg771ots; path=/
      - SRV=c63; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster6-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13274'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIiBjbGFzcz0iIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wIj4KICAgIDx0aXRsZT52ZW50ZSBBcHBhcnRlbWVudCBkZSAzOG3CsiBlbiB2ZW50ZSBkZXJuaWVyIMOpdGFnZSDDoCBQYXJpcyAxNDwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0idmVudGUgYXBwYXJ0ZW1lbnQgMiBwacOoY2VzIFBhcmlzIDogQXBwYXJ0ZW1lbnQgZGUgMzhtwrIgZW4gdmVudGUgZGVybmllciDDqXRhZ2Ugw6AgUGFyaXMgMTQiPgogICAgPG1ldGEgbmFtZT0iYXV0aG9yIiBjb250ZW50PSIiPgogICAgCiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiBocmVmPSJpbWFnZXMvZmF2aWNvbi5wbmciIHR5cGU9ImltYWdlL3BuZyIgLz4KICAgICAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9ImltYWdlcy9mYXZpY29uLnBuZyIgdHlwZT0iaW1hZ2UvcG5nIiAvPgogICAgCiAgICAKICAgIAogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBuYW1lPSJnZW5lcmF0b3IiIGNvbnRlbnQ9InByZDIiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmsgIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwOi8vd3d3LnN0aS1pbW1vLmNvbS81Nzg3LUFwcGFydGVtZW50LWRlLTM4bS1lbi12ZW50ZS1kZXJuaWVyLWV0YWdlLWEtUGFyaXMtMTQuaHRtbCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0iZ2VuZXJhdG9yIiBjb250ZW50PSJiT2JjYXQiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgIAogICAgPGJhc2UgaHJlZj0iaHR0cDovL3d3dy5zdGktaW1tby5jb20vIj4KICAgIAogICAgCiAgICAgICAgICAgIAoKICAgIAogICAgICAgICAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPgogICAgICAgIHsKICAgICAgICAgICAgIkBjb250ZXh0IjogImh0dHBzOi8vc2NoZW1hLm9yZyIsCiAgICAgICAgICAgICJAdHlwZSI6ICJPcmdhbml6YXRpb24iLAogICAgICAgICAgICAibmFtZSI6ICJHcm91cGUgU3RpICIsCiAgICAgICAgICAgICJhZ2dyZWdhdGVSYXRpbmciOgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQWdncmVnYXRlUmF0aW5nIiwKICAgICAgICAgICAgICAgICJyYXRpbmdWYWx1ZSI6ICI5NSIsCiAgICAgICAgICAgICAgICAicmV2aWV3Q291bnQiOiAiMzQiLAogICAgICAgICAgICAgICAgIldvcnN0UmF0aW5nIjogIjAiLAogICAgICAgICAgICAgICAgIkJlc3RSYXRpbmciOiIxMDAiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICA8L3NjcmlwdD4KICAgIAoKICAgIAogICAgCiAgICAgICAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVF1ZXN0cmlhbCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgICAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9VGl0aWxsaXVtK1dlYjozMDAsNDAwLDcwMCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgICAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9TGF0bzozMDAsNDAwLDcwMCw5MDAiIHJlbD0ic3R5bGVzaGVldCI+CiAgICAgICAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90bzozMDAsNDAwLDcwMCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgIAogICAgCiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9qcXVlcnl1aS8xLjEyLjEvdGhlbWVzL3Ntb290aG5lc3MvanF1ZXJ5LXVpLm1pbi5jc3MiIC8+CiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjAuMC1iZXRhLjIvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiBpbnRlZ3JpdHk9InNoYTM4NC1Qc0g4UjcySlEzU09kaFZpM3V4ZnRtYVc2VmM1MU1LYjBxNVAyclJVcFB2cnN6dUU0VzFwb3ZIWWdUcEJmc2hiIiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj4KICAgICAgICA8bGluayBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2ZvbnQtYXdlc29tZS80LjcuMC9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgaW50ZWdyaXR5PSJzaGEzODQtd3ZmWHBxcFpaVlFHSzZUQWg1UFZsR09mUU5IU29EMnhiRStRa1B4Q0FGbE5FZXZvRUgzU2wwc2liVmNPUVZuTiIgY3Jvc3NvcmlnaW49ImFub255bW91cyI+CiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9hbmltYXRlLmNzcy8zLjUuMi9hbmltYXRlLmNzcyIgLz4KICAgICAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um9ib3RvIiByZWw9InN0eWxlc2hlZXQiPgogICAgICAgPCEtLSA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuLmJvb3Rjc3MuY29tL2hvdmVyLmNzcy8yLjEuMS9jc3MvaG92ZXItbWluLmNzcyIgLz4gLS0+CiAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Jvb3RzdHJhcC1zZWxlY3QvMS4xMi40L2Nzcy9ib290c3RyYXAtc2VsZWN0Lm1pbi5jc3MiPgogICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbGlnaHRnYWxsZXJ5LzEuNi44L2Nzcy9saWdodGdhbGxlcnkuY3NzIj4KICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xpZ2h0c2xpZGVyLzEuMS42L2Nzcy9saWdodHNsaWRlci5jc3MiPgogICAgICAKICAgIAogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL2Nzcy9mb250cy9zdHlsZS5jc3MiIC8+CgogICAgCgogICAgCgk8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xpZ2h0Z2FsbGVyeS8xLjYuMC9jc3MvbGlnaHRnYWxsZXJ5Lm1pbi5jc3MiIC8+Cgk8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xpZ2h0c2xpZGVyLzEuMS42L2Nzcy9saWdodHNsaWRlci5taW4uY3NzIiAvPgoJPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9Pd2xDYXJvdXNlbDIvMi4zLjQvYXNzZXRzL293bC5jYXJvdXNlbC5taW4uY3NzIiAvPgoKCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvY3NzL2V4cHJlLmNzcyIgLz4KICAgICAKCiAgICAKICAgICAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KPHNjcmlwdD4oZnVuY3Rpb24odyxkLHMsbCxpKXsgd1tsXT13W2xdfHxbXTt3W2xdLnB1c2goIHsgJ2d0bS5zdGFydCc6CiAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCiAgICAgICAgICAgIGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQogICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7CiAgICAgICAgICAgIH0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnZGF0YUxheWVyJywnR1RNLVBHUFM1VzgnKTs8L3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgCiAgICAKICAgIAogICAgPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJBcHBhcnRlbWVudCBkZSAzOG0mc3VwMjsgZW4gdmVudGUgZGVybmllciAmZWFjdXRlO3RhZ2UgJmFncmF2ZTsgUGFyaXMgMTQiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0iQXJ0aWNsZSIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cDovL3d3dy5zdGktaW1tby5jb20vaW1hZ2VzL2JpZW5zLzEvZWM0NDQ4MTZlYjRhMmNkY2E3MGZiN2I1OWFhNGMzYTgvb3JpZ2luYWwvcGhvdG9fYTk1Njk2YmU5ZWYyZDAyMzEwMDVkMzE4YWUxOWRlMTcuanBnIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSLCoEFwcGFydGVtZW50IGRlIDM4bcKyIGVuIGRldXggcGnDqGNlcyBjb21wb3PDqSA6IGQndW5lIGN1aXNpbmUgaW5kw6lwZW5kYW50ZSwgV0MgaW5kw6lwZW5kYW50LCBzw6lqb3VyLCBjaGFtYnJlIGF2ZWMgc2FsbGUgZGUgYmFpbnMuIFVuZSBjYXZlLiBDb25zdHJ1aXQgZW4gMTkyMC7CoCBTaXR1w6kgYXUgZGVybmllciDDqXRhZ2Ugc3VyIDcgKHNhbnMgYXNjZW5zZXVyKS4gUG91ciB2b3VzIGTDqXBlbnNlciBlbiBwbGVpbiBhaXIsIGxhIFBsYWNlLi4uIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnVybCIgY29udGVudD0iaHR0cDovL3d3dy5zdGktaW1tby5jb20vNTc4Ny1BcHBhcnRlbWVudC1kZS0zOG0tZW4tdmVudGUtZGVybmllci1ldGFnZS1hLVBhcmlzLTE0Lmh0bWwiIC8+CiAgICAKCiAgICAKICAgICAgICAgICAgCjwvaGVhZD4KCjxib2R5IGNsYXNzPSJwYWdlRGV0YWlsIj4KICAgIDwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+Cjxub3NjcmlwdD48aWZyYW1lIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vbnMuaHRtbD9pZD1HVE0tUEdQUzVXOCIKICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+PC9pZnJhbWU+PC9ub3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+CgoKCgoKCgoKCgoKCgoKCgoKCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIAogICAgPC9kaXY+CgoKCgogICAgICAgICAgICAKCjxoZWFkZXIgaWQ9ImhlYWRlcjEiPgogICAgDQoNCiAgICA8ZGl2IGNsYXNzPSJtbC1hdXRvIGNvbC14bC0zIHRleHQtY2VudGVyIHJzdi1zZWxlY3Rpb24iPg0KICAgICAgICA8ZGl2IGNsYXNzPSJhdmlzIj4NCiAgICAgICAgICAgIDxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5vcGluaW9uc3lzdGVtLmZyL2NvbXBhbnlfcmF0aW5nLnBocD9jb21wYW55X2lkPTIzMDkmYW1wO3JhdGluZ19rZXk9JmFtcDtsYW5ndWFnZT1mcmUmYW1wO3RleHRfY29sb3I9IzE4MzQ3NiINCiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsaW5nPSJubyIgc3R5bGU9ImJvcmRlcjogbm9uZTsgb3ZlcmZsb3c6IGhpZGRlbjsgd2lkdGg6IDE4MHB4OyBoZWlnaHQ6IDIycHg7IGJhY2tncm91bmQ6I2ZmZmZmZjsiIGFsbG93dHJhbnNwYXJlbmN5PSJ0cnVlIiBmcmFtZWJvcmRlcj0iMCI+DQogICAgICAgICAgICA8L2lmcmFtZT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIHJzdi1zZWxlY3Rpb24gbWVudWxhbmciPg0KICAgICAgICA8YSBocmVmPSIvc2VsZWN0aW9uLmh0bWwiPjxpIGNsYXNzPSJmYSBmYS0yeCBmYS1zaG9wcGluZy1iYXNrZXQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48c3BhbiBjbGFzcz0iYmFkZ2UgYmFkZ2UtcHJpbWFyeSBuYlNlbGVjdGlvbiI+MDwvc3Bhbj48L2k+PC9hPg0KICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93biBsYW5ndWUiPg0KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSIgdHlwZT0iYnV0dG9uIiBpZD0iZHJvcGRvd25NZW51QnV0dG9uIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4NCiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFtZmFtZmFtLWZsYWctZnIiPjwvaT4NCiAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSIgYXJpYS1sYWJlbGxlZGJ5PSJkcm9wZG93bk1lbnVCdXR0b24iPg0KICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBtZXRob2Q9InBvc3QiIGFjdGlvbj0iLy93d3cuc3RpLWltbW8uY29tLzU3ODctQXBwYXJ0ZW1lbnQtZGUtMzhtLWVuLXZlbnRlLWRlcm5pZXItZXRhZ2UtYS1QYXJpcy0xNC5odG1sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImxhbmciIHZhbHVlPSJlbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4iPjxpIGNsYXNzPSJmYW1mYW1mYW0tZmxhZy1lbiI+PC9pPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPC9kaXY+DQoKICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14bC0xMiB0ZXh0LWNlbnRlciBsb2dvIj4KICAgICAgICAgICAgPGEgaHJlZj0iLyIgaWQ9ImxvZ29TaXRlIiA+PGltZyBzcmM9Ii8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvbG9nb1NpdGUucG5nIiAvPjwvYT4KICAgICAgICA8L2Rpdj4KICAgIAogICAgCiAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWV4cGFuZC1tZCI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibmF2YmFyLXRvZ2dsZXIiIHR5cGU9ImJ1dHRvbiIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI25hdmJhclN1cHBvcnRlZENvbnRlbnQiIGFyaWEtY29udHJvbHM9Im5hdmJhclN1cHBvcnRlZENvbnRlbnQiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWxhYmVsPSJUb2dnbGUgbmF2aWdhdGlvbiI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1sZyBmYS1iYXJzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgIDwvYnV0dG9uPgogICAgICAgIDxwIGNsYXNzPSJ0eHRGaXhlZFRvcCI+TWVudTwvcD4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIiBpZD0ibmF2YmFyU3VwcG9ydGVkQ29udGVudCI+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2YmFyLW5hdiBtLWF1dG8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGh2ci1zd2VlcC10by10b3AgICAiPgogICAgICAgICAgICA8YSBocmVmPSIvIiB0YXJnZXQ9IiIgY2xhc3M9Im5hdi1saW5rIiBpZD0iIiA+QWNjdWVpbDwvYT4KICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBodnItc3dlZXAtdG8tdG9wICAgIj4KICAgICAgICAgICAgPGEgaHJlZj0iL3ZlbmRyZS5odG1sIiB0YXJnZXQ9IiIgY2xhc3M9Im5hdi1saW5rIiBpZD0iIiA+VmVuZHJlPC9hPgogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGh2ci1zd2VlcC10by10b3AgZHJvcGRvd24gICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiIHRhcmdldD0iIiBjbGFzcz0iIG5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSIgaWQ9IiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgPkFjaGV0ZXI8L2E+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93biBkcm9wZG93bi1tZW51IiBhcmlhLWxhYmVsbGVkYnk9IkFjaGV0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8YSBocmVmPSIvYS12ZW5kcmUvMSIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPmhhYml0YXRpb248L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxhIGhyZWY9Ii9jb21tZXJjZXMvMSIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPlByb2Zlc3Npb25uZWw8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gaHZyLXN3ZWVwLXRvLXRvcCAgICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hLWxvdWVyLzEiIHRhcmdldD0iIiBjbGFzcz0ibmF2LWxpbmsiIGlkPSIiID5Mb3VlcjwvYT4KICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBodnItc3dlZXAtdG8tdG9wIGRyb3Bkb3duICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIiB0YXJnZXQ9IiIgY2xhc3M9IiBuYXYtbGluayBkcm9wZG93bi10b2dnbGUiIGlkPSIiIGFyaWEtaGFzcG9wdXA9InRydWUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1leHBhbmRlZD0iZmFsc2UiID5Hw6lyZXI8L2E+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93biBkcm9wZG93bi1tZW51IiBhcmlhLWxhYmVsbGVkYnk9IkfDqXJlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxhIGhyZWY9Ii9zeW5kaWMuaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPnN5bmRpYyBkJ2ltbW9iaWxpZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxhIGhyZWY9Ii9nZXN0aW9uLWxvY2F0aXZlLmh0bWwiIHRhcmdldD0iIiBjbGFzcz0iZHJvcGRvd24taXRlbSAiID5nZXN0aW9uIGxvY2F0aXZlPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGh2ci1zd2VlcC10by10b3AgZHJvcGRvd24gICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiIHRhcmdldD0iIiBjbGFzcz0iIG5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSIgaWQ9IiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgPmxlIGdyb3VwZTwvYT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duIGRyb3Bkb3duLW1lbnUiIGFyaWEtbGFiZWxsZWRieT0ibGUgZ3JvdXBlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGEgaHJlZj0iL3ByZXNlbnRhdGlvbi5odG1sIiB0YXJnZXQ9IiIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0gIiA+UHLDqXNlbnRhdGlvbjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGEgaHJlZj0iL2FnZW5jZXMvIiB0YXJnZXQ9IiIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0gIiA+Tm9zIDYgYWdlbmNlczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGRpdiBjbGFzcz0iaGFzLWRyb3Bkb3duIHNzbWVudSI+CiAgICAgICAgPGEgaHJlZj0iL25vc21ldGllcnMuaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtIGFzc21lbnUgZHJvcGRvd24tdG9nZ2xlIiA+Tm9zIG3DqXRpZXJzPC9hPgogICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duIGRyb3Bkb3duLW1lbnUiIGFyaWEtbGFiZWxsZWRieT0iTm9zIG3DqXRpZXJzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGEgaHJlZj0iL25vc21ldGllcnMvYWNoYXQtdmVudGUuaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPkFjaGF0L1ZlbnRlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8YSBocmVmPSIvbm9zbWV0aWVycy9sb2NhdGlvbi5odG1sIiB0YXJnZXQ9IiIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0gIiA+TG9jYXRpb248L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxhIGhyZWY9Ii9ub3NtZXRpZXJzL2ltbW9iaWxpZXItcHJvZmVzc2lvbm5lbC5odG1sIiB0YXJnZXQ9IiIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0gIiA+SW1tb2JpbGllciBwcm9mZXNzaW9ubmVsPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8YSBocmVmPSIvbm9zbWV0aWVycy9hZG1pbmlzdHJhdGlvbi1kZXMtYmllbnMuaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPkFkbWluaXN0cmF0aW9uIGRlIGJpZW5zPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8YSBocmVmPSIvbm9zbWV0aWVycy9zeW5kaWMuaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPlN5bmRpYzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGEgaHJlZj0iL25vc21ldGllcnMvY29uc2VpbHMuaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPkNvbnNlaWxzPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gaHZyLXN3ZWVwLXRvLXRvcCAgICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9iaWVuL3ZlbmR1LzEiIHRhcmdldD0iIiBjbGFzcz0ibmF2LWxpbmsiIGlkPSIiID5CaWVucyB2ZW5kdXM8L2E+CiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gaHZyLXN3ZWVwLXRvLXRvcCAgICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9jb250YWN0Lmh0bWwiIHRhcmdldD0iIiBjbGFzcz0ibmF2LWxpbmsiIGlkPSIiID5Db250YWN0PC9hPgogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgIDwvbmF2PgogICAgCjwvaGVhZGVyPgoKDQoJIDxzZWN0aW9uIGlkPSJzbGlkZUNDIj4NCiAgICAgICAgPGRpdiBpZD0iY2Fyb3VzZWxDQyIgY2xhc3M9ImNhcm91c2VsIHNsaWRlIiBkYXRhLXJpZGU9ImNhcm91c2VsIiBkYXRhLXBhdXNlPSJmYWxzZSI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pbm5lciI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWl0ZW0gYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvc2xpZGVzaG93LzEuanBnIiBjbGFzcz0idGV4dC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWl0ZW0gIGNhcm91c2VsLWl0ZW0tbGVmdCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9zbGlkZXNob3cvMi5qcGciIGNsYXNzPSIgdGV4dC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L3NlY3Rpb24+DQoKCiAgICAKCgogICAgIAogCiAgICAKICAgIDxkaXYgaWQ9IkNhbGN1bGV0dGUiIGNsYXNzPSJtb2RhbCBmYWRlIiAgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0ibXlMYXJnZU1vZGFsTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbWQiPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSI+Q2FsY3VsZXR0ZTwvaDQ+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvcm0taG9yaXpvbnRhbCIgcm9sZT0iZm9ybSIgYWN0aW9uPSIiIG9uc3VibWl0PSJyZXR1cm4gY2FsY3VsYXRlQ3JlZGl0KHRoaXMpOyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtb250YW50IiBjbGFzcz0iZm9ybS1jb250cm9sLWxhYmVsIj5Nb250YW50ICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0IiBuYW1lPSJtb250YW50IiBpZD0ibW9udGFudCIgdmFsdWU9IjM3NTAwMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InRhdXgiIGNsYXNzPSJmb3JtLWNvbnRyb2wtbGFiZWwiPlRhdXggKCUpICogPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIHN0ZXA9IjAuMDEiIG1pbj0iMCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0idGF1eCIgaWQ9InRhdXgiIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJhcHBvcnQiIGNsYXNzPSJmb3JtLWNvbnRyb2wtbGFiZWwiPkFwcG9ydCA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0IiBuYW1lPSJhcHBvcnQiIGlkPSJhcHBvcnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkdXJlZSIgY2xhc3M9ImZvcm0tY29udHJvbC1sYWJlbCI+RHVyw6llIChBbm7DqWVzKSAqIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ibnVtYmVyIiBjbGFzcz0iZm9ybS1jb250cm9sIG51bWVyaWNJbnB1dCIgbmFtZT0iZHVyZWUiIGlkPSJkdXJlZSIgcmVxdWlyZWQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGQtbm9uZSByZXN1bHREaXYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibWVuc3VhbGl0ZSIgY2xhc3M9ImZvcm0tY29udHJvbC1sYWJlbCI+TWVuc3VhbGl0w6lzIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBudW1lcmljSW5wdXQgcmVzdWx0IiBuYW1lPSJtZW5zdWFsaXRlIiBpZD0ibWVuc3VhbGl0ZSIgcmVhZG9ubHkgcmVxdWlyZWQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic21hbGwgb2JsaWdDaGFtcCBwdWxsLWxlZnQiPipDaGFtcHMgb2JsaWdhdG9pcmVzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCByaWdodCI+Q2FsY3VsZXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtY29udGVudCAtLT4KICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtZGlhbG9nIC0tPgogICAgPC9kaXY+CiAgICAgCgogICAgCiAgICA8ZGl2IGlkPSJzZW5kRnJpZW5kIiBjbGFzcz0ibW9kYWwgZmFkZSIgIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im15TGFyZ2VNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLW1kIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvcm0taG9yaXpvbnRhbCIgcm9sZT0iZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii81Nzg3LUFwcGFydGVtZW50LWRlLTM4bS1lbi12ZW50ZS1kZXJuaWVyLWV0YWdlLWEtUGFyaXMtMTQuaHRtbCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0ic2VuZEZyaWVuZCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZGF0YVtDb250YWN0XVt1cmxdIiB2YWx1ZT0iaHR0cDovL3d3dy5zdGktaW1tby5jb20vNTc4Ny1BcHBhcnRlbWVudC1kZS0zOG0tZW4tdmVudGUtZGVybmllci1ldGFnZS1hLVBhcmlzLTE0Lmh0bWwiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiPlBhcnRhZ2VyPC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkYXRhW0NvbnRhY3RdW25vbV0iIGNsYXNzPSJmb3JtLWNvbnRyb2wtbGFiZWwiPlZvdHJlIG5vbSAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJkYXRhW0NvbnRhY3RdW25vbV0iIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkYXRhW0NvbnRhY3RdW2Zyb21dIiBjbGFzcz0iZm9ybS1jb250cm9sLWxhYmVsIj5Wb3RyZSBhZHJlc3NlIG1haWwgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iZGF0YVtDb250YWN0XVtmcm9tXSIgcmVxdWlyZWQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRhdGFbQ29udGFjdF1bdG9dIiBjbGFzcz0iZm9ybS1jb250cm9sLWxhYmVsIj5NYWlsIGRlIHZvdHJlIGFtaSAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJkYXRhW0NvbnRhY3RdW3RvXSIgcmVxdWlyZWQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhc2JyeXciIHN0eWxlPSJkaXNwbGF5Om5vbmUiPgo8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXNfZHluYSIgZGF0YS13YWl0PSJiODliYjAyNDQ4ZjY4M2E5N2Q5N2EwYmEwMzc3ZjEwZSIgZGF0YS1vcmlnPSJjZjNkNGFhMzhjNmM5YzY0ZDg3ZDAwZWFkMTgxZjM5NSIgY2xhc3M9ImFzX2ZpZWxkIGFzX2ZpZWxkLTIgMiIgdmFsdWU9ImNmM2Q0YWEzOGM2YzljNjRkODdkMDBlYWQxODFmMzk1Ii8+CjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhc19zdGF0IiBjbGFzcz0iYXNfZmllbGQgYXNfZmllbGQtMSAxIiB2YWx1ZT0iIi8+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0YVtDb250YWN0XVttZXNzYWdlXSIgY2xhc3M9ImZvcm0tY29udHJvbC1sYWJlbCI+Vm90cmUgbWVzc2FnZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9Im1lc3NhZ2UiIG5hbWU9ImRhdGFbQ29udGFjdF1bbWVzc2FnZV0iPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIG9ibGlnQ2hhbXAgcHVsbC1sZWZ0Ij4qQ2hhbXBzIG9ibGlnYXRvaXJlczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHJpZ2h0Ij5FbnZveWVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvZGl2PjwhLS0gLy5tb2RhbC1jb250ZW50IC0tPgogICAgICAgIDwvZGl2PjwhLS0gLy5tb2RhbC1kaWFsb2cgLS0+CiAgICA8L2Rpdj4KCgogICAgPGFydGljbGUgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvUHJvZHVjdCIgY2xhc3M9ImJpZW4iPgogICAgICAgIDxzZWN0aW9uIGlkPSJjb250YWluZXJEZXRhaWwiIGNsYXNzPSJhbm5vbmNlRHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBhcmlhbmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9J2FwcGxpY2F0aW9uL2xkK2pzb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkBjb250ZXh0IjoiaHR0cHM6Ly9zY2hlbWEub3JnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjoiQnJlYWRjcnVtYkxpc3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXRlbUxpc3RFbGVtZW50IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjoiTGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwb3NpdGlvbiI6MSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXRlbSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkBpZCI6Ii8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IkFjY3VlaWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiJMaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBvc2l0aW9uIjoyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpdGVtIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQGlkIjoiL2FjaGF0LWltbW9iaWxpZXItcGFyaXMvMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjoiTm9zIGFubm9uY2VzIMOgIFBhcmlzIGV0IHNlcyBlbnZpcm9ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAdHlwZSI6Ikxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicG9zaXRpb24iOjMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW0iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAaWQiOiIvNTc4Ny1BcHBhcnRlbWVudC1kZS0zOG0tZW4tdmVudGUtZGVybmllci1ldGFnZS1hLVBhcmlzLTE0Lmh0bWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IkFwcGFydGVtZW50IGRlIDM4bcKyIGVuIHZlbnRlIGRlcm5pZXIgw6l0YWdlIMOgIFBhcmlzIDE0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz0iYnJlYWRjcnVtYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+PGEgaHJlZj0iLyIgPkFjY3VlaWw8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci1wYXJpcy8xIiA+Tm9zIGFubm9uY2VzIMOgIFBhcmlzIGV0IHNlcyBlbnZpcm9uczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPjxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyLXBhcmlzL3R5cGUtMi1BcHBhcnRlbWVudC8xIiA+QXBwYXJ0ZW1lbnQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIGFjdGl2ZSI+QXBwYXJ0ZW1lbnQgZGUgIDM4IG0mc3VwMjsgw6AgUGFyaXM8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXRhaWx0b3AgZC1tZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbWQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgaHJlZj0iamF2YXNjcmlwdDpoaXN0b3J5LmdvKC0xKSI+PCBSZXRvdXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBpdGVtcHJvcD0ibmFtZSIgY2xhc3M9ImRldGFpbC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYm9sZCI+QXBwYXJ0ZW1lbnQgZGUgMzhtwrIgZW4gdmVudGUgZGVybmllciDDqXRhZ2Ugw6AgUGFyaXMgMTQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbWQtZmxleCBtbC1hdXRvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgaXRlbXByb3A9InBvdGVudGlhbEFjdGlvbiIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvQnV5QWN0aW9uIiBjbGFzcz0iZGV0YWlsLXByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsYWJlbHByaXgiPjxiPlByaXg8L2I+IDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJwcmljZVNwZWNpZmljYXRpb24iIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1ByaWNlU3BlY2lmaWNhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0icHJpY2UiIGNvbnRlbnQ9IjM3NTAwMCI+Mzc1IDAwMDwvc3Bhbj4gPHNwYW4gaXRlbXByb3A9InByaWNlQ3VycmVuY3kiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFiZWxwcml4IHJlZiI+PGI+UmVmPC9iPiA8L3NwYW4+VjIzMDAwNTc4NgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICANCjxkaXYgaWQ9ImR0MSI+DQogICAgICAgIDxzZWN0aW9uIGlkPSJnYWxsZXJ5IiBkYXRhLW1pbmlhdHVyZT0iMSI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIGxvYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2lyY2xlLW8tbm90Y2ggZmEtc3BpbiBmYS0zeCBmYS1mdyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPkxvYWRpbmcuLi48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZmlndXJlIGNsYXNzPSIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJTdGF0dXRCaWVuIG5vdXZlYXV0ZSI+Tm91dmVhdXTDqTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoNCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW1hZ2VHYWxsZXJ5IG5vdExvYWRlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMCIgZGF0YS10aHVtYj0iLy9zdGktaW1tby5zdGF0aWNsYmkuY29tLzIwMHgyMDAvaW1hZ2VzL2JpZW5zLzEvZWM0NDQ4MTZlYjRhMmNkY2E3MGZiN2I1OWFhNGMzYTgvcGhvdG9fYTk1Njk2YmU5ZWYyZDAyMzEwMDVkMzE4YWUxOWRlMTcuanBnIiBkYXRhLXNyYz0iLy9zdGktaW1tby5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2VjNDQ0ODE2ZWI0YTJjZGNhNzBmYjdiNTlhYTRjM2E4L3Bob3RvX2E5NTY5NmJlOWVmMmQwMjMxMDA1ZDMxOGFlMTlkZTE3LmpwZyIgZGF0YS1zcmMtZm9ydGh1bWIgPSAiLy9zdGktaW1tby5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2VjNDQ0ODE2ZWI0YTJjZGNhNzBmYjdiNTlhYTRjM2E4L3Bob3RvX2E5NTY5NmJlOWVmMmQwMjMxMDA1ZDMxOGFlMTlkZTE3LmpwZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS8xMTAweDExMDAvaW1hZ2VzL2JpZW5zLzEvZWM0NDQ4MTZlYjRhMmNkY2E3MGZiN2I1OWFhNGMzYTgvcGhvdG9fYTk1Njk2YmU5ZWYyZDAyMzEwMDVkMzE4YWUxOWRlMTcuanBnIiBhbHQ9IiIgY2xhc3M9ImltZ0JpZW4gaW1nRmlyc3QiIHdpZHRoPSIxMTAwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjEiIGRhdGEtdGh1bWI9Ii8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xL2VjNDQ0ODE2ZWI0YTJjZGNhNzBmYjdiNTlhYTRjM2E4L3Bob3RvX2EyMDQ1NWNkZThkMmFkOWMyZWQwYjkwNjg3MzA0ZDFhLmpwZyIgZGF0YS1zcmM9Ii8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9lYzQ0NDgxNmViNGEyY2RjYTcwZmI3YjU5YWE0YzNhOC9waG90b19hMjA0NTVjZGU4ZDJhZDljMmVkMGI5MDY4NzMwNGQxYS5qcGciIGRhdGEtc3JjLWZvcnRodW1iID0gIi8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9lYzQ0NDgxNmViNGEyY2RjYTcwZmI3YjU5YWE0YzNhOC9waG90b19hMjA0NTVjZGU4ZDJhZDljMmVkMGI5MDY4NzMwNGQxYS5qcGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vMTEwMHgxMTAwL2ltYWdlcy9iaWVucy8xL2VjNDQ0ODE2ZWI0YTJjZGNhNzBmYjdiNTlhYTRjM2E4L3Bob3RvX2EyMDQ1NWNkZThkMmFkOWMyZWQwYjkwNjg3MzA0ZDFhLmpwZyIgYWx0PSIiIGNsYXNzPSJpbWdCaWVuIiB3aWR0aD0iMTEwMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWl0ZXJhdG9yPSIyIiBkYXRhLXRodW1iPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9lYzQ0NDgxNmViNGEyY2RjYTcwZmI3YjU5YWE0YzNhOC9waG90b18zNDA3ZTM4YWUzZDNmNDE1ZWYwODcxMDk0YzU5NGEwNi5qcGciIGRhdGEtc3JjPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvZWM0NDQ4MTZlYjRhMmNkY2E3MGZiN2I1OWFhNGMzYTgvcGhvdG9fMzQwN2UzOGFlM2QzZjQxNWVmMDg3MTA5NGM1OTRhMDYuanBnIiBkYXRhLXNyYy1mb3J0aHVtYiA9ICIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvZWM0NDQ4MTZlYjRhMmNkY2E3MGZiN2I1OWFhNGMzYTgvcGhvdG9fMzQwN2UzOGFlM2QzZjQxNWVmMDg3MTA5NGM1OTRhMDYuanBnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9zdGktaW1tby5zdGF0aWNsYmkuY29tLzExMDB4MTEwMC9pbWFnZXMvYmllbnMvMS9lYzQ0NDgxNmViNGEyY2RjYTcwZmI3YjU5YWE0YzNhOC9waG90b18zNDA3ZTM4YWUzZDNmNDE1ZWYwODcxMDk0YzU5NGEwNi5qcGciIGFsdD0iIiBjbGFzcz0iaW1nQmllbiIgd2lkdGg9IjExMDAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMyIgZGF0YS10aHVtYj0iLy9zdGktaW1tby5zdGF0aWNsYmkuY29tLzIwMHgyMDAvaW1hZ2VzL2JpZW5zLzEvZWM0NDQ4MTZlYjRhMmNkY2E3MGZiN2I1OWFhNGMzYTgvcGhvdG9fNTE2NjBkZjk4MWI1MzBiZmZhNDk2MDEwMWQ0OTE0NzUuanBnIiBkYXRhLXNyYz0iLy9zdGktaW1tby5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2VjNDQ0ODE2ZWI0YTJjZGNhNzBmYjdiNTlhYTRjM2E4L3Bob3RvXzUxNjYwZGY5ODFiNTMwYmZmYTQ5NjAxMDFkNDkxNDc1LmpwZyIgZGF0YS1zcmMtZm9ydGh1bWIgPSAiLy9zdGktaW1tby5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2VjNDQ0ODE2ZWI0YTJjZGNhNzBmYjdiNTlhYTRjM2E4L3Bob3RvXzUxNjYwZGY5ODFiNTMwYmZmYTQ5NjAxMDFkNDkxNDc1LmpwZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS8xMTAweDExMDAvaW1hZ2VzL2JpZW5zLzEvZWM0NDQ4MTZlYjRhMmNkY2E3MGZiN2I1OWFhNGMzYTgvcGhvdG9fNTE2NjBkZjk4MWI1MzBiZmZhNDk2MDEwMWQ0OTE0NzUuanBnIiBhbHQ9IiIgY2xhc3M9ImltZ0JpZW4iIHdpZHRoPSIxMTAwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZmlndXJlPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvc2VjdGlvbj4NCiAgICAgICAgPHNlY3Rpb24gaWQ9InZpc2l0ZVZpcnR1ZWxsZSI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGlkPSJpbmZvc0JpZW4iPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNSI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5EZXNjcmlwdGlvbiBkZSBsJ29mZnJlPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHAgaXRlbXByb3A9ImRlc2NyaXB0aW9uIiBjbGFzcz0iZGVzY3JpcHRpb24iPsKgQXBwYXJ0ZW1lbnQgZGUgMzhtwrIgZW4gZGV1eCBwacOoY2VzIGNvbXBvc8OpIDogZCd1bmUgY3Vpc2luZSBpbmTDqXBlbmRhbnRlLCBXQyBpbmTDqXBlbmRhbnQsIHPDqWpvdXIsIGNoYW1icmUgYXZlYyBzYWxsZSBkZSBiYWlucy4gVW5lIGNhdmUuIENvbnN0cnVpdCBlbiAxOTIwLsKgIFNpdHXDqSBhdSBkZXJuaWVyIMOpdGFnZSBzdXIgNyAoc2FucyBhc2NlbnNldXIpLiBQb3VyIHZvdXMgZMOpcGVuc2VyIGVuIHBsZWluIGFpciwgbGEgUGxhY2UgTG91aXNlLUxvc3NlcmFuZCBlc3Qgw6AgbW9pbnMgZGUgMTAwIG3DqHRyZXMuIFBvdXIgY2UgcXVpIGVzdCBkdSBwcml4LCBpbCBlc3QgZGUgMzc1wqAwMDDCoGV1cm9zLCBzb2l0IGVudmlyb24gOcKgODY4wqDigqwgcGFyIG3DqHRyZSBjYXJyw6kuCkV4cG9zw6kgc3VkIG91ZXN0IHNhbnMgdmlzIMOgIHZpcywgYXBwYXJ0ZW1lbnQgZCdhbmdsZQpCZWF1IHBvdGVudGllbDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEgYWdlbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtdC0wIj5Db29yZG9ubsOpZXMgZGUgbCdhZ2VuY2U8L2g0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+U1RJIFBlcm5ldHk8L2g1Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGVsYWdlbmNlIj48YSBocmVmPSJ0ZWw6MDEgNDUgNDMgNDQgMDUiPjAxIDQ1IDQzIDQ0IDA1PC9hPg0KPC9zcGFuPjxicj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0hvdXNlIiBjbGFzcz0iY29sLWxnLTcgZGVzY3JpcHRpZiI+DQogICAgICAgICAgICAgICAgICAgIDxoMz5EZXNjcmlwdGlvbiBkdSBiaWVuPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGl0dGxlLWluZm9zIGQteHMtZG93bi1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtZmxleCBtci0zIiBzcmM9ImltYWdlcy9kZXRhaWwvZGV0YWlsLXBpZWNlcy5wbmciIGFsdD0iIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im10LTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJudW1iZXJPZlJvb21zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGnDqGNlcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtZmxleCBtci0zIiBzcmM9ImltYWdlcy9kZXRhaWwvZGV0YWlsLXN1cmZhY2UucG5nIiBhbHQ9IiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtdC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0iZmxvb3JTaXplIj4zODwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSZzdXAyOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJkLWZsZXggbXItMyIgc3JjPSJpbWFnZXMvZGV0YWlsL2RldGFpbC1jaGFtYnJlLnBuZyIgYWx0PSIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibXQtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbWJyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1maWxsIG5hdi1waWxscyAiIHJvbGU9InRhYmxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjaW5mb3MiIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFyaWEtY29udHJvbHM9ImluZm9zIiByb2xlPSJ0YWIiIGRhdGEtdG9nZ2xlPSJ0YWIiIGNsYXNzPSJuYXYtbGluayBhY3RpdmUiPkfDqW7DqXJhbDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNkZXRhaWxzIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJkZXRhaWxzIiByb2xlPSJ0YWIiIGRhdGEtdG9nZ2xlPSJ0YWIiIGNsYXNzPSJuYXYtbGluayAiPkTDqXRhaWxzICs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjY29wcm8iIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFyaWEtY29udHJvbHM9ImNvcHJvIiByb2xlPSJ0YWIiIGRhdGEtdG9nZ2xlPSJ0YWIiIGNsYXNzPSJuYXYtbGluayAiPkNvcHJvcHJpw6l0w6k8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjaW5mb3NmaSIgYXJpYS1leHBhbmRlZD0idHJ1ZSIgYXJpYS1jb250cm9scz0iaW5mb3NmaSIgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIiBjbGFzcz0ibmF2LWxpbmsgIj5GaW5hbmNpZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSIjYmlsYW4iIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFyaWEtY29udHJvbHM9ImJpbGFuIiByb2xlPSJ0YWIiIGRhdGEtdG9nZ2xlPSJ0YWIiPkJpbGFuIMOpbmVyZ8OpdGlxdWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1jb250ZW50IiBpZD0ibXlUYWJDb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIHNob3cgYWN0aXZlIiBpZD0iaW5mb3MiIHJvbGU9InRhYnBhbmVsIiBhcmlhLWxhYmVsbGVkYnk9ImluZm9zLXRhYiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0ic3Itb25seSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkxhYmVsPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VmFsdWU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+Q29kZSBwb3N0YWw8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij43NTAxNDwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPlN1cmZhY2UgaGFiaXRhYmxlIChtwrIpPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+MzggbcKyPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+U3VyZmFjZSBsb2kgQ2FycmV6IChtwrIpPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+Mzg8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5Ob21icmUgZGUgY2hhbWJyZShzKTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjE8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5Ob21icmUgZGUgcGnDqGNlczwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjI8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5FdGFnZTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjc8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5Ob21icmUgZGUgbml2ZWF1eDwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjc8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5Bc2NlbnNldXI8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij5OT048L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5WdWU8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij5kw6lnYWfDqWUgc3VyIHBhcmlzPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSAiIGlkPSJkZXRhaWxzIiByb2xlPSJ0YWJwYW5lbCIgYXJpYS1sYWJlbGxlZGJ5PSJkZXRhaWxzLXRhYiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0ic3Itb25seSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkxhYmVsPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VmFsdWU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+TmIgZGUgc2FsbGUgZGUgYmFpbnM8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij4xPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+Q3Vpc2luZTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPlNFUEFSRUU8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5Nb2RlIGRlIGNoYXVmZmFnZTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPkdBWjwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPlR5cGUgZGUgY2hhdWZmYWdlIDwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPlJBRElBVEVVUjwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPkZvcm1hdCBkZSBjaGF1ZmZhZ2U8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij5DT0xMRUNUSUY8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5JbnRlcnBob25lPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+T1VJPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+VmlzaW9waG9uZTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPk5PTjwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPkJhbGNvbjwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPk5PTjwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPlRlcnJhc3NlPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+Tk9OPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+Q2F2ZTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPk9VSTwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPlN1cmZhY2UgY2F2ZSAobcKyKTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjI8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5FeHBvc2l0aW9uPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+U1VELU9VRVNUPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+QW5uw6llIGRlIGNvbnN0cnVjdGlvbjwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjE5MjA8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItcGFuZSBmYWRlICIgaWQ9ImNvcHJvIiByb2xlPSJ0YWJwYW5lbCIgYXJpYS1sYWJlbGxlZGJ5PSJjb3Byby10YWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtaG92ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InNyLW9ubHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MYWJlbDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlZhbHVlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPmNvcHJvcHJpw6l0w6k8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij5PVUk8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5ub21icmUgZGUgbG90czwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjIzPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+UXVvdGUgUGFydCBhbm51ZWxsZSBkZXMgY2hhcmdlczwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjEgNDIxIOKCrDwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPnBsYW4gZGUgc2F1dmVnYXJkZTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPk5PTjwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPnN0YXR1dCBkdSBzeW5kaWM8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij5wYXMgZGUgcHJvY8OpZHVyZSBlbiBjb3VyczwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iaW5mb3NmaSIgcm9sZT0idGFicGFuZWwiIGFyaWEtbGFiZWxsZWRieT0iaW5mb3NmaS10YWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtaG92ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InNyLW9ubHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MYWJlbDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlZhbHVlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPlByaXggZGUgdmVudGUgaG9ub3JhaXJlcyBUVEMgaW5jbHVzPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+Mzc1IDAwMCDigqw8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj48c3BhbiBjbGFzcz0ic21hbGxpbmZvcyI+UHJpeCBkZSB2ZW50ZSBob25vcmFpcmVzIFRUQyBleGNsdXM8L3NwYW4+PC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+MzU0IDAwMCDigqw8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5Ib25vcmFpcmVzIFRUQyDDoCBsYSBjaGFyZ2UgYWNxdcOpcmV1cjwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjUsOTMgJTwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPkNoYXJnZXM8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij4xMTgg4oKsPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSIgaWQ9ImJpbGFuIiByb2xlPSJ0YWJwYW5lbCIgYXJpYS1sYWJlbGxlZGJ5PSJiaWxhbi10YWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02IGNvbC14cy0xMiB0ZXh0LWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2FkbWluL2RwZS5waHA/bGFuZz1mciZhbXA7aWRhbm49NTc4NyIgYWx0PSJEUEUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYgY29sLXhzLTEyIHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvYWRtaW4vZHBlLnBocD90eXBlPUdFUyZhbXA7bGFuZz1mciZhbXA7aWRhbm49NTc4NyIgYWx0PSJEUEUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSIgaWQ9InNlcnZpY2VzIiByb2xlPSJ0YWJwYW5lbCIgYXJpYS1sYWJlbGxlZGJ5PSJzZXJ2aWNlcy10YWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtaG92ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InNyLW9ubHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MYWJlbDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlZhbHVlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9zZWN0aW9uPg0KICAgICAgICA8c2VjdGlvbiBpZD0ib3V0aWxzIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBuby1ndXR0ZXJzIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNSBjb250YWN0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkNvbnRhY3RlciBsJ2FnZW5jZTwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPScvNTc4Ny1BcHBhcnRlbWVudC1kZS0zOG0tZW4tdmVudGUtZGVybmllci1ldGFnZS1hLVBhcmlzLTE0Lmh0bWwnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im5vbSIgY2xhc3M9InNyLW9ubHkiPk5vbSo8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJkYXRhW0NvbnRhY3RdW25vbV0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJub20iIHJlcXVpcmVkICBwbGFjZWhvbGRlcj0iTm9tKiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InRlbCIgY2xhc3M9InNyLW9ubHkiPlTDqWzDqXBob25lKjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImRhdGFbQ29udGFjdF1bdGVsXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InRlbCIgcmVxdWlyZWQgcGxhY2Vob2xkZXI9IlTDqWzDqXBob25lKiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im1haWwiIGNsYXNzPSJzci1vbmx5Ij5NYWlsKjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im1haWwiIG5hbWU9ImRhdGFbQ29udGFjdF1bZW1haWxdIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0ibWFpbCIgcmVxdWlyZWQgcGxhY2Vob2xkZXI9Ik1haWwqIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibXNnIiBjbGFzcz0ic3Itb25seSI+TWVzc2FnZTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImRhdGFbQ29udGFjdF1bbWVzc2FnZV0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJtc2ciIHBsYWNlaG9sZGVyPSJNZXNzYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXNicnl3IiBzdHlsZT0iZGlzcGxheTpub25lIj4KPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImFzX2R5bmEiIGRhdGEtd2FpdD0iYjg5YmIwMjQ0OGY2ODNhOTdkOTdhMGJhMDM3N2YxMGUiIGRhdGEtb3JpZz0iY2YzZDRhYTM4YzZjOWM2NGQ4N2QwMGVhZDE4MWYzOTUiIGNsYXNzPSJhc19maWVsZCBhc19maWVsZC0yIDIiIHZhbHVlPSJjZjNkNGFhMzhjNmM5YzY0ZDg3ZDAwZWFkMTgxZjM5NSIvPgo8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXNfc3RhdCIgY2xhc3M9ImFzX2ZpZWxkIGFzX2ZpZWxkLTEgMSIgdmFsdWU9IiIvPgo8L2Rpdj4KDQogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkYXRhW2lkYmllbl1bXSIgdmFsdWU9IjU3ODciLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJncGQtY2hlY2tib3giPgogICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJyZ3BkLWFncmVlbWVudCIgaWQ9InJncGQtYWdyZWVtZW50IiAvPgogICAgPGxhYmVsIGZvcj0icmdwZC1hZ3JlZW1lbnQiPkonYWNjZXB0ZSBsZXMgY29uZGl0aW9ucyBkJ3V0aWxpc2F0aW9uIGRlcyBkb25uw6llcyAoKik8L2xhYmVsPgo8L2Rpdj4KPHNjcmlwdD4KICAndXNlIHN0cmljdCc7CgogIChmdW5jdGlvbiAoKSB7CiAgICB2YXIgYWdyZWVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JncGQtYWdyZWVtZW50Jyk7CiAgICB2YXIgZm9ybSA9IGFncmVlbWVudC5jbG9zZXN0KCdmb3JtJyk7CiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBpZiAoIWFncmVlbWVudC5jaGVja2VkKSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICBhbGVydCgiVmV1aWxsZXogYWNjZXB0ZXIgbCd1dGlsaXNhdGlvbiBkZSB2b3MgZG9ubsOpZXMgcG91ciBjb250aW51ZXIuIik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9KTsKICB9KSgpOwo8L3NjcmlwdD4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbG9hdC1yaWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgIj48aSBjbGFzcz0iZmEgZmEtY2hldnJvbi1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gRW52b3lleiBsZSBtZXNzYWdlPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGlkPSJlbWFpbEhlbHAiIGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCB0ZXh0LXJpZ2h0Ij48aT4qIENoYW1wcyBvYmxpZ2F0b2lyZXM8L2k+PC9zbWFsbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZ2FscyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icmdwZC1sZWdhbHMiPiogOiBMZXMgaW5mb3JtYXRpb25zIHJlY3VlaWxsaWVzIHN1ciBjZSBmb3JtdWxhaXJlIHNvbnQgZW5yZWdpc3Ryw6llcyBkYW5zIHVuIGZpY2hpZXIgaW5mb3JtYXRpc8OpIHBhciBMYSBCb2l0ZSBJbW1vIHBvdXIgbGEgZ2VzdGlvbiBkZSBsYSBjbGllbnTDqGxlL3Byb3NwZWN0cyBkZSBTVEkgUGVybmV0eS4KRWxsZXMgc29udCBjb25zZXJ2w6llcyBqdXNxdSfDoCBkZW1hbmRlIGRlIHN1cHByZXNzaW9uIGV0IHNvbnQgZGVzdGluw6llcyDDoCBTVEkgUGVybmV0eS4KQ29uZm9ybcOpbWVudCDDoCBsYSBsb2kgwqsgaW5mb3JtYXRpcXVlIGV0IGxpYmVydMOpcyDCuywgdm91cyBwb3V2ZXogZXhlcmNlciB2b3RyZSBkcm9pdCBkJ2FjY8OocyBhdXggZG9ubsOpZXMgdm91cyBjb25jZXJuYW50IGV0IGxlcyBmYWlyZSByZWN0aWZpZXIgZW4gY29udGFjdGFudCBTVEkgUGVybmV0eS4KTm91cyB2b3VzIGluZm9ybW9ucyBkZSBs4oCZZXhpc3RlbmNlIGRlIGxhIGxpc3RlIGQnb3Bwb3NpdGlvbiBhdSBkw6ltYXJjaGFnZSB0w6lsw6lwaG9uaXF1ZSDCqyBCbG9jdGVsIMK7LCBzdXIgbGFxdWVsbGUgdm91cyBwb3V2ZXogdm91cyBpbnNjcmlyZSBpY2kgOiBodHRwczovL2NvbnNvLmJsb2N0ZWwuZnIvPC9wPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTciPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYXJ0YWdlLW91dGlscyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiZy1wYXJ0YWdlIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPk5vcyBvdXRpbHM8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBmbGV4LWNvbHVtbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQgc2VsZWN0aW9uIj48YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgIHNlbGVjdGlvbi1iaWVuIiBkYXRhLWlkPSI1Nzg3Ij48aSBjbGFzcz0iZmEgZmEtaGVhcnQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9idXR0b24+IDxzcGFuPkFqb3V0ZXIgw6AgbWEgc2VsZWN0aW9uPC9zcGFuPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbGVtZW50Ij48YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNDYWxjdWxldHRlIj48aSBjbGFzcz0iZmEgZmEtY2FsY3VsYXRvciIgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2J1dHRvbj4gPHNwYW4+Q2FsY3VsZXR0ZSBGaW5hbmNpw6hyZTwvc3Bhbj4gPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQiPjxidXR0b24gb25jbGljaz0id2luZG93Lm9wZW4oJy9hZG1pbi9wZGYucGhwP2xhbmc9ZnImaWRhbm49NTc4NyZmaWNoZV90eXBlPXZpc2l0ZSZwZGZfb3JpZW50YXRpb249UCZwZGZfdGVtcGxhdGU9MScpOyByZXR1cm4gZmFsc2U7IiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0Ij48aSBjbGFzcz0iZmEgZmEtcHJpbnQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9idXR0b24+IDxzcGFuPkltcHJpbWVyIGxhIGZpY2hlPC9zcGFuPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBwYXJ0YWdlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+UGFydGFnZXIgbGUgYmllbjwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG5vLWd1dHRlcnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJmYWNlYm9vayIgY2xhc3M9ImVsZW1lbnQgY29sIiBkYXRhLXVybD0iaHR0cDovL3d3dy5zdGktaW1tby5jb20vNTc4Ny1BcHBhcnRlbWVudC1kZS0zOG0tZW4tdmVudGUtZGVybmllci1ldGFnZS1hLVBhcmlzLTE0Lmh0bWwiIGRhdGEtdGl0bGU9IiAiPjxhICBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0Ij48aSBjbGFzcz0iZmEgZmEtZmFjZWJvb2siIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiA8c3Bhbj5GYWNlYm9vazwvc3Bhbj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZ3BsdXMiIGNsYXNzPSJlbGVtZW50IGNvbCIgZGF0YS11cmw9Imh0dHA6Ly93d3cuc3RpLWltbW8uY29tLzU3ODctQXBwYXJ0ZW1lbnQtZGUtMzhtLWVuLXZlbnRlLWRlcm5pZXItZXRhZ2UtYS1QYXJpcy0xNC5odG1sIiBkYXRhLXRpdGxlPSIgIj48YSAgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgPjxpIGNsYXNzPSJmYSBmYS1nb29nbGUtcGx1cyIgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2E+IDxzcGFuPkdvb2dsZSArPC9zcGFuPiA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJ0d2l0dGVyIiBjbGFzcz0iZWxlbWVudCBjb2wiIGRhdGEtdXJsPSJodHRwOi8vd3d3LnN0aS1pbW1vLmNvbS81Nzg3LUFwcGFydGVtZW50LWRlLTM4bS1lbi12ZW50ZS1kZXJuaWVyLWV0YWdlLWEtUGFyaXMtMTQuaHRtbCIgZGF0YS10aXRsZT0iICI+PGEgIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiPjxpIGNsYXNzPSJmYSBmYS10d2l0dGVyIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT4gPHNwYW4+VHdpdHRlcjwvc3Bhbj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudCBjb2wiPjxhIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNzZW5kRnJpZW5kIj48aSBjbGFzcz0iZmEgZmEtZW52ZWxvcGUiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiA8c3Bhbj5FLW1haWw8L3NwYW4+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGlkPSJiaWVuLXN1aXZhbnQiIGNsYXNzPSJkLXhzLWRvd24tbm9uZSI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04IGNvbC1tZC0xMiBjb2wteGwtNiBtLWF1dG8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04IGNvbC1tZC0xMiBjb2wteGwtNiBtLWF1dG8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGlkPSJCaWdEYXRhIj4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0idGV4dC1jZW50ZXIiPjxpIGNsYXNzPSJkLXNtLWRvd24tbm9uZSBpY29uLXRyYWl0LWdhdWNoZSI+PC9pPkxhIHZpbGxlIGRlIFBhcmlzPGkgY2xhc3M9ImQtc20tZG93bi1ub25lIGljb24tdHJhaXQtZHJvaXRlIj48L2k+PC9oMT4KPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im1hcGJpZ2RhdGEiPgogICAgICAgICAgICA8ZGl2IGlkPSJtYXBJbmZvc0NpdHkiIGNsYXNzPSJtYXAtaW5mb3MtY2l0eSI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1iaWdkYXRhIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFwLWJ1dHRvbnMgcm93Ij48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIAo8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgPC9zZWN0aW9uPg0KPC9kaXY+DQoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBzaW1pbGFpcmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRleHQtY2VudGVyIj48aSBjbGFzcz0iZC1zbS1kb3duLW5vbmUgaWNvbi10cmFpdC1nYXVjaGUiPjwvaT5MZXMgYmllbnMgcXVpIHBvdXJyYWllbnQgdm91cyBpbnTDqXJlc3NlcjxpIGNsYXNzPSJkLXNtLWRvd24tbm9uZSBpY29uLXRyYWl0LWRyb2l0ZSI+PC9pPjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNhcm91c2VsRXhhbXBsZUNvbnRyb2xzIiBjbGFzcz0iY2Fyb3VzZWwgc2xpZGUiIGRhdGEtcmlkZT0iY2Fyb3VzZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWlubmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICBhY3RpdmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLXNtLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlndXJlIG9uY2xpY2s9ImxvY2F0aW9uLmhyZWY9Jy81NjM5LU1ldHJvLXBlcm5ldHktMlAuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vNTAweDUwMC9pbWFnZXMvYmllbnMvMS81YzU3YTViNjY1ZmJkYWY4MDY4YTE2OTVkMGE0NzljNy9vcmlnaW5hbC9waG90b19kMzYxMDRhNjZjZjg2ZWNlYTFmNTE5ZGZmZDY0NDk3Yy5qcGciIGNsYXNzPSJjYXJkLWltZy10b3AiIGFsdD0iIiB3aWR0aD0iNTAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlnY2FwdGlvbiBjbGFzcz0idGV4dCI+RW4gc2F2b2lyIHBsdXM8L2ZpZ2NhcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSIgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU2MzktTWV0cm8tcGVybmV0eS0yUC5odG1sJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQiPkFwcGFydGVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGUgMjguMTYgbSZzdXAyOyA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMiBwacOoY2VzIC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3NDUtU1RVRElPLUVOLUVYQ0xVU0lWSVRFLVFVQVJUSUVSLURFLUwtT0JTRVJWQVRPSVJFLmh0bWwnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9zdGktaW1tby5zdGF0aWNsYmkuY29tLzUwMHg1MDAvaW1hZ2VzL2JpZW5zLzMvYjEzZjkxYjhlY2RjZjhkYWUwNjJkOGYyMmFkZTc2OGYvb3JpZ2luYWwvcGhvdG9fNDI0MjM5ZGU1MTRlMzhhNTFjOTg1MzczNTc1MWJmZWEuanBnIiBjbGFzcz0iY2FyZC1pbWctdG9wIiBhbHQ9IiIgd2lkdGg9IjUwMCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdmVybGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ2NhcHRpb24gY2xhc3M9InRleHQiPkVuIHNhdm9pciBwbHVzPC9maWdjYXB0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiIG9uY2xpY2s9ImxvY2F0aW9uLmhyZWY9Jy81NzQ1LVNUVURJTy1FTi1FWENMVVNJVklURS1RVUFSVElFUi1ERS1MLU9CU0VSVkFUT0lSRS5odG1sJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQiPlN0dWRpbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlIDI3IG0mc3VwMjsgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgcGnDqGNlIC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3NTctTWFnbmlmaXF1ZS1zdHVkaW8tYXZlYy1tZXp6YW5pbmUtcmVmYWl0LWEtbmV1Zi12ZW5kdS1tZXVibGUtUXVhcnRpZXItZGVzLUFudGlxdWFpcmVzLVByb2NoZS1TZWluZS1KYXJkaW4tZGUuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vNTAweDUwMC9pbWFnZXMvYmllbnMvMi80Zjk1MTYxYzRmNTNhNGMxYmZjMmM4MDQ5ZTIzMDMwYi9vcmlnaW5hbC9waG90b18wNTc2YTE3OGQ4ZmM1ODJkYTYwNWYyMDRiMWMzNmIxOC5qcGciIGNsYXNzPSJjYXJkLWltZy10b3AiIGFsdD0iIiB3aWR0aD0iNTAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlnY2FwdGlvbiBjbGFzcz0idGV4dCI+RW4gc2F2b2lyIHBsdXM8L2ZpZ2NhcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSIgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3NTctTWFnbmlmaXF1ZS1zdHVkaW8tYXZlYy1tZXp6YW5pbmUtcmVmYWl0LWEtbmV1Zi12ZW5kdS1tZXVibGUtUXVhcnRpZXItZGVzLUFudGlxdWFpcmVzLVByb2NoZS1TZWluZS1KYXJkaW4tZGUuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij5BcHBhcnRlbWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlIDIxIG0mc3VwMjsgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgcGnDqGNlIC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3NzItQXBwYXJ0ZW1lbnQtMi1waWVjZXMtdmF2aW4tZWRnYXItcXVpbmV0Lmh0bWwnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9zdGktaW1tby5zdGF0aWNsYmkuY29tLzUwMHg1MDAvaW1hZ2VzL2JpZW5zLzIvZTcwZmVmOGJkZjc0NzllOTE3YmU5MWYxMTYzOGYwYzYvb3JpZ2luYWwvcGhvdG9fODVhODQ2NWExYjZmYjljMWJlMjFkMTY3OGQwMDEwNDEuanBnIiBjbGFzcz0iY2FyZC1pbWctdG9wIiBhbHQ9IiIgd2lkdGg9IjUwMCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdmVybGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ2NhcHRpb24gY2xhc3M9InRleHQiPkVuIHNhdm9pciBwbHVzPC9maWdjYXB0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiIG9uY2xpY2s9ImxvY2F0aW9uLmhyZWY9Jy81NzcyLUFwcGFydGVtZW50LTItcGllY2VzLXZhdmluLWVkZ2FyLXF1aW5ldC5odG1sJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQiPkFwcGFydGVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGUgMzEgbSZzdXAyOyA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMiBwacOoY2VzIC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3NzQtMi1waWVjZXMtYXUtZGVybmllci1ldGFnZS1lbi1FeGNsdXNpdml0ZS5odG1sJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS81MDB4NTAwL2ltYWdlcy9iaWVucy82L2I3ZDk0YTI2ZTJkZDRlNjRkNjFmYWQ4NzZmYTJiYWNiL29yaWdpbmFsL3Bob3RvX2ZmNmQzMzg5NWVjYmQ5MTkwNWI2MmIxNWE2ODBjZGFjLmpwZyIgY2xhc3M9ImNhcmQtaW1nLXRvcCIgYWx0PSIiIHdpZHRoPSI1MDAiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib3ZlcmxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWdjYXB0aW9uIGNsYXNzPSJ0ZXh0Ij5FbiBzYXZvaXIgcGx1czwvZmlnY2FwdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmlndXJlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IiBvbmNsaWNrPSJsb2NhdGlvbi5ocmVmPScvNTc3NC0yLXBpZWNlcy1hdS1kZXJuaWVyLWV0YWdlLWVuLUV4Y2x1c2l2aXRlLmh0bWwnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGV4dCI+QXBwYXJ0ZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZSAzMiBtJnN1cDI7IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIHBpw6hjZXMgLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDwvc2VjdGlvbj4KICAgIDwvYXJ0aWNsZT4KCgoKICAgIDxmb290ZXIgaWQ9ImZvb3RlcjEiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBmb290ZXItbGluayB0ZXh0LW1kLWNlbnRlci1pbnZlcnNlIj4gDQogICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY29weXJpZ2h0Ij7CqSAyMDIwIHwgVG91cyBkcm9pdHMgcsOpc2VydsOpcyAgLSBUcmFkdWN0aW9uIHBvd2VyZWQgYnkgR29vZ2xlIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wbGFuLWR1LXNpdGUuaHRtbCIgPlBsYW4gZHUgc2l0ZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iL2kvcmVkYWMvbGVnYWxzIiA+TWVudGlvbnMgbMOpZ2FsZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Ii9pL3JlZGFjL2hvbm9yYWlyZXMiID5Ob3MgaG9ub3JhaXJlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iL25vcy1saWVucy5odG1sIiA+TGllbnM8L2E+IA0KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSIvYWRtaW4vIiB0YXJnZXQ9Il9ibGFuayIgPkFkbWluPC9hPiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Ii90b3V0ZXMtbm9zLWFubm9uY2VzLmh0bWwiID5Ub3V0ZXMgbm9zIGFubm9uY2VzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCBmb290ZXItbGluay0yIHRleHQtbWQtY2VudGVyLWludmVyc2UiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbm8tZ3V0dGVycyI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtIGVzcGFjZS1wcm8gbm8tcGFkLXJpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+U2UgY29ubmVjdGVyPGkgY2xhc3M9Imljb24tdHJhaXQtZHJvaXRlIj48L2k+PC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hZG1pbi9lc3BhY2VfcHJvcHJpZXRhaXJlLnBocCIgdGFyZ2V0PSJibGFuayI+PGkgY2xhc3M9ImZhIGZhLTJ4IGZhLXNpZ24taW4iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+IEVzcGFjZSBwcm9wcmnDqXRhaXJlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbSBwYXJ0cyBuby1wYWQtcmlnaHQgIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+QWRow6lyZW50PGkgY2xhc3M9Imljb24tdHJhaXQtZHJvaXRlIj48L2k+PC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5mbmFpbS5mci8iIHRhcmdldD0iX2JsYW5rIj48aW1nIHNyYz0iaW1hZ2VzL2ZuYWltLnBuZyIgYWx0PSIiPjwvYT4gIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9mb290ZXI+CgoKCgoKPCEtLTxzY3JpcHQgc3JjPSJodHRwczovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMy4yLjEubWluLmpzIiBpbnRlZ3JpdHk9InNoYTI1Ni1od2c0Z3N4Z0ZaaE9zRUVhbWRPWUdCZjEzRnlRdWlUd2xBUWd4VlNOZ3Q0PSIgY3Jvc3NvcmlnaW49ImFub255bW91cyI+PC9zY3JpcHQ+LS0+CjxzY3JpcHQgc3JjPSJodHRwczovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjEwLjEvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9qcXVlcnl1aS8xLjEyLjEvanF1ZXJ5LXVpLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9qYXJhbGxheC8xLjkuMC9qYXJhbGxheC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvamFyYWxsYXgvMS45LjAvamFyYWxsYXgtZWxlbWVudC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvamFyYWxsYXgvMS45LjAvamFyYWxsYXgtdmlkZW8ubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3BvcHBlci5qcy8xLjEyLjMvdW1kL3BvcHBlci5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvNC4wLjAtYmV0YS4yL2pzL2Jvb3RzdHJhcC5taW4uanMiIGludGVncml0eT0ic2hhMzg0LWFscEJwa2gxUEZPZXBjY1lWWURCNGRvNVVuYkt5c1g1V1pYbTNYeFBxZTVpS1RmVUtqTmtDazlTYVZ1RVpmbEoiIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvYm9vdHN0cmFwLXNlbGVjdC8xLjEyLjQvanMvYm9vdHN0cmFwLXNlbGVjdC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvYm9keW1vdmluLzQuMTEuMS9ib2R5bW92aW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvU2hhcnJyZS8xLjMuNS9qcXVlcnkuc2hhcnJyZS5taW4uanMiPjwvc2NyaXB0PgoKPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2FuaW1lanMvMi4yLjAvYW5pbWUubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3Njcm9sbG1vbml0b3IvMS4yLjAvc2Nyb2xsTW9uaXRvci5qcyI+PC9zY3JpcHQ+Cgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvanZlY3Rvcm1hcC8yLjAuNC9qcXVlcnktanZlY3Rvcm1hcC5taW4uanMiPjwvc2NyaXB0PgoKPHNjcmlwdD4KalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewogICAgICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLm9uKCdzdWJtaXQnLCAnZm9ybScsIGZ1bmN0aW9uKCl7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIG15Zm9ybSA9IGpRdWVyeSh0aGlzKTsKICAgICAgICAgICAgICAgIHZhciBhcyA9IGpRdWVyeSgnLmFzYnJ5dycsIG15Zm9ybSk7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYoYXMubGVuZ3RoKXsgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHZhciBkeW5hbWljID0galF1ZXJ5KCcuMicsIGFzKTsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudHZhbHVlID0gZHluYW1pYy52YWwoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ3ZhbHVlID0gZHluYW1pYy5hdHRyKCdkYXRhLW9yaWcnKTsKICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50dmFsdWUgPT09IG9yaWd2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2FpdGVkdmFsdWUgPSBkeW5hbWljLmF0dHIoJ2RhdGEtd2FpdCcpOwogICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljLnZhbCh3YWl0ZWR2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwo8L3NjcmlwdD4KCg0KDQo8c2NyaXB0Pg0KICAgICQoJy5jb2wtc20ucGFydHMubm8tcGFkLXJpZ2h0IGEgJykuYXR0cigndGFyZ2V0JywnYmxhbmsnKTsNCjwvc2NyaXB0Pg0KDQoNCgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbGlnaHRnYWxsZXJ5LzEuNi4wL2pzL2xpZ2h0Z2FsbGVyeS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbGlnaHRzbGlkZXIvMS4xLjYvanMvbGlnaHRzbGlkZXIubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL093bENhcm91c2VsMi8yLjMuNC9vd2wuY2Fyb3VzZWwubWluLmpzIj48L3NjcmlwdD4KCjxzY3JpcHQ+CiAgICAKPC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvanMvYnVpbGRfM2FlNjM0NzZlNmZjOWZiZWZhNzM0YzFhZTIyMzVlMWYuanMiID48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Ii9qcy9idWlsZF8yNjg1MWYyMjA2NDU5NmU0ZDAzODcwNGI3MWQ5MjUzMC5qcyIgPjwvc2NyaXB0PgoKCgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgCiAgICAgICAgIC8qKioqKioqKioqKiBiaWVuIGNvbmZpZyBvcHRpb24gZ2VvbG9jICoqKioqKioqKioqIC8KICAgICAgICAgICoKICAgICAgICAgICogQHR5cGUgQXJyYXl8QXJyYXkKICAgICAgICAgICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJzID0ge307CiAgICAgICAgdmFyIG1hcDsKICAgICAgICB2YXIgaXNNYXBEcmFnZ2luZzsKICAgICAgICB2YXIgaWRsZVNraXBwZWQ7CiAgICAgICAgdmFyIHZpc2libGU7CiAgICAgICAgdmFyIHRyYW5zbGF0ZXMgPSB7fTsKICAgICAgICB2YXIgZ2VvY29kZXI7CgogICAgICAgIHZhciBjb2xvck1hcmtlcnM7CiAgICAgICAgIAoKCiAgICAgICAgZnVuY3Rpb24gZ2V0TWFwKE1hcCl7CgogICAgICAgICAgICB2YXIgbWFwID0gTWFwLm1hcDsKICAgICAgICAgICAgb3B0aW9uc0NpcmNsZSA9IHsKICAgICAgICAgICAgICAgIG1hcDogbWFwLAogICAgICAgICAgICAgICAgY2VudGVyOiB7IGxhdCA6IDQ4LjgzMDU5MzEwOSAsIGxuZzogIDIuMzExOTg1OTcgfSwKICAgICAgICAgICAgICAgIHJhZGl1czogMTUwLAogICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjZmZmMDExJywKICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDAuOCwKICAgICAgICAgICAgICAgIHN0cm9rZVdlaWdodDogMSwKICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmZmYwMTEnLAogICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuMzUKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hcC5zZXRDZW50ZXIobWFwLCB7IGxhdDogNDguODMwNTkzMTA5LCBsbmc6IDIuMzExOTg1OTcgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlcyA9IE1hcC5jcmVhdGVDaXJjbGUob3B0aW9uc0NpcmNsZS5jZW50ZXIsIG9wdGlvbnNDaXJjbGUpOwogICAgICAgICAgICAgICAgICAgICAgICBNYXAuYWRkTWFya2VyKE1hcC5tYXAsIGNpcmNsZXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZExpc3RlbmVycyhNYXApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWRkTGlzdGVuZXJzKE1hcCl7CiAgICAgICAgICBNYXAuc2V0TWluWm9vbShNYXAubWFwLCAxMik7CiAgICAgICAgICBjYWxsTWFya2VycyhNYXApOwogICAgICAgICAgTWFwLmFkZE1hcExpc3RlbmVyKE1hcC5tYXAsICdpZGxlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmIChpc01hcERyYWdnaW5nKSB7CiAgICAgICAgICAgICAgaWRsZVNraXBwZWQgPSB0cnVlOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZGxlU2tpcHBlZCA9IGZhbHNlOwogICAgICAgICAgICBjYWxsTWFya2VycyhNYXApOwogICAgICAgICAgfSk7CiAgICAgICAgICBNYXAuYWRkTWFwTGlzdGVuZXIoTWFwLm1hcCwgJ2RyYWdzdGFydCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaXNNYXBEcmFnZ2luZyA9IHRydWU7CiAgICAgICAgICB9KTsKICAgICAgICAgIE1hcC5hZGRNYXBMaXN0ZW5lcihNYXAubWFwLCAnZHJhZ2VuZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpc01hcERyYWdnaW5nID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChpZGxlU2tpcHBlZCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgIGNhbGxNYXJrZXJzKE1hcCk7CiAgICAgICAgICAgICAgaWRsZVNraXBwZWQgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gY2FsbE1hcmtlcnMoTWFwKXsKICAgICAgICAgICAgdmFyIGJvdW5kcyA9IE1hcC5nZXRCb3VuZHMoTWFwLm1hcCk7CiAgICAgICAgICAgIHZhciBib3VuZHNDb29yZHMgPSBNYXAuZ2V0TGF0TG5nTWluTWF4KGJvdW5kcyk7CiAgICAgICAgICAgIHZhciBteEx0ID0gYm91bmRzQ29vcmRzLmxhdC5tYXg7CiAgICAgICAgICAgIHZhciBtbkx0ID0gYm91bmRzQ29vcmRzLmxhdC5taW47CiAgICAgICAgICAgIHZhciBteExnID0gYm91bmRzQ29vcmRzLmxuZy5tYXg7CiAgICAgICAgICAgIHZhciBtbkxnID0gYm91bmRzQ29vcmRzLmxuZy5taW47CiAgICAgICAgICAgICQuZ2V0KCIvaS9wb2kvZ2V0UG9pQmV0d2Vlbj9taW5MYXQ9Iittbkx0KyImbWF4TGF0PSIrbXhMdCsiJm1pbkxuZz0iK21uTGcrIiZtYXhMbmc9IitteExnKS5kb25lKGZ1bmN0aW9uKGpzb25NYXJrZXJzKXsKICAgICAgICAgICAgICAgIGlmKGpzb25NYXJrZXJzID09PSBudWxsKXsKICAgICAgICAgICAgICAgICAgICBqc29uTWFya2VycyA9IFtdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2xlYW5NYXJrZXJzKCk7CiAgICAgICAgICAgICAgICBhZGRNYXJrZXJzKGpzb25NYXJrZXJzLCBNYXApOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGNsZWFuTWFya2VycygpewogICAgICAgICAgICB2aXNpYmxlID0gW107CiAgICAgICAgICAgIGZvcihrZXkgaW4gbWFya2Vycyl7CiAgICAgICAgICAgICAgICBpZihtYXJrZXJzLmhhc093blByb3BlcnR5KGtleSkpewogICAgICAgICAgICAgICAgICAgICQuZWFjaChtYXJrZXJzW2tleV0sIGZ1bmN0aW9uKGssIG1hcmtlcil7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgTWFwID0gbWFya2VyLmRhdGFDb250YWluZXIuTWFwOwogICAgICAgICAgICAgICAgICAgICAgICBpZihtYXJrZXIuZGF0YUNvbnRhaW5lci5tYXAgIT09IG51bGwgJiYgdmlzaWJsZS5pbmRleE9mKGtleSk8MCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlLnB1c2goa2V5KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBNYXAucmVtb3ZlTWFya2VyKE1hcC5tYXAsIG1hcmtlcik7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlci5kYXRhQ29udGFpbmVyLm1hcCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc1trZXldID0gW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZnVuY3Rpb24gYWRkTWFya2Vycyhqc29uTWFya2VycywgTWFwKXsKICAgICAgICAgICAgJC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbigpewogICAgICAgICAgICAgIHZhciBtYXJrZXJEYXRhID0gdGhpczsKICAgICAgICAgICAgICBpZighbWFya2Vycy5oYXNPd25Qcm9wZXJ0eSh0aGlzLm5vbSkpewogICAgICAgICAgICAgICAgbWFya2Vyc1t0aGlzLm5vbV0gPSBbXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0geyBsYXQ6IG1hcmtlckRhdGEueSwgbG5nOiBtYXJrZXJEYXRhLnh9OwogICAgICAgICAgICAgIHZhciBtYXBNYXJrZXIgPSB2aXNpYmxlLmluZGV4T2YodGhpcy5ub20pPj0wID8gTWFwLm1hcCA6IG51bGw7CiAgICAgICAgICAgICAgdHJhbnNsYXRlc1t0aGlzLm5vbV0gPSB0aGlzLnRyYW5zbGF0ZTsKICAgICAgICAgICAgICB2YXIgbWFya2VyT3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRyYW5zbGF0ZSwKICAgICAgICAgICAgICAgIGljb246IE1hcC5jcmVhdGVJY29uKCcvaS9wb2kvZ2V0SWNvbk1hcD90eXBlPXByZDJfJyt0aGlzLm5vbSkKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBNYXAuY3JlYXRlTWFwTWFya2VyKHBvc2l0aW9uLCBtYXJrZXJPcHRpb25zLCB7CiAgICAgICAgICAgICAgICBtYXA6IG1hcE1hcmtlciwKICAgICAgICAgICAgICAgIE1hcDogTWFwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgaWYgKHZpc2libGUuaW5kZXhPZih0aGlzLm5vbSk+PTApIHsKICAgICAgICAgICAgICAgIE1hcC5hZGRNYXJrZXIoTWFwLm1hcCwgbWFya2VyKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbWFya2Vyc1t0aGlzLm5vbV0ucHVzaChtYXJrZXIpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEJ1dHRvbnMoKTsKICAgICAgICB9CiAgICAgICAgCgogICAgICAgIGZ1bmN0aW9uIGFkZEJ1dHRvbnMoKXsKICAgICAgICAgICAgJCgiLm1hcC1idXR0b25zIikuZW1wdHkoKTsKICAgICAgICAgICAgJC5lYWNoKG1hcmtlcnMsIGZ1bmN0aW9uKGssIG1rcyl7CiAgICAgICAgICAgICAgICBpZihta3MubGVuZ3RoID4gMCl7CiAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmlzaWJsZSA9ICh2aXNpYmxlLmluZGV4T2YoaykgPiAtMSk7CiAgICAgICAgICAgICAgICAgICAgYWRkVHlwZUJ1dHRvbihrLCBpc1Zpc2libGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgCiAgICBmdW5jdGlvbiBzaG93SGlkZU1hcmtlcnModHlwZSxmb3JjZWQpewogICAgICAgIGlmKG1hcmtlcnMuaGFzT3duUHJvcGVydHkodHlwZSkpewogICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbWFya2Vyc1t0eXBlXS5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgIGlmKG1hcmtlcnNbdHlwZV1baV0uZGF0YUNvbnRhaW5lci5tYXAgPT09IG51bGwgKXsKICAgICAgICAgICAgICAgICAgICBtYXJrZXJzW3R5cGVdW2ldLmRhdGFDb250YWluZXIubWFwID0gbWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLk1hcC5tYXA7CiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLk1hcC5hZGRNYXJrZXIobWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLm1hcCwgbWFya2Vyc1t0eXBlXVtpXSk7CiAgICAgICAgICAgICAgICAgICBjb2xvclR5cGUodHlwZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgbWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLk1hcC5yZW1vdmVNYXJrZXIobWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLm1hcCwgbWFya2Vyc1t0eXBlXVtpXSk7CiAgICAgICAgICAgICAgICAgbWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLm1hcCA9IG51bGw7CiAgICAgICAgICAgICAgICAgaWYoIWZvcmNlZCl7CiAgICAgICAgICAgICAgICAgICBjb2xvclR5cGUodHlwZSwgZmFsc2UpOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICBjb2xvclR5cGUodHlwZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgICAgIAogICAgdmFyIGNoZWNrZWRUeXBlID0gW107CiAgICBmdW5jdGlvbiBzZXRDaGVja2VkVHlwZSh0YWIpeyAgICAgICAKICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJjaGVja2VkVHlwZSIsSlNPTi5zdHJpbmdpZnkodGFiKSk7CiAgICB9CiAgICBmdW5jdGlvbiBhZGRDaGVja2VkVHlwZSh0eXBlKXsKICAgICAgICB2YXIgY2hlY2tlZFR5cGUgPSBnZXRDaGVja2VkVHlwZSgpOwogICAgICAgIGlmKGNoZWNrZWRUeXBlLmluZGV4T2YodHlwZSkgPT09IC0xKXsKICAgICAgICAgICAgY2hlY2tlZFR5cGUucHVzaCh0eXBlKTsKICAgICAgICAgICAgc2V0Q2hlY2tlZFR5cGUoY2hlY2tlZFR5cGUpOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIHJlbW92ZUNoZWNrZWRUeXBlKHR5cGUpeyAKICAgICAgICB2YXIgY2hlY2tlZFR5cGUgPSBnZXRDaGVja2VkVHlwZSgpOwogICAgICAgIGlmKGNoZWNrZWRUeXBlLmluZGV4T2YodHlwZSkgIT0gLTEpewogICAgICAgICAgIGNoZWNrZWRUeXBlLnNwbGljZShjaGVja2VkVHlwZS5pbmRleE9mKHR5cGUpLCAxKTsgICAgICAgICAgICAgCiAgICAgICAgICAgc2V0Q2hlY2tlZFR5cGUoY2hlY2tlZFR5cGUpOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGdldENoZWNrZWRUeXBlKCl7CiAgICAgICAganNvbl90YWIgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJjaGVja2VkVHlwZSIpOwogICAgICAgIHRhYiA9IEpTT04ucGFyc2UoanNvbl90YWIpOwogICAgICAgIGlmKCF0YWIpewogICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHRhYjsKICAgICAgICB9ICAgICAgICAKICAgIH0KICAgIGZ1bmN0aW9uIGluaXRDaGVja2VkVHlwZSgpewogICAgICAgIGlmKHR5cGVvZiBzZXNzaW9uU3RvcmFnZSA9PT0gJ3VuZGVmaW5lZCcpIHsgICAgICAgICAgICAgIAogICAgICAgICAgICBjb25zb2xlLmxvZygic2Vzc2lvblN0b3JhZ2Ugbidlc3QgcGFzIHN1cHBvcnTDqSIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmKCFnZXRDaGVja2VkVHlwZSgpKSB7CiAgICAgICAgICAgICAgICB2YXIgY2hlY2tlZFR5cGUgPSBbXTsKICAgICAgICAgICAgICAgIHNldENoZWNrZWRUeXBlKGNoZWNrZWRUeXBlKTsKICAgICAgICAgICAgfSAgCiAgICAgICAgfSAgICAgICAgCiAgICB9CiAgICBpbml0Q2hlY2tlZFR5cGUoKTsKICAgIGZ1bmN0aW9uIGFkZFR5cGVCdXR0b24odHlwZSwgaXNWaXNpYmxlKXsKICAgICAgICB2YXIgaWNvbiA9IHR5cGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csICcnKS5yZXBsYWNlKC9bw6jDqcOqw6tdL2csImUiKTsKICAgICAgICBpZiAoaWNvbiA9PSAnYmFyJyl7CiAgICAgICAgICAgIGljb24gPSAidmVycmUiOwogICAgICAgIH0KICAgICAgICAvLyQoJy5tYXAtYnV0dG9ucycpLmFwcGVuZCgnIDxkaXYgY2xhc3M9Im1hcC1idXR0b24iIHJlbD0iJyt0eXBlKyciPiA8c3BhbiBjbGFzcz0iaWNvbi0nK2ljb24rJyBpY29uLWJ0biI+PC9zcGFuPiA8c3BhbiBjbGFzcz0idGVybS1idG4iIGRhdGEtdmlzaWJsZSA9ICcraXNWaXNpYmxlKyc+ICcrdHJhbnNsYXRlc1t0eXBlXSsnIDwvc3Bhbj4gPC9kaXY+ICcpOwogICAgICAgICQoJy5tYXAtYnV0dG9ucycpLmFwcGVuZCgnPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLXNtLTQgY29sLXhzLTEyIj48aSBjbGFzcz0iaWNvbi0nK2ljb24rJyI+PC9pPjxsYWJlbCBjbGFzcz0iY29udHJvbCBjb250cm9sLWNoZWNrYm94Ij4nK3RyYW5zbGF0ZXNbdHlwZV0rJzxpbnB1dCBjbGFzcz0ibWFwLWJ1dHRvbiIgcmVsPSInK3R5cGUrJyIgdHlwZT0iY2hlY2tib3giIGNoZWNrZWQ9ImNoZWNrZWQiIC8+IDxkaXYgY2xhc3M9ImNvbnRyb2xfaW5kaWNhdG9yIiByZWw9IicrdHlwZSsnIj48L2Rpdj48L2xhYmVsPjwvZGl2PicpOwogICAgICAgIHZhciBjaGVja2VkVHlwZSA9IGdldENoZWNrZWRUeXBlKCk7CiAgICAgICAgaWYoY2hlY2tlZFR5cGUuaW5kZXhPZih0eXBlKSAhPSAtMSl7CiAgICAgICAgICAgIHNob3dIaWRlTWFya2Vycyh0eXBlLHRydWUpOwogICAgICAgIH0KICAgIH0KCiAgICAgICAgCiAgICBmdW5jdGlvbiBjb2xvclR5cGUodHlwZSwgc2hvdyl7CiAgICAgICAgdmFyIHRhcmdldCA9ICQoJy5tYXAtYnV0dG9uW3JlbD0iJyt0eXBlKyciXScpOwogICAgICAgIHZhciBjaGVja2JveCA9ICQoJy5jb250cm9sX2luZGljYXRvcltyZWw9IicrdHlwZSsnIl0nKTsKICAgICAgICBpZihzaG93KXsKICAgICAgICAgICAgdGFyZ2V0LmF0dHIoJ2RhdGEtdmlzaWJsZScsIHRydWUpOwogICAgICAgICAgICBjaGVja2JveC5hZGRDbGFzcygnY2hlY2tlZCcpOwogICAgICAgICAgICBhZGRDaGVja2VkVHlwZSh0eXBlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0YXJnZXQuYXR0cignZGF0YS12aXNpYmxlJywgZmFsc2UpOwogICAgICAgICAgICBjaGVja2JveC5yZW1vdmVDbGFzcygnY2hlY2tlZCcpOwogICAgICAgICAgICByZW1vdmVDaGVja2VkVHlwZSh0eXBlKTsKICAgICAgICB9CiAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFwcCAoKXsKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJC5nZXRTY3JpcHQoJy9pL2pzb24vZ2V0TGJpbWFwc0xpYicsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkLmFqYXgoJy9pL2pzb24vZ2V0QXBpS2V5cz90eXBlPWRldGFpbCcpLmRvbmUoZnVuY3Rpb24gKGFwaUtleXMpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm92aWRlciA9ICdqYXdnJzsKICAgICAgICAgICAgICAgICAgICAKdmFyIHN0eWxlcyA9IFsKICAgICAgICB7CiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAiZ2VvbWV0cnkiLAogICAgICAgICAgInN0eWxlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiY29sb3IiOiAiI2Y1ZjVmNSIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImVsZW1lbnRUeXBlIjogImxhYmVscy5pY29uIiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInZpc2liaWxpdHkiOiAib2ZmIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAibGFiZWxzLnRleHQuZmlsbCIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjNjE2MTYxIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAibGFiZWxzLnRleHQuc3Ryb2tlIiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiNmNWY1ZjUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmZWF0dXJlVHlwZSI6ICJhZG1pbmlzdHJhdGl2ZS5sYW5kX3BhcmNlbCIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAibGFiZWxzLnRleHQuZmlsbCIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjYmRiZGJkIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAicG9pIiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJnZW9tZXRyeSIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjZWVlZWVlIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAicG9pIiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJsYWJlbHMudGV4dC5maWxsIiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiM3NTc1NzUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmZWF0dXJlVHlwZSI6ICJwb2kucGFyayIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAiZ2VvbWV0cnkiLAogICAgICAgICAgInN0eWxlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiY29sb3IiOiAiI2U1ZTVlNSIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZlYXR1cmVUeXBlIjogInBvaS5wYXJrIiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJsYWJlbHMudGV4dC5maWxsIiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiM5ZTllOWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmZWF0dXJlVHlwZSI6ICJyb2FkIiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJnZW9tZXRyeSIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjZmZmZmZmIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAicm9hZC5hcnRlcmlhbCIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAibGFiZWxzLnRleHQuZmlsbCIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjNzU3NTc1IgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAicm9hZC5oaWdod2F5IiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJnZW9tZXRyeSIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjZGFkYWRhIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAicm9hZC5oaWdod2F5IiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJsYWJlbHMudGV4dC5maWxsIiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiM2MTYxNjEiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmZWF0dXJlVHlwZSI6ICJyb2FkLmxvY2FsIiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJsYWJlbHMudGV4dC5maWxsIiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiM5ZTllOWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmZWF0dXJlVHlwZSI6ICJ0cmFuc2l0LmxpbmUiLAogICAgICAgICAgImVsZW1lbnRUeXBlIjogImdlb21ldHJ5IiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiNlNWU1ZTUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmZWF0dXJlVHlwZSI6ICJ0cmFuc2l0LnN0YXRpb24iLAogICAgICAgICAgImVsZW1lbnRUeXBlIjogImdlb21ldHJ5IiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiNlZWVlZWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmZWF0dXJlVHlwZSI6ICJ3YXRlciIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAiZ2VvbWV0cnkiLAogICAgICAgICAgInN0eWxlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiY29sb3IiOiAiI2M5YzljOSIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZlYXR1cmVUeXBlIjogIndhdGVyIiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJsYWJlbHMudGV4dC5maWxsIiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiM5ZTllOWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF07CgogICAgdmFyIG1hcE9wdGlvbnMgPSB7CiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZSwKICAgICAgICAgICAgc2Nyb2xsd2hlZWw6IGZhbHNlLAogICAgICAgICAgICBkaXNhYmxlRGVmYXVsdFVJOiB0cnVlLAogICAgICAgICAgICBzdHlsZXM6c3R5bGVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbSA6IDE0ICwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblpvb20gOiAxMiAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYW5Db250cm9sIDogMSAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZUNvbnRyb2wgOiAxICwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb21Db250cm9sIDogMSAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgfSwgbWFwT3B0aW9ucywgewogICAgICAgICAgICAgICAgICAgICAgICBtYXBDb250YWluZXI6ICcjbWFwSW5mb3NDaXR5JywKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IGFwaUtleXNbcHJvdmlkZXJdLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogd2luZG93LmdldE1hcAogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICBsYmltYXBzLmNhbGxiYWNrKGxiaW1hcHMucHJvdmlkZXJzW3Byb3ZpZGVyXSkob3B0aW9ucykKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCIubWFwLWJ1dHRvbiIsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSAkKHRoaXMpLmF0dHIoInJlbCIpOwogICAgICAgICAgICAgICAgICAgIHNob3dIaWRlTWFya2Vycyh0eXBlKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgICAgIGFwcCgpOwogICAgICAgIAoKICAgICAgICAKICAgIDwvc2NyaXB0PgoKCiAgICA8c2NyaXB0IHNyYz0iL2pzL2J1aWxkXzgyODc2Y2JhNTZhNjViODkyNDJlYzQyOGJlMmE4OWUyLmpzIiBkYXRhLW1vZGVsPSdwcmQyJyBpZD0nbW90ZXVySlMnPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Ii9qcy9idWlsZF8xZGUyMTZjNmQyNTdiMWJhMGVjNzVmZDc1OTVlNDRkNS5qcyIgPjwvc2NyaXB0PgogICAgCiAgICAgICAgICAgIAoKCgoKCjwvYm9keT4KPC9odG1sPg==
    http_version: null
  recorded_at: Thu, 09 Apr 2020 14:32:42 GMT
- request:
    method: get
    uri: http://www.sti-immo.com/5786-STUDIO-MEUBLE-EN-EXCLUSIVITE.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 09 Apr 2020 14:32:42 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200409.rev1
      Set-Cookie:
      - PHPSESSID=2nesan80683b4tp5m2b1at27li; path=/
      - SRV=c66; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster6-w6
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12638'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 09 Apr 2020 14:32:42 GMT
- request:
    method: get
    uri: http://www.sti-immo.com/5784-Studio-Montparnasse.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 09 Apr 2020 14:32:42 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200409.rev1
      Set-Cookie:
      - PHPSESSID=5369n0n9tjcr57e6313g4cb7f3; path=/
      - SRV=c65; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster6-w5
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12773'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIiBjbGFzcz0iIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wIj4KICAgIDx0aXRsZT52ZW50ZSBTdHVkaW8gTW9udHBhcm5hc3NlPC90aXRsZT4KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJ2ZW50ZSBzdHVkaW8gMSBwacOoY2UgUGFyaXMgOiBTdHVkaW8gTW9udHBhcm5hc3NlIj4KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4KICAgIAogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgaHJlZj0iaW1hZ2VzL2Zhdmljb24ucG5nIiB0eXBlPSJpbWFnZS9wbmciIC8+CiAgICAgICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJpbWFnZXMvZmF2aWNvbi5wbmciIHR5cGU9ImltYWdlL3BuZyIgLz4KICAgIAogICAgCiAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgbmFtZT0iZ2VuZXJhdG9yIiBjb250ZW50PSJwcmQyIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaW5rICByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cDovL3d3dy5zdGktaW1tby5jb20vNTc4NC1TdHVkaW8tTW9udHBhcm5hc3NlLmh0bWwiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgcHJvcGVydHk9ImdlbmVyYXRvciIgY29udGVudD0iYk9iY2F0IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAKICAgIDxiYXNlIGhyZWY9Imh0dHA6Ly93d3cuc3RpLWltbW8uY29tLyI+CiAgICAKICAgIAogICAgICAgICAgICAKCiAgICAKICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9sZCtqc29uIj4KICAgICAgICB7CiAgICAgICAgICAgICJAY29udGV4dCI6ICJodHRwczovL3NjaGVtYS5vcmciLAogICAgICAgICAgICAiQHR5cGUiOiAiT3JnYW5pemF0aW9uIiwKICAgICAgICAgICAgIm5hbWUiOiAiR3JvdXBlIFN0aSAiLAogICAgICAgICAgICAiYWdncmVnYXRlUmF0aW5nIjoKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIkB0eXBlIjogIkFnZ3JlZ2F0ZVJhdGluZyIsCiAgICAgICAgICAgICAgICAicmF0aW5nVmFsdWUiOiAiOTUiLAogICAgICAgICAgICAgICAgInJldmlld0NvdW50IjogIjM0IiwKICAgICAgICAgICAgICAgICJXb3JzdFJhdGluZyI6ICIwIiwKICAgICAgICAgICAgICAgICJCZXN0UmF0aW5nIjoiMTAwIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgPC9zY3JpcHQ+CiAgICAKCiAgICAKICAgIAogICAgICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1RdWVzdHJpYWwiIHJlbD0ic3R5bGVzaGVldCI+CiAgICAgICAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVRpdGlsbGl1bStXZWI6MzAwLDQwMCw3MDAiIHJlbD0ic3R5bGVzaGVldCI+CiAgICAgICAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUxhdG86MzAwLDQwMCw3MDAsOTAwIiByZWw9InN0eWxlc2hlZXQiPgogICAgICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG86MzAwLDQwMCw3MDAiIHJlbD0ic3R5bGVzaGVldCI+CiAgICAKICAgIAogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvanF1ZXJ5dWkvMS4xMi4xL3RoZW1lcy9zbW9vdGhuZXNzL2pxdWVyeS11aS5taW4uY3NzIiAvPgogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvNC4wLjAtYmV0YS4yL2Nzcy9ib290c3RyYXAubWluLmNzcyIgaW50ZWdyaXR5PSJzaGEzODQtUHNIOFI3MkpRM1NPZGhWaTN1eGZ0bWFXNlZjNTFNS2IwcTVQMnJSVXBQdnJzenVFNFcxcG92SFlnVHBCZnNoYiIgY3Jvc3NvcmlnaW49ImFub255bW91cyI+CiAgICAgICAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9mb250LWF3ZXNvbWUvNC43LjAvY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiIGludGVncml0eT0ic2hhMzg0LXd2ZlhwcXBaWlZRR0s2VEFoNVBWbEdPZlFOSFNvRDJ4YkUrUWtQeENBRmxORWV2b0VIM1NsMHNpYlZjT1FWbk4iIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiPgogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvYW5pbWF0ZS5jc3MvMy41LjIvYW5pbWF0ZS5jc3MiIC8+CiAgICAgICAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90byIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgICAgIDwhLS0gPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5ib290Y3NzLmNvbS9ob3Zlci5jc3MvMi4xLjEvY3NzL2hvdmVyLW1pbi5jc3MiIC8+IC0tPgogICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9ib290c3RyYXAtc2VsZWN0LzEuMTIuNC9jc3MvYm9vdHN0cmFwLXNlbGVjdC5taW4uY3NzIj4KICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xpZ2h0Z2FsbGVyeS8xLjYuOC9jc3MvbGlnaHRnYWxsZXJ5LmNzcyI+CiAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9saWdodHNsaWRlci8xLjEuNi9jc3MvbGlnaHRzbGlkZXIuY3NzIj4KICAgICAgCiAgICAKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii9jc3MvZm9udHMvc3R5bGUuY3NzIiAvPgoKICAgIAoKICAgIAoJPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9saWdodGdhbGxlcnkvMS42LjAvY3NzL2xpZ2h0Z2FsbGVyeS5taW4uY3NzIiAvPgoJPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9saWdodHNsaWRlci8xLjEuNi9jc3MvbGlnaHRzbGlkZXIubWluLmNzcyIgLz4KCTxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvT3dsQ2Fyb3VzZWwyLzIuMy40L2Fzc2V0cy9vd2wuY2Fyb3VzZWwubWluLmNzcyIgLz4KCgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL2Nzcy9leHByZS5jc3MiIC8+CiAgICAgCgogICAgCiAgICAgICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CjxzY3JpcHQ+KGZ1bmN0aW9uKHcsZCxzLGwsaSl7IHdbbF09d1tsXXx8W107d1tsXS5wdXNoKCB7ICdndG0uc3RhcnQnOgogICAgbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLAogICAgICAgICAgICBqPWQuY3JlYXRlRWxlbWVudChzKSxkbD1sIT0nZGF0YUxheWVyJz8nJmw9JytsOicnO2ouYXN5bmM9dHJ1ZTtqLnNyYz0KICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nK2krZGw7Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLGYpOwogICAgICAgICAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1QR1BTNVc4Jyk7PC9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KICAgIAogICAgCiAgICAKICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iU3R1ZGlvIE1vbnRwYXJuYXNzZSIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJBcnRpY2xlIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSJodHRwOi8vd3d3LnN0aS1pbW1vLmNvbS9pbWFnZXMvYmllbnMvMS9mNWUzNDczM2YzZmExMzc2YmUyNmNiNGU2MGU4MTRjMS9vcmlnaW5hbC9waG90b180MTBjMTlhYWExMGMyYmU5NDQxYTliNmFjZDRlNDQ1NS5qcGciIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IsOAwqA1MG3CoGRlIE1vbnRwYXJuYXNzZSwgdW4gc3R1ZGlvwqAoMTguMjVtwrLCoGhvcnPCoENhcnJleinCoGF2ZWMgdnVlIGTDqWdhZ8OpZSBhdSBkZXJuaWVyIMOpdGFnZSwgaW1tZXVibGUgYW5jaWVuLMKgY29tcHJlbmFudDrCoHBpw6hjZcKgcHJpbmNpcGFsZSBjw7R0w6nCoGNvdXIsIGN1aXNpbmUsIHNhbGxlIGQnZWF1IGF2ZWPCoFdDwqBicm95ZXVywqAocG9zc2liaWxpdMOpIGRlIHJhY2NvcmRlbWVudCkuwqBUcmF2YXV4IMOgIHByw6l2b2lyLsKgUmFyZSIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHA6Ly93d3cuc3RpLWltbW8uY29tLzU3ODQtU3R1ZGlvLU1vbnRwYXJuYXNzZS5odG1sIiAvPgogICAgCgogICAgCiAgICAgICAgICAgIAo8L2hlYWQ+Cgo8Ym9keSBjbGFzcz0icGFnZURldGFpbCI+CiAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgo8bm9zY3JpcHQ+PGlmcmFtZSBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLVBHUFM1VzgiCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgoKCgoKCgoKCgoKCgoKCgoKCgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAKICAgIDwvZGl2PgoKCgoKICAgICAgICAgICAgCgo8aGVhZGVyIGlkPSJoZWFkZXIxIj4KICAgIA0KDQogICAgPGRpdiBjbGFzcz0ibWwtYXV0byBjb2wteGwtMyB0ZXh0LWNlbnRlciByc3Ytc2VsZWN0aW9uIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iYXZpcyI+DQogICAgICAgICAgICA8aWZyYW1lIHNyYz0iaHR0cHM6Ly93d3cub3BpbmlvbnN5c3RlbS5mci9jb21wYW55X3JhdGluZy5waHA/Y29tcGFueV9pZD0yMzA5JmFtcDtyYXRpbmdfa2V5PSZhbXA7bGFuZ3VhZ2U9ZnJlJmFtcDt0ZXh0X2NvbG9yPSMxODM0NzYiDQogICAgICAgICAgICAgICAgICAgIHNjcm9sbGluZz0ibm8iIHN0eWxlPSJib3JkZXI6IG5vbmU7IG92ZXJmbG93OiBoaWRkZW47IHdpZHRoOiAxODBweDsgaGVpZ2h0OiAyMnB4OyBiYWNrZ3JvdW5kOiNmZmZmZmY7IiBhbGxvd3RyYW5zcGFyZW5jeT0idHJ1ZSIgZnJhbWVib3JkZXI9IjAiPg0KICAgICAgICAgICAgPC9pZnJhbWU+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciByc3Ytc2VsZWN0aW9uIG1lbnVsYW5nIj4NCiAgICAgICAgPGEgaHJlZj0iL3NlbGVjdGlvbi5odG1sIj48aSBjbGFzcz0iZmEgZmEtMnggZmEtc2hvcHBpbmctYmFza2V0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PHNwYW4gY2xhc3M9ImJhZGdlIGJhZGdlLXByaW1hcnkgbmJTZWxlY3Rpb24iPjA8L3NwYW4+PC9pPjwvYT4NCiAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24gbGFuZ3VlIj4NCiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGUiIHR5cGU9ImJ1dHRvbiIgaWQ9ImRyb3Bkb3duTWVudUJ1dHRvbiIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+DQogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhbWZhbWZhbS1mbGFnLWZyIj48L2k+DQogICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUiIGFyaWEtbGFiZWxsZWRieT0iZHJvcGRvd25NZW51QnV0dG9uIj4NCiAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii8vd3d3LnN0aS1pbW1vLmNvbS81Nzg0LVN0dWRpby1Nb250cGFybmFzc2UuaHRtbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYW5nIiB2YWx1ZT0iZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIj48aSBjbGFzcz0iZmFtZmFtZmFtLWZsYWctZW4iPjwvaT48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteGwtMTIgdGV4dC1jZW50ZXIgbG9nbyI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iIGlkPSJsb2dvU2l0ZSIgPjxpbWcgc3JjPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2xvZ29TaXRlLnBuZyIgLz48L2E+CiAgICAgICAgPC9kaXY+CiAgICAKICAgIAogICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1leHBhbmQtbWQiPgogICAgICAgIDxidXR0b24gY2xhc3M9Im5hdmJhci10b2dnbGVyIiB0eXBlPSJidXR0b24iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNuYXZiYXJTdXBwb3J0ZWRDb250ZW50IiBhcmlhLWNvbnRyb2xzPSJuYXZiYXJTdXBwb3J0ZWRDb250ZW50IiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1sYWJlbD0iVG9nZ2xlIG5hdmlnYXRpb24iPgogICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtbGcgZmEtYmFycyIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8cCBjbGFzcz0idHh0Rml4ZWRUb3AiPk1lbnU8L3A+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSIgaWQ9Im5hdmJhclN1cHBvcnRlZENvbnRlbnQiPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdmJhci1uYXYgbS1hdXRvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBodnItc3dlZXAtdG8tdG9wICAgIj4KICAgICAgICAgICAgPGEgaHJlZj0iLyIgdGFyZ2V0PSIiIGNsYXNzPSJuYXYtbGluayIgaWQ9IiIgPkFjY3VlaWw8L2E+CiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gaHZyLXN3ZWVwLXRvLXRvcCAgICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii92ZW5kcmUuaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJuYXYtbGluayIgaWQ9IiIgPlZlbmRyZTwvYT4KICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBodnItc3dlZXAtdG8tdG9wIGRyb3Bkb3duICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIiB0YXJnZXQ9IiIgY2xhc3M9IiBuYXYtbGluayBkcm9wZG93bi10b2dnbGUiIGlkPSIiIGFyaWEtaGFzcG9wdXA9InRydWUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1leHBhbmRlZD0iZmFsc2UiID5BY2hldGVyPC9hPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24gZHJvcGRvd24tbWVudSIgYXJpYS1sYWJlbGxlZGJ5PSJBY2hldGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGEgaHJlZj0iL2EtdmVuZHJlLzEiIHRhcmdldD0iIiBjbGFzcz0iZHJvcGRvd24taXRlbSAiID5oYWJpdGF0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8YSBocmVmPSIvY29tbWVyY2VzLzEiIHRhcmdldD0iIiBjbGFzcz0iZHJvcGRvd24taXRlbSAiID5Qcm9mZXNzaW9ubmVsPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGh2ci1zd2VlcC10by10b3AgICAiPgogICAgICAgICAgICA8YSBocmVmPSIvYS1sb3Vlci8xIiB0YXJnZXQ9IiIgY2xhc3M9Im5hdi1saW5rIiBpZD0iIiA+TG91ZXI8L2E+CiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gaHZyLXN3ZWVwLXRvLXRvcCBkcm9wZG93biAgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiIgdGFyZ2V0PSIiIGNsYXNzPSIgbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIiBpZD0iIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiA+R8OpcmVyPC9hPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24gZHJvcGRvd24tbWVudSIgYXJpYS1sYWJlbGxlZGJ5PSJHw6lyZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8YSBocmVmPSIvc3luZGljLmh0bWwiIHRhcmdldD0iIiBjbGFzcz0iZHJvcGRvd24taXRlbSAiID5zeW5kaWMgZCdpbW1vYmlsaWVyPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8YSBocmVmPSIvZ2VzdGlvbi1sb2NhdGl2ZS5odG1sIiB0YXJnZXQ9IiIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0gIiA+Z2VzdGlvbiBsb2NhdGl2ZTwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBodnItc3dlZXAtdG8tdG9wIGRyb3Bkb3duICAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIiB0YXJnZXQ9IiIgY2xhc3M9IiBuYXYtbGluayBkcm9wZG93bi10b2dnbGUiIGlkPSIiIGFyaWEtaGFzcG9wdXA9InRydWUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1leHBhbmRlZD0iZmFsc2UiID5sZSBncm91cGU8L2E+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93biBkcm9wZG93bi1tZW51IiBhcmlhLWxhYmVsbGVkYnk9ImxlIGdyb3VwZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxhIGhyZWY9Ii9wcmVzZW50YXRpb24uaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPlByw6lzZW50YXRpb248L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxhIGhyZWY9Ii9hZ2VuY2VzLyIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPk5vcyA2IGFnZW5jZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9Imhhcy1kcm9wZG93biBzc21lbnUiPgogICAgICAgIDxhIGhyZWY9Ii9ub3NtZXRpZXJzLmh0bWwiIHRhcmdldD0iIiBjbGFzcz0iZHJvcGRvd24taXRlbSBhc3NtZW51IGRyb3Bkb3duLXRvZ2dsZSIgPk5vcyBtw6l0aWVyczwvYT4KICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93biBkcm9wZG93bi1tZW51IiBhcmlhLWxhYmVsbGVkYnk9Ik5vcyBtw6l0aWVycyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxhIGhyZWY9Ii9ub3NtZXRpZXJzL2FjaGF0LXZlbnRlLmh0bWwiIHRhcmdldD0iIiBjbGFzcz0iZHJvcGRvd24taXRlbSAiID5BY2hhdC9WZW50ZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGEgaHJlZj0iL25vc21ldGllcnMvbG9jYXRpb24uaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPkxvY2F0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8YSBocmVmPSIvbm9zbWV0aWVycy9pbW1vYmlsaWVyLXByb2Zlc3Npb25uZWwuaHRtbCIgdGFyZ2V0PSIiIGNsYXNzPSJkcm9wZG93bi1pdGVtICIgPkltbW9iaWxpZXIgcHJvZmVzc2lvbm5lbDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGEgaHJlZj0iL25vc21ldGllcnMvYWRtaW5pc3RyYXRpb24tZGVzLWJpZW5zLmh0bWwiIHRhcmdldD0iIiBjbGFzcz0iZHJvcGRvd24taXRlbSAiID5BZG1pbmlzdHJhdGlvbiBkZSBiaWVuczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGEgaHJlZj0iL25vc21ldGllcnMvc3luZGljLmh0bWwiIHRhcmdldD0iIiBjbGFzcz0iZHJvcGRvd24taXRlbSAiID5TeW5kaWM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxhIGhyZWY9Ii9ub3NtZXRpZXJzL2NvbnNlaWxzLmh0bWwiIHRhcmdldD0iIiBjbGFzcz0iZHJvcGRvd24taXRlbSAiID5Db25zZWlsczwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGh2ci1zd2VlcC10by10b3AgICAiPgogICAgICAgICAgICA8YSBocmVmPSIvYmllbi92ZW5kdS8xIiB0YXJnZXQ9IiIgY2xhc3M9Im5hdi1saW5rIiBpZD0iIiA+QmllbnMgdmVuZHVzPC9hPgogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGh2ci1zd2VlcC10by10b3AgICAiPgogICAgICAgICAgICA8YSBocmVmPSIvY29udGFjdC5odG1sIiB0YXJnZXQ9IiIgY2xhc3M9Im5hdi1saW5rIiBpZD0iIiA+Q29udGFjdDwvYT4KICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L25hdj4KICAgIAo8L2hlYWRlcj4KCg0KCSA8c2VjdGlvbiBpZD0ic2xpZGVDQyI+DQogICAgICAgIDxkaXYgaWQ9ImNhcm91c2VsQ0MiIGNsYXNzPSJjYXJvdXNlbCBzbGlkZSIgZGF0YS1yaWRlPSJjYXJvdXNlbCIgZGF0YS1wYXVzZT0iZmFsc2UiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2Fyb3VzZWwtaW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtIGFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaW1hZ2VzL3NsaWRlc2hvdy8xLmpwZyIgY2xhc3M9InRleHQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICBjYXJvdXNlbC1pdGVtLWxlZnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvc2xpZGVzaG93LzIuanBnIiBjbGFzcz0iIHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9zZWN0aW9uPg0KCgogICAgCgoKICAgICAKIAogICAgCiAgICA8ZGl2IGlkPSJDYWxjdWxldHRlIiBjbGFzcz0ibW9kYWwgZmFkZSIgIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im15TGFyZ2VNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLW1kIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiPkNhbGN1bGV0dGU8L2g0PgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb3JtLWhvcml6b250YWwiIHJvbGU9ImZvcm0iIGFjdGlvbj0iIiBvbnN1Ym1pdD0icmV0dXJuIGNhbGN1bGF0ZUNyZWRpdCh0aGlzKTsiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibW9udGFudCIgY2xhc3M9ImZvcm0tY29udHJvbC1sYWJlbCI+TW9udGFudCAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIG51bWVyaWNJbnB1dCIgbmFtZT0ibW9udGFudCIgaWQ9Im1vbnRhbnQiIHZhbHVlPSIyMjUwMDAiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0YXV4IiBjbGFzcz0iZm9ybS1jb250cm9sLWxhYmVsIj5UYXV4ICglKSAqIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ibnVtYmVyIiBzdGVwPSIwLjAxIiBtaW49IjAiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9InRhdXgiIGlkPSJ0YXV4IiByZXF1aXJlZD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYXBwb3J0IiBjbGFzcz0iZm9ybS1jb250cm9sLWxhYmVsIj5BcHBvcnQgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIG51bWVyaWNJbnB1dCIgbmFtZT0iYXBwb3J0IiBpZD0iYXBwb3J0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZHVyZWUiIGNsYXNzPSJmb3JtLWNvbnRyb2wtbGFiZWwiPkR1csOpZSAoQW5uw6llcykgKiA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgY2xhc3M9ImZvcm0tY29udHJvbCBudW1lcmljSW5wdXQiIG5hbWU9ImR1cmVlIiBpZD0iZHVyZWUiIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBkLW5vbmUgcmVzdWx0RGl2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im1lbnN1YWxpdGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wtbGFiZWwiPk1lbnN1YWxpdMOpcyA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0IHJlc3VsdCIgbmFtZT0ibWVuc3VhbGl0ZSIgaWQ9Im1lbnN1YWxpdGUiIHJlYWRvbmx5IHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNtYWxsIG9ibGlnQ2hhbXAgcHVsbC1sZWZ0Ij4qQ2hhbXBzIG9ibGlnYXRvaXJlczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgcmlnaHQiPkNhbGN1bGVyPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWNvbnRlbnQgLS0+CiAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWRpYWxvZyAtLT4KICAgIDwvZGl2PgogICAgIAoKICAgIAogICAgPGRpdiBpZD0ic2VuZEZyaWVuZCIgY2xhc3M9Im1vZGFsIGZhZGUiICB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgYXJpYS1sYWJlbGxlZGJ5PSJteUxhcmdlTW9kYWxMYWJlbCIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPSJmb3JtLWhvcml6b250YWwiIHJvbGU9ImZvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvNTc4NC1TdHVkaW8tTW9udHBhcm5hc3NlLmh0bWwiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdGlvbiIgdmFsdWU9InNlbmRGcmllbmQiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRhdGFbQ29udGFjdF1bdXJsXSIgdmFsdWU9Imh0dHA6Ly93d3cuc3RpLWltbW8uY29tLzU3ODQtU3R1ZGlvLU1vbnRwYXJuYXNzZS5odG1sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIj5QYXJ0YWdlcjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0YVtDb250YWN0XVtub21dIiBjbGFzcz0iZm9ybS1jb250cm9sLWxhYmVsIj5Wb3RyZSBub20gKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iZGF0YVtDb250YWN0XVtub21dIiByZXF1aXJlZD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0YVtDb250YWN0XVtmcm9tXSIgY2xhc3M9ImZvcm0tY29udHJvbC1sYWJlbCI+Vm90cmUgYWRyZXNzZSBtYWlsICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9ImRhdGFbQ29udGFjdF1bZnJvbV0iIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkYXRhW0NvbnRhY3RdW3RvXSIgY2xhc3M9ImZvcm0tY29udHJvbC1sYWJlbCI+TWFpbCBkZSB2b3RyZSBhbWkgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iZGF0YVtDb250YWN0XVt0b10iIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXNicnl3IiBzdHlsZT0iZGlzcGxheTpub25lIj4KPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImFzX2R5bmEiIGRhdGEtd2FpdD0iYjg5YmIwMjQ0OGY2ODNhOTdkOTdhMGJhMDM3N2YxMGUiIGRhdGEtb3JpZz0iY2YzZDRhYTM4YzZjOWM2NGQ4N2QwMGVhZDE4MWYzOTUiIGNsYXNzPSJhc19maWVsZCBhc19maWVsZC0yIDIiIHZhbHVlPSJjZjNkNGFhMzhjNmM5YzY0ZDg3ZDAwZWFkMTgxZjM5NSIvPgo8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXNfc3RhdCIgY2xhc3M9ImFzX2ZpZWxkIGFzX2ZpZWxkLTEgMSIgdmFsdWU9IiIvPgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRhdGFbQ29udGFjdF1bbWVzc2FnZV0iIGNsYXNzPSJmb3JtLWNvbnRyb2wtbGFiZWwiPlZvdHJlIG1lc3NhZ2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJtZXNzYWdlIiBuYW1lPSJkYXRhW0NvbnRhY3RdW21lc3NhZ2VdIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCBvYmxpZ0NoYW1wIHB1bGwtbGVmdCI+KkNoYW1wcyBvYmxpZ2F0b2lyZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCByaWdodCI+RW52b3llcjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtY29udGVudCAtLT4KICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtZGlhbG9nIC0tPgogICAgPC9kaXY+CgoKICAgIDxhcnRpY2xlIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1Byb2R1Y3QiIGNsYXNzPSJiaWVuIj4KICAgICAgICA8c2VjdGlvbiBpZD0iY29udGFpbmVyRGV0YWlsIiBjbGFzcz0iYW5ub25jZUR0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYXJpYW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSdhcHBsaWNhdGlvbi9sZCtqc29uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAY29udGV4dCI6Imh0dHBzOi8vc2NoZW1hLm9yZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAdHlwZSI6IkJyZWFkY3J1bWJMaXN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW1MaXN0RWxlbWVudCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAdHlwZSI6Ikxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicG9zaXRpb24iOjEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW0iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAaWQiOiIvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiJBY2N1ZWlsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjoiTGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwb3NpdGlvbiI6MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXRlbSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkBpZCI6Ii9hY2hhdC1pbW1vYmlsaWVyLXBhcmlzLzEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6Ik5vcyBhbm5vbmNlcyDDoCBQYXJpcyBldCBzZXMgZW52aXJvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiJMaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBvc2l0aW9uIjozLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpdGVtIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQGlkIjoiLzU3ODQtU3R1ZGlvLU1vbnRwYXJuYXNzZS5odG1sIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiJTdHVkaW8gTW9udHBhcm5hc3NlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz0iYnJlYWRjcnVtYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+PGEgaHJlZj0iLyIgPkFjY3VlaWw8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvYWNoYXQtaW1tb2JpbGllci1wYXJpcy8xIiA+Tm9zIGFubm9uY2VzIMOgIFBhcmlzIGV0IHNlcyBlbnZpcm9uczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPjxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyLXBhcmlzL3R5cGUtNC1TdHVkaW8vMSIgPlN0dWRpbzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0gYWN0aXZlIj5TdHVkaW8gZGUgIDE3LjE4IG0mc3VwMjsgw6AgUGFyaXM8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXRhaWx0b3AgZC1tZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbWQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgaHJlZj0iamF2YXNjcmlwdDpoaXN0b3J5LmdvKC0xKSI+PCBSZXRvdXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBpdGVtcHJvcD0ibmFtZSIgY2xhc3M9ImRldGFpbC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYm9sZCI+U3R1ZGlvIE1vbnRwYXJuYXNzZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1tZC1mbGV4IG1sLWF1dG8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBpdGVtcHJvcD0icG90ZW50aWFsQWN0aW9uIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9CdXlBY3Rpb24iIGNsYXNzPSJkZXRhaWwtcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxhYmVscHJpeCI+PGI+UHJpeDwvYj4gPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InByaWNlU3BlY2lmaWNhdGlvbiIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvUHJpY2VTcGVjaWZpY2F0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJwcmljZSIgY29udGVudD0iMjI1MDAwIj4yMjUgMDAwPC9zcGFuPiA8c3BhbiBpdGVtcHJvcD0icHJpY2VDdXJyZW5jeSI+4oKsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsYWJlbHByaXggcmVmIj48Yj5SZWY8L2I+IDwvc3Bhbj5WMzAwMDA1NzgyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIA0KPGRpdiBpZD0iZHQxIj4NCiAgICAgICAgPHNlY3Rpb24gaWQ9ImdhbGxlcnkiIGRhdGEtbWluaWF0dXJlPSIxIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgbG9hZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jaXJjbGUtby1ub3RjaCBmYS1zcGluIGZhLTN4IGZhLWZ3Ij48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+TG9hZGluZy4uLjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9IiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJTdGF0dXRCaWVuIGV4Y2x1c2lmIj5FeGNsdXNpdml0w6k8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKDQogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImltYWdlR2FsbGVyeSBub3RMb2FkZWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjAiIGRhdGEtdGh1bWI9Ii8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xL2Y1ZTM0NzMzZjNmYTEzNzZiZTI2Y2I0ZTYwZTgxNGMxL3Bob3RvXzQxMGMxOWFhYTEwYzJiZTk0NDFhOWI2YWNkNGU0NDU1LmpwZyIgZGF0YS1zcmM9Ii8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9mNWUzNDczM2YzZmExMzc2YmUyNmNiNGU2MGU4MTRjMS9waG90b180MTBjMTlhYWExMGMyYmU5NDQxYTliNmFjZDRlNDQ1NS5qcGciIGRhdGEtc3JjLWZvcnRodW1iID0gIi8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9mNWUzNDczM2YzZmExMzc2YmUyNmNiNGU2MGU4MTRjMS9waG90b180MTBjMTlhYWExMGMyYmU5NDQxYTliNmFjZDRlNDQ1NS5qcGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vMTEwMHgxMTAwL2ltYWdlcy9iaWVucy8xL2Y1ZTM0NzMzZjNmYTEzNzZiZTI2Y2I0ZTYwZTgxNGMxL3Bob3RvXzQxMGMxOWFhYTEwYzJiZTk0NDFhOWI2YWNkNGU0NDU1LmpwZyIgYWx0PSIiIGNsYXNzPSJpbWdCaWVuIGltZ0ZpcnN0IiB3aWR0aD0iMTEwMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L3NlY3Rpb24+DQogICAgICAgIDxzZWN0aW9uIGlkPSJ2aXNpdGVWaXJ0dWVsbGUiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4NCiAgICA8c2VjdGlvbiBpZD0iaW5mb3NCaWVuIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTUiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+RGVzY3JpcHRpb24gZGUgbCdvZmZyZTwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiIgY2xhc3M9ImRlc2NyaXB0aW9uIj7DgMKgNTBtwqBkZSBNb250cGFybmFzc2UsIHVuIHN0dWRpb8KgKDE4LjI1bcKywqBob3JzwqBDYXJyZXopwqBhdmVjIHZ1ZSBkw6lnYWfDqWUgYXUgZGVybmllciDDqXRhZ2UsIGltbWV1YmxlIGFuY2llbizCoGNvbXByZW5hbnQ6wqBwacOoY2XCoHByaW5jaXBhbGUgY8O0dMOpwqBjb3VyLCBjdWlzaW5lLCBzYWxsZSBkJ2VhdSBhdmVjwqBXQ8KgYnJveWV1csKgKHBvc3NpYmlsaXTDqSBkZSByYWNjb3JkZW1lbnQpLsKgVHJhdmF1eCDDoCBwcsOpdm9pci7CoFJhcmU8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGFnZW5jZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibXQtMCI+Q29vcmRvbm7DqWVzIGRlIGwnYWdlbmNlPC9oND4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlNUSSBQZXJuZXR5PC9oNT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlbGFnZW5jZSI+PGEgaHJlZj0idGVsOjAxIDQ1IDQzIDQ0IDA1Ij4wMSA0NSA0MyA0NCAwNTwvYT4NCjwvc3Bhbj48YnI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9Ib3VzZSIgY2xhc3M9ImNvbC1sZy03IGRlc2NyaXB0aWYiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+RGVzY3JpcHRpb24gZHUgYmllbjwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxpdHRsZS1pbmZvcyBkLXhzLWRvd24tbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJkLWZsZXggbXItMyIgc3JjPSJpbWFnZXMvZGV0YWlsL2RldGFpbC1waWVjZXMucG5nIiBhbHQ9IiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtdC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibnVtYmVyT2ZSb29tcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBpw6hjZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImQtZmxleCBtci0zIiBzcmM9ImltYWdlcy9kZXRhaWwvZGV0YWlsLXN1cmZhY2UucG5nIiBhbHQ9IiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtdC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0iZmxvb3JTaXplIj4xNy4xODwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSZzdXAyOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtZmlsbCBuYXYtcGlsbHMgIiByb2xlPSJ0YWJsaXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2luZm9zIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJpbmZvcyIgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIiBjbGFzcz0ibmF2LWxpbmsgYWN0aXZlIj5Hw6luw6lyYWw8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjZGV0YWlscyIgYXJpYS1leHBhbmRlZD0idHJ1ZSIgYXJpYS1jb250cm9scz0iZGV0YWlscyIgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIiBjbGFzcz0ibmF2LWxpbmsgIj5Ew6l0YWlscyArPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2NvcHJvIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb3BybyIgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIiBjbGFzcz0ibmF2LWxpbmsgIj5Db3Byb3ByacOpdMOpPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2luZm9zZmkiIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFyaWEtY29udHJvbHM9ImluZm9zZmkiIHJvbGU9InRhYiIgZGF0YS10b2dnbGU9InRhYiIgY2xhc3M9Im5hdi1saW5rICI+RmluYW5jaWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iI2JpbGFuIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJiaWxhbiIgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIj5CaWxhbiDDqW5lcmfDqXRpcXVlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItY29udGVudCIgaWQ9Im15VGFiQ29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItcGFuZSBmYWRlICBzaG93IGFjdGl2ZSIgaWQ9ImluZm9zIiByb2xlPSJ0YWJwYW5lbCIgYXJpYS1sYWJlbGxlZGJ5PSJpbmZvcy10YWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtaG92ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InNyLW9ubHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MYWJlbDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlZhbHVlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPkNvZGUgcG9zdGFsPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+NzUwMTU8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5TdXJmYWNlIGhhYml0YWJsZSAobcKyKTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPjE3LDE4IG3CsjwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPk5vbWJyZSBkZSBwacOoY2VzPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+MTwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iZGV0YWlscyIgcm9sZT0idGFicGFuZWwiIGFyaWEtbGFiZWxsZWRieT0iZGV0YWlscy10YWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtaG92ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InNyLW9ubHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MYWJlbDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlZhbHVlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPk5iIGRlIHNhbGxlIGQnZWF1PC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+MTwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPkN1aXNpbmU8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij5TRVBBUkVFPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+TW9kZSBkZSBjaGF1ZmZhZ2U8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij5FTEVDVFJJUVVFPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+VHlwZSBkZSBjaGF1ZmZhZ2UgPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+Q09OVkVDVEVVUjwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPkZvcm1hdCBkZSBjaGF1ZmZhZ2U8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij5JTkRJVklEVUVMPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+SW50ZXJwaG9uZTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPk9VSTwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPlRlcnJhc3NlPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+Tk9OPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+IE11cnMgbWl0b3llbnM8L3RoPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9InZhbHVlSW5mbyB0ZXh0LXJpZ2h0Ij4yPC90aD4NCgkJCQkJCQkJCQk8L3RyPg0KCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+Q2F2ZTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPk5PTjwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iY29wcm8iIHJvbGU9InRhYnBhbmVsIiBhcmlhLWxhYmVsbGVkYnk9ImNvcHJvLXRhYiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0ic3Itb25seSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkxhYmVsPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VmFsdWU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPg0KCQkJCQkJCQkJCQk8dGggY2xhc3M9ImxhYmVsSW5mbyI+Y29wcm9wcmnDqXTDqTwvdGg+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0idmFsdWVJbmZvIHRleHQtcmlnaHQiPk9VSTwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPm5vbWJyZSBkZSBsb3RzPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+MjU8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+DQoJCQkJCQkJCQkJCTx0aCBjbGFzcz0ibGFiZWxJbmZvIj5RdW90ZSBQYXJ0IGFubnVlbGxlIGRlcyBjaGFyZ2VzPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+OTUwIOKCrDwvdGg+DQoJCQkJCQkJCQkJPC90cj4NCgkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iaW5mb3NmaSIgcm9sZT0idGFicGFuZWwiIGFyaWEtbGFiZWxsZWRieT0iaW5mb3NmaS10YWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtaG92ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InNyLW9ubHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MYWJlbDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlZhbHVlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJsYWJlbEluZm8iPlByaXggZGUgdmVudGUgaG9ub3JhaXJlcyBUVEMgaW5jbHVzPC90aD4NCgkJCQkJCQkJCQkJPHRoIGNsYXNzPSJ2YWx1ZUluZm8gdGV4dC1yaWdodCI+MjI1IDAwMCDigqw8L3RoPg0KCQkJCQkJCQkJCTwvdHI+DQoJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItcGFuZSBmYWRlIiBpZD0iYmlsYW4iIHJvbGU9InRhYnBhbmVsIiBhcmlhLWxhYmVsbGVkYnk9ImJpbGFuLXRhYiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYgY29sLXhzLTEyIHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvYWRtaW4vZHBlLnBocD9sYW5nPWZyJmFtcDtpZGFubj01Nzg0IiBhbHQ9IkRQRSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiBjb2wteHMtMTIgdGV4dC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9hZG1pbi9kcGUucGhwP3R5cGU9R0VTJmFtcDtsYW5nPWZyJmFtcDtpZGFubj01Nzg0IiBhbHQ9IkRQRSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItcGFuZSBmYWRlIiBpZD0ic2VydmljZXMiIHJvbGU9InRhYnBhbmVsIiBhcmlhLWxhYmVsbGVkYnk9InNlcnZpY2VzLXRhYiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0ic3Itb25seSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkxhYmVsPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VmFsdWU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L3NlY3Rpb24+DQogICAgICAgIDxzZWN0aW9uIGlkPSJvdXRpbHMiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG5vLWd1dHRlcnMiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy01IGNvbnRhY3QiPg0KICAgICAgICAgICAgICAgICAgICA8aDM+Q29udGFjdGVyIGwnYWdlbmNlPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249Jy81Nzg0LVN0dWRpby1Nb250cGFybmFzc2UuaHRtbCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibm9tIiBjbGFzcz0ic3Itb25seSI+Tm9tKjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImRhdGFbQ29udGFjdF1bbm9tXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9Im5vbSIgcmVxdWlyZWQgIHBsYWNlaG9sZGVyPSJOb20qIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idGVsIiBjbGFzcz0ic3Itb25seSI+VMOpbMOpcGhvbmUqPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iZGF0YVtDb250YWN0XVt0ZWxdIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0idGVsIiByZXF1aXJlZCBwbGFjZWhvbGRlcj0iVMOpbMOpcGhvbmUqIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibWFpbCIgY2xhc3M9InNyLW9ubHkiPk1haWwqPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ibWFpbCIgbmFtZT0iZGF0YVtDb250YWN0XVtlbWFpbF0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJtYWlsIiByZXF1aXJlZCBwbGFjZWhvbGRlcj0iTWFpbCoiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtc2ciIGNsYXNzPSJzci1vbmx5Ij5NZXNzYWdlPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iZGF0YVtDb250YWN0XVttZXNzYWdlXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9Im1zZyIgcGxhY2Vob2xkZXI9Ik1lc3NhZ2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhc2JyeXciIHN0eWxlPSJkaXNwbGF5Om5vbmUiPgo8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXNfZHluYSIgZGF0YS13YWl0PSJiODliYjAyNDQ4ZjY4M2E5N2Q5N2EwYmEwMzc3ZjEwZSIgZGF0YS1vcmlnPSJjZjNkNGFhMzhjNmM5YzY0ZDg3ZDAwZWFkMTgxZjM5NSIgY2xhc3M9ImFzX2ZpZWxkIGFzX2ZpZWxkLTIgMiIgdmFsdWU9ImNmM2Q0YWEzOGM2YzljNjRkODdkMDBlYWQxODFmMzk1Ii8+CjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhc19zdGF0IiBjbGFzcz0iYXNfZmllbGQgYXNfZmllbGQtMSAxIiB2YWx1ZT0iIi8+CjwvZGl2PgoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRhdGFbaWRiaWVuXVtdIiB2YWx1ZT0iNTc4NCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmdwZC1jaGVja2JveCI+CiAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InJncGQtYWdyZWVtZW50IiBpZD0icmdwZC1hZ3JlZW1lbnQiIC8+CiAgICA8bGFiZWwgZm9yPSJyZ3BkLWFncmVlbWVudCI+SidhY2NlcHRlIGxlcyBjb25kaXRpb25zIGQndXRpbGlzYXRpb24gZGVzIGRvbm7DqWVzICgqKTwvbGFiZWw+CjwvZGl2Pgo8c2NyaXB0PgogICd1c2Ugc3RyaWN0JzsKCiAgKGZ1bmN0aW9uICgpIHsKICAgIHZhciBhZ3JlZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmdwZC1hZ3JlZW1lbnQnKTsKICAgIHZhciBmb3JtID0gYWdyZWVtZW50LmNsb3Nlc3QoJ2Zvcm0nKTsKICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIGlmICghYWdyZWVtZW50LmNoZWNrZWQpIHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGFsZXJ0KCJWZXVpbGxleiBhY2NlcHRlciBsJ3V0aWxpc2F0aW9uIGRlIHZvcyBkb25uw6llcyBwb3VyIGNvbnRpbnVlci4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0pOwogIH0pKCk7Cjwvc2NyaXB0PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsb2F0LXJpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCAiPjxpIGNsYXNzPSJmYSBmYS1jaGV2cm9uLXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiBFbnZveWV6IGxlIG1lc3NhZ2U8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgaWQ9ImVtYWlsSGVscCIgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIHRleHQtcmlnaHQiPjxpPiogQ2hhbXBzIG9ibGlnYXRvaXJlczwvaT48L3NtYWxsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJyZ3BkLWxlZ2FscyI+KiA6IExlcyBpbmZvcm1hdGlvbnMgcmVjdWVpbGxpZXMgc3VyIGNlIGZvcm11bGFpcmUgc29udCBlbnJlZ2lzdHLDqWVzIGRhbnMgdW4gZmljaGllciBpbmZvcm1hdGlzw6kgcGFyIExhIEJvaXRlIEltbW8gcG91ciBsYSBnZXN0aW9uIGRlIGxhIGNsaWVudMOobGUvcHJvc3BlY3RzIGRlIFNUSSBQZXJuZXR5LgpFbGxlcyBzb250IGNvbnNlcnbDqWVzIGp1c3F1J8OgIGRlbWFuZGUgZGUgc3VwcHJlc3Npb24gZXQgc29udCBkZXN0aW7DqWVzIMOgIFNUSSBQZXJuZXR5LgpDb25mb3Jtw6ltZW50IMOgIGxhIGxvaSDCqyBpbmZvcm1hdGlxdWUgZXQgbGliZXJ0w6lzIMK7LCB2b3VzIHBvdXZleiBleGVyY2VyIHZvdHJlIGRyb2l0IGQnYWNjw6hzIGF1eCBkb25uw6llcyB2b3VzIGNvbmNlcm5hbnQgZXQgbGVzIGZhaXJlIHJlY3RpZmllciBlbiBjb250YWN0YW50IFNUSSBQZXJuZXR5LgpOb3VzIHZvdXMgaW5mb3Jtb25zIGRlIGzigJlleGlzdGVuY2UgZGUgbGEgbGlzdGUgZCdvcHBvc2l0aW9uIGF1IGTDqW1hcmNoYWdlIHTDqWzDqXBob25pcXVlIMKrIEJsb2N0ZWwgwrssIHN1ciBsYXF1ZWxsZSB2b3VzIHBvdXZleiB2b3VzIGluc2NyaXJlIGljaSA6IGh0dHBzOi8vY29uc28uYmxvY3RlbC5mci88L3A+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNyI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhcnRhZ2Utb3V0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJnLXBhcnRhZ2UiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+Tm9zIG91dGlsczwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGZsZXgtY29sdW1uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudCBzZWxlY3Rpb24iPjxidXR0b24gY2xhc3M9ImJ0biBidG4tZGVmYXVsdCAgc2VsZWN0aW9uLWJpZW4iIGRhdGEtaWQ9IjU3ODQiPjxpIGNsYXNzPSJmYSBmYS1oZWFydCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2J1dHRvbj4gPHNwYW4+QWpvdXRlciDDoCBtYSBzZWxlY3Rpb248L3NwYW4+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQiPjxidXR0b24gY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI0NhbGN1bGV0dGUiPjxpIGNsYXNzPSJmYSBmYS1jYWxjdWxhdG9yIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYnV0dG9uPiA8c3Bhbj5DYWxjdWxldHRlIEZpbmFuY2nDqHJlPC9zcGFuPiA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudCI+PGJ1dHRvbiBvbmNsaWNrPSJ3aW5kb3cub3BlbignL2FkbWluL3BkZi5waHA/bGFuZz1mciZpZGFubj01Nzg0JmZpY2hlX3R5cGU9dmlzaXRlJnBkZl9vcmllbnRhdGlvbj1QJnBkZl90ZW1wbGF0ZT0xJyk7IHJldHVybiBmYWxzZTsiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiPjxpIGNsYXNzPSJmYSBmYS1wcmludCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2J1dHRvbj4gPHNwYW4+SW1wcmltZXIgbGEgZmljaGU8L3NwYW4+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IHBhcnRhZ2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5QYXJ0YWdlciBsZSBiaWVuPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbm8tZ3V0dGVycyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImZhY2Vib29rIiBjbGFzcz0iZWxlbWVudCBjb2wiIGRhdGEtdXJsPSJodHRwOi8vd3d3LnN0aS1pbW1vLmNvbS81Nzg0LVN0dWRpby1Nb250cGFybmFzc2UuaHRtbCIgZGF0YS10aXRsZT0iICI+PGEgIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiPjxpIGNsYXNzPSJmYSBmYS1mYWNlYm9vayIgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2E+IDxzcGFuPkZhY2Vib29rPC9zcGFuPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJncGx1cyIgY2xhc3M9ImVsZW1lbnQgY29sIiBkYXRhLXVybD0iaHR0cDovL3d3dy5zdGktaW1tby5jb20vNTc4NC1TdHVkaW8tTW9udHBhcm5hc3NlLmh0bWwiIGRhdGEtdGl0bGU9IiAiPjxhICBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiA+PGkgY2xhc3M9ImZhIGZhLWdvb2dsZS1wbHVzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT4gPHNwYW4+R29vZ2xlICs8L3NwYW4+IDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InR3aXR0ZXIiIGNsYXNzPSJlbGVtZW50IGNvbCIgZGF0YS11cmw9Imh0dHA6Ly93d3cuc3RpLWltbW8uY29tLzU3ODQtU3R1ZGlvLU1vbnRwYXJuYXNzZS5odG1sIiBkYXRhLXRpdGxlPSIgIj48YSAgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCI+PGkgY2xhc3M9ImZhIGZhLXR3aXR0ZXIiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiA8c3Bhbj5Ud2l0dGVyPC9zcGFuPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbGVtZW50IGNvbCI+PGEgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgZGF0YS10b2dnbGU9Im1vZGFsIiBkYXRhLXRhcmdldD0iI3NlbmRGcmllbmQiPjxpIGNsYXNzPSJmYSBmYS1lbnZlbG9wZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2E+IDxzcGFuPkUtbWFpbDwvc3Bhbj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gaWQ9ImJpZW4tc3VpdmFudCIgY2xhc3M9ImQteHMtZG93bi1ub25lIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLW1kLTEyIGNvbC14bC02IG0tYXV0byI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLW1kLTEyIGNvbC14bC02IG0tYXV0byI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gaWQ9IkJpZ0RhdGEiPg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJ0ZXh0LWNlbnRlciI+PGkgY2xhc3M9ImQtc20tZG93bi1ub25lIGljb24tdHJhaXQtZ2F1Y2hlIj48L2k+TGEgdmlsbGUgZGUgUGFyaXM8aSBjbGFzcz0iZC1zbS1kb3duLW5vbmUgaWNvbi10cmFpdC1kcm9pdGUiPjwvaT48L2gxPgo8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibWFwYmlnZGF0YSI+CiAgICAgICAgICAgIDxkaXYgaWQ9Im1hcEluZm9zQ2l0eSIgY2xhc3M9Im1hcC1pbmZvcy1jaXR5Ij48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWJpZ2RhdGEiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXAtYnV0dG9ucyByb3ciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgCjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICA8L3NlY3Rpb24+DQo8L2Rpdj4NCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIHNpbWlsYWlyZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGV4dC1jZW50ZXIiPjxpIGNsYXNzPSJkLXNtLWRvd24tbm9uZSBpY29uLXRyYWl0LWdhdWNoZSI+PC9pPkxlcyBiaWVucyBxdWkgcG91cnJhaWVudCB2b3VzIGludMOpcmVzc2VyPGkgY2xhc3M9ImQtc20tZG93bi1ub25lIGljb24tdHJhaXQtZHJvaXRlIj48L2k+PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY2Fyb3VzZWxFeGFtcGxlQ29udHJvbHMiIGNsYXNzPSJjYXJvdXNlbCBzbGlkZSIgZGF0YS1yaWRlPSJjYXJvdXNlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2Fyb3VzZWwtaW5uZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWl0ZW0gIGFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3MzctMi1waWVjZXMuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vNTAweDUwMC9pbWFnZXMvYmllbnMvMS83ZDZkN2U5OTJjZmI0MTdmOWU5ZDVhOGY5N2I3OGU1NC9vcmlnaW5hbC9waG90b184ZDVmN2U0N2YzZThjY2Q5NjY3NTVmN2QxYzZhNzdlMC5qcGciIGNsYXNzPSJjYXJkLWltZy10b3AiIGFsdD0iIiB3aWR0aD0iNTAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlnY2FwdGlvbiBjbGFzcz0idGV4dCI+RW4gc2F2b2lyIHBsdXM8L2ZpZ2NhcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSIgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3MzctMi1waWVjZXMuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij5BcHBhcnRlbWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlIDIyIG0mc3VwMjsgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgcGnDqGNlcyAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLXNtLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlndXJlIG9uY2xpY2s9ImxvY2F0aW9uLmhyZWY9Jy81NzczLUVuLXZlbnRlLWEtUGFyaXMtMTQtYXBwYXJ0ZW1lbnQtZGUtdHlwZS1zdHVkaW8tYXZlYy1TVEktUGVybmV0eS5odG1sJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii8vc3RpLWltbW8uc3RhdGljbGJpLmNvbS81MDB4NTAwL2ltYWdlcy9iaWVucy8xLzhmZjQyZjRhZGVmMjIyYjI5ZjIwZDBiOWZiNmI1ZjQ0L29yaWdpbmFsL3Bob3RvXzQxZjIyNjY2NzkyZjc1MWYxZWRjOTFiYTgwYWRmMWIyLmpwZyIgY2xhc3M9ImNhcmQtaW1nLXRvcCIgYWx0PSIiIHdpZHRoPSI1MDAiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib3ZlcmxheSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWdjYXB0aW9uIGNsYXNzPSJ0ZXh0Ij5FbiBzYXZvaXIgcGx1czwvZmlnY2FwdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmlndXJlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IiBvbmNsaWNrPSJsb2NhdGlvbi5ocmVmPScvNTc3My1Fbi12ZW50ZS1hLVBhcmlzLTE0LWFwcGFydGVtZW50LWRlLXR5cGUtc3R1ZGlvLWF2ZWMtU1RJLVBlcm5ldHkuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij5TdHVkaW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZSAxOSBtJnN1cDI7IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIHBpw6hjZSAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLXNtLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlndXJlIG9uY2xpY2s9ImxvY2F0aW9uLmhyZWY9Jy81Nzg2LVNUVURJTy1NRVVCTEUtRU4tRVhDTFVTSVZJVEUuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vNTAweDUwMC9pbWFnZXMvYmllbnMvMy84NzgzNmM2YTM4MTcyZWY2NWE1YTc5NTI2ZjhhZDBiMS9vcmlnaW5hbC9waG90b185ZThhODMyMDIzYzg3NTA1NzJkZWUzMDZiYjE2ZGY0OC5qcGciIGNsYXNzPSJjYXJkLWltZy10b3AiIGFsdD0iIiB3aWR0aD0iNTAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlnY2FwdGlvbiBjbGFzcz0idGV4dCI+RW4gc2F2b2lyIHBsdXM8L2ZpZ2NhcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSIgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3ODYtU1RVRElPLU1FVUJMRS1FTi1FWENMVVNJVklURS5odG1sJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQiPlN0dWRpbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlIDIzIG0mc3VwMjsgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgcGnDqGNlIC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3OTEtRVhDTFVTSVZJVEUtU1RJLVBhcmlzLTExZW1lLUJFTExFVklMTEUuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL3N0aS1pbW1vLnN0YXRpY2xiaS5jb20vNTAweDUwMC9pbWFnZXMvYmllbnMvMi9kNGUyMjQwM2VjNWQxYTdjZjdiM2Q1MGM4YzNhYzA5NS9vcmlnaW5hbC9waG90b18wMTdhNzJlYzcwZGQ0ZDU2MzViNmI0ZDY1YWIxOTkyZC5qcGciIGNsYXNzPSJjYXJkLWltZy10b3AiIGFsdD0iIiB3aWR0aD0iNTAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlnY2FwdGlvbiBjbGFzcz0idGV4dCI+RW4gc2F2b2lyIHBsdXM8L2ZpZ2NhcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSIgb25jbGljaz0ibG9jYXRpb24uaHJlZj0nLzU3OTEtRVhDTFVTSVZJVEUtU1RJLVBhcmlzLTExZW1lLUJFTExFVklMTEUuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij5WaWFnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZSA2MiBtJnN1cDI7IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIHBpw6hjZXMgLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWl0ZW0gIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1zbS02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ3VyZSBvbmNsaWNrPSJsb2NhdGlvbi5ocmVmPScvNTc5Mi1FWENVU0lWSVRFLTMtNC1QaWVjZXMtYS12ZW5kcmUtVml0cnktU3VyLVNlaW5lLmh0bWwnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9zdGktaW1tby5zdGF0aWNsYmkuY29tLzUwMHg1MDAvaW1hZ2VzL2JpZW5zLzMvODFhMmVlNTE5YWQ2MGYyZDhjOWM5MWYyZjU4NDE5Mjgvb3JpZ2luYWwvcGhvdG9fNjc2YzE1ZGFmOGE0MjIzMWRjYmRhZWNiMDY0YmI3NDguanBnIiBjbGFzcz0iY2FyZC1pbWctdG9wIiBhbHQ9IiIgd2lkdGg9IjUwMCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdmVybGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ2NhcHRpb24gY2xhc3M9InRleHQiPkVuIHNhdm9pciBwbHVzPC9maWdjYXB0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiIG9uY2xpY2s9ImxvY2F0aW9uLmhyZWY9Jy81NzkyLUVYQ1VTSVZJVEUtMy00LVBpZWNlcy1hLXZlbmRyZS1WaXRyeS1TdXItU2VpbmUuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij5BcHBhcnRlbWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlIDY3IG0mc3VwMjsgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQgcGnDqGNlcyAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpdHJ5LXN1ci1TZWluZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1zbS02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ3VyZSBvbmNsaWNrPSJsb2NhdGlvbi5ocmVmPScvNTc5NC1FWENMVVNJVklURS1TVEktQkVBVS0yLVBJRUNFUy1SRUNFTlQtTE9HR0lBLmh0bWwnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLy9zdGktaW1tby5zdGF0aWNsYmkuY29tLzUwMHg1MDAvaW1hZ2VzL2JpZW5zLzIvNWI5YTYwNDFkNmYwMzYzMjFjMDBkNWVhZjJmY2U1ZjMvb3JpZ2luYWwvcGhvdG9fZDRmNWZmM2Q1YzllMTg5ODYwYTFlMGFiOGEwOTQxNDYuanBnIiBjbGFzcz0iY2FyZC1pbWctdG9wIiBhbHQ9IiIgd2lkdGg9IjUwMCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdmVybGF5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ2NhcHRpb24gY2xhc3M9InRleHQiPkVuIHNhdm9pciBwbHVzPC9maWdjYXB0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiIG9uY2xpY2s9ImxvY2F0aW9uLmhyZWY9Jy81Nzk0LUVYQ0xVU0lWSVRFLVNUSS1CRUFVLTItUElFQ0VTLVJFQ0VOVC1MT0dHSUEuaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij5BcHBhcnRlbWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlIDQzIG0mc3VwMjsgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgcGnDqGNlcyAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENyw6l0ZWlsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPC9zZWN0aW9uPgogICAgPC9hcnRpY2xlPgoKCgogICAgPGZvb3RlciBpZD0iZm9vdGVyMSI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGZvb3Rlci1saW5rIHRleHQtbWQtY2VudGVyLWludmVyc2UiPiANCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjb3B5cmlnaHQiPsKpIDIwMjAgfCBUb3VzIGRyb2l0cyByw6lzZXJ2w6lzICAtIFRyYWR1Y3Rpb24gcG93ZXJlZCBieSBHb29nbGUgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3BsYW4tZHUtc2l0ZS5odG1sIiA+UGxhbiBkdSBzaXRlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSIvaS9yZWRhYy9sZWdhbHMiID5NZW50aW9ucyBsw6lnYWxlczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iL2kvcmVkYWMvaG9ub3JhaXJlcyIgPk5vcyBob25vcmFpcmVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSIvbm9zLWxpZW5zLmh0bWwiID5MaWVuczwvYT4gDQogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Ii9hZG1pbi8iIHRhcmdldD0iX2JsYW5rIiA+QWRtaW48L2E+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iL3RvdXRlcy1ub3MtYW5ub25jZXMuaHRtbCIgPlRvdXRlcyBub3MgYW5ub25jZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04IGZvb3Rlci1saW5rLTIgdGV4dC1tZC1jZW50ZXItaW52ZXJzZSI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBuby1ndXR0ZXJzIj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20gZXNwYWNlLXBybyBuby1wYWQtcmlnaHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5TZSBjb25uZWN0ZXI8aSBjbGFzcz0iaWNvbi10cmFpdC1kcm9pdGUiPjwvaT48L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2FkbWluL2VzcGFjZV9wcm9wcmlldGFpcmUucGhwIiB0YXJnZXQ9ImJsYW5rIj48aSBjbGFzcz0iZmEgZmEtMnggZmEtc2lnbi1pbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gRXNwYWNlIHByb3ByacOpdGFpcmVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtIHBhcnRzIG5vLXBhZC1yaWdodCAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5BZGjDqXJlbnQ8aSBjbGFzcz0iaWNvbi10cmFpdC1kcm9pdGUiPjwvaT48L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmZuYWltLmZyLyIgdGFyZ2V0PSJfYmxhbmsiPjxpbWcgc3JjPSJpbWFnZXMvZm5haW0ucG5nIiBhbHQ9IiI+PC9hPiAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Zvb3Rlcj4KCgoKCgo8IS0tPHNjcmlwdCBzcmM9Imh0dHBzOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0zLjIuMS5taW4uanMiIGludGVncml0eT0ic2hhMjU2LWh3ZzRnc3hnRlpoT3NFRWFtZE9ZR0JmMTNGeVF1aVR3bEFRZ3hWU05ndDQ9IiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj48L3NjcmlwdD4tLT4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTAuMS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2pxdWVyeXVpLzEuMTIuMS9qcXVlcnktdWkubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2phcmFsbGF4LzEuOS4wL2phcmFsbGF4Lm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9qYXJhbGxheC8xLjkuMC9qYXJhbGxheC1lbGVtZW50Lm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9qYXJhbGxheC8xLjkuMC9qYXJhbGxheC12aWRlby5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcG9wcGVyLmpzLzEuMTIuMy91bWQvcG9wcGVyLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjAuMC1iZXRhLjIvanMvYm9vdHN0cmFwLm1pbi5qcyIgaW50ZWdyaXR5PSJzaGEzODQtYWxwQnBraDFQRk9lcGNjWVZZREI0ZG81VW5iS3lzWDVXWlhtM1h4UHFlNWlLVGZVS2pOa0NrOVNhVnVFWmZsSiIgY3Jvc3NvcmlnaW49ImFub255bW91cyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9ib290c3RyYXAtc2VsZWN0LzEuMTIuNC9qcy9ib290c3RyYXAtc2VsZWN0Lm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9ib2R5bW92aW4vNC4xMS4xL2JvZHltb3Zpbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9TaGFycnJlLzEuMy41L2pxdWVyeS5zaGFycnJlLm1pbi5qcyI+PC9zY3JpcHQ+Cgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvYW5pbWVqcy8yLjIuMC9hbmltZS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvc2Nyb2xsbW9uaXRvci8xLjIuMC9zY3JvbGxNb25pdG9yLmpzIj48L3NjcmlwdD4KCjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9qdmVjdG9ybWFwLzIuMC40L2pxdWVyeS1qdmVjdG9ybWFwLm1pbi5qcyI+PC9zY3JpcHQ+Cgo8c2NyaXB0PgpqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGpRdWVyeShkb2N1bWVudCkub24oJ3N1Ym1pdCcsICdmb3JtJywgZnVuY3Rpb24oKXsgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgbXlmb3JtID0galF1ZXJ5KHRoaXMpOwogICAgICAgICAgICAgICAgdmFyIGFzID0galF1ZXJ5KCcuYXNicnl3JywgbXlmb3JtKTsgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZihhcy5sZW5ndGgpeyAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgdmFyIGR5bmFtaWMgPSBqUXVlcnkoJy4yJywgYXMpOwogICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50dmFsdWUgPSBkeW5hbWljLnZhbCgpOwogICAgICAgICAgICAgICAgICAgIHZhciBvcmlndmFsdWUgPSBkeW5hbWljLmF0dHIoJ2RhdGEtb3JpZycpOwogICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnR2YWx1ZSA9PT0gb3JpZ3ZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3YWl0ZWR2YWx1ZSA9IGR5bmFtaWMuYXR0cignZGF0YS13YWl0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWMudmFsKHdhaXRlZHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7Cjwvc2NyaXB0PgoKDQoNCjxzY3JpcHQ+DQogICAgJCgnLmNvbC1zbS5wYXJ0cy5uby1wYWQtcmlnaHQgYSAnKS5hdHRyKCd0YXJnZXQnLCdibGFuaycpOw0KPC9zY3JpcHQ+DQoNCg0KCjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9saWdodGdhbGxlcnkvMS42LjAvanMvbGlnaHRnYWxsZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9saWdodHNsaWRlci8xLjEuNi9qcy9saWdodHNsaWRlci5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvT3dsQ2Fyb3VzZWwyLzIuMy40L293bC5jYXJvdXNlbC5taW4uanMiPjwvc2NyaXB0PgoKPHNjcmlwdD4KICAgIAo8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Ii9qcy9idWlsZF8zYWU2MzQ3NmU2ZmM5ZmJlZmE3MzRjMWFlMjIzNWUxZi5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2pzL2J1aWxkXzI2ODUxZjIyMDY0NTk2ZTRkMDM4NzA0YjcxZDkyNTMwLmpzIiA+PC9zY3JpcHQ+CgoKCiAgICAgICAgPHNjcmlwdD4KICAgICAgICAKICAgICAgICAgLyoqKioqKioqKioqIGJpZW4gY29uZmlnIG9wdGlvbiBnZW9sb2MgKioqKioqKioqKiogLwogICAgICAgICAgKgogICAgICAgICAgKiBAdHlwZSBBcnJheXxBcnJheQogICAgICAgICAgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSB7fTsKICAgICAgICB2YXIgbWFwOwogICAgICAgIHZhciBpc01hcERyYWdnaW5nOwogICAgICAgIHZhciBpZGxlU2tpcHBlZDsKICAgICAgICB2YXIgdmlzaWJsZTsKICAgICAgICB2YXIgdHJhbnNsYXRlcyA9IHt9OwogICAgICAgIHZhciBnZW9jb2RlcjsKCiAgICAgICAgdmFyIGNvbG9yTWFya2VyczsKICAgICAgICAgCgoKICAgICAgICBmdW5jdGlvbiBnZXRNYXAoTWFwKXsKCiAgICAgICAgICAgIHZhciBtYXAgPSBNYXAubWFwOwogICAgICAgICAgICBvcHRpb25zQ2lyY2xlID0gewogICAgICAgICAgICAgICAgbWFwOiBtYXAsCiAgICAgICAgICAgICAgICBjZW50ZXI6IHsgbGF0IDogNDguODQzMTQ3Mjc4ICwgbG5nOiAgMi4zMjA5MjA3MDYgfSwKICAgICAgICAgICAgICAgIHJhZGl1czogMTUwLAogICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjZmZmMDExJywKICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDAuOCwKICAgICAgICAgICAgICAgIHN0cm9rZVdlaWdodDogMSwKICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmZmYwMTEnLAogICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuMzUKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hcC5zZXRDZW50ZXIobWFwLCB7IGxhdDogNDguODQzMTQ3Mjc4LCBsbmc6IDIuMzIwOTIwNzA2IH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZXMgPSBNYXAuY3JlYXRlQ2lyY2xlKG9wdGlvbnNDaXJjbGUuY2VudGVyLCBvcHRpb25zQ2lyY2xlKTsKICAgICAgICAgICAgICAgICAgICAgICAgTWFwLmFkZE1hcmtlcihNYXAubWFwLCBjaXJjbGVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lcnMoTWFwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVycyhNYXApewogICAgICAgICAgTWFwLnNldE1pblpvb20oTWFwLm1hcCwgMTIpOwogICAgICAgICAgY2FsbE1hcmtlcnMoTWFwKTsKICAgICAgICAgIE1hcC5hZGRNYXBMaXN0ZW5lcihNYXAubWFwLCAnaWRsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoaXNNYXBEcmFnZ2luZykgewogICAgICAgICAgICAgIGlkbGVTa2lwcGVkID0gdHJ1ZTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWRsZVNraXBwZWQgPSBmYWxzZTsKICAgICAgICAgICAgY2FsbE1hcmtlcnMoTWFwKTsKICAgICAgICAgIH0pOwogICAgICAgICAgTWFwLmFkZE1hcExpc3RlbmVyKE1hcC5tYXAsICdkcmFnc3RhcnQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlzTWFwRHJhZ2dpbmcgPSB0cnVlOwogICAgICAgICAgfSk7CiAgICAgICAgICBNYXAuYWRkTWFwTGlzdGVuZXIoTWFwLm1hcCwgJ2RyYWdlbmQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaXNNYXBEcmFnZ2luZyA9IGZhbHNlOwogICAgICAgICAgICBpZiAoaWRsZVNraXBwZWQgPT09IHRydWUpIHsKICAgICAgICAgICAgICBjYWxsTWFya2VycyhNYXApOwogICAgICAgICAgICAgIGlkbGVTa2lwcGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCgogICAgICAgIGZ1bmN0aW9uIGNhbGxNYXJrZXJzKE1hcCl7CiAgICAgICAgICAgIHZhciBib3VuZHMgPSBNYXAuZ2V0Qm91bmRzKE1hcC5tYXApOwogICAgICAgICAgICB2YXIgYm91bmRzQ29vcmRzID0gTWFwLmdldExhdExuZ01pbk1heChib3VuZHMpOwogICAgICAgICAgICB2YXIgbXhMdCA9IGJvdW5kc0Nvb3Jkcy5sYXQubWF4OwogICAgICAgICAgICB2YXIgbW5MdCA9IGJvdW5kc0Nvb3Jkcy5sYXQubWluOwogICAgICAgICAgICB2YXIgbXhMZyA9IGJvdW5kc0Nvb3Jkcy5sbmcubWF4OwogICAgICAgICAgICB2YXIgbW5MZyA9IGJvdW5kc0Nvb3Jkcy5sbmcubWluOwogICAgICAgICAgICAkLmdldCgiL2kvcG9pL2dldFBvaUJldHdlZW4/bWluTGF0PSIrbW5MdCsiJm1heExhdD0iK214THQrIiZtaW5Mbmc9IittbkxnKyImbWF4TG5nPSIrbXhMZykuZG9uZShmdW5jdGlvbihqc29uTWFya2Vycyl7CiAgICAgICAgICAgICAgICBpZihqc29uTWFya2VycyA9PT0gbnVsbCl7CiAgICAgICAgICAgICAgICAgICAganNvbk1hcmtlcnMgPSBbXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNsZWFuTWFya2VycygpOwogICAgICAgICAgICAgICAgYWRkTWFya2Vycyhqc29uTWFya2VycywgTWFwKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjbGVhbk1hcmtlcnMoKXsKICAgICAgICAgICAgdmlzaWJsZSA9IFtdOwogICAgICAgICAgICBmb3Ioa2V5IGluIG1hcmtlcnMpewogICAgICAgICAgICAgICAgaWYobWFya2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpKXsKICAgICAgICAgICAgICAgICAgICAkLmVhY2gobWFya2Vyc1trZXldLCBmdW5jdGlvbihrLCBtYXJrZXIpewogICAgICAgICAgICAgICAgICAgICAgdmFyIE1hcCA9IG1hcmtlci5kYXRhQ29udGFpbmVyLk1hcDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYobWFya2VyLmRhdGFDb250YWluZXIubWFwICE9PSBudWxsICYmIHZpc2libGUuaW5kZXhPZihrZXkpPDApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZS5wdXNoKGtleSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgTWFwLnJlbW92ZU1hcmtlcihNYXAubWFwLCBtYXJrZXIpOwogICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXIuZGF0YUNvbnRhaW5lci5tYXAgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIG1hcmtlcnNba2V5XSA9IFtdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGZ1bmN0aW9uIGFkZE1hcmtlcnMoanNvbk1hcmtlcnMsIE1hcCl7CiAgICAgICAgICAgICQuZWFjaChqc29uTWFya2VycywgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICB2YXIgbWFya2VyRGF0YSA9IHRoaXM7CiAgICAgICAgICAgICAgaWYoIW1hcmtlcnMuaGFzT3duUHJvcGVydHkodGhpcy5ub20pKXsKICAgICAgICAgICAgICAgIG1hcmtlcnNbdGhpcy5ub21dID0gW107CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHsgbGF0OiBtYXJrZXJEYXRhLnksIGxuZzogbWFya2VyRGF0YS54fTsKICAgICAgICAgICAgICB2YXIgbWFwTWFya2VyID0gdmlzaWJsZS5pbmRleE9mKHRoaXMubm9tKT49MCA/IE1hcC5tYXAgOiBudWxsOwogICAgICAgICAgICAgIHRyYW5zbGF0ZXNbdGhpcy5ub21dID0gdGhpcy50cmFuc2xhdGU7CiAgICAgICAgICAgICAgdmFyIG1hcmtlck9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy50cmFuc2xhdGUsCiAgICAgICAgICAgICAgICBpY29uOiBNYXAuY3JlYXRlSWNvbignL2kvcG9pL2dldEljb25NYXA/dHlwZT1wcmQyXycrdGhpcy5ub20pCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB2YXIgbWFya2VyID0gTWFwLmNyZWF0ZU1hcE1hcmtlcihwb3NpdGlvbiwgbWFya2VyT3B0aW9ucywgewogICAgICAgICAgICAgICAgbWFwOiBtYXBNYXJrZXIsCiAgICAgICAgICAgICAgICBNYXA6IE1hcAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmICh2aXNpYmxlLmluZGV4T2YodGhpcy5ub20pPj0wKSB7CiAgICAgICAgICAgICAgICBNYXAuYWRkTWFya2VyKE1hcC5tYXAsIG1hcmtlcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIG1hcmtlcnNbdGhpcy5ub21dLnB1c2gobWFya2VyKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBhZGRCdXR0b25zKCk7CiAgICAgICAgfQogICAgICAgIAoKICAgICAgICBmdW5jdGlvbiBhZGRCdXR0b25zKCl7CiAgICAgICAgICAgICQoIi5tYXAtYnV0dG9ucyIpLmVtcHR5KCk7CiAgICAgICAgICAgICQuZWFjaChtYXJrZXJzLCBmdW5jdGlvbihrLCBta3MpewogICAgICAgICAgICAgICAgaWYobWtzLmxlbmd0aCA+IDApewogICAgICAgICAgICAgICAgICAgIHZhciBpc1Zpc2libGUgPSAodmlzaWJsZS5pbmRleE9mKGspID4gLTEpOwogICAgICAgICAgICAgICAgICAgIGFkZFR5cGVCdXR0b24oaywgaXNWaXNpYmxlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIAogICAgZnVuY3Rpb24gc2hvd0hpZGVNYXJrZXJzKHR5cGUsZm9yY2VkKXsKICAgICAgICBpZihtYXJrZXJzLmhhc093blByb3BlcnR5KHR5cGUpKXsKICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IG1hcmtlcnNbdHlwZV0ubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICBpZihtYXJrZXJzW3R5cGVdW2ldLmRhdGFDb250YWluZXIubWFwID09PSBudWxsICl7CiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLm1hcCA9IG1hcmtlcnNbdHlwZV1baV0uZGF0YUNvbnRhaW5lci5NYXAubWFwOwogICAgICAgICAgICAgICAgICAgIG1hcmtlcnNbdHlwZV1baV0uZGF0YUNvbnRhaW5lci5NYXAuYWRkTWFya2VyKG1hcmtlcnNbdHlwZV1baV0uZGF0YUNvbnRhaW5lci5tYXAsIG1hcmtlcnNbdHlwZV1baV0pOwogICAgICAgICAgICAgICAgICAgY29sb3JUeXBlKHR5cGUsIHRydWUpOwogICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgIG1hcmtlcnNbdHlwZV1baV0uZGF0YUNvbnRhaW5lci5NYXAucmVtb3ZlTWFya2VyKG1hcmtlcnNbdHlwZV1baV0uZGF0YUNvbnRhaW5lci5tYXAsIG1hcmtlcnNbdHlwZV1baV0pOwogICAgICAgICAgICAgICAgIG1hcmtlcnNbdHlwZV1baV0uZGF0YUNvbnRhaW5lci5tYXAgPSBudWxsOwogICAgICAgICAgICAgICAgIGlmKCFmb3JjZWQpewogICAgICAgICAgICAgICAgICAgY29sb3JUeXBlKHR5cGUsIGZhbHNlKTsKICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgY29sb3JUeXBlKHR5cGUsIHRydWUpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgICAgICAKICAgIHZhciBjaGVja2VkVHlwZSA9IFtdOwogICAgZnVuY3Rpb24gc2V0Q2hlY2tlZFR5cGUodGFiKXsgICAgICAgCiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgiY2hlY2tlZFR5cGUiLEpTT04uc3RyaW5naWZ5KHRhYikpOwogICAgfQogICAgZnVuY3Rpb24gYWRkQ2hlY2tlZFR5cGUodHlwZSl7CiAgICAgICAgdmFyIGNoZWNrZWRUeXBlID0gZ2V0Q2hlY2tlZFR5cGUoKTsKICAgICAgICBpZihjaGVja2VkVHlwZS5pbmRleE9mKHR5cGUpID09PSAtMSl7CiAgICAgICAgICAgIGNoZWNrZWRUeXBlLnB1c2godHlwZSk7CiAgICAgICAgICAgIHNldENoZWNrZWRUeXBlKGNoZWNrZWRUeXBlKTsKICAgICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiByZW1vdmVDaGVja2VkVHlwZSh0eXBlKXsgCiAgICAgICAgdmFyIGNoZWNrZWRUeXBlID0gZ2V0Q2hlY2tlZFR5cGUoKTsKICAgICAgICBpZihjaGVja2VkVHlwZS5pbmRleE9mKHR5cGUpICE9IC0xKXsKICAgICAgICAgICBjaGVja2VkVHlwZS5zcGxpY2UoY2hlY2tlZFR5cGUuaW5kZXhPZih0eXBlKSwgMSk7ICAgICAgICAgICAgIAogICAgICAgICAgIHNldENoZWNrZWRUeXBlKGNoZWNrZWRUeXBlKTsKICAgICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBnZXRDaGVja2VkVHlwZSgpewogICAgICAgIGpzb25fdGFiID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiY2hlY2tlZFR5cGUiKTsKICAgICAgICB0YWIgPSBKU09OLnBhcnNlKGpzb25fdGFiKTsKICAgICAgICBpZighdGFiKXsKICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB0YWI7CiAgICAgICAgfSAgICAgICAgCiAgICB9CiAgICBmdW5jdGlvbiBpbml0Q2hlY2tlZFR5cGUoKXsKICAgICAgICBpZih0eXBlb2Ygc2Vzc2lvblN0b3JhZ2UgPT09ICd1bmRlZmluZWQnKSB7ICAgICAgICAgICAgICAKICAgICAgICAgICAgY29uc29sZS5sb2coInNlc3Npb25TdG9yYWdlIG4nZXN0IHBhcyBzdXBwb3J0w6kiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZighZ2V0Q2hlY2tlZFR5cGUoKSkgewogICAgICAgICAgICAgICAgdmFyIGNoZWNrZWRUeXBlID0gW107CiAgICAgICAgICAgICAgICBzZXRDaGVja2VkVHlwZShjaGVja2VkVHlwZSk7CiAgICAgICAgICAgIH0gIAogICAgICAgIH0gICAgICAgIAogICAgfQogICAgaW5pdENoZWNrZWRUeXBlKCk7CiAgICBmdW5jdGlvbiBhZGRUeXBlQnV0dG9uKHR5cGUsIGlzVmlzaWJsZSl7CiAgICAgICAgdmFyIGljb24gPSB0eXBlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvIC9nLCAnJykucmVwbGFjZSgvW8Oow6nDqsOrXS9nLCJlIik7CiAgICAgICAgaWYgKGljb24gPT0gJ2JhcicpewogICAgICAgICAgICBpY29uID0gInZlcnJlIjsKICAgICAgICB9CiAgICAgICAgLy8kKCcubWFwLWJ1dHRvbnMnKS5hcHBlbmQoJyA8ZGl2IGNsYXNzPSJtYXAtYnV0dG9uIiByZWw9IicrdHlwZSsnIj4gPHNwYW4gY2xhc3M9Imljb24tJytpY29uKycgaWNvbi1idG4iPjwvc3Bhbj4gPHNwYW4gY2xhc3M9InRlcm0tYnRuIiBkYXRhLXZpc2libGUgPSAnK2lzVmlzaWJsZSsnPiAnK3RyYW5zbGF0ZXNbdHlwZV0rJyA8L3NwYW4+IDwvZGl2PiAnKTsKICAgICAgICAkKCcubWFwLWJ1dHRvbnMnKS5hcHBlbmQoJzxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1zbS00IGNvbC14cy0xMiI+PGkgY2xhc3M9Imljb24tJytpY29uKyciPjwvaT48bGFiZWwgY2xhc3M9ImNvbnRyb2wgY29udHJvbC1jaGVja2JveCI+Jyt0cmFuc2xhdGVzW3R5cGVdKyc8aW5wdXQgY2xhc3M9Im1hcC1idXR0b24iIHJlbD0iJyt0eXBlKyciIHR5cGU9ImNoZWNrYm94IiBjaGVja2VkPSJjaGVja2VkIiAvPiA8ZGl2IGNsYXNzPSJjb250cm9sX2luZGljYXRvciIgcmVsPSInK3R5cGUrJyI+PC9kaXY+PC9sYWJlbD48L2Rpdj4nKTsKICAgICAgICB2YXIgY2hlY2tlZFR5cGUgPSBnZXRDaGVja2VkVHlwZSgpOwogICAgICAgIGlmKGNoZWNrZWRUeXBlLmluZGV4T2YodHlwZSkgIT0gLTEpewogICAgICAgICAgICBzaG93SGlkZU1hcmtlcnModHlwZSx0cnVlKTsKICAgICAgICB9CiAgICB9CgogICAgICAgIAogICAgZnVuY3Rpb24gY29sb3JUeXBlKHR5cGUsIHNob3cpewogICAgICAgIHZhciB0YXJnZXQgPSAkKCcubWFwLWJ1dHRvbltyZWw9IicrdHlwZSsnIl0nKTsKICAgICAgICB2YXIgY2hlY2tib3ggPSAkKCcuY29udHJvbF9pbmRpY2F0b3JbcmVsPSInK3R5cGUrJyJdJyk7CiAgICAgICAgaWYoc2hvdyl7CiAgICAgICAgICAgIHRhcmdldC5hdHRyKCdkYXRhLXZpc2libGUnLCB0cnVlKTsKICAgICAgICAgICAgY2hlY2tib3guYWRkQ2xhc3MoJ2NoZWNrZWQnKTsKICAgICAgICAgICAgYWRkQ2hlY2tlZFR5cGUodHlwZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGFyZ2V0LmF0dHIoJ2RhdGEtdmlzaWJsZScsIGZhbHNlKTsKICAgICAgICAgICAgY2hlY2tib3gucmVtb3ZlQ2xhc3MoJ2NoZWNrZWQnKTsKICAgICAgICAgICAgcmVtb3ZlQ2hlY2tlZFR5cGUodHlwZSk7CiAgICAgICAgfQogICAgfQoKICAgICAgICBmdW5jdGlvbiBhcHAgKCl7CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgICQuZ2V0U2NyaXB0KCcvaS9qc29uL2dldExiaW1hcHNMaWInLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgJC5hamF4KCcvaS9qc29uL2dldEFwaUtleXM/dHlwZT1kZXRhaWwnKS5kb25lKGZ1bmN0aW9uIChhcGlLZXlzKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSAnamF3Zyc7CiAgICAgICAgICAgICAgICAgICAgCnZhciBzdHlsZXMgPSBbCiAgICAgICAgewogICAgICAgICAgImVsZW1lbnRUeXBlIjogImdlb21ldHJ5IiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiNmNWY1ZjUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJsYWJlbHMuaWNvbiIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ2aXNpYmlsaXR5IjogIm9mZiIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImVsZW1lbnRUeXBlIjogImxhYmVscy50ZXh0LmZpbGwiLAogICAgICAgICAgInN0eWxlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiY29sb3IiOiAiIzYxNjE2MSIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImVsZW1lbnRUeXBlIjogImxhYmVscy50ZXh0LnN0cm9rZSIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjZjVmNWY1IgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAiYWRtaW5pc3RyYXRpdmUubGFuZF9wYXJjZWwiLAogICAgICAgICAgImVsZW1lbnRUeXBlIjogImxhYmVscy50ZXh0LmZpbGwiLAogICAgICAgICAgInN0eWxlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiY29sb3IiOiAiI2JkYmRiZCIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZlYXR1cmVUeXBlIjogInBvaSIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAiZ2VvbWV0cnkiLAogICAgICAgICAgInN0eWxlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiY29sb3IiOiAiI2VlZWVlZSIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZlYXR1cmVUeXBlIjogInBvaSIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAibGFiZWxzLnRleHQuZmlsbCIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjNzU3NTc1IgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAicG9pLnBhcmsiLAogICAgICAgICAgImVsZW1lbnRUeXBlIjogImdlb21ldHJ5IiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiNlNWU1ZTUiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmZWF0dXJlVHlwZSI6ICJwb2kucGFyayIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAibGFiZWxzLnRleHQuZmlsbCIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjOWU5ZTllIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAicm9hZCIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAiZ2VvbWV0cnkiLAogICAgICAgICAgInN0eWxlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiY29sb3IiOiAiI2ZmZmZmZiIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZlYXR1cmVUeXBlIjogInJvYWQuYXJ0ZXJpYWwiLAogICAgICAgICAgImVsZW1lbnRUeXBlIjogImxhYmVscy50ZXh0LmZpbGwiLAogICAgICAgICAgInN0eWxlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiY29sb3IiOiAiIzc1NzU3NSIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZlYXR1cmVUeXBlIjogInJvYWQuaGlnaHdheSIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAiZ2VvbWV0cnkiLAogICAgICAgICAgInN0eWxlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiY29sb3IiOiAiI2RhZGFkYSIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZlYXR1cmVUeXBlIjogInJvYWQuaGlnaHdheSIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAibGFiZWxzLnRleHQuZmlsbCIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjNjE2MTYxIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAicm9hZC5sb2NhbCIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAibGFiZWxzLnRleHQuZmlsbCIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjOWU5ZTllIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAidHJhbnNpdC5saW5lIiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJnZW9tZXRyeSIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjZTVlNWU1IgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAidHJhbnNpdC5zdGF0aW9uIiwKICAgICAgICAgICJlbGVtZW50VHlwZSI6ICJnZW9tZXRyeSIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjZWVlZWVlIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZmVhdHVyZVR5cGUiOiAid2F0ZXIiLAogICAgICAgICAgImVsZW1lbnRUeXBlIjogImdlb21ldHJ5IiwKICAgICAgICAgICJzdHlsZXJzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImNvbG9yIjogIiNjOWM5YzkiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmZWF0dXJlVHlwZSI6ICJ3YXRlciIsCiAgICAgICAgICAiZWxlbWVudFR5cGUiOiAibGFiZWxzLnRleHQuZmlsbCIsCiAgICAgICAgICAic3R5bGVycyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJjb2xvciI6ICIjOWU5ZTllIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdOwoKICAgIHZhciBtYXBPcHRpb25zID0gewogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UsCiAgICAgICAgICAgIHNjcm9sbHdoZWVsOiBmYWxzZSwKICAgICAgICAgICAgZGlzYWJsZURlZmF1bHRVSTogdHJ1ZSwKICAgICAgICAgICAgc3R5bGVzOnN0eWxlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb20gOiAxNCAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5ab29tIDogMTIgLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFuQ29udHJvbCA6IDEgLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVDb250cm9sIDogMSAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tQ29udHJvbCA6IDEgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IH0sIG1hcE9wdGlvbnMsIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWFwQ29udGFpbmVyOiAnI21hcEluZm9zQ2l0eScsCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBhcGlLZXlzW3Byb3ZpZGVyXSwKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IHdpbmRvdy5nZXRNYXAKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgbGJpbWFwcy5jYWxsYmFjayhsYmltYXBzLnByb3ZpZGVyc1twcm92aWRlcl0pKG9wdGlvbnMpCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oImNsaWNrIiwiLm1hcC1idXR0b24iLCBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gJCh0aGlzKS5hdHRyKCJyZWwiKTsKICAgICAgICAgICAgICAgICAgICBzaG93SGlkZU1hcmtlcnModHlwZSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIAogICAgICAgICAgICBhcHAoKTsKICAgICAgICAKCiAgICAgICAgCiAgICA8L3NjcmlwdD4KCgogICAgPHNjcmlwdCBzcmM9Ii9qcy9idWlsZF84Mjg3NmNiYTU2YTY1Yjg5MjQyZWM0MjhiZTJhODllMi5qcyIgZGF0YS1tb2RlbD0ncHJkMicgaWQ9J21vdGV1ckpTJz48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSIvanMvYnVpbGRfMWRlMjE2YzZkMjU3YjFiYTBlYzc1ZmQ3NTk1ZTQ0ZDUuanMiID48L3NjcmlwdD4KICAgIAogICAgICAgICAgICAKCgoKCgo8L2JvZHk+CjwvaHRtbD4=
    http_version: null
  recorded_at: Thu, 09 Apr 2020 14:32:42 GMT
- request:
    method: get
    uri: http://www.sti-immo.com/5780-Coeur-Montparnasse-Duroc.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 09 Apr 2020 14:32:42 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200409.rev1
      Set-Cookie:
      - PHPSESSID=rte4r60635833sgbtadfvaluqa; path=/
      - SRV=c63; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster6-w3
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12599'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 09 Apr 2020 14:32:42 GMT
- request:
    method: get
    uri: http://www.sti-immo.com/5775-Coeur-Montparnasse-Duroc.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 09 Apr 2020 14:32:42 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200409.rev1
      Set-Cookie:
      - PHPSESSID=4bmig98o8q9vuq3ham78dg3mq0; path=/
      - SRV=c65; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster6-w5
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '12587'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 09 Apr 2020 14:32:43 GMT
- request:
    method: get
    uri: http://www.sti-immo.com/5774-2-pieces-au-dernier-etage-en-Exclusivite.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 09 Apr 2020 14:32:43 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200409.rev1
      Set-Cookie:
      - PHPSESSID=n3aeti76bhgeusmhtflaavit7m; path=/
      - SRV=c65; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster6-w5
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13145'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 09 Apr 2020 14:32:43 GMT
- request:
    method: get
    uri: http://www.sti-immo.com/5773-En-vente-a-Paris-14-appartement-de-type-studio-avec-STI-Pernety.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 09 Apr 2020 14:32:43 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200409.rev1
      Set-Cookie:
      - PHPSESSID=gm4o9aq101ucivi3tuuekvv2ii; path=/
      - SRV=c65; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster6-w5
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13419'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 09 Apr 2020 14:32:43 GMT
recorded_with: VCR 5.1.0
