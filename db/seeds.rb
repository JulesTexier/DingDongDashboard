require 'mongo'
require 'typhoeus'

MONGODB_CA_CERT = "./sg.crt"
options = { ssl:true, ssl_verify: true, :ssl_ca_cert => MONGODB_CA_CERT }
# MONGODB_CONN_URL='mongodb://staging00:6rgsPeTykgy4VTrz@SG-ClusterDD-24238.servers.mongodirector.com:49409,SG-ClusterDD-24239.servers.mongodirector.com:49409,SG-ClusterDD-24240.servers.mongodirector.com:49409/giant-tiger-staging?replicaSet=RS-ClusterDD-0&ssl=true'
MONGODB_CONN_URL='mongodb://production00:PgxSkzjHvnpAdWR2@SG-ClusterDD-24238.servers.mongodirector.com:49409,SG-ClusterDD-24239.servers.mongodirector.com:49409,SG-ClusterDD-24240.servers.mongodirector.com:49409/giant-tiger-production?replicaSet=RS-ClusterDD-0&ssl=true'
@tiger = Mongo::Client.new(MONGODB_CONN_URL, options)


# Subscribers

subs_to_copy = @tiger[:subscribers].find({ type: "to_buy", facebook_id:{ '$not' => {'$in' => ["2733984066667639", "2206017152853670", "3708184819199346", "2403736739731256", "3002956769739093", "2858964447535646", "2679960168766800", "3173241789372036", "2791217637607920", "2965658720135661", "2934195296610668", "3578597895516176", "2618277288221450", "2754659654647465", "3016128875105609", "3468117639896200", "2983982508293123", "2286795431405974", "2393377750748757", "2654505881312228", "3973441652727141", "2937873876224757", "2719869428081768", "2773195299427960", "2963987333653774", "2679951235437249", "2613511982101009", "2794984973917280", "2947069918678886", "2645640615556937", "3763504720328057", "2698459186897024", "2995265693825799", "3426975734039240", "2509642519144478", "3794129033960990", "2619486984837191", "3500495879993132", "3476287455746224", "2804783819606312", "2765411403545176", "3401648179905181", "3009389299124931", "2947209958636391", "3240749232606344", "2727879873969775", "2900902616619734", "2707178256056822", "3510766028997847", "2775143462575513", "2491472794313861", "2422281527876529", "2715043028585130", "2614054272033778", "2338467596254227", "3497240150317766", "3716846121688662", "3450902304951508", "2700048276769401", "2703354163079140", "2785555498201053", "2965368556894305", "3465250543548578", "3264383006969402", "2654751254622716", "3477737818964168", "2951742844857021", "3723901650984053", "2784753121562799", "2829418767126060", "3348096181927477", "3523665137706445", "2776626715785420", "2641365385962788", "2919824878060718", "2741368475945633", "2681573561940921", "2719404864762508", "2789569681127621", "2743779345705062", "2954342371251950", "3478242155550467", "2180392998730546", "2577526752373350", "2782896715097288", "2896376030383817", "3446993122040361", "3532603653480193", "2838363072915181", "2929476113798465", "2816296641750189", "3451442588263180", "2284562468313823", "3576560509051819", "2475794959192625", "2760529337361860", "3604438732931777", "4110649732340186", "2924877647604821", "2517481811697503", "2575666055875883", "2827241380676660", "2924387940960130", "2762267907193054", "2909058152490087", "3019771548088045", "2708468672572482", "2453580548081827", "2477783512325582", "3487512797990613", "3955591804454775", "3532063680202165", "2864570246969229", "2866529066745350", "2843607945714951", "3001591643225766", "2563806143741343", "3011033858941645", "2825999414182491", "2694387947347374", "2528333587276174", "3500585520012652", "2587826244673349", "2932088273520268", "2876647149069127", "2335437839889527", "2874398072606266", "2703143429762257", "3263601167001092", "2913110248710981", "3034519823239221", "2816224375162137", "3402909356392888", "2827641220632020", "2763731940379502", "3430201070342968", "2800234753355724", "3024671864211253", "2731300800316393", "2791448154265097", "3153747714644907", "2725656387530283", "2768513493231492", "3693190197421475", "2931115136919865", "2869251036447610", "3431981450209631", "3082330081790874", "2633596533429783", "2606204456144750", "2847665228659054", "2822551634533151", "2832389966821463", "2418899508215501", "2584480441679596", "3264185100262846", "3554308234641890", "3572784359462360", "2968671429844624", "3823208291037756", "3850796224961235", "2538844949574773", "2669158129798128", "2651600508272212", "2907561989328815", "2679387148812106", "2764912926879818", "2900803756624520", "3382114945139104", "4139403962752016", "3411164895624500", "3238128172882057", "2769799793141765", "3075432452508265", "3411284602231409", "3475049372566163", "2371103996324984", "3473172502753812", "2719334874780459", "3512747198798739", "2680066105407760", "2576050042505730", "2883064751731519", "2804840079610892", "3490792524264249", "2443397369093888", "2838363072915181", "3548010131939363", "3082432285153336", "2754578057983298", "2832921966801564", "2295355850564128", "2740748612640101", "3013537391999430", "2760742030707633", "3410140859060474", "2631587353562004", "2665777553520082", "4018295698184264", "2829731800473638", "2827312937335451", "3002173523140724", "2718206591630327", "2700649846721139", "2859153337439402", "4038287032851839", "2593102597481820", "2594547594000331", "2941076322589617", "2622602227795428", "3730892070284992", "2643295772415600", "1735481563243318", "3486154318122895", "4000387386653101", "2788964787806801", "2559397317521125", "2964211636934524", "4204011029616556", "2802970119788435", "2916435978421127", "2664254900355057", "3259603357454161", "2489080697864456", "2937262559650209", "3218618308167401", "2979216022100750", "2680256388694982", "2723422187742701", "2588247171303562", "3315374391815852", "3249641368382813", "2958957867501201", "2564869066968585", "3205246126172537", "2716254701825273", "2775099802586795", "2802314106501725", "2311098995657109", "2715381665165917", "3586850304690383", "2914883985259912", "3047702855260785", "2679378122182886", "2854695244591341", "3359772377371809", "3732787290073382", "2605654546211357", "3106664159368233", "2894378333917680", "2502205903219465", "2984919454873294", "3343073215709076", "3140237625988702", "2541165609345209", "2830203890397919", "2796034550517435", "3012556725435009", "2710184445737423", "2331613643605722", "2564384160351563", "2680053878784018", "2862445657166590", "4109883769037190", "2968477213232562", "3412705778803538", "2675342729245977", "2765681786849790", "2559935910800937", "2713774572034760", "3613270402080062", "2776307679123580", "2912419512169573", "2551590918284197", "4163730486986022", "3275378285824096", "2722768371132828", "3085163058201849", "3498414890229900", "3421639647906975", "4192691760756491", "2887033584690188", "2569062149871348", "1545993712191474", "2440657559372896", "2804067666326091", "3500483643359872", "2803101429781635", "3260398657322721", "2952730964776977", "2394591470646253", "2708402615944285", "2210750722360674", "3056660264385460", "3665679650170742", "2564025473695618", "2791577437584618", "2254909897945074", "2363946127038657", "2855548801150114", "2860423543979138", "3532911726779678", "2644330842363008", "2849944935097875", "2814291661948054", "2511068642326551", "3598437076864274", "3015659398496773", "3521550887915160", "2890675584326536", "3699545476752800", "2989752947722926", "3878638655480369", "3539723119433468", "2814291661948054", "2814291661948054", "2814291661948054", "2838363072915181", "2838363072915181", "2691965790917645", "3697447990295917", "2715628941888966", "3029536907109661", "2803180643053730", "3907650909245872", "3033147773383534", "3700236796683804", "3555782924494080", "3648313695210498", "3216805691667500", "3649421208463666", "2743211525764653", "2812374665472869", "2902666346445819", "2750282461721207", "2834031233353008", "3630298810345886", "2948850321804998", "2656725074440405", "2591778460939265", "3578773258816410", "3786319891408810", "3556412111098673", "3019876114703531", "2814291661948054", "2779824462097468", "2818861508180563", "2496410647130798", "3507501099321325", "2906926326033270", "3000161066714357", "2863793660334246", "2769102119792474", "2733767593397562", "2589289807865102", "2838363072915181", "3495459300527389", "3340383712643165", "3334404883240510", "2915130091884159", "3366407926708818", "3450562228351847", "2745825325506006", "2806407386145154", "2738029749579438", "2738029749579438", "2738029749579438", "2738029749579438", "2574619732661102", "3288613951152156", "2769809763072244", "2905640852812268", "3491242530946173", "2838363072915181", "2838363072915181", "2773396472781441"]}}})
puts "#{subs_to_copy.count} à copier"

subs_to_copy.each do |sub_to_copy|
  # sub_to_copy = subs_to_copy.first
  sub = Subscriber.new
  sub.firstname = sub_to_copy['firstname']
  sub.lastname = sub_to_copy['lastname']
  sub.email = sub_to_copy['email']
  sub.phone = sub_to_copy['phone']
  sub.facebook_id = sub_to_copy['facebook_id']
  sub.is_active = sub_to_copy['is_active']
  sub.created_at = sub_to_copy['created_at']
  sub.max_price = sub_to_copy['search_criteria'][0]['buy_price_max']
  sub.min_surface = sub_to_copy['search_criteria'][0]['surface_min']
  sub.min_rooms_number = sub_to_copy['search_criteria'][0]['rooms_number']
  sub.min_floor = sub_to_copy['search_criteria'][0]['min_floor']
  sub.min_elevator_floor = sub_to_copy['search_criteria'][0]['min_floor_elevator']


  sub.save

  puts "*"*10
  sub_to_copy['search_criteria'][0]['areas'].each do |area|
    # puts area
    sa = SelectedArea.new
    # puts sub
    sa.subscriber = sub
    sa.area = Area.where(name: area).first
    sa.save!
  end

  puts "*"*10
  puts sub.facebook_id

    ## J'appelle GetInfos de ManyChat en get pour avoir les informations d'un subscriber via son facebook_id
    get_infos_request = Typhoeus::Request.new(
      "https://api.manychat.com/fb/subscriber/getInfo?subscriber_id=#{sub.facebook_id}",
      method: :get,
      headers: { "Content-type" => "application/json", "Authorization" => "Bearer 93323:2a21d906a553fb6bb3e7cb3101bd3ff8"  },
    )
    get_infos_request.run

    # puts get_infos_request.to_s

    response = JSON.parse(get_infos_request.response.options[:response_body])

    # Je loop dans le hash et récupère les datas des custom_fields
    response["data"]["custom_fields"].each do |cusfield|
      # Dés que j'atteins un custom field dont le nom est "ID"
      # je fais une requete pour updaté son custom field fiavec sa nouvelle ID
      # puts cusfield = cusfield[]
      if cusfield["name"] == "id"
        body_request = {}
        # Je fais un hash ISO manychat
        body_request[:subscriber_id] = sub.facebook_id
        body_request[:field_name] = "id"
        body_request[:field_value] = sub.id.to_s ## <- TA NEW ID
        puts body_request.to_json
        # Je fais la requete post de set Custom Field
        set_custom_field_request = Typhoeus::Request.new(
          "https://api.manychat.com/fb/subscriber/setCustomFieldByName",
          method: :post,
          body: body_request.to_json,
          headers: { "Content-type" => "application/json", "Authorization" => "Bearer 93323:2a21d906a553fb6bb3e7cb3101bd3ff8" },
        )
        set_custom_field_request.run
        # puts JSON.parse(set_custom_field_request.response.options[:response_body])

        body_request = {}
        # Je fais un hash ISO manychat
        body_request[:subscriber_id] = sub.facebook_id
        body_request[:field_name] = "criteria_page"
        body_request[:field_value] = "https://giant-cat-staging.herokuapp.com/subscribers/#{sub.id.to_s}/edit" ## <- TA NEW ID
        puts body_request.to_json
        # Je fais la requete post de set Custom Field
        set_custom_field_request = Typhoeus::Request.new(
          "https://api.manychat.com/fb/subscriber/setCustomFieldByName",
          method: :post,
          body: body_request.to_json,
          headers: { "Content-type" => "application/json", "Authorization" => "Bearer 93323:2a21d906a553fb6bb3e7cb3101bd3ff8" },
        )
        set_custom_field_request.run

      end
    end


end