---
http_interactions:
- request:
    method: get
    uri: http://www.hempton-paris.com/a-vendre/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:50 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=j1d2ssu665tcmgl1krdqlcr3c0; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '10462'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:50 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/a-vendre/2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:50 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=4d0gjca3qamisj6bg9jjnk6i3p; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '9401'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:50 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1370-RARE-Appartement-2-pieces-Pierre-1er-de-Serbie-Paris-XVI-prestige.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:50 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=uvf298h8tuuikon48igk8ncc3a; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13529'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:50 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1269-BASTILLE-REPUBLIQUE-LOCAUX-COMMERCIAUX-530M.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:51 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=im6coulkkb8toc89sus3qo8siv; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14427'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:51 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1340-Paris-11-Studio-40-m.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:51 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=7l9imbilno9d2ov4ceb78pkufs; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '15084'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:51 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1327-Exceptionnel-Luxueux-2-pieces-Paris-XVI-eme-Nord-prestige.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:51 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=0510e80gnqa8au78qha13kr4sd; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14674'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:51 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1334-Appartement-Atypique-Paris-XVI-3-pieces-45-m2.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:51 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=8cbq0dhlqdb05s0cfkcqafp9q9; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '15779'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIiBjbGFzcz0ibm8tanMiPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICAgICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wIj4KICAgICAgICA8dGl0bGU+dmVudGUgQXBwYXJ0ZW1lbnQgQXR5cGlxdWUgUGFyaXMgWFZJIC0gMyBwacOoY2VzIC0gNDUgbTI8L3RpdGxlPgogICAgICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJ2ZW50ZSBhcHBhcnRlbWVudCAzIHBpw6hjZXMgUGFyaXMgOiBBcHBhcnRlbWVudCBBdHlwaXF1ZSBQYXJpcyBYVkkgLSAzIHBpw6hjZXMgLSA0NSBtMiI+CiAgICAgICAgPG1ldGEgbmFtZT0iYXV0aG9yIiBjb250ZW50PSIiPgogICAgICAgIA0KICAgIDxtZXRhIG5hbWU9InA6ZG9tYWluX3ZlcmlmeSIgY29udGVudD0iNmU4OGVhNjk5YjMwYWM0NGVkZTMyMzIzYzQzZDNhY2QiLz4NCgogICAgICAgICAgICA8bGluayByZWw9Imljb24iIGhyZWY9ImltYWdlcy9mYXZpY29uLnBuZyIgdHlwZT0iaW1hZ2UvcG5nIiAvPgogICAgICAgICAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9ImltYWdlcy9mYXZpY29uLnBuZyIgdHlwZT0iaW1hZ2UvcG5nIiAvPgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBuYW1lPSJnZW5lcmF0b3IiIGNvbnRlbnQ9InZhbml0eTIiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmsgIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwOi8vd3d3LmhlbXB0b24tcGFyaXMuY29tLzEzMzQtQXBwYXJ0ZW1lbnQtQXR5cGlxdWUtUGFyaXMtWFZJLTMtcGllY2VzLTQ1LW0yLmh0bWwiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgcHJvcGVydHk9ImdlbmVyYXRvciIgY29udGVudD0iYk9iY2F0IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAKCiAgICAgICAgPGJhc2UgaHJlZj0iaHR0cDovL3d3dy5oZW1wdG9uLXBhcmlzLmNvbS8iPgoKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgCiAgICAKICAgICAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IkFwcGFydGVtZW50IEF0eXBpcXVlIFBhcmlzIFhWSSAtIDMgcGkmZWdyYXZlO2NlcyAtIDQ1IG0yIiAvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJBcnRpY2xlIiAvPgogICAgICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9vcmlnaW5hbC9waG90b18wMjQyNjJmMGVhNjQwYjdmN2ExYmU3YmU5MTNkYjdhYi5qcGciIC8+CiAgICAKCiAgICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL2Nzcy9idWlsZF9jYTFiODljN2MyYjhlMGZhNTZhZmZlMTMzZTZlMjlkYy5jc3MiIC8+CiAgICAgICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii8vY29kZS5qcXVlcnkuY29tL3VpLzEuMTAuNC90aGVtZXMvc21vb3RobmVzcy9qcXVlcnktdWkuY3NzIiAvPgogICAgICAgIAogICAgICAgICAKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvY3NzL2ZvbnRzL3N0eWxlLmNzcyIgLz4KICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvY3NzL2V4cHJlLmNzcyIgLz4KICAgICAgICAgCiAgICAgICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPgogICAgICAgIDwhLS1baWYgbHQgSUUgOV0+CiAgICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0PgogICAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4KICAgICAgICA8IVtlbmRpZl0tLT4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CjxzY3JpcHQ+KGZ1bmN0aW9uKHcsZCxzLGwsaSl7IHdbbF09d1tsXXx8W107d1tsXS5wdXNoKCB7ICdndG0uc3RhcnQnOgogICAgbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLAogICAgICAgICAgICBqPWQuY3JlYXRlRWxlbWVudChzKSxkbD1sIT0nZGF0YUxheWVyJz8nJmw9JytsOicnO2ouYXN5bmM9dHJ1ZTtqLnNyYz0KICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nK2krZGw7Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLGYpOwogICAgICAgICAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1OTUZUNFFXJyk7PC9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgIDwvaGVhZD4KCiAgICA8Ym9keSBpZD0icGFnZURldGFpbCIgY2xhc3M9IiI+CgogICAgICAgICAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgo8bm9zY3JpcHQ+PGlmcmFtZSBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLU5NRlQ0UVciCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgoKICAgIAoKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgCgogICAgCgoKICAgIAogICAgCiAgICAgICAgICAgIAogICAgICAgIAoKCgoKICAgIAoKICAgIAoKCgogICAgCiAgICAKICAgICAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKCgoKCiAgICAKCiAgICAgPCEtLSBDYXB0dXJlIGNvb3Jkb25uZWVzIHBhciBkZWZhdWx0IC0tPgogICAgICAgIAogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgogICAgCiAgICAKICAgIAogICAgICAgIDxoZWFkZXI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICANCiAgICA8ZGl2IGNsYXNzPSJhY3Rpb24iPg0KICAgICAgICA8YSBjbGFzcz0iYWN0aW9uLWl0ZW0gYWN0aW9uLWxpbmsiIGhyZWY9Ii9jb250YWN0Lmh0bWwiPkNvbnRhY3Q8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIAogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjdGlvbi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmxhZyBmbGFnX2ZyIGFjdGl2ZUxhbmcgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW5MYW5ndWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxhZyBmbGFnX2ZyIGZsYWdfZnJfZmFkZWQgaGlkZSByaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvL3d3dy5oZW1wdG9uLXBhcmlzLmNvbS8xMzM0LUFwcGFydGVtZW50LUF0eXBpcXVlLVBhcmlzLVhWSS0zLXBpZWNlcy00NS1tMi5odG1sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImxhbmciIHZhbHVlPSJmciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsYWcgZmxhZ19lbiBmbGFnX2VuX2ZhZGVkICByaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvL3d3dy5oZW1wdG9uLXBhcmlzLmNvbS8xMzM0LUFwcGFydGVtZW50LUF0eXBpcXVlLVBhcmlzLVhWSS0zLXBpZWNlcy00NS1tMi5odG1sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImxhbmciIHZhbHVlPSJlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICANCiAgICA8L2Rpdj4NCgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgaGVhZGVyVG9wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4NCiAgICAgICAgICAgIDxhIGhyZWY9Ii8iIGlkPSJsb2dvU2l0ZSIgY2xhc3M9InRleHQtcmlnaHQiID48aW1nIHNyYz0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvbG9nb1NpdGUucG5nIiAvPjwvYT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnRGdHIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvb3JkcyBoZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iY29vcmRzIj4KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgPGxpPg0KICAgICAgICAyMCBydWUgU2NoZWZmZXIgNzUwMTYgUGFyaXMNCiAgICA8L2xpPg0KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0ZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAxIDU2IDI4IDA2IDIwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0ibWFpbHRvOnRyb2NhZGVyb0BoZW1wdG9ucGFyaXMuY29tIj50cm9jYWRlcm9AaGVtcHRvbnBhcmlzLmNvbTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbmF2Q29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSBidG4tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjbmF2YmFyIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1jb250cm9scz0ibmF2YmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InNlYXJjaC10b2dnbGUgYnRuLXRvZ2dsZSB2aXNpYmxlLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tcmVjaGVyY2hlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibmF2YmFyVGhlbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsb3NlTmF2IHZpc2libGUteHMiPiZ0aW1lczs8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvIiB0YXJnZXQ9IiIgPkFjY3VlaWw8L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvYS12ZW5kcmUvMSIgdGFyZ2V0PSIiID5BY2hldGVyPC9hPgogICAgCiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGxpIGNsYXNzPSJoYXMtZHJvcGRvd24gIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2VzdGltYXRpb24uaHRtbCIgdGFyZ2V0PSIiID5WZW5kcmUgdm90cmUgYmllbjwvYT4KICAgIAogICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duIGRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxsaSBjbGFzcz0iICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9iaWVucy12ZW5kdXMvMSIgdGFyZ2V0PSIiID5CaWVucyB2ZW5kdXM8L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxsaSBjbGFzcz0iICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hLWxvdWVyLzEiIHRhcmdldD0iIiA+TG91ZXI8L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvZ2VzdGlvbi5odG1sIiB0YXJnZXQ9IiIgPkdlc3Rpb24gbG9jYXRpdmU8L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGFzLWRyb3Bkb3duICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8jIiB0YXJnZXQ9IiIgPkwnYWdlbmNlPC9hPgogICAgCiAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24gZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGxpIGNsYXNzPSIgIj4KICAgICAgICAgICAgPGEgaHJlZj0iL3F1aS1zb21tZXMtbm91cy5odG1sIiB0YXJnZXQ9IiIgPlF1aSBzb21tZXMtbm91czwvYT4KICAgIAogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxsaSBjbGFzcz0iICI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9lcXVpcGUuaHRtbCIgdGFyZ2V0PSIiID5MJ8OpcXVpcGU8L2E+CiAgICAKICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSIvcmVjcnV0ZW1lbnQuaHRtbCIgdGFyZ2V0PSIiID5SZWNydXRlbWVudDwvYT4KICAgIAogICAgPC9saT4gICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGxpIGNsYXNzPSIgIj4KICAgICAgICAgICAgPGEgaHJlZj0iL2NvbnRhY3QuaHRtbCIgdGFyZ2V0PSIiID5Db250YWN0PC9hPgogICAgCiAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiAiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmp1d2FpLmNvbS9IZW1wdG9uLVBhcmlzIiB0YXJnZXQ9Il9ibGFuayIgPuS4reaWh+e9keermTwvYT4KICAgIAogICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9uYXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXRpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY3Rpb24gcGFuaWVyIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9uIGxhbmd1ZXMiPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvaGVhZGVyPgogICAgCiAgICAKICAgICAgICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvblNlYXJjaCBpbm5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsb3NlTmF2IHZpc2libGUteHMiPiZ0aW1lczs8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgY2xhc3M9ImNvbnRhaW5lclNlYXJjaCB2MiIgZGF0YS1zZWxlY3RwaWNrZXItbm9yZXN1bHRzID0gIkF1Y3VuIHLDqXN1bHRhdCIgYWN0aW9uPSIvcmVjaGVyY2hlLyIgcm9sZT0iZm9ybSI+CiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0zIGNvbC1zbS02Ij4gIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJkYXRhW1NlYXJjaF1bb2ZmcmVkZW1dIiBpZD0iaW5wdXRPZmZyZWRlbSIgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3RwaWNrZXIiICAgZGF0YS1zdHlsZT0iYnRuLXNlbGVjdHBpY2tlciI+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPgogICAgICAgICAgICBWZW50ZQogICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMCIgPgogICAgICAgICAgICBWZW50ZSBJbW1vYmlsaWVyIFByb2Zlc3Npb25uZWwKICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTEiID4KICAgICAgICAgICAgTG9jYXRpb24gSW1tb2JpbGllciBQcm9mZXNzaW9ubmVsCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIiID4KICAgICAgICAgICAgTG9jYXRpb24KICAgICAgICA8L29wdGlvbj4KICAgIDwvc2VsZWN0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0zIGNvbC1zbS02Ij4gIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJkYXRhW1NlYXJjaF1baWR2aWxsZWNvZGVdW10iIGlkPSJpbnB1dExvY2FsaXNhdGlvbiIgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3RwaWNrZXIiIG11bHRpcGxlIHRpdGxlPSJMb2NhbGlzYXRpb24iIGRhdGEtbGl2ZS1zZWFyY2g9dHJ1ZSBkYXRhLXN0eWxlPSJidG4tc2VsZWN0cGlja2VyIj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idm9pZCI+TG9jYWxpc2F0aW9uPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ2aWxsZS01NyIgPgogICAgICAgICAgICAxNDgwMCAtIERlYXV2aWxsZQogICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ2aWxsZS0xOTk0IiA+CiAgICAgICAgICAgIDIwMjE3IC0gU2FpbnQtRmxvcmVudAogICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ2aWxsZS0xIiA+CiAgICAgICAgICAgIFRvdXRlIGxhIHZpbGxlIC0gUGFyaXMKICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iY29kZS0yIiA+CiAgICAgICAgICAgIDc1MDAyIC0gUGFyaXMKICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iY29kZS0xMSIgPgogICAgICAgICAgICA3NTAxMSAtIFBhcmlzCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImNvZGUtMTYiID4KICAgICAgICAgICAgNzUwMTYgLSBQYXJpcwogICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ2aWxsZS00NzkiID4KICAgICAgICAgICAgOTEyMjAgLSBCcsOpdGlnbnktc3VyLU9yZ2UKICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idmlsbGUtNDcxIiA+CiAgICAgICAgICAgIDkxMzEwIC0gTGluYXMKICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idmlsbGUtOSIgPgogICAgICAgICAgICA5MjIwMCAtIE5ldWlsbHktc3VyLVNlaW5lCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InZpbGxlLTE0MCIgPgogICAgICAgICAgICA5NDEwMCAtIFNhaW50LU1hdXItZGVzLUZvc3PDqXMKICAgICAgICA8L29wdGlvbj4KICAgIDwvc2VsZWN0PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0yIGNvbC1zbS02Ij4gIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImRhdGFbU2VhcmNoXVtwcml4bWF4XSIgcGxhY2Vob2xkZXI9IkJ1ZGdldCBtYXhpIiBpZD0iaW5wdXRfcHJpeE1heCIgdmFsdWU9IiIgY2xhc3M9ImZvcm0tY29udHJvbCBudW1lcmljSW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wteHMtMTIgY29sLW1kLTIgY29sLXNtLTYiPiAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iZGF0YVtTZWFyY2hdW3BpZWNlc21pbl0iIHBsYWNlaG9sZGVyPSJOYi4gcGnDqGNlcyBtaW4uIiBpZD0iaW5wdXRQaWVjZXNNaW4iIHZhbHVlPSIiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG5TZWFyY2ggY29sLXhzLTEyIGNvbC1tZC0yIGNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPlJlY2hlcmNoZXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZHZTZWFyY2hCdG4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjaGVyY2hlIGF2YW5jw6llPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbkZsZWNoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1taW5pLWYtcmlnaHQgIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgCiAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgYWR2U2VhcmNoICI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXhzLTEyIGNvbC1tZC0zIGNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImRhdGFbU2VhcmNoXVtOT19ET1NTSUVSXSIgcGxhY2Vob2xkZXI9IlLDqWbDqXJlbmNlIiBpZD0iaW5wdXRSZWYiIGNsYXNzPSJmb3JtLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNvbC14cy0xMiBjb2wtbWQtMiBjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJkYXRhW1NlYXJjaF1bcHJpeG1pbl0iIHBsYWNlaG9sZGVyPSJCdWRnZXQgbWluaW11bSIgaWQ9ImlucHV0X2R1YWxQcml4TWluIiB2YWx1ZT0iIiAgY2xhc3M9ImZvcm0tY29udHJvbCBudW1lcmljSW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNvbC14cy0xMiBjb2wtbWQtMiBjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJkYXRhW1NlYXJjaF1bc3VyZm1pbl0iIHBsYWNlaG9sZGVyPSJTdXJmYWNlIG1pbi4gKG3CsikiIGlkPSJpbnB1dFN1cmZNaW4iIHZhbHVlPSIiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgYWR2U2VhcmNoVGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcml0w6hyZXMgc3VwcGzDqW1lbnRhaXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wteHMtMTIgY29sLW1kLTEyIGNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94LWlubGluZSI+CiAgICA8ZGl2IGNsYXNzPSJhZHZDaGVjayI+CiAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJkYXRhW1NlYXJjaF1bcGFya2luZ10iIGlkPSJwYXJraW5nIiB2YWx1ZT0iT1VJIiBkYXRhLWxhYmVsPSJQYXJraW5nIj4gCiAgICAgICAgPGxhYmVsIGZvcj0icGFya2luZyI+PC9sYWJlbD4KICAgICAgICA8c3BhbiBjbGFzcz0iYWR2Q2hlY2tUZXJtIj5QYXJraW5nPC9zcGFuPgogICAgPC9kaXY+CjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrYm94LWlubGluZSI+CiAgICA8ZGl2IGNsYXNzPSJhZHZDaGVjayI+CiAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJkYXRhW1NlYXJjaF1bVEVSUkFTU0VdIiBpZD0iVEVSUkFTU0UiIHZhbHVlPSJPVUkiIGRhdGEtbGFiZWw9IlRlcnJhc3NlIj4gCiAgICAgICAgPGxhYmVsIGZvcj0iVEVSUkFTU0UiPjwvbGFiZWw+CiAgICAgICAgPHNwYW4gY2xhc3M9ImFkdkNoZWNrVGVybSI+VGVycmFzc2U8L3NwYW4+CiAgICA8L2Rpdj4KPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICA8L2Zvcm0+ICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9zZWN0aW9uPgogICAgCiAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAogICAgCiAgICAKCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKCiAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9IkNhbGN1bGV0dGUiIGNsYXNzPSJtb2RhbCBmYWRlIiAgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0ibXlMYXJnZU1vZGFsTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIiBhY3Rpb249IiIgb25zdWJtaXQ9InJldHVybiBjYWxjdWxhdGVDcmVkaXQodGhpcyk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIHRoZW1UaXRsZSI+Q2FsY3VsZXR0ZTwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtb250YW50IiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCI+TW9udGFudCAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0IiBuYW1lPSJtb250YW50IiBpZD0ibW9udGFudCIgdmFsdWU9IjU3NTAwMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idGF1eCIgY2xhc3M9ImNvbC1tZC00IGNvbnRyb2wtbGFiZWwiPlRhdXggKCUpICogPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgc3RlcD0iMC4wMSIgbWluPSIwIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJ0YXV4IiBpZD0idGF1eCIgcmVxdWlyZWQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYXBwb3J0IiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCI+QXBwb3J0IDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBudW1lcmljSW5wdXQiIG5hbWU9ImFwcG9ydCIgaWQ9ImFwcG9ydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZHVyZWUiIGNsYXNzPSJjb2wtbWQtNCBjb250cm9sLWxhYmVsIj5EdXLDqWUgKEFubsOpZXMpICogPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbnVtZXJpY0lucHV0IiBuYW1lPSJkdXJlZSIgaWQ9ImR1cmVlIiByZXF1aXJlZD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImR1cmVlIiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCB0ZXh0LWxlZnQiPk1lbnN1YWxpdMOpcyA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXN1bHQiPiA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCBvYmxpZ0NoYW1wIHB1bGwtbGVmdCI+KkNoYW1wcyBvYmxpZ2F0b2lyZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgcmlnaHQiPkNhbGN1bGVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWNvbnRlbnQgLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtZGlhbG9nIC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgaWQ9InNlbmRGcmllbmQiIGNsYXNzPSJtb2RhbCBmYWRlIiAgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0ibXlMYXJnZU1vZGFsTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iLzEzMzQtQXBwYXJ0ZW1lbnQtQXR5cGlxdWUtUGFyaXMtWFZJLTMtcGllY2VzLTQ1LW0yLmh0bWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0ic2VuZEZyaWVuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkYXRhW0NvbnRhY3RdW3VybF0iIHZhbHVlPSJodHRwOi8vd3d3LmhlbXB0b24tcGFyaXMuY29tLzEzMzQtQXBwYXJ0ZW1lbnQtQXR5cGlxdWUtUGFyaXMtWFZJLTMtcGllY2VzLTQ1LW0yLmh0bWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUgdGhlbVRpdGxlIj5QYXJ0YWdlcjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkYXRhW0NvbnRhY3RdW25vbV0iIGNsYXNzPSJjb2wtbWQtNCBjb250cm9sLWxhYmVsIj5Wb3RyZSBub20gKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJkYXRhW0NvbnRhY3RdW25vbV0iIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0YVtDb250YWN0XVtmcm9tXSIgY2xhc3M9ImNvbC1tZC00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIGFkcmVzc2UgbWFpbCAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJkYXRhW0NvbnRhY3RdW2Zyb21dIiByZXF1aXJlZD0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRhdGFbQ29udGFjdF1bdG9dIiBjbGFzcz0iY29sLW1kLTQgY29udHJvbC1sYWJlbCI+TWFpbCBkZSB2b3RyZSBhbWkgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iZGF0YVtDb250YWN0XVt0b10iIHJlcXVpcmVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhc2JyeXciIHN0eWxlPSJkaXNwbGF5Om5vbmUiPgo8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXNfZHluYSIgZGF0YS13YWl0PSIxNDQ5NGM4MGMzYmIwZTMzZDFlZDQzODQyNGUwZDVkNCIgZGF0YS1vcmlnPSJmMWY1M2M5ZDhlNjJkZGNmYTZiOGJiY2Y1ZWZkNDM2NSIgY2xhc3M9ImFzX2ZpZWxkIGFzX2ZpZWxkLTIgMiIgdmFsdWU9ImYxZjUzYzlkOGU2MmRkY2ZhNmI4YmJjZjVlZmQ0MzY1Ii8+CjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhc19zdGF0IiBjbGFzcz0iYXNfZmllbGQgYXNfZmllbGQtMSAxIiB2YWx1ZT0iIi8+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0YVtDb250YWN0XVttZXNzYWdlXSIgY2xhc3M9ImNvbC1tZC00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIG1lc3NhZ2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJtZXNzYWdlIiBuYW1lPSJkYXRhW0NvbnRhY3RdW21lc3NhZ2VdIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzbWFsbCBvYmxpZ0NoYW1wIHB1bGwtbGVmdCI+KkNoYW1wcyBvYmxpZ2F0b2lyZXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHJpZ2h0Ij5FbnZveWVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PjwhLS0gLy5tb2RhbC1jb250ZW50IC0tPgogICAgICAgICAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWRpYWxvZyAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJDb250YWN0IiBjbGFzcz0ibW9kYWwgZmFkZSIgIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im15TGFyZ2VNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbWQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvcm0taG9yaXpvbnRhbCIgcm9sZT0iZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii8xMzM0LUFwcGFydGVtZW50LUF0eXBpcXVlLVBhcmlzLVhWSS0zLXBpZWNlcy00NS1tMi5odG1sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHZhbHVlPSJ3d3cuaGVtcHRvbi1wYXJpcy5jb20vMTMzNC1BcHBhcnRlbWVudC1BdHlwaXF1ZS1QYXJpcy1YVkktMy1waWVjZXMtNDUtbTIuaHRtbCIgbmFtZT0iZGF0YVtDb250YWN0XVtvcmlnaW5lbWFpbF0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdmFsdWU9InRyb2NhZGVyb0BoZW1wdG9ucGFyaXMuY29tIiAgbmFtZT0iZGF0YVtDb250YWN0XVt0b10iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSB0aGVtVGl0bGUiPkNvbnRhY3RlcjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIG5vbSAgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiICAgcGxhY2Vob2xkZXI9IiIgIG5hbWU9ImRhdGFbQ29udGFjdF1bbm9tXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVxdWlyZWQgb25pbnZhbGlkPSJzZXRDdXN0b21WYWxpZGl0eSgnVmV1aWxsZXogcmVuc2VpZ25lciBjZSBjaGFtcHMnKSIgb25pbnB1dD0ic2V0Q3VzdG9tVmFsaWRpdHkoJycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIGFkcmVzc2UgbWFpbCAgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW2VtYWlsXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVxdWlyZWQgb25pbnZhbGlkPSJzZXRDdXN0b21WYWxpZGl0eSgnVmV1aWxsZXogcmVuc2VpZ25lciBjZSBjaGFtcHMnKSIgb25pbnB1dD0ic2V0Q3VzdG9tVmFsaWRpdHkoJycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIFTDqWzDqXBob25lICAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgICBwbGFjZWhvbGRlcj0iIiAgbmFtZT0iZGF0YVtDb250YWN0XVt0ZWxdIiBjbGFzcz0iZm9ybS1jb250cm9sIiByZXF1aXJlZCBvbmludmFsaWQ9InNldEN1c3RvbVZhbGlkaXR5KCdWZXVpbGxleiByZW5zZWlnbmVyIGNlIGNoYW1wcycpIiBvbmlucHV0PSJzZXRDdXN0b21WYWxpZGl0eSgnJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgIGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgdmlsbGUgICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtc20tOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW3ZpbGxlXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVxdWlyZWQgb25pbnZhbGlkPSJzZXRDdXN0b21WYWxpZGl0eSgnVmV1aWxsZXogcmVuc2VpZ25lciBjZSBjaGFtcHMnKSIgb25pbnB1dD0ic2V0Q3VzdG9tVmFsaWRpdHkoJycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIG1lc3NhZ2UgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0iZGF0YVtDb250YWN0XVttZXNzYWdlXSIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IiIgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLXNtLTggY29sLXNtLXB1c2gtNCBjb250cm9sLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSw6lmw6lyZW5jZTogWFgyMEIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkYXRhW2lkYmllbl1bXSIgdmFsdWU9IjEzMzQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFzYnJ5dyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+CjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhc19keW5hIiBkYXRhLXdhaXQ9IjE0NDk0YzgwYzNiYjBlMzNkMWVkNDM4NDI0ZTBkNWQ0IiBkYXRhLW9yaWc9ImYxZjUzYzlkOGU2MmRkY2ZhNmI4YmJjZjVlZmQ0MzY1IiBjbGFzcz0iYXNfZmllbGQgYXNfZmllbGQtMiAyIiB2YWx1ZT0iZjFmNTNjOWQ4ZTYyZGRjZmE2YjhiYmNmNWVmZDQzNjUiLz4KPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImFzX3N0YXQiIGNsYXNzPSJhc19maWVsZCBhc19maWVsZC0xIDEiIHZhbHVlPSIiLz4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmdwZC1jaGVja2JveCI+CiAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InJncGQtYWdyZWVtZW50IiBpZD0icmdwZC1hZ3JlZW1lbnRtb2RhbCIgLz4KICAgIDxsYWJlbCBmb3I9InJncGQtYWdyZWVtZW50bW9kYWwiPkonYWNjZXB0ZSBsZXMgY29uZGl0aW9ucyBkJ3V0aWxpc2F0aW9uIGRlcyBkb25uw6llcyAoKik8L2xhYmVsPgo8L2Rpdj4KPHNjcmlwdD4KICAndXNlIHN0cmljdCc7CgogIChmdW5jdGlvbiAoKSB7CiAgICB2YXIgYWdyZWVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JncGQtYWdyZWVtZW50bW9kYWwnKTsKICAgIHZhciBmb3JtID0gYWdyZWVtZW50LmNsb3Nlc3QoJ2Zvcm0nKTsKICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIGlmICghYWdyZWVtZW50LmNoZWNrZWQpIHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGFsZXJ0KCJWZXVpbGxleiBhY2NlcHRlciBsJ3V0aWxpc2F0aW9uIGRlIHZvcyBkb25uw6llcyBwb3VyIGNvbnRpbnVlci4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0pOwogIH0pKCk7Cjwvc2NyaXB0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic21hbGwgb2JsaWdDaGFtcCBwdWxsLWxlZnQiPipDaGFtcHMgb2JsaWdhdG9pcmVzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCByaWdodCI+RW52b3llcjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJyZ3BkLWxlZ2FscyI+KiA6IExlcyBpbmZvcm1hdGlvbnMgcmVjdWVpbGxpZXMgc3VyIGNlIGZvcm11bGFpcmUgc29udCBlbnJlZ2lzdHLDqWVzIGRhbnMgdW4gZmljaGllciBpbmZvcm1hdGlzw6kgcGFyIExhIEJvaXRlIEltbW8gcG91ciBsYSBnZXN0aW9uIGRlIGxhIGNsaWVudMOobGUvcHJvc3BlY3RzIGRlIEhFTVBUT04gUEFSSVMgVFJPQ0FERVJPLgpFbGxlcyBzb250IGNvbnNlcnbDqWVzIGp1c3F1J8OgIGRlbWFuZGUgZGUgc3VwcHJlc3Npb24gZXQgc29udCBkZXN0aW7DqWVzIMOgIEhFTVBUT04gUEFSSVMgVFJPQ0FERVJPLgpDb25mb3Jtw6ltZW50IMOgIGxhIGxvaSDCqyBpbmZvcm1hdGlxdWUgZXQgbGliZXJ0w6lzIMK7LCB2b3VzIHBvdXZleiBleGVyY2VyIHZvdHJlIGRyb2l0IGQnYWNjw6hzIGF1eCBkb25uw6llcyB2b3VzIGNvbmNlcm5hbnQgZXQgbGVzIGZhaXJlIHJlY3RpZmllciBlbiBjb250YWN0YW50IEhFTVBUT04gUEFSSVMgVFJPQ0FERVJPLgpOb3VzIHZvdXMgaW5mb3Jtb25zIGRlIGzigJlleGlzdGVuY2UgZGUgbGEgbGlzdGUgZCdvcHBvc2l0aW9uIGF1IGTDqW1hcmNoYWdlIHTDqWzDqXBob25pcXVlIMKrIEJsb2N0ZWwgwrssIHN1ciBsYXF1ZWxsZSB2b3VzIHBvdXZleiB2b3VzIGluc2NyaXJlIGljaSA6IGh0dHBzOi8vY29uc28uYmxvY3RlbC5mci88L3A+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWNvbnRlbnQgLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtZGlhbG9nIC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIAogICAKICAgCiAgICA8c2VjdGlvbiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9Qcm9kdWN0IiBjbGFzcz0iY29udGFpbmVyRGV0YWlsIGNvbnRlbnRQYWdlIGNvbnRhaW5lciI+CiAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYWdlQm9keSI+CgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGhlbVRpdGxlIGgxUGFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBpdGVtcHJvcD0ibmFtZSI+QXBwYXJ0ZW1lbnQgQXR5cGlxdWUgUGFyaXMgWFZJIC0gMyBwacOoY2VzIC0gNDUgbTI8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSdhcHBsaWNhdGlvbi9sZCtqc29uJz4KICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJAY29udGV4dCI6Imh0dHBzOi8vc2NoZW1hLm9yZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJAdHlwZSI6IkJyZWFkY3J1bWJMaXN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW1MaXN0RWxlbWVudCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkB0eXBlIjoiTGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBvc2l0aW9uIjoxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIml0ZW0iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkBpZCI6Ii8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjoiQWNjdWVpbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAdHlwZSI6Ikxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwb3NpdGlvbiI6MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpdGVtIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJAaWQiOiIvYWNoYXQtaW1tb2JpbGllci1wYXJpcy8xIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IkFjaGV0ZXIgw6AgUGFyaXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQHR5cGUiOiJMaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicG9zaXRpb24iOjMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXRlbSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQGlkIjoiLzEzMzQtQXBwYXJ0ZW1lbnQtQXR5cGlxdWUtUGFyaXMtWFZJLTMtcGllY2VzLTQ1LW0yLmh0bWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjoiQXBwYXJ0ZW1lbnQgQXR5cGlxdWUgUGFyaXMgWFZJIC0gMyBwacOoY2VzIC0gNDUgbTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPSJicmVhZGNydW1iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiA+QWNjdWVpbDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hY2hhdC1pbW1vYmlsaWVyLXBhcmlzLzEiID5BY2hldGVyIMOgIFBhcmlzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2FjaGF0LWltbW9iaWxpZXItcGFyaXMvdHlwZS0yLUFwcGFydGVtZW50LzEiID5BcHBhcnRlbWVudDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFwcGFydGVtZW50IEF0eXBpcXVlIFBhcmlzIFhWSSAtIDMgcGnDqGNlcyAtIDQ1IG0yPC9saT4KICAgICAgICAgICAgICAgICAgICA8L29sPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJEdCAiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIGRvY3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGJ0bkR0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBiYWNrbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGJhY2siPjwgUmV0b3VyPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImNvbC1sZy01IGNvbC1tZC00IGFjdGlvbkR0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZHQiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNDb250YWN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWNvbnRhY3RtYWlsMiBpY29ucy1kdCIgIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXBsYWNlbWVudD0idG9wIiB0aXRsZT0iQ29udGFjdGV6LW5vdXMiID48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWR0IiBvbmNsaWNrPSJ3aW5kb3cub3BlbignL2FkbWluL3BkZi5waHA/bGFuZz1mciZpZGFubj0xMzM0JmZpY2hlX3R5cGU9dmlzaXRlJnBkZl9vcmllbnRhdGlvbj1QJnBkZl90ZW1wbGF0ZT0xJyk7IHJldHVybiBmYWxzZTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24taW1wcmltZXIyIGljb25zLWR0IiAgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIHRpdGxlPSJJbXByaW1lciBjZXR0ZSBmaWNoZSIgPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWR0IiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjQ2FsY3VsZXR0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tY2FsY3VsZXR0ZTIgaWNvbnMtZHQiICBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgdGl0bGU9IkNhbGN1bGV0dGUiID48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IGNvbC1tZC01IHJzdkR0IiBkYXRhLXVybD0iaHR0cDovL3d3dy5oZW1wdG9uLXBhcmlzLmNvbS8vMTMzNC1BcHBhcnRlbWVudC1BdHlwaXF1ZS1QYXJpcy1YVkktMy1waWVjZXMtNDUtbTIuaHRtbCI+CiAgICAgICAgCiAgICAgICAgICAgIDxwPlBhcnRhZ2VyIHN1cjwvcD4KICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImZhY2Vib29rIiBkYXRhLXVybD0iaHR0cDovL3d3dy5oZW1wdG9uLXBhcmlzLmNvbS8xMzM0LUFwcGFydGVtZW50LUF0eXBpcXVlLVBhcmlzLVhWSS0zLXBpZWNlcy00NS1tMi5odG1sP2xhbmc9ZnIiIGRhdGEtdGl0bGU9IiAiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJ0d2l0dGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzaGFyZSBpY29uLXR3aXR0ZXIzIGljb25zLWR0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9vcmlnaW5hbF9yZWZlcmVyPWh0dHA6Ly93d3cuaGVtcHRvbi1wYXJpcy5jb20vMTMzNC1BcHBhcnRlbWVudC1BdHlwaXF1ZS1QYXJpcy1YVkktMy1waWVjZXMtNDUtbTIuaHRtbCZyZWZfc3JjPXR3c3JjXnRmdyZ0ZXh0PXZlbnRlIEFwcGFydGVtZW50IEF0eXBpcXVlIFBhcmlzIFhWSSAtIDMgcGnDqGNlcyAtIDQ1IG0yJnR3X3A9dHdlZXRidXR0b24mdXJsPWh0dHA6Ly93d3cuaGVtcHRvbi1wYXJpcy5jb20vMTMzNC1BcHBhcnRlbWVudC1BdHlwaXF1ZS1QYXJpcy1YVkktMy1waWVjZXMtNDUtbTIuaHRtbCI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZ29vZ2xlcGx1cyIgZGF0YS11cmw9Imh0dHA6Ly93d3cuaGVtcHRvbi1wYXJpcy5jb20vMTMzNC1BcHBhcnRlbWVudC1BdHlwaXF1ZS1QYXJpcy1YVkktMy1waWVjZXMtNDUtbTIuaHRtbCIgZGF0YS10aXRsZT0iICI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaGFycnJlIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjc2VuZEZyaWVuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1wYXJ0YWdlcjIgaWNvbnMtZHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDwvZGl2PgoKCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXR1cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50RHQgZHQyIj4KICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BEdDIgc2xpZGVyVjIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJpZW5UaXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ1IG0mc3VwMjsgLSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyBwacOoY2VzIC0gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyaXMgKDc1MDE2KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9InByb2R1Y3RJRCIgY2xhc3M9InJlZiI+UmVmIFhYMjBCPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz0ibWFpbkltZyAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImxvYWRlciI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvbG9hZGluZy5naWYiIGFsdD0iZ2FsbGVyeSBsb2FkZXIiLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8dWwgY2xhc3M9ImltYWdlR2FsbGVyeSBpbWFnZUhDICBnYWxsZXJ5ICBsb2FkaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b18wMjQyNjJmMGVhNjQwYjdmN2ExYmU3YmU5MTNkYjdhYi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzAyNDI2MmYwZWE2NDBiN2Y3YTFiZTdiZTkxM2RiN2FiLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fMDI0MjYyZjBlYTY0MGI3ZjdhMWJlN2JlOTEzZGI3YWIuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fMDI0MjYyZjBlYTY0MGI3ZjdhMWJlN2JlOTEzZGI3YWIuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aHVtYj0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzhlMWQ2YzVlODYyOTUzODY0MzhlNzYwZmY5YTJiY2NlLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fOGUxZDZjNWU4NjI5NTM4NjQzOGU3NjBmZjlhMmJjY2UuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYy1mb3J0aHVtYj0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b184ZTFkNmM1ZTg2Mjk1Mzg2NDM4ZTc2MGZmOWEyYmNjZS5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b184ZTFkNmM1ZTg2Mjk1Mzg2NDM4ZTc2MGZmOWEyYmNjZS5qcGciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWl0ZXJhdG9yPSIyIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRodW1iPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tLzIwMHgyMDAvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fMDVjZjFhMWRhMmI0NGNlMWI2NTExZjYwNGEwMmNhNmIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b18wNWNmMWExZGEyYjQ0Y2UxYjY1MTFmNjA0YTAyY2E2Yi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjLWZvcnRodW1iPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzA1Y2YxYTFkYTJiNDRjZTFiNjUxMWY2MDRhMDJjYTZiLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzA1Y2YxYTFkYTJiNDRjZTFiNjUxMWY2MDRhMDJjYTZiLmpwZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b18wZjcyOTdmYTZkYWMxMzQxYTY2MmExNzE3ZjkwMjFjZC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzBmNzI5N2ZhNmRhYzEzNDFhNjYyYTE3MTdmOTAyMWNkLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fMGY3Mjk3ZmE2ZGFjMTM0MWE2NjJhMTcxN2Y5MDIxY2QuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fMGY3Mjk3ZmE2ZGFjMTM0MWE2NjJhMTcxN2Y5MDIxY2QuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iNCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aHVtYj0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzhmMmE3YWE2ZWJmZmY0Yjc1OTY2ZWE2NDc0MTVhZmJjLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fOGYyYTdhYTZlYmZmZjRiNzU5NjZlYTY0NzQxNWFmYmMuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYy1mb3J0aHVtYj0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b184ZjJhN2FhNmViZmZmNGI3NTk2NmVhNjQ3NDE1YWZiYy5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b184ZjJhN2FhNmViZmZmNGI3NTk2NmVhNjQ3NDE1YWZiYy5qcGciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWl0ZXJhdG9yPSI1IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRodW1iPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tLzIwMHgyMDAvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fZGRiMzNmMTQwNmZjNjk0MzIzNDAxZGZkOTVhNTVmM2UuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b19kZGIzM2YxNDA2ZmM2OTQzMjM0MDFkZmQ5NWE1NWYzZS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjLWZvcnRodW1iPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvX2RkYjMzZjE0MDZmYzY5NDMyMzQwMWRmZDk1YTU1ZjNlLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvX2RkYjMzZjE0MDZmYzY5NDMyMzQwMWRmZDk1YTU1ZjNlLmpwZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b182M2U5N2U3OWRjYjNhY2U5NTI2ZGE0N2Y0NDEyZTViNS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzYzZTk3ZTc5ZGNiM2FjZTk1MjZkYTQ3ZjQ0MTJlNWI1LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fNjNlOTdlNzlkY2IzYWNlOTUyNmRhNDdmNDQxMmU1YjUuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fNjNlOTdlNzlkY2IzYWNlOTUyNmRhNDdmNDQxMmU1YjUuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iNyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10aHVtYj0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS8yMDB4MjAwL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvX2ExMTBiYTQ3YmVkODJmYzVmZDkzYzk3YmFjMTEwZTliLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fYTExMGJhNDdiZWQ4MmZjNWZkOTNjOTdiYWMxMTBlOWIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYy1mb3J0aHVtYj0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b19hMTEwYmE0N2JlZDgyZmM1ZmQ5M2M5N2JhYzExMGU5Yi5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b19hMTEwYmE0N2JlZDgyZmM1ZmQ5M2M5N2JhYzExMGU5Yi5qcGciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWl0ZXJhdG9yPSI4IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRodW1iPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tLzIwMHgyMDAvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fYTExMGJhNDdiZWQ4MmZjNWZkOTNjOTdiYWMxMTBlOWIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyYz0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b19hMTEwYmE0N2JlZDgyZmM1ZmQ5M2M5N2JhYzExMGU5Yi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjLWZvcnRodW1iPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvX2ExMTBiYTQ3YmVkODJmYzVmZDkzYzk3YmFjMTEwZTliLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvX2ExMTBiYTQ3YmVkODJmYzVmZDkzYzk3YmFjMTEwZTliLmpwZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtaXRlcmF0b3I9IjkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b181ZTZiMTk0OWM0MmViY2EyNzQ0ZjRmZTI0ZDRiYjdmMC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzVlNmIxOTQ5YzQyZWJjYTI3NDRmNGZlMjRkNGJiN2YwLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fNWU2YjE5NDljNDJlYmNhMjc0NGY0ZmUyNGQ0YmI3ZjAuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fNWU2YjE5NDljNDJlYmNhMjc0NGY0ZmUyNGQ0YmI3ZjAuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMTAiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b19mZmRmYTIwNmUzZDlhNDEzOGYwOWU4MjI1MjQxM2FlOC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvX2ZmZGZhMjA2ZTNkOWE0MTM4ZjA5ZTgyMjUyNDEzYWU4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fZmZkZmEyMDZlM2Q5YTQxMzhmMDllODIyNTI0MTNhZTguanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fZmZkZmEyMDZlM2Q5YTQxMzhmMDllODIyNTI0MTNhZTguanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMTEiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b18wMTRjNTEwYzcyM2RkMTZmYzUyYmQ1M2JiMzAzYTRmMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzAxNGM1MTBjNzIzZGQxNmZjNTJiZDUzYmIzMDNhNGYyLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fMDE0YzUxMGM3MjNkZDE2ZmM1MmJkNTNiYjMwM2E0ZjIuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fMDE0YzUxMGM3MjNkZDE2ZmM1MmJkNTNiYjMwM2E0ZjIuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b19hMDAzNzg3NWYxNDQ3NDdlMWFhNWE0NThiODhjZDRiNC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvX2EwMDM3ODc1ZjE0NDc0N2UxYWE1YTQ1OGI4OGNkNGI0LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fYTAwMzc4NzVmMTQ0NzQ3ZTFhYTVhNDU4Yjg4Y2Q0YjQuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fYTAwMzc4NzVmMTQ0NzQ3ZTFhYTVhNDU4Yjg4Y2Q0YjQuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMTMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b19iMjc4YTRiNDhlOTkxOGM1YmNlOTFjMjFjOGY5OTgyZi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvX2IyNzhhNGI0OGU5OTE4YzViY2U5MWMyMWM4Zjk5ODJmLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fYjI3OGE0YjQ4ZTk5MThjNWJjZTkxYzIxYzhmOTk4MmYuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fYjI3OGE0YjQ4ZTk5MThjNWJjZTkxYzIxYzhmOTk4MmYuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMTQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b19kZDFmODVmYjc5NjI5MjE3NDFlYmMyMzZlMDcwOWQyOC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvX2RkMWY4NWZiNzk2MjkyMTc0MWViYzIzNmUwNzA5ZDI4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fZGQxZjg1ZmI3OTYyOTIxNzQxZWJjMjM2ZTA3MDlkMjguanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fZGQxZjg1ZmI3OTYyOTIxNzQxZWJjMjM2ZTA3MDlkMjguanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMTUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b181NTIyMjMyYjdkZDAyOTdiNDkzYTc0ZjY5YjBkYmQ1NS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzU1MjIyMzJiN2RkMDI5N2I0OTNhNzRmNjliMGRiZDU1LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fNTUyMjIzMmI3ZGQwMjk3YjQ5M2E3NGY2OWIwZGJkNTUuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fNTUyMjIzMmI3ZGQwMjk3YjQ5M2E3NGY2OWIwZGJkNTUuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b181NzQ4ZTM2OGI1MDdjNjZhZWFkMGViOGYxMDU3NDA5My5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzU3NDhlMzY4YjUwN2M2NmFlYWQwZWI4ZjEwNTc0MDkzLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fNTc0OGUzNjhiNTA3YzY2YWVhZDBlYjhmMTA1NzQwOTMuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fNTc0OGUzNjhiNTA3YzY2YWVhZDBlYjhmMTA1NzQwOTMuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS1pdGVyYXRvcj0iMTciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vMjAweDIwMC9pbWFnZXMvYmllbnMvMS9iNjM2MTdiZWE4ODIyZTM3ZmUxNmE4YTgyYjFiZTAxYy9waG90b18wYjkxNmQzZGEzZWFlZDg2ZWMwYjYxY2NkNDM3NTQwZS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9iaWVucy8xL2I2MzYxN2JlYTg4MjJlMzdmZTE2YThhODJiMWJlMDFjL3Bob3RvXzBiOTE2ZDNkYTNlYWVkODZlYzBiNjFjY2Q0Mzc1NDBlLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmMtZm9ydGh1bWI9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fMGI5MTZkM2RhM2VhZWQ4NmVjMGI2MWNjZDQzNzU0MGUuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHA6Ly9hc2ppbW1vYmlsaWVyLnN0YXRpY2xiaS5jb20vb3JpZ2luYWwvaW1hZ2VzL2JpZW5zLzEvYjYzNjE3YmVhODgyMmUzN2ZlMTZhOGE4MmIxYmUwMWMvcGhvdG9fMGI5MTZkM2RhM2VhZWQ4NmVjMGI2MWNjZDQzNzU0MGUuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ2NhcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJpeC1kdDIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsYWJlbC1jYXB0aW9uIj5Qcml4PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0icHJpY2UiIGNvbnRlbnQ9IjU3NTAwMCI+NTc1IDAwMDwvc3Bhbj4gPHNwYW4gaXRlbXByb3A9InByaWNlQ3VycmVuY3kiPuKCrDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic21hbGwiPiBIQUkqPC9zcGFuPiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ2NhcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0iY29sLW1kLTYgIGVsZW1lbnREdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGhlbVRpdGxlIGVsZW1lbnREdFRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uIGRlIGwnb2ZmcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiI+PHA+TcOpdHJvIFRST0NBREVSTyAtIEwnQWdlbmNlICBIZW1wdG9uICB2b3VzIHByw6lzZW50ZSwgYXUgUkRDIGQndW4gaW1tZXVibGUgMTkwMCwgIGNldCBhcHBhcnRlbWVudCBhdHlwaXF1ZSBkZSA0NW3CsiBuaWNow6kgZGFucyB1bmUgcnVlIGNhbG1lIGR1IFhWScOobWUgTm9yZCAuVm91cyBzZXJleiBjaGFybcOpIHBhciBjZSBiaWVuIHF1aSBzZSBwcsOpc2VudGUgY29tbWUgdW5lIHBldGl0ZSBtYWlzb24gYXZlYyBzb24gZW50csOpZSBpbmTDqXBlbmRhbnRlLjwvcD4KPHA+IFJlZmFpdCDDoCBuZXVmIGF2ZWMgdW4gZ2/Du3QgZXhxdWlzIGV0IGNvbnRlbXBvcmFpbiwgY2V0IGFwcGFydGVtZW50IGVzdCBjb21wb3PDqSBkJ3VuZSBlbnRyw6llLCBkJ3VuIHPDqWpvdXIgZGUgMTVtwrIgYXZlYyBjdWlzaW5lIG91dmVydGUgZW50acOocmVtZW50IMOpcXVpcMOpZSwgZCd1bmUgMcOocmUgY2hhbWJyZSBkZSAxMW3CsiBhdmVjIHVuIGJlYXUgZHJlc3NpbmcgZXQgZCd1bmUgc2Vjb25kZSBjaGFtYnJlIGRlIDEwbcKyIGF2ZWMgc2FsbGUgZCdlYXUuPC9wPgo8cD5MZXMgV0Mgc29udCBzw6lwYXLDqXMuIEwnZW5zZW1ibGUgZXN0IGRlIHN0YW5kaW5nIGV0IHByw6lzZW50ZSBkZXMgbWF0w6lyaWF1eCBkZSBiZWxsZSBxdWFsaXTDqS48L3A+CjxwPkEgdmlzaXRlciBzYW5zIHBsdXMgdGFyZGVyICEhPC9wPgo8cD5JZMOpYWwgaW52ZXN0aXNzZXVyIG91IHByZW1pZXIgYWNoYXQuPC9wPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjb2wtbWQtNiAgZWxlbWVudER0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUgZWxlbWVudER0VGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5EZXNjcmlwdGlmIGR1IGJpZW48L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRhQmllbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgaWQ9ImRhdGFUaXRsZSIgY2xhc3M9Im5hdiBuYXYtdGFicyIgcm9sZT0idGFibGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj48YSBocmVmPSIjaW5mb3MiIGNsYXNzPSJidG4tZGVmYXVsdCI+R8OpbsOpcmFsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj48YSBocmVmPSIjZGV0YWlscyIgY2xhc3M9ImJ0bi1kZWZhdWx0Ij5Ew6l0YWlscyArPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iIj48YSBocmVmPSIjY29wcm8iIGNsYXNzPSJidG4tZGVmYXVsdCI+Q29wcm9wcmnDqXTDqTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IiI+PGEgaHJlZj0iI2luZm9zZmkiIGNsYXNzPSJidG4tZGVmYXVsdCI+RmluYW5jaWVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImRhdGFDb250ZW50IiBjbGFzcz0idGFiLWNvbnRlbnQiPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIGFjdGl2ZSBpbiIgaWQ9ImluZm9zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGVybUluZm9zIj5Db2RlIHBvc3RhbDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA3NTAxNiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPlN1cmZhY2UgaGFiaXRhYmxlIChtwrIpPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ1IG3CsiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPlN1cmZhY2UgbG9pIENhcnJleiAobcKyKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0NSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPk5vbWJyZSBkZSBjaGFtYnJlKHMpPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGVybUluZm9zIj5Ob21icmUgZGUgcGnDqGNlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+Tm9tYnJlIGRlIG5pdmVhdXg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPlZ1ZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXIgY291ciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItcGFuZSBmYWRlICIgaWQ9ImRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPk5iIGRlIHNhbGxlIGQnZWF1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGVybUluZm9zIj5DdWlzaW5lPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFNRVJJQ0FJTkUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGVybUluZm9zIj5UeXBlIGRlIGN1aXNpbmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRVFVSVBFRSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPk1vZGUgZGUgY2hhdWZmYWdlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVMRUNUUklRVUUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGVybUluZm9zIj5UeXBlIGRlIGNoYXVmZmFnZSA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUkFESUFURVVSICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+Rm9ybWF0IGRlIGNoYXVmZmFnZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTkRJVklEVUVMICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+QmFsY29uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5PTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPlRlcnJhc3NlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5PTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPkNhdmU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTk9OICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgIiBpZD0iY29wcm8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPmNvcHJvcHJpw6l0w6k8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWx1ZUluZm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1VJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+cGxhbiBkZSBzYXV2ZWdhcmRlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5PTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItcGFuZSBmYWRlICIgaWQ9ImluZm9zZmkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPlByaXggZGUgdmVudGUgaG9ub3JhaXJlcyBUVEMgaW5jbHVzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU3NSAwMDAg4oKsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlcm1JbmZvcyI+PHNwYW4gY2xhc3M9InNtYWxsaW5mb3MiPlByaXggZGUgdmVudGUgaG9ub3JhaXJlcyBUVEMgZXhjbHVzPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbHVlSW5mb3MgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1NTAgMDAwIOKCrCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZXJtSW5mb3MiPkhvbm9yYWlyZXMgVFRDIMOgIGxhIGNoYXJnZSBhY3F1w6lyZXVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsdWVJbmZvcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQsNTUgJSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9ImNvbC1tZC02IGVsZW1lbnREdCI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUgZWxlbWVudER0VGl0bGUgICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+RGlhZ25vc3RpY3MgZGUgcGVyZm9ybWFuY2Ugw6luZXJnw6l0aXF1ZTwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZW5lcmd5IHJvdyB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtNiAgZHBlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9hZG1pbi9kcGUucGhwP2xhbmc9ZnImYW1wO2lkYW5uPTEzMzQiIGFsdD0iRFBFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiBjb2wteHMtNiAgZ2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9hZG1pbi9kcGUucGhwP3R5cGU9R0VTJmFtcDtsYW5nPWZyJmFtcDtpZGFubj0xMzM0IiBhbHQ9IkRQRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjb2wtbWQtNiBlbGVtZW50RHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUgZWxlbWVudER0VGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPkNldHRlIGFubm9uY2Ugdm91cyBpbnTDqXJlc3NlID88L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii8xMzM0LUFwcGFydGVtZW50LUF0eXBpcXVlLVBhcmlzLVhWSS0zLXBpZWNlcy00NS1tMi5odG1sIiBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCAgY2xhc3M9ImNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIG5vbSAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgICBwbGFjZWhvbGRlcj0iIiAgbmFtZT0iZGF0YVtDb250YWN0XVtub21dIiBjbGFzcz0iZm9ybS1jb250cm9sIiByZXF1aXJlZCBvbmludmFsaWQ9InNldEN1c3RvbVZhbGlkaXR5KCdWZXVpbGxleiByZW5zZWlnbmVyIGNlIGNoYW1wcycpIiBvbmlucHV0PSJzZXRDdXN0b21WYWxpZGl0eSgnJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCAgY2xhc3M9ImNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIGFkcmVzc2UgbWFpbCAqPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiICAgcGxhY2Vob2xkZXI9IiIgIG5hbWU9ImRhdGFbQ29udGFjdF1bZW1haWxdIiBjbGFzcz0iZm9ybS1jb250cm9sIiByZXF1aXJlZCBvbmludmFsaWQ9InNldEN1c3RvbVZhbGlkaXR5KCdWZXVpbGxleiByZW5zZWlnbmVyIGNlIGNoYW1wcycpIiBvbmlucHV0PSJzZXRDdXN0b21WYWxpZGl0eSgnJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCAgY2xhc3M9ImNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIFTDqWzDqXBob25lICo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiAgIHBsYWNlaG9sZGVyPSIiICBuYW1lPSJkYXRhW0NvbnRhY3RdW3RlbF0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHJlcXVpcmVkIG9uaW52YWxpZD0ic2V0Q3VzdG9tVmFsaWRpdHkoJ1ZldWlsbGV6IHJlbnNlaWduZXIgY2UgY2hhbXBzJykiIG9uaW5wdXQ9InNldEN1c3RvbVZhbGlkaXR5KCcnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsICBjbGFzcz0iY29sLXNtLTQgY29udHJvbC1sYWJlbCI+Vm90cmUgdmlsbGUgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiICAgcGxhY2Vob2xkZXI9IiIgIG5hbWU9ImRhdGFbQ29udGFjdF1bdmlsbGVdIiBjbGFzcz0iZm9ybS1jb250cm9sIiByZXF1aXJlZCBvbmludmFsaWQ9InNldEN1c3RvbVZhbGlkaXR5KCdWZXVpbGxleiByZW5zZWlnbmVyIGNlIGNoYW1wcycpIiBvbmlucHV0PSJzZXRDdXN0b21WYWxpZGl0eSgnJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCAgY2xhc3M9ImNvbC1zbS00IGNvbnRyb2wtbGFiZWwiPlZvdHJlIG1lc3NhZ2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJkYXRhW0NvbnRhY3RdW21lc3NhZ2VdIiBjbGFzcz0iZm9ybS1jb250cm9sIiBwbGFjZWhvbGRlcj0iIiA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFzYnJ5dyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+CjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhc19keW5hIiBkYXRhLXdhaXQ9IjE0NDk0YzgwYzNiYjBlMzNkMWVkNDM4NDI0ZTBkNWQ0IiBkYXRhLW9yaWc9ImYxZjUzYzlkOGU2MmRkY2ZhNmI4YmJjZjVlZmQ0MzY1IiBjbGFzcz0iYXNfZmllbGQgYXNfZmllbGQtMiAyIiB2YWx1ZT0iZjFmNTNjOWQ4ZTYyZGRjZmE2YjhiYmNmNWVmZDQzNjUiLz4KPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImFzX3N0YXQiIGNsYXNzPSJhc19maWVsZCBhc19maWVsZC0xIDEiIHZhbHVlPSIiLz4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJncGQtY2hlY2tib3giPgogICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJyZ3BkLWFncmVlbWVudCIgaWQ9InJncGQtYWdyZWVtZW50IiAvPgogICAgPGxhYmVsIGZvcj0icmdwZC1hZ3JlZW1lbnQiPkonYWNjZXB0ZSBsZXMgY29uZGl0aW9ucyBkJ3V0aWxpc2F0aW9uIGRlcyBkb25uw6llcyAoKik8L2xhYmVsPgo8L2Rpdj4KPHNjcmlwdD4KICAndXNlIHN0cmljdCc7CgogIChmdW5jdGlvbiAoKSB7CiAgICB2YXIgYWdyZWVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JncGQtYWdyZWVtZW50Jyk7CiAgICB2YXIgZm9ybSA9IGFncmVlbWVudC5jbG9zZXN0KCdmb3JtJyk7CiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBpZiAoIWFncmVlbWVudC5jaGVja2VkKSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICBhbGVydCgiVmV1aWxsZXogYWNjZXB0ZXIgbCd1dGlsaXNhdGlvbiBkZSB2b3MgZG9ubsOpZXMgcG91ciBjb250aW51ZXIuIik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9KTsKICB9KSgpOwo8L3NjcmlwdD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRhdGFbaWRiaWVuXVtdIiB2YWx1ZT0iMTMzNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS04IGNvbC1zbS1wdXNoLTQgY29sLXhzLTExIGNvbC14cy1wdXNoLTEgYnRuU2VuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0Ij5FbnZveWVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvYmxpZyI+KiBDaGFtcHMgb2JsaWdhdG9pcmVzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVnYWxzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJyZ3BkLWxlZ2FscyI+KiA6IExlcyBpbmZvcm1hdGlvbnMgcmVjdWVpbGxpZXMgc3VyIGNlIGZvcm11bGFpcmUgc29udCBlbnJlZ2lzdHLDqWVzIGRhbnMgdW4gZmljaGllciBpbmZvcm1hdGlzw6kgcGFyIExhIEJvaXRlIEltbW8gcG91ciBsYSBnZXN0aW9uIGRlIGxhIGNsaWVudMOobGUvcHJvc3BlY3RzIGRlIEhFTVBUT04gUEFSSVMgVFJPQ0FERVJPLgpFbGxlcyBzb250IGNvbnNlcnbDqWVzIGp1c3F1J8OgIGRlbWFuZGUgZGUgc3VwcHJlc3Npb24gZXQgc29udCBkZXN0aW7DqWVzIMOgIEhFTVBUT04gUEFSSVMgVFJPQ0FERVJPLgpDb25mb3Jtw6ltZW50IMOgIGxhIGxvaSDCqyBpbmZvcm1hdGlxdWUgZXQgbGliZXJ0w6lzIMK7LCB2b3VzIHBvdXZleiBleGVyY2VyIHZvdHJlIGRyb2l0IGQnYWNjw6hzIGF1eCBkb25uw6llcyB2b3VzIGNvbmNlcm5hbnQgZXQgbGVzIGZhaXJlIHJlY3RpZmllciBlbiBjb250YWN0YW50IEhFTVBUT04gUEFSSVMgVFJPQ0FERVJPLgpOb3VzIHZvdXMgaW5mb3Jtb25zIGRlIGzigJlleGlzdGVuY2UgZGUgbGEgbGlzdGUgZCdvcHBvc2l0aW9uIGF1IGTDqW1hcmNoYWdlIHTDqWzDqXBob25pcXVlIMKrIEJsb2N0ZWwgwrssIHN1ciBsYXF1ZWxsZSB2b3VzIHBvdXZleiB2b3VzIGluc2NyaXJlIGljaSA6IGh0dHBzOi8vY29uc28uYmxvY3RlbC5mci88L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYmlnRGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz0ibWFwLWluZm9zLWNpdHkgZWxlbWVudER0Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZSB0aGVtVGl0bGUgZWxlbWVudER0VGl0bGUiPgogICAgICAgICAgICA8aDE+TGEgdmlsbGUgZGUgUGFyaXMgKDc1MDE2KTwvaDE+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIG1hcCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibWFwSW5mb3NDaXR5IiBzdHlsZT0id2lkdGg6MTAwJTtoZWlnaHQ6MzAwcHg7Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXAtYnV0dG9ucyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIHN0YXQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InN0YXRzSW5mb3NDaXR5Ij48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvc2VjdGlvbj4KICAgIAogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KICAgICAgICAjc3RhdHNJbmZvc0NpdHkgewogICAgICAgIH0KICAgICAgICAjc3RhdHNJbmZvc0NpdHkgdWx7CiAgICAgICAgICAgIG1hcmdpbjowOyBwYWRkaW5nOjA7IGxpc3Qtc3R5bGU6IGluc2lkZSBub25lOwogICAgICAgIH0KICAgICAgICAjc3RhdHNJbmZvc0NpdHkgbGl7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NWVtOwogICAgICAgICAgICBwYWRkaW5nOjFweDsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMnB4OwogICAgICAgIH0KICAgICAgICAjc3RhdHNJbmZvc0NpdHkgLnRpdGxlewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTo1cHg7CiAgICAgICAgfQogICAgICAgICNzdGF0c0luZm9zQ2l0eSBsaS5vZGR7CiAgICAgICAgICAgIGJhY2tncm91bmQ6I2VmZWZlZjsKICAgICAgICB9CiAgICAgICAgI3N0YXRzSW5mb3NDaXR5IGxpIHNwYW57CiAgICAgICAgICAgIGRpc3BsYXk6aW5saW5lLWJsb2NrOwogICAgICAgIH0KICAgICAgICAjc3RhdHNJbmZvc0NpdHkgbGkgLnZhbHVlewogICAgICAgICAgICB0ZXh0LWFsaWduOnJpZ2h0OwogICAgICAgICAgICBmbG9hdDpyaWdodDsKICAgICAgICAgICAgcGFkZGluZy1yaWdodDogNXB4OwogICAgICAgIH0KICAgICAgICAjbWFwSW5mb3NDaXR5IGltZyB7CiAgICAgICAgICAgIG1heC13aWR0aDogbm9uZTsKICAgICAgICB9CiAgICAgICAgLm1hcC1idXR0b25zewogICAgICAgICAgICBoZWlnaHQ6MzBweDsKICAgICAgICB9CiAgICAgICAgLm1hcC1idXR0b25zIGF7CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICAgICBmbG9hdDogbGVmdDsKICAgICAgICAgICAgYmFja2dyb3VuZDogI2UwZTBlMDsKICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgICB3aWR0aDozMHB4OyBoZWlnaHQ6MzBweDsKICAgICAgICAgICAgbWFyZ2luOjAgMC41cHg7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgZm9udC1zaXplOjhweDsKICAgICAgICB9CiAgICA8L3N0eWxlPgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmllblNpbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPmF1dHJlcyBhbm5vbmNlcyBpbW1vYmlsacOocmVzIGNvcnJlc3BvbmRhbnQgw6DCoCB2b3RyZSByZWNoZXJjaGU8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5MZXMgYmllbnMgc2ltaWxhaXJlcyBwb3VyIDogPHNwYW4gY2xhc3M9InVwcGVyIj5WZW50ZSBBcHBhcnRlbWVudCBQYXJpcyAoNzUwMTYpPC9zcGFuPiA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjYXJvdXNlbFNpbSIgY2xhc3M9ImNhcm91c2VsIHNsaWRlIiBkYXRhLXJpZGU9ImNhcm91c2VsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iY2Fyb3VzZWwtaW5uZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Iml0ZW0gYWN0aXZlIGxpc3QtaW5saW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgb25DbGljaz0ibG9jYXRpb24uaHJlZj0nLzEzNDAtUGFyaXMtMTEtU3R1ZGlvLTQwLW0uaHRtbCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZ1NpbSBsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS8yMjB4MjIwL2ltYWdlcy9iaWVucy8xL2E3ZjY0MTgzYjMzNDU3ODhmOWUyMDBiYzkyMWMwZGFmL29yaWdpbmFsL3Bob3RvX2UyOTBjMDhjZmY0YTI3NDVkM2E3NDFiYzI3YTIxZTk1LmpwZyIgd2lkdGg9IjIyMCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaXhTaW0iPjQ4NSAwMDAg4oKsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImluZm9zU2ltIGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5QYXJpczwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPjxpPkFwcGFydGVtZW50PC9pPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBvbkNsaWNrPSJsb2NhdGlvbi5ocmVmPScvMTM3MC1SQVJFLUFwcGFydGVtZW50LTItcGllY2VzLVBpZXJyZS0xZXItZGUtU2VyYmllLVBhcmlzLVhWSS1wcmVzdGlnZS5odG1sJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nU2ltIGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tLzIyMHgyMjAvaW1hZ2VzL2JpZW5zLzEvMjE5MDk5MmFmOWU0N2MzNGNiYjQxOGE2NTFhMDBkOGIvb3JpZ2luYWwvcGhvdG9fNTRjZTRkN2JlY2JkMjZiZWYzNThjNDE4YTQ5YWUxZWYuanBnIiB3aWR0aD0iMjIwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpeFNpbSI+NTYwIDAwMCDigqw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mb3NTaW0gbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlBhcmlzPC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+PGk+QXBwYXJ0ZW1lbnQ8L2k+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsZWZ0IGNhcm91c2VsLWNvbnRyb2wiIGhyZWY9IiNjYXJvdXNlbFNpbSIgZGF0YS1zbGlkZT0icHJldiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tbWluaS1mLWxlZnQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJyaWdodCBjYXJvdXNlbC1jb250cm9sIiBocmVmPSIjY2Fyb3VzZWxTaW0iIGRhdGEtc2xpZGU9Im5leHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLW1pbmktZi1yaWdodCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXN0ZXJpeCBtdDEwIj4qIEhvbm9yYWlyZXMgZCdBZ2VuY2VzIEluY2x1czwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC9kaXY+CgogICAgPC9zZWN0aW9uPgoKICAgIAoKICAgIAogICAgCiAgICAgICAgPHNlY3Rpb24gY2xhc3M9ImxheW91dF9idG0iPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICANCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPg0KICAgICAgICANCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0iY29sLW1kLTEyIGNybyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjcm9Db250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5Db250YWN0PC9oMT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3JvQ29ycHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyAKCiBQb3VyIHRvdXRlIGRlbWFuZGUgZCYjMzk7aW5mb3JtYXRpb24sIG5vdXMgdm91cyBpbnZpdG9ucyAmYWdyYXZlOyByZW1wbGlyIGxlIGZvcm11bGFpcmUgY2ktZGVzc291cy4gTm90cmUgJmVhY3V0ZTtxdWlwZSBwcmVuZHJhIGVuc3VpdGUgY29udGFjdCBhdmVjIHZvdXMgZGFucyBsZXMgbWVpbGxldXJzIGQmZWFjdXRlO2xhaXMuJm5ic3A7IAoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0blN1aXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIA0KICAgIDwvZGl2Pg0KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9ImZ0ci1ib3R0b20iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJjb2wtc20tNiBjb2wtbWQtNCBlbGVtZW50RnRyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRoZW1UaXRsZSI+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDxoMT5Ob3VzIHN1aXZyZSBzdXI8L2gxPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50RnRyIHJzdiI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vSGVtcHRvbkltbW9iaWxpZXIvIiBjbGFzcz0ibGlua3JzdiAiIHRhcmdldD0iX2JsYW5rIiA+PHNwYW4gY2xhc3M9Imljb24tZmFjZWJvb2syIGljb25zIj48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL0hlbXB0b25QYXJpcyIgY2xhc3M9Imxpbmtyc3YgIiB0YXJnZXQ9Il9ibGFuayIgPjxzcGFuIGNsYXNzPSJpY29uLXR3aXR0ZXIzIGljb25zIj48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3BsdXMuZ29vZ2xlLmNvbS91LzEvMTE1NTU5OTE0ODkyMzIxMTgyNjQ5IiBjbGFzcz0ibGlua3JzdiAiIHRhcmdldD0iX2JsYW5rIiA+PHNwYW4gY2xhc3M9Imljb24tZ29vZ2xlcGx1czIgaWNvbnMiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaGVtcHRvbl9wYXJpc190cm9jYWRlcm8vIiBjbGFzcz0ibGlua3JzdiAiIHRhcmdldD0iX2JsYW5rIiA+PHNwYW4gY2xhc3M9Imljb24taW5zdGFncmFtMiBpY29ucyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cucGludGVyZXN0LmZyL2hlbXB0b25wYXJpc3Ryby8iIGNsYXNzPSJsaW5rcnN2ICIgdGFyZ2V0PSJfYmxhbmsiID48c3BhbiBjbGFzcz0iaWNvbi1waW50ZXJlc3QgaWNvbnMiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9oZW1wdG9uLXBhcmlzLXRyb2NhZGVybyIgY2xhc3M9Imxpbmtyc3YgIiB0YXJnZXQ9Il9ibGFuayIgPjxzcGFuIGNsYXNzPSJpY29uLWxpbmtlZGluIGljb25zIj48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LnZpYWRlby5jb20vZnIvY29tcGFueS9oZW1wdG9uLXBhcmlzLXRyb2NhZGVybyIgY2xhc3M9Imxpbmtyc3YgIiB0YXJnZXQ9Il9ibGFuayIgPjxzcGFuIGNsYXNzPSJpY29uLXZpYWRlbyBpY29ucyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIA0KICAgICAgICA8L2FydGljbGU+DQogICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0iY29sLXNtLTYgY29sLW1kLTQgZWxlbWVudEZ0ciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aGVtVGl0bGUiPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8aDE+IDwvaDE+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnRGdHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cDovL2FzamltbW9iaWxpZXIuc3RhdGljbGJpLmNvbS9vcmlnaW5hbC9pbWFnZXMvZm5haW0ucG5nIiBjbGFzcz0iIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9nYWxpYW4ucG5nIiBjbGFzcz0iIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9hcnRpY2xlPg0KICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIDxhcnRpY2xlIGNsYXNzPSJjb2wtc20tNiBjb2wtbWQtNCBlbGVtZW50RnRyIj4NCiAgICAgICAgPGRpdiBjbGFzcz0idGhlbVRpdGxlIj4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDxoMT5TZSBjb25uZWN0ZXI8L2gxPg0KICAgICAgICAgICAgDQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50RnRyIj4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImVzcGFjZVBybyIgb25jbGljaz0id2luZG93Lm9wZW4oJy9hZG1pbi9lc3BhY2VfcHJvcHJpZXRhaXJlLnBocCcpOyByZXR1cm4gZmFsc2U7Ij4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tZXNwYWNlcHJvcHJpZXRhaXJlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eHRQcm9wIj5Fc3BhY2UgcHJvcHJpw6l0YWlyZXM8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICANCiAgICAgICAgPC9kaXY+DQogICAgPC9hcnRpY2xlPg0KCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICAgICAKICAgICAgICA8L3NlY3Rpb24+CiAgICAKCiAgICAKICAgICAgICA8Zm9vdGVyIGNsYXNzPSJqdW1ib3Ryb24gbGFzdEZ0ciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtc20tNiBibG9ja19sYXN0RnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiZjb3B5OyAyMDIwIHwgVG91cyBkcm9pdHMgcsOpc2VydsOpcyB8IFRyYWR1Y3Rpb24gcG93ZXJlZCBieSBHb29nbGUgPGJyLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGxhbi1kdS1zaXRlLmh0bWwiID5QbGFuIGR1IHNpdGU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSIvaS9yZWRhYy9sZWdhbHMiID5NZW50aW9ucyBsw6lnYWxlczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iL25vcy1saWVucy5odG1sIiA+TGllbnM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSIvYWRtaW4vIiB0YXJnZXQ9Il9ibGFuayIgPkFkbWluPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iL3RvdXRlcy1ub3MtYW5ub25jZXMuaHRtbCIgPlRvdXRlcyBub3MgYW5ub25jZXM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC1zbS02IGJsb2NrX2xhc3RGdHIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvblJlc3AiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLW11bHRpc3VwcG9ydCI+PC9zcGFuPjxwIGNsYXNzPSJjb250ZW50UmVzcCI+U2l0ZSBpbnRlcm5ldCBjb21wYXRpYmxlIG11bHRpLXN1cHBvcnRzLDxici8+dW4gc2V1bCBzaXRlIGFkYXB0YWJsZSDDoCB0b3VzIGxlcyB0eXBlcyBkJ8OpY3JhbnMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBibG9ja19sYXN0RnRyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwOi8vYXNqaW1tb2JpbGllci5zdGF0aWNsYmkuY29tL29yaWdpbmFsL2ltYWdlcy9sb2dvTEJJLnBuZyIgYWx0PSJMYSBib2l0ZSBpbW1vIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Zvb3Rlcj4KICAgIAoKCiAgICAgICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTAuMS9qcXVlcnkubWluLmpzIiA+PC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5dWkvMS4xMC4zL2pxdWVyeS11aS5taW4uanMiID48L3NjcmlwdD4KICAgICAgICAKICAgICAgICAgICAgPHNjcmlwdCBzcmM9Ii9qcy9idWlsZF9hZjk4NTU4NDdhZTJkMzczZTk2MDQ3ZmRlNjRlMTVkMy5qcyIgZGF0YS1tb2RlbD0ndmFuaXR5MicgaWQ9J3ByaW5jaXBhbEpzJz48L3NjcmlwdD4KICAgICAgICAKCiAgICAgICAgIA0KDQoJCSA8c2NyaXB0Pg0KICAgICAgICAhZnVuY3Rpb24oZixiLGUsdixuLHQscykge2lmKGYuZmJxKXJldHVybjtuPWYuZmJxPWZ1bmN0aW9uKCl7bi5jYWxsTWV0aG9kPyBuLmNhbGxNZXRob2QuYXBwbHkobixhcmd1bWVudHMpOm4ucXVldWUucHVzaChhcmd1bWVudHMpfTsgaWYoIWYuX2ZicSlmLl9mYnE9bjtuLnB1c2g9bjtuLmxvYWRlZD0hMDtuLnZlcnNpb249JzIuMCc7IG4ucXVldWU9W107dD1iLmNyZWF0ZUVsZW1lbnQoZSk7dC5hc3luYz0hMDsgdC5zcmM9djtzPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSlbMF07IHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCxzKX0od2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCAnaHR0cHM6Ly9jb25uZWN0LmZhY2Vib29rLm5ldC9lbl9VUy9mYmV2ZW50cy5qcycpOyBmYnEoJ2luaXQnLCAnMTQ1Mzc1Njk1ODA4Njg2NicpOyBmYnEoJ3RyYWNrJywgJ1BhZ2VWaWV3Jyk7IDwvc2NyaXB0Pg0KDQoNCiAgICA8YXJ0aWNsZT4gICAgDQoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewogICAgICAgICAgICAkKCAiLmJhY2siICkuY2xpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgdXJsID0gIi8vd3d3LmhlbXB0b24tcGFyaXMuY29tIjsKICAgICAgICAgICAgICAgICQobG9jYXRpb24pLmF0dHIoJ2hyZWYnLHVybCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICA8c2NyaXB0PgogICAgICAgIAogICAgICAgICAvKioqKioqKioqKiogYmllbiBjb25maWcgb3B0aW9uIGdlb2xvYyAqKioqKioqKioqKiAvCiAgICAgICAgICAqCiAgICAgICAgICAqIEB0eXBlIEFycmF5fEFycmF5CiAgICAgICAgICAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VycyA9IHt9OwogICAgICAgIHZhciBtYXA7CiAgICAgICAgdmFyIGlzTWFwRHJhZ2dpbmc7CiAgICAgICAgdmFyIGlkbGVTa2lwcGVkOwogICAgICAgIHZhciB2aXNpYmxlOwogICAgICAgIHZhciB0cmFuc2xhdGVzID0ge307CiAgICAgICAgdmFyIGdlb2NvZGVyOwoKICAgICAgICB2YXIgY29sb3JNYXJrZXJzOwogICAgICAgICAKCgogICAgICAgIGZ1bmN0aW9uIGdldE1hcChNYXApewoKICAgICAgICAgICAgdmFyIG1hcCA9IE1hcC5tYXA7CiAgICAgICAgICAgIG9wdGlvbnNDaXJjbGUgPSB7CiAgICAgICAgICAgICAgICBtYXA6IG1hcCwKICAgICAgICAgICAgICAgIGNlbnRlcjogeyBsYXQgOiA0OC44NTg0Mjk0MzQzMiAsIGxuZzogIDIuMzQxMTMzOTg0MTk1NyB9LAogICAgICAgICAgICAgICAgcmFkaXVzOiAxNTAwLAogICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjQjNEMTAwJywKICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDAuOCwKICAgICAgICAgICAgICAgIHN0cm9rZVdlaWdodDogMSwKICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNCM0QxMDAnLAogICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuMzUKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFwLnNldENlbnRlcihuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKDQ4Ljg2MDAwMDYxMCwgMi4zNDQ0NDk5OTcpKTsKICAgICAgICAgICAgICAgICAgICBNYXAuc2V0Q2VudGVyKG1hcCwgeyBsYXQ6IDQ4Ljg1ODQyOTQzNDMyLCBsbmc6IDIuMzQxMTMzOTg0MTk1NyB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lcnMoTWFwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVycyhNYXApewogICAgICAgICAgTWFwLnNldE1pblpvb20oTWFwLm1hcCwgMTIpOwogICAgICAgICAgY2FsbE1hcmtlcnMoTWFwKTsKICAgICAgICAgIE1hcC5hZGRNYXBMaXN0ZW5lcihNYXAubWFwLCAnaWRsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoaXNNYXBEcmFnZ2luZykgewogICAgICAgICAgICAgIGlkbGVTa2lwcGVkID0gdHJ1ZTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWRsZVNraXBwZWQgPSBmYWxzZTsKICAgICAgICAgICAgY2FsbE1hcmtlcnMoTWFwKTsKICAgICAgICAgIH0pOwogICAgICAgICAgTWFwLmFkZE1hcExpc3RlbmVyKE1hcC5tYXAsICdkcmFnc3RhcnQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlzTWFwRHJhZ2dpbmcgPSB0cnVlOwogICAgICAgICAgfSk7CiAgICAgICAgICBNYXAuYWRkTWFwTGlzdGVuZXIoTWFwLm1hcCwgJ2RyYWdlbmQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaXNNYXBEcmFnZ2luZyA9IGZhbHNlOwogICAgICAgICAgICBpZiAoaWRsZVNraXBwZWQgPT09IHRydWUpIHsKICAgICAgICAgICAgICBjYWxsTWFya2VycyhNYXApOwogICAgICAgICAgICAgIGlkbGVTa2lwcGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCgogICAgICAgIGZ1bmN0aW9uIGNhbGxNYXJrZXJzKE1hcCl7CiAgICAgICAgICAgIHZhciBib3VuZHMgPSBNYXAuZ2V0Qm91bmRzKE1hcC5tYXApOwogICAgICAgICAgICB2YXIgYm91bmRzQ29vcmRzID0gTWFwLmdldExhdExuZ01pbk1heChib3VuZHMpOwogICAgICAgICAgICB2YXIgbXhMdCA9IGJvdW5kc0Nvb3Jkcy5sYXQubWF4OwogICAgICAgICAgICB2YXIgbW5MdCA9IGJvdW5kc0Nvb3Jkcy5sYXQubWluOwogICAgICAgICAgICB2YXIgbXhMZyA9IGJvdW5kc0Nvb3Jkcy5sbmcubWF4OwogICAgICAgICAgICB2YXIgbW5MZyA9IGJvdW5kc0Nvb3Jkcy5sbmcubWluOwogICAgICAgICAgICAkLmdldCgiL2kvcG9pL2dldFBvaUJldHdlZW4/bWluTGF0PSIrbW5MdCsiJm1heExhdD0iK214THQrIiZtaW5Mbmc9IittbkxnKyImbWF4TG5nPSIrbXhMZykuZG9uZShmdW5jdGlvbihqc29uTWFya2Vycyl7CiAgICAgICAgICAgICAgICBpZihqc29uTWFya2VycyA9PT0gbnVsbCl7CiAgICAgICAgICAgICAgICAgICAganNvbk1hcmtlcnMgPSBbXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNsZWFuTWFya2VycygpOwogICAgICAgICAgICAgICAgYWRkTWFya2Vycyhqc29uTWFya2VycywgTWFwKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjbGVhbk1hcmtlcnMoKXsKICAgICAgICAgICAgdmlzaWJsZSA9IFtdOwogICAgICAgICAgICBmb3Ioa2V5IGluIG1hcmtlcnMpewogICAgICAgICAgICAgICAgaWYobWFya2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpKXsKICAgICAgICAgICAgICAgICAgICAkLmVhY2gobWFya2Vyc1trZXldLCBmdW5jdGlvbihrLCBtYXJrZXIpewogICAgICAgICAgICAgICAgICAgICAgdmFyIE1hcCA9IG1hcmtlci5kYXRhQ29udGFpbmVyLk1hcDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYobWFya2VyLmRhdGFDb250YWluZXIubWFwICE9PSBudWxsICYmIHZpc2libGUuaW5kZXhPZihrZXkpPDApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZS5wdXNoKGtleSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgTWFwLnJlbW92ZU1hcmtlcihNYXAubWFwLCBtYXJrZXIpOwogICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXIuZGF0YUNvbnRhaW5lci5tYXAgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIG1hcmtlcnNba2V5XSA9IFtdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGZ1bmN0aW9uIGFkZE1hcmtlcnMoanNvbk1hcmtlcnMsIE1hcCl7CiAgICAgICAgICAgICQuZWFjaChqc29uTWFya2VycywgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICB2YXIgbWFya2VyRGF0YSA9IHRoaXM7CiAgICAgICAgICAgICAgICBpZighbWFya2Vycy5oYXNPd25Qcm9wZXJ0eSh0aGlzLm5vbSkpewogICAgICAgICAgICAgICAgICAgIG1hcmtlcnNbdGhpcy5ub21dID0gW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB7IGxhdDogbWFya2VyRGF0YS55LCBsbmc6IG1hcmtlckRhdGEueH07CiAgICAgICAgICAgICAgICB2YXIgbWFwTWFya2VyID0gdmlzaWJsZS5pbmRleE9mKHRoaXMubm9tKT49MCA/IE1hcC5tYXAgOiBudWxsOwogICAgICAgICAgICAgICAgdHJhbnNsYXRlc1t0aGlzLm5vbV0gPSB0aGlzLnRyYW5zbGF0ZTsKICAgICAgICAgICAgICB2YXIgbWFya2VyT3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRyYW5zbGF0ZSwKICAgICAgICAgICAgICAgIGljb246IE1hcC5jcmVhdGVJY29uKCcvaS9wb2kvZ2V0SWNvbk1hcD90eXBlPScrdGhpcy5ub20sIFszMiw1NF0pCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB2YXIgbWFya2VyID0gTWFwLmNyZWF0ZU1hcE1hcmtlcihwb3NpdGlvbiwgbWFya2VyT3B0aW9ucywgewogICAgICAgICAgICAgICAgbWFwOiBtYXBNYXJrZXIsCiAgICAgICAgICAgICAgICBNYXA6IE1hcAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmICh2aXNpYmxlLmluZGV4T2YodGhpcy5ub20pPj0wKSB7CiAgICAgICAgICAgICAgICBNYXAuYWRkTWFya2VyKE1hcC5tYXAsIG1hcmtlcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbWFya2Vyc1t0aGlzLm5vbV0ucHVzaChtYXJrZXIpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEJ1dHRvbnMoKTsKICAgICAgICB9CiAgICAgICAgCgogICAgICAgIGZ1bmN0aW9uIGFkZEJ1dHRvbnMoKXsKICAgICAgICAgICAgJCgiLm1hcC1idXR0b25zIikuZW1wdHkoKTsKICAgICAgICAgICAgJC5lYWNoKG1hcmtlcnMsIGZ1bmN0aW9uKGssIG1rcyl7CiAgICAgICAgICAgICAgICBpZihta3MubGVuZ3RoID4gMCl7CiAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmlzaWJsZSA9ICh2aXNpYmxlLmluZGV4T2YoaykgPiAtMSk7CiAgICAgICAgICAgICAgICAgICAgYWRkVHlwZUJ1dHRvbihrLCBpc1Zpc2libGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dIaWRlTWFya2Vycyh0eXBlKXsKICAgICAgICAgICAgICAgIGlmKG1hcmtlcnMuaGFzT3duUHJvcGVydHkodHlwZSkpewogICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBtYXJrZXJzW3R5cGVdLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICBpZihtYXJrZXJzW3R5cGVdW2ldLmRhdGFDb250YWluZXIubWFwID09PSBudWxsICl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzW3R5cGVdW2ldLmRhdGFDb250YWluZXIubWFwID0gbWFya2Vyc1t0eXBlXVtpXS5kYXRhQ29udGFpbmVyLk1hcC5tYXA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzW3R5cGVdW2ldLmRhdGFDb250YWluZXIuTWFwLmFkZE1hcmtlcihtYXJrZXJzW3R5cGVdW2ldLmRhdGFDb250YWluZXIubWFwLCBtYXJrZXJzW3R5cGVdW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JUeXBlKHR5cGUsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzW3R5cGVdW2ldLmRhdGFDb250YWluZXIuTWFwLnJlbW92ZU1hcmtlcihtYXJrZXJzW3R5cGVdW2ldLmRhdGFDb250YWluZXIubWFwLCBtYXJrZXJzW3R5cGVdW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcnNbdHlwZV1baV0uZGF0YUNvbnRhaW5lci5tYXAgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvclR5cGUodHlwZSwgZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgZnVuY3Rpb24gYWRkVHlwZUJ1dHRvbih0eXBlLCBpc1Zpc2libGUpewogICAgICAgICAgICAgICAgdmFyIGJhciA9ICQoIi5tYXAtYnV0dG9ucyIpOwogICAgICAgICAgICAgICAgdmFyIGEgPSAkKCI8YS8+Iik7CiAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlID0gdHJhbnNsYXRlc1t0eXBlXTsKICAgICAgICAgICAgICAgIGEuYXR0cigiY2xhc3MiLCJtYXAtYnV0dG9uIik7CiAgICAgICAgICAgICAgICBhLmF0dHIoInJlbCIsIHR5cGUpOwogICAgICAgICAgICAgICAgYS5hdHRyKCJocmVmIiwiIyIpOwogICAgICAgICAgICAgICAgdmFyIGltZyA9ICQoIjxpbWcvPiIpOwogICAgICAgICAgICAgICAgaW1nLmF0dHIoJ3NyYycsICcvaS9wb2kvZ2V0SWNvbkJhcj90eXBlPScrdHlwZSk7CiAgICAgICAgICAgICAgICBpbWcuYXR0cigndGl0bGUnLCB0cmFuc2xhdGUpOwogICAgICAgICAgICAgICAgaW1nLmF0dHIoJ2FsdCcsIHR5cGUpOwogICAgICAgICAgICAgICAgaWYoaXNWaXNpYmxlKXsKICAgICAgICAgICAgICAgICAgICBpbWcuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJyMnK2NvbG9yTWFya2Vyc1t0eXBlXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhLmFwcGVuZChpbWcpOwogICAgICAgICAgICAgICAgCiAgICBhLmFwcGVuZCgnPHNwYW4gY2xhc3M9InR5cGVMaW5rIj4nK3RyYW5zbGF0ZSsnPC9zcGFuPicpOwoKICAgICAgICAgICAgICAgIGJhci5hcHBlbmQoYSk7CiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgZnVuY3Rpb24gY29sb3JUeXBlKHR5cGUsIHNob3cpewogICAgICAgICAgICAgICAgdmFyIGNvbG9yOwogICAgICAgICAgICAgICAgaWYoc2hvdyl7CiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSAnIycrY29sb3JNYXJrZXJzW3R5cGVdOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb2xvciA9ICd0cmFuc3BhcmVudCc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkKCdpbWdbYWx0PSInK3R5cGUrJyJdJykuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgY29sb3IpOwogICAgICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZnVuY3Rpb24gYXBwICgpewogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkLmdldFNjcmlwdCgnL2kvanNvbi9nZXRMYmltYXBzTGliJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICQuYWpheCgnL2kvanNvbi9nZXRBcGlLZXlzP3R5cGU9ZGV0YWlsJykuZG9uZShmdW5jdGlvbiAoYXBpS2V5cykgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gJ2phd2cnOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbSA6IDE0ICwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluWm9vbSA6IDEyICwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFuQ29udHJvbCA6IDEgLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZUNvbnRyb2wgOiAxICwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbUNvbnRyb2wgOiAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyB9LCBtYXBPcHRpb25zLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hcENvbnRhaW5lcjogJyNtYXBJbmZvc0NpdHknLAogICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogYXBpS2V5c1twcm92aWRlcl0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiB3aW5kb3cuZ2V0TWFwCiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgIGxiaW1hcHMuY2FsbGJhY2sobGJpbWFwcy5wcm92aWRlcnNbcHJvdmlkZXJdKShvcHRpb25zKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJjbGljayIsIi5tYXAtYnV0dG9uIiwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9ICQodGhpcykuYXR0cigicmVsIik7CiAgICAgICAgICAgICAgICAgICAgc2hvd0hpZGVNYXJrZXJzKHR5cGUpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJC5nZXQoJy9pL3BvaS9nZXRJY29uQ29sb3JzJykuZG9uZShmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNYXJrZXJzID0gcmVzdWx0OwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICQuZ2V0KCIvaS9wb2kvZ2V0U3RhdHM/aWRsb2NhbGl0ZT0xMjY4NyIse30sJ2pzb24nKS5kb25lKGZ1bmN0aW9uKHN0YXRzKXsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB2YXIgaSA9IDA7CiAgICB2YXIgdWwgPSAkKCI8dWwgY2xhc3M9J2xlZnRTdGF0Jy8+Iik7CiAgICB2YXIgdWwyID0gJCgiPHVsIGNsYXNzPSdyaWdodFN0YXQnLz4iKTsKICAgICQoJyNzdGF0c0luZm9zQ2l0eScpLmFwcGVuZCgnPGRpdiBjbGFzcz0idGhlbVRpdGxlIj5TdGF0aXN0aXF1ZXM8L2Rpdj4nKTsKICAgICQuZWFjaChzdGF0cywgZnVuY3Rpb24oaywgc3RhdCl7CiAgICAgICAgdmFyIGxpID0gJCgiPGxpLz4iKTsKICAgICAgICBpZihpJTIgPT09IDApewogICAgICAgICAgICBsaS5hZGRDbGFzcygnZXZlbicpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxpLmFkZENsYXNzKCdvZGQnKTsKICAgICAgICB9CiAgICAgICAgdmFyIHVuaXRlID0gIiUiOwogICAgICAgIGlmICgoc3RhdC50cmFuc2xhdGUpLmluY2x1ZGVzKCJOb21icmUiKXx8c3RhdC5wcm92aWRlciA9PSAnYXBpJyl7CiAgICAgICAgICAgdW5pdGUgPSAiIjsKICAgICAgICB9CiAgICAgICAgbGkuaHRtbCgnPHNwYW4gY2xhc3M9Im5hbWUiPicrc3RhdC50cmFuc2xhdGUrJzwvc3Bhbj48c3BhbiBjbGFzcz0idmFsdWUiPicrc3RhdC5zdGF0KycgJyt1bml0ZSsnPC9zcGFuPicpOwogICAgICAgIGlmIChpIDwgNyl7CiAgICAgICAgICAgIHVsLmFwcGVuZChsaSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGkgPiA2ICYmIGkgPCAxNCl7CiAgICAgICAgICAgICQoIiNzdGF0c0luZm9zQ2l0eSIpLmFwcGVuZCh1bCk7CiAgICAgICAgICAgIHVsMi5hcHBlbmQobGkpOwogICAgICAgIH0KICAgICAgICBpKys7CiAgICB9KTsKICAgICQoIiNzdGF0c0luZm9zQ2l0eSIpLmFwcGVuZCh1bDIpOwoKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgICAgIGFwcCgpOwogICAgICAgIAoKICAgICAgICAKICAgIDwvc2NyaXB0PgogICAgICAgIAoKICAgICAgICAKICAgICAgICAgCiAgICAgICAgDQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICBpZiAoJCgnLmxpc3RpbmcyJykubGVuZ3RoKSB7DQogICAgICAgICAgICB2YXIgZWxlbWVudCA9ICQoJy5saXN0aW5nMicpLmZpbmQoJy5wYW5lbEJpZW4nKTsNCg0KICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gOTkyKSB7DQogICAgICAgICAgICAgICAgZWxlbWVudC5tb3VzZWVudGVyKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2FwdGlvbiA9ICQodGhpcykuZmluZCgnZmlnY2FwdGlvbicpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXB0aW9uLnN0b3AodHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm1vdXNlbGVhdmUgKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2FwdGlvbiA9ICQodGhpcykuZmluZCgnZmlnY2FwdGlvbicpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXB0aW9uLnN0b3AodHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIDwvc2NyaXB0Pg0KIDwhLS0gw6AgdXRpbGlzZXIgc2kgb24gdmV1dCBham91dGVyIHVuIGZpY2hpZXIganMgc3DDqWNpZmlxdWUgYXUgc2l0ZSAtLT4KCgogICAgICAgIAogICAgCiAgICAgICAgICAgIAogICAgPHNjcmlwdD4KalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewogICAgICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLm9uKCdzdWJtaXQnLCAnZm9ybScsIGZ1bmN0aW9uKCl7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIG15Zm9ybSA9IGpRdWVyeSh0aGlzKTsKICAgICAgICAgICAgICAgIHZhciBhcyA9IGpRdWVyeSgnLmFzYnJ5dycsIG15Zm9ybSk7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYoYXMubGVuZ3RoKXsgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHZhciBkeW5hbWljID0galF1ZXJ5KCcuMicsIGFzKTsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudHZhbHVlID0gZHluYW1pYy52YWwoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ3ZhbHVlID0gZHluYW1pYy5hdHRyKCdkYXRhLW9yaWcnKTsKICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50dmFsdWUgPT09IG9yaWd2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2FpdGVkdmFsdWUgPSBkeW5hbWljLmF0dHIoJ2RhdGEtd2FpdCcpOwogICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljLnZhbCh3YWl0ZWR2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwo8L3NjcmlwdD4KCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2Nyb2xsVG9Ub3AiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tZmxlY2hlIGZzLTQwIj48L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgICAgICAKICAgICAgICAKICAgIDwvYm9keT4KPC9odG1sPgo=
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:51 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1331-Appartement-3-pieces-Auteuil.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:51 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=1usm3s4c15imd4jfv6k4umei1l; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13460'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:51 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1326-Superbe-Appartement-4-pieces-Auteuil-Nord.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:51 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=jthatlvro8r4r9q6mmmntiktqf; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '13744'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:51 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1322-Appartement-2-pieces-48m2-Ideal-pour-investisseur.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:51 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=4rvkpk61ln22hmelnfe7coev90; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14650'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:51 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1310-RARE-PARIS-XVIeme-PENTHOUSE-2-PIECES-TERRASSE-76M-prestige.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:51 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=pjnvntblliet62apap6lukmlhh; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '15622'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:51 GMT
- request:
    method: get
    uri: http://www.hempton-paris.com/1258-Superbe-Appartement-2-pieces-Paris-XVI-Auteuil.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 Apr 2020 15:02:51 GMT
      Server:
      - Apache/2.4.25 (Debian)
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-Bobcat-Version:
      - kitty.pryde.20200414.rev1
      Set-Cookie:
      - PHPSESSID=s46trcv5s50e0e89v9vb7i2u66; path=/
      - SRV=c32; path=/
      Vary:
      - Accept-Encoding
      X-Server-Id:
      - cluster3-w2
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '14646'
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 15 Apr 2020 15:02:51 GMT
recorded_with: VCR 5.1.0
