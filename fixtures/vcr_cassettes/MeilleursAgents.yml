---
http_interactions:
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:41 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=fb65f178f86f6c90aea48717f328e27a; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "35.201.236.186:80",
            "ip": "35.201.236.186",
            "port": "80",
            "connectionType": "Datacenter",
            "asn": "15169",
            "isp": "Google Cloud",
            "type": "elite",
            "lastChecked": 1589893072,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "unknown",
            "state": "unknown",
            "country": "unknown",
            "randomUserAgent": "Mozilla\/5.0 (compatible MSIE 10.0 Windows Phone 8.0 Trident\/6.0 IEMobile\/10.0 ARM Touch NOKIA Lumia 920)",
            "requestsRemaining": 24984
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:41 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/paris-75000/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible MSIE 10.0 Windows Phone 8.0 Trident/6.0 IEMobile/10.0
        ARM Touch NOKIA Lumia 920)
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:43 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=a038be3a-0e07-4775-87f8-e64523884304; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:18:43 GMT
      - __uzmb=1589894323; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:43 GMT
      - __uzmc=359911034050; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:43 GMT
      - __uzmd=1589894323; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:43 GMT
      - ab_dispatcher=53; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:18:43
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=17; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:18:43 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:48:43 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPcsw.MKW5nfO8nN6lxJc-5vAAC_zRqtE; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=02614f56-8733-4222-ae7f-450a2e8d5496; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:44 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:44 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=197433d6bfa54cebefbc3e0814e3b017; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "34.253.177.131:3128",
            "ip": "34.253.177.131",
            "port": "3128",
            "connectionType": "Datacenter",
            "asn": "16509",
            "isp": "Amazon.com",
            "type": "elite",
            "lastChecked": 1589892711,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "Dublin",
            "state": "L",
            "country": "IE",
            "randomUserAgent": "Mozilla\/5.0 (Linux U Android 3.1 en-us Xoom Build\/HMJ25) AppleWebKit\/534.13 (KHTML, like Gecko) Version\/4.0 Safari\/534.13 XiaoMi\/MiuiBrowser\/1.0",
            "requestsRemaining": 24983
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:44 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1967338635/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Linux U Android 3.1 en-us Xoom Build/HMJ25) AppleWebKit/534.13
        (KHTML, like Gecko) Version/4.0 Safari/534.13 XiaoMi/MiuiBrowser/1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:46 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=a8bffd42-a79c-4826-8226-e74ff4ff8767; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:18:46 GMT
      - __uzmb=1589894326; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:46 GMT
      - __uzmc=924691056409; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:46 GMT
      - __uzmd=1589894326; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:46 GMT
      - ab_dispatcher=12; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:18:46
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=49; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:18:46 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:48:46 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPctg.G-LsGsc7Yp5KUEuDNyJdi28kDgM; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=f641f9d5-3eac-4ad4-ab7c-0dfcd8a0d3fc; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:46 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:47 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=38f980b9ba19c45a7e8a5456e74d18e2; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "45.77.179.216:8080",
            "ip": "45.77.179.216",
            "port": "8080",
            "connectionType": "Datacenter",
            "asn": "20473",
            "isp": "Choopa, LLC",
            "type": "elite",
            "lastChecked": 1589893492,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "Heiwajima",
            "state": "13",
            "country": "JP",
            "randomUserAgent": "Mozilla\/5.0 (Linux U Android 2.1-update1 de-de HTC Desire 1.19.161.5 Build\/ERE27) AppleWebKit\/530.17 (KHTML, like Gecko) Version\/4.0 Mobile Safari",
            "requestsRemaining": 24982
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:47 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1967540316/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Linux U Android 2.1-update1 de-de HTC Desire 1.19.161.5 Build/ERE27)
        AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0 Mobile Safari
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:49 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=746f604f-bc05-44ab-b9c1-93b158904ff3; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:18:49 GMT
      - __uzmb=1589894329; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:49 GMT
      - __uzmc=856081087644; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:49 GMT
      - __uzmd=1589894329; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:49 GMT
      - ab_dispatcher=41; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:18:49
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=99; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:18:49 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:48:49 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPcuQ.AuVVsK_ecdQCQy2ifx2RSp9tNYo; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=183eadab-5b4c-4ecf-ae05-25ca3379abb9; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImZyIiBjbGFzcz0ibGlzdGluZyIgPgo8aGVhZD48bWV0YSBjaGFyc2V0PSJ1dGYtOCI+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPih3aW5kb3cuTlJFVU18fChOUkVVTT17fSkpLmxvYWRlcl9jb25maWc9e2xpY2Vuc2VLZXk6ImZiYjFiODI0MzciLGFwcGxpY2F0aW9uSUQ6IjM1NDE4OTM3In07d2luZG93Lk5SRVVNfHwoTlJFVU09e30pLF9fbnJfcmVxdWlyZT1mdW5jdGlvbihlLG4sdCl7ZnVuY3Rpb24gcih0KXtpZighblt0XSl7dmFyIGk9blt0XT17ZXhwb3J0czp7fX07ZVt0XVswXS5jYWxsKGkuZXhwb3J0cyxmdW5jdGlvbihuKXt2YXIgaT1lW3RdWzFdW25dO3JldHVybiByKGl8fG4pfSxpLGkuZXhwb3J0cyl9cmV0dXJuIG5bdF0uZXhwb3J0c31pZigiZnVuY3Rpb24iPT10eXBlb2YgX19ucl9yZXF1aXJlKXJldHVybiBfX25yX3JlcXVpcmU7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspcih0W2ldKTtyZXR1cm4gcn0oezE6W2Z1bmN0aW9uKGUsbix0KXtmdW5jdGlvbiByKCl7fWZ1bmN0aW9uIGkoZSxuLHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBvKGUsW3Uubm93KCldLmNvbmNhdChmKGFyZ3VtZW50cykpLG4/bnVsbDp0aGlzLHQpLG4/dm9pZCAwOnRoaXN9fXZhciBvPWUoImhhbmRsZSIpLGE9ZSg0KSxmPWUoNSksYz1lKCJlZSIpLmdldCgidHJhY2VyIiksdT1lKCJsb2FkZXIiKSxzPU5SRVVNOyJ1bmRlZmluZWQiPT10eXBlb2Ygd2luZG93Lm5ld3JlbGljJiYobmV3cmVsaWM9cyk7dmFyIHA9WyJzZXRQYWdlVmlld05hbWUiLCJzZXRDdXN0b21BdHRyaWJ1dGUiLCJzZXRFcnJvckhhbmRsZXIiLCJmaW5pc2hlZCIsImFkZFRvVHJhY2UiLCJpbmxpbmVIaXQiLCJhZGRSZWxlYXNlIl0sbD0iYXBpLSIsZD1sKyJpeG4tIjthKHAsZnVuY3Rpb24oZSxuKXtzW25dPWkobCtuLCEwLCJhcGkiKX0pLHMuYWRkUGFnZUFjdGlvbj1pKGwrImFkZFBhZ2VBY3Rpb24iLCEwKSxzLnNldEN1cnJlbnRSb3V0ZU5hbWU9aShsKyJyb3V0ZU5hbWUiLCEwKSxuLmV4cG9ydHM9bmV3cmVsaWMscy5pbnRlcmFjdGlvbj1mdW5jdGlvbigpe3JldHVybihuZXcgcikuZ2V0KCl9O3ZhciBtPXIucHJvdG90eXBlPXtjcmVhdGVUcmFjZXI6ZnVuY3Rpb24oZSxuKXt2YXIgdD17fSxyPXRoaXMsaT0iZnVuY3Rpb24iPT10eXBlb2YgbjtyZXR1cm4gbyhkKyJ0cmFjZXIiLFt1Lm5vdygpLGUsdF0sciksZnVuY3Rpb24oKXtpZihjLmVtaXQoKGk/IiI6Im5vLSIpKyJmbi1zdGFydCIsW3Uubm93KCkscixpXSx0KSxpKXRyeXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goZSl7dGhyb3cgYy5lbWl0KCJmbi1lcnIiLFthcmd1bWVudHMsdGhpcyxlXSx0KSxlfWZpbmFsbHl7Yy5lbWl0KCJmbi1lbmQiLFt1Lm5vdygpXSx0KX19fX07YSgiYWN0aW9uVGV4dCxzZXROYW1lLHNldEF0dHJpYnV0ZSxzYXZlLGlnbm9yZSxvbkVuZCxnZXRDb250ZXh0LGVuZCxnZXQiLnNwbGl0KCIsIiksZnVuY3Rpb24oZSxuKXttW25dPWkoZCtuKX0pLG5ld3JlbGljLm5vdGljZUVycm9yPWZ1bmN0aW9uKGUsbil7InN0cmluZyI9PXR5cGVvZiBlJiYoZT1uZXcgRXJyb3IoZSkpLG8oImVyciIsW2UsdS5ub3coKSwhMSxuXSl9fSx7fV0sMjpbZnVuY3Rpb24oZSxuLHQpe2Z1bmN0aW9uIHIoZSxuKXt2YXIgdD1lLmdldEVudHJpZXMoKTt0LmZvckVhY2goZnVuY3Rpb24oZSl7ImZpcnN0LXBhaW50Ij09PWUubmFtZT9jKCJ0aW1pbmciLFsiZnAiLE1hdGguZmxvb3IoZS5zdGFydFRpbWUpXSk6ImZpcnN0LWNvbnRlbnRmdWwtcGFpbnQiPT09ZS5uYW1lJiZjKCJ0aW1pbmciLFsiZmNwIixNYXRoLmZsb29yKGUuc3RhcnRUaW1lKV0pfSl9ZnVuY3Rpb24gaShlLG4pe3ZhciB0PWUuZ2V0RW50cmllcygpO3QubGVuZ3RoPjAmJmMoImxjcCIsW3RbdC5sZW5ndGgtMV1dKX1mdW5jdGlvbiBvKGUpe2lmKGUgaW5zdGFuY2VvZiBzJiYhbCl7dmFyIG4sdD1NYXRoLnJvdW5kKGUudGltZVN0YW1wKTtuPXQ+MWUxMj9EYXRlLm5vdygpLXQ6dS5ub3coKS10LGw9ITAsYygidGltaW5nIixbImZpIix0LHt0eXBlOmUudHlwZSxmaWQ6bn1dKX19aWYoISgiaW5pdCJpbiBOUkVVTSYmInBhZ2Vfdmlld190aW1pbmciaW4gTlJFVU0uaW5pdCYmImVuYWJsZWQiaW4gTlJFVU0uaW5pdC5wYWdlX3ZpZXdfdGltaW5nJiZOUkVVTS5pbml0LnBhZ2Vfdmlld190aW1pbmcuZW5hYmxlZD09PSExKSl7dmFyIGEsZixjPWUoImhhbmRsZSIpLHU9ZSgibG9hZGVyIikscz1OUkVVTS5vLkVWO2lmKCJQZXJmb3JtYW5jZU9ic2VydmVyImluIHdpbmRvdyYmImZ1bmN0aW9uIj09dHlwZW9mIHdpbmRvdy5QZXJmb3JtYW5jZU9ic2VydmVyKXthPW5ldyBQZXJmb3JtYW5jZU9ic2VydmVyKHIpLGY9bmV3IFBlcmZvcm1hbmNlT2JzZXJ2ZXIoaSk7dHJ5e2Eub2JzZXJ2ZSh7ZW50cnlUeXBlczpbInBhaW50Il19KSxmLm9ic2VydmUoe2VudHJ5VHlwZXM6WyJsYXJnZXN0LWNvbnRlbnRmdWwtcGFpbnQiXX0pfWNhdGNoKHApe319aWYoImFkZEV2ZW50TGlzdGVuZXIiaW4gZG9jdW1lbnQpe3ZhciBsPSExLGQ9WyJjbGljayIsImtleWRvd24iLCJtb3VzZWRvd24iLCJwb2ludGVyZG93biIsInRvdWNoc3RhcnQiXTtkLmZvckVhY2goZnVuY3Rpb24oZSl7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihlLG8sITEpfSl9fX0se31dLDM6W2Z1bmN0aW9uKGUsbix0KXtmdW5jdGlvbiByKGUsbil7aWYoIWkpcmV0dXJuITE7aWYoZSE9PWkpcmV0dXJuITE7aWYoIW4pcmV0dXJuITA7aWYoIW8pcmV0dXJuITE7Zm9yKHZhciB0PW8uc3BsaXQoIi4iKSxyPW4uc3BsaXQoIi4iKSxhPTA7YTxyLmxlbmd0aDthKyspaWYoclthXSE9PXRbYV0pcmV0dXJuITE7cmV0dXJuITB9dmFyIGk9bnVsbCxvPW51bGwsYT0vVmVyc2lvblwvKFxTKylccytTYWZhcmkvO2lmKG5hdmlnYXRvci51c2VyQWdlbnQpe3ZhciBmPW5hdmlnYXRvci51c2VyQWdlbnQsYz1mLm1hdGNoKGEpO2MmJmYuaW5kZXhPZigiQ2hyb21lIik9PT0tMSYmZi5pbmRleE9mKCJDaHJvbWl1bSIpPT09LTEmJihpPSJTYWZhcmkiLG89Y1sxXSl9bi5leHBvcnRzPXthZ2VudDppLHZlcnNpb246byxtYXRjaDpyfX0se31dLDQ6W2Z1bmN0aW9uKGUsbix0KXtmdW5jdGlvbiByKGUsbil7dmFyIHQ9W10scj0iIixvPTA7Zm9yKHIgaW4gZSlpLmNhbGwoZSxyKSYmKHRbb109bihyLGVbcl0pLG8rPTEpO3JldHVybiB0fXZhciBpPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7bi5leHBvcnRzPXJ9LHt9XSw1OltmdW5jdGlvbihlLG4sdCl7ZnVuY3Rpb24gcihlLG4sdCl7bnx8KG49MCksInVuZGVmaW5lZCI9PXR5cGVvZiB0JiYodD1lP2UubGVuZ3RoOjApO2Zvcih2YXIgcj0tMSxpPXQtbnx8MCxvPUFycmF5KGk8MD8wOmkpOysrcjxpOylvW3JdPWVbbityXTtyZXR1cm4gb31uLmV4cG9ydHM9cn0se31dLDY6W2Z1bmN0aW9uKGUsbix0KXtuLmV4cG9ydHM9e2V4aXN0czoidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdy5wZXJmb3JtYW5jZSYmd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZyYmInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cucGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydH19LHt9XSxlZTpbZnVuY3Rpb24oZSxuLHQpe2Z1bmN0aW9uIHIoKXt9ZnVuY3Rpb24gaShlKXtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlIGluc3RhbmNlb2Ygcj9lOmU/YyhlLGYsbyk6bygpfWZ1bmN0aW9uIHQodCxyLGksbyl7aWYoIWwuYWJvcnRlZHx8byl7ZSYmZSh0LHIsaSk7Zm9yKHZhciBhPW4oaSksZj12KHQpLGM9Zi5sZW5ndGgsdT0wO3U8Yzt1KyspZlt1XS5hcHBseShhLHIpO3ZhciBwPXNbeVt0XV07cmV0dXJuIHAmJnAucHVzaChbYix0LHIsYV0pLGF9fWZ1bmN0aW9uIGQoZSxuKXtoW2VdPXYoZSkuY29uY2F0KG4pfWZ1bmN0aW9uIG0oZSxuKXt2YXIgdD1oW2VdO2lmKHQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdFtyXT09PW4mJnQuc3BsaWNlKHIsMSl9ZnVuY3Rpb24gdihlKXtyZXR1cm4gaFtlXXx8W119ZnVuY3Rpb24gZyhlKXtyZXR1cm4gcFtlXT1wW2VdfHxpKHQpfWZ1bmN0aW9uIHcoZSxuKXt1KGUsZnVuY3Rpb24oZSx0KXtuPW58fCJmZWF0dXJlIix5W3RdPW4sbiBpbiBzfHwoc1tuXT1bXSl9KX12YXIgaD17fSx5PXt9LGI9e29uOmQsYWRkRXZlbnRMaXN0ZW5lcjpkLHJlbW92ZUV2ZW50TGlzdGVuZXI6bSxlbWl0OnQsZ2V0OmcsbGlzdGVuZXJzOnYsY29udGV4dDpuLGJ1ZmZlcjp3LGFib3J0OmEsYWJvcnRlZDohMX07cmV0dXJuIGJ9ZnVuY3Rpb24gbygpe3JldHVybiBuZXcgcn1mdW5jdGlvbiBhKCl7KHMuYXBpfHxzLmZlYXR1cmUpJiYobC5hYm9ydGVkPSEwLHM9bC5iYWNrbG9nPXt9KX12YXIgZj0ibnJAY29udGV4dCIsYz1lKCJnb3MiKSx1PWUoNCkscz17fSxwPXt9LGw9bi5leHBvcnRzPWkoKTtsLmJhY2tsb2c9c30se31dLGdvczpbZnVuY3Rpb24oZSxuLHQpe2Z1bmN0aW9uIHIoZSxuLHQpe2lmKGkuY2FsbChlLG4pKXJldHVybiBlW25dO3ZhciByPXQoKTtpZihPYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5rZXlzKXRyeXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7dmFsdWU6cix3cml0YWJsZTohMCxlbnVtZXJhYmxlOiExfSkscn1jYXRjaChvKXt9cmV0dXJuIGVbbl09cixyfXZhciBpPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7bi5leHBvcnRzPXJ9LHt9XSxoYW5kbGU6W2Z1bmN0aW9uKGUsbix0KXtmdW5jdGlvbiByKGUsbix0LHIpe2kuYnVmZmVyKFtlXSxyKSxpLmVtaXQoZSxuLHQpfXZhciBpPWUoImVlIikuZ2V0KCJoYW5kbGUiKTtuLmV4cG9ydHM9cixyLmVlPWl9LHt9XSxpZDpbZnVuY3Rpb24oZSxuLHQpe2Z1bmN0aW9uIHIoZSl7dmFyIG49dHlwZW9mIGU7cmV0dXJuIWV8fCJvYmplY3QiIT09biYmImZ1bmN0aW9uIiE9PW4/LTE6ZT09PXdpbmRvdz8wOmEoZSxvLGZ1bmN0aW9uKCl7cmV0dXJuIGkrK30pfXZhciBpPTEsbz0ibnJAaWQiLGE9ZSgiZ29zIik7bi5leHBvcnRzPXJ9LHt9XSxsb2FkZXI6W2Z1bmN0aW9uKGUsbix0KXtmdW5jdGlvbiByKCl7aWYoIXgrKyl7dmFyIGU9RS5pbmZvPU5SRVVNLmluZm8sbj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTtpZihzZXRUaW1lb3V0KHMuYWJvcnQsM2U0KSwhKGUmJmUubGljZW5zZUtleSYmZS5hcHBsaWNhdGlvbklEJiZuKSlyZXR1cm4gcy5hYm9ydCgpO3UoeSxmdW5jdGlvbihuLHQpe2Vbbl18fChlW25dPXQpfSksYygibWFyayIsWyJvbmxvYWQiLGEoKStFLm9mZnNldF0sbnVsbCwiYXBpIik7dmFyIHQ9ZC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTt0LnNyYz0iaHR0cHM6Ly8iK2UuYWdlbnQsbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LG4pfX1mdW5jdGlvbiBpKCl7ImNvbXBsZXRlIj09PWQucmVhZHlTdGF0ZSYmbygpfWZ1bmN0aW9uIG8oKXtjKCJtYXJrIixbImRvbUNvbnRlbnQiLGEoKStFLm9mZnNldF0sbnVsbCwiYXBpIil9ZnVuY3Rpb24gYSgpe3JldHVybiBPLmV4aXN0cyYmcGVyZm9ybWFuY2Uubm93P01hdGgucm91bmQocGVyZm9ybWFuY2Uubm93KCkpOihmPU1hdGgubWF4KChuZXcgRGF0ZSkuZ2V0VGltZSgpLGYpKS1FLm9mZnNldH12YXIgZj0obmV3IERhdGUpLmdldFRpbWUoKSxjPWUoImhhbmRsZSIpLHU9ZSg0KSxzPWUoImVlIikscD1lKDMpLGw9d2luZG93LGQ9bC5kb2N1bWVudCxtPSJhZGRFdmVudExpc3RlbmVyIix2PSJhdHRhY2hFdmVudCIsZz1sLlhNTEh0dHBSZXF1ZXN0LHc9ZyYmZy5wcm90b3R5cGU7TlJFVU0ubz17U1Q6c2V0VGltZW91dCxTSTpsLnNldEltbWVkaWF0ZSxDVDpjbGVhclRpbWVvdXQsWEhSOmcsUkVROmwuUmVxdWVzdCxFVjpsLkV2ZW50LFBSOmwuUHJvbWlzZSxNTzpsLk11dGF0aW9uT2JzZXJ2ZXJ9O3ZhciBoPSIiK2xvY2F0aW9uLHk9e2JlYWNvbjoiYmFtLm5yLWRhdGEubmV0IixlcnJvckJlYWNvbjoiYmFtLm5yLWRhdGEubmV0IixhZ2VudDoianMtYWdlbnQubmV3cmVsaWMuY29tL25yLTExNjcubWluLmpzIn0sYj1nJiZ3JiZ3W21dJiYhL0NyaU9TLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLEU9bi5leHBvcnRzPXtvZmZzZXQ6Zixub3c6YSxvcmlnaW46aCxmZWF0dXJlczp7fSx4aHJXcmFwcGFibGU6Yix1c2VyQWdlbnQ6cH07ZSgxKSxlKDIpLGRbbV0/KGRbbV0oIkRPTUNvbnRlbnRMb2FkZWQiLG8sITEpLGxbbV0oImxvYWQiLHIsITEpKTooZFt2XSgib25yZWFkeXN0YXRlY2hhbmdlIixpKSxsW3ZdKCJvbmxvYWQiLHIpKSxjKCJtYXJrIixbImZpcnN0Ynl0ZSIsZl0sbnVsbCwiYXBpIik7dmFyIHg9MCxPPWUoNil9LHt9XSwid3JhcC1mdW5jdGlvbiI6W2Z1bmN0aW9uKGUsbix0KXtmdW5jdGlvbiByKGUpe3JldHVybiEoZSYmZSBpbnN0YW5jZW9mIEZ1bmN0aW9uJiZlLmFwcGx5JiYhZVthXSl9dmFyIGk9ZSgiZWUiKSxvPWUoNSksYT0ibnJAb3JpZ2luYWwiLGY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxjPSExO24uZXhwb3J0cz1mdW5jdGlvbihlLG4pe2Z1bmN0aW9uIHQoZSxuLHQsaSl7ZnVuY3Rpb24gbnJXcmFwcGVyKCl7dmFyIHIsYSxmLGM7dHJ5e2E9dGhpcyxyPW8oYXJndW1lbnRzKSxmPSJmdW5jdGlvbiI9PXR5cGVvZiB0P3QocixhKTp0fHx7fX1jYXRjaCh1KXtsKFt1LCIiLFtyLGEsaV0sZl0pfXMobisic3RhcnQiLFtyLGEsaV0sZik7dHJ5e3JldHVybiBjPWUuYXBwbHkoYSxyKX1jYXRjaChwKXt0aHJvdyBzKG4rImVyciIsW3IsYSxwXSxmKSxwfWZpbmFsbHl7cyhuKyJlbmQiLFtyLGEsY10sZil9fXJldHVybiByKGUpP2U6KG58fChuPSIiKSxucldyYXBwZXJbYV09ZSxwKGUsbnJXcmFwcGVyKSxucldyYXBwZXIpfWZ1bmN0aW9uIHUoZSxuLGksbyl7aXx8KGk9IiIpO3ZhciBhLGYsYyx1PSItIj09PWkuY2hhckF0KDApO2ZvcihjPTA7YzxuLmxlbmd0aDtjKyspZj1uW2NdLGE9ZVtmXSxyKGEpfHwoZVtmXT10KGEsdT9mK2k6aSxvLGYpKX1mdW5jdGlvbiBzKHQscixpKXtpZighY3x8bil7dmFyIG89YztjPSEwO3RyeXtlLmVtaXQodCxyLGksbil9Y2F0Y2goYSl7bChbYSx0LHIsaV0pfWM9b319ZnVuY3Rpb24gcChlLG4pe2lmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmtleXMpdHJ5e3ZhciB0PU9iamVjdC5rZXlzKGUpO3JldHVybiB0LmZvckVhY2goZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sdCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGVbdF19LHNldDpmdW5jdGlvbihuKXtyZXR1cm4gZVt0XT1uLG59fSl9KSxufWNhdGNoKHIpe2woW3JdKX1mb3IodmFyIGkgaW4gZSlmLmNhbGwoZSxpKSYmKG5baV09ZVtpXSk7cmV0dXJuIG59ZnVuY3Rpb24gbChuKXt0cnl7ZS5lbWl0KCJpbnRlcm5hbC1lcnJvciIsbil9Y2F0Y2godCl7fX1yZXR1cm4gZXx8KGU9aSksdC5pblBsYWNlPXUsdC5mbGFnPWEsdH19LHt9XX0se30sWyJsb2FkZXIiXSk7PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPndpbmRvdy5OUkVVTXx8KE5SRVVNPXt9KTtOUkVVTS5pbmZvPXsiYmVhY29uIjoiYmFtLm5yLWRhdGEubmV0IiwiZXJyb3JCZWFjb24iOiJiYW0ubnItZGF0YS5uZXQiLCJsaWNlbnNlS2V5IjoiZmJiMWI4MjQzNyIsImFwcGxpY2F0aW9uSUQiOiIzNTQxODkzNyIsInRyYW5zYWN0aW9uTmFtZSI6Ik5sRUVZRW9DQzBNSFdrd0lYUThiSUVGV0FCRlpDVmNYRmtVV0doQmRYUlFXSGdwUVN4VmJEMU1WRGxRS0ZrUVBWMTgrVmdSQUIxMVVQQlpWQ2xVPSIsInF1ZXVlVGltZSI6MCwiYXBwbGljYXRpb25UaW1lIjoyOTEsImFnZW50IjoiIn08L3NjcmlwdD4KICAgICAgICA8dGl0bGU+VmVudGUgQXBwYXJ0ZW1lbnQgMsKgcGnDqGNlcwogICAgIGRlIDUxwqBtwrI8L3RpdGxlPgoKICAgICAgICAgCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iUlVFIEJBUkJFVCBERSBKT1VZICZsdDtici8mZ3Q7QSB1bmUgYWRyZXNzZSB0csOocyBwcmlzw6llIGV0IGNvbmZpZGVudGllbGxlIGR1IDdlIGFycm9uZGlzc2VtZW50LCDDoCBkZXV4IHBhcyBkdSBNdXPDqWUgUm9kaW4sIGRlcyBJbnZhbGlkZXMgZXQgw6AgcHJveGltaXTDqSBkdSBCT04gTUFSQ0hFLCAgZGFucyB1biBqb2xpIGltbWV1YmxlIGFuY2llbiBiaWVuIGVudHJldGVudSBlbiBwaWVycmUgZGUgdGFpbGxlLCBhcHBhcnRlbWVudCBkZSBjaGFybWUgYXUgY2lucXVpw6htZSDDqXRhZ2UgcGFyIGFzY2Vuc2V1ciwgZCYjMzk7dW5lIHN1cGVyZmljaWUgZGUgIDUxLDEwICBtwrIgbG9pIENhcnJleiBjb21wcmVuYW50IHVuZSBlbnRyw6llIG91dnJhbnQgc3VyIHVuIHPDqWpvdXIgZW4gTCwgdW5lIGNoYW1icmUgYXZlYyBzYWxsZSBkZSBiYWlucyBldCBkcmVzc2luZywgdW5lIGN1aXNpbmUgc8OpcGFyw6llLCB1biBkw6liYXJyYXMuIEwmIzM5O2FwcGFydGVtZW50IGVzdCBvcmllbnTDqSBzdWQgZXQgZXN0LCBpbCBkb25uZSBzdXIgbGEgY291ciBkZSBsJiMzOTtpbW1ldWJsZSBhdSBjYWxtZSBhYnNvbHUsIGVzdCBiYWlnbsOpIGRlIHNvbGVpbC4gQWRyZXNzZSBkZSBwcmVtaWVyIG9yZHJlLiBMZSByYXZhbGVtZW50IGRlIGxhIGNvdXIgZXN0IGVuIGNvdXJzLiI+CiAKCiAgICAgICAgCiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9Ik1laWxsZXVyc2FnZW50cy5jb20iIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9Ik9idGVuZXogZ3JhdHVpdGVtZW50IHVuZSBlc3RpbWF0aW9uIGVuIGxpZ25lIGR1IHByaXggZGUgdm90cmUgYmllbiBpbW1vYmlsaWVyLCBwdWlzIGVuZ2FnZXogbGVzIG1laWxsZXVyZXMgYWdlbmNlcyBpbW1vYmlsacOocmVzIHBhcnRlbmFpcmVzIGRlIE1laWxsZXVyc0FnZW50cy5jb20gcG91ciB2ZW5kcmUgdm90cmUgYmllbiBpbW1vYmlsaWVyIGF1IG1laWxsZXVyIHByaXguIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9IndlYnNpdGUiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tLyIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9zdGF0aWMvYnJvd3Nlcl9pY29ucy9tcy1pY29uLTMxMHgzMTAucG5nP3Q9MTU4OTg3NTAzOCIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTp3aWR0aCIgY29udGVudD0iMzEwIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmhlaWdodCIgY29udGVudD0iMzEwIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOnR5cGUiIGNvbnRlbnQ9ImltYWdlL3BuZyIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTphbHQiIGNvbnRlbnQ9IkxvZ28gTWVpbGxldXJzYWdlbnRzIiAvPgogCgogICAgICAgIDwhLS0KICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgKiBPTiBSRUNSVVRFICEgT04gUkVDUlVURSAhIE9OIFJFQ1JVVEUgISBPTiBSRUNSVVRFICEgT04gUkVDUlVURSAhIE9OIFJFQ1JVVEUgISBPTiBSRUNSVVRFICEgKgogICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICAqIEVudmllIGRlIGZhaXJlIHBhcnRpZSBkZSBub3RyZSDDqXF1aXBlIGRlIGTDqXZlbG9wcGV1cnMgPyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoKICAgICAgICAqIFJlbmRlei12b3VzIHN1ciA6IGh0dHBzOi8vY2FycmllcmUubWVpbGxldXJzYWdlbnRzLmNvbS8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqCiAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICAgIC0tPjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ2aWV3cG9ydC1maXQ9Y292ZXIsIHdpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9MCwgbWluaW1hbC11aSI+CiAgICAgICAgICAgIDxtZXRhIG5hbWU9ImJpdGx5LXZlcmlmaWNhdGlvbiIgY29udGVudD0iMTg5ZmNkYzVhNDdlIiAvPgogICAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT0iZmI6YWRtaW5zIiBjb250ZW50PSI2NDcxOTg5NTEiIC8+CiAgICAgICAgICAgIDxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLWNhcGFibGUiIGNvbnRlbnQ9InllcyI+CiAgICAgICAgICAgIDxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLXN0YXR1cy1iYXItc3R5bGUiIGNvbnRlbnQ9ImJsYWNrIj48bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3N0YXRpYy9idWlsZC9zaXRlL2Nzcy9tYWluLmM4ZGQ3ZGQ2LmNzcz90PTE1ODk4NzU0NjMiPgoKICAgICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSI1N3g1NyIgaHJlZj0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9zdGF0aWMvYnJvd3Nlcl9pY29ucy9hcHBsZS1pY29uLTU3eDU3LnBuZz90PTE1ODk4NzUwMzgiPgogICAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjYweDYwIiBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3N0YXRpYy9icm93c2VyX2ljb25zL2FwcGxlLWljb24tNjB4NjAucG5nP3Q9MTU4OTg3NTAzOCI+CiAgICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iNzJ4NzIiIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvYXBwbGUtaWNvbi03Mng3Mi5wbmc/dD0xNTg5ODc1MDM4Ij4KICAgICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSI3Nng3NiIgaHJlZj0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9zdGF0aWMvYnJvd3Nlcl9pY29ucy9hcHBsZS1pY29uLTc2eDc2LnBuZz90PTE1ODk4NzUwMzgiPgogICAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjExNHgxMTQiIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvYXBwbGUtaWNvbi0xMTR4MTE0LnBuZz90PTE1ODk4NzUwMzgiPgogICAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjEyMHgxMjAiIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvYXBwbGUtaWNvbi0xMjB4MTIwLnBuZz90PTE1ODk4NzUwMzgiPgogICAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE0NHgxNDQiIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvYXBwbGUtaWNvbi0xNDR4MTQ0LnBuZz90PTE1ODk4NzUwMzgiPgogICAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvYXBwbGUtaWNvbi0xNTJ4MTUyLnBuZz90PTE1ODk4NzUwMzgiPgogICAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE4MHgxODAiIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvYXBwbGUtaWNvbi0xODB4MTgwLnBuZz90PTE1ODk4NzUwMzgiPgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMTkyeDE5MiIgIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvYW5kcm9pZC1pY29uLTE5MngxOTIucG5nP3Q9MTU4OTg3NTAzOCI+CiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS9wbmciIHNpemVzPSIzMngzMiIgaHJlZj0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9zdGF0aWMvYnJvd3Nlcl9pY29ucy9mYXZpY29uLTMyeDMyLnBuZz90PTE1ODk4NzUwMzgiPgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iOTZ4OTYiIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvZmF2aWNvbi05Nng5Ni5wbmc/dD0xNTg5ODc1MDM4Ij4KICAgICAgICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3BuZyIgc2l6ZXM9IjE2eDE2IiBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3N0YXRpYy9icm93c2VyX2ljb25zL2Zhdmljb24tMTZ4MTYucG5nP3Q9MTU4OTg3NTAzOCI+CiAgICAgICAgPGxpbmsgcmVsPSJpY29uIHNob3J0Y3V0IiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvZmF2aWNvbi5pY28/dD0xNTg5ODc1MDM4Ij4KICAgICAgICA8bGluayByZWw9Im1hbmlmZXN0IiBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3N0YXRpYy9icm93c2VyX2ljb25zL21hbmlmZXN0Lmpzb24/dD0xNTg5ODc1MDM4Ij4KICAgICAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIgY29udGVudD0iIzAwNzRlNCI+CiAgICAgICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2Jyb3dzZXJfaWNvbnMvbXMtaWNvbi0xNDR4MTQ0LnBuZz90PTE1ODk4NzUwMzgiPgogICAgICAgIDxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjMDA3NGU0Ij48c2NyaXB0PgogICAgICAgIAoKICAgICAgICB2YXIgTUEgPSB7Q29uZmlnOiB7fX07TUEuQ29uZmlnLkNETl9ET01BSU4gPSAid3d3Lm1laWxsZXVyc2FnZW50cy5jb20iO01BLkNvbmZpZy5TRVNTSU9OX0NPT0tJRV9ET01BSU4gPSAiLm1laWxsZXVyc2FnZW50cy5jb20iO01BLkNvbmZpZy5HRU9BUElfVVJMID0gImh0dHBzOi8vZ2VvLm1laWxsZXVyc2FnZW50cy5jb20vZ2VvL3YxLyI7TUEuQ29uZmlnLklORElDRUFQSV9VUkwgPSAiaHR0cHM6Ly9pbmRpY2VzLm1laWxsZXVyc2FnZW50cy5jb20vaW5kaWNlcy92MS8iO01BLkNvbmZpZy5HT09HTEVfTUFQU19BUElfS0VZID0gIkFJemFTeUNjMEJJUTZ3bS13WDFUaUFUX0dQTjdGS3R2SDFRcXBrbyI7TUEuQ29uZmlnLk1BUEJPWF9BQ0NFU1NfVE9LRU4gPSAicGsuZXlKMUlqb2liV1ZwYkd4bGRYSnpZV2RsYm5Seklpd2lZU0k2SW1OcU1XVjVZblJwTURBd01Ia3llWFJuZDNKa2RYUmlhREVpZlEuZW1jRnNuM094NldjS21PSGhiVE9QUSI7TUEuQ29uZmlnLk1BUEJPWF9TVEFUSUNfU1RZTEUgPSAibWVpbGxldXJzYWdlbnRzL2NqMWV5dTE3YzAwaXYycnFzbHFpODY2eTYiO01BLkNvbmZpZy5QUk9fV0VCU0lURV9VUkwgPSAiaHR0cHM6Ly9wcm8ubWVpbGxldXJzYWdlbnRzLmNvbSI7TUEuQ29uZmlnLldFQkFOQUxZVElDU19VUkwgPSAiaHR0cHM6Ly93YS5tZWlsbGV1cnNhZ2VudHMuY29tL3dhLyI7TUEuQ29uZmlnLlBMQUNFX1RZUEVfUExVUkFMUyA9IHsiY29udGluZW50IjogImNvbnRpbmVudHMiLCAiY291bnRyeSI6ICJjb3VudHJpZXMiLCAicmVnaW9uIjogInJlZ2lvbnMiLCAic3VicmVnaW9uIjogInN1YnJlZ2lvbnMiLCAiY2l0eSI6ICJjaXRpZXMiLCAic3ViY2l0eSI6ICJzdWJjaXRpZXMiLCAiYXJybXVuIjogImFycm11bnMiLCAiYm9yb3VnaCI6ICJib3JvdWdocyIsICJuZWlnaGJvcmhvb2QiOiAibmVpZ2hib3Job29kcyIsICJpcmlzIjogImlyaXNlcyIsICJzdHJlZXQiOiAic3RyZWV0cyIsICJhZGRyZXNzIjogImFkZHJlc3NlcyIsICJ1cmJhbl91bml0IjogInVyYmFuX3VuaXRzIiwgInBhcmNlbGxlIjogInBhcmNlbGxlcyJ9O01BLkNvbmZpZy5ERUJVRyA9IGZhbHNlO01BLkNvbmZpZy5XQV9ERUJVRyA9IGZhbHNlO01BLkNvbmZpZy5QUklDRV9NQVBfVElMRV9BUElfSE9TVFMgPSBbInRpbGUubWVpbGxldXJzYWdlbnRzLmNvbSJdO01BLkNvbmZpZy5HQV9ERUJVRyA9IGZhbHNlO01BLkNvbmZpZy5BTEdPTElBX1NFQVJDSF9BUElfS0VZID0gIjZiYjQxMmUyODI3ZDExOGM2YWZkNTRjYmQ5YmE4YjI3IjtNQS5Db25maWcuQUxHT0xJQV9BUFBfSUQgPSAicGw1SFFLMDJUOFZZIjtNQS5Db25maWcuU1RBVElDX01BUF9CTFVFX01BUktFUiA9ICJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3N0YXRpYy9pbWFnZXMvYmx1ZS1tYXJrZXIucG5nIjtNQS5Db25maWcuU1RBVElDX01BUF9IT01FX1NQT1RfTUFSS0VSID0gImh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2ltYWdlcy9ob21lLXNwb3QtaGlnaGxpZ2h0QDJ4LnBuZyI7TUEuQ29uZmlnLlNFTlRSWV9EU04gPSAiaHR0cHM6Ly85NWE3NzFhMDAxMjk0OTExOGJiYzY2MTI2OWFiYTU5YUBzZW50cnkuaW8vNTkzNjAiO01BLkNvbmZpZy5HRU9BUElfTUFYX1JFU1VMVFMgPSA1OwogICAgICAgIAogICAgICAgIE1BLkNvbmZpZy5ISUdIQ0hBUlRTX1VSTCA9ICdodHRwczovL2NvZGUuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cy5qcyc7CgogICAgICAgIE1BLkNvbmZpZy5ESVNQQVRDSEVSUyA9IHsiYWJfZGlzcGF0Y2hlciI6IHsiY29tcGFyYXRvcl9mZWF0dXJlZF9yZWFsdG9ycyI6IHRydWUsICJlc3RpbWFfZmVhdHVyZWRfcmVhbHRvcnMiOiBmYWxzZSwgIm15cHJvX2Nvbm5lY3QiOiB0cnVlLCAibXlwcm9fY29ubmVjdF90YXJnZXRpbmciOiBmYWxzZSwgIm15cHJvX2VzdGltYXRpb25zIjogdHJ1ZSwgInBhc3Rfc2FsZXNfcmVwb3J0IjogdHJ1ZSwgInBhc3Rfc2FsZXNfcmVwb3J0X2R2ZiI6IHRydWUsICJwYXN0X3NhbGVzX3JlcG9ydF91c2VyX3Byb2ZpbGUiOiB0cnVlLCAicGFzdF9zYWxlc19yZXBvcnRfd29yZGluZyI6IHRydWUsICJwcmljZV9mZWF0dXJlZF9yZWFsdG9ycyI6IHRydWUsICJwcmljZXNfY292aWQiOiB0cnVlLCAic2VudHJ5X215cHJvIjogdHJ1ZSwgInNlbnRyeV90b29scyI6IHRydWV9LCAiZGVwbG95X2Rpc3BhdGNoZXIiOiB7ImV3ZyI6IGZhbHNlfX07CgogICAgICAgIE1BLkNvbnRleHQgPSB7CiAgICAgICAgICAgIGVuZHBvaW50OiAnbGlzdGluZ3NfYnAubGlzdGluZ19kZXRhaWxfc2VsbCcsCiAgICAgICAgICAgIHJlcXVlc3RJc1Bvc3Q6IGZhbHNlCiAgICAgICAgfTsKCiAgICAgICAgCiAgICAgICAgICAgIHZhciBNQV9VU0VSID0geyJpZCI6IG51bGwsICJhdXRoZW50aWNhdGVkIjogZmFsc2UsICJ0eXBlIjogIkFub255bW91cyIsICJkYXRlcyI6IG51bGwsICJzZWdtZW50IjogbnVsbH07CiAgICAgICAgICAgIE1BLkNvbnRleHQuYW5hbHl0aWNzRW5hYmxlZCA9IHRydWU7CiAgICAgICAgICAgIE1BLkNvbnRleHQuYW5hbHl0aWNzVGFncyA9IFtbImNyZWF0ZSIsICJVQS0zODczMDc5LTEiLCAibWVpbGxldXJzYWdlbnRzLmNvbSJdLCBbInJlcXVpcmUiLCAibGlua2lkIiwgImxpbmtpZC5qcyJdLCBbInNldCIsICJwYWdlIiwgIi9hbm5vbmNlcy9hY2hhdC8xOTY3NTQwMzE2LyJdLCBbInNldCIsICJkaW1lbnNpb24xIiwgIkFub255bW91cyJdLCBbInNldCIsICJkaW1lbnNpb241IiwgIkFub255bW91cyJdLCBbInNldCIsICJjb250ZW50R3JvdXAxIiwgImxpc3RpbmdzL2xpc3Rpbmcvc2VsbC9hY3RpdmUiXSwgWyJzZXQiLCAiZGltZW5zaW9uNCIsICJsaXN0aW5ncy9saXN0aW5nL3NlbGwvYWN0aXZlIl0sIFsic2V0IiwgImNvbnRlbnRHcm91cDIiLCAibGlzdGluZyJdLCBbInNldCIsICJkaW1lbnNpb244IiwgImxpc3RpbmciXSwgWyJzZW5kIiwgInBhZ2V2aWV3Il1dOwogICAgICAgICAgICBNQS5Db250ZXh0LmdhQ2F0ZWdvcnkgPSAnQW5ub25jZSc7CiAgICAgICAgICAgIHZhciBkYXRhTGF5ZXIgPSBbeyJ1c2VyIjoge30sICJnZW8iOiBudWxsLCAicmVhbHRvciI6IG51bGwsICJwYWdlIjogeyJjYXRlZ29yeSI6ICJsaXN0aW5nIiwgInRlbXBsYXRlIjogIntnYV9wYWdlX3RlbXBsYXRlfSJ9LCAic3RhY2siOiAicHl0aG9uIn1dOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBNQS5Db250ZXh0LnBhZ2VDYXRlZ29yeSA9ICdsaXN0aW5nJzsKICAgICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgTUEuQ29udGV4dC5nYUNhdGVnb3J5ID0gJ0Fubm9uY2UnOwogICAgTUEuQ29udGV4dC5nYUxhYmVsUHJlZml4ID0gJ3JlYWx0b3InOwogICAgTUEuQ29udGV4dC5tYXBHYUNhdGVnb3J5ID0gTUEuQ29udGV4dC5nYUNhdGVnb3J5OwogICAgTUEuQ29udGV4dC5tYXBHYUxhYmVsUHJlZml4ID0gTUEuQ29udGV4dC5nYUxhYmVsUHJlZml4ICsgJzptYXAnOwogICAgTUEuQ29udGV4dC5yZWFsdG9ySWQgPSAyNDQ3OwogICAgTUEuQ29udGV4dC5zbHVnID0gJ3BhcmlzLTdlbWUtYXJyb25kaXNzZW1lbnQtNzUwMDcnOwogICAgTUEuQ29udGV4dC5saXN0aW5nSWQgPSAxOTY3NTQwMzE2OwogICAgTUEuQ29udGV4dC51c2VOZXdOYXYgPSB0cnVlOwogICAgPC9zY3JpcHQ+PCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CiAgICAgICAgPHNjcmlwdD4oZnVuY3Rpb24odyxkLHMsbCxpKXt3W2xdPXdbbF18fFtdO3dbbF0ucHVzaCh7J2d0bS5zdGFydCc6CiAgICAgICAgICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCiAgICAgICAgICAgIGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQogICAgICAgICAgICAnLy93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7CiAgICAgICAgfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCdkYXRhTGF5ZXInLCdHVE0tNVBDTUw3Jyk7PC9zY3JpcHQ+CiAgICAgICAgPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPjxzY3JpcHQ+CiAgICAgICAgICAgIChmdW5jdGlvbih3LCBkLCBlLCB1LCBjLCBnLCBhLCBiKXsKICAgICAgICAgICAgICAgIHdbIlNTSlNDb25uZWN0b3JPYmoiXSA9IHdbIlNTSlNDb25uZWN0b3JPYmoiXSB8fCB7c3NfY2lkIDogYywgZG9tYWluX2luZm86IGd9OwogICAgICAgICAgICAgICAgYSA9IGQuY3JlYXRlRWxlbWVudChlKTsKICAgICAgICAgICAgICAgIGEuYXN5bmMgPSB0cnVlOwogICAgICAgICAgICAgICAgYS5zcmMgPSB1OwogICAgICAgICAgICAgICAgYiA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSlbMF07CiAgICAgICAgICAgICAgICBiLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIGIpOwogICAgICAgICAgICB9KSh3aW5kb3csZG9jdW1lbnQsInNjcmlwdCIsImh0dHBzOi8vY2RuLnBlcmZkcml2ZS5jb20vYXBlcnR1cmUvYXBlcnR1cmUuanMiLCI4MWFkIiwiYXV0byIpOwogICAgICAgIDwvc2NyaXB0PgogICAgCjwvaGVhZD4KCjxib2R5PgogICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CiAgICA8bm9zY3JpcHQ+PGlmcmFtZSBzYW5kYm94PSJhbGxvdy1zY3JpcHRzIiBzcmM9Ii8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLTVQQ01MNyIKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CiAgICA8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CiAgICA8ZGl2IGRhdGEtcGFnZS10b3BiYXJzPgogICAgCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJjb29raWVzLWV1LWJhbm5lciIgY2xhc3M9ImNvb2tpZXMtZXUtYmFubmVyIGhpZGUiPgogICAgPGRpdiBjbGFzcz0iY29va2llcy1ldS1iYW5uZXJfX3dyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvb2tpZXMtZXUtYmFubmVyX190ZXh0Ij4KICAgICAgICAgICAgRW4gcG91cnN1aXZhbnQgdm90cmUgbmF2aWdhdGlvbiBzdXIgY2Ugc2l0ZSwgdm91cyBhY2NlcHRleiBs4oCZdXRpbGlzYXRpb24gZGVzIGNvb2tpZXMgcXVpIG5vdXMgcGVybWV0dGVudCBk4oCZYXNzdXJlciBsZSBib24gZm9uY3Rpb25uZW1lbnQgZGUgbm9zIHNlcnZpY2VzLCBkZSB2b3VzIGZvdXJuaXIgdW4gY29udGVudSBwZXJzb25uYWxpc8OpIGV0IGRlIG1lc3VyZXIgbOKAmWF1ZGllbmNlIGRlIG5vdHJlIHNpdGUuIFBvdXIgZW4gc2F2b2lyIHBsdXMKICAgICAgICAgICAgPGEgaHJlZj0iL3Rlcm1zLyNjb29raWVzIgogICAgICAgICAgICAgICAgIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0iZ286dGVybXMiIGRhdGEtdWEtZXZlbnQtbGFiZWw9ImNvb2tpZTpiYW5uZXI6dGVybXNfYnV0dG9uIiAgZGF0YS11YS1ub24taW50ZXJhY3Rpb249InRydWUiID5jbGlxdWV6IGljaTwvYT4KICAgICAgICAgICAgZXQgcG91ciBwYXJhbcOpdHJlciBsZXMgY29va2llcwogICAgICAgICAgICA8YSBocmVmPSIvY29va2llcy8iCiAgICAgICAgICAgICAgICAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpjb29raWVzX3NldHRpbmdzIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJjb29raWU6YmFubmVyOnNldHRpbmdzX2J1dHRvbiIgIGRhdGEtdWEtbm9uLWludGVyYWN0aW9uPSJ0cnVlIiA+Y2xpcXVleiBpY2k8L2E+LgogICAgICAgIDwvZGl2PgogICAgICAgIDxidXR0b24gaWQ9ImNvb2tpZXMtZXUtYWNjZXB0IgogICAgICAgICAgICAgICAgY2xhc3M9ImNvb2tpZXMtZXUtYmFubmVyX19idXR0b24iCiAgICAgICAgICAgICAgICAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJjb29raWU6YmFubmVyOnN1Y2Nlc3MiIGRhdGEtdWEtZXZlbnQtbGFiZWw9ImZyb206bGlzdGluZyIgIGRhdGEtdWEtbm9uLWludGVyYWN0aW9uPSJ0cnVlIiA+CiAgICAgICAgICAgIEonYWkgY29tcHJpcwogICAgICAgIDwvYnV0dG9uPgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgIAogICAgCgogICAgPCEtLVtpZiBsdGUgSUUgOF0+CiAgICA8cCBjbGFzcz0iYnJvd3NlcnVwZ3JhZGUiPk5vdXMgbmUgc3VwcG9ydG9ucyBwYXMgdm90cmUgdmVyc2lvbiBkZSBuYXZpZ2F0ZXVyLiA8YSBocmVmPSdodHRwOi8vYnJvd3NlaGFwcHkuY29tLyc+TWV0dGV6IMOgIGpvdXIgdm90cmUgbmF2aWdhdGV1cjwvYT4gcG91ciBhbcOpbGlvcmVyIHZvdHJlIGV4cMOpcmllbmNlLjwvcD4KICAgIDwhW2VuZGlmXS0tPgoKICAgIAogICAgICAgIDxkaXYgaWQ9ImIyYl90b3BiYW5uZXIiIGRhdGEtYjJiLXRvcGJhbm5lciBjbGFzcz0idG9wYmFubmVyIHRvcGJhbm5lci0tcmVkIGhpZGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BiYW5uZXJfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1hcmdpbi1yaWdodCI+PHN0cm9uZz5BZ2VudCBpbW1vYmlsaWVyPC9zdHJvbmc+LCBjcsOpZXogZ3JhdHVpdGVtZW50IHZvdHJlIFZpdHJpbmUgZW4gbGlnbmU8L3NwYW4+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL215L3JlYWx0b3IvbmV3P2dhTGFiZWw9cHJvOnRvcF9iYW5uZXI6Y3JlYXRlX3JlYWx0b3JfcGFnZV9idXR0b24iIGNsYXNzPSJidG4gYnRuLS10aW55IGJ0bi0tc2Vjb25kYXJ5IiAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFsbCIgZGF0YS11YS1ldmVudC1hY3Rpb249InBybzpnbzpjcmVhdGVfcmVhbHRvcl9wYWdlIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJwcm86dG9wX2Jhbm5lcjpjcmVhdGVfcmVhbHRvcl9wYWdlX2J1dHRvbiIgID5DcsOpZXIgbWEgVml0cmluZTwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAKPC9kaXY+Cgo8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiIGNsYXNzPSJwYWdlLXdyYXBwZXIiIGRhdGEtcGFnZS13cmFwcGVyPgogICAgPGEgaHJlZj0iI3N0YXJ0LW9mLWNvbnRlbnQiIGNsYXNzPSJzaG93LW9uLWZvY3VzIHNraXAtbGluayI+QWxsZXIgYXUgY29udGVudSBwcmluY2lwYWw8L2E+CiAgICA8bmF2IGNsYXNzPSJ0b3BuYXYiIGRhdGEtbmF2YmFyPgogICAgICAgIDxkaXYgY2xhc3M9InRvcG5hdl9fYnJhbmRpbmciPgogICAgICAgICAgICA8YSBocmVmPSIvIgogICAgICAgICAgICAgICAgY2xhc3M9InRvcG5hdl9fbG9nbyIKICAgICAgICAgICAgICAgIGRhdGEtcGFnZS1sb2dvCiAgICAgICAgICAgICAgICAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpob21lIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJuYXY6bG9nbyIgID4KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InZlcnRpY2FsLWFsaWduLW1pZGRsZSIgc3JjPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3N0YXRpYy9pbWFnZXMvbG9nby5zdmc/dD0xNTg5ODc1MDM4IiBhbHQ9IkltbW9iaWxpZXIgYXZlYyBNZWlsbGV1cnNBZ2VudHMiPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxidXR0b24gaHJlZj0iI21lbnUiIGNsYXNzPSJidG4tcmVzZXQgbW9iaWxlLW5hdi10b2dnbGVyIiBkYXRhLW1vYmlsZS1uYXYtdG9nZ2xlcgogICAgICAgICAgICAgICAgIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJzaG93Om1lbnUiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Im5hdjpidXJnZXJfbWVudSIgID4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb2JpbGUtbmF2LXRvZ2dsZXJfX2JhcnMiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtb2JpbGUtbmF2LXRvZ2dsZXJfX3RpdGxlIj5NZW51PC9zcGFuPgogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfX21lbnUiIGRhdGEtbmF2LW1lbnU+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRvcG5hdi1zdWJtZW51IiBkYXRhLW5hdi1wcmljZS1tZW51PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0idG9wbmF2LXN1Ym1lbnVfX2J1dHRvbiIgZGF0YS1uYXYtbWVudS1idXR0b24gaWQ9InRvcG5hdi1wcmljZS1idXR0b24iIGFyaWEtY29udHJvbHM9InRvcG5hdi1wcmljZS1jb250ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0iZ286cHJpY2VzX3N1Ym1lbnUiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Im5hdjpwcmljZXNfZ2xvYmFsIiAgZGF0YS11YS1ub24taW50ZXJhY3Rpb249InRydWUiID4KICAgICAgICAgICAgICAgICAgICBQcml4IGltbW9iaWxpZXIKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbXMiIGRhdGEtbmF2LW1lbnUtcG9wdXAgYXJpYS1sYWJlbGxlZGJ5PSJ0b3BuYXYtcHJpY2UtYnV0dG9uIiBpZD0idG9wbmF2LXByaWNlLWNvbnRlbnQiIHJvbGU9Im1lbnUiPgogICAgICAgICAgICAgICAgICAgIAo8bGkgcm9sZT0icHJlc2VudGF0aW9uIj4KICAgIDxhIGhyZWY9Ii9wcml4LWltbW9iaWxpZXIvIiByb2xlPSJtZW51aXRlbSIgY2xhc3M9InRvcG5hdi1zdWJtZW51X19pdGVtIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOnByaWNlcyIgZGF0YS11YS1ldmVudC1sYWJlbD0ibmF2OnByaWNlcyIgIGRhdGEtbmF2LXByaWNlcy1saW5rCiAgICA+Q2FydGUgZGVzIHByaXg8L2E+CjwvbGk+CgogICAgICAgICAgICAgICAgICAgIAo8bGkgcm9sZT0icHJlc2VudGF0aW9uIj4KICAgIDxhIGhyZWY9Ii9wcml4LWltbW9iaWxpZXIvZHZmLyIgcm9sZT0ibWVudWl0ZW0iIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpkdmZfbGFuZGluZyIgZGF0YS11YS1ldmVudC1sYWJlbD0ibmF2OmR2ZiIgIAogICAgPkV4cGxvcmF0ZXVyIGRlcyB2ZW50ZXMgcsOpYWxpc8OpZXM8L2E+CjwvbGk+CgogICAgICAgICAgICAgICAgICAgIAo8bGkgcm9sZT0icHJlc2VudGF0aW9uIj4KICAgIDxhIGhyZWY9Ii9jb21wcmVuZHJlLWxlLW1hcmNoZS1pbW1vYmlsaWVyLyIgcm9sZT0ibWVudWl0ZW0iIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzp1bmRlcnN0YW5kX3RoZV9tYXJrZXQiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Im5hdjp1bmRlcnN0YW5kX3RoZV9tYXJrZXQiICAKICAgID5Db21wcmVuZHJlIGxlIG1hcmNow6kgaW1tb2JpbGllcjwvYT4KPC9saT4KCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idG9wbmF2LXN1Ym1lbnUiIGRhdGEtbmF2LWVzdGltYXRlLW1lbnU+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9fYnV0dG9uIiBkYXRhLW5hdi1tZW51LWJ1dHRvbiBpZD0idG9wbmF2LWVzdGltYXRlLWJ1dHRvbiIgYXJpYS1jb250cm9scz0idG9wbmF2LWVzdGltYXRlLWNvbnRlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzplc3RpbWFfc3VibWVudSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibmF2OmVzdGltYV9nbG9iYWwiICBkYXRhLXVhLW5vbi1pbnRlcmFjdGlvbj0idHJ1ZSIgPgogICAgICAgICAgICAgICAgICAgIEVzdGltZXIgdW4gYmllbgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRvcG5hdi1zdWJtZW51X19pdGVtcyIgZGF0YS1uYXYtbWVudS1wb3B1cCAgYXJpYS1sYWJlbGxlZGJ5PSJ0b3BuYXYtZXN0aW1hdGUtYnV0dG9uIiBpZD0idG9wbmF2LWVzdGltYXRlLWNvbnRlbnQiIHJvbGU9Im1lbnUiPgogICAgICAgICAgICAgICAgICAgIAo8bGkgcm9sZT0icHJlc2VudGF0aW9uIj4KICAgIDxhIGhyZWY9Ii9lc3RpbWF0aW9uLWltbW9iaWxpZXJlLyIgcm9sZT0ibWVudWl0ZW0iIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzplc3RpbWEiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Im5hdjplc3RpbWEiICBkYXRhLW5hdi1lc3RpbWEtbGluawogICAgPkVzdGltYXRpb24gZW4gbGlnbmU8L2E+CjwvbGk+CgogICAgICAgICAgICAgICAgICAgIAo8bGkgcm9sZT0icHJlc2VudGF0aW9uIj4KICAgIDxhIGhyZWY9Ii9wcm9mZXNzaW9ubmVsLWltbW9iaWxpZXIvIiByb2xlPSJtZW51aXRlbSIgY2xhc3M9InRvcG5hdi1zdWJtZW51X19pdGVtIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmZpbmRfYV9wcm8iIGRhdGEtdWEtZXZlbnQtbGFiZWw9Im5hdjpyZWFsdG9yX2VzdGltYSIgIAogICAgPkVzdGltYXRpb24gcGFyIHVuZSBhZ2VuY2U8L2E+CjwvbGk+CgogICAgICAgICAgICAgICAgICAgIAo8bGkgcm9sZT0icHJlc2VudGF0aW9uIj4KICAgIDxhIGhyZWY9Ii9yZXVzc2lyLXZvdHJlLWVzdGltYXRpb24vIiByb2xlPSJtZW51aXRlbSIgY2xhc3M9InRvcG5hdi1zdWJtZW51X19pdGVtIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmhvd190b19lc3RpbWF0ZSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibmF2Omhvd190b19lc3RpbWF0ZSIgIAogICAgPkNvbW1lbnQgcsOpdXNzaXIgdm90cmUgZXN0aW1hdGlvbiA/PC9hPgo8L2xpPgoKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXYtc3VibWVudSIgZGF0YS1uYXYtYWdlbmN5LW1lbnU+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9fYnV0dG9uIiBkYXRhLW5hdi1tZW51LWJ1dHRvbiBpZD0idG9wbmF2LWFnZW5jeS1idXR0b24iIGFyaWEtY29udHJvbHM9InRvcG5hdi1hZ2VuY3ktY29udGVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmZpbmRfYV9wcm9fc3VibWVudSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibmF2OmZpbmRfYV9wcm9fZ2xvYmFsIiAgZGF0YS11YS1ub24taW50ZXJhY3Rpb249InRydWUiID4KICAgICAgICAgICAgICAgICAgICBDaG9pc2lyIHVuZSBhZ2VuY2UKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbXMiIGRhdGEtbmF2LW1lbnUtcG9wdXAgIGFyaWEtbGFiZWxsZWRieT0idG9wbmF2LWFnZW5jeS1idXR0b24iIGlkPSJ0b3BuYXYtYWdlbmN5LWNvbnRlbnQiIHJvbGU9Im1lbnUiPgogICAgICAgICAgICAgICAgICAgIAo8bGkgcm9sZT0icHJlc2VudGF0aW9uIj4KICAgIDxhIGhyZWY9Ii9wcm9mZXNzaW9ubmVsLWltbW9iaWxpZXIvIiByb2xlPSJtZW51aXRlbSIgY2xhc3M9InRvcG5hdi1zdWJtZW51X19pdGVtIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmZpbmRfYV9wcm8iIGRhdGEtdWEtZXZlbnQtbGFiZWw9Im5hdjpjb21wYXJlX3Byb3MiICBkYXRhLW5hdi1yZWFsdG9ycy1saW5rCiAgICA+Q29tcGFyYXRldXIgZCdhZ2VuY2VzPC9hPgo8L2xpPgoKICAgICAgICAgICAgICAgICAgICAKPGxpIHJvbGU9InByZXNlbnRhdGlvbiI+CiAgICA8YSBocmVmPSIvYWdlbmNlLWltbW9iaWxpZXJlLyIgcm9sZT0ibWVudWl0ZW0iIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpmaW5kX2FfcHJvIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJuYXY6ZmluZF9hX3JlYWx0b3IiICBkYXRhLW5hdi1hZ2VuY2llcy1saW5rCiAgICA+QW5udWFpcmUgZGVzIGFnZW5jZXMgaW1tb2JpbGnDqHJlczwvYT4KPC9saT4KCiAgICAgICAgICAgICAgICAgICAgCjxsaSByb2xlPSJwcmVzZW50YXRpb24iPgogICAgPGEgaHJlZj0iL21hbmRhdGFpcmUtaW1tb2JpbGllci8iIHJvbGU9Im1lbnVpdGVtIiBjbGFzcz0idG9wbmF2LXN1Ym1lbnVfX2l0ZW0iIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0iZ286ZmluZF9hX3BybyIgZGF0YS11YS1ldmVudC1sYWJlbD0ibmF2OmZpbmRfYV9tYW5kYXRhaXJlIiAgZGF0YS1uYXYtcmVwcmVzZW50YXRpdmUtbGluawogICAgPkFubnVhaXJlIGRlcyBtYW5kYXRhaXJlcyBpbW1vYmlsaWVyczwvYT4KPC9saT4KCiAgICAgICAgICAgICAgICAgICAgCjxsaSByb2xlPSJwcmVzZW50YXRpb24iPgogICAgPGEgaHJlZj0iL2Nob2lzaXItbGEtYm9ubmUtYWdlbmNlLyIgcm9sZT0ibWVudWl0ZW0iIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpob3dfdG9fZmluZF9hX3BybyIgZGF0YS11YS1ldmVudC1sYWJlbD0ibmF2Omhvd190b19maW5kX2FfcHJvIiAgCiAgICA+Q29tbWVudCBjaG9pc2lyIGxhIGJvbm5lIGFnZW5jZSA/PC9hPgo8L2xpPgoKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXYtc3VibWVudSIgZGF0YS1uYXYtc2VsbC1tZW51PgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0idG9wbmF2LXN1Ym1lbnVfX2J1dHRvbiIgZGF0YS1uYXYtbWVudS1idXR0b24gaWQ9InRvcG5hdi1zZWxsLWJ1dHRvbiIgYXJpYS1jb250cm9scz0idG9wbmF2LXNlbGwtY29udGVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmJ1eV9yZW50X3NlbGxfc3VibWVudSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibmF2OmJ1eV9yZW50X3NlbGxfZ2xvYmFsIiAgZGF0YS11YS1ub24taW50ZXJhY3Rpb249InRydWUiID4KICAgICAgICAgICAgICAgICAgICBBY2hldGVyIC0gTG91ZXIgLSBWZW5kcmUKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbXMiIGRhdGEtbmF2LW1lbnUtcG9wdXAgIGFyaWEtbGFiZWxsZWRieT0idG9wbmF2LXNlbGwtYnV0dG9uIiBpZD0idG9wbmF2LXNlbGwtY29udGVudCIgcm9sZT0ibWVudSI+CiAgICAgICAgICAgICAgICAgICAgCjxsaSByb2xlPSJwcmVzZW50YXRpb24iPgogICAgPGEgaHJlZj0iL2FjaGF0LyIgcm9sZT0ibWVudWl0ZW0iIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpidXkiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Im5hdjpidXkiICBkYXRhLW5hdi1zZWxsLWxpbmsKICAgID5Bbm5vbmNlcyBkZSB2ZW50ZTwvYT4KPC9saT4KCiAgICAgICAgICAgICAgICAgICAgCjxsaSByb2xlPSJwcmVzZW50YXRpb24iPgogICAgPGEgaHJlZj0iL2xvY2F0aW9uLyIgcm9sZT0ibWVudWl0ZW0iIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpyZW50IiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJuYXY6cmVudCIgIAogICAgPkFubm9uY2VzIGRlIGxvY2F0aW9uPC9hPgo8L2xpPgoKICAgICAgICAgICAgICAgICAgICAKPGxpIHJvbGU9InByZXNlbnRhdGlvbiI+CiAgICA8YSBocmVmPSIvaW1tb2JpbGllci1uZXVmLyIgcm9sZT0ibWVudWl0ZW0iIGNsYXNzPSJ0b3BuYXYtc3VibWVudV9faXRlbSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzppbnZlc3QiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Im5hdjppbnZlc3QiICAKICAgID5Qcm9ncmFtbWVzIG5ldWZzPC9hPgo8L2xpPgoKICAgICAgICAgICAgICAgICAgICAKPGxpIHJvbGU9InByZXNlbnRhdGlvbiI+CiAgICA8YSBocmVmPSIvY3JlZGl0LWltbW9iaWxpZXIvIiByb2xlPSJtZW51aXRlbSIgY2xhc3M9InRvcG5hdi1zdWJtZW51X19pdGVtIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOm1vcnRnYWdlIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJuYXY6bW9ydGdhZ2UiICAKICAgID5TaW11bGF0aW9uIGRlIGNyw6lkaXQ8L2E+CjwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCjxsaSByb2xlPSJwcmVzZW50YXRpb24iPgogICAgPGEgaHJlZj0iL3JldXNzaXItdm90cmUtdmVudGUvIiByb2xlPSJtZW51aXRlbSIgY2xhc3M9InRvcG5hdi1zdWJtZW51X19pdGVtIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmhvd190b19zZWxsIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJuYXY6aG93X3RvX3NlbGwiICAKICAgID5Db21tZW50IHLDqXVzc2lyIHZvdHJlIHZlbnRlID88L2E+CjwvbGk+CgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRvcG5hdi1zdWJtZW51IHRvcG5hdi1zdWJtZW51LS1zZXBhcmF0ZWQiIGRhdGEtbmF2LWFjY291bnQtbWVudT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9fc2lnbmluP3Nob3c9c2lnbmluIiBjbGFzcz0idG9wbmF2LXN1Ym1lbnVfX2J1dHRvbiB0b3BuYXYtc3VibWVudV9fYnV0dG9uLS1yYXciIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0iZ286c2lnbmluIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJuYXY6c2lnbmluIiAgZGF0YS1uYXYtbWVudS1sb2dpbi1idXR0b24KICAgID4KICAgICAgICBDb25uZXhpb24KICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRvcG5hdi1zdWJtZW51IiBkYXRhLW5hdi1wcm8tbWVudT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHJvLm1laWxsZXVyc2FnZW50cy5jb20/dXRtX3NvdXJjZT10cmFwcGVfbGVhZCZhbXA7dXRtX21lZGl1bT13d3cmYW1wO3V0bV9jYW1wYWlnbj1OYXZpZ2F0aW9uJmFtcDt1dG1fY29udGVudD1uYXY6bWFfcHJvIiBkYXRhLW5hdi10b3AtbGV2ZWwtbGluayBjbGFzcz0idG9wbmF2LXN1Ym1lbnVfX2J1dHRvbiB0b3BuYXYtc3VibWVudV9fYnV0dG9uLS1yYXciIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0icHJvOmdvOm1hX3BybyIgZGF0YS11YS1ldmVudC1sYWJlbD0ibmF2Om1hX3BybyIgID4KICAgICAgICAgICAgICAgICAgICBOb3Mgb2ZmcmVzIHBybwogICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9InN2ZyBtYXJnaW4tbGVmdC1oYWxmIiB3aWR0aD0iMTIiIGhlaWdodD0iMTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDEyIDEyIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGNsYXNzPSJzdmdfX3BhdGgiIGZpbGw9IiM0YTRhNGEiIGQ9Ik0xMCA2LjI1YS41LjUgMCAwIDAtLjUuNXYzLjU2YS42OS42OSAwIDAgMS0uNjkuNjlIMS42OWEuNjkuNjkgMCAwIDEtLjY5LS42OVYzLjE5YS42OS42OSAwIDAgMSAuNjktLjY5aDMuNTZhLjUuNSAwIDAgMCAwLTFIMS42OUExLjY5IDEuNjkgMCAwIDAgMCAzLjE5djcuMTJBMS42OSAxLjY5IDAgMCAwIDEuNjkgMTJoNy4xMmExLjY5IDEuNjkgMCAwIDAgMS42OS0xLjY5VjYuNzVhLjUuNSAwIDAgMC0uNS0uNXoiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggY2xhc3M9InN2Z19fcGF0aCIgZmlsbD0iIzRhNGE0YSIgZD0iTTExLjUgMGgtM2EuNS41IDAgMCAwLS41LjUuNS41IDAgMCAwIC41LjVoMS43OUw1LjE1IDYuMTVhLjQ4LjQ4IDAgMCAwIDAgLjcuNDguNDggMCAwIDAgLjcgMEwxMSAxLjcxVjMuNWEuNS41IDAgMCAwIDEgMHYtM2EuNS41IDAgMCAwLS41LS41eiIgLz4KICAgICAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L25hdj4KPGRpdiBpZD0ic3RhcnQtb2YtY29udGVudCIgY2xhc3M9InNob3ctb24tZm9jdXMiPjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImwtY29udGFpbmVyIj48ZGl2IGRhdGEtbGlzdGluZy1wYWdlIGNsYXNzPSJsaXN0aW5nLXBhZ2UiIGl0ZW1zY29wZT0iIiBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvUmVhbEVzdGF0ZUFnZW50Ij4KICAgICAgICA8bWV0YSBpdGVtcHJvcD0idXJsIiBjb250ZW50PSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL2Fubm9uY2VzL2FjaGF0LzE5Njc1NDAzMTYvIj4KCiAgICAgICAgPGRpdiBjbGFzcz0ibGF5b3V0LXdpdGgtY29udGFjdC1mb3JtIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGF5b3V0LXdpdGgtY29udGFjdC1mb3JtX19jb250ZW50Ij4KCiAgICA8dWwKICAgICAgICBkYXRhLWxpc3RpbmctYnJlYWRjcnVtYgogICAgICAgIGNsYXNzPSJicmVhZGNydW1icyBicmVhZGNydW1icy0tbGVmdCBtYXJnaW4tYm90dG9tLWRvdWJsZSBtYXJnaW4tdG9wLWRvdWJsZSBoaWRlLXNtIgogICAgICAgIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvQnJlYWRjcnVtYkxpc3QiCiAgICA+PGxpIGRhdGEtbGlzdGluZy1icmVhZGNydW1iLXRyYW5zYWN0aW9uLXR5cGUgaXRlbXByb3A9Iml0ZW1MaXN0RWxlbWVudCIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9MaXN0SXRlbSI+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL2FjaGF0LyIKICAgICAgICAgICAgaXRlbXByb3A9Iml0ZW0iCiAgICAgICAgICAgICBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmxpc3RpbmdzOmhvbWU6YnV5IiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJsaXN0aW5nOmJyZWFkY3J1bWJzIiAgCiAgICAgICAgPgogICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibmFtZSIgY2xhc3M9InBvaW50ZXItZXZlbnQiPkFjaGF0PC9zcGFuPgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0icG9zaXRpb24iIGNvbnRlbnQ9IjEiIC8+CiAgICAgICAgPC9hPgogICAgPC9saT4KICAgIAoKICAgIAoKICAgIAoKICAgIDxsaSBkYXRhLWxpc3RpbmctYnJlYWRjcnVtYi1jaXR5IGl0ZW1wcm9wPSJpdGVtTGlzdEVsZW1lbnQiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvTGlzdEl0ZW0iPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9hbm5vbmNlcy9hY2hhdC9wYXJpcy03NTAwMC8iCiAgICAgICAgICAgIGl0ZW1wcm9wPSJpdGVtIgogICAgICAgICAgICAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpsaXN0aW5nczpzZWFyY2g6YnV5OmNpdHkiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Imxpc3Rpbmc6YnJlYWRjcnVtYnMiICAKICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJuYW1lIiBjbGFzcz0icG9pbnRlci1ldmVudCI+UGFyaXM8L3NwYW4+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJwb3NpdGlvbiIgY29udGVudD0iMiIgLz4KICAgICAgICA8L2E+CiAgICA8L2xpPgogICAgCgogICAgCgogICAgPGxpIGRhdGEtbGlzdGluZy1icmVhZGNydW1iLWFycm11biBpdGVtcHJvcD0iaXRlbUxpc3RFbGVtZW50IiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0xpc3RJdGVtIj4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvYW5ub25jZXMvYWNoYXQvcGFyaXMtN2VtZS1hcnJvbmRpc3NlbWVudC03NTAwNy8iCiAgICAgICAgICAgIGl0ZW1wcm9wPSJpdGVtIgogICAgICAgICAgICAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpsaXN0aW5nczpzZWFyY2g6YnV5OmFycm11biIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpicmVhZGNydW1icyIgIAogICAgICAgID4KICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiIGNsYXNzPSJwb2ludGVyLWV2ZW50Ij5QYXJpcyA3w6htZSBhcnJvbmRpc3NlbWVudDwvc3Bhbj4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSIzIiAvPgogICAgICAgIDwvYT4KICAgIDwvbGk+CiAgICA8bGkgZGF0YS1saXN0aW5nLWJyZWFkY3J1bWItaXRlbS10eXBlIGl0ZW1wcm9wPSJpdGVtTGlzdEVsZW1lbnQiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvTGlzdEl0ZW0iPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9hbm5vbmNlcy9hY2hhdC9wYXJpcy03ZW1lLWFycm9uZGlzc2VtZW50LTc1MDA3L2FwcGFydGVtZW50LyIKICAgICAgICAgICAgaXRlbXByb3A9Iml0ZW0iCiAgICAgICAgICAgIAogICAgICAgID4KICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiIGNsYXNzPSJwb2ludGVyLWV2ZW50Ij5BcHBhcnRlbWVudDwvc3Bhbj4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSI0IiAvPgogICAgICAgIDwvYT4KICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBkYXRhLWxpc3RpbmctYnJlYWRjcnVtYi1jaGFyYWN0ZXJpc3RpY3M+CiAgICAKICAgICAgICAKICAgICAgICAgICAgMiZuYnNwO3Bpw6hjZXMKICAgICAgICAKICAgIAogCiAgICAKICAgICAgICA1MSZuYnNwO23CsgogICAgCjwvbGk+CiAgICAgICAgCiAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0aW5nLXNsaWRlc2hvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0aW5nLXNsaWRlc2hvd19fc3Bpbm5lci1jb250YWluZXIiIGRhdGEtc2xpZGVzaG93LXNwaW5uZXItY29udGFpbmVyPjxkaXYgY2xhc3M9ImxvYWRpbmctY29udGFpbmVyIGNvbnRhaW5lci0tbm8taG9yaXpvbnRhbC1ndXR0ZXIgY29udGFpbmVyLS1uby12ZXJ0aWNhbC1ndXR0ZXIiPgogICAgPGRpdiBjbGFzcz0ic3Bpbm5lci0tZG90cyI+PGRpdiBjbGFzcz0iYm91bmNlMSI+PC9kaXY+IDxkaXYgY2xhc3M9ImJvdW5jZTIiPjwvZGl2PiA8ZGl2IGNsYXNzPSJib3VuY2UzIj48L2Rpdj48L2Rpdj4KPC9kaXY+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1waWN0dXJlcz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0aW5nLXNsaWRlc2hvd19fbGluayIgaHJlZj0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vUE9RVm5Qbklkdmg0QzdDT18wZjFJLThpc1FrPS94ODAwL2ZpbHRlcnM6bm9fdXBzY2FsZSgpL2xpc3RpbmdzLzIzLzMwLzIzMzBmYzgxNmE2OWQ1YmNjMjdkMDcxMTcyZjNkNDQwZDczMWY5ZDQuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgZGF0YS1sYXp5PSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUFBQUFDSDVCQUVLQUFFQUxBQUFBQUFCQUFFQUFBSUNUQUVBT3c9PSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LXNyY3NldD0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vbS1MNUtnQkxxcjV4UHc4TW1NRWcxaDBMS2pvPS94MjY4L2xpc3RpbmdzLzIzLzMwLzIzMzBmYzgxNmE2OWQ1YmNjMjdkMDcxMTcyZjNkNDQwZDczMWY5ZDQuanBnIDQwMncsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL2trbFdnamp1UW9xQXBPc1RDS1NMTDE1Z29kND0veDMzNi9saXN0aW5ncy8yMy8zMC8yMzMwZmM4MTZhNjlkNWJjYzI3ZDA3MTE3MmYzZDQ0MGQ3MzFmOWQ0LmpwZyA3MzV3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9uRFVTeW1hSFBVM1p3cGcwcGxaeC1oNjVEWE09L3g1MzYvbGlzdGluZ3MvMjMvMzAvMjMzMGZjODE2YTY5ZDViY2MyN2QwNzExNzJmM2Q0NDBkNzMxZjlkNC5qcGcgODA0dyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZS1zcmM9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL2dLOXVQak56eWNIbmFTeUZFeTVXUU9VT1cwOD0vZml0LWluL3gzMzYvZmlsdGVyczpmaWxsKGYyZjNmNCkvbGlzdGluZ3MvMjMvMzAvMjMzMGZjODE2YTY5ZDViY2MyN2QwNzExNzJmM2Q0NDBkNzMxZjlkNC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVzPSIobWF4LXdpZHRoOiA0MDBweCkgNDAwcHgsIDEwMHZ3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Imxpc3Rpbmctc2xpZGVzaG93X19saW5rIiBocmVmPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9EdlpSdlNLZ2N1TUszWElmazBJYmpfMmdNVWs9L3g4MDAvZmlsdGVyczpub191cHNjYWxlKCkvbGlzdGluZ3MvYmUvOTkvYmU5OWU3MjIyMzNlNDdmYzE3ZmE2ZDY1MjFjMjljOGZjNzk2ZGJmYS5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBkYXRhLWxhenk9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBQUFBQUNINUJBRUtBQUVBTEFBQUFBQUJBQUVBQUFJQ1RBRUFPdz09IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktc3Jjc2V0PSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9BQnF4MDh2a0xMN3VnNElxRE1JQlhmQnY4NkE9L3gyNjgvbGlzdGluZ3MvYmUvOTkvYmU5OWU3MjIyMzNlNDdmYzE3ZmE2ZDY1MjFjMjljOGZjNzk2ZGJmYS5qcGcgNDAydywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vbUlBSm9hQ3VrZzJxZDF2Z3RJczBmRlI4S2lNPS94MzM2L2xpc3RpbmdzL2JlLzk5L2JlOTllNzIyMjMzZTQ3ZmMxN2ZhNmQ2NTIxYzI5YzhmYzc5NmRiZmEuanBnIDczNXcsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL0xkSEVTOEFaSlpZZXFCTVRESUxHck5LU1pHQT0veDUzNi9saXN0aW5ncy9iZS85OS9iZTk5ZTcyMjIzM2U0N2ZjMTdmYTZkNjUyMWMyOWM4ZmM3OTZkYmZhLmpwZyA4MDR3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWllLXNyYz0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vR2RlQ0NfSW5uSkpaY2w2ZTI3cGFoS1MyWHZzPS9maXQtaW4veDMzNi9maWx0ZXJzOmZpbGwoZjJmM2Y0KS9saXN0aW5ncy9iZS85OS9iZTk5ZTcyMjIzM2U0N2ZjMTdmYTZkNjUyMWMyOWM4ZmM3OTZkYmZhLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZXM9IihtYXgtd2lkdGg6IDQwMHB4KSA0MDBweCwgMTAwdnciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlzdGluZy1zbGlkZXNob3dfX2xpbmsiIGhyZWY9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tLy1hNkhXU0lycEFTYmhGbHlmdFpQMC1SQ0hqOD0veDgwMC9maWx0ZXJzOm5vX3Vwc2NhbGUoKS9saXN0aW5ncy9iNS9hNC9iNWE0NmE5OWM2Y2IzYWFmMjYwYTczOWVlNzE2ZDVjNGJlZGMyMGM2LmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGRhdGEtbGF6eT0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFBQUFBQ0g1QkFFS0FBRUFMQUFBQUFBQkFBRUFBQUlDVEFFQU93PT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1zcmNzZXQ9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL3VueTcyTUNkVW1NamttWDJTMXhndm54MXRXZz0veDI2OC9saXN0aW5ncy9iNS9hNC9iNWE0NmE5OWM2Y2IzYWFmMjYwYTczOWVlNzE2ZDVjNGJlZGMyMGM2LmpwZyA0MDJ3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9ha1pTNWtZa2ZmeDNnRmF3VHJ2QlpnV1RBNUk9L3gzMzYvbGlzdGluZ3MvYjUvYTQvYjVhNDZhOTljNmNiM2FhZjI2MGE3MzllZTcxNmQ1YzRiZWRjMjBjNi5qcGcgNzM1dywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vNUViY3Z4TWVRZTR0S28wUWhScHlPRHVkUkdrPS94NTM2L2xpc3RpbmdzL2I1L2E0L2I1YTQ2YTk5YzZjYjNhYWYyNjBhNzM5ZWU3MTZkNWM0YmVkYzIwYzYuanBnIDgwNHciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWUtc3JjPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9CWEwwNHVNYnZSUGwtdHozM25kdTRKaVhrdG89L2ZpdC1pbi94MzM2L2ZpbHRlcnM6ZmlsbChmMmYzZjQpL2xpc3RpbmdzL2I1L2E0L2I1YTQ2YTk5YzZjYjNhYWYyNjBhNzM5ZWU3MTZkNWM0YmVkYzIwYzYuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplcz0iKG1heC13aWR0aDogNDAwcHgpIDQwMHB4LCAxMDB2dyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0aW5nLXNsaWRlc2hvd19fbGluayIgaHJlZj0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vaF9aN0gycGdsdk83S3ZLX2lQN1k2UkNMZ0hFPS94ODAwL2ZpbHRlcnM6bm9fdXBzY2FsZSgpL2xpc3RpbmdzL2Q0LzlmL2Q0OWY2ZjlkNDFkNGMxYmViNmNhM2VhMDZkMTY3ZDZjMTJkMzkwZWYuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgZGF0YS1sYXp5PSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUFBQUFDSDVCQUVLQUFFQUxBQUFBQUFCQUFFQUFBSUNUQUVBT3c9PSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LXNyY3NldD0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vOHFyaDRwQUNyLVVoeWwyeUNTdlFtX19NNzM4PS94MjY4L2xpc3RpbmdzL2Q0LzlmL2Q0OWY2ZjlkNDFkNGMxYmViNmNhM2VhMDZkMTY3ZDZjMTJkMzkwZWYuanBnIDQwMncsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL29FeEpMS0tiREhINVVmVzJ0VGdyLXNrWV9KST0veDMzNi9saXN0aW5ncy9kNC85Zi9kNDlmNmY5ZDQxZDRjMWJlYjZjYTNlYTA2ZDE2N2Q2YzEyZDM5MGVmLmpwZyA3MzV3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9OdmVSRmtsQ3doZ09MMDBMOWJpdDEtcXBtTXM9L3g1MzYvbGlzdGluZ3MvZDQvOWYvZDQ5ZjZmOWQ0MWQ0YzFiZWI2Y2EzZWEwNmQxNjdkNmMxMmQzOTBlZi5qcGcgODA0dyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZS1zcmM9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL1BQUndoVndnZEJsajNfUTF1UlhIQm5jNmlRdz0vZml0LWluL3gzMzYvZmlsdGVyczpmaWxsKGYyZjNmNCkvbGlzdGluZ3MvZDQvOWYvZDQ5ZjZmOWQ0MWQ0YzFiZWI2Y2EzZWEwNmQxNjdkNmMxMmQzOTBlZi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVzPSIobWF4LXdpZHRoOiA0MDBweCkgNDAwcHgsIDEwMHZ3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Imxpc3Rpbmctc2xpZGVzaG93X19saW5rIiBocmVmPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9QazRaV2JaVW9qUFNqZUlvVWp2TTZGRjA4UGM9L3g4MDAvZmlsdGVyczpub191cHNjYWxlKCkvbGlzdGluZ3MvMGIvNjcvMGI2N2M3M2I2ODY3MzJkNDI3ZDBkYzU1YWNhYTg5ZWMzMGNmNjZjZi5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBkYXRhLWxhenk9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBQUFBQUNINUJBRUtBQUVBTEFBQUFBQUJBQUVBQUFJQ1RBRUFPdz09IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktc3Jjc2V0PSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS85NUt3NmdhS0NJS1F4SXN2cGRIazNmd2pZc3M9L3gyNjgvbGlzdGluZ3MvMGIvNjcvMGI2N2M3M2I2ODY3MzJkNDI3ZDBkYzU1YWNhYTg5ZWMzMGNmNjZjZi5qcGcgNDAydywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vRXgtZEJzMWYyNnFDY2tzQUpMeUkyT1d4NGFzPS94MzM2L2xpc3RpbmdzLzBiLzY3LzBiNjdjNzNiNjg2NzMyZDQyN2QwZGM1NWFjYWE4OWVjMzBjZjY2Y2YuanBnIDczNXcsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL05aRUxQbDFMWlRJbEdrQTh1dFNlS1dVTU05ST0veDUzNi9saXN0aW5ncy8wYi82Ny8wYjY3YzczYjY4NjczMmQ0MjdkMGRjNTVhY2FhODllYzMwY2Y2NmNmLmpwZyA4MDR3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWllLXNyYz0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vdXVzd0t0TlpVdWdHSFgxc3NKRHBBd3ljb3lrPS9maXQtaW4veDMzNi9maWx0ZXJzOmZpbGwoZjJmM2Y0KS9saXN0aW5ncy8wYi82Ny8wYjY3YzczYjY4NjczMmQ0MjdkMGRjNTVhY2FhODllYzMwY2Y2NmNmLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZXM9IihtYXgtd2lkdGg6IDQwMHB4KSA0MDBweCwgMTAwdnciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlzdGluZy1zbGlkZXNob3dfX2xpbmsiIGhyZWY9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL1VoTGRmNHBEYXJ2cHVwdUI0REpCODdtdk5nZz0veDgwMC9maWx0ZXJzOm5vX3Vwc2NhbGUoKS9saXN0aW5ncy85ZC8wMS85ZDAxNGZlZmFjZjQ5MGYyM2MzNGQ5NjEyMWZkZDMxZGVlZTNlNTMwLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGRhdGEtbGF6eT0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFBQUFBQ0g1QkFFS0FBRUFMQUFBQUFBQkFBRUFBQUlDVEFFQU93PT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1zcmNzZXQ9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL250elphUHowSkxiMWtsOE5WLUtybkJIeUZXaz0veDI2OC9saXN0aW5ncy85ZC8wMS85ZDAxNGZlZmFjZjQ5MGYyM2MzNGQ5NjEyMWZkZDMxZGVlZTNlNTMwLmpwZyA0MDJ3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9Eb0RXd1BoRXVoME03RXppR3hkVVB5ekt6UGc9L3gzMzYvbGlzdGluZ3MvOWQvMDEvOWQwMTRmZWZhY2Y0OTBmMjNjMzRkOTYxMjFmZGQzMWRlZWUzZTUzMC5qcGcgNzM1dywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vVnhtWVJzLXRkMHRjVEF1UVpFRzgtazhmMHFnPS94NTM2L2xpc3RpbmdzLzlkLzAxLzlkMDE0ZmVmYWNmNDkwZjIzYzM0ZDk2MTIxZmRkMzFkZWVlM2U1MzAuanBnIDgwNHciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWUtc3JjPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9OcFpYelNkY3NDZ1lkUlBRdXhoTGJHNXAtY0U9L2ZpdC1pbi94MzM2L2ZpbHRlcnM6ZmlsbChmMmYzZjQpL2xpc3RpbmdzLzlkLzAxLzlkMDE0ZmVmYWNmNDkwZjIzYzM0ZDk2MTIxZmRkMzFkZWVlM2U1MzAuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplcz0iKG1heC13aWR0aDogNDAwcHgpIDQwMHB4LCAxMDB2dyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0aW5nLXNsaWRlc2hvd19fbGluayIgaHJlZj0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vblRScG5RcHdtZHRoRkExUGRFTXhCb3p6a3hvPS94ODAwL2ZpbHRlcnM6bm9fdXBzY2FsZSgpL2xpc3RpbmdzLzdlLzZkLzdlNmQ4MTYyODIxZDAxMmQ5MWU4MWY0OTEwNmMwMDE0MjgzZDdmNGEuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgZGF0YS1sYXp5PSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUFBQUFDSDVCQUVLQUFFQUxBQUFBQUFCQUFFQUFBSUNUQUVBT3c9PSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LXNyY3NldD0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20va3g3LS1kNF9aYjY1dmx5Y3hEWkRNdVl4dlZ3PS94MjY4L2xpc3RpbmdzLzdlLzZkLzdlNmQ4MTYyODIxZDAxMmQ5MWU4MWY0OTEwNmMwMDE0MjgzZDdmNGEuanBnIDQwMncsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tLzVCNHdaMHRqU2JRSnBTMUQ0VUZoYmoxRmdWMD0veDMzNi9saXN0aW5ncy83ZS82ZC83ZTZkODE2MjgyMWQwMTJkOTFlODFmNDkxMDZjMDAxNDI4M2Q3ZjRhLmpwZyA3MzV3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9hUEVUNmI3X3VXNWtzUTJ3ZzkwcUtEUmRiczQ9L3g1MzYvbGlzdGluZ3MvN2UvNmQvN2U2ZDgxNjI4MjFkMDEyZDkxZTgxZjQ5MTA2YzAwMTQyODNkN2Y0YS5qcGcgODA0dyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZS1zcmM9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL0NnenJrTlBreXRCZmpyNDhlZjV3bjFRTFFyVT0vZml0LWluL3gzMzYvZmlsdGVyczpmaWxsKGYyZjNmNCkvbGlzdGluZ3MvN2UvNmQvN2U2ZDgxNjI4MjFkMDEyZDkxZTgxZjQ5MTA2YzAwMTQyODNkN2Y0YS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVzPSIobWF4LXdpZHRoOiA0MDBweCkgNDAwcHgsIDEwMHZ3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Imxpc3Rpbmctc2xpZGVzaG93X19saW5rIiBocmVmPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9MYjJLMDZLV1doWG9taDExbThjM2YydWQ1UGc9L3g4MDAvZmlsdGVyczpub191cHNjYWxlKCkvbGlzdGluZ3MvMzIvNzYvMzI3NjU4NzkxYzU1MzVlMzhlNjNhZGU3ZjMxMjEyNDZiM2EwMmNjOS5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBkYXRhLWxhenk9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBQUFBQUNINUJBRUtBQUVBTEFBQUFBQUJBQUVBQUFJQ1RBRUFPdz09IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktc3Jjc2V0PSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9GaXEyUWJjUUh1ZF9HRkRQOE13V2hlS1BtRzA9L3gyNjgvbGlzdGluZ3MvMzIvNzYvMzI3NjU4NzkxYzU1MzVlMzhlNjNhZGU3ZjMxMjEyNDZiM2EwMmNjOS5qcGcgNDAydywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vV3lYZkFQdDM1dTZEUzlHMmRhTDUyZ005azg0PS94MzM2L2xpc3RpbmdzLzMyLzc2LzMyNzY1ODc5MWM1NTM1ZTM4ZTYzYWRlN2YzMTIxMjQ2YjNhMDJjYzkuanBnIDczNXcsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL1VwUFBtLVhaS1Bnb25NbUVjQkYyQ0hIVkdSND0veDUzNi9saXN0aW5ncy8zMi83Ni8zMjc2NTg3OTFjNTUzNWUzOGU2M2FkZTdmMzEyMTI0NmIzYTAyY2M5LmpwZyA4MDR3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWllLXNyYz0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vckRBVXlvcXRINVpVRF9udm5GWmpZSzJJeDM0PS9maXQtaW4veDMzNi9maWx0ZXJzOmZpbGwoZjJmM2Y0KS9saXN0aW5ncy8zMi83Ni8zMjc2NTg3OTFjNTUzNWUzOGU2M2FkZTdmMzEyMTI0NmIzYTAyY2M5LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZXM9IihtYXgtd2lkdGg6IDQwMHB4KSA0MDBweCwgMTAwdnciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlzdGluZy1zbGlkZXNob3dfX2xpbmsiIGhyZWY9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL0hLVHB4RldrZXh5aU5JOG5QeWxmcC1maTRuND0veDgwMC9maWx0ZXJzOm5vX3Vwc2NhbGUoKS9saXN0aW5ncy9lYy83Ny9lYzc3YjRiMDE0YWQ0Nzc3ZDk3ODA1YmM1OWY2Y2UyMzJiNmQyNzZkLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGRhdGEtbGF6eT0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFBQUFBQ0g1QkFFS0FBRUFMQUFBQUFBQkFBRUFBQUlDVEFFQU93PT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1zcmNzZXQ9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL3JXMGQ4bW5hRXJHa0o2c0hNUTVmZndweUNJST0veDI2OC9saXN0aW5ncy9lYy83Ny9lYzc3YjRiMDE0YWQ0Nzc3ZDk3ODA1YmM1OWY2Y2UyMzJiNmQyNzZkLmpwZyA0MDJ3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9CdGw0ME13M1NYTXVucUh0eHNxWDQ0NENvaE09L3gzMzYvbGlzdGluZ3MvZWMvNzcvZWM3N2I0YjAxNGFkNDc3N2Q5NzgwNWJjNTlmNmNlMjMyYjZkMjc2ZC5qcGcgNzM1dywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20veUdMWWl6akI2QndGYzRvNGpaNXRLSFo5RERRPS94NTM2L2xpc3RpbmdzL2VjLzc3L2VjNzdiNGIwMTRhZDQ3NzdkOTc4MDViYzU5ZjZjZTIzMmI2ZDI3NmQuanBnIDgwNHciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWUtc3JjPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS91OVJOVmd0ZkhTSS01WmRobWhJYjFwTEE4b009L2ZpdC1pbi94MzM2L2ZpbHRlcnM6ZmlsbChmMmYzZjQpL2xpc3RpbmdzL2VjLzc3L2VjNzdiNGIwMTRhZDQ3NzdkOTc4MDViYzU5ZjZjZTIzMmI2ZDI3NmQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplcz0iKG1heC13aWR0aDogNDAwcHgpIDQwMHB4LCAxMDB2dyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0aW5nLXNsaWRlc2hvd19fbGluayIgaHJlZj0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vN3o0YkZRalFjN0lkS3ZSREM3V3lVajhmWG9VPS94ODAwL2ZpbHRlcnM6bm9fdXBzY2FsZSgpL2xpc3RpbmdzL2IzLzUyL2IzNTJiMmIwYzliMGQyOTJjYzg3NGMxZjRhMmQxODE0NWVmMjk1YzQuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgZGF0YS1sYXp5PSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUFBQUFDSDVCQUVLQUFFQUxBQUFBQUFCQUFFQUFBSUNUQUVBT3c9PSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LXNyY3NldD0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vTzhad29CUm9wZE9ENHlyTHlmNjNkUWtUN000PS94MjY4L2xpc3RpbmdzL2IzLzUyL2IzNTJiMmIwYzliMGQyOTJjYzg3NGMxZjRhMmQxODE0NWVmMjk1YzQuanBnIDQwMncsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL1ZfdFpkSlN5cVNTY2RibmZLbWtEd21IMGhLYz0veDMzNi9saXN0aW5ncy9iMy81Mi9iMzUyYjJiMGM5YjBkMjkyY2M4NzRjMWY0YTJkMTgxNDVlZjI5NWM0LmpwZyA3MzV3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS90bGZ4VUxsVzl3cG80SnRyXzRLMElDV3c2NEE9L3g1MzYvbGlzdGluZ3MvYjMvNTIvYjM1MmIyYjBjOWIwZDI5MmNjODc0YzFmNGEyZDE4MTQ1ZWYyOTVjNC5qcGcgODA0dyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZS1zcmM9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL3JTcXhPMFh2V1pYN1VfTno0S08yZC13cnRBQT0vZml0LWluL3gzMzYvZmlsdGVyczpmaWxsKGYyZjNmNCkvbGlzdGluZ3MvYjMvNTIvYjM1MmIyYjBjOWIwZDI5MmNjODc0YzFmNGEyZDE4MTQ1ZWYyOTVjNC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVzPSIobWF4LXdpZHRoOiA0MDBweCkgNDAwcHgsIDEwMHZ3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Imxpc3Rpbmctc2xpZGVzaG93X19saW5rIiBocmVmPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS82RmxnUWtCS1hwcWltRVZZOVN4RFY4VS0zTTg9L3g4MDAvZmlsdGVyczpub191cHNjYWxlKCkvbGlzdGluZ3MvMWEvNzEvMWE3MTFhODljZjQ4ZTQ5MmYzMjQwODY1ODZmMGFlZDY5OWQ4NjZhMS5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBkYXRhLWxhenk9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBQUFBQUNINUJBRUtBQUVBTEFBQUFBQUJBQUVBQUFJQ1RBRUFPdz09IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktc3Jjc2V0PSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9maXYzOU9mTkdwVUpWaG8xemJ3UXBLaXBYclE9L3gyNjgvbGlzdGluZ3MvMWEvNzEvMWE3MTFhODljZjQ4ZTQ5MmYzMjQwODY1ODZmMGFlZDY5OWQ4NjZhMS5qcGcgNDAydywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vampEMGlwSDUzSTFDel81c0F2OGVlVDhDRHFRPS94MzM2L2xpc3RpbmdzLzFhLzcxLzFhNzExYTg5Y2Y0OGU0OTJmMzI0MDg2NTg2ZjBhZWQ2OTlkODY2YTEuanBnIDczNXcsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tLy1zbU11WGVHVFZVRElCdmV0Q2dwaWNwMUFydz0veDUzNi9saXN0aW5ncy8xYS83MS8xYTcxMWE4OWNmNDhlNDkyZjMyNDA4NjU4NmYwYWVkNjk5ZDg2NmExLmpwZyA4MDR3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWllLXNyYz0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20val9teDdnb3lmejZlWGNSQ3Njd2pVM0hKQmpZPS9maXQtaW4veDMzNi9maWx0ZXJzOmZpbGwoZjJmM2Y0KS9saXN0aW5ncy8xYS83MS8xYTcxMWE4OWNmNDhlNDkyZjMyNDA4NjU4NmYwYWVkNjk5ZDg2NmExLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZXM9IihtYXgtd2lkdGg6IDQwMHB4KSA0MDBweCwgMTAwdnciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlzdGluZy1zbGlkZXNob3dfX2xpbmsiIGhyZWY9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL20zbmpmcm84bDBzTDBGVzlWUjNkMkxnNV9LVT0veDgwMC9maWx0ZXJzOm5vX3Vwc2NhbGUoKS9saXN0aW5ncy80Mi84MC80MjgwY2FhZmQzNzdiNmMzZWM2NzUzMGU2YzM5Y2U4YWU1ZDIwMzdhLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGRhdGEtbGF6eT0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFBQUFBQ0g1QkFFS0FBRUFMQUFBQUFBQkFBRUFBQUlDVEFFQU93PT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1zcmNzZXQ9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL29YZ1I3a2FER2ZIaFZUT0d1aE5KMk9RX0lOMD0veDI2OC9saXN0aW5ncy80Mi84MC80MjgwY2FhZmQzNzdiNmMzZWM2NzUzMGU2YzM5Y2U4YWU1ZDIwMzdhLmpwZyA0MDJ3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9od3hmVUpnX3BLTVpnaVdzTEhtaE1wT09sdHc9L3gzMzYvbGlzdGluZ3MvNDIvODAvNDI4MGNhYWZkMzc3YjZjM2VjNjc1MzBlNmMzOWNlOGFlNWQyMDM3YS5qcGcgNzM1dywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vRkJsVkQxWTBnSHc4RDlJUzZON1hIcVE2a1VVPS94NTM2L2xpc3RpbmdzLzQyLzgwLzQyODBjYWFmZDM3N2I2YzNlYzY3NTMwZTZjMzljZThhZTVkMjAzN2EuanBnIDgwNHciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWUtc3JjPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS80amtnZ0ExOHBhNWtPVDJQRWdNdk5ZWHhOVWc9L2ZpdC1pbi94MzM2L2ZpbHRlcnM6ZmlsbChmMmYzZjQpL2xpc3RpbmdzLzQyLzgwLzQyODBjYWFmZDM3N2I2YzNlYzY3NTMwZTZjMzljZThhZTVkMjAzN2EuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplcz0iKG1heC13aWR0aDogNDAwcHgpIDQwMHB4LCAxMDB2dyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0aW5nLXNsaWRlc2hvd19fbGluayIgaHJlZj0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vLVRfb2Y1Y04yWS12VGpjU2x4N0lBN2JQUGljPS94ODAwL2ZpbHRlcnM6bm9fdXBzY2FsZSgpL2xpc3RpbmdzL2MxL2ZlL2MxZmVhNTJjODI4N2MxMTE3OGM3N2MyN2EyZjIzNGVjZDdjZjk0YzcuanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgZGF0YS1sYXp5PSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUFBQUFDSDVCQUVLQUFFQUxBQUFBQUFCQUFFQUFBSUNUQUVBT3c9PSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LXNyY3NldD0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vRmxwblV4R2kyVUxKNVFRcjkzY3ZuQVAxTnVZPS94MjY4L2xpc3RpbmdzL2MxL2ZlL2MxZmVhNTJjODI4N2MxMTE3OGM3N2MyN2EyZjIzNGVjZDdjZjk0YzcuanBnIDQwMncsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL2l1YlYzMHlVS29hVGExNUJKX2RvSGNfcnhlWT0veDMzNi9saXN0aW5ncy9jMS9mZS9jMWZlYTUyYzgyODdjMTExNzhjNzdjMjdhMmYyMzRlY2Q3Y2Y5NGM3LmpwZyA3MzV3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9GYUJ0TUxEYXBhSXlQaHh3LWNjSjVKSmY4NWM9L3g1MzYvbGlzdGluZ3MvYzEvZmUvYzFmZWE1MmM4Mjg3YzExMTc4Yzc3YzI3YTJmMjM0ZWNkN2NmOTRjNy5qcGcgODA0dyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZS1zcmM9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tLzFtQk5TaTdfVW13TjBPYTIyWlZLejlFNzUtWT0vZml0LWluL3gzMzYvZmlsdGVyczpmaWxsKGYyZjNmNCkvbGlzdGluZ3MvYzEvZmUvYzFmZWE1MmM4Mjg3YzExMTc4Yzc3YzI3YTJmMjM0ZWNkN2NmOTRjNy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVzPSIobWF4LXdpZHRoOiA0MDBweCkgNDAwcHgsIDEwMHZ3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Imxpc3Rpbmctc2xpZGVzaG93X19saW5rIiBocmVmPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9sVkh4MGQwb2dZVkpwZTg5emRDQmJMNlpEd1E9L3g4MDAvZmlsdGVyczpub191cHNjYWxlKCkvbGlzdGluZ3MvZTgvOGEvZTg4YWQwM2Q3MTRmNmRjZmMwZWM2NTVjMjViYjM3ZjJlY2I5YThlMS5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBkYXRhLWxhenk9ImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBQUFBQUNINUJBRUtBQUVBTEFBQUFBQUJBQUVBQUFJQ1RBRUFPdz09IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWxhenktc3Jjc2V0PSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9zMjBCTVBUSnFFbE9namtSWkIwVzMzbk9vcGs9L3gyNjgvbGlzdGluZ3MvZTgvOGEvZTg4YWQwM2Q3MTRmNmRjZmMwZWM2NTVjMjViYjM3ZjJlY2I5YThlMS5qcGcgNDAydywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vaFh6eVVLNk4zVnZxaUVrRTZOdDd0VU1iYURJPS94MzM2L2xpc3RpbmdzL2U4LzhhL2U4OGFkMDNkNzE0ZjZkY2ZjMGVjNjU1YzI1YmIzN2YyZWNiOWE4ZTEuanBnIDczNXcsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL3p4bkpkTXpjUW1TQS1fZkhJSTVXc0dTSEFDWT0veDUzNi9saXN0aW5ncy9lOC84YS9lODhhZDAzZDcxNGY2ZGNmYzBlYzY1NWMyNWJiMzdmMmVjYjlhOGUxLmpwZyA4MDR3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWllLXNyYz0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vVnFmdWtNOUVsb3BCQzJ0RmZpM0k1TnNXeW1zPS9maXQtaW4veDMzNi9maWx0ZXJzOmZpbGwoZjJmM2Y0KS9saXN0aW5ncy9lOC84YS9lODhhZDAzZDcxNGY2ZGNmYzBlYzY1NWMyNWJiMzdmMmVjYjlhOGUxLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZXM9IihtYXgtd2lkdGg6IDQwMHB4KSA0MDBweCwgMTAwdnciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlzdGluZy1zbGlkZXNob3dfX2xpbmsiIGhyZWY9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL0k5UDlNdURjTGI0TDJPMVhqMkVpUVlnMURpUT0veDgwMC9maWx0ZXJzOm5vX3Vwc2NhbGUoKS9saXN0aW5ncy85OS8yNi85OTI2MmMyMzhiOTRiNWY3OGQ2MWIzMjYyZTBmMmUxMTE3NjU5ZjhiLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGRhdGEtbGF6eT0iZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFBQUFBQ0g1QkFFS0FBRUFMQUFBQUFBQkFBRUFBQUlDVEFFQU93PT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGF6eS1zcmNzZXQ9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL21NaVBOc3BoMENVVmFPNFdQbmFFV05nQ2l0ND0veDI2OC9saXN0aW5ncy85OS8yNi85OTI2MmMyMzhiOTRiNWY3OGQ2MWIzMjYyZTBmMmUxMTE3NjU5ZjhiLmpwZyA0MDJ3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9kWElobEkxdHdSNUdEY0JPOEptN0cwOWpzS2s9L3gzMzYvbGlzdGluZ3MvOTkvMjYvOTkyNjJjMjM4Yjk0YjVmNzhkNjFiMzI2MmUwZjJlMTExNzY1OWY4Yi5qcGcgNzM1dywgLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vTFFvUW1EVTQ3N2JfbEE5MDJGM2pVVTVuTzlBPS94NTM2L2xpc3RpbmdzLzk5LzI2Lzk5MjYyYzIzOGI5NGI1Zjc4ZDYxYjMyNjJlMGYyZTExMTc2NTlmOGIuanBnIDgwNHciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWUtc3JjPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9vb1pjdHNscF93RWxwX2FKbzJIUE5PV0l5MDA9L2ZpdC1pbi94MzM2L2ZpbHRlcnM6ZmlsbChmMmYzZjQpL2xpc3RpbmdzLzk5LzI2Lzk5MjYyYzIzOGI5NGI1Zjc4ZDYxYjMyNjJlMGYyZTExMTc2NTlmOGIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplcz0iKG1heC13aWR0aDogNDAwcHgpIDQwMHB4LCAxMDB2dyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0aW5nLXNsaWRlc2hvd19fbGluayIgaHJlZj0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vbDYyMUNpZGkyY1YycUx6Mmt5RnFGQmZYVTJvPS94ODAwL2ZpbHRlcnM6bm9fdXBzY2FsZSgpL2xpc3RpbmdzLzA4LzhkLzA4OGQ2NGNiM2ViMDBmMjJkYWYwYTMxZTVlNjBiMDIzNzlhZDg4NzguanBnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgZGF0YS1sYXp5PSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUFBQUFDSDVCQUVLQUFFQUxBQUFBQUFCQUFFQUFBSUNUQUVBT3c9PSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYXp5LXNyY3NldD0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vdHhtRUp0QVl2WS1DWnJsWkQ4bkFLbWpxVFRnPS94MjY4L2xpc3RpbmdzLzA4LzhkLzA4OGQ2NGNiM2ViMDBmMjJkYWYwYTMxZTVlNjBiMDIzNzlhZDg4NzguanBnIDQwMncsIC8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL1F3Y3BCZjNVdVgwenpDQXNDZFJvalV2V25XRT0veDMzNi9saXN0aW5ncy8wOC84ZC8wODhkNjRjYjNlYjAwZjIyZGFmMGEzMWU1ZTYwYjAyMzc5YWQ4ODc4LmpwZyA3MzV3LCAvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9XNmVndUF2ZU5wUV9XdTZWN1VNc05kN2tiRlU9L3g1MzYvbGlzdGluZ3MvMDgvOGQvMDg4ZDY0Y2IzZWIwMGYyMmRhZjBhMzFlNWU2MGIwMjM3OWFkODg3OC5qcGcgODA0dyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZS1zcmM9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL1N3alpmX0VwMTl3UHN2eUZBWl9UZk9xOTBXQT0vZml0LWluL3gzMzYvZmlsdGVyczpmaWxsKGYyZjNmNCkvbGlzdGluZ3MvMDgvOGQvMDg4ZDY0Y2IzZWIwMGYyMmRhZjBhMzFlNWU2MGIwMjM3OWFkODg3OC5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVzPSIobWF4LXdpZHRoOiA0MDBweCkgNDAwcHgsIDEwMHZ3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0aW5nLXNsaWRlc2hvd19fbGVnZW5kIj48aSBjbGFzcz0iaWNvbiBpY29uLXBob3RvX2NhbWVyYSI+PC9pPiA8c3BhbiBkYXRhLWxpc3RpbmctcGljdHVyZXMtbGVnZW5kID4xLzE2PC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPSJsaXN0aW5nLWluZm9ybWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlzdGluZy1pbmZvcm1hdGlvbnNfX21haW4taGVhZGVyIiBkYXRhLWxpc3RpbmdzLWluZm9ybWF0aW9ucy1oZWFkZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmdpbi1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0aW5nLWNoYXJhY3RlcmlzdGljIG1hcmdpbi1ib3R0b20iIGRhdGEtbGlzdGluZ3MtY2hhcmFjdGVyaXN0aWM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5saW5lLWJsb2NrIG1hcmdpbi1yaWdodCB2ZXJ0aWNhbC1hbGlnbi1taWRkbGUiIGRhdGEtbGlzdGluZ3MtdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGFydGVtZW50IDLCoHBpw6hjZXMgLSA1McKgbcKyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imxpc3RpbmctcHJpY2UgbWFyZ2luLWJvdHRvbSIgZGF0YS1saXN0aW5ncy1wcmljZT44NDDigK8wMDDCoOKCrAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0aW5nLWNpdHkgbWFyZ2luLWJvdHRvbS1kb3VibGUiIGRhdGEtbGlzdGluZ3MtY2l0eT5QYXJpcyA3w6htZSBhcnJvbmRpc3NlbWVudDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlzdGluZy1hY3Rpb25zIGxpc3RpbmctYWN0aW9ucy0tbGlzdGluZy1wYWdlIj48YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tLXNlY29uZGFyeSBidG4tLXNtYWxsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2hhcmUtbGlzdGluZy1idXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL2Fubm9uY2VzLzE5Njc1NDAzMTYvc2hhcmUiIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0ibGlzdGluZzpmb3J3YXJkX2J1dHRvbjpjbGlja2VkIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJsaXN0aW5nOmZvcndhcmRfYnV0dG9uIiAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1hcmdpbi1yaWdodCB2ZXJ0aWNhbC1hbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9zdGF0aWMvaW1hZ2VzL2VudmVsb3BlLWJsdWU1LnN2Zz90PTE1ODk4NzUwMzgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iUGFydGFnZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbC1hbGlnbi1taWRkbGUiPlBhcnRhZ2VyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLS1zZWNvbmRhcnkgYnRuLS1zbWFsbCBtYXJnaW4tbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZvbGxvdy1saXN0aW5nLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZm9sbG93LXN0YXR1cz0iRmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1saXN0aW5nLWlkPSIxOTY3NTQwMzE2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS11YS1ldmVudC1hY3Rpb24tcHJlZml4PSJsaXN0aW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdWEtZXZlbnQtbGFiZWwtcHJlZml4PSJsaXN0aW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWNvbi11cmw9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2ltYWdlcy9saWtlLWJsdWU1LnN2Zz90PTE1ODk4NzUwMzgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pY29uLXVybC1hY3RpdmU9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2ltYWdlcy9saWtlLWZpbGwtYmx1ZTUuc3ZnP3Q9MTU4OTg3NTAzOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ2ZXJ0aWNhbC1hbGlnbi1taWRkbGUgbWFyZ2luLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZvbGxvdy1saXN0aW5nLWJ1dHRvbi1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9zdGF0aWMvaW1hZ2VzL2xpa2UtYmx1ZTUuc3ZnP3Q9MTU4OTg3NTAzOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJFbnJlZ2lzdHJlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjE1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imxpc3RpbmctYWN0aW9uc19faXRlbS10ZXh0IiBkYXRhLWZvbGxvdy1saXN0aW5nLWJ1dHRvbi10ZXh0PkVucmVnaXN0cmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1saXN0aW5nLWRlc2NyaXB0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJVRSBCQVJCRVQgREUgSk9VWSA8YnIvPkEgdW5lIGFkcmVzc2UgdHLDqHMgcHJpc8OpZSBldCBjb25maWRlbnRpZWxsZSBkdSA3ZSBhcnJvbmRpc3NlbWVudCwgw6AgZGV1eCBwYXMgZHUgTXVzw6llIFJvZGluLCBkZXMgSW52YWxpZGVzIGV0IMOgIHByb3hpbWl0w6kgZHUgQk9OIE1BUkNIRSwgIGRhbnMgdW4gam9saSBpbW1ldWJsZSBhbmNpZW4gYmllbiBlbnRyZXRlbnUgZW4gcGllcnJlIGRlIHRhaWxsZSwgYXBwYXJ0ZW1lbnQgZGUgY2hhcm1lIGF1IGNpbnF1acOobWUgw6l0YWdlIHBhciBhc2NlbnNldXIsIGQndW5lIHN1cGVyZmljaWUgZGUgIDUxLDEwICBtwrIgbG9pIENhcnJleiBjb21wcmVuYW50IHVuZSBlbnRyw6llIG91dnJhbnQgc3VyIHVuIHPDqWpvdXIgZW4gTCwgdW5lIGNoYW1icmUgYXZlYyBzYWxsZSBkZSBiYWlucyBldCBkcmVzc2luZywgdW5lIGN1aXNpbmUgc8OpcGFyw6llLCB1biBkw6liYXJyYXMuIEwnYXBwYXJ0ZW1lbnQgZXN0IG9yaWVudMOpIHN1ZCBldCBlc3QsIGlsIGRvbm5lIHN1ciBsYSBjb3VyIGRlIGwnaW1tZXVibGUgYXUgY2FsbWUgYWJzb2x1LCBlc3QgYmFpZ27DqSBkZSBzb2xlaWwuIEFkcmVzc2UgZGUgcHJlbWllciBvcmRyZS4gTGUgcmF2YWxlbWVudCBkZSBsYSBjb3VyIGVzdCBlbiBjb3Vycy4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC0tcmlnaHQgdGV4dC0tbXV0ZWQgbWFyZ2luLXRvcCBtYXJnaW4tYm90dG9tLXRyaXBsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIE1pc2Ugw6Agam91ciBsZSAxOSBtYWkgMjAyMAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdGluZy1mYWN0cyBmbGV4IGZsZXgtd3JhcCIgZGF0YS1saXN0aW5ncy1mYWN0cz48bGkgZGF0YS1saXN0aW5ncy1iZWRyb29tLWNvdW50IGNsYXNzPSJsaXN0aW5nLWZhY3RzX19pdGVtIj4xIGNoYW1icmU8L2xpPjxsaSBkYXRhLWxpc3RpbmdzLWJhdGhyb29tLWNvdW50IGNsYXNzPSJsaXN0aW5nLWZhY3RzX19pdGVtIj4xIHNhbGxlIGRlIGJhaW48L2xpPjxsaSBkYXRhLWxpc3RpbmdzLXdjLWNvdW50IGNsYXNzPSJsaXN0aW5nLWZhY3RzX19pdGVtIj4xIFdDPC9saT48bGkgZGF0YS1saXN0aW5ncy1oZWF0aW5nLXNjb3BlIGNsYXNzPSJsaXN0aW5nLWZhY3RzX19pdGVtIj5DaGF1ZmZhZ2UgaW5kaXZpZHVlbDwvbGk+PGxpIGRhdGEtbGlzdGluZ3MtYnVpbGQtYXQgY2xhc3M9Imxpc3RpbmctZmFjdHNfX2l0ZW0iPiBDb25zdHJ1aXQgZW4gMTg4MDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3RpbmctZmFjdHNfX2l0ZW0iPkRpZ2ljb2RlPC9saT48bGkgY2xhc3M9Imxpc3RpbmctZmFjdHNfX2l0ZW0iPkNvbmNpZXJnZTwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4IGZsZXgtd3JhcCIgZGF0YS1saXN0aW5ncy1lbmVyZ3ktY2xhc3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtZ3JvdyBtYXJnaW4tYm90dG9tLWRvdWJsZSIgZGF0YS1saXN0aW5ncy1kcGU+PGRpdiBjbGFzcz0iZHBlLXRpdGxlIj5EaWFnbm9zdGljIGRlIHBlcmZvcm1hbmNlIMOpbmVyZ8OpdGlxdWU8L2Rpdj48ZGl2IGNsYXNzPSJkcGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcGUtaXRlbSBkcGUtYSI+QTwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcGUtaXRlbSBkcGUtYiI+QjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcGUtaXRlbSBkcGUtYyI+QzwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcGUtaXRlbSBkcGUtZCI+RDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcGUtaXRlbSBkcGUtZSI+RTwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcGUtaXRlbSBkcGUtZiI+RjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcGUtaXRlbSBkcGUtZyBhY3RpdmUiPkc8L2Rpdj4KICAgICAgICA8L2Rpdj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleC1ncm93IG1hcmdpbi1ib3R0b20tZG91YmxlIiBkYXRhLWxpc3RpbmdzLWdzZT48ZGl2IGNsYXNzPSJnZXMtdGl0bGUiPkluZGljZSBkJ8OpbWlzc2lvbiBkZSBnYXogw6AgZWZmZXQgZGUgc2VycmU8L2Rpdj5JbmZvcm1hdGlvbiBub24gY29tbXVuaXF1w6llPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0ibWFyZ2luLWJvdHRvbS1xdWFkcnVwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlzdGluZy1pbmZvcm1hdGlvbnNfX3RpdGxlIG1hcmdpbi1ib3R0b20iPkxvY2FsaXNhdGlvbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imxpc3RpbmctbWFwIiBkYXRhLWxpc3RpbmdzLW1hcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJ2ZWN0b3ItbWFwIGxvYWRpbmctd3JhcHBlciIKICAgICAgICBkYXRhLXZlY3Rvci1tYXAKICAgICAgICBkYXRhLWdlby1qc29uLXVybD0iL2Fubm9uY2VzLzE5Njc1NDAzMTYvbG9jYXRpb24iCiAgICAgICAgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iIgogICAgICAgIGRhdGEtdWEtZXZlbnQtbGFiZWwtcHJlZml4PSIiCiAgICAgICAgZGF0YS13YS1zb3VyY2U9IiIKICAgICAgICBkYXRhLXdhLW5hbWUtcHJlZml4PSIiCiAgICA+PGRpdiBjbGFzcz0ibG9hZGluZy1jb250YWluZXIgY29udGFpbmVyLS1uby1ob3Jpem9udGFsLWd1dHRlciBjb250YWluZXItLW5vLXZlcnRpY2FsLWd1dHRlciI+CiAgICA8ZGl2IGNsYXNzPSJzcGlubmVyLS1kb3RzIj48ZGl2IGNsYXNzPSJib3VuY2UxIj48L2Rpdj4gPGRpdiBjbGFzcz0iYm91bmNlMiI+PC9kaXY+IDxkaXYgY2xhc3M9ImJvdW5jZTMiPjwvZGl2PjwvZGl2Pgo8L2Rpdj48ZGl2IGNsYXNzPSJ2ZWN0b3ItbWFwX193cmFwcGVyIj4KICAgICAgICAgICAgPGRpdiBpZD0ibWFwYm94LW1hcCIgY2xhc3M9InZlY3Rvci1tYXBfX21hcCI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgPGRpdiBjbGFzcz0ibm8td2ViZ2wtd2FybmluZyBoaWRlIiBkYXRhLW1hcC1ub3dlYmdsLXdhcm5pbmc+CiAgICAgICAgPGgzIGNsYXNzPSJuby13ZWJnbC13YXJuaW5nX190aXRsZSI+Q2V0dGUgY2FydGUgbmUgcGV1dCBwYXMgc+KAmWFmZmljaGVyIHN1ciB2b3RyZSBuYXZpZ2F0ZXVyICE8L2gzPgogICAgICAgIDxkaXYgY2xhc3M9Im5vLXdlYmdsLXdhcm5pbmdfX3RleHQiPgogICAgICAgICAgICBQb3VyIHZvaXIgY2V0dGUgY2FydGUsIG7igJlow6lzaXRleiBwYXMgw6AgdMOpbMOpY2hhcmdlciB1biBuYXZpZ2F0ZXVyIHBsdXMgcsOpY2VudC4KICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvb2dsZS5mci9jaHJvbWUvYnJvd3Nlci9kZXNrdG9wLyI+Q2hyb21lPC9hPiBldCA8YSBocmVmPSJodHRwczovL3d3dy5tb3ppbGxhLm9yZy9mci9maXJlZm94L25ldy8iPkZpcmVmb3g8L2E+IHZvdXMgZ2FyYW50aXJvbnQgdW5lIGV4cMOpcmllbmNlIG9wdGltYWxlIHN1ciBub3RyZSBzaXRlLgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWxpc3RpbmctcHJpY2UtZmVlZGJhY2sgY2xhc3M9ImZsZXggZmxleC1zcGFjZS1iZXR3ZWVuIGZsZXgtd3JhcCBtYXJnaW4tYm90dG9tLXRyaXBsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0aW5nLWZlZWRiYWNrLXByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1wcmljZS1mZWVkYmFjay10aXRsZSBjbGFzcz0ibGlzdGluZy1pbmZvcm1hdGlvbnNfX3RpdGxlIG1hcmdpbi1ib3R0b20iPlZvdHJlIGF2aXMgc3VyIGNlIHByaXg8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1wcmljZS1mZWVkYmFjay1wcmljZSBjbGFzcz0ibGlzdGluZy1wcmljZSI+ODQw4oCvMDAwwqDigqwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWxpc3RpbmctZmVlZGJhY2stYnV0dG9uLWdyb3VwIGNsYXNzPSJsaXN0aW5nLWZlZWRiYWNrLXdyYXBwZXIgbWFyZ2luLWJvdHRvbS1kb3VibGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gZGF0YS1saXN0aW5nLWZlZWRiYWNrIGRhdGEtbGlzdGluZy1mZWVkYmFjay12YWx1ZT0iRkVFREJBQ0tTLkNVU1RPTUVSLlJBVElOR19CVVlFUi5DSEVBUCIgY2xhc3M9ImJ0biBidG4tLXNlY29uZGFyeSBidG4tLXNtYWxsIGJ0bi0tZmVlZGJhY2siPlBhcyBjaGVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gZGF0YS1saXN0aW5nLWZlZWRiYWNrIGRhdGEtbGlzdGluZy1mZWVkYmFjay12YWx1ZT0iRkVFREJBQ0tTLkNVU1RPTUVSLlJBVElOR19CVVlFUi5GQUlSIiBjbGFzcz0iYnRuIGJ0bi0tc2Vjb25kYXJ5IGJ0bi0tc21hbGwgYnRuLS1mZWVkYmFjayI+QXUgcHJpeDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtbGlzdGluZy1mZWVkYmFjayBkYXRhLWxpc3RpbmctZmVlZGJhY2stdmFsdWU9IkZFRURCQUNLUy5DVVNUT01FUi5SQVRJTkdfQlVZRVIuRVhQRU5TSVZFIiBjbGFzcz0iYnRuIGJ0bi0tc2Vjb25kYXJ5IGJ0bi0tc21hbGwgYnRuLS1mZWVkYmFjayI+VHJvcCBjaGVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1saXN0aW5nLWZlZWRiYWNrLXN1Y2Nlc3MgY2xhc3M9Imxpc3RpbmctZmVlZGJhY2stc3VjY2Vzcy1tZXNzYWdlIGhpZGUgZmxhc2gtbWVzc2FnZSBmbGFzaC1tZXNzYWdlLS1zdWNjZXNzIG1hcmdpbi1ib3R0b20iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uIGljb24tZG9uZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lcmNpIHBvdXIgdm90cmUgY29tbWVudGFpcmUgc3VyIGxlIHByaXggZGUgY2V0dGUgYW5ub25jZSAhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwnYXZpcyBkZSBub3MgdXRpbGlzYXRldXJzIGVzdCBpbXBvcnRhbnQgcG91ciBub3VzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1wcmljZS1mZWVkYmFjay1ldmFsdWF0aW9uIGNsYXNzPSJsaXN0aW5nLXByaWNlLWV2YWx1YXRpb24gaGlkZSBtYXJnaW4tYm90dG9tLWRvdWJsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1mZWVkYmFjay1wcmljZS1jb250YWluZXIgY2xhc3M9Imxpc3RpbmctcHJpY2UtZXZhbHVhdGlvbl9fd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC0tbXV0ZWQgbWFyZ2luLWJvdHRvbSI+UXVlbGxlIGVzdCB2b3RyZSBlc3RpbWF0aW9uID88L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWVsZCBmaWVsZC0tcG9zdGZpeGVkIG1hcmdpbi1ib3R0b20iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWVsZF9fY29udHJvbC13cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBkYXRhLWxpc3RpbmctZmVlZGJhY2stcHJpY2UgdHlwZT0idGV4dCIgY2xhc3M9ImZpZWxkX19jb250cm9sIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmllbGRfX3Bvc3RmaXgiPuKCrDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtbGlzdGluZy1mZWVkYmFjay1zdWJtaXQgY2xhc3M9ImJ0biBidG4tLXByaW1hcnkgYnRuLS1zbWFsbCI+RW52b3llcjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1mZWVzPjxkaXYgZGF0YS1saXN0aW5nLWZlZXMtcmVhbHRvci11cmwgY2xhc3M9Imxpc3RpbmctZmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9J2h0dHA6Ly93d3cuYWdlbmNldmFyZW5uZS5mci9tZW50aW9ucy1sZWdhbGVzLmh0bWwnIHRhcmdldD0iX2JsYW5rIj5Db25zdWx0ZXIgbGVzIHRhcmlmczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1mZWVzLXJlYWx0b3ItZGlzY2xhaW1lciBjbGFzcz0idGV4dC0taXRhbGljIHRleHQtLXNtYWxsIG1hcmdpbi1ib3R0b20tZG91YmxlIj5MZXMgaG9ub3JhaXJlcyBzZXJvbnQgaW50w6lncmFsZW1lbnQgw6AgbGEgY2hhcmdlIGR1IHZlbmRldXIuIFByaXggbmV0cywgaG9ycyBmcmFpcyBub3RhcmnDqXMgZXQgaG9ycyBkcm9pdHMgZGUgbXV0YXRpb24gKGRyb2l0cyBkJ2VucmVnaXN0cmVtZW50KS48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZS1tZCBoaWRlLWxnIG1hcmdpbi10b3AtZG91YmxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlzdGluZy1pbmZvcm1hdGlvbnNfX3RpdGxlIG1hcmdpbi1ib3R0b20iPkJpZW4gcHJvcG9zw6kgcGFyPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXggZmxleC1jZW50ZXIiPjxkaXYgY2xhc3M9IiIgaXRlbXByb3A9ImxvZ28iIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0ltYWdlT2JqZWN0Ij48YQogICAgICAgICAgICAgICAgaHJlZj0iL2FnZW5jZS1pbW1vYmlsaWVyZS9hZ2VuY2UtYWdlbmNlLXZhcmVubmUtdmllbWUtMjQ0Ny8iCiAgICAgICAgICAgICAgICBjbGFzcz0iaW5saW5lLWJsb2NrIgogICAgICAgICAgICAgICAgIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0iZ286cmVhbHRvcl9wYWdlIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJsaXN0aW5nOnJlYWx0b3I6cmVhbHRvcl9sb2dvIiAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhLXdhLXRyYWNrPSJjbGljayIKICAgICAgICAgICAgICAgICAgICBkYXRhLXdhLWtleT0iZ286cmVhbHRvciIKICAgICAgICAgICAgICAgICAgICBkYXRhLXdhLW5hbWU9Imxpc3Rpbmc6cmVhbHRvcl9sb2dvIgogICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtZGF0YT0ic291cmNlPWxpc3Rpbmd8cmVhbHRvcl9pZD0yNDQ3fGxpc3RpbmdfaWQ9MTk2NzU0MDMxNiIKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgPjxpbWcgc3JjPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9DSy1vcWFsYzFsOGxjNnJtOWtMbUdOQm1mam89L2ZpdC1pbi85MHg2MC9maWx0ZXJzOmZpbGwod2hpdGUpL3JlYWx0b3JzL2FjLzkyLzI1ODQyNjAwYTZlMjlmYS4yNDQ3LmpwZyIgYWx0PSJBR0VOQ0UgVkFSRU5ORSBWScOobWUgLSBBZ2VuY2UgaW1tb2JpbGnDqHJlIC0gNyBQbGFjZSBTYWludC1TdWxwaWNlLCA3NTAwNiBQYXJpcyI+PC9hPgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0idXJsIiBjb250ZW50PSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS9DSy1vcWFsYzFsOGxjNnJtOWtMbUdOQm1mam89L2ZpdC1pbi85MHg2MC9maWx0ZXJzOmZpbGwod2hpdGUpL3JlYWx0b3JzL2FjLzkyLzI1ODQyNjAwYTZlMjlmYS4yNDQ3LmpwZyI+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJ3aWR0aCIgY29udGVudD0iOTAiPgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iaGVpZ2h0IiBjb250ZW50PSI2MCI+CiAgICAgICAgPC9kaXY+PGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvYWdlbmNlLWltbW9iaWxpZXJlL2FnZW5jZS1hZ2VuY2UtdmFyZW5uZS12aWVtZS0yNDQ3LyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC0tYmxhY2sgdGV4dC0tYm9sZCBtYXJnaW4tbGVmdC1kb3VibGUiIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0iZ286cmVhbHRvcl9wYWdlIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJsaXN0aW5nOnJlYWx0b3I6cmVhbHRvcl90aXRsZSIgIGRhdGEtd2EtdHJhY2s9ImNsaWNrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2Eta2V5PSJnbzpyZWFsdG9yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtbmFtZT0ibGlzdGluZzpyZWFsdG9yX3RpdGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtZGF0YT0ic291cmNlPWxpc3Rpbmd8cmVhbHRvcl9pZD0yNDQ3fGxpc3RpbmdfaWQ9MTk2NzU0MDMxNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID5BR0VOQ0UgVkFSRU5ORSBWScOobWU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9zZWN0aW9uPjxzZWN0aW9uIGNsYXNzPSJjb250YWN0LWJsb2NrIG1hcmdpbi1ib3R0b20tdHJpcGxlIGhpZGUtc20iPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlLS1oNCBtYXJnaW4tYm90dG9tLWRvdWJsZSI+Q2V0dGUgYW5ub25jZSB2b3VzIGludMOpcmVzc2UgPzwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhY3QtYmxvY2tfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleCBmbGV4LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFyZ2luLXJpZ2h0LWRvdWJsZSI+PGRpdiBjbGFzcz0iIiBpdGVtcHJvcD0ibG9nbyIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvSW1hZ2VPYmplY3QiPjxhCiAgICAgICAgICAgICAgICBocmVmPSIvYWdlbmNlLWltbW9iaWxpZXJlL2FnZW5jZS1hZ2VuY2UtdmFyZW5uZS12aWVtZS0yNDQ3LyIKICAgICAgICAgICAgICAgIGNsYXNzPSJpbmxpbmUtYmxvY2siCiAgICAgICAgICAgICAgICAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpyZWFsdG9yX3BhZ2UiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Imxpc3Rpbmc6cmVhbHRvcjpyZWFsdG9yX2xvZ28iICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtdHJhY2s9ImNsaWNrIgogICAgICAgICAgICAgICAgICAgIGRhdGEtd2Eta2V5PSJnbzpyZWFsdG9yIgogICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtbmFtZT0ibGlzdGluZzpyZWFsdG9yX2xvZ28iCiAgICAgICAgICAgICAgICAgICAgZGF0YS13YS1kYXRhPSJzb3VyY2U9bGlzdGluZ3xyZWFsdG9yX2lkPTI0NDd8bGlzdGluZ19pZD0xOTY3NTQwMzE2IgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICA+PGltZyBzcmM9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL0NLLW9xYWxjMWw4bGM2cm05a0xtR05CbWZqbz0vZml0LWluLzkweDYwL2ZpbHRlcnM6ZmlsbCh3aGl0ZSkvcmVhbHRvcnMvYWMvOTIvMjU4NDI2MDBhNmUyOWZhLjI0NDcuanBnIiBhbHQ9IkFHRU5DRSBWQVJFTk5FIFZJw6htZSAtIEFnZW5jZSBpbW1vYmlsacOocmUgLSA3IFBsYWNlIFNhaW50LVN1bHBpY2UsIDc1MDA2IFBhcmlzIj48L2E+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJ1cmwiIGNvbnRlbnQ9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL0NLLW9xYWxjMWw4bGM2cm05a0xtR05CbWZqbz0vZml0LWluLzkweDYwL2ZpbHRlcnM6ZmlsbCh3aGl0ZSkvcmVhbHRvcnMvYWMvOTIvMjU4NDI2MDBhNmUyOWZhLjI0NDcuanBnIj4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9IndpZHRoIiBjb250ZW50PSI5MCI+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJoZWlnaHQiIGNvbnRlbnQ9IjYwIj4KICAgICAgICA8L2Rpdj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9hZ2VuY2UtaW1tb2JpbGllcmUvYWdlbmNlLWFnZW5jZS12YXJlbm5lLXZpZW1lLTI0NDcvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbnRhY3QtYmxvY2tfX2FnZW5jeS1uYW1lIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOnJlYWx0b3JfcGFnZSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpyZWFsdG9yOnJlYWx0b3JfdGl0bGUiICBkYXRhLXdhLXRyYWNrPSJjbGljayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2Eta2V5PSJnbzpyZWFsdG9yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13YS1uYW1lPSJsaXN0aW5nOnJlYWx0b3JfdGl0bGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdhLWRhdGE9InNvdXJjZT1saXN0aW5nfHJlYWx0b3JfaWQ9MjQ0N3xsaXN0aW5nX2lkPTE5Njc1NDAzMTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5BR0VOQ0UgVkFSRU5ORSBWScOobWU8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRpbmcgcmF0aW5nLS1jb250YWN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJhdGluZ19fc3RhcnMgcmF0aW5nX19zdGFycy0tY29udGFjdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iNS81IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZ19fc3RhcnMgaGlkZS1zbSI+PGkgY2xhc3M9InJhdGluZ19fc3RhciBzdmctc3ByaXRlIHN2Zy1zcHJpdGUtc3Rhci0tZnVsbCI+PC9pPjxpIGNsYXNzPSJyYXRpbmdfX3N0YXIgc3ZnLXNwcml0ZSBzdmctc3ByaXRlLXN0YXItLWZ1bGwiPjwvaT48aSBjbGFzcz0icmF0aW5nX19zdGFyIHN2Zy1zcHJpdGUgc3ZnLXNwcml0ZS1zdGFyLS1mdWxsIj48L2k+PGkgY2xhc3M9InJhdGluZ19fc3RhciBzdmctc3ByaXRlIHN2Zy1zcHJpdGUtc3Rhci0tZnVsbCI+PC9pPjxpIGNsYXNzPSJyYXRpbmdfX3N0YXIgc3ZnLXNwcml0ZSBzdmctc3ByaXRlLXN0YXItLWZ1bGwiPjwvaT48L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJyYXRpbmdfX3N0YXJzIGhpZGUtbGciPjxpIGNsYXNzPSJyYXRpbmdfX3N0YXIgc3ZnLXNwcml0ZSBzdmctc3ByaXRlLWxpdHRsZS1zdGFyLS1mdWxsIj48L2k+PGkgY2xhc3M9InJhdGluZ19fc3RhciBzdmctc3ByaXRlIHN2Zy1zcHJpdGUtbGl0dGxlLXN0YXItLWZ1bGwiPjwvaT48aSBjbGFzcz0icmF0aW5nX19zdGFyIHN2Zy1zcHJpdGUgc3ZnLXNwcml0ZS1saXR0bGUtc3Rhci0tZnVsbCI+PC9pPjxpIGNsYXNzPSJyYXRpbmdfX3N0YXIgc3ZnLXNwcml0ZSBzdmctc3ByaXRlLWxpdHRsZS1zdGFyLS1mdWxsIj48L2k+PGkgY2xhc3M9InJhdGluZ19fc3RhciBzdmctc3ByaXRlIHN2Zy1zcHJpdGUtbGl0dGxlLXN0YXItLWZ1bGwiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL2FnZW5jZS1pbW1vYmlsaWVyZS9hZ2VuY2UtYWdlbmNlLXZhcmVubmUtdmllbWUtMjQ0Ny8jYXZpcy1jbGllbnRzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iVm9pciBsZXMgYXZpcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmF0aW5nX19jb3VudCByYXRpbmdfX2NvdW50LS1jb250YWN0IiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOnJlYWx0b3JfcGFnZSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpyZWFsdG9yOnJlYWx0b3JfcmV2aWV3cyIgIGRhdGEtd2EtdHJhY2s9ImNsaWNrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2Eta2V5PSJnbzpyZWFsdG9yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtbmFtZT0ibGlzdGluZzpyZWFsdG9yX3RpdGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtZGF0YT0ic291cmNlPWxpc3Rpbmd8cmVhbHRvcl9pZD0yNDQ3fGxpc3RpbmdfaWQ9MTk2NzU0MDMxNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMiBhdmlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFjdC1ibG9ja19fcGhvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yZWFsdG9yLXNob3ctcGhvbmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLS1zZWNvbmRhcnkgYnRuLS1zbWFsbCBwYWRkaW5nLWxlZnQtdHJpcGxlIHBhZGRpbmctcmlnaHQtdHJpcGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0ibGlzdGluZzpyZWFsdG9yOnNob3dfcGhvbmUiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Imxpc3Rpbmc6cmVhbHRvcjpyZWFsdG9yX2RldGFpbHM6c2hvd19waG9uZV9idXR0b24iICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtYXJnaW4tcmlnaHQtZG91YmxlIHZlcnRpY2FsLWFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9zdGF0aWMvaW1hZ2VzL3Bob25lLWxpZ2h0LWJsdWU1LnN2Zz90PTE1ODk4NzUwMzgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9J0FwcGVsZXInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2ZXJ0aWNhbC1hbGlnbi1taWRkbGUiPkFmZmljaGVyIGxlIG51bcOpcm88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yZWFsdG9yLWNhbGwtcGhvbmUtYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9InRlbDowMTc2NDU0MDY1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi0tc2Vjb25kYXJ5IGJ0bi0tc21hbGwgaGlkZSBwYWRkaW5nLWxlZnQtdHJpcGxlIHBhZGRpbmctcmlnaHQtdHJpcGxlIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249Imxpc3Rpbmc6cmVhbHRvcjpjYWxsX3Bob25lIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJsaXN0aW5nOnJlYWx0b3I6cmVhbHRvcl9kZXRhaWxzOmNhbGxfcGhvbmVfYnV0dG9uIiAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWFyZ2luLXJpZ2h0LWRvdWJsZSB2ZXJ0aWNhbC1hbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2ltYWdlcy9waG9uZS1saWdodC1ibHVlNS5zdmc/dD0xNTg5ODc1MDM4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSdBcHBlbGVyJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWwtYWxpZ24tbWlkZGxlIj5BcHBlbGVyIGF1IDAxIDc2IDQ1IDQwIDY1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBkYXRhLWxpc3Rpbmctc2ltaWxhci1saXN0aW5ncyBjbGFzcz0ibWFyZ2luLWJvdHRvbS10cmlwbGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgZGF0YS1saXN0aW5nLXNpbWlsYXItaGVhZGVyIGNsYXNzPSJ0aXRsZS0taDIgbWFyZ2luLWxlZnQtZG91YmxlIG1hcmdpbi1yaWdodC1kb3VibGUiIGl0ZW1wcm9wPSJuYW1lIj5DZSBwcm9mZXNzaW9ubmVsIHZvdXMgcHJvcG9zZTwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsX19jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWxpc3RpbmctaXRlbQogICAgICAgY2xhc3M9Imxpc3QtbGlzdGluZ19fY29udGFpbmVyIGZ1bGwtd2lkdGgiIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0iZ286bGlzdGluZyIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpyZWFsdG9yX2xpc3RpbmdzOmxpc3RpbmciICBkYXRhLXdhLXRyYWNrPSJjbGljayIKICAgICAgICAgICBkYXRhLXdhLWtleT0iZ286bGlzdGluZyIKICAgICAgICAgICBkYXRhLXdhLW5hbWU9Imxpc3Rpbmc6cmVhbHRvcl9saXN0aW5nczpsaXN0aW5nIgogICAgICAgICAgIGRhdGEtd2EtZGF0YT0ibGlzdGluZ19pZD0xOTY5MjMyODkxfHJlYWx0b3JfaWQ9MjQ0N3xzb3VyY2U9bGlzdGluZyIKICAgID4KICAgICAgICA8YSBkYXRhLWxpc3RpbmctaXRlbS1waWN0dXJlIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vYW5ub25jZXMvYWNoYXQvMTk2OTIzMjg5MS8iCiAgICAgICAgICAgIAogICAgICAgICAgICBjbGFzcz0ibGlzdC1saXN0aW5nX19waWN0dXJlIgogICAgICAgICAgICBkYXRhLXdhLXRyYWNrPSJkaXNwbGF5IgogICAgICAgICAgICAgICAgZGF0YS13YS1uYW1lPSJsaXN0aW5nX2luX2xpc3QiCiAgICAgICAgICAgICAgICBkYXRhLXdhLWRhdGE9Imxpc3RpbmdfaWQ9MTk2OTIzMjg5MXxyZWFsdG9yX2lkPTI0NDd8c291cmNlPWxpc3RpbmciCiAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYV9fZmlndXJlIj48aW1nIHNyYz0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vS0FDeVBMV3dGZEJsQ3k1enhlM0FQODhKeC1nPS8xNTZ4MTA0L2xpc3RpbmdzL2ViLzAyL2ViMDIxZTk1Y2M4Yzk5N2M4ZDhiNWJmZGQ3NTZjMmQyOWIzM2IzNjYuanBnIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSIgYWx0PSJQaG90byBkdSBiaWVuIMOgIFBhcmlzIDdlIj48L2Rpdj4KICAgICAgICA8L2E+CgogICAgICAgIDxhIGNsYXNzPSJsaXN0LWxpc3RpbmdfX2Rlc2NyaXB0aW9uIG1hcmdpbi1sZWZ0LWRvdWJsZSBuby11bmRlcmxpbmUiCiAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vYW5ub25jZXMvYWNoYXQvMTk2OTIzMjg5MS8iCiAgICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnVsbC13aWR0aCBmbGV4IGZsZXgtd3JhcCI+CiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1pdGVtLXRpdGxlIGNsYXNzPSJsaXN0LWxpc3RpbmdfX3R5cGUgZnVsbC13aWR0aCB0ZXh0LS1ib2xkIiBkYXRhLWxpc3RpbmctaXRlbS10aXRsZT5BcHBhcnRlbWVudCAzwqBwacOoY2VzIC0gODLCoG3CsjwvZGl2PjxkaXYgZGF0YS1saXN0aW5nLWl0ZW0tcHJpY2UgY2xhc3M9Imxpc3QtbGlzdGluZ19fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGlzdC1saXN0aW5nX19wcmljZS12YWx1ZSB0aXRsZS0taDMgdGV4dC0tYm9sZCBuby1tYXJnaW4iPjLigK8xNzXigK8wMDDCoOKCrDwvc3Bhbj48c3BhbiBjbGFzcz0idGV4dC0tc21hbGwgdGV4dC0tbXV0ZWQgbWFyZ2luLWxlZnQgaGlkZS1zbSI+MjbigK81MjTCoOKCrC8gbcKyPC9zcGFuPjwvZGl2PjxkaXYgZGF0YS1saXN0aW5nLWl0ZW0tcGxhY2UgY2xhc3M9Imxpc3QtbGlzdGluZ19fcGxhY2UgZnVsbC13aWR0aCB0ZXh0LS1tdXRlZCI+UGFyaXMgN2U8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1pdGVtLWZvb3RlciBjbGFzcz0ibGlzdC1saXN0aW5nX19mb290ZXIgZnVsbC13aWR0aCBoaWRlLXNtIj4KICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LS1zbWFsbCB0ZXh0LS1tdXRlZCI+TWlzZSDDoCBqb3VyIGxlIDE5IG1haSAyMDIwPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvYT4KCiAgICAgICAgCiAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0LWxpc3RpbmdfX2ZvbGxvdyBuby11bmRlcmxpbmUiCiAgICAgICAgICAgICAgIGhyZWY9IiIKICAgICAgICAgICAgICAgZGF0YS1mb2xsb3ctbGlzdGluZy1idXR0b24KICAgICAgICAgICAgICAgZGF0YS1mb2xsb3ctc3RhdHVzPSJGYWxzZSIKICAgICAgICAgICAgICAgZGF0YS1saXN0aW5nLWlkPSIxOTY5MjMyODkxIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbiBpY29uLWZhdm9yaXRlIiBhcmlhLWxhYmVsPSJFbnJlZ2lzdHJlciBjZXR0ZSBhbm5vbmNlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1pdGVtCiAgICAgICBjbGFzcz0ibGlzdC1saXN0aW5nX19jb250YWluZXIgZnVsbC13aWR0aCIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpsaXN0aW5nIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJsaXN0aW5nOnJlYWx0b3JfbGlzdGluZ3M6bGlzdGluZyIgIGRhdGEtd2EtdHJhY2s9ImNsaWNrIgogICAgICAgICAgIGRhdGEtd2Eta2V5PSJnbzpsaXN0aW5nIgogICAgICAgICAgIGRhdGEtd2EtbmFtZT0ibGlzdGluZzpyZWFsdG9yX2xpc3RpbmdzOmxpc3RpbmciCiAgICAgICAgICAgZGF0YS13YS1kYXRhPSJsaXN0aW5nX2lkPTE5NjkxNDAwOTB8cmVhbHRvcl9pZD0yNDQ3fHNvdXJjZT1saXN0aW5nIgogICAgPgogICAgICAgIDxhIGRhdGEtbGlzdGluZy1pdGVtLXBpY3R1cmUgaHJlZj0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9hbm5vbmNlcy9hY2hhdC8xOTY5MTQwMDkwLyIKICAgICAgICAgICAgCiAgICAgICAgICAgIGNsYXNzPSJsaXN0LWxpc3RpbmdfX3BpY3R1cmUiCiAgICAgICAgICAgIGRhdGEtd2EtdHJhY2s9ImRpc3BsYXkiCiAgICAgICAgICAgICAgICBkYXRhLXdhLW5hbWU9Imxpc3RpbmdfaW5fbGlzdCIKICAgICAgICAgICAgICAgIGRhdGEtd2EtZGF0YT0ibGlzdGluZ19pZD0xOTY5MTQwMDkwfHJlYWx0b3JfaWQ9MjQ0N3xzb3VyY2U9bGlzdGluZyIKICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhX19maWd1cmUiPjxpbWcgc3JjPSIvL3RodW1ib3IubWVpbGxldXJzYWdlbnRzLmNvbS83b2tRMHNPM3pjWTEyR2NJeVU1SlpPU1pJanc9LzE1NngxMDQvbGlzdGluZ3MvYzEvYTUvYzFhNWZiOTE2ODY2NmM5MDdhYjA2Y2Q1MDkxZTEyNDRjN2IwN2I2ZS5qcGciCiAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxMDAlIiBhbHQ9IlBob3RvIGR1IGJpZW4gw6AgUGFyaXMgNmUiPjwvZGl2PgogICAgICAgIDwvYT4KCiAgICAgICAgPGEgY2xhc3M9Imxpc3QtbGlzdGluZ19fZGVzY3JpcHRpb24gbWFyZ2luLWxlZnQtZG91YmxlIG5vLXVuZGVybGluZSIKICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cubWVpbGxldXJzYWdlbnRzLmNvbS9hbm5vbmNlcy9hY2hhdC8xOTY5MTQwMDkwLyIKICAgICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmdWxsLXdpZHRoIGZsZXggZmxleC13cmFwIj4KICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1saXN0aW5nLWl0ZW0tdGl0bGUgY2xhc3M9Imxpc3QtbGlzdGluZ19fdHlwZSBmdWxsLXdpZHRoIHRleHQtLWJvbGQiIGRhdGEtbGlzdGluZy1pdGVtLXRpdGxlPkFwcGFydGVtZW50IDPCoHBpw6hjZXMgLSA2NcKgbcKyPC9kaXY+PGRpdiBkYXRhLWxpc3RpbmctaXRlbS1wcmljZSBjbGFzcz0ibGlzdC1saXN0aW5nX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaXN0LWxpc3RpbmdfX3ByaWNlLXZhbHVlIHRpdGxlLS1oMyB0ZXh0LS1ib2xkIG5vLW1hcmdpbiI+MeKArzM5OeKArzAwMMKg4oKsPC9zcGFuPjxzcGFuIGNsYXNzPSJ0ZXh0LS1zbWFsbCB0ZXh0LS1tdXRlZCBtYXJnaW4tbGVmdCBoaWRlLXNtIj4yMeKArzUyM8Kg4oKsLyBtwrI8L3NwYW4+PC9kaXY+PGRpdiBkYXRhLWxpc3RpbmctaXRlbS1wbGFjZSBjbGFzcz0ibGlzdC1saXN0aW5nX19wbGFjZSBmdWxsLXdpZHRoIHRleHQtLW11dGVkIj5QYXJpcyA2ZTwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgZGF0YS1saXN0aW5nLWl0ZW0tZm9vdGVyIGNsYXNzPSJsaXN0LWxpc3RpbmdfX2Zvb3RlciBmdWxsLXdpZHRoIGhpZGUtc20iPgogICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtLXNtYWxsIHRleHQtLW11dGVkIj5NaXNlIMOgIGpvdXIgbGUgMTkgbWFpIDIwMjA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9hPgoKICAgICAgICAKICAgICAgICAgICAgPGEgY2xhc3M9Imxpc3QtbGlzdGluZ19fZm9sbG93IG5vLXVuZGVybGluZSIKICAgICAgICAgICAgICAgaHJlZj0iIgogICAgICAgICAgICAgICBkYXRhLWZvbGxvdy1saXN0aW5nLWJ1dHRvbgogICAgICAgICAgICAgICBkYXRhLWZvbGxvdy1zdGF0dXM9IkZhbHNlIgogICAgICAgICAgICAgICBkYXRhLWxpc3RpbmctaWQ9IjE5NjkxNDAwOTAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uIGljb24tZmF2b3JpdGUiIGFyaWEtbGFiZWw9IkVucmVnaXN0cmVyIGNldHRlIGFubm9uY2UiPjwvaT4KICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1saXN0aW5nLWl0ZW0KICAgICAgIGNsYXNzPSJsaXN0LWxpc3RpbmdfX2NvbnRhaW5lciBmdWxsLXdpZHRoIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmxpc3RpbmciIGRhdGEtdWEtZXZlbnQtbGFiZWw9Imxpc3Rpbmc6cmVhbHRvcl9saXN0aW5nczpsaXN0aW5nIiAgZGF0YS13YS10cmFjaz0iY2xpY2siCiAgICAgICAgICAgZGF0YS13YS1rZXk9ImdvOmxpc3RpbmciCiAgICAgICAgICAgZGF0YS13YS1uYW1lPSJsaXN0aW5nOnJlYWx0b3JfbGlzdGluZ3M6bGlzdGluZyIKICAgICAgICAgICBkYXRhLXdhLWRhdGE9Imxpc3RpbmdfaWQ9MTk2ODY4NjcwN3xyZWFsdG9yX2lkPTI0NDd8c291cmNlPWxpc3RpbmciCiAgICA+CiAgICAgICAgPGEgZGF0YS1saXN0aW5nLWl0ZW0tcGljdHVyZSBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL2Fubm9uY2VzL2FjaGF0LzE5Njg2ODY3MDcvIgogICAgICAgICAgICAKICAgICAgICAgICAgY2xhc3M9Imxpc3QtbGlzdGluZ19fcGljdHVyZSIKICAgICAgICAgICAgZGF0YS13YS10cmFjaz0iZGlzcGxheSIKICAgICAgICAgICAgICAgIGRhdGEtd2EtbmFtZT0ibGlzdGluZ19pbl9saXN0IgogICAgICAgICAgICAgICAgZGF0YS13YS1kYXRhPSJsaXN0aW5nX2lkPTE5Njg2ODY3MDd8cmVhbHRvcl9pZD0yNDQ3fHNvdXJjZT1saXN0aW5nIgogICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWFfX2ZpZ3VyZSI+PGltZyBzcmM9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL1l2c2h3TmxhdFRPRzNaUkIyMTFHellOcUMwdz0vMTU2eDEwNC9saXN0aW5ncy8xOS8zMS8xOTMxN2M5YTU1MjFhNWU0ZTE1MjVkOWIwODRkY2FjN2M5YzRmOTM2LmpwZyIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiIGFsdD0iUGhvdG8gZHUgYmllbiDDoCBQYXJpcyA2ZSI+PC9kaXY+CiAgICAgICAgPC9hPgoKICAgICAgICA8YSBjbGFzcz0ibGlzdC1saXN0aW5nX19kZXNjcmlwdGlvbiBtYXJnaW4tbGVmdC1kb3VibGUgbm8tdW5kZXJsaW5lIgogICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL2Fubm9uY2VzL2FjaGF0LzE5Njg2ODY3MDcvIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZ1bGwtd2lkdGggZmxleCBmbGV4LXdyYXAiPgogICAgICAgICAgICAgICAgPGRpdiBkYXRhLWxpc3RpbmctaXRlbS10aXRsZSBjbGFzcz0ibGlzdC1saXN0aW5nX190eXBlIGZ1bGwtd2lkdGggdGV4dC0tYm9sZCIgZGF0YS1saXN0aW5nLWl0ZW0tdGl0bGU+QXBwYXJ0ZW1lbnQgNMKgcGnDqGNlcyAtIDE3NcKgbcKyPC9kaXY+PGRpdiBkYXRhLWxpc3RpbmctaXRlbS1wcmljZSBjbGFzcz0ibGlzdC1saXN0aW5nX19wcmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaXN0LWxpc3RpbmdfX3ByaWNlLXZhbHVlIHRpdGxlLS1oMyB0ZXh0LS1ib2xkIG5vLW1hcmdpbiI+NOKArzM3NeKArzAwMMKg4oKsPC9zcGFuPjxzcGFuIGNsYXNzPSJ0ZXh0LS1zbWFsbCB0ZXh0LS1tdXRlZCBtYXJnaW4tbGVmdCBoaWRlLXNtIj4yNeKArzAwMMKg4oKsLyBtwrI8L3NwYW4+PC9kaXY+PGRpdiBkYXRhLWxpc3RpbmctaXRlbS1wbGFjZSBjbGFzcz0ibGlzdC1saXN0aW5nX19wbGFjZSBmdWxsLXdpZHRoIHRleHQtLW11dGVkIj5QYXJpcyA2ZTwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgZGF0YS1saXN0aW5nLWl0ZW0tZm9vdGVyIGNsYXNzPSJsaXN0LWxpc3RpbmdfX2Zvb3RlciBmdWxsLXdpZHRoIGhpZGUtc20iPgogICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtLXNtYWxsIHRleHQtLW11dGVkIj5NaXNlIMOgIGpvdXIgbGUgMTkgbWFpIDIwMjA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9hPgoKICAgICAgICAKICAgICAgICAgICAgPGEgY2xhc3M9Imxpc3QtbGlzdGluZ19fZm9sbG93IG5vLXVuZGVybGluZSIKICAgICAgICAgICAgICAgaHJlZj0iIgogICAgICAgICAgICAgICBkYXRhLWZvbGxvdy1saXN0aW5nLWJ1dHRvbgogICAgICAgICAgICAgICBkYXRhLWZvbGxvdy1zdGF0dXM9IkZhbHNlIgogICAgICAgICAgICAgICBkYXRhLWxpc3RpbmctaWQ9IjE5Njg2ODY3MDciCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uIGljb24tZmF2b3JpdGUiIGFyaWEtbGFiZWw9IkVucmVnaXN0cmVyIGNldHRlIGFubm9uY2UiPjwvaT4KICAgICAgICAgICAgPC9hPgogICAgICAgIAogICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1saXN0aW5nLWl0ZW0KICAgICAgIGNsYXNzPSJsaXN0LWxpc3RpbmdfX2NvbnRhaW5lciBmdWxsLXdpZHRoIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmxpc3RpbmciIGRhdGEtdWEtZXZlbnQtbGFiZWw9Imxpc3Rpbmc6cmVhbHRvcl9saXN0aW5nczpsaXN0aW5nIiAgZGF0YS13YS10cmFjaz0iY2xpY2siCiAgICAgICAgICAgZGF0YS13YS1rZXk9ImdvOmxpc3RpbmciCiAgICAgICAgICAgZGF0YS13YS1uYW1lPSJsaXN0aW5nOnJlYWx0b3JfbGlzdGluZ3M6bGlzdGluZyIKICAgICAgICAgICBkYXRhLXdhLWRhdGE9Imxpc3RpbmdfaWQ9MTk2OTAyNjQ2MHxyZWFsdG9yX2lkPTI0NDd8c291cmNlPWxpc3RpbmciCiAgICA+CiAgICAgICAgPGEgZGF0YS1saXN0aW5nLWl0ZW0tcGljdHVyZSBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL2Fubm9uY2VzL2FjaGF0LzE5NjkwMjY0NjAvIgogICAgICAgICAgICAKICAgICAgICAgICAgY2xhc3M9Imxpc3QtbGlzdGluZ19fcGljdHVyZSIKICAgICAgICAgICAgZGF0YS13YS10cmFjaz0iZGlzcGxheSIKICAgICAgICAgICAgICAgIGRhdGEtd2EtbmFtZT0ibGlzdGluZ19pbl9saXN0IgogICAgICAgICAgICAgICAgZGF0YS13YS1kYXRhPSJsaXN0aW5nX2lkPTE5NjkwMjY0NjB8cmVhbHRvcl9pZD0yNDQ3fHNvdXJjZT1saXN0aW5nIgogICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWFfX2ZpZ3VyZSI+PGltZyBzcmM9Ii8vdGh1bWJvci5tZWlsbGV1cnNhZ2VudHMuY29tL2xURnNpWEhUbU9CQ2w4M1F2cHMyZW1xa0Eycz0vMTU2eDEwNC9saXN0aW5ncy9mOC9lZC9mOGVkYjg0NmMwOTA0OWQwYzE1YjQwNjEyOTFjNjY0M2NjNDI3YjI4LmpwZyIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiIGFsdD0iUGhvdG8gZHUgYmllbiDDoCBQYXJpcyA2ZSI+PC9kaXY+CiAgICAgICAgPC9hPgoKICAgICAgICA8YSBjbGFzcz0ibGlzdC1saXN0aW5nX19kZXNjcmlwdGlvbiBtYXJnaW4tbGVmdC1kb3VibGUgbm8tdW5kZXJsaW5lIgogICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL2Fubm9uY2VzL2FjaGF0LzE5NjkwMjY0NjAvIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZ1bGwtd2lkdGggZmxleCBmbGV4LXdyYXAiPgogICAgICAgICAgICAgICAgPGRpdiBkYXRhLWxpc3RpbmctaXRlbS10aXRsZSBjbGFzcz0ibGlzdC1saXN0aW5nX190eXBlIGZ1bGwtd2lkdGggdGV4dC0tYm9sZCIgZGF0YS1saXN0aW5nLWl0ZW0tdGl0bGU+QXBwYXJ0ZW1lbnQgNMKgcGnDqGNlcyAtIDc3wqBtwrI8L2Rpdj48ZGl2IGRhdGEtbGlzdGluZy1pdGVtLXByaWNlIGNsYXNzPSJsaXN0LWxpc3RpbmdfX3ByaWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imxpc3QtbGlzdGluZ19fcHJpY2UtdmFsdWUgdGl0bGUtLWgzIHRleHQtLWJvbGQgbm8tbWFyZ2luIj4x4oCvNDIw4oCvMDAwwqDigqw8L3NwYW4+PHNwYW4gY2xhc3M9InRleHQtLXNtYWxsIHRleHQtLW11dGVkIG1hcmdpbi1sZWZ0IGhpZGUtc20iPjE44oCvNDQxwqDigqwvIG3Csjwvc3Bhbj48L2Rpdj48ZGl2IGRhdGEtbGlzdGluZy1pdGVtLXBsYWNlIGNsYXNzPSJsaXN0LWxpc3RpbmdfX3BsYWNlIGZ1bGwtd2lkdGggdGV4dC0tbXV0ZWQiPlBhcmlzIDZlPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBkYXRhLWxpc3RpbmctaXRlbS1mb290ZXIgY2xhc3M9Imxpc3QtbGlzdGluZ19fZm9vdGVyIGZ1bGwtd2lkdGggaGlkZS1zbSI+CiAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC0tc21hbGwgdGV4dC0tbXV0ZWQiPk1pc2Ugw6Agam91ciBsZSAxOSBtYWkgMjAyMDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2E+CgogICAgICAgIAogICAgICAgICAgICA8YSBjbGFzcz0ibGlzdC1saXN0aW5nX19mb2xsb3cgbm8tdW5kZXJsaW5lIgogICAgICAgICAgICAgICBocmVmPSIiCiAgICAgICAgICAgICAgIGRhdGEtZm9sbG93LWxpc3RpbmctYnV0dG9uCiAgICAgICAgICAgICAgIGRhdGEtZm9sbG93LXN0YXR1cz0iRmFsc2UiCiAgICAgICAgICAgICAgIGRhdGEtbGlzdGluZy1pZD0iMTk2OTAyNjQ2MCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24gaWNvbi1mYXZvcml0ZSIgYXJpYS1sYWJlbD0iRW5yZWdpc3RyZXIgY2V0dGUgYW5ub25jZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWxpc3RpbmctaXRlbQogICAgICAgY2xhc3M9Imxpc3QtbGlzdGluZ19fY29udGFpbmVyIGZ1bGwtd2lkdGgiIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0iZ286bGlzdGluZyIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpyZWFsdG9yX2xpc3RpbmdzOmxpc3RpbmciICBkYXRhLXdhLXRyYWNrPSJjbGljayIKICAgICAgICAgICBkYXRhLXdhLWtleT0iZ286bGlzdGluZyIKICAgICAgICAgICBkYXRhLXdhLW5hbWU9Imxpc3Rpbmc6cmVhbHRvcl9saXN0aW5nczpsaXN0aW5nIgogICAgICAgICAgIGRhdGEtd2EtZGF0YT0ibGlzdGluZ19pZD0xOTY5MzYxNzQ5fHJlYWx0b3JfaWQ9MjQ0N3xzb3VyY2U9bGlzdGluZyIKICAgID4KICAgICAgICA8YSBkYXRhLWxpc3RpbmctaXRlbS1waWN0dXJlIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vYW5ub25jZXMvYWNoYXQvMTk2OTM2MTc0OS8iCiAgICAgICAgICAgIAogICAgICAgICAgICBjbGFzcz0ibGlzdC1saXN0aW5nX19waWN0dXJlIgogICAgICAgICAgICBkYXRhLXdhLXRyYWNrPSJkaXNwbGF5IgogICAgICAgICAgICAgICAgZGF0YS13YS1uYW1lPSJsaXN0aW5nX2luX2xpc3QiCiAgICAgICAgICAgICAgICBkYXRhLXdhLWRhdGE9Imxpc3RpbmdfaWQ9MTk2OTM2MTc0OXxyZWFsdG9yX2lkPTI0NDd8c291cmNlPWxpc3RpbmciCiAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYV9fZmlndXJlIj48aW1nIHNyYz0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vX2xkUWRuamlOeEE1U3dXWEZ2ODgwUVVPUENNPS8xNTZ4MTA0L2xpc3RpbmdzLzY5L2Y3LzY5ZjcwMDY2OTZhNjkyODU0YmE1ODFkZWQyZGZlNjM0NmI3MDkyNjUuanBnIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSIgYWx0PSJQaG90byBkdSBiaWVuIMOgIENyb2lzc3ktc3VyLVNlaW5lIj48L2Rpdj4KICAgICAgICA8L2E+CgogICAgICAgIDxhIGNsYXNzPSJsaXN0LWxpc3RpbmdfX2Rlc2NyaXB0aW9uIG1hcmdpbi1sZWZ0LWRvdWJsZSBuby11bmRlcmxpbmUiCiAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vYW5ub25jZXMvYWNoYXQvMTk2OTM2MTc0OS8iCiAgICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnVsbC13aWR0aCBmbGV4IGZsZXgtd3JhcCI+CiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1pdGVtLXRpdGxlIGNsYXNzPSJsaXN0LWxpc3RpbmdfX3R5cGUgZnVsbC13aWR0aCB0ZXh0LS1ib2xkIiBkYXRhLWxpc3RpbmctaXRlbS10aXRsZT5NYWlzb24gMTHCoHBpw6hjZXMgLSA0MDDCoG3CsjwvZGl2PjxkaXYgZGF0YS1saXN0aW5nLWl0ZW0tcHJpY2UgY2xhc3M9Imxpc3QtbGlzdGluZ19fcHJpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGlzdC1saXN0aW5nX19wcmljZS12YWx1ZSB0aXRsZS0taDMgdGV4dC0tYm9sZCBuby1tYXJnaW4iPjTigK82NTDigK8wMDDCoOKCrDwvc3Bhbj48c3BhbiBjbGFzcz0idGV4dC0tc21hbGwgdGV4dC0tbXV0ZWQgbWFyZ2luLWxlZnQgaGlkZS1zbSI+MTHigK82MjXCoOKCrC8gbcKyPC9zcGFuPjwvZGl2PjxkaXYgZGF0YS1saXN0aW5nLWl0ZW0tcGxhY2UgY2xhc3M9Imxpc3QtbGlzdGluZ19fcGxhY2UgZnVsbC13aWR0aCB0ZXh0LS1tdXRlZCI+Q3JvaXNzeS1zdXItU2VpbmU8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1pdGVtLWZvb3RlciBjbGFzcz0ibGlzdC1saXN0aW5nX19mb290ZXIgZnVsbC13aWR0aCBoaWRlLXNtIj4KICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LS1zbWFsbCB0ZXh0LS1tdXRlZCI+TWlzZSDDoCBqb3VyIGxlIDE5IG1haSAyMDIwPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvYT4KCiAgICAgICAgCiAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0LWxpc3RpbmdfX2ZvbGxvdyBuby11bmRlcmxpbmUiCiAgICAgICAgICAgICAgIGhyZWY9IiIKICAgICAgICAgICAgICAgZGF0YS1mb2xsb3ctbGlzdGluZy1idXR0b24KICAgICAgICAgICAgICAgZGF0YS1mb2xsb3ctc3RhdHVzPSJGYWxzZSIKICAgICAgICAgICAgICAgZGF0YS1saXN0aW5nLWlkPSIxOTY5MzYxNzQ5IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbiBpY29uLWZhdm9yaXRlIiBhcmlhLWxhYmVsPSJFbnJlZ2lzdHJlciBjZXR0ZSBhbm5vbmNlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAKICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtbGlzdGluZy1zaW1pbGFyLW1vcmUgY2xhc3M9InBhbmVsX19mb290bGluayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hZ2VuY2UtaW1tb2JpbGllcmUvYWdlbmNlLWFnZW5jZS12YXJlbm5lLXZpZW1lLTI0NDcvI2Fubm9uY2VzIiBjbGFzcz0iYXJyb3ctbGluayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOnJlYWx0b3JfcGFnZSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpyZWFsdG9yX2xpc3RpbmdzOnNlZV9hbGxfbGluayIgIGRhdGEtd2EtdHJhY2s9ImNsaWNrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13YS1uYW1lPSJsaXN0aW5nOnJlYWx0b3JfYWxsX2xpc3RpbmdzX2xpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdhLWtleT0iZ286cmVhbHRvciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtZGF0YT0icmVhbHRvcl9pZD0yNDQ3fHNvdXJjZT1saXN0aW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWb2lyIHBsdXMgZCdhbm5vbmNlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwiPgogICAgICAgIDxkaXYgZGF0YS1yZWFsdG9yLXByby1iYW5uZXIgY2xhc3M9InJlYWx0b3ItcHJvLWJhbm5lciI+CiAgICAgICAgICAgIDxoMyBkYXRhLXJlYWx0b3ItcHJvLWJhbm5lci10aXRsZSBjbGFzcz0icmVhbHRvci1wcm8tYmFubmVyX190aXRsZSI+Vm91cyDDqnRlcyBhZ2VudCBpbW1vYmlsaWVyID88L2gzPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZWFsdG9yLXByby1iYW5uZXJfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgPHAgZGF0YS1yZWFsdG9yLXByby1iYW5uZXItdGV4dCBjbGFzcz0icmVhbHRvci1wcm8tYmFubmVyX190ZXh0Ij5BZmZpY2hleiB2b3MgYW5ub25jZXMgc3VyIGRlcyBwYWdlcyDDoCBmb3J0ZSBhdWRpZW5jZSBldCB0b3VjaGV6IGRlcyBwcm9zcGVjdHMgZW4gcmVjaGVyY2hlIGFjdGl2ZS48L3A+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGRhdGEtcmVhbHRvci1wcm8tYmFubmVyLWN0YQogICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vcHJvLm1laWxsZXVyc2FnZW50cy5jb20/dXRtX3NvdXJjZT10cmFwcGVfbGVhZCZhbXA7dXRtX21lZGl1bT13d3cmYW1wO3V0bV9jYW1wYWlnbj1Bbm5vbmNlcyZhbXA7dXRtX2NvbnRlbnQ9bGlzdGluZ3M6YXJlX3lvdV9hX3Bybzpjb250YWN0X3VzIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLS1zZWNvbmRhcnkgYnRuLS1zbWFsbCByZWFsdG9yLXByby1iYW5uZXJfX2N0YSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJwcm86Z286bWFfcHJvIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJsaXN0aW5nOmFyZV95b3VfYV9wcm86Y29udGFjdF91cyIgID4KICAgICAgICAgICAgICAgICAgICBDb250YWN0ZXotbm91cwoKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8dWwKICAgICAgICBkYXRhLWxpc3RpbmctYnJlYWRjcnVtYi1tb2JpbGUKICAgICAgICBjbGFzcz0iYnJlYWRjcnVtYnMgYnJlYWRjcnVtYnMtLWxlZnQgbWFyZ2luLWJvdHRvbS1kb3VibGUgbWFyZ2luLXRvcC1kb3VibGUgaGlkZS1tZCBoaWRlLWxnIG1hcmdpbi1sZWZ0LWRvdWJsZSBtYXJnaW4tcmlnaHQtZG91YmxlIgogICAgICAgIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvQnJlYWRjcnVtYkxpc3QiCiAgICA+PGxpIGRhdGEtbGlzdGluZy1icmVhZGNydW1iLXRyYW5zYWN0aW9uLXR5cGUtbW9iaWxlIGl0ZW1wcm9wPSJpdGVtTGlzdEVsZW1lbnQiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvTGlzdEl0ZW0iPgogICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9Ii9hY2hhdC8iCiAgICAgICAgICAgIGl0ZW1wcm9wPSJpdGVtIgogICAgICAgICAgICAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpsaXN0aW5nczpob21lOmJ1eSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpicmVhZGNydW1icyIgIAogICAgICAgID4KICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiIGNsYXNzPSJwb2ludGVyLWV2ZW50Ij5BY2hhdDwvc3Bhbj4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSIxIiAvPgogICAgICAgIDwvYT4KICAgIDwvbGk+CiAgICAKCiAgICAKCiAgICAKCiAgICA8bGkgZGF0YS1saXN0aW5nLWJyZWFkY3J1bWItY2l0eS1tb2JpbGUgaXRlbXByb3A9Iml0ZW1MaXN0RWxlbWVudCIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9MaXN0SXRlbSI+CiAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iL2Fubm9uY2VzL2FjaGF0L3BhcmlzLTc1MDAwLyIKICAgICAgICAgICAgaXRlbXByb3A9Iml0ZW0iCiAgICAgICAgICAgICBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249ImdvOmxpc3RpbmdzOnNlYXJjaDpidXk6Y2l0eSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpicmVhZGNydW1icyIgIAogICAgICAgID4KICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiIGNsYXNzPSJwb2ludGVyLWV2ZW50Ij5QYXJpczwvc3Bhbj4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSIyIiAvPgogICAgICAgIDwvYT4KICAgIDwvbGk+CiAgICAKCiAgICAKCiAgICA8bGkgZGF0YS1saXN0aW5nLWJyZWFkY3J1bWItYXJybXVuLW1vYmlsZSBpdGVtcHJvcD0iaXRlbUxpc3RFbGVtZW50IiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0xpc3RJdGVtIj4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvYW5ub25jZXMvYWNoYXQvcGFyaXMtN2VtZS1hcnJvbmRpc3NlbWVudC03NTAwNy8iCiAgICAgICAgICAgIGl0ZW1wcm9wPSJpdGVtIgogICAgICAgICAgICAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpsaXN0aW5nczpzZWFyY2g6YnV5OmFycm11biIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpicmVhZGNydW1icyIgIAogICAgICAgID4KICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9Im5hbWUiIGNsYXNzPSJwb2ludGVyLWV2ZW50Ij5QYXJpcyA3w6htZSBhcnJvbmRpc3NlbWVudDwvc3Bhbj4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InBvc2l0aW9uIiBjb250ZW50PSIzIiAvPgogICAgICAgIDwvYT4KICAgIDwvbGk+CiAgICA8bGkgZGF0YS1saXN0aW5nLWJyZWFkY3J1bWItaXRlbS10eXBlLW1vYmlsZSBpdGVtcHJvcD0iaXRlbUxpc3RFbGVtZW50IiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0xpc3RJdGVtIj4KICAgICAgICA8YQogICAgICAgICAgICBocmVmPSIvYW5ub25jZXMvYWNoYXQvcGFyaXMtN2VtZS1hcnJvbmRpc3NlbWVudC03NTAwNy9hcHBhcnRlbWVudC8iCiAgICAgICAgICAgIGl0ZW1wcm9wPSJpdGVtIgogICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJuYW1lIiBjbGFzcz0icG9pbnRlci1ldmVudCI+QXBwYXJ0ZW1lbnQ8L3NwYW4+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJwb3NpdGlvbiIgY29udGVudD0iNCIgLz4KICAgICAgICA8L2E+CiAgICA8L2xpPgogICAgICAgICAgICA8bGkgZGF0YS1saXN0aW5nLWJyZWFkY3J1bWItY2hhcmFjdGVyaXN0aWNzLW1vYmlsZT4KICAgIAogICAgICAgIAogICAgICAgICAgICAyJm5ic3A7cGnDqGNlcwogICAgICAgIAogICAgCiAKICAgIAogICAgICAgIDUxJm5ic3A7bcKyCiAgICAKPC9saT4KICAgICAgICAKICAgIDwvdWw+PC9kaXY+CgogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGF5b3V0LXdpdGgtY29udGFjdC1mb3JtX19mb3JtIGhpZGUtc20iPgogICAgICAgICAgICAgICAgPGRpdiBkYXRhLWNvbnRhY3QtZm9ybS1zdGlja3k+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFjdC1mb3JtIGNvbnRhY3QtZm9ybS0tbGlzdGluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmdpbi1ib3R0b20tZG91YmxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUtLWgzIHRleHQtLWNlbnRlciBtYXJnaW4tYm90dG9tLWRvdWJsZSI+Q29udGFjdGVyPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXggZmxleC1jZW50ZXIgZmxleC1qdXN0aWZ5LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFjdC1mb3JtX19sb2dvIG1hcmdpbi1yaWdodC1kb3VibGUiPjxkaXYgY2xhc3M9IiIgaXRlbXByb3A9ImxvZ28iIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0ltYWdlT2JqZWN0Ij48YQogICAgICAgICAgICAgICAgaHJlZj0iL2FnZW5jZS1pbW1vYmlsaWVyZS9hZ2VuY2UtYWdlbmNlLXZhcmVubmUtdmllbWUtMjQ0Ny8iCiAgICAgICAgICAgICAgICBjbGFzcz0iaW5saW5lLWJsb2NrIgogICAgICAgICAgICAgICAgIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0iZ286cmVhbHRvcl9wYWdlIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJsaXN0aW5nOnJlYWx0b3I6cmVhbHRvcl9sb2dvIiAgCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgID48aW1nIHNyYz0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vQ0stb3FhbGMxbDhsYzZybTlrTG1HTkJtZmpvPS9maXQtaW4vOTB4NjAvZmlsdGVyczpmaWxsKHdoaXRlKS9yZWFsdG9ycy9hYy85Mi8yNTg0MjYwMGE2ZTI5ZmEuMjQ0Ny5qcGciIGFsdD0iQUdFTkNFIFZBUkVOTkUgVknDqG1lIC0gQWdlbmNlIGltbW9iaWxpw6hyZSAtIDcgUGxhY2UgU2FpbnQtU3VscGljZSwgNzUwMDYgUGFyaXMiPjwvYT4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InVybCIgY29udGVudD0iLy90aHVtYm9yLm1laWxsZXVyc2FnZW50cy5jb20vQ0stb3FhbGMxbDhsYzZybTlrTG1HTkJtZmpvPS9maXQtaW4vOTB4NjAvZmlsdGVyczpmaWxsKHdoaXRlKS9yZWFsdG9ycy9hYy85Mi8yNTg0MjYwMGE2ZTI5ZmEuMjQ0Ny5qcGciPgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0id2lkdGgiIGNvbnRlbnQ9IjkwIj4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImhlaWdodCIgY29udGVudD0iNjAiPgogICAgICAgIDwvZGl2PjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9hZ2VuY2UtaW1tb2JpbGllcmUvYWdlbmNlLWFnZW5jZS12YXJlbm5lLXZpZW1lLTI0NDcvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29udGFjdC1mb3JtX19zdWJ0aXRsZSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJnbzpyZWFsdG9yX3BhZ2UiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Imxpc3Rpbmc6cmVhbHRvcjpyZWFsdG9yX3RpdGxlIiAgZGF0YS13YS10cmFjaz0iY2xpY2siCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2Eta2V5PSJnbzpyZWFsdG9yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdhLW5hbWU9Imxpc3Rpbmc6cmVhbHRvcl90aXRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13YS1kYXRhPSJzb3VyY2U9bGlzdGluZ3xyZWFsdG9yX2lkPTI0NDd8bGlzdGluZ19pZD0xOTY3NTQwMzE2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5BR0VOQ0UgVkFSRU5ORSBWScOobWU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+PGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmVhbHRvci1zaG93LXBob25lLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLS1zZWNvbmRhcnkgZnVsbC13aWR0aCBtYXJnaW4tYm90dG9tLWRvdWJsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iIGRhdGEtdWEtaGl0LXR5cGU9ImV2ZW50IiBkYXRhLXVhLWV2ZW50LWNhdGVnb3J5PSJBbm5vbmNlIiBkYXRhLXVhLWV2ZW50LWFjdGlvbj0ibGlzdGluZzpyZWFsdG9yOnNob3dfcGhvbmUiIGRhdGEtdWEtZXZlbnQtbGFiZWw9Imxpc3Rpbmc6cmVhbHRvcjpzaG93X3Bob25lX2J1dHRvbiIgIGRhdGEtd2EtdHJhY2s9ImNsaWNrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2Eta2V5PSJjbGljayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdhLW5hbWU9ImRpc3BsYXlfcmVhbHRvcl9waG9uZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdhLWRhdGE9InNvdXJjZT1saXN0aW5nfHJlYWx0b3JfaWQ9MjQ0N3xsaXN0aW5nX2lkPTE5Njc1NDAzMTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWFyZ2luLXJpZ2h0LWRvdWJsZSB2ZXJ0aWNhbC1hbGlnbi1taWRkbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3N0YXRpYy9pbWFnZXMvcGhvbmUtbGlnaHQtYmx1ZTUuc3ZnP3Q9MTU4OTg3NTAzOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSdBcHBlbGVyJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZlcnRpY2FsLWFsaWduLW1pZGRsZSI+QWZmaWNoZXIgbGUgbnVtw6lybzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJlYWx0b3ItY2FsbC1waG9uZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJ0ZWw6MDE3NjQ1NDA2NSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi0tc2Vjb25kYXJ5IGZ1bGwtd2lkdGggbWFyZ2luLWJvdHRvbS1kb3VibGUgaGlkZSIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJsaXN0aW5nOnJlYWx0b3I6Y2FsbF9waG9uZSIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpyZWFsdG9yOmNhbGxfcGhvbmVfYnV0dG9uIiAgZGF0YS13YS10cmFjaz0iY2xpY2siCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13YS10cmFjaz0iY2xpY2siCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13YS1rZXk9ImNsaWNrIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtbmFtZT0iY2FsbF9yZWFsdG9yX3Bob25lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtZGF0YT0ic291cmNlPWxpc3Rpbmd8cmVhbHRvcl9pZD0yNDQ3fGxpc3RpbmdfaWQ9MTk2NzU0MDMxNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtYXJnaW4tcmlnaHQtZG91YmxlIHZlcnRpY2FsLWFsaWduLW1pZGRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjE3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2ltYWdlcy9waG9uZS1saWdodC1ibHVlNS5zdmc/dD0xNTg5ODc1MDM4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9J0FwcGVsZXInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVydGljYWwtYWxpZ24tbWlkZGxlIj5BcHBlbGVyIGF1IDAxIDc2IDQ1IDQwIDY1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgCgogICAgPGRpdiBkYXRhLXJlYWx0b3ItbWVzc2FnZS1mb3JtPgogICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCIKICAgICAgICAgICAgYWN0aW9uPSIvbWVzc2FnZS1hZ2VuY2UtMjQ0NyIKICAgICAgICAgICAgZGF0YS1tZXNzYWdlLWZvcm0KICAgICAgICAgICAgZGF0YS1yZWFsdG9yLWlkPSIyNDQ3Ij4KCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImdhX3RhZyIgdmFsdWU9ImZyb206bGlzdGluZzpyZWFsdG9yOmNvbnRhY3RfZm9ybSIgLz4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic291cmNlIiB2YWx1ZT0iUkVBTFRPUl9NRVNTQUdFX1NPVVJDRVMuTElTVElOR1MiIC8+CiAgICAgICAgICAgIDxpbnB1dCBkYXRhLWludGVudCB0eXBlPSJoaWRkZW4iIG5hbWU9ImludGVudCIgdmFsdWU9IlJFQUxUT1JfTUVTU0FHRV9JTlRFTlRTLkxJU1RJTkdfQ09OVEFDVCIgLz4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib2JqZWN0IiB2YWx1ZT0iUkVBTFRPUl9NRVNTQUdFX09CSkVDVFMuTElTVElORyIgLz4KCiAgICAgICAgICAgIDxpbnB1dCBpZD0ibGlzdGluZ19pZCIgbmFtZT0ibGlzdGluZ19pZCIgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iMTk2NzU0MDMxNiI+CgogICAgICAgICAgICA8ZGl2IGRhdGEtY29udHJvbC1ncm91cAogICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItY2xhc3M9ImZpZWxkLS1pbnZhbGlkIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgY2xhc3M9ImZpZWxkIGZpZWxkLS1wcmVmaXhlZCIKICAgICAgICAgICAgPjxkaXYgZGF0YS1jb250cm9sCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZF9fY29udHJvbC13cmFwcGVyIgogICAgICAgICAgICAgICAgPjxkaXYgY2xhc3M9ImZpZWxkX19wcmVmaXggZmllbGRfX3ByZWZpeC0tbm8tYm9yZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uIGljb24tcGVyc29uIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PjxpbnB1dCBhcmlhLWxhYmVsPSJWb3RyZSBub20gY29tcGxldCIgY2xhc3M9IiBmaWVsZF9fY29udHJvbCByZXF1aXJlZCIgZGF0YS1yZWFsdG9yLWNvbnRhY3QtbmFtZT0iIiBpZD0ibmFtZSIgbmFtZT0ibmFtZSIgcGxhY2Vob2xkZXI9IlZvdHJlIG5vbSBjb21wbGV0IiB0eXBlPSJ0ZXh0IiB2YWx1ZT0iIj48ZGl2IGRhdGEtY29udHJvbC1lcnJvcnM+PC9kaXY+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBkYXRhLWNvbnRyb2wtZ3JvdXAKICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZC0taW52YWxpZCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZCBmaWVsZC0tcHJlZml4ZWQiCiAgICAgICAgICAgID48ZGl2IGRhdGEtY29udHJvbAogICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGRfX2NvbnRyb2wtd3JhcHBlciIKICAgICAgICAgICAgICAgID48ZGl2IGNsYXNzPSJmaWVsZF9fcHJlZml4IGZpZWxkX19wcmVmaXgtLW5vLWJvcmRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbiBpY29uLXBob25lIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PjxpbnB1dCBhcmlhLWxhYmVsPSJUw6lsw6lwaG9uZSIgY2xhc3M9IiBmaWVsZF9fY29udHJvbCByZXF1aXJlZCIgZGF0YS1yZWFsdG9yLWNvbnRhY3QtcGhvbmU9IiIgaWQ9InBob25lX251bWJlciIgbmFtZT0icGhvbmVfbnVtYmVyIiBwbGFjZWhvbGRlcj0iVMOpbMOpcGhvbmUiIHR5cGU9InRlbCIgdmFsdWU9IiI+PGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgZGF0YS1jb250cm9sLWdyb3VwCiAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGQtLWludmFsaWQiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGQgZmllbGQtLXByZWZpeGVkIgogICAgICAgICAgICA+PGRpdiBkYXRhLWNvbnRyb2wKICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZpZWxkX19jb250cm9sLXdyYXBwZXIiCiAgICAgICAgICAgICAgICA+PGRpdiBjbGFzcz0iZmllbGRfX3ByZWZpeCBmaWVsZF9fcHJlZml4LS1uby1ib3JkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24gaWNvbi1tYXJrdW5yZWFkIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PjxpbnB1dCBhcmlhLWxhYmVsPSJFbWFpbCIgY2xhc3M9IiBmaWVsZF9fY29udHJvbCByZXF1aXJlZCIgZGF0YS1yZWFsdG9yLWNvbnRhY3QtZW1haWw9IiIgaWQ9ImVtYWlsIiBuYW1lPSJlbWFpbCIgcGxhY2Vob2xkZXI9IkVtYWlsIiB0eXBlPSJlbWFpbCIgdmFsdWU9IiI+PGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgZGF0YS1jb250cm9sLWdyb3VwCiAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGQtLWludmFsaWQiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGQiCiAgICAgICAgICAgID48ZGl2IGRhdGEtY29udHJvbAogICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGRfX2NvbnRyb2wtd3JhcHBlciIKICAgICAgICAgICAgICAgID48dGV4dGFyZWEgYXJpYS1sYWJlbD0iTWVzc2FnZSIgY2xhc3M9ImZpZWxkX19jb250cm9sLS1uby1ob3Jpem9udGFsLXJlc2l6ZSBmaWVsZF9fY29udHJvbCByZXF1aXJlZCIgZGF0YS1yZWFsdG9yLWNvbnRhY3QtbWVzc2FnZT0iIiBpZD0ibWVzc2FnZSIgbmFtZT0ibWVzc2FnZSIgcGxhY2Vob2xkZXI9Ik1lc3NhZ2UiPkonYWkgdnUgdm90cmUgYW5ub25jZSBzdXIgTWVpbGxldXJzQWdlbnRzIGV0IHNvdWhhaXRlIG0nZW50cmV0ZW5pciBhdmVjIHZvdXMuPC90ZXh0YXJlYT48ZGl2IGRhdGEtY29udHJvbC1lcnJvcnM+PC9kaXY+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgCgoKICAgICAgICAgICAgCgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi0tcHJpbWFyeSBidG4tLWZ1bGwtd2lkdGggbWFyZ2luLXRvcCIKICAgICAgICAgICAgICAgIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IlBhZ2UgYWdlbmNlIgogICAgICAgICAgICAgICAgZGF0YS11YS1ldmVudC1hY3Rpb249InJlYWx0b3I6bWVzc2FnZTpzdWJtaXQ6Y2xpY2siCiAgICAgICAgICAgICAgICBkYXRhLXVhLWV2ZW50LWxhYmVsPSJyZWFsdG9yOnNpZGU6bWVzc2FnZTpzdWJtaXRfYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBDb250YWN0ZXIgZ3JhdHVpdGVtZW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9mb3JtPgoKICAgICAgICA8ZGl2IGNsYXNzPSJoaWRlIiBkYXRhLW1lc3NhZ2Utc3VjY2Vzcz4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VjY2Vzcy1tZXNzYWdlIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uIGljb24tZG9uZSBzdWNjZXNzLW1lc3NhZ2VfX2ljb24iPjwvaT4KICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ic3VjY2Vzcy1tZXNzYWdlX3RpdGxlIHRpdGxlLS1oMyBtYXJnaW4tdG9wLXRyaXBsZSI+Vm90cmUgZGVtYW5kZSBkZSBjb250YWN0IGEgYmllbiDDqXTDqSBlbnZvecOpZSA6IG1lcmNpICE8L2gzPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Y2Nlc3MtbWVzc2FnZV9fdGV4dCI+QXR0ZW5kZXotdm91cyDDoCDDqnRyZSBjb250YWN0w6kgcGFyIGNlIHByb2Zlc3Npb25uZWwuPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iaGlkZSIgZGF0YS1tZXNzYWdlLWVycm9yPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGFzaC1tZXNzYWdlIGZsYXNoLW1lc3NhZ2UtLWVycm9yIG1hcmdpbi1ib3R0b20iPgogICAgICAgICAgICAgICAgVW4gcHJvYmzDqG1lIGVzdCBzdXJ2ZW51LCB2ZXVpbGxleiByw6llc3NheWVyIHVsdMOpcmlldXJlbWVudC4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC0teHMgdGV4dC0tbXV0ZWQgdGV4dC0tc21hbGwgbWFyZ2luLXRvcC1kb3VibGUiPgogICAgICAgICAgICAgICAgICAgICAgICBFbiBjbGlxdWFudCBzdXIgIkNvbnRhY3RlciBncmF0dWl0ZW1lbnQiIHZvdXMgYWNjZXB0ZXogbm9zIDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSIvdGVybXMvIj5jb25kaXRpb25zIGfDqW7DqXJhbGVzIGQndXRpbGlzYXRpb248L2E+IGV0IG5vdHJlIDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSIvdGVybXMvI3ByaXZhY3kiPnBvbGl0aXF1ZSBkZSBjb25maWRlbnRpYWxpdMOpPC9hPi4KICAgICAgICAgICAgICAgICAgICAgICAgTWVpbGxldXJzQWdlbnRzIHByb2PDqGRlIGF1IHRyYWl0ZW1lbnQgZGVzIGRvbm7DqWVzIG7DqWNlc3NhaXJlcyDDoCBsJ3V0aWxpc2F0aW9uIGRlIHNlcyBzZXJ2aWNlcyBldCBzb250IGRlc3RpbsOpZXMgYXUgcHJvZmVzc2lvbm5lbCBjb250YWN0w6kgZXQgw6AgTWVpbGxldXJzQWdlbnRzLiBWb3VzIGRpc3Bvc2V6IGQndW4gZHJvaXQgZCdhY2PDqHMsIGRlIHJlY3RpZmljYXRpb24sIGQnZWZmYWNlbWVudCBldCBkJ29wcG9zaXRpb24sIGF1eCBpbmZvcm1hdGlvbnMgdm91cyBjb25jZXJuYW50LiBQb3VyIGV4ZXJjZXIgdm9zIGRyb2l0cywgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Ii9jb250YWN0LyI+Y29udGFjdGV6LW5vdXM8L2E+LgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGRhdGEtcmVhbHRvci1jb250YWN0LW1vYmlsZSBjbGFzcz0iaGlkZS1tZCBoaWRlLWxnIGJvdHRvbS1uYXZpZ2F0aW9uIGJvdHRvbS1uYXZpZ2F0aW9uLS1zbWFsbCBuby1wYWRkaW5nIj48ZGl2IGNsYXNzPSJib3R0b20tbmF2aWdhdGlvbl9fYnV0dG9ucyBib3R0b20tbmF2aWdhdGlvbl9fYnV0dG9ucy0tZnVsbC13aWR0aCBwYWRkaW5nLWxlZnQtZG91YmxlIHBhZGRpbmctcmlnaHQtZG91YmxlIj48YQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJlYWx0b3ItY2FsbC1waG9uZS1idXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0idGVsOjAxNzY0NTQwNjUiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLS1zZWNvbmRhcnkgZnVsbC13aWR0aCBtYXJnaW4tcmlnaHQtZG91YmxlIiBkYXRhLXVhLWhpdC10eXBlPSJldmVudCIgZGF0YS11YS1ldmVudC1jYXRlZ29yeT0iQW5ub25jZSIgZGF0YS11YS1ldmVudC1hY3Rpb249Imxpc3Rpbmc6cmVhbHRvcjpjYWxsX3Bob25lIiBkYXRhLXVhLWV2ZW50LWxhYmVsPSJsaXN0aW5nOnJlYWx0b3I6Y2FsbF9waG9uZV9idXR0b24iICBkYXRhLXdhLXRyYWNrPSJjbGljayIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13YS1rZXk9ImNsaWNrIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXdhLW5hbWU9ImNhbGxfcmVhbHRvcl9waG9uZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS13YS1kYXRhPSJzb3VyY2U9bGlzdGluZ3xyZWFsdG9yX2lkPTI0NDd8bGlzdGluZ19pZD0xOTY3NTQwMzE2IgogICAgICAgICAgICAgICAgICAgID5BcHBlbGVyPC9hPjxidXR0b24KICAgICAgICAgICAgICAgICAgICBkYXRhLXJlYWx0b3ItbWVzc2FnZS1idXR0b24KICAgICAgICAgICAgICAgICAgICBkYXRhLXVybD0iL21lc3NhZ2UtYWdlbmNlLTI0NDc/bGlzdGluZ19pZD0xOTY3NTQwMzE2JmFtcDtvcmlnaW49bGlzdGluZyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi0tcHJpbWFyeSBmdWxsLXdpZHRoIgogICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFubm9uY2UiIGRhdGEtdWEtZXZlbnQtYWN0aW9uPSJsaXN0aW5nOnJlYWx0b3I6Y29udGFjdF9idXR0b246Y2xpY2tlZCIgZGF0YS11YS1ldmVudC1sYWJlbD0ibGlzdGluZzpyZWFsdG9yOmNvbnRhY3RfYnV0dG9uIiAgZGF0YS13YS10cmFjaz0iY2xpY2siCiAgICAgICAgICAgICAgICAgICAgZGF0YS13YS1rZXk9ImNsaWNrIgogICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtbmFtZT0iZGlzcGxheV9yZWFsdG9yX3Bob25lIgogICAgICAgICAgICAgICAgICAgIGRhdGEtd2EtZGF0YT0ic291cmNlPWxpc3Rpbmd8cmVhbHRvcl9pZD0yNDQ3fGxpc3RpbmdfaWQ9MTk2NzU0MDMxNiIKICAgICAgICAgICAgICAgID5Db250YWN0ZXI8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBkYXRhLWZvbGxvdy1jb25uZXhpb24KICAgICAgICAgICAgIGNsYXNzPSJwb3BpbiBwb3Bpbi1hdXRoIG1mcC1oaWRlIgogICAgICAgICAgICAgcm9sZT0iZGlhbG9nIj4KICAgICAgICAgICAgCiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS0taDEiPgogICAgICAgICAgICBDb25uZWN0ZXotdm91cyBwb3VyIGFqb3V0ZXIgdW5lIGFubm9uY2Ugw6Agdm9zIGZhdm9yaXMKICAgICAgICA8L2Rpdj4KICAgIAoKICAgIAoKICAgIDxkaXYgY2xhc3M9ImF1dGgtY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJhdXRoLWZvcm1zIiBkYXRhLWF1dGgtc2VjdGlvbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2LXRhYnMgbmF2LXRhYnMtLWxlZnQgbmF2LXRhYnMtLXNlcGFyYXRlZCBtYXJnaW4tYm90dG9tLXF1YWRydXBsZSIgZGF0YS10YWJzLW5hdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdi10YWJzX19jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LXRhYnNfX2l0ZW0gbmF2LXRhYnNfX2l0ZW0tLWFjdGl2ZSIgaHJlZj0iI3NpZ25pbiIgZGF0YS1zaWduaW4tdGFiPkonYWkgZMOpasOgIHVuIGNvbXB0ZTwvYT4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LXRhYnNfX2l0ZW0gIiBocmVmPSIjc2lnbnVwIiBkYXRhLXNpZ251cC10YWI+Q3LDqWVyIHVuIGNvbXB0ZTwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPSJzaWduaW4iIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCIgYWN0aW9uPSIvX3NpZ25pbj9zaG93PXNpZ25pbiIgY2xhc3M9ImNsZWFyZml4IiBkYXRhLWF1dGgtZm9ybSBkYXRhLXNpZ25pbi1mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhY3Rpb24iIHZhbHVlPSJzaWduaW4iIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0idXNlcl9jc3JmX3Rva2VuIiBuYW1lPSJ1c2VyX2NzcmZfdG9rZW4iIHR5cGU9ImhpZGRlbiIgdmFsdWU9IjY5OThiM2VmNDBiOWU3ZmJkZWVlYTVhNThkMDY3M2IxOThkOWVkNWIuWHNQY3VRLjdITkIzMkZtVmRHY0tIUGd3ZDhoMy1OOXZCMCI+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJnaW4tYm90dG9tLWRvdWJsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtY29udHJvbC1ncm91cAogICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItY2xhc3M9ImZpZWxkLS1pbnZhbGlkIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgY2xhc3M9ImZpZWxkIgogICAgICAgICAgICA+PGxhYmVsIGNsYXNzPSJmaWVsZF9fbGFiZWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcj0idXNlcl91c2VybmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGRfX2xhYmVsLS1pbnZhbGlkIgogICAgICAgICAgICAgICAgICAgID5BZHJlc3NlIGVtYWlsIG91IGlkZW50aWZpYW50PHNwYW4gY2xhc3M9IiI+Jm5ic3A7Kjwvc3Bhbj48L2xhYmVsPjxkaXYgZGF0YS1jb250cm9sCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZF9fY29udHJvbC13cmFwcGVyIgogICAgICAgICAgICAgICAgPjxpbnB1dCBjbGFzcz0iIGZpZWxkX19jb250cm9sIHJlcXVpcmVkIiBkYXRhLXNpZ25pbi11c2VybmFtZT0iIiBpZD0idXNlcl91c2VybmFtZSIgbmFtZT0idXNlcl91c2VybmFtZSIgdHlwZT0idGV4dCIgdmFsdWU9IiI+PGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1jb250cm9sLWdyb3VwCiAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGQtLWludmFsaWQiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGQiCiAgICAgICAgICAgID48bGFiZWwgY2xhc3M9ImZpZWxkX19sYWJlbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yPSJ1c2VyX3Bhc3N3b3JkX3NpZ25pbl9mb3JtIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZF9fbGFiZWwtLWludmFsaWQiCiAgICAgICAgICAgICAgICAgICAgPk1vdCBkZSBwYXNzZTxzcGFuIGNsYXNzPSIiPiZuYnNwOyo8L3NwYW4+PC9sYWJlbD48ZGl2IGRhdGEtY29udHJvbAogICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGRfX2NvbnRyb2wtd3JhcHBlciIKICAgICAgICAgICAgICAgID48aW5wdXQgY2xhc3M9IiBmaWVsZF9fY29udHJvbCByZXF1aXJlZCIgZGF0YS1zaWduaW4tcGFzc3dvcmQ9IiIgaWQ9InVzZXJfcGFzc3dvcmRfc2lnbmluX2Zvcm0iIG5hbWU9InVzZXJfcGFzc3dvcmQiIHR5cGU9InBhc3N3b3JkIiB2YWx1ZT0iIj48ZGl2IGRhdGEtY29udHJvbC1lcnJvcnM+PC9kaXY+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFiZWwtY29udGFpbmVyIiA+CiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iY2hlY2tib3giIGlkPSJ1c2VyX3JlbWVtYmVyX21lIiBuYW1lPSJ1c2VyX3JlbWVtYmVyX21lIiB0eXBlPSJjaGVja2JveCIgdmFsdWU9InkiPgogICAgICAgICAgICA8bGFiZWwgZm9yPSJ1c2VyX3JlbWVtYmVyX21lIiBjbGFzcz0ibGFiZWwgbGFiZWwtLXNtYWxsIGxhYmVsLS1jaGVja2JveCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYWJlbF9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVzdGVyIGNvbm5lY3TDqTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXggZmxleC1jb2x1bW4gZmxleC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGRhdGEtc2lnbmluLXN1Ym1pdCBjbGFzcz0iYnRuIGJ0bi0tcHJpbWFyeSBtYXJnaW4tYm90dG9tLWRvdWJsZSI+U2UgY29ubmVjdGVyPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcmVxdWVzdF9wYXNzd29yZCIgY2xhc3M9ImJ0biBidG4tLWxpbmsiPk1vdCBkZSBwYXNzZSBvdWJsacOpID88L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4KCiAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD0ic2lnbnVwIiBjbGFzcz0iaGlkZSI+CiAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJQT1NUIiBhY3Rpb249Ii9fc2lnbmluP3Nob3c9c2lnbnVwIiBjbGFzcz0iY2xlYXJmaXgiIGRhdGEtYXV0aC1mb3JtIGRhdGEtc2lnbnVwLWZvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdGlvbiIgdmFsdWU9InNpZ251cCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJ1c2VyX2NzcmZfdG9rZW4iIG5hbWU9InVzZXJfY3NyZl90b2tlbiIgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iNjk5OGIzZWY0MGI5ZTdmYmRlZWVhNWE1OGQwNjczYjE5OGQ5ZWQ1Yi5Yc1BjdVEuN0hOQjMyRm1WZEdjS0hQZ3dkOGgzLU45dkIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RhX2lkIiB2YWx1ZT0ibGlzdGluZ19mb2xsb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1jb250cm9sLWdyb3VwCiAgICAgICAgICAgIGRhdGEtZXJyb3ItY2xhc3M9ImZpZWxkLS1pbnZhbGlkIgogICAgICAgICAgICBjbGFzcz0iZmllbGQiCiAgICA+PGxhYmVsIGNsYXNzPSJmaWVsZF9fbGFiZWwiCiAgICAgICAgICAgICAgICAgICAgZm9yPSJ1c2VyX2dlbmRlciIKICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZF9fbGFiZWwtLWludmFsaWQiCiAgICAgICAgICAgID5DaXZpbGl0w6k8c3BhbiBjbGFzcz0iIj4mbmJzcDsqPC9zcGFuPjwvbGFiZWw+PGRpdiBkYXRhLWNvbnRyb2wgY2xhc3M9ImZpZWxkX19jb250cm9sLXdyYXBwZXIiPjx1bCBjbGFzcz0icmFkaW8tc3F1YXJlcyBuby1tYXJnaW4iPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icmFkaW8tc3F1YXJlIiBkYXRhLXNpZ251cC1nZW5kZXItMT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJ1c2VyX2dlbmRlci0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InVzZXJfZ2VuZGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyYWRpby1zcXVhcmVfX2lucHV0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2lnbnVwLWdlbmRlcj0icyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InVzZXJfZ2VuZGVyLTEiIGNsYXNzPSJyYWRpby1zcXVhcmVfX2xhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb25zaWV1cgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJyYWRpby1zcXVhcmUiIGRhdGEtc2lnbnVwLWdlbmRlci0zPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InVzZXJfZ2VuZGVyLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0idXNlcl9nZW5kZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJhZGlvLXNxdWFyZV9faW5wdXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zaWdudXAtZ2VuZGVyPSJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idXNlcl9nZW5kZXItMiIgY2xhc3M9InJhZGlvLXNxdWFyZV9fbGFiZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hZGFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgPGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PjwvZGl2PgogICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1jb250cm9sLWdyb3VwCiAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGQtLWludmFsaWQiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGQiCiAgICAgICAgICAgID48bGFiZWwgY2xhc3M9ImZpZWxkX19sYWJlbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yPSJ1c2VyX2ZpcnN0bmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGRfX2xhYmVsLS1pbnZhbGlkIgogICAgICAgICAgICAgICAgICAgID5QcsOpbm9tPHNwYW4gY2xhc3M9IiI+Jm5ic3A7Kjwvc3Bhbj48L2xhYmVsPjxkaXYgZGF0YS1jb250cm9sCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZF9fY29udHJvbC13cmFwcGVyIgogICAgICAgICAgICAgICAgPjxpbnB1dCBjbGFzcz0iIGZpZWxkX19jb250cm9sIHJlcXVpcmVkIiBkYXRhLXNpZ251cC1maXJzdG5hbWU9IiIgaWQ9InVzZXJfZmlyc3RuYW1lIiBuYW1lPSJ1c2VyX2ZpcnN0bmFtZSIgdHlwZT0idGV4dCIgdmFsdWU9IiI+PGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWNvbnRyb2wtZ3JvdXAKICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZC0taW52YWxpZCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZCIKICAgICAgICAgICAgPjxsYWJlbCBjbGFzcz0iZmllbGRfX2xhYmVsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBmb3I9InVzZXJfbGFzdG5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItY2xhc3M9ImZpZWxkX19sYWJlbC0taW52YWxpZCIKICAgICAgICAgICAgICAgICAgICA+Tm9tPHNwYW4gY2xhc3M9IiI+Jm5ic3A7Kjwvc3Bhbj48L2xhYmVsPjxkaXYgZGF0YS1jb250cm9sCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZF9fY29udHJvbC13cmFwcGVyIgogICAgICAgICAgICAgICAgPjxpbnB1dCBjbGFzcz0iIGZpZWxkX19jb250cm9sIHJlcXVpcmVkIiBkYXRhLXNpZ251cC1sYXN0bmFtZT0iIiBpZD0idXNlcl9sYXN0bmFtZSIgbmFtZT0idXNlcl9sYXN0bmFtZSIgdHlwZT0idGV4dCIgdmFsdWU9IiI+PGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWNvbnRyb2wtZ3JvdXAKICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZC0taW52YWxpZCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZCIKICAgICAgICAgICAgPjxsYWJlbCBjbGFzcz0iZmllbGRfX2xhYmVsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBmb3I9InVzZXJfY2VsbF9waG9uZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGRfX2xhYmVsLS1pbnZhbGlkIgogICAgICAgICAgICAgICAgICAgID5Uw6lsw6lwaG9uZTxzcGFuIGNsYXNzPSIiPiZuYnNwOyo8L3NwYW4+PC9sYWJlbD48ZGl2IGRhdGEtY29udHJvbAogICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGRfX2NvbnRyb2wtd3JhcHBlciIKICAgICAgICAgICAgICAgID48aW5wdXQgY2xhc3M9IiBmaWVsZF9fY29udHJvbCByZXF1aXJlZCIgZGF0YS1zaWdudXAtY2VsbF9waG9uZT0iIiBpZD0idXNlcl9jZWxsX3Bob25lIiBuYW1lPSJ1c2VyX2NlbGxfcGhvbmUiIHR5cGU9InRlbCIgdmFsdWU9IiI+PGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWNvbnRyb2wtZ3JvdXAKICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZC0taW52YWxpZCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZCIKICAgICAgICAgICAgPjxsYWJlbCBjbGFzcz0iZmllbGRfX2xhYmVsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBmb3I9InVzZXJfZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItY2xhc3M9ImZpZWxkX19sYWJlbC0taW52YWxpZCIKICAgICAgICAgICAgICAgICAgICA+RW1haWw8c3BhbiBjbGFzcz0iIj4mbmJzcDsqPC9zcGFuPjwvbGFiZWw+PGRpdiBkYXRhLWNvbnRyb2wKICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZpZWxkX19jb250cm9sLXdyYXBwZXIiCiAgICAgICAgICAgICAgICA+PGlucHV0IGNsYXNzPSIgZmllbGRfX2NvbnRyb2wgcmVxdWlyZWQiIGRhdGEtc2lnbnVwLWVtYWlsPSIiIGlkPSJ1c2VyX2VtYWlsIiBuYW1lPSJ1c2VyX2VtYWlsIiB0eXBlPSJlbWFpbCIgdmFsdWU9IiI+PGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWNvbnRyb2wtZ3JvdXAKICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZC0taW52YWxpZCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZCIKICAgICAgICAgICAgPjxsYWJlbCBjbGFzcz0iZmllbGRfX2xhYmVsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBmb3I9InVzZXJfcGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXJyb3ItY2xhc3M9ImZpZWxkX19sYWJlbC0taW52YWxpZCIKICAgICAgICAgICAgICAgICAgICA+TW90IGRlIHBhc3NlPHNwYW4gY2xhc3M9IiI+Jm5ic3A7Kjwvc3Bhbj48L2xhYmVsPjxkaXYgZGF0YS1jb250cm9sCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZF9fY29udHJvbC13cmFwcGVyIgogICAgICAgICAgICAgICAgPjxpbnB1dCBjbGFzcz0iIGZpZWxkX19jb250cm9sIHJlcXVpcmVkIiBkYXRhLXNpZ251cC1wYXNzd29yZD0iIiBpZD0idXNlcl9wYXNzd29yZCIgbmFtZT0idXNlcl9wYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiIHZhbHVlPSIiPjxkaXYgZGF0YS1jb250cm9sLWVycm9ycz48L2Rpdj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1jb250cm9sLWdyb3VwCiAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGQtLWludmFsaWQiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGQiCiAgICAgICAgICAgID48bGFiZWwgY2xhc3M9ImZpZWxkX19sYWJlbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yPSJ1c2VyX3Bhc3N3b3JkMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGRfX2xhYmVsLS1pbnZhbGlkIgogICAgICAgICAgICAgICAgICAgID5Db25maXJtZXIgbGUgbW90IGRlIHBhc3NlPHNwYW4gY2xhc3M9IiI+Jm5ic3A7Kjwvc3Bhbj48L2xhYmVsPjxkaXYgZGF0YS1jb250cm9sCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZF9fY29udHJvbC13cmFwcGVyIgogICAgICAgICAgICAgICAgPjxpbnB1dCBjbGFzcz0iIGZpZWxkX19jb250cm9sIHJlcXVpcmVkIiBkYXRhLXNpZ251cC1wYXNzd29yZDI9IiIgaWQ9InVzZXJfcGFzc3dvcmQyIiBuYW1lPSJ1c2VyX3Bhc3N3b3JkMiIgdHlwZT0icGFzc3dvcmQiIHZhbHVlPSIiPjxkaXYgZGF0YS1jb250cm9sLWVycm9ycz48L2Rpdj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1jb250cm9sLWdyb3VwCiAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGQtLWludmFsaWQiCiAgICAgICAgICAgICAgICBkYXRhLXNpZ251cC1vcHRpbl9wYXJ0bmVycy1jb250YWluZXIKICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGQiCiAgICAgICAgICAgID48bGFiZWwgY2xhc3M9ImZpZWxkX19sYWJlbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yPSJ1c2VyX29wdGluX3BhcnRuZXJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZF9fbGFiZWwtLWludmFsaWQiCiAgICAgICAgICAgICAgICAgICAgPkplIHNvdWhhaXRlIGLDqW7DqWZpY2llciBkZXMgbWVpbGxldXJlcyBvZmZyZXMgZGVzIHBhcnRlbmFpcmVzIGRlIE1laWxsZXVyc0FnZW50czxzcGFuIGNsYXNzPSIiPiZuYnNwOyo8L3NwYW4+PC9sYWJlbD48ZGl2IGRhdGEtY29udHJvbAogICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGRfX2NvbnRyb2wtd3JhcHBlciIKICAgICAgICAgICAgICAgID48c2VsZWN0IGNsYXNzPSIgZmllbGRfX2NvbnRyb2wgcmVxdWlyZWQgZmllbGRfX2NvbnRyb2wtLXNlbGVjdCIgZGF0YS1zaWdudXAtb3B0aW5fcGFydG5lcnM9IiIgaWQ9InVzZXJfb3B0aW5fcGFydG5lcnMiIG5hbWU9InVzZXJfb3B0aW5fcGFydG5lcnMiPjxvcHRpb24gdmFsdWU9IiI+PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMSI+T1VJLCBhdmVjIHBsYWlzaXI8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIyIj5PVUksIG1haXMgcGFzIHBsdXMgZCcxIGZvaXMgLyBtb2lzPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMyI+T1VJLCBtYWlzIHBhcyBwbHVzIGRlIDIgZm9pcyAvIG1vaXM8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIwIj5OT04sIGoneSByZW5vbmNlPC9vcHRpb24+PC9zZWxlY3Q+PGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF1dGgtLXByby1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYWJlbC1jb250YWluZXIiIGRhdGEtc2lnbnVwLWlzX3Byby1maWVsZD4KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJjaGVja2JveCIgZGF0YS1zaWdudXAtaXNfcHJvPSIiIGlkPSJ1c2VyX2lzX3BybyIgbmFtZT0idXNlcl9pc19wcm8iIHR5cGU9ImNoZWNrYm94IiB2YWx1ZT0ieSI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9InVzZXJfaXNfcHJvIiBjbGFzcz0ibGFiZWwgbGFiZWwtLXNtYWxsIGxhYmVsLS1jaGVja2JveCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYWJlbF9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+SmUgc3VpcyB1biBwcm8gZGUgbCdpbW1vYmlsaWVyPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZSIgZGF0YS1zaWdudXAtcHJvZmlsZS1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWNvbnRyb2wtZ3JvdXAKICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZC0taW52YWxpZCIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZCIKICAgICAgICAgICAgPjxsYWJlbCBjbGFzcz0iZmllbGRfX2xhYmVsIgogICAgICAgICAgICAgICAgICAgICAgICAgICBmb3I9InVzZXJfcHJvZmlsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGRfX2xhYmVsLS1pbnZhbGlkIgogICAgICAgICAgICAgICAgICAgID5Wb3RyZSBhY3Rpdml0w6kgcHJvZmVzc2lvbm5lbGxlPHNwYW4gY2xhc3M9IiI+Jm5ic3A7Kjwvc3Bhbj48L2xhYmVsPjxkaXYgZGF0YS1jb250cm9sCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmaWVsZF9fY29udHJvbC13cmFwcGVyIgogICAgICAgICAgICAgICAgPjxzZWxlY3QgY2xhc3M9ImZpZWxkX19jb250cm9sLS1zZWxlY3QgZmllbGRfX2NvbnRyb2wgcmVxdWlyZWQiIGRhdGEtc2lnbnVwLXByb2ZpbGU9IiIgaWQ9InVzZXJfcHJvZmlsZSIgbmFtZT0idXNlcl9wcm9maWxlIj48b3B0aW9uIHZhbHVlPSJfX05vbmUiPjwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IlVTRVJfUFJPRklMRS5ESUFHTk9TRVIiPkRpYWdub3N0aXF1ZXVyPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iVVNFUl9QUk9GSUxFLlJFQUxfRVNUQVRFX0VYUEVSVCI+RXhwZXJ0IGltbW9iaWxpZXI8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJVU0VSX1BST0ZJTEUuSU5TVElUVVRJT05OQUwiPkluc3RpdHV0aW9ubmVsIC8gRm9uZGF0aW9uPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iVVNFUl9QUk9GSUxFLk5PVEFSWSI+Tm90YWlyZTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IlVTRVJfUFJPRklMRS5FU1RBVEVfREVWRUxPUEVSIj5Qcm9tb3RldXIgLyBDb25zdHJ1Y3RldXI8L29wdGlvbj48b3B0aW9uIHNlbGVjdGVkIHZhbHVlPSJVU0VSX1BST0ZJTEUuUkVBTFRPUiI+QWdlbnQgaW1tb2JpbGllcjwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IlVTRVJfUFJPRklMRS5SRVBSRVNFTlRBVElWRSI+TWFuZGF0YWlyZSBpbW1vYmlsaWVyPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iVVNFUl9QUk9GSUxFLlNZTkRJQyI+QWRtaW5pc3RyYXRldXIgZGUgYmllbnMgLyBTeW5kaWM8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJVU0VSX1BST0ZJTEUuSU5TVVJFUiI+QXNzdXJldXI8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJVU0VSX1BST0ZJTEUuQkFOS0VSIj5CYW5xdWllcjwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IlVTRVJfUFJPRklMRS5BU1NFVF9BRFZJU09SIj5Db25zZWlsbGVyIGVuIEdlc3Rpb24gZGUgUGF0cmltb2luZTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IlVTRVJfUFJPRklMRS5CUk9LRVIiPkNvdXJ0aWVyPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iVVNFUl9QUk9GSUxFLk9USEVSIj5BdXRyZTwvb3B0aW9uPjwvc2VsZWN0PjxkaXYgZGF0YS1jb250cm9sLWVycm9ycz48L2Rpdj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWNvbnRyb2wtZ3JvdXAKICAgICAgICAgICAgICAgICBkYXRhLWVycm9yLWNsYXNzPSJmaWVsZC0taW52YWxpZCIKICAgICAgICAgICAgICAgIGRhdGEtc2lnbnVwLXByb2ZpbGVfcmVhbHRvcl9wb3NpdGlvbi1jb250YWluZXIKICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGQiCiAgICAgICAgICAgID48bGFiZWwgY2xhc3M9ImZpZWxkX19sYWJlbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yPSJ1c2VyX3Byb2ZpbGVfcmVhbHRvcl9wb3NpdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1lcnJvci1jbGFzcz0iZmllbGRfX2xhYmVsLS1pbnZhbGlkIgogICAgICAgICAgICAgICAgICAgID5Wb3RyZSBmb25jdGlvbjxzcGFuIGNsYXNzPSIiPiZuYnNwOyo8L3NwYW4+PC9sYWJlbD48ZGl2IGRhdGEtY29udHJvbAogICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmllbGRfX2NvbnRyb2wtd3JhcHBlciIKICAgICAgICAgICAgICAgID48c2VsZWN0IGNsYXNzPSJmaWVsZF9fY29udHJvbC0tc2VsZWN0IGZpZWxkX19jb250cm9sIHJlcXVpcmVkIiBkYXRhLXNpZ251cC1wcm9maWxlX3JlYWx0b3JfcG9zaXRpb249IiIgaWQ9InVzZXJfcHJvZmlsZV9yZWFsdG9yX3Bvc2l0aW9uIiBuYW1lPSJ1c2VyX3Byb2ZpbGVfcmVhbHRvcl9wb3NpdGlvbiI+PG9wdGlvbiBzZWxlY3RlZCB2YWx1ZT0iX19Ob25lIj48L29wdGlvbj48b3B0aW9uIHZhbHVlPSJVU0VSX1BST0ZJTEVfUkVBTFRPUl9QT1NJVElPTlMuUFJFU0lERU5UIj5QcsOpc2lkZW50IC8gR8OpcmFudDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IlVTRVJfUFJPRklMRV9SRUFMVE9SX1BPU0lUSU9OUy5ESVJFQ1RPUiI+RGlyZWN0ZXVyIC8gUmVzcG9uc2FibGUgZCdhZ2VuY2U8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJVU0VSX1BST0ZJTEVfUkVBTFRPUl9QT1NJVElPTlMuQURWSVNPUl9TQUxFUyI+Q29uc2VpbGxlciAvIE7DqWdvY2lhdGV1ciB2ZW50ZTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IlVTRVJfUFJPRklMRV9SRUFMVE9SX1BPU0lUSU9OUy5BRFZJU09SX1JFTlQiPkNvbnNlaWxsZXIgLyBOw6lnb2NpYXRldXIgbG9jYXRpb248L29wdGlvbj48b3B0aW9uIHZhbHVlPSJVU0VSX1BST0ZJTEVfUkVBTFRPUl9QT1NJVElPTlMuQURNSU5JU1RSQVRPUl9SRU5UIj5HZXN0aW9ubmFpcmUgbG9jYXRpb24gLyBzeW5kaWM8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJVU0VSX1BST0ZJTEVfUkVBTFRPUl9QT1NJVElPTlMuQVNTSVNUQU5UIj5Bc3Npc3RhbnQ8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJVU0VSX1BST0ZJTEVfUkVBTFRPUl9QT1NJVElPTlMuT1RIRVIiPkF1dHJlczwvb3B0aW9uPjwvc2VsZWN0PjxkaXYgZGF0YS1jb250cm9sLWVycm9ycz48L2Rpdj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8c2NyaXB0IHNyYz0naHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpLmpzJyBhc3luYyBkZWZlcj48L3NjcmlwdD4KPGRpdiBjbGFzcz0iZy1yZWNhcHRjaGEiIGRhdGEtc2l0ZWtleT0iNkxjdTB3OFRBQUFBQUJwempIcC10ZTE0Njk0cndjeGlNRDBOOHowayI+PC9kaXY+CgogICAgPGRpdiBkYXRhLWNvbnRyb2wtZXJyb3JzPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4IGZsZXgtanVzdGlmeS1jZW50ZXIgZmxleC1jZW50ZXIgbWFyZ2luLXRvcC1kb3VibGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGRhdGEtc2lnbnVwLXN1Ym1pdCBjbGFzcz0iYnRuIGJ0bi0tcHJpbWFyeSI+Q3LDqWVyIG1vbiBjb21wdGU8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LS1zbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIEVuIGNsaXF1YW50IHN1ciDigJxDcsOpZXIgbW9uIGNvbXB0ZeKAnSB2b3VzIGFjY2VwdGV6IG5vcwogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iL3Rlcm1zLyI+Y29uZGl0aW9ucyBnw6luw6lyYWxlcyBkJ3V0aWxpc2F0aW9uPC9hPgogICAgICAgICAgICAgICAgICAgICAgICBldCBub3RyZSAKICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Ii90ZXJtcy8jcHJpdmFjeSI+cG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6k8L2E+LgogICAgICAgICAgICAgICAgICAgICAgICBNZWlsbGV1cnNBZ2VudHMgcHJvcG9zZSBhdXggcGFydGljdWxpZXJzIHVuIHNlcnZpY2UgZCdhaWRlIMOgIHVuIHByb2pldCBpbW1vYmlsaWVyLCBkb250IGxhIHLDqWFsaXNhdGlvbiBkZSBsJ2VzdGltYXRpb24gZW4gbGlnbmUgcGV1dCBjb25zdGl0dWVyIGxlIHByw6lhbGFibGUgYXZhbnQgbCdlc3RpbWF0aW9uIHBhciBkZXMgcHJvZmVzc2lvbm5lbHMgZGUgbCdpbW1vYmlsaWVyLgogICAgICAgICAgICAgICAgICAgICAgICBNZWlsbGV1cnNBZ2VudHMgcHJvY8OoZGUgYXUgdHJhaXRlbWVudCBkZXMgZG9ubsOpZXMgbsOpY2Vzc2FpcmVzIMOgIGwndXRpbGlzYXRpb24gZGUgc2VzIHNlcnZpY2VzIDsgY2VzIGRvbm7DqWVzIHNvbnQgdW5pcXVlbWVudCBkZXN0aW7DqWVzIMOgIE1laWxsZXVyc0FnZW50cy4gVm91cyBkaXNwb3NleiBkJ3VuIGRyb2l0IGQnYWNjw6hzLCBkZSByZWN0aWZpY2F0aW9uLCBkJ2VmZmFjZW1lbnQgZXQgZCdvcHBvc2l0aW9uLCBwb3VyIGxlcyBpbmZvcm1hdGlvbnMgdm91cyBjb25jZXJuYW50LiBQb3VyIGV4ZXJjZXIgdm9zIGRyb2l0cywgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Ii9jb250YWN0LyI+Y29udGFjdGV6LW5vdXM8L2E+LgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImF1dGgtZXhwbGljYXRpb25zIj4KICAgICAgICAgICAgPHVsIGNsYXNzPSJjaGVjay1saXN0Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY2hlY2stbGlzdF9faXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZS0taDMiPkNvbmZpZGVudGlhbGl0w6k8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlZvcyBjb29yZG9ubsOpZXMgZXQgZG9ubsOpZXMgcGVyc29ubmVsbGVzIG5lIHNvbnQgamFtYWlzIHRyYW5zbWlzZXMgw6AgZGVzIHRpZXJzIHNhbnMgdm90cmUgYXV0b3Jpc2F0aW9uIHByw6lhbGFibGUuPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjaGVjay1saXN0X19pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlLS1oMyI+QW50aS1zcGFtPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5DaGV6IE1laWxsZXVyc0FnZW50cy5jb20sIHZvdXMgbmUgcmVjZXZyZXogYXVjdW4gZW1haWwgbm9uIHNvbGxpY2l0w6kuPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjaGVjay1saXN0X19pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlLS1oMyI+U2FucyBlbmdhZ2VtZW50PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5Wb3VzIHBvdXJyZXogdm91cyBkw6lzaW5zY3JpcmUgw6AgdG91dCBtb21lbnQgZXQgZmFjaWxlbWVudC48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj48L2Rpdj4KCgogICAgPGZvb3RlciBjbGFzcz0iZm9vdGVyIj4KICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9fY29udGVudCI+PGRpdiBjbGFzcz0iZm9vdGVyX19tZW51Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX19tZW51LWhlYWRlciI+QSBwcm9wb3M8L2Rpdj4KICAgICAgICAgICAgPGEgY2xhc3M9ImZvb3Rlcl9fbWVudS1pdGVtIiBocmVmPSIvYS1wcm9wb3MvdGVybXMvIj5Qb3VycXVvaSBNZWlsbGV1cnNBZ2VudHMgPzwvYT4KICAgICAgICAgICAgPGEgY2xhc3M9ImZvb3Rlcl9fbWVudS1pdGVtIiBocmVmPSIvYS1wcm9wb3MvZXNwYWNlLXByZXNzZS8iPkVzcGFjZSBwcmVzc2U8L2E+CiAgICAgICAgICAgIDxhIGNsYXNzPSJmb290ZXJfX21lbnUtaXRlbSIgaHJlZj0iL2EtcHJvcG9zL3ByZXNzZS8iPkxhIHByZXNzZSBwYXJsZSBkZSBub3VzPC9hPgogICAgICAgICAgICA8YSBjbGFzcz0iZm9vdGVyX19tZW51LWl0ZW0iIGhyZWY9Imh0dHBzOi8vY2FycmllcmUubWVpbGxldXJzYWdlbnRzLmNvbSI+Tm91cyByZWNydXRvbnMgITwvYT4KICAgICAgICAgICAgPGEgY2xhc3M9ImZvb3Rlcl9fbWVudS1pdGVtIiBocmVmPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3dpa2ltbW8vIj5NYWcgSW5mbyBXaWtpbW1vPC9hPgogICAgICAgICAgICA8YSBjbGFzcz0iZm9vdGVyX19tZW51LWl0ZW0iIGhyZWY9Imh0dHBzOi8vcHJvLm1laWxsZXVyc2FnZW50cy5jb20/dXRtX3NvdXJjZT10cmFwcGVfbGVhZCZhbXA7dXRtX21lZGl1bT13d3cmYW1wO3V0bV9jYW1wYWlnbj1Gb290ZXImYW1wO3V0bV9jb250ZW50PWZvb3RlcjptYV9wcm86ZGlzY292ZXJfbWFfcHJvIiAgZGF0YS11YS1oaXQtdHlwZT0iZXZlbnQiIGRhdGEtdWEtZXZlbnQtY2F0ZWdvcnk9IkFsbCIgZGF0YS11YS1ldmVudC1hY3Rpb249InBybzpnbzptYV9wcm8iIGRhdGEtdWEtZXZlbnQtbGFiZWw9ImZvb3RlcjptYV9wcm86ZGlzY292ZXJfbWFfcHJvIiAgPk5vcyBvZmZyZXMgcHJvPC9hPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfX21lbnUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfX21lbnUtaGVhZGVyIj5Db25kaXRpb25zPC9kaXY+CiAgICAgICAgICAgIDxhIGNsYXNzPSJmb290ZXJfX21lbnUtaXRlbSIgaHJlZj0iL3Rlcm1zLyI+Q29uZGl0aW9ucyBnw6luw6lyYWxlcyBkJ3V0aWxpc2F0aW9uPC9hPgogICAgICAgICAgICA8YSBjbGFzcz0iZm9vdGVyX19tZW51LWl0ZW0iIGhyZWY9Ii90ZXJtcy8jbGVnYWwiPk1lbnRpb25zIGzDqWdhbGVzPC9hPgogICAgICAgICAgICA8YSBjbGFzcz0iZm9vdGVyX19tZW51LWl0ZW0iIGhyZWY9Ii90ZXJtcy8jaG9ub3JhaXJlcyI+Tm9zIGhvbm9yYWlyZXMgZGUgdmVudGU8L2E+CiAgICAgICAgICAgIDxhIGNsYXNzPSJmb290ZXJfX21lbnUtaXRlbSIgaHJlZj0iL3Rlcm1zLyNwcml2YWN5Ij5Qb2xpdGlxdWUgZGUgY29uZmlkZW50aWFsaXTDqTwvYT4KICAgICAgICAgICAgPGEgY2xhc3M9ImZvb3Rlcl9fbWVudS1pdGVtIiBocmVmPSIvY29va2llcy8iPlBhcmFtw6l0cmFnZSBkZXMgY29va2llczwvYT4KICAgICAgICAgICAgPGEgY2xhc3M9ImZvb3Rlcl9fbWVudS1pdGVtIiBocmVmPSIvdGVybXMvI2NvbXBhcmF0ZXVyIj5NZW50aW9ucyBjb21wYXJhdGV1cjwvYT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX19tZW51Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX19tZW51LWhlYWRlciI+QWlkZTwvZGl2PgogICAgICAgICAgICA8YSBjbGFzcz0iZm9vdGVyX19tZW51LWl0ZW0iIGhyZWY9Ii9zdXBwb3J0L2ZhcS8iPkZvaXJlIGF1eCBxdWVzdGlvbnMgKEZBUSk8L2E+CiAgICAgICAgICAgIDxhIGNsYXNzPSJmb290ZXJfX21lbnUtaXRlbSIgaHJlZj0iL2NvbnRhY3QvIj5Db250YWN0ZXotbm91czwvYT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX19zb2NpYWwiPgogICAgICAgICAgICA8YSBjbGFzcz0ibm8tdW5kZXJsaW5lIiBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vbWVpbGxldXJzYWdlbnRzIiB0YXJnZXQ9Il9ibGFuayIgdGl0bGU9IlBhZ2UgRmFjZWJvb2sgZGUgTWVpbGxldXJzQWdlbnRzIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uIGljb24tZmFjZWJvb2siIHJvbGU9ImltZyIgYXJpYS1sYWJlbD0iUGFnZSBGYWNlYm9vayBkZSBNZWlsbGV1cnNBZ2VudHMiPjwvaT4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8YSBjbGFzcz0ibm8tdW5kZXJsaW5lIiBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL21laWxsZXVyc2FnZW50cyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJQYWdlIFR3aXR0ZXIgZGUgTWVpbGxldXJzQWdlbnRzIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uIGljb24tdHdpdHRlciIgcm9sZT0iaW1nIiBhcmlhLWxhYmVsPSJQYWdlIFR3aXR0ZXIgZGUgTWVpbGxldXJzQWdlbnRzIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX19sYXN0bGluZSI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfX2hhcHB5QXRXb3JrLWxpbmsiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3N0YXRpYy9pbWFnZXMvaGFwcHlfYXRfd29ya18yMDE4LmpwZz90PTE1ODk4NzUwMzgiIGFsdD0iTnVtw6lybyAxIGVuIDIwMTggZCdhcHLDqHMgbGUgc29uZGFnZSBIYXBweSBhdCB3b3JrIiAvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICDCqSBNZWlsbGV1cnNBZ2VudHMuIENvcHlyaWdodCAyMDA4IC0gMjAyMC4KICAgICAgICA8L2Rpdj48L2Rpdj4KPC9mb290ZXI+PC9kaXY+CjxkaXYgZGF0YS1zZWxlY3QyLXBsYWNlaG9sZGVyPjwvZGl2Pgo8ZGl2IGRhdGEtcG9waW4tcGxhY2Vob2xkZXI+PC9kaXY+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9wb2x5ZmlsbC5pby92My9wb2x5ZmlsbC5taW4uanM/ZmVhdHVyZXM9UHJvbWlzZSUyQ1Byb21pc2UucHJvdG90eXBlLmZpbmFsbHklMkNPYmplY3QuYXNzaWduJTJDT2JqZWN0LmVudHJpZXMlMkNTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzJTJDTnVtYmVyLmlzTmFOJTJDU2V0JTJDTWFwJTJDQXJyYXkuZnJvbSUyQ0FycmF5LnByb3RvdHlwZS5maW5kJTJDQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzJTJDRWxlbWVudC5wcm90b3R5cGUuZGF0YXNldCUyQ0VsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3Lm1laWxsZXVyc2FnZW50cy5jb20vc3RhdGljL2J1aWxkL3NpdGUvanMvdmVuZG9ycy5mYTY0MTdkNy5qcz90PTE1ODk4NzU0NjMiPjwvc2NyaXB0PgogICAgCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy5tZWlsbGV1cnNhZ2VudHMuY29tL3N0YXRpYy9idWlsZC9zaXRlL2pzL21haW4uNzBhNmJjOGEuanM/dD0xNTg5ODc1NDYzIj48L3NjcmlwdD4KCiAgICAKICAgICAgICA8c2NyaXB0Pjwvc2NyaXB0PgogICAgPC9ib2R5Pgo8L2h0bWw+
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:50 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:50 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=3b0cc2dc939c0b6b275fa5b3c698d38f; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "45.32.61.17:8080",
            "ip": "45.32.61.17",
            "port": "8080",
            "connectionType": "Datacenter",
            "asn": "20473",
            "isp": "Choopa, LLC",
            "type": "elite",
            "lastChecked": 1589888871,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "Heiwajima",
            "state": "13",
            "country": "JP",
            "randomUserAgent": "Mozilla\/5.0 (Linux U Android 2.2.1 ko-kr Nexus One Build\/FRG83) AppleWebKit\/533.1 (KHTML, like Gecko) Version\/4.0 Mobile Safari\/533.1 NAVER(inapp",
            "requestsRemaining": 24981
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:50 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1968245221/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Linux U Android 2.2.1 ko-kr Nexus One Build/FRG83) AppleWebKit/533.1
        (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 NAVER(inapp
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:52 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=8a189964-60ef-45fb-a7e3-40e330db0e36; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:18:52 GMT
      - __uzmb=1589894332; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:52 GMT
      - __uzmc=942431039436; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:52 GMT
      - __uzmd=1589894332; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:52 GMT
      - ab_dispatcher=45; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:18:52
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=97; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:18:52 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:48:52 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPcvA.Aw4jqyqd54L2yQpbYfkviTgM6fM; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=0eba57fe-0e5a-4c7c-a12f-717e27da3aad; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:52 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:53 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=1cc092c2334f9bc92c33d3a423dfd261; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "164.68.113.147:80",
            "ip": "164.68.113.147",
            "port": "80",
            "connectionType": "Datacenter",
            "asn": "51167",
            "isp": "Contabo GmbH",
            "type": "elite",
            "lastChecked": 1589892532,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "Nuremberg",
            "state": "BY",
            "country": "DE",
            "randomUserAgent": "Mozilla\/5.0 (iPad U CPU OS 3_2 like Mac OS X en-us) AppleWebKit\/531.21.10 (KHTML, like Gecko) Version\/4.0.4 Mobile\/7B367 Safari\/531.21.10",
            "requestsRemaining": 24980
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:53 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1968245508/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (iPad U CPU OS 3_2 like Mac OS X en-us) AppleWebKit/531.21.10
        (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:54 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=afa0ff3f-7d2c-4e61-972e-36334626e34f; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:18:54 GMT
      - __uzmb=1589894334; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:54 GMT
      - __uzmc=227561068742; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:54 GMT
      - __uzmd=1589894334; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:54 GMT
      - ab_dispatcher=13; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:18:54
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=46; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:18:54 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:48:54 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPcvg.8VwPIzF7Cixs0hyLQRhFjEuoUv4; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=910607bf-13cd-4862-878d-b21f8aba09a5; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:55 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:55 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=bef8e999dc5f861b416fd14a0b87b0fc; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "136.244.107.111:3128",
            "ip": "136.244.107.111",
            "port": "3128",
            "connectionType": "Datacenter",
            "asn": "20473",
            "isp": "Choopa, LLC",
            "type": "elite",
            "lastChecked": 1589893133,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "Amsterdam",
            "state": "NH",
            "country": "NL",
            "randomUserAgent": "Mozilla\/5.0 (X11 u Linux 2.4.2-2 i586 en-US m18) Gecko\/20010131 Netscape6\/6.01",
            "requestsRemaining": 24979
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:55 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1968455933/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (X11 u Linux 2.4.2-2 i586 en-US m18) Gecko/20010131 Netscape6/6.01
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:56 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=ea6fe632-c39b-49cc-bf32-3303042e9528; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:18:56 GMT
      - __uzmb=1589894336; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:56 GMT
      - __uzmc=805221067675; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:56 GMT
      - __uzmd=1589894336; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:56 GMT
      - ab_dispatcher=94; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:18:56
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=57; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:18:56 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:48:56 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPcwA.1mOYupIMsUmdnldSb6OT2sXgcSw; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=715bbe9c-4d3a-4278-8029-a1bb7c52f535; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:57 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:58 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=ea7d8370c0802ff4e119f6a6a59f3b6e; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "65.254.18.126:3128",
            "ip": "65.254.18.126",
            "port": "3128",
            "connectionType": "Datacenter",
            "asn": "46887",
            "isp": "Lightower Fiber Networks I, LLC",
            "type": "elite",
            "lastChecked": 1589891148,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "New York",
            "state": "NY",
            "country": "US",
            "randomUserAgent": "Mozilla\/5.0 (Linux U Android 2.1-update1 en-us ADR6300 Build\/ERE27) AppleWebKit\/530.17 (KHTML,like Gecko) Version\/4.0 Mobile Safari\/530.17",
            "requestsRemaining": 24978
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:18:58 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1968500157/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Linux U Android 2.1-update1 en-us ADR6300 Build/ERE27) AppleWebKit/530.17
        (KHTML,like Gecko) Version/4.0 Mobile Safari/530.17
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:18:59 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=b5f8d954-fcd4-4064-be7a-ab1283facefd; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:18:59 GMT
      - __uzmb=1589894339; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:59 GMT
      - __uzmc=633501081189; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:59 GMT
      - __uzmd=1589894339; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:18:59 GMT
      - ab_dispatcher=27; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:18:59
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=36; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:18:59 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:48:59 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPcww.CEZAQFAtr7jr9oGbRqg9zP7_4YM; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=20e03191-d692-43dd-a148-076961995c46; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:00 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:00 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=375888e1640ac68dfbf01b56c58f0fac; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "136.244.98.158:3128",
            "ip": "136.244.98.158",
            "port": "3128",
            "connectionType": "Datacenter",
            "asn": "20473",
            "isp": "Choopa, LLC",
            "type": "elite",
            "lastChecked": 1589889528,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "Amsterdam",
            "state": "NH",
            "country": "NL",
            "randomUserAgent": "Mozilla\/5.0 (Windows NT 6.1 rv:14.0) Gecko\/20100101 Firefox\/14.0.1",
            "requestsRemaining": 24977
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:00 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1968585257/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Windows NT 6.1 rv:14.0) Gecko/20100101 Firefox/14.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:02 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=b57b1c53-dcd3-4758-b980-1db38df62120; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:19:02 GMT
      - __uzmb=1589894342; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:02 GMT
      - __uzmc=612381061264; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:02 GMT
      - __uzmd=1589894342; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:02 GMT
      - ab_dispatcher=57; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:19:02
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=83; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:19:02 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:49:02 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPcxg.ffvpczXDfHnQhn_9TSz18wkIarw; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=be0a8309-d064-475a-aeb5-32c169f178a3; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:03 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:03 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=a1fedf54e342bc498ff7f6e794c74698; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "68.183.115.233:80",
            "ip": "68.183.115.233",
            "port": "80",
            "connectionType": "Datacenter",
            "asn": "14061",
            "isp": "Digital Ocean",
            "type": "elite",
            "lastChecked": 1589890187,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "North Bergen",
            "state": "NJ",
            "country": "US",
            "randomUserAgent": "Mozilla\/5.0 (Windows U Windows NT 5.0 en-US rv:1.4) Gecko\/20030624 Netscape\/7.1 (ax)",
            "requestsRemaining": 24976
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:04 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1968745307/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Windows U Windows NT 5.0 en-US rv:1.4) Gecko/20030624 Netscape/7.1
        (ax)
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:06 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=871a7ac4-46e4-4ae2-9ab5-8e1b366879f2; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:19:05 GMT
      - __uzmb=1589894345; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:05 GMT
      - __uzmc=170151041611; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:05 GMT
      - __uzmd=1589894345; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:05 GMT
      - ab_dispatcher=22; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:19:06
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=29; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:19:06 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:49:06 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPcyg.DkHe5a_ZQyUkBk-U1EzQzfjG8hE; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=c2de5b32-bdb7-4dad-9f81-afe63740a1b6; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:07 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:08 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=30984e18e1fcabf41fb81a44bdbb5ec0; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "45.32.39.185:3128",
            "ip": "45.32.39.185",
            "port": "3128",
            "connectionType": "Datacenter",
            "asn": "20473",
            "isp": "Choopa, LLC",
            "type": "elite",
            "lastChecked": 1589889294,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "Heiwajima",
            "state": "13",
            "country": "JP",
            "randomUserAgent": "Mozilla\/5.0 (compatible MSIE 9.0 Windows NT 6.1 WOW64 Trident\/7.0)",
            "requestsRemaining": 24975
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:08 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1968769939/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible MSIE 9.0 Windows NT 6.1 WOW64 Trident/7.0)
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:09 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=adec1fc6-70c5-45b3-8243-f4bc44aa458b; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:19:08 GMT
      - __uzmb=1589894348; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:08 GMT
      - __uzmc=674921076821; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:08 GMT
      - __uzmd=1589894348; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:08 GMT
      - ab_dispatcher=12; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:19:09
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=22; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:19:09 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:49:09 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPczQ.IlHkrauv_4tDJEHTW4hr-S0m9UM; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=f6338125-29cf-446c-a170-976ed5c5f958; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:09 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:10 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=cc15952d87538914ccfa174e46107263; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "140.82.8.145:3128",
            "ip": "140.82.8.145",
            "port": "3128",
            "connectionType": "Datacenter",
            "asn": "20473",
            "isp": "Choopa, LLC",
            "type": "elite",
            "lastChecked": 1589893551,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "Piscataway",
            "state": "NJ",
            "country": "US",
            "randomUserAgent": "Mozilla\/5.0 (compatible MSIE 10.0 Windows Phone 8.0 Trident\/6.0 IEMobile\/10.0 ARM Touch NOKIA Lumia 920)",
            "requestsRemaining": 24974
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:10 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1968838267/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible MSIE 10.0 Windows Phone 8.0 Trident/6.0 IEMobile/10.0
        ARM Touch NOKIA Lumia 920)
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:11 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=21b4741a-c121-4141-af82-afb813930375; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:19:11 GMT
      - __uzmb=1589894351; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:11 GMT
      - __uzmc=530781067123; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:11 GMT
      - __uzmd=1589894351; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:11 GMT
      - ab_dispatcher=70; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:19:11
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=40; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:19:11 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:49:11 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPczw.-EW9O6VYReWNSt0s2zd7HKnoVE8; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=196ab887-1111-4f68-9637-317d8239d26f; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:11 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:12 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=5a8d016c3c491e2b6748abc00810f76f; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "104.41.46.166:8080",
            "ip": "104.41.46.166",
            "port": "8080",
            "connectionType": "Datacenter",
            "asn": "8075",
            "isp": "Microsoft Corporation",
            "type": "elite",
            "lastChecked": 1589888750,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "Campinas",
            "state": "SP",
            "country": "BR",
            "randomUserAgent": "Mozilla\/5.0 (Linux U Android 4.1 en-us Nexus One Build\/FRF91) AppleWebKit\/533.1 (KHTML, like Gecko) Version\/4.0 Mobile Safari\/533.1",
            "requestsRemaining": 24973
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:12 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1968855589/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Linux U Android 4.1 en-us Nexus One Build/FRF91) AppleWebKit/533.1
        (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:13 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=d3dfa644-d3d4-424f-a8c7-18005676d37e; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:19:12 GMT
      - __uzmb=1589894352; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:12 GMT
      - __uzmc=905731096083; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:12 GMT
      - __uzmd=1589894352; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:12 GMT
      - ab_dispatcher=23; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:19:13
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=93; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:19:13 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:49:13 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPc0Q.F6eCEWVddjCcQ3IwgKPxA7IwMg8; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=97f5cbf6-024a-4d50-b4a5-26ded2a40cb4; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:13 GMT
- request:
    method: get
    uri: http://falcon.proxyrotator.com:51337/?apiKey=doaB65LrNunVGsCQmW8c7SpZKtgy9Hzk&connectionType=Datacenter
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - falcon.proxyrotator.com:51337
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:14 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      Set-Cookie:
      - PHPSESSID=94c49ed6b0ba31ffdb001e539a093dad; path=/
    body:
      encoding: ASCII-8BIT
      string: |-
        {
            "proxy": "205.185.115.100:8080",
            "ip": "205.185.115.100",
            "port": "8080",
            "connectionType": "Datacenter",
            "asn": "53667",
            "isp": "FranTech Solutions",
            "type": "elite",
            "lastChecked": 1589892711,
            "get": true,
            "post": true,
            "cookies": true,
            "referer": true,
            "userAgent": true,
            "city": "San Jose",
            "state": "CA",
            "country": "US",
            "randomUserAgent": "Mozilla\/5.0 (Linux Android 4.1.2 DROID RAZR HD Build\/9.8.1Q-94-1) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/33.0.1750.166 Mobile Safari\/537.36",
            "requestsRemaining": 24972
        }
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:14 GMT
- request:
    method: get
    uri: https://www.meilleursagents.com/annonces/achat/1969017640/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Linux Android 4.1.2 DROID RAZR HD Build/9.8.1Q-94-1) AppleWebKit/537.36
        (KHTML, like Gecko) Chrome/33.0.1750.166 Mobile Safari/537.36
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 19 May 2020 13:19:16 GMT
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - __uzma=b210e42c-f7c0-46fd-a1f9-f902f171e0be; HttpOnly; path=/; Expires=Tue,
        17-Nov-20 13:19:15 GMT
      - __uzmb=1589894355; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:15 GMT
      - __uzmc=848901065283; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:15 GMT
      - __uzmd=1589894355; HttpOnly; path=/; Expires=Tue, 17-Nov-20 13:19:15 GMT
      - ab_dispatcher=93; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021 13:19:16
        GMT; Max-Age=31536000.0; Path=/
      - deploy_dispatcher=32; Domain=.meilleursagents.com; Expires=Wed, 19-May-2021
        13:19:16 GMT; Max-Age=31536000.0; Path=/
      - landing_page_template="{ga_page_template}"; Domain=.meilleursagents.com; Expires=Tue,
        19-May-2020 15:49:16 GMT; Path=/
      - session=eyJhbmFseXRpY3NfdGFncyI6W119.XsPc1A.u6_bOHdi5cyPReKB-0brf4pH-Ns; Domain=.meilleursagents.com;
        Secure; HttpOnly; Path=/
      - visitor_uuid=f996e15d-4632-41e1-a525-954874150def; Domain=.meilleursagents.com;
        Path=/
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      X-Content-Security-Policy-Report-Only:
      - 'default-src ''self'' cas.avalon.perfdrive.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; frame-src ''self'' blob: www.facebook.com connect.facebook.net
        www.google.com www.googletagmanager.com www.empruntis.com player.vimeo.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; img-src
        data: blob: www.google.com www.googletagmanager.com www.google.fr www.google-analytics.com
        stats.g.doubleclick.net www.facebook.com gl.hostcg.com api.mapbox.com static.intercomassets.com
        maps.googleapis.com maps.gstatic.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; style-src ''self'' ''unsafe-inline'' fonts.googleapis.com
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; child-src
        blob:; media-src *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech;
        script-src ''unsafe-inline'' ''unsafe-eval'' polyfill.io www.google-analytics.com
        maps.googleapis.com www.gstatic.com www.google.com www.googletagmanager.com
        connect.facebook.net *.realytics.io cdn-eu.realytics.net gl.hostcg.com actorssl-5637.kxcdn.com
        js-agent.newrelic.com bam.nr-data.net *.perfdrive.com *.algolia.net *.algolianet.com
        widget.intercom.io js.intercomcdn.com d3js.org code.highcharts.com/highcharts.js
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; connect-src
        ''self'' api.realytics.io m.realytics.io sentry.io *.mapbox.com tile.meilleursagents.com
        stats.g.doubleclick.net www.google-analytics.com bam.nr-data.net *.perfdrive.com
        statcache-5637.kxcdn.com www.facebook.com *.algolia.net *.algolianet.com api-iam.intercom.io
        *.meilleursagents.com *.meilleursagents.org *.meilleursagents.tech; font-src
        ''self'' fonts.gstatic.com js.intercomcdn.com *.meilleursagents.com *.meilleursagents.org
        *.meilleursagents.tech; worker-src blob:; report-uri /csp-report'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains
      Referrer-Policy:
      - no-referrer-when-downgrade
      X-Ua-Compatible:
      - IE=Edge
      Vary:
      - Cookie
      Via:
      - 1.1 google
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 19 May 2020 13:19:16 GMT
recorded_with: VCR 5.1.0
